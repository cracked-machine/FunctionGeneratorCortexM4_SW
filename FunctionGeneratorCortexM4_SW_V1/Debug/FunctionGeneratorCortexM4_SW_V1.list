
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001300c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  080131f0  080131f0  000231f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146a8  080146a8  00031e80  2**0
                  CONTENTS
  4 .ARM          00000000  080146a8  080146a8  00031e80  2**0
                  CONTENTS
  5 .preinit_array 00000000  080146a8  080146a8  00031e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146a8  080146a8  000246a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080146ac  080146ac  000246ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e80  20000000  080146b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  20001e80  08016530  00031e80  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002954  08016530  00032954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045d3c  00000000  00000000  00031eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000079ba  00000000  00000000  00077bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002260  00000000  00000000  0007f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e18  00000000  00000000  00081808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035341  00000000  00000000  00083620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ef1f  00000000  00000000  000b8961  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001267d7  00000000  00000000  000e7880  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020e057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000970c  00000000  00000000  0020e0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e80 	.word	0x20001e80
 80001fc:	00000000 	.word	0x00000000
 8000200:	080131d4 	.word	0x080131d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e84 	.word	0x20001e84
 800021c:	080131d4 	.word	0x080131d4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d fc56 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f92e 	bl	8000f74 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	080131f0 	.word	0x080131f0

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d fc8b 	bl	800e642 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00e f8e1 	bl	800eef4 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d fec3 	bl	800eac0 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00d fc32 	bl	800e5c0 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fbc6 	bl	80084f0 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fbc6 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e ffc5 	bl	800fcf8 <puts>
	#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	080131fc 	.word	0x080131fc
 8000d78:	0801320c 	.word	0x0801320c

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09c      	sub	sp, #112	; 0x70
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fffb 	bl	8004d7c <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4870      	ldr	r0, [pc, #448]	; (8000f50 <DM_UpdateDisplay+0x1d4>)
 8000d8e:	f00e ffb3 	bl	800fcf8 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fff3 	bl	8004d7c <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fe8e 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fe8a 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fe86 	bl	8003ac8 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 fd75 	bl	80048ac <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4861      	ldr	r0, [pc, #388]	; (8000f50 <DM_UpdateDisplay+0x1d4>)
 8000dca:	f00e ff95 	bl	800fcf8 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fd6d 	bl	80048ac <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f934 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f930 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f92c 	bl	8003050 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fea1 	bl	8004b40 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4853      	ldr	r0, [pc, #332]	; (8000f54 <DM_UpdateDisplay+0x1d8>)
 8000e06:	f00e ff77 	bl	800fcf8 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fe99 	bl	8004b40 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fdc4 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fdc0 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fdbc 	bl	80039ac <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fd2d 	bl	8004894 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4845      	ldr	r0, [pc, #276]	; (8000f58 <DM_UpdateDisplay+0x1dc>)
 8000e42:	f00e ff59 	bl	800fcf8 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fd25 	bl	8004894 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb9b 	bl	80015a4 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb97 	bl	80015a4 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb93 	bl	80015a4 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb8f 	bl	80015a4 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fed8 	bl	8003c3c <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4832      	ldr	r0, [pc, #200]	; (8000f5c <DM_UpdateDisplay+0x1e0>)
 8000e94:	f00e ff30 	bl	800fcf8 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	482b      	ldr	r0, [pc, #172]	; (8000f60 <DM_UpdateDisplay+0x1e4>)
 8000eb2:	f00d fb85 	bl	800e5c0 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ebe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec2:	222e      	movs	r2, #46	; 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00e fa56 	bl	800f378 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ecc:	f004 f9c0 	bl	8005250 <BO_GetOutputBias>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ed6:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <DM_UpdateDisplay+0x1e8>)
 8000ed8:	2132      	movs	r1, #50	; 0x32
 8000eda:	f00e ff15 	bl	800fd08 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 100, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ede:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ee2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	22b4      	movs	r2, #180	; 0xb4
 8000ef0:	2164      	movs	r1, #100	; 0x64
 8000ef2:	f00d fb65 	bl	800e5c0 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	222e      	movs	r2, #46	; 0x2e
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00e fa39 	bl	800f378 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <DM_UpdateDisplay+0x1ec>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	4638      	mov	r0, r7
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <DM_UpdateDisplay+0x1f0>)
 8000f0e:	2132      	movs	r1, #50	; 0x32
 8000f10:	f00e fefa 	bl	800fd08 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 100, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f14:	4638      	mov	r0, r7
 8000f16:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2300      	movs	r3, #0
 8000f22:	22be      	movs	r2, #190	; 0xbe
 8000f24:	2164      	movs	r1, #100	; 0x64
 8000f26:	f00d fb4b 	bl	800e5c0 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <DM_UpdateDisplay+0x1f4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00a      	beq.n	8000f48 <DM_UpdateDisplay+0x1cc>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f32:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	22be      	movs	r2, #190	; 0xbe
 8000f40:	210a      	movs	r1, #10
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <DM_UpdateDisplay+0x1f4>)
 8000f44:	f00d fb3c 	bl	800e5c0 <ILI9341_Draw_Text>

}
 8000f48:	bf00      	nop
 8000f4a:	3768      	adds	r7, #104	; 0x68
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0801321c 	.word	0x0801321c
 8000f54:	08013230 	.word	0x08013230
 8000f58:	08013244 	.word	0x08013244
 8000f5c:	08013258 	.word	0x08013258
 8000f60:	0801326c 	.word	0x0801326c
 8000f64:	08013290 	.word	0x08013290
 8000f68:	40012c00 	.word	0x40012c00
 8000f6c:	080132a0 	.word	0x080132a0
 8000f70:	20001e9c 	.word	0x20001e9c

08000f74 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b09f      	sub	sp, #124	; 0x7c
 8000f78:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f92:	238c      	movs	r3, #140	; 0x8c
 8000f94:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f98:	2328      	movs	r3, #40	; 0x28
 8000f9a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000fb0:	23af      	movs	r3, #175	; 0xaf
 8000fb2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000fb6:	2346      	movs	r3, #70	; 0x46
 8000fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000fce:	238a      	movs	r3, #138	; 0x8a
 8000fd0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000fda:	4bc4      	ldr	r3, [pc, #784]	; (80012ec <DM_DisplayFormattedOutput+0x378>)
 8000fdc:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000fec:	23a1      	movs	r3, #161	; 0xa1
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000ff2:	2382      	movs	r3, #130	; 0x82
 8000ff4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000ff8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001002:	b29b      	uxth	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800100e:	460a      	mov	r2, r1
 8001010:	2103      	movs	r1, #3
 8001012:	48b7      	ldr	r0, [pc, #732]	; (80012f0 <DM_DisplayFormattedOutput+0x37c>)
 8001014:	f00d fad4 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800101c:	b299      	uxth	r1, r3
 800101e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001022:	b29b      	uxth	r3, r3
 8001024:	2200      	movs	r2, #0
 8001026:	9201      	str	r2, [sp, #4]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800102e:	460a      	mov	r2, r1
 8001030:	2103      	movs	r1, #3
 8001032:	48b0      	ldr	r0, [pc, #704]	; (80012f4 <DM_DisplayFormattedOutput+0x380>)
 8001034:	f00d fac4 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001038:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800103c:	b299      	uxth	r1, r3
 800103e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001042:	b29b      	uxth	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800104e:	460a      	mov	r2, r1
 8001050:	2103      	movs	r1, #3
 8001052:	48a9      	ldr	r0, [pc, #676]	; (80012f8 <DM_DisplayFormattedOutput+0x384>)
 8001054:	f00d fab4 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001058:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800105c:	b299      	uxth	r1, r3
 800105e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001062:	b29b      	uxth	r3, r3
 8001064:	2200      	movs	r2, #0
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800106e:	460a      	mov	r2, r1
 8001070:	2103      	movs	r1, #3
 8001072:	48a2      	ldr	r0, [pc, #648]	; (80012fc <DM_DisplayFormattedOutput+0x388>)
 8001074:	f00d faa4 	bl	800e5c0 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001078:	f005 fac2 	bl	8006600 <SM_GetOutputInHertz>
 800107c:	ee10 3a10 	vmov	r3, s0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a9b      	ldr	r2, [pc, #620]	; (8001300 <DM_DisplayFormattedOutput+0x38c>)
 8001094:	210f      	movs	r1, #15
 8001096:	f00e fe37 	bl	800fd08 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800109a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800109e:	b299      	uxth	r1, r3
 80010a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80010a4:	b29c      	uxth	r4, r3
 80010a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80010b0:	2200      	movs	r2, #0
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010ba:	4622      	mov	r2, r4
 80010bc:	f00d fa80 	bl	800e5c0 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80010c0:	2000      	movs	r0, #0
 80010c2:	f004 ff6f 	bl	8005fa4 <SM_GetOutputChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 80010ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01d      	beq.n	8001110 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 80010d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa5d 	bl	8000598 <__aeabi_f2d>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010e6:	e9cd 3400 	strd	r3, r4, [sp]
 80010ea:	4a86      	ldr	r2, [pc, #536]	; (8001304 <DM_DisplayFormattedOutput+0x390>)
 80010ec:	2112      	movs	r1, #18
 80010ee:	f00e fe0b 	bl	800fd08 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80010f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa4e 	bl	8000598 <__aeabi_f2d>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	f107 0014 	add.w	r0, r7, #20
 8001104:	e9cd 3400 	strd	r3, r4, [sp]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <DM_DisplayFormattedOutput+0x394>)
 800110a:	2114      	movs	r1, #20
 800110c:	f00e fdfc 	bl	800fd08 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001110:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001114:	b299      	uxth	r1, r3
 8001116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800111a:	b29c      	uxth	r4, r3
 800111c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001120:	b29b      	uxth	r3, r3
 8001122:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001130:	4622      	mov	r2, r4
 8001132:	f00d fa45 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001136:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800113a:	b299      	uxth	r1, r3
 800113c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001140:	b29c      	uxth	r4, r3
 8001142:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001146:	b29b      	uxth	r3, r3
 8001148:	f107 0014 	add.w	r0, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001156:	4622      	mov	r2, r4
 8001158:	f00d fa32 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800115c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001160:	b29b      	uxth	r3, r3
 8001162:	3380      	adds	r3, #128	; 0x80
 8001164:	b299      	uxth	r1, r3
 8001166:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800116a:	b298      	uxth	r0, r3
 800116c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001170:	b29b      	uxth	r3, r3
 8001172:	2200      	movs	r2, #0
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800117c:	4602      	mov	r2, r0
 800117e:	4863      	ldr	r0, [pc, #396]	; (800130c <DM_DisplayFormattedOutput+0x398>)
 8001180:	f00d fa1e 	bl	800e5c0 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001184:	f004 f864 	bl	8005250 <BO_GetOutputBias>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <DM_DisplayFormattedOutput+0x222>
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
 8001194:	e00b      	b.n	80011ae <DM_DisplayFormattedOutput+0x23a>
 8001196:	f004 f85b 	bl	8005250 <BO_GetOutputBias>
 800119a:	ee07 0a90 	vmov	s15, r0
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80011ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011b0:	f7ff f9f2 	bl	8000598 <__aeabi_f2d>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	f107 0008 	add.w	r0, r7, #8
 80011bc:	e9cd 3400 	strd	r3, r4, [sp]
 80011c0:	4a53      	ldr	r2, [pc, #332]	; (8001310 <DM_DisplayFormattedOutput+0x39c>)
 80011c2:	210c      	movs	r1, #12
 80011c4:	f00e fda0 	bl	800fd08 <sniprintf>
	if(BO_GetBiasPolarity())
 80011c8:	f003 ffa8 	bl	800511c <BO_GetBiasPolarity>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <DM_DisplayFormattedOutput+0x3a0>)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4611      	mov	r1, r2
 80011da:	8019      	strh	r1, [r3, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	0c12      	lsrs	r2, r2, #16
 80011e0:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e2:	f107 0208 	add.w	r2, r7, #8
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00e fdc0 	bl	800fd70 <strcat>
 80011f0:	4604      	mov	r4, r0
 80011f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011f6:	b299      	uxth	r1, r3
 80011f8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011fc:	b298      	uxth	r0, r3
 80011fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001202:	b29b      	uxth	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	9201      	str	r2, [sp, #4]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800120e:	4602      	mov	r2, r0
 8001210:	4620      	mov	r0, r4
 8001212:	f00d f9d5 	bl	800e5c0 <ILI9341_Draw_Text>
 8001216:	e021      	b.n	800125c <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 8001218:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <DM_DisplayFormattedOutput+0x3a4>)
 800121a:	463b      	mov	r3, r7
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	4611      	mov	r1, r2
 8001220:	8019      	strh	r1, [r3, #0]
 8001222:	3302      	adds	r3, #2
 8001224:	0c12      	lsrs	r2, r2, #16
 8001226:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	463b      	mov	r3, r7
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f00e fd9d 	bl	800fd70 <strcat>
 8001236:	4604      	mov	r4, r0
 8001238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800123c:	b299      	uxth	r1, r3
 800123e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001242:	b298      	uxth	r0, r3
 8001244:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001248:	b29b      	uxth	r3, r3
 800124a:	2200      	movs	r2, #0
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001254:	4602      	mov	r2, r0
 8001256:	4620      	mov	r0, r4
 8001258:	f00d f9b2 	bl	800e5c0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800125c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001260:	b29b      	uxth	r3, r3
 8001262:	2200      	movs	r2, #0
 8001264:	9201      	str	r2, [sp, #4]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800126c:	22aa      	movs	r2, #170	; 0xaa
 800126e:	2103      	movs	r1, #3
 8001270:	482a      	ldr	r0, [pc, #168]	; (800131c <DM_DisplayFormattedOutput+0x3a8>)
 8001272:	f00d f9a5 	bl	800e5c0 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001276:	2000      	movs	r0, #0
 8001278:	f004 fe94 	bl	8005fa4 <SM_GetOutputChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800128c:	2b06      	cmp	r3, #6
 800128e:	f200 8091 	bhi.w	80013b4 <DM_DisplayFormattedOutput+0x440>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <DM_DisplayFormattedOutput+0x324>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012b5 	.word	0x080012b5
 800129c:	080012d1 	.word	0x080012d1
 80012a0:	08001329 	.word	0x08001329
 80012a4:	08001345 	.word	0x08001345
 80012a8:	08001361 	.word	0x08001361
 80012ac:	0800137d 	.word	0x0800137d
 80012b0:	08001399 	.word	0x08001399
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80012b4:	233c      	movs	r3, #60	; 0x3c
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <DM_DisplayFormattedOutput+0x3ac>)
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012c4:	2203      	movs	r2, #3
 80012c6:	218c      	movs	r1, #140	; 0x8c
 80012c8:	2050      	movs	r0, #80	; 0x50
 80012ca:	f00c ffd5 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 80012ce:	e071      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <DM_DisplayFormattedOutput+0x3b0>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00c ffc7 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 80012ea:	e063      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
 80012ec:	3a449ba6 	.word	0x3a449ba6
 80012f0:	080132b0 	.word	0x080132b0
 80012f4:	080132c0 	.word	0x080132c0
 80012f8:	080132d0 	.word	0x080132d0
 80012fc:	080132e0 	.word	0x080132e0
 8001300:	080132f0 	.word	0x080132f0
 8001304:	08013300 	.word	0x08013300
 8001308:	0801330c 	.word	0x0801330c
 800130c:	08013318 	.word	0x08013318
 8001310:	08013320 	.word	0x08013320
 8001314:	08013340 	.word	0x08013340
 8001318:	08013344 	.word	0x08013344
 800131c:	0801332c 	.word	0x0801332c
 8001320:	20000e9c 	.word	0x20000e9c
 8001324:	20000f8c 	.word	0x20000f8c
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001328:	233c      	movs	r3, #60	; 0x3c
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	23c8      	movs	r3, #200	; 0xc8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001338:	2203      	movs	r2, #3
 800133a:	21a0      	movs	r1, #160	; 0xa0
 800133c:	2050      	movs	r0, #80	; 0x50
 800133e:	f00c ff9b 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 8001342:	e037      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001344:	233c      	movs	r3, #60	; 0x3c
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	23c8      	movs	r3, #200	; 0xc8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001354:	2203      	movs	r2, #3
 8001356:	21a0      	movs	r1, #160	; 0xa0
 8001358:	2050      	movs	r0, #80	; 0x50
 800135a:	f00c ff8d 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 800135e:	e029      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001360:	233c      	movs	r3, #60	; 0x3c
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	23c8      	movs	r3, #200	; 0xc8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001370:	2203      	movs	r2, #3
 8001372:	21a0      	movs	r1, #160	; 0xa0
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f00c ff7f 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 800137a:	e01b      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800137c:	233c      	movs	r3, #60	; 0x3c
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	23c8      	movs	r3, #200	; 0xc8
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f240 23fd 	movw	r3, #765	; 0x2fd
 800138c:	2203      	movs	r2, #3
 800138e:	21a0      	movs	r1, #160	; 0xa0
 8001390:	2050      	movs	r0, #80	; 0x50
 8001392:	f00c ff71 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 8001396:	e00d      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001398:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800139c:	b29b      	uxth	r3, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	9201      	str	r2, [sp, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80013a8:	22aa      	movs	r2, #170	; 0xaa
 80013aa:	2150      	movs	r1, #80	; 0x50
 80013ac:	484d      	ldr	r0, [pc, #308]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80013ae:	f00d f907 	bl	800e5c0 <ILI9341_Draw_Text>
			break;
 80013b2:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013c4:	22aa      	movs	r2, #170	; 0xaa
 80013c6:	21b4      	movs	r1, #180	; 0xb4
 80013c8:	4847      	ldr	r0, [pc, #284]	; (80014e8 <DM_DisplayFormattedOutput+0x574>)
 80013ca:	f00d f8f9 	bl	800e5c0 <ILI9341_Draw_Text>
	eOutput_mode sync_output_func = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 80013ce:	2001      	movs	r0, #1
 80013d0:	f004 fde8 	bl	8005fa4 <SM_GetOutputChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(sync_output_func)
 80013e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d873      	bhi.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <DM_DisplayFormattedOutput+0x47c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	0800140d 	.word	0x0800140d
 80013f4:	08001429 	.word	0x08001429
 80013f8:	08001445 	.word	0x08001445
 80013fc:	08001461 	.word	0x08001461
 8001400:	0800147d 	.word	0x0800147d
 8001404:	08001499 	.word	0x08001499
 8001408:	080014b5 	.word	0x080014b5
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, SYNC_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800140c:	233c      	movs	r3, #60	; 0x3c
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <DM_DisplayFormattedOutput+0x578>)
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800141c:	2203      	movs	r2, #3
 800141e:	218c      	movs	r1, #140	; 0x8c
 8001420:	20f5      	movs	r0, #245	; 0xf5
 8001422:	f00c ff29 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 8001426:	e053      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001428:	233c      	movs	r3, #60	; 0x3c
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <DM_DisplayFormattedOutput+0x57c>)
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	23c8      	movs	r3, #200	; 0xc8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001438:	2203      	movs	r2, #3
 800143a:	21a0      	movs	r1, #160	; 0xa0
 800143c:	20f5      	movs	r0, #245	; 0xf5
 800143e:	f00c ff1b 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 8001442:	e045      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001444:	233c      	movs	r3, #60	; 0x3c
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	23c8      	movs	r3, #200	; 0xc8
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001454:	2203      	movs	r2, #3
 8001456:	21a0      	movs	r1, #160	; 0xa0
 8001458:	20f5      	movs	r0, #245	; 0xf5
 800145a:	f00c ff0d 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 800145e:	e037      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001460:	233c      	movs	r3, #60	; 0x3c
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	23c8      	movs	r3, #200	; 0xc8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001470:	2203      	movs	r2, #3
 8001472:	21a0      	movs	r1, #160	; 0xa0
 8001474:	20f5      	movs	r0, #245	; 0xf5
 8001476:	f00c feff 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 800147a:	e029      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800147c:	233c      	movs	r3, #60	; 0x3c
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	23c8      	movs	r3, #200	; 0xc8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800148c:	2203      	movs	r2, #3
 800148e:	21a0      	movs	r1, #160	; 0xa0
 8001490:	20f5      	movs	r0, #245	; 0xf5
 8001492:	f00c fef1 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 8001496:	e01b      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001498:	233c      	movs	r3, #60	; 0x3c
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	23c8      	movs	r3, #200	; 0xc8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014a8:	2203      	movs	r2, #3
 80014aa:	21a0      	movs	r1, #160	; 0xa0
 80014ac:	20f5      	movs	r0, #245	; 0xf5
 80014ae:	f00c fee3 	bl	800e278 <ILI9341_Draw_Wave>
			break;
 80014b2:	e00d      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, SYNC_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80014b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	9201      	str	r2, [sp, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014c4:	22aa      	movs	r2, #170	; 0xaa
 80014c6:	21f5      	movs	r1, #245	; 0xf5
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80014ca:	f00d f879 	bl	800e5c0 <ILI9341_Draw_Text>
			break;
 80014ce:	bf00      	nop
	}



}
 80014d0:	bf00      	nop
 80014d2:	376c      	adds	r7, #108	; 0x6c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	20000cbc 	.word	0x20000cbc
 80014dc:	20000dac 	.word	0x20000dac
 80014e0:	2000107c 	.word	0x2000107c
 80014e4:	08013334 	.word	0x08013334
 80014e8:	08013338 	.word	0x08013338
 80014ec:	20000e9c 	.word	0x20000e9c
 80014f0:	20000f8c 	.word	0x20000f8c

080014f4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <DM_RefreshScreen+0x88>)
 80014fc:	f00a ff46 	bl	800c38c <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001500:	2000      	movs	r0, #0
 8001502:	f00d fadd 	bl	800eac0 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001506:	2300      	movs	r3, #0
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2302      	movs	r3, #2
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2328      	movs	r3, #40	; 0x28
 8001516:	2250      	movs	r2, #80	; 0x50
 8001518:	21c8      	movs	r1, #200	; 0xc8
 800151a:	2000      	movs	r0, #0
 800151c:	f00c feed 	bl	800e2fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001520:	2300      	movs	r3, #0
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2302      	movs	r3, #2
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2328      	movs	r3, #40	; 0x28
 8001530:	2250      	movs	r2, #80	; 0x50
 8001532:	21c8      	movs	r1, #200	; 0xc8
 8001534:	2050      	movs	r0, #80	; 0x50
 8001536:	f00c fee0 	bl	800e2fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800153a:	2300      	movs	r3, #0
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2302      	movs	r3, #2
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	2250      	movs	r2, #80	; 0x50
 800154c:	21c8      	movs	r1, #200	; 0xc8
 800154e:	20a0      	movs	r0, #160	; 0xa0
 8001550:	f00c fed3 	bl	800e2fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001554:	2300      	movs	r3, #0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2302      	movs	r3, #2
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	2250      	movs	r2, #80	; 0x50
 8001566:	21c8      	movs	r1, #200	; 0xc8
 8001568:	20f0      	movs	r0, #240	; 0xf0
 800156a:	f00c fec6 	bl	800e2fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <DM_RefreshScreen+0x88>)
 8001570:	f00a fed6 	bl	800c320 <HAL_TIM_Base_Start_IT>


}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200027d0 	.word	0x200027d0

08001580 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <DM_SetErrorDebugMsg+0x1c>)
 800158c:	212d      	movs	r1, #45	; 0x2d
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <DM_SetErrorDebugMsg+0x20>)
 8001590:	f00e fbba 	bl	800fd08 <sniprintf>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	080133c4 	.word	0x080133c4
 80015a0:	20001e9c 	.word	0x20001e9c

080015a4 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d816      	bhi.n	80015e4 <FreqMenu_DrawMenu+0x40>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <FreqMenu_DrawMenu+0x18>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015d3 	.word	0x080015d3
 80015c4:	080015d9 	.word	0x080015d9
 80015c8:	080015df 	.word	0x080015df
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80015cc:	f000 f810 	bl	80015f0 <FreqMenu_DrawMainMenu>
			break;
 80015d0:	e009      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80015d2:	f000 f849 	bl	8001668 <FreqMenu_DrawPresetMenu>
			break;
 80015d6:	e006      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80015d8:	f001 faf4 	bl	8002bc4 <FreqMenu_DrawAdjustMenu>
			break;
 80015dc:	e003      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80015de:	f001 fb07 	bl	8002bf0 <FreqMenu_DrawSweepMenu>
			break;
 80015e2:	e000      	b.n	80015e6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015e4:	bf00      	nop

	}
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop

080015f0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	220a      	movs	r2, #10
 8001604:	2105      	movs	r1, #5
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <FreqMenu_DrawMainMenu+0x68>)
 8001608:	f00c ffda 	bl	800e5c0 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800160c:	f7ff fcb2 	bl	8000f74 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001610:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2302      	movs	r3, #2
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2300      	movs	r3, #0
 800161c:	22d2      	movs	r2, #210	; 0xd2
 800161e:	2105      	movs	r1, #5
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <FreqMenu_DrawMainMenu+0x6c>)
 8001622:	f00c ffcd 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001626:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2302      	movs	r3, #2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	22d2      	movs	r2, #210	; 0xd2
 8001634:	2157      	movs	r1, #87	; 0x57
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <FreqMenu_DrawMainMenu+0x70>)
 8001638:	f00c ffc2 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800163c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2302      	movs	r3, #2
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	22d2      	movs	r2, #210	; 0xd2
 800164a:	21ae      	movs	r1, #174	; 0xae
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <FreqMenu_DrawMainMenu+0x74>)
 800164e:	f00c ffb7 	bl	800e5c0 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	080133c8 	.word	0x080133c8
 800165c:	080133d4 	.word	0x080133d4
 8001660:	080133dc 	.word	0x080133dc
 8001664:	080133e4 	.word	0x080133e4

08001668 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2302      	movs	r3, #2
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	220a      	movs	r2, #10
 800167c:	2105      	movs	r1, #5
 800167e:	4886      	ldr	r0, [pc, #536]	; (8001898 <FreqMenu_DrawPresetMenu+0x230>)
 8001680:	f00c ff9e 	bl	800e5c0 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001684:	2328      	movs	r3, #40	; 0x28
 8001686:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001688:	233c      	movs	r3, #60	; 0x3c
 800168a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800168c:	2350      	movs	r3, #80	; 0x50
 800168e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001694:	2378      	movs	r3, #120	; 0x78
 8001696:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001698:	238c      	movs	r3, #140	; 0x8c
 800169a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80016a0:	f003 ffd2 	bl	8005648 <FreqO_GetFPresetObject>
 80016a4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f001 825d 	beq.w	8002b68 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f000 849a 	beq.w	8001ff0 <FreqMenu_DrawPresetMenu+0x988>
 80016bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d817      	bhi.n	80016f4 <FreqMenu_DrawPresetMenu+0x8c>
 80016c4:	2b32      	cmp	r3, #50	; 0x32
 80016c6:	f000 81b3 	beq.w	8001a30 <FreqMenu_DrawPresetMenu+0x3c8>
 80016ca:	2b32      	cmp	r3, #50	; 0x32
 80016cc:	d806      	bhi.n	80016dc <FreqMenu_DrawPresetMenu+0x74>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d038      	beq.n	8001744 <FreqMenu_DrawPresetMenu+0xdc>
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	f000 8102 	beq.w	80018dc <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 80016d8:	f001 ba52 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016dc:	2bfa      	cmp	r3, #250	; 0xfa
 80016de:	f000 8317 	beq.w	8001d10 <FreqMenu_DrawPresetMenu+0x6a8>
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e6:	f000 83d9 	beq.w	8001e9c <FreqMenu_DrawPresetMenu+0x834>
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	f000 8266 	beq.w	8001bbc <FreqMenu_DrawPresetMenu+0x554>
}
 80016f0:	f001 ba46 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016f8:	4293      	cmp	r3, r2
 80016fa:	f000 8758 	beq.w	80025ae <FreqMenu_DrawPresetMenu+0xf46>
 80016fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001702:	4293      	cmp	r3, r2
 8001704:	d80f      	bhi.n	8001726 <FreqMenu_DrawPresetMenu+0xbe>
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	f000 85e0 	beq.w	80022d0 <FreqMenu_DrawPresetMenu+0xc68>
 8001710:	f242 7210 	movw	r2, #10000	; 0x2710
 8001714:	4293      	cmp	r3, r2
 8001716:	f000 86a1 	beq.w	800245c <FreqMenu_DrawPresetMenu+0xdf4>
 800171a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800171e:	f000 852d 	beq.w	800217c <FreqMenu_DrawPresetMenu+0xb14>
}
 8001722:	f001 ba2d 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001726:	4a5d      	ldr	r2, [pc, #372]	; (800189c <FreqMenu_DrawPresetMenu+0x234>)
 8001728:	4293      	cmp	r3, r2
 800172a:	f001 80ae 	beq.w	800288a <FreqMenu_DrawPresetMenu+0x1222>
 800172e:	4a5c      	ldr	r2, [pc, #368]	; (80018a0 <FreqMenu_DrawPresetMenu+0x238>)
 8001730:	4293      	cmp	r3, r2
 8001732:	f001 816f 	beq.w	8002a14 <FreqMenu_DrawPresetMenu+0x13ac>
 8001736:	f24c 3250 	movw	r2, #50000	; 0xc350
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 87fc 	beq.w	8002738 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001740:	f001 ba1e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	b29a      	uxth	r2, r3
 8001748:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2302      	movs	r3, #2
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2105      	movs	r1, #5
 8001756:	4853      	ldr	r0, [pc, #332]	; (80018a4 <FreqMenu_DrawPresetMenu+0x23c>)
 8001758:	f00c ff32 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	b29a      	uxth	r2, r3
 8001760:	2300      	movs	r3, #0
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2302      	movs	r3, #2
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800176c:	2105      	movs	r1, #5
 800176e:	484e      	ldr	r0, [pc, #312]	; (80018a8 <FreqMenu_DrawPresetMenu+0x240>)
 8001770:	f00c ff26 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001774:	7b7b      	ldrb	r3, [r7, #13]
 8001776:	b29a      	uxth	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	2302      	movs	r3, #2
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001784:	2105      	movs	r1, #5
 8001786:	4849      	ldr	r0, [pc, #292]	; (80018ac <FreqMenu_DrawPresetMenu+0x244>)
 8001788:	f00c ff1a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800178c:	7b3b      	ldrb	r3, [r7, #12]
 800178e:	b29a      	uxth	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2302      	movs	r3, #2
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800179c:	2105      	movs	r1, #5
 800179e:	4844      	ldr	r0, [pc, #272]	; (80018b0 <FreqMenu_DrawPresetMenu+0x248>)
 80017a0:	f00c ff0e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2302      	movs	r3, #2
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b4:	2105      	movs	r1, #5
 80017b6:	483f      	ldr	r0, [pc, #252]	; (80018b4 <FreqMenu_DrawPresetMenu+0x24c>)
 80017b8:	f00c ff02 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017bc:	7abb      	ldrb	r3, [r7, #10]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017cc:	2105      	movs	r1, #5
 80017ce:	483a      	ldr	r0, [pc, #232]	; (80018b8 <FreqMenu_DrawPresetMenu+0x250>)
 80017d0:	f00c fef6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d4:	7a7b      	ldrb	r3, [r7, #9]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e4:	2105      	movs	r1, #5
 80017e6:	4835      	ldr	r0, [pc, #212]	; (80018bc <FreqMenu_DrawPresetMenu+0x254>)
 80017e8:	f00c feea 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2302      	movs	r3, #2
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017fc:	2178      	movs	r1, #120	; 0x78
 80017fe:	4830      	ldr	r0, [pc, #192]	; (80018c0 <FreqMenu_DrawPresetMenu+0x258>)
 8001800:	f00c fede 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	b29a      	uxth	r2, r3
 8001808:	2300      	movs	r3, #0
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	2302      	movs	r3, #2
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001814:	2178      	movs	r1, #120	; 0x78
 8001816:	482b      	ldr	r0, [pc, #172]	; (80018c4 <FreqMenu_DrawPresetMenu+0x25c>)
 8001818:	f00c fed2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800181c:	7b7b      	ldrb	r3, [r7, #13]
 800181e:	b29a      	uxth	r2, r3
 8001820:	2300      	movs	r3, #0
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2302      	movs	r3, #2
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800182c:	2178      	movs	r1, #120	; 0x78
 800182e:	4826      	ldr	r0, [pc, #152]	; (80018c8 <FreqMenu_DrawPresetMenu+0x260>)
 8001830:	f00c fec6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001834:	7b3b      	ldrb	r3, [r7, #12]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2302      	movs	r3, #2
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001844:	2178      	movs	r1, #120	; 0x78
 8001846:	4821      	ldr	r0, [pc, #132]	; (80018cc <FreqMenu_DrawPresetMenu+0x264>)
 8001848:	f00c feba 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	b29a      	uxth	r2, r3
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2302      	movs	r3, #2
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800185c:	2178      	movs	r1, #120	; 0x78
 800185e:	481c      	ldr	r0, [pc, #112]	; (80018d0 <FreqMenu_DrawPresetMenu+0x268>)
 8001860:	f00c feae 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001864:	7abb      	ldrb	r3, [r7, #10]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2302      	movs	r3, #2
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001874:	2178      	movs	r1, #120	; 0x78
 8001876:	4817      	ldr	r0, [pc, #92]	; (80018d4 <FreqMenu_DrawPresetMenu+0x26c>)
 8001878:	f00c fea2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800187c:	7a7b      	ldrb	r3, [r7, #9]
 800187e:	b29a      	uxth	r2, r3
 8001880:	2300      	movs	r3, #0
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2302      	movs	r3, #2
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800188c:	2178      	movs	r1, #120	; 0x78
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <FreqMenu_DrawPresetMenu+0x270>)
 8001890:	f00c fe96 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8001894:	f001 b974 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001898:	080133ec 	.word	0x080133ec
 800189c:	000124f8 	.word	0x000124f8
 80018a0:	000186a0 	.word	0x000186a0
 80018a4:	08013400 	.word	0x08013400
 80018a8:	08013408 	.word	0x08013408
 80018ac:	08013410 	.word	0x08013410
 80018b0:	08013418 	.word	0x08013418
 80018b4:	08013420 	.word	0x08013420
 80018b8:	08013428 	.word	0x08013428
 80018bc:	08013430 	.word	0x08013430
 80018c0:	08013438 	.word	0x08013438
 80018c4:	08013440 	.word	0x08013440
 80018c8:	08013448 	.word	0x08013448
 80018cc:	08013450 	.word	0x08013450
 80018d0:	08013458 	.word	0x08013458
 80018d4:	08013460 	.word	0x08013460
 80018d8:	08013468 	.word	0x08013468
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ec:	2105      	movs	r1, #5
 80018ee:	48a5      	ldr	r0, [pc, #660]	; (8001b84 <FreqMenu_DrawPresetMenu+0x51c>)
 80018f0:	f00c fe66 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2302      	movs	r3, #2
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	2105      	movs	r1, #5
 8001906:	48a0      	ldr	r0, [pc, #640]	; (8001b88 <FreqMenu_DrawPresetMenu+0x520>)
 8001908:	f00c fe5a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800190c:	7b7b      	ldrb	r3, [r7, #13]
 800190e:	b29a      	uxth	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2302      	movs	r3, #2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800191c:	2105      	movs	r1, #5
 800191e:	489b      	ldr	r0, [pc, #620]	; (8001b8c <FreqMenu_DrawPresetMenu+0x524>)
 8001920:	f00c fe4e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	b29a      	uxth	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2302      	movs	r3, #2
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001934:	2105      	movs	r1, #5
 8001936:	4896      	ldr	r0, [pc, #600]	; (8001b90 <FreqMenu_DrawPresetMenu+0x528>)
 8001938:	f00c fe42 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800193c:	7afb      	ldrb	r3, [r7, #11]
 800193e:	b29a      	uxth	r2, r3
 8001940:	2300      	movs	r3, #0
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2302      	movs	r3, #2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800194c:	2105      	movs	r1, #5
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <FreqMenu_DrawPresetMenu+0x52c>)
 8001950:	f00c fe36 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001954:	7abb      	ldrb	r3, [r7, #10]
 8001956:	b29a      	uxth	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2302      	movs	r3, #2
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001964:	2105      	movs	r1, #5
 8001966:	488c      	ldr	r0, [pc, #560]	; (8001b98 <FreqMenu_DrawPresetMenu+0x530>)
 8001968:	f00c fe2a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800196c:	7a7b      	ldrb	r3, [r7, #9]
 800196e:	b29a      	uxth	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2302      	movs	r3, #2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800197c:	2105      	movs	r1, #5
 800197e:	4887      	ldr	r0, [pc, #540]	; (8001b9c <FreqMenu_DrawPresetMenu+0x534>)
 8001980:	f00c fe1e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	b29a      	uxth	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2302      	movs	r3, #2
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001994:	2178      	movs	r1, #120	; 0x78
 8001996:	4882      	ldr	r0, [pc, #520]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x538>)
 8001998:	f00c fe12 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800199c:	7bbb      	ldrb	r3, [r7, #14]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2302      	movs	r3, #2
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ac:	2178      	movs	r1, #120	; 0x78
 80019ae:	487d      	ldr	r0, [pc, #500]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x53c>)
 80019b0:	f00c fe06 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c4:	2178      	movs	r1, #120	; 0x78
 80019c6:	4878      	ldr	r0, [pc, #480]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x540>)
 80019c8:	f00c fdfa 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019cc:	7b3b      	ldrb	r3, [r7, #12]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019dc:	2178      	movs	r1, #120	; 0x78
 80019de:	4873      	ldr	r0, [pc, #460]	; (8001bac <FreqMenu_DrawPresetMenu+0x544>)
 80019e0:	f00c fdee 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019e4:	7afb      	ldrb	r3, [r7, #11]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2302      	movs	r3, #2
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019f4:	2178      	movs	r1, #120	; 0x78
 80019f6:	486e      	ldr	r0, [pc, #440]	; (8001bb0 <FreqMenu_DrawPresetMenu+0x548>)
 80019f8:	f00c fde2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019fc:	7abb      	ldrb	r3, [r7, #10]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a0c:	2178      	movs	r1, #120	; 0x78
 8001a0e:	4869      	ldr	r0, [pc, #420]	; (8001bb4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001a10:	f00c fdd6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a14:	7a7b      	ldrb	r3, [r7, #9]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a24:	2178      	movs	r1, #120	; 0x78
 8001a26:	4864      	ldr	r0, [pc, #400]	; (8001bb8 <FreqMenu_DrawPresetMenu+0x550>)
 8001a28:	f00c fdca 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8001a2c:	f001 b8a8 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a40:	2105      	movs	r1, #5
 8001a42:	4850      	ldr	r0, [pc, #320]	; (8001b84 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a44:	f00c fdbc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2302      	movs	r3, #2
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	484b      	ldr	r0, [pc, #300]	; (8001b88 <FreqMenu_DrawPresetMenu+0x520>)
 8001a5c:	f00c fdb0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a60:	7b7b      	ldrb	r3, [r7, #13]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2105      	movs	r1, #5
 8001a72:	4846      	ldr	r0, [pc, #280]	; (8001b8c <FreqMenu_DrawPresetMenu+0x524>)
 8001a74:	f00c fda4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a78:	7b3b      	ldrb	r3, [r7, #12]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2302      	movs	r3, #2
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	4841      	ldr	r0, [pc, #260]	; (8001b90 <FreqMenu_DrawPresetMenu+0x528>)
 8001a8c:	f00c fd98 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a90:	7afb      	ldrb	r3, [r7, #11]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	483c      	ldr	r0, [pc, #240]	; (8001b94 <FreqMenu_DrawPresetMenu+0x52c>)
 8001aa4:	f00c fd8c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa8:	7abb      	ldrb	r3, [r7, #10]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	4837      	ldr	r0, [pc, #220]	; (8001b98 <FreqMenu_DrawPresetMenu+0x530>)
 8001abc:	f00c fd80 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac0:	7a7b      	ldrb	r3, [r7, #9]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	4832      	ldr	r0, [pc, #200]	; (8001b9c <FreqMenu_DrawPresetMenu+0x534>)
 8001ad4:	f00c fd74 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae8:	2178      	movs	r1, #120	; 0x78
 8001aea:	482d      	ldr	r0, [pc, #180]	; (8001ba0 <FreqMenu_DrawPresetMenu+0x538>)
 8001aec:	f00c fd68 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af0:	7bbb      	ldrb	r3, [r7, #14]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	2302      	movs	r3, #2
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x53c>)
 8001b04:	f00c fd5c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x540>)
 8001b1c:	f00c fd50 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b20:	7b3b      	ldrb	r3, [r7, #12]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b30:	2178      	movs	r1, #120	; 0x78
 8001b32:	481e      	ldr	r0, [pc, #120]	; (8001bac <FreqMenu_DrawPresetMenu+0x544>)
 8001b34:	f00c fd44 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2302      	movs	r3, #2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b48:	2178      	movs	r1, #120	; 0x78
 8001b4a:	4819      	ldr	r0, [pc, #100]	; (8001bb0 <FreqMenu_DrawPresetMenu+0x548>)
 8001b4c:	f00c fd38 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b50:	7abb      	ldrb	r3, [r7, #10]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b64:	f00c fd2c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b68:	7a7b      	ldrb	r3, [r7, #9]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2302      	movs	r3, #2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b78:	2178      	movs	r1, #120	; 0x78
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <FreqMenu_DrawPresetMenu+0x550>)
 8001b7c:	f00c fd20 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8001b80:	f000 bffe 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001b84:	08013400 	.word	0x08013400
 8001b88:	08013408 	.word	0x08013408
 8001b8c:	08013410 	.word	0x08013410
 8001b90:	08013418 	.word	0x08013418
 8001b94:	08013420 	.word	0x08013420
 8001b98:	08013428 	.word	0x08013428
 8001b9c:	08013430 	.word	0x08013430
 8001ba0:	08013438 	.word	0x08013438
 8001ba4:	08013440 	.word	0x08013440
 8001ba8:	08013448 	.word	0x08013448
 8001bac:	08013450 	.word	0x08013450
 8001bb0:	08013458 	.word	0x08013458
 8001bb4:	08013460 	.word	0x08013460
 8001bb8:	08013468 	.word	0x08013468
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	48a5      	ldr	r0, [pc, #660]	; (8001e64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001bd0:	f00c fcf6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be4:	2105      	movs	r1, #5
 8001be6:	48a0      	ldr	r0, [pc, #640]	; (8001e68 <FreqMenu_DrawPresetMenu+0x800>)
 8001be8:	f00c fcea 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bec:	7b7b      	ldrb	r3, [r7, #13]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	489b      	ldr	r0, [pc, #620]	; (8001e6c <FreqMenu_DrawPresetMenu+0x804>)
 8001c00:	f00c fcde 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c04:	7b3b      	ldrb	r3, [r7, #12]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	4896      	ldr	r0, [pc, #600]	; (8001e70 <FreqMenu_DrawPresetMenu+0x808>)
 8001c18:	f00c fcd2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2302      	movs	r3, #2
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	4891      	ldr	r0, [pc, #580]	; (8001e74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001c30:	f00c fcc6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c34:	7abb      	ldrb	r3, [r7, #10]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c44:	2105      	movs	r1, #5
 8001c46:	488c      	ldr	r0, [pc, #560]	; (8001e78 <FreqMenu_DrawPresetMenu+0x810>)
 8001c48:	f00c fcba 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c4c:	7a7b      	ldrb	r3, [r7, #9]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2302      	movs	r3, #2
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	4887      	ldr	r0, [pc, #540]	; (8001e7c <FreqMenu_DrawPresetMenu+0x814>)
 8001c60:	f00c fcae 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c74:	2178      	movs	r1, #120	; 0x78
 8001c76:	4882      	ldr	r0, [pc, #520]	; (8001e80 <FreqMenu_DrawPresetMenu+0x818>)
 8001c78:	f00c fca2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2302      	movs	r3, #2
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c8c:	2178      	movs	r1, #120	; 0x78
 8001c8e:	487d      	ldr	r0, [pc, #500]	; (8001e84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c90:	f00c fc96 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7b7b      	ldrb	r3, [r7, #13]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2178      	movs	r1, #120	; 0x78
 8001ca6:	4878      	ldr	r0, [pc, #480]	; (8001e88 <FreqMenu_DrawPresetMenu+0x820>)
 8001ca8:	f00c fc8a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7b3b      	ldrb	r3, [r7, #12]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2178      	movs	r1, #120	; 0x78
 8001cbe:	4873      	ldr	r0, [pc, #460]	; (8001e8c <FreqMenu_DrawPresetMenu+0x824>)
 8001cc0:	f00c fc7e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2178      	movs	r1, #120	; 0x78
 8001cd6:	486e      	ldr	r0, [pc, #440]	; (8001e90 <FreqMenu_DrawPresetMenu+0x828>)
 8001cd8:	f00c fc72 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7abb      	ldrb	r3, [r7, #10]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2178      	movs	r1, #120	; 0x78
 8001cee:	4869      	ldr	r0, [pc, #420]	; (8001e94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cf0:	f00c fc66 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf4:	7a7b      	ldrb	r3, [r7, #9]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d04:	2178      	movs	r1, #120	; 0x78
 8001d06:	4864      	ldr	r0, [pc, #400]	; (8001e98 <FreqMenu_DrawPresetMenu+0x830>)
 8001d08:	f00c fc5a 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8001d0c:	f000 bf38 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2302      	movs	r3, #2
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d20:	2105      	movs	r1, #5
 8001d22:	4850      	ldr	r0, [pc, #320]	; (8001e64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001d24:	f00c fc4c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2302      	movs	r3, #2
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d38:	2105      	movs	r1, #5
 8001d3a:	484b      	ldr	r0, [pc, #300]	; (8001e68 <FreqMenu_DrawPresetMenu+0x800>)
 8001d3c:	f00c fc40 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d50:	2105      	movs	r1, #5
 8001d52:	4846      	ldr	r0, [pc, #280]	; (8001e6c <FreqMenu_DrawPresetMenu+0x804>)
 8001d54:	f00c fc34 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d58:	7b3b      	ldrb	r3, [r7, #12]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2302      	movs	r3, #2
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4841      	ldr	r0, [pc, #260]	; (8001e70 <FreqMenu_DrawPresetMenu+0x808>)
 8001d6c:	f00c fc28 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d70:	7afb      	ldrb	r3, [r7, #11]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	483c      	ldr	r0, [pc, #240]	; (8001e74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d84:	f00c fc1c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d88:	7abb      	ldrb	r3, [r7, #10]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2302      	movs	r3, #2
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d98:	2105      	movs	r1, #5
 8001d9a:	4837      	ldr	r0, [pc, #220]	; (8001e78 <FreqMenu_DrawPresetMenu+0x810>)
 8001d9c:	f00c fc10 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da0:	7a7b      	ldrb	r3, [r7, #9]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2302      	movs	r3, #2
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db0:	2105      	movs	r1, #5
 8001db2:	4832      	ldr	r0, [pc, #200]	; (8001e7c <FreqMenu_DrawPresetMenu+0x814>)
 8001db4:	f00c fc04 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc8:	2178      	movs	r1, #120	; 0x78
 8001dca:	482d      	ldr	r0, [pc, #180]	; (8001e80 <FreqMenu_DrawPresetMenu+0x818>)
 8001dcc:	f00c fbf8 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	4828      	ldr	r0, [pc, #160]	; (8001e84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001de4:	f00c fbec 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de8:	7b7b      	ldrb	r3, [r7, #13]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	2302      	movs	r3, #2
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	4823      	ldr	r0, [pc, #140]	; (8001e88 <FreqMenu_DrawPresetMenu+0x820>)
 8001dfc:	f00c fbe0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e10:	2178      	movs	r1, #120	; 0x78
 8001e12:	481e      	ldr	r0, [pc, #120]	; (8001e8c <FreqMenu_DrawPresetMenu+0x824>)
 8001e14:	f00c fbd4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2302      	movs	r3, #2
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <FreqMenu_DrawPresetMenu+0x828>)
 8001e2c:	f00c fbc8 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e44:	f00c fbbc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e48:	7a7b      	ldrb	r3, [r7, #9]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	2302      	movs	r3, #2
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e58:	2178      	movs	r1, #120	; 0x78
 8001e5a:	480f      	ldr	r0, [pc, #60]	; (8001e98 <FreqMenu_DrawPresetMenu+0x830>)
 8001e5c:	f00c fbb0 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8001e60:	f000 be8e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8001e64:	08013400 	.word	0x08013400
 8001e68:	08013408 	.word	0x08013408
 8001e6c:	08013410 	.word	0x08013410
 8001e70:	08013418 	.word	0x08013418
 8001e74:	08013420 	.word	0x08013420
 8001e78:	08013428 	.word	0x08013428
 8001e7c:	08013430 	.word	0x08013430
 8001e80:	08013438 	.word	0x08013438
 8001e84:	08013440 	.word	0x08013440
 8001e88:	08013448 	.word	0x08013448
 8001e8c:	08013450 	.word	0x08013450
 8001e90:	08013458 	.word	0x08013458
 8001e94:	08013460 	.word	0x08013460
 8001e98:	08013468 	.word	0x08013468
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eac:	2105      	movs	r1, #5
 8001eae:	48a5      	ldr	r0, [pc, #660]	; (8002144 <FreqMenu_DrawPresetMenu+0xadc>)
 8001eb0:	f00c fb86 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	48a0      	ldr	r0, [pc, #640]	; (8002148 <FreqMenu_DrawPresetMenu+0xae0>)
 8001ec8:	f00c fb7a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001edc:	2105      	movs	r1, #5
 8001ede:	489b      	ldr	r0, [pc, #620]	; (800214c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ee0:	f00c fb6e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee4:	7b3b      	ldrb	r3, [r7, #12]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2302      	movs	r3, #2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	4896      	ldr	r0, [pc, #600]	; (8002150 <FreqMenu_DrawPresetMenu+0xae8>)
 8001ef8:	f00c fb62 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2302      	movs	r3, #2
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	4891      	ldr	r0, [pc, #580]	; (8002154 <FreqMenu_DrawPresetMenu+0xaec>)
 8001f10:	f00c fb56 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f14:	7abb      	ldrb	r3, [r7, #10]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	2302      	movs	r3, #2
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2105      	movs	r1, #5
 8001f26:	488c      	ldr	r0, [pc, #560]	; (8002158 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001f28:	f00c fb4a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f2c:	7a7b      	ldrb	r3, [r7, #9]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2302      	movs	r3, #2
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	4887      	ldr	r0, [pc, #540]	; (800215c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f40:	f00c fb3e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f54:	2178      	movs	r1, #120	; 0x78
 8001f56:	4882      	ldr	r0, [pc, #520]	; (8002160 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f58:	f00c fb32 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	2302      	movs	r3, #2
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f6c:	2178      	movs	r1, #120	; 0x78
 8001f6e:	487d      	ldr	r0, [pc, #500]	; (8002164 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f70:	f00c fb26 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f84:	2178      	movs	r1, #120	; 0x78
 8001f86:	4878      	ldr	r0, [pc, #480]	; (8002168 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f88:	f00c fb1a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7b3b      	ldrb	r3, [r7, #12]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2178      	movs	r1, #120	; 0x78
 8001f9e:	4873      	ldr	r0, [pc, #460]	; (800216c <FreqMenu_DrawPresetMenu+0xb04>)
 8001fa0:	f00c fb0e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2178      	movs	r1, #120	; 0x78
 8001fb6:	486e      	ldr	r0, [pc, #440]	; (8002170 <FreqMenu_DrawPresetMenu+0xb08>)
 8001fb8:	f00c fb02 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7abb      	ldrb	r3, [r7, #10]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2178      	movs	r1, #120	; 0x78
 8001fce:	4869      	ldr	r0, [pc, #420]	; (8002174 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001fd0:	f00c faf6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2178      	movs	r1, #120	; 0x78
 8001fe6:	4864      	ldr	r0, [pc, #400]	; (8002178 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fe8:	f00c faea 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8001fec:	f000 bdc8 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002000:	2105      	movs	r1, #5
 8002002:	4850      	ldr	r0, [pc, #320]	; (8002144 <FreqMenu_DrawPresetMenu+0xadc>)
 8002004:	f00c fadc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	b29a      	uxth	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2302      	movs	r3, #2
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002018:	2105      	movs	r1, #5
 800201a:	484b      	ldr	r0, [pc, #300]	; (8002148 <FreqMenu_DrawPresetMenu+0xae0>)
 800201c:	f00c fad0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2302      	movs	r3, #2
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002030:	2105      	movs	r1, #5
 8002032:	4846      	ldr	r0, [pc, #280]	; (800214c <FreqMenu_DrawPresetMenu+0xae4>)
 8002034:	f00c fac4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002038:	7b3b      	ldrb	r3, [r7, #12]
 800203a:	b29a      	uxth	r2, r3
 800203c:	2300      	movs	r3, #0
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002048:	2105      	movs	r1, #5
 800204a:	4841      	ldr	r0, [pc, #260]	; (8002150 <FreqMenu_DrawPresetMenu+0xae8>)
 800204c:	f00c fab8 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002060:	2105      	movs	r1, #5
 8002062:	483c      	ldr	r0, [pc, #240]	; (8002154 <FreqMenu_DrawPresetMenu+0xaec>)
 8002064:	f00c faac 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	b29a      	uxth	r2, r3
 800206c:	2300      	movs	r3, #0
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	2302      	movs	r3, #2
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002078:	2105      	movs	r1, #5
 800207a:	4837      	ldr	r0, [pc, #220]	; (8002158 <FreqMenu_DrawPresetMenu+0xaf0>)
 800207c:	f00c faa0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2105      	movs	r1, #5
 8002092:	4832      	ldr	r0, [pc, #200]	; (800215c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002094:	f00c fa94 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2302      	movs	r3, #2
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a8:	2178      	movs	r1, #120	; 0x78
 80020aa:	482d      	ldr	r0, [pc, #180]	; (8002160 <FreqMenu_DrawPresetMenu+0xaf8>)
 80020ac:	f00c fa88 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2302      	movs	r3, #2
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c0:	2178      	movs	r1, #120	; 0x78
 80020c2:	4828      	ldr	r0, [pc, #160]	; (8002164 <FreqMenu_DrawPresetMenu+0xafc>)
 80020c4:	f00c fa7c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c8:	7b7b      	ldrb	r3, [r7, #13]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	4823      	ldr	r0, [pc, #140]	; (8002168 <FreqMenu_DrawPresetMenu+0xb00>)
 80020dc:	f00c fa70 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e0:	7b3b      	ldrb	r3, [r7, #12]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	2302      	movs	r3, #2
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f0:	2178      	movs	r1, #120	; 0x78
 80020f2:	481e      	ldr	r0, [pc, #120]	; (800216c <FreqMenu_DrawPresetMenu+0xb04>)
 80020f4:	f00c fa64 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2302      	movs	r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002108:	2178      	movs	r1, #120	; 0x78
 800210a:	4819      	ldr	r0, [pc, #100]	; (8002170 <FreqMenu_DrawPresetMenu+0xb08>)
 800210c:	f00c fa58 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002110:	7abb      	ldrb	r3, [r7, #10]
 8002112:	b29a      	uxth	r2, r3
 8002114:	2300      	movs	r3, #0
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2302      	movs	r3, #2
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002120:	2178      	movs	r1, #120	; 0x78
 8002122:	4814      	ldr	r0, [pc, #80]	; (8002174 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002124:	f00c fa4c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002128:	7a7b      	ldrb	r3, [r7, #9]
 800212a:	b29a      	uxth	r2, r3
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2302      	movs	r3, #2
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002138:	2178      	movs	r1, #120	; 0x78
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <FreqMenu_DrawPresetMenu+0xb10>)
 800213c:	f00c fa40 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8002140:	f000 bd1e 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002144:	08013400 	.word	0x08013400
 8002148:	08013408 	.word	0x08013408
 800214c:	08013410 	.word	0x08013410
 8002150:	08013418 	.word	0x08013418
 8002154:	08013420 	.word	0x08013420
 8002158:	08013428 	.word	0x08013428
 800215c:	08013430 	.word	0x08013430
 8002160:	08013438 	.word	0x08013438
 8002164:	08013440 	.word	0x08013440
 8002168:	08013448 	.word	0x08013448
 800216c:	08013450 	.word	0x08013450
 8002170:	08013458 	.word	0x08013458
 8002174:	08013460 	.word	0x08013460
 8002178:	08013468 	.word	0x08013468
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2302      	movs	r3, #2
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800218c:	2105      	movs	r1, #5
 800218e:	48a5      	ldr	r0, [pc, #660]	; (8002424 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002190:	f00c fa16 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a4:	2105      	movs	r1, #5
 80021a6:	48a0      	ldr	r0, [pc, #640]	; (8002428 <FreqMenu_DrawPresetMenu+0xdc0>)
 80021a8:	f00c fa0a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ac:	7b7b      	ldrb	r3, [r7, #13]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021bc:	2105      	movs	r1, #5
 80021be:	489b      	ldr	r0, [pc, #620]	; (800242c <FreqMenu_DrawPresetMenu+0xdc4>)
 80021c0:	f00c f9fe 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c4:	7b3b      	ldrb	r3, [r7, #12]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d4:	2105      	movs	r1, #5
 80021d6:	4896      	ldr	r0, [pc, #600]	; (8002430 <FreqMenu_DrawPresetMenu+0xdc8>)
 80021d8:	f00c f9f2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ec:	2105      	movs	r1, #5
 80021ee:	4891      	ldr	r0, [pc, #580]	; (8002434 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021f0:	f00c f9e6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f4:	7abb      	ldrb	r3, [r7, #10]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002204:	2105      	movs	r1, #5
 8002206:	488c      	ldr	r0, [pc, #560]	; (8002438 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002208:	f00c f9da 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800220c:	7a7b      	ldrb	r3, [r7, #9]
 800220e:	b29a      	uxth	r2, r3
 8002210:	2300      	movs	r3, #0
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800221c:	2105      	movs	r1, #5
 800221e:	4887      	ldr	r0, [pc, #540]	; (800243c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002220:	f00c f9ce 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	b29a      	uxth	r2, r3
 8002228:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	2302      	movs	r3, #2
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2300      	movs	r3, #0
 8002234:	2178      	movs	r1, #120	; 0x78
 8002236:	4882      	ldr	r0, [pc, #520]	; (8002440 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002238:	f00c f9c2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800223c:	7bbb      	ldrb	r3, [r7, #14]
 800223e:	b29a      	uxth	r2, r3
 8002240:	2300      	movs	r3, #0
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	2302      	movs	r3, #2
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800224c:	2178      	movs	r1, #120	; 0x78
 800224e:	487d      	ldr	r0, [pc, #500]	; (8002444 <FreqMenu_DrawPresetMenu+0xddc>)
 8002250:	f00c f9b6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7b7b      	ldrb	r3, [r7, #13]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2178      	movs	r1, #120	; 0x78
 8002266:	4878      	ldr	r0, [pc, #480]	; (8002448 <FreqMenu_DrawPresetMenu+0xde0>)
 8002268:	f00c f9aa 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7b3b      	ldrb	r3, [r7, #12]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2178      	movs	r1, #120	; 0x78
 800227e:	4873      	ldr	r0, [pc, #460]	; (800244c <FreqMenu_DrawPresetMenu+0xde4>)
 8002280:	f00c f99e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	b29a      	uxth	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002294:	2178      	movs	r1, #120	; 0x78
 8002296:	486e      	ldr	r0, [pc, #440]	; (8002450 <FreqMenu_DrawPresetMenu+0xde8>)
 8002298:	f00c f992 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7abb      	ldrb	r3, [r7, #10]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2178      	movs	r1, #120	; 0x78
 80022ae:	4869      	ldr	r0, [pc, #420]	; (8002454 <FreqMenu_DrawPresetMenu+0xdec>)
 80022b0:	f00c f986 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7a7b      	ldrb	r3, [r7, #9]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2178      	movs	r1, #120	; 0x78
 80022c6:	4864      	ldr	r0, [pc, #400]	; (8002458 <FreqMenu_DrawPresetMenu+0xdf0>)
 80022c8:	f00c f97a 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 80022cc:	f000 bc58 	b.w	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2302      	movs	r3, #2
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e0:	2105      	movs	r1, #5
 80022e2:	4850      	ldr	r0, [pc, #320]	; (8002424 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022e4:	f00c f96c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2302      	movs	r3, #2
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f8:	2105      	movs	r1, #5
 80022fa:	484b      	ldr	r0, [pc, #300]	; (8002428 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022fc:	f00c f960 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002300:	7b7b      	ldrb	r3, [r7, #13]
 8002302:	b29a      	uxth	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2302      	movs	r3, #2
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002310:	2105      	movs	r1, #5
 8002312:	4846      	ldr	r0, [pc, #280]	; (800242c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002314:	f00c f954 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002318:	7b3b      	ldrb	r3, [r7, #12]
 800231a:	b29a      	uxth	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2302      	movs	r3, #2
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002328:	2105      	movs	r1, #5
 800232a:	4841      	ldr	r0, [pc, #260]	; (8002430 <FreqMenu_DrawPresetMenu+0xdc8>)
 800232c:	f00c f948 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	b29a      	uxth	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2302      	movs	r3, #2
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002340:	2105      	movs	r1, #5
 8002342:	483c      	ldr	r0, [pc, #240]	; (8002434 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002344:	f00c f93c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002348:	7abb      	ldrb	r3, [r7, #10]
 800234a:	b29a      	uxth	r2, r3
 800234c:	2300      	movs	r3, #0
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	2302      	movs	r3, #2
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002358:	2105      	movs	r1, #5
 800235a:	4837      	ldr	r0, [pc, #220]	; (8002438 <FreqMenu_DrawPresetMenu+0xdd0>)
 800235c:	f00c f930 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002360:	7a7b      	ldrb	r3, [r7, #9]
 8002362:	b29a      	uxth	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2302      	movs	r3, #2
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002370:	2105      	movs	r1, #5
 8002372:	4832      	ldr	r0, [pc, #200]	; (800243c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002374:	f00c f924 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	b29a      	uxth	r2, r3
 800237c:	2300      	movs	r3, #0
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2302      	movs	r3, #2
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002388:	2178      	movs	r1, #120	; 0x78
 800238a:	482d      	ldr	r0, [pc, #180]	; (8002440 <FreqMenu_DrawPresetMenu+0xdd8>)
 800238c:	f00c f918 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002390:	7bbb      	ldrb	r3, [r7, #14]
 8002392:	b29a      	uxth	r2, r3
 8002394:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2302      	movs	r3, #2
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	2178      	movs	r1, #120	; 0x78
 80023a2:	4828      	ldr	r0, [pc, #160]	; (8002444 <FreqMenu_DrawPresetMenu+0xddc>)
 80023a4:	f00c f90c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a8:	7b7b      	ldrb	r3, [r7, #13]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2302      	movs	r3, #2
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b8:	2178      	movs	r1, #120	; 0x78
 80023ba:	4823      	ldr	r0, [pc, #140]	; (8002448 <FreqMenu_DrawPresetMenu+0xde0>)
 80023bc:	f00c f900 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c0:	7b3b      	ldrb	r3, [r7, #12]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2302      	movs	r3, #2
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d0:	2178      	movs	r1, #120	; 0x78
 80023d2:	481e      	ldr	r0, [pc, #120]	; (800244c <FreqMenu_DrawPresetMenu+0xde4>)
 80023d4:	f00c f8f4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e8:	2178      	movs	r1, #120	; 0x78
 80023ea:	4819      	ldr	r0, [pc, #100]	; (8002450 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ec:	f00c f8e8 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f0:	7abb      	ldrb	r3, [r7, #10]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2302      	movs	r3, #2
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002400:	2178      	movs	r1, #120	; 0x78
 8002402:	4814      	ldr	r0, [pc, #80]	; (8002454 <FreqMenu_DrawPresetMenu+0xdec>)
 8002404:	f00c f8dc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002408:	7a7b      	ldrb	r3, [r7, #9]
 800240a:	b29a      	uxth	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2302      	movs	r3, #2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002418:	2178      	movs	r1, #120	; 0x78
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <FreqMenu_DrawPresetMenu+0xdf0>)
 800241c:	f00c f8d0 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8002420:	e3ae      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002422:	bf00      	nop
 8002424:	08013400 	.word	0x08013400
 8002428:	08013408 	.word	0x08013408
 800242c:	08013410 	.word	0x08013410
 8002430:	08013418 	.word	0x08013418
 8002434:	08013420 	.word	0x08013420
 8002438:	08013428 	.word	0x08013428
 800243c:	08013430 	.word	0x08013430
 8002440:	08013438 	.word	0x08013438
 8002444:	08013440 	.word	0x08013440
 8002448:	08013448 	.word	0x08013448
 800244c:	08013450 	.word	0x08013450
 8002450:	08013458 	.word	0x08013458
 8002454:	08013460 	.word	0x08013460
 8002458:	08013468 	.word	0x08013468
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	b29a      	uxth	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800246c:	2105      	movs	r1, #5
 800246e:	48a4      	ldr	r0, [pc, #656]	; (8002700 <FreqMenu_DrawPresetMenu+0x1098>)
 8002470:	f00c f8a6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	b29a      	uxth	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2302      	movs	r3, #2
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002484:	2105      	movs	r1, #5
 8002486:	489f      	ldr	r0, [pc, #636]	; (8002704 <FreqMenu_DrawPresetMenu+0x109c>)
 8002488:	f00c f89a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	b29a      	uxth	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249c:	2105      	movs	r1, #5
 800249e:	489a      	ldr	r0, [pc, #616]	; (8002708 <FreqMenu_DrawPresetMenu+0x10a0>)
 80024a0:	f00c f88e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a4:	7b3b      	ldrb	r3, [r7, #12]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b4:	2105      	movs	r1, #5
 80024b6:	4895      	ldr	r0, [pc, #596]	; (800270c <FreqMenu_DrawPresetMenu+0x10a4>)
 80024b8:	f00c f882 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2302      	movs	r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024cc:	2105      	movs	r1, #5
 80024ce:	4890      	ldr	r0, [pc, #576]	; (8002710 <FreqMenu_DrawPresetMenu+0x10a8>)
 80024d0:	f00c f876 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7abb      	ldrb	r3, [r7, #10]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2105      	movs	r1, #5
 80024e6:	488b      	ldr	r0, [pc, #556]	; (8002714 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024e8:	f00c f86a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ec:	7a7b      	ldrb	r3, [r7, #9]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2302      	movs	r3, #2
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024fc:	2105      	movs	r1, #5
 80024fe:	4886      	ldr	r0, [pc, #536]	; (8002718 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002500:	f00c f85e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	b29a      	uxth	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	2302      	movs	r3, #2
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002514:	2178      	movs	r1, #120	; 0x78
 8002516:	4881      	ldr	r0, [pc, #516]	; (800271c <FreqMenu_DrawPresetMenu+0x10b4>)
 8002518:	f00c f852 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800251c:	7bbb      	ldrb	r3, [r7, #14]
 800251e:	b29a      	uxth	r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2302      	movs	r3, #2
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800252c:	2178      	movs	r1, #120	; 0x78
 800252e:	487c      	ldr	r0, [pc, #496]	; (8002720 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002530:	f00c f846 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	b29a      	uxth	r2, r3
 8002538:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2302      	movs	r3, #2
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	2178      	movs	r1, #120	; 0x78
 8002546:	4877      	ldr	r0, [pc, #476]	; (8002724 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002548:	f00c f83a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254c:	7b3b      	ldrb	r3, [r7, #12]
 800254e:	b29a      	uxth	r2, r3
 8002550:	2300      	movs	r3, #0
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2302      	movs	r3, #2
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255c:	2178      	movs	r1, #120	; 0x78
 800255e:	4872      	ldr	r0, [pc, #456]	; (8002728 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002560:	f00c f82e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	b29a      	uxth	r2, r3
 8002568:	2300      	movs	r3, #0
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2302      	movs	r3, #2
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002574:	2178      	movs	r1, #120	; 0x78
 8002576:	486d      	ldr	r0, [pc, #436]	; (800272c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002578:	f00c f822 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257c:	7abb      	ldrb	r3, [r7, #10]
 800257e:	b29a      	uxth	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2302      	movs	r3, #2
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258c:	2178      	movs	r1, #120	; 0x78
 800258e:	4868      	ldr	r0, [pc, #416]	; (8002730 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002590:	f00c f816 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002594:	7a7b      	ldrb	r3, [r7, #9]
 8002596:	b29a      	uxth	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	2302      	movs	r3, #2
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a4:	2178      	movs	r1, #120	; 0x78
 80025a6:	4863      	ldr	r0, [pc, #396]	; (8002734 <FreqMenu_DrawPresetMenu+0x10cc>)
 80025a8:	f00c f80a 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 80025ac:	e2e8      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	2302      	movs	r3, #2
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025be:	2105      	movs	r1, #5
 80025c0:	484f      	ldr	r0, [pc, #316]	; (8002700 <FreqMenu_DrawPresetMenu+0x1098>)
 80025c2:	f00b fffd 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	2300      	movs	r3, #0
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	2302      	movs	r3, #2
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d6:	2105      	movs	r1, #5
 80025d8:	484a      	ldr	r0, [pc, #296]	; (8002704 <FreqMenu_DrawPresetMenu+0x109c>)
 80025da:	f00b fff1 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025de:	7b7b      	ldrb	r3, [r7, #13]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2302      	movs	r3, #2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ee:	2105      	movs	r1, #5
 80025f0:	4845      	ldr	r0, [pc, #276]	; (8002708 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025f2:	f00b ffe5 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	2300      	movs	r3, #0
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2302      	movs	r3, #2
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002606:	2105      	movs	r1, #5
 8002608:	4840      	ldr	r0, [pc, #256]	; (800270c <FreqMenu_DrawPresetMenu+0x10a4>)
 800260a:	f00b ffd9 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	b29a      	uxth	r2, r3
 8002612:	2300      	movs	r3, #0
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2302      	movs	r3, #2
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261e:	2105      	movs	r1, #5
 8002620:	483b      	ldr	r0, [pc, #236]	; (8002710 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002622:	f00b ffcd 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002626:	7abb      	ldrb	r3, [r7, #10]
 8002628:	b29a      	uxth	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002636:	2105      	movs	r1, #5
 8002638:	4836      	ldr	r0, [pc, #216]	; (8002714 <FreqMenu_DrawPresetMenu+0x10ac>)
 800263a:	f00b ffc1 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263e:	7a7b      	ldrb	r3, [r7, #9]
 8002640:	b29a      	uxth	r2, r3
 8002642:	2300      	movs	r3, #0
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2302      	movs	r3, #2
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264e:	2105      	movs	r1, #5
 8002650:	4831      	ldr	r0, [pc, #196]	; (8002718 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002652:	f00b ffb5 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	b29a      	uxth	r2, r3
 800265a:	2300      	movs	r3, #0
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	2302      	movs	r3, #2
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002666:	2178      	movs	r1, #120	; 0x78
 8002668:	482c      	ldr	r0, [pc, #176]	; (800271c <FreqMenu_DrawPresetMenu+0x10b4>)
 800266a:	f00b ffa9 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266e:	7bbb      	ldrb	r3, [r7, #14]
 8002670:	b29a      	uxth	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2302      	movs	r3, #2
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267e:	2178      	movs	r1, #120	; 0x78
 8002680:	4827      	ldr	r0, [pc, #156]	; (8002720 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002682:	f00b ff9d 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002686:	7b7b      	ldrb	r3, [r7, #13]
 8002688:	b29a      	uxth	r2, r3
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2302      	movs	r3, #2
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002696:	2178      	movs	r1, #120	; 0x78
 8002698:	4822      	ldr	r0, [pc, #136]	; (8002724 <FreqMenu_DrawPresetMenu+0x10bc>)
 800269a:	f00b ff91 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800269e:	7b3b      	ldrb	r3, [r7, #12]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	2178      	movs	r1, #120	; 0x78
 80026b0:	481d      	ldr	r0, [pc, #116]	; (8002728 <FreqMenu_DrawPresetMenu+0x10c0>)
 80026b2:	f00b ff85 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2302      	movs	r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026c6:	2178      	movs	r1, #120	; 0x78
 80026c8:	4818      	ldr	r0, [pc, #96]	; (800272c <FreqMenu_DrawPresetMenu+0x10c4>)
 80026ca:	f00b ff79 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	2300      	movs	r3, #0
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	2302      	movs	r3, #2
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026de:	2178      	movs	r1, #120	; 0x78
 80026e0:	4813      	ldr	r0, [pc, #76]	; (8002730 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026e2:	f00b ff6d 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026e6:	7a7b      	ldrb	r3, [r7, #9]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026f6:	2178      	movs	r1, #120	; 0x78
 80026f8:	480e      	ldr	r0, [pc, #56]	; (8002734 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026fa:	f00b ff61 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 80026fe:	e23f      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002700:	08013400 	.word	0x08013400
 8002704:	08013408 	.word	0x08013408
 8002708:	08013410 	.word	0x08013410
 800270c:	08013418 	.word	0x08013418
 8002710:	08013420 	.word	0x08013420
 8002714:	08013428 	.word	0x08013428
 8002718:	08013430 	.word	0x08013430
 800271c:	08013438 	.word	0x08013438
 8002720:	08013440 	.word	0x08013440
 8002724:	08013448 	.word	0x08013448
 8002728:	08013450 	.word	0x08013450
 800272c:	08013458 	.word	0x08013458
 8002730:	08013460 	.word	0x08013460
 8002734:	08013468 	.word	0x08013468
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	b29a      	uxth	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2302      	movs	r3, #2
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002748:	2105      	movs	r1, #5
 800274a:	48a4      	ldr	r0, [pc, #656]	; (80029dc <FreqMenu_DrawPresetMenu+0x1374>)
 800274c:	f00b ff38 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	b29a      	uxth	r2, r3
 8002754:	2300      	movs	r3, #0
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2302      	movs	r3, #2
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002760:	2105      	movs	r1, #5
 8002762:	489f      	ldr	r0, [pc, #636]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002764:	f00b ff2c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002768:	7b7b      	ldrb	r3, [r7, #13]
 800276a:	b29a      	uxth	r2, r3
 800276c:	2300      	movs	r3, #0
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2302      	movs	r3, #2
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002778:	2105      	movs	r1, #5
 800277a:	489a      	ldr	r0, [pc, #616]	; (80029e4 <FreqMenu_DrawPresetMenu+0x137c>)
 800277c:	f00b ff20 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002780:	7b3b      	ldrb	r3, [r7, #12]
 8002782:	b29a      	uxth	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2302      	movs	r3, #2
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002790:	2105      	movs	r1, #5
 8002792:	4895      	ldr	r0, [pc, #596]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002794:	f00b ff14 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002798:	7afb      	ldrb	r3, [r7, #11]
 800279a:	b29a      	uxth	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2302      	movs	r3, #2
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a8:	2105      	movs	r1, #5
 80027aa:	4890      	ldr	r0, [pc, #576]	; (80029ec <FreqMenu_DrawPresetMenu+0x1384>)
 80027ac:	f00b ff08 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b0:	7abb      	ldrb	r3, [r7, #10]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2302      	movs	r3, #2
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c0:	2105      	movs	r1, #5
 80027c2:	488b      	ldr	r0, [pc, #556]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1388>)
 80027c4:	f00b fefc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027c8:	7a7b      	ldrb	r3, [r7, #9]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2302      	movs	r3, #2
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027d8:	2105      	movs	r1, #5
 80027da:	4886      	ldr	r0, [pc, #536]	; (80029f4 <FreqMenu_DrawPresetMenu+0x138c>)
 80027dc:	f00b fef0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2302      	movs	r3, #2
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f0:	2178      	movs	r1, #120	; 0x78
 80027f2:	4881      	ldr	r0, [pc, #516]	; (80029f8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027f4:	f00b fee4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2302      	movs	r3, #2
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002808:	2178      	movs	r1, #120	; 0x78
 800280a:	487c      	ldr	r0, [pc, #496]	; (80029fc <FreqMenu_DrawPresetMenu+0x1394>)
 800280c:	f00b fed8 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002810:	7b7b      	ldrb	r3, [r7, #13]
 8002812:	b29a      	uxth	r2, r3
 8002814:	2300      	movs	r3, #0
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2302      	movs	r3, #2
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002820:	2178      	movs	r1, #120	; 0x78
 8002822:	4877      	ldr	r0, [pc, #476]	; (8002a00 <FreqMenu_DrawPresetMenu+0x1398>)
 8002824:	f00b fecc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002828:	7b3b      	ldrb	r3, [r7, #12]
 800282a:	b29a      	uxth	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2302      	movs	r3, #2
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002838:	2178      	movs	r1, #120	; 0x78
 800283a:	4872      	ldr	r0, [pc, #456]	; (8002a04 <FreqMenu_DrawPresetMenu+0x139c>)
 800283c:	f00b fec0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	b29a      	uxth	r2, r3
 8002844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	2302      	movs	r3, #2
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2300      	movs	r3, #0
 8002850:	2178      	movs	r1, #120	; 0x78
 8002852:	486d      	ldr	r0, [pc, #436]	; (8002a08 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002854:	f00b feb4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002858:	7abb      	ldrb	r3, [r7, #10]
 800285a:	b29a      	uxth	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	2302      	movs	r3, #2
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002868:	2178      	movs	r1, #120	; 0x78
 800286a:	4868      	ldr	r0, [pc, #416]	; (8002a0c <FreqMenu_DrawPresetMenu+0x13a4>)
 800286c:	f00b fea8 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002870:	7a7b      	ldrb	r3, [r7, #9]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2302      	movs	r3, #2
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002880:	2178      	movs	r1, #120	; 0x78
 8002882:	4863      	ldr	r0, [pc, #396]	; (8002a10 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002884:	f00b fe9c 	bl	800e5c0 <ILI9341_Draw_Text>
			break;
 8002888:	e17a      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	b29a      	uxth	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2302      	movs	r3, #2
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800289a:	2105      	movs	r1, #5
 800289c:	484f      	ldr	r0, [pc, #316]	; (80029dc <FreqMenu_DrawPresetMenu+0x1374>)
 800289e:	f00b fe8f 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028a2:	7bbb      	ldrb	r3, [r7, #14]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	2300      	movs	r3, #0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2302      	movs	r3, #2
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028b2:	2105      	movs	r1, #5
 80028b4:	484a      	ldr	r0, [pc, #296]	; (80029e0 <FreqMenu_DrawPresetMenu+0x1378>)
 80028b6:	f00b fe83 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ba:	7b7b      	ldrb	r3, [r7, #13]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2302      	movs	r3, #2
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ca:	2105      	movs	r1, #5
 80028cc:	4845      	ldr	r0, [pc, #276]	; (80029e4 <FreqMenu_DrawPresetMenu+0x137c>)
 80028ce:	f00b fe77 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d2:	7b3b      	ldrb	r3, [r7, #12]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2302      	movs	r3, #2
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e2:	2105      	movs	r1, #5
 80028e4:	4840      	ldr	r0, [pc, #256]	; (80029e8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028e6:	f00b fe6b 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	2300      	movs	r3, #0
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2302      	movs	r3, #2
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028fa:	2105      	movs	r1, #5
 80028fc:	483b      	ldr	r0, [pc, #236]	; (80029ec <FreqMenu_DrawPresetMenu+0x1384>)
 80028fe:	f00b fe5f 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002902:	7abb      	ldrb	r3, [r7, #10]
 8002904:	b29a      	uxth	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002912:	2105      	movs	r1, #5
 8002914:	4836      	ldr	r0, [pc, #216]	; (80029f0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002916:	f00b fe53 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800291a:	7a7b      	ldrb	r3, [r7, #9]
 800291c:	b29a      	uxth	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800292a:	2105      	movs	r1, #5
 800292c:	4831      	ldr	r0, [pc, #196]	; (80029f4 <FreqMenu_DrawPresetMenu+0x138c>)
 800292e:	f00b fe47 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	b29a      	uxth	r2, r3
 8002936:	2300      	movs	r3, #0
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002942:	2178      	movs	r1, #120	; 0x78
 8002944:	482c      	ldr	r0, [pc, #176]	; (80029f8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002946:	f00b fe3b 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	b29a      	uxth	r2, r3
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2302      	movs	r3, #2
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800295a:	2178      	movs	r1, #120	; 0x78
 800295c:	4827      	ldr	r0, [pc, #156]	; (80029fc <FreqMenu_DrawPresetMenu+0x1394>)
 800295e:	f00b fe2f 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002962:	7b7b      	ldrb	r3, [r7, #13]
 8002964:	b29a      	uxth	r2, r3
 8002966:	2300      	movs	r3, #0
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2302      	movs	r3, #2
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002972:	2178      	movs	r1, #120	; 0x78
 8002974:	4822      	ldr	r0, [pc, #136]	; (8002a00 <FreqMenu_DrawPresetMenu+0x1398>)
 8002976:	f00b fe23 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800297a:	7b3b      	ldrb	r3, [r7, #12]
 800297c:	b29a      	uxth	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2302      	movs	r3, #2
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800298a:	2178      	movs	r1, #120	; 0x78
 800298c:	481d      	ldr	r0, [pc, #116]	; (8002a04 <FreqMenu_DrawPresetMenu+0x139c>)
 800298e:	f00b fe17 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	b29a      	uxth	r2, r3
 8002996:	2300      	movs	r3, #0
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a2:	2178      	movs	r1, #120	; 0x78
 80029a4:	4818      	ldr	r0, [pc, #96]	; (8002a08 <FreqMenu_DrawPresetMenu+0x13a0>)
 80029a6:	f00b fe0b 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80029aa:	7abb      	ldrb	r3, [r7, #10]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2302      	movs	r3, #2
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	2178      	movs	r1, #120	; 0x78
 80029bc:	4813      	ldr	r0, [pc, #76]	; (8002a0c <FreqMenu_DrawPresetMenu+0x13a4>)
 80029be:	f00b fdff 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c2:	7a7b      	ldrb	r3, [r7, #9]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2302      	movs	r3, #2
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d2:	2178      	movs	r1, #120	; 0x78
 80029d4:	480e      	ldr	r0, [pc, #56]	; (8002a10 <FreqMenu_DrawPresetMenu+0x13a8>)
 80029d6:	f00b fdf3 	bl	800e5c0 <ILI9341_Draw_Text>
			break;
 80029da:	e0d1      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 80029dc:	08013400 	.word	0x08013400
 80029e0:	08013408 	.word	0x08013408
 80029e4:	08013410 	.word	0x08013410
 80029e8:	08013418 	.word	0x08013418
 80029ec:	08013420 	.word	0x08013420
 80029f0:	08013428 	.word	0x08013428
 80029f4:	08013430 	.word	0x08013430
 80029f8:	08013438 	.word	0x08013438
 80029fc:	08013440 	.word	0x08013440
 8002a00:	08013448 	.word	0x08013448
 8002a04:	08013450 	.word	0x08013450
 8002a08:	08013458 	.word	0x08013458
 8002a0c:	08013460 	.word	0x08013460
 8002a10:	08013468 	.word	0x08013468
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a24:	2105      	movs	r1, #5
 8002a26:	4858      	ldr	r0, [pc, #352]	; (8002b88 <FreqMenu_DrawPresetMenu+0x1520>)
 8002a28:	f00b fdca 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a2c:	7bbb      	ldrb	r3, [r7, #14]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	2300      	movs	r3, #0
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	2302      	movs	r3, #2
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a3c:	2105      	movs	r1, #5
 8002a3e:	4853      	ldr	r0, [pc, #332]	; (8002b8c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a40:	f00b fdbe 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a44:	7b7b      	ldrb	r3, [r7, #13]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a54:	2105      	movs	r1, #5
 8002a56:	484e      	ldr	r0, [pc, #312]	; (8002b90 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a58:	f00b fdb2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a5c:	7b3b      	ldrb	r3, [r7, #12]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	4849      	ldr	r0, [pc, #292]	; (8002b94 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a70:	f00b fda6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a84:	2105      	movs	r1, #5
 8002a86:	4844      	ldr	r0, [pc, #272]	; (8002b98 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a88:	f00b fd9a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a8c:	7abb      	ldrb	r3, [r7, #10]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	2302      	movs	r3, #2
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	483f      	ldr	r0, [pc, #252]	; (8002b9c <FreqMenu_DrawPresetMenu+0x1534>)
 8002aa0:	f00b fd8e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa4:	7a7b      	ldrb	r3, [r7, #9]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2302      	movs	r3, #2
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	483a      	ldr	r0, [pc, #232]	; (8002ba0 <FreqMenu_DrawPresetMenu+0x1538>)
 8002ab8:	f00b fd82 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002acc:	2178      	movs	r1, #120	; 0x78
 8002ace:	4835      	ldr	r0, [pc, #212]	; (8002ba4 <FreqMenu_DrawPresetMenu+0x153c>)
 8002ad0:	f00b fd76 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	2302      	movs	r3, #2
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ae4:	2178      	movs	r1, #120	; 0x78
 8002ae6:	4830      	ldr	r0, [pc, #192]	; (8002ba8 <FreqMenu_DrawPresetMenu+0x1540>)
 8002ae8:	f00b fd6a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aec:	7b7b      	ldrb	r3, [r7, #13]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	2302      	movs	r3, #2
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002afc:	2178      	movs	r1, #120	; 0x78
 8002afe:	482b      	ldr	r0, [pc, #172]	; (8002bac <FreqMenu_DrawPresetMenu+0x1544>)
 8002b00:	f00b fd5e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b04:	7b3b      	ldrb	r3, [r7, #12]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b14:	2178      	movs	r1, #120	; 0x78
 8002b16:	4826      	ldr	r0, [pc, #152]	; (8002bb0 <FreqMenu_DrawPresetMenu+0x1548>)
 8002b18:	f00b fd52 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	2300      	movs	r3, #0
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2302      	movs	r3, #2
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b2c:	2178      	movs	r1, #120	; 0x78
 8002b2e:	4821      	ldr	r0, [pc, #132]	; (8002bb4 <FreqMenu_DrawPresetMenu+0x154c>)
 8002b30:	f00b fd46 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b34:	7abb      	ldrb	r3, [r7, #10]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b44:	2178      	movs	r1, #120	; 0x78
 8002b46:	481c      	ldr	r0, [pc, #112]	; (8002bb8 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b48:	f00b fd3a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b4c:	7a7b      	ldrb	r3, [r7, #9]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2302      	movs	r3, #2
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2178      	movs	r1, #120	; 0x78
 8002b5e:	4817      	ldr	r0, [pc, #92]	; (8002bbc <FreqMenu_DrawPresetMenu+0x1554>)
 8002b60:	f00b fd2e 	bl	800e5c0 <ILI9341_Draw_Text>
			break;
 8002b64:	bf00      	nop
 8002b66:	e00b      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b68:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	22b4      	movs	r2, #180	; 0xb4
 8002b76:	2105      	movs	r1, #5
 8002b78:	4811      	ldr	r0, [pc, #68]	; (8002bc0 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b7a:	f00b fd21 	bl	800e5c0 <ILI9341_Draw_Text>
}
 8002b7e:	e7ff      	b.n	8002b80 <FreqMenu_DrawPresetMenu+0x1518>
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	08013400 	.word	0x08013400
 8002b8c:	08013408 	.word	0x08013408
 8002b90:	08013410 	.word	0x08013410
 8002b94:	08013418 	.word	0x08013418
 8002b98:	08013420 	.word	0x08013420
 8002b9c:	08013428 	.word	0x08013428
 8002ba0:	08013430 	.word	0x08013430
 8002ba4:	08013438 	.word	0x08013438
 8002ba8:	08013440 	.word	0x08013440
 8002bac:	08013448 	.word	0x08013448
 8002bb0:	08013450 	.word	0x08013450
 8002bb4:	08013458 	.word	0x08013458
 8002bb8:	08013460 	.word	0x08013460
 8002bbc:	08013468 	.word	0x08013468
 8002bc0:	08013474 	.word	0x08013474

08002bc4 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	2105      	movs	r1, #5
 8002bda:	4804      	ldr	r0, [pc, #16]	; (8002bec <FreqMenu_DrawAdjustMenu+0x28>)
 8002bdc:	f00b fcf0 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002be0:	f7fe f9c8 	bl	8000f74 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	080134a4 	.word	0x080134a4

08002bf0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b0a0      	sub	sp, #128	; 0x80
 8002bf4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	220a      	movs	r2, #10
 8002c04:	2105      	movs	r1, #5
 8002c06:	48a1      	ldr	r0, [pc, #644]	; (8002e8c <FreqMenu_DrawSweepMenu+0x29c>)
 8002c08:	f00b fcda 	bl	800e5c0 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c1e:	4b9c      	ldr	r3, [pc, #624]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d109      	bne.n	8002c3e <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002c2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c2e:	4a99      	ldr	r2, [pc, #612]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c30:	461c      	mov	r4, r3
 8002c32:	4615      	mov	r5, r2
 8002c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	7023      	strb	r3, [r4, #0]
 8002c3c:	e008      	b.n	8002c50 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002c3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c42:	4a95      	ldr	r2, [pc, #596]	; (8002e98 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002c44:	461c      	mov	r4, r3
 8002c46:	4615      	mov	r5, r2
 8002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c50:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c54:	2300      	movs	r3, #0
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	2302      	movs	r3, #2
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c60:	2228      	movs	r2, #40	; 0x28
 8002c62:	2105      	movs	r1, #5
 8002c64:	f00b fcac 	bl	800e5c0 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c7e:	f003 fcbf 	bl	8006600 <SM_GetOutputInHertz>
 8002c82:	ee10 3a10 	vmov	r3, s0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc86 	bl	8000598 <__aeabi_f2d>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c94:	e9cd 3400 	strd	r3, r4, [sp]
 8002c98:	4a80      	ldr	r2, [pc, #512]	; (8002e9c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c9a:	2119      	movs	r1, #25
 8002c9c:	f00d f834 	bl	800fd08 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ca0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cb0:	223c      	movs	r2, #60	; 0x3c
 8002cb2:	2105      	movs	r1, #5
 8002cb4:	f00b fc84 	bl	800e5c0 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cc4:	2264      	movs	r2, #100	; 0x64
 8002cc6:	2105      	movs	r1, #5
 8002cc8:	4875      	ldr	r0, [pc, #468]	; (8002ea0 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002cca:	f00b fc79 	bl	800e5c0 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d117      	bne.n	8002d0a <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2302      	movs	r3, #2
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce6:	2264      	movs	r2, #100	; 0x64
 8002ce8:	21eb      	movs	r1, #235	; 0xeb
 8002cea:	486e      	ldr	r0, [pc, #440]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cec:	f00b fc68 	bl	800e5c0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cf0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2264      	movs	r2, #100	; 0x64
 8002cfe:	f240 1109 	movw	r1, #265	; 0x109
 8002d02:	4869      	ldr	r0, [pc, #420]	; (8002ea8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d04:	f00b fc5c 	bl	800e5c0 <ILI9341_Draw_Text>
 8002d08:	e016      	b.n	8002d38 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2302      	movs	r3, #2
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d16:	2264      	movs	r2, #100	; 0x64
 8002d18:	f240 1109 	movw	r1, #265	; 0x109
 8002d1c:	4862      	ldr	r0, [pc, #392]	; (8002ea8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d1e:	f00b fc4f 	bl	800e5c0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d22:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2302      	movs	r3, #2
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2264      	movs	r2, #100	; 0x64
 8002d30:	21eb      	movs	r1, #235	; 0xeb
 8002d32:	485c      	ldr	r0, [pc, #368]	; (8002ea4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002d34:	f00b fc44 	bl	800e5c0 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002d38:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d40:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2302      	movs	r3, #2
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2278      	movs	r2, #120	; 0x78
 8002d4e:	2105      	movs	r1, #5
 8002d50:	4857      	ldr	r0, [pc, #348]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d52:	f00b fc35 	bl	800e5c0 <ILI9341_Draw_Text>
 8002d56:	e00a      	b.n	8002d6e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d64:	2278      	movs	r2, #120	; 0x78
 8002d66:	2105      	movs	r1, #5
 8002d68:	4851      	ldr	r0, [pc, #324]	; (8002eb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d6a:	f00b fc29 	bl	800e5c0 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	611a      	str	r2, [r3, #16]
 8002d82:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fc05 	bl	8000598 <__aeabi_f2d>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	460c      	mov	r4, r1
 8002d92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d96:	e9cd 3400 	strd	r3, r4, [sp]
 8002d9a:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d9c:	2119      	movs	r1, #25
 8002d9e:	f00c ffb3 	bl	800fd08 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002da6:	2300      	movs	r3, #0
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2302      	movs	r3, #2
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002db2:	2278      	movs	r2, #120	; 0x78
 8002db4:	21b6      	movs	r1, #182	; 0xb6
 8002db6:	f00b fc03 	bl	800e5c0 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002dba:	4b3c      	ldr	r3, [pc, #240]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10f      	bne.n	8002de2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002dca:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	228c      	movs	r2, #140	; 0x8c
 8002dd8:	2105      	movs	r1, #5
 8002dda:	4839      	ldr	r0, [pc, #228]	; (8002ec0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002ddc:	f00b fbf0 	bl	800e5c0 <ILI9341_Draw_Text>
 8002de0:	e00a      	b.n	8002df8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2302      	movs	r3, #2
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dee:	228c      	movs	r2, #140	; 0x8c
 8002df0:	2105      	movs	r1, #5
 8002df2:	4833      	ldr	r0, [pc, #204]	; (8002ec0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002df4:	f00b fbe4 	bl	800e5c0 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	ee17 0a90 	vmov	r0, s15
 8002e20:	f003 fc32 	bl	8006688 <SM_ConvertPeriodToHertz>
 8002e24:	eeb0 7a40 	vmov.f32	s14, s0
 8002e28:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002ecc <FreqMenu_DrawSweepMenu+0x2dc>
 8002e2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e30:	ee16 0a90 	vmov	r0, s13
 8002e34:	f7fd fbb0 	bl	8000598 <__aeabi_f2d>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	f107 0018 	add.w	r0, r7, #24
 8002e40:	e9cd 3400 	strd	r3, r4, [sp]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e46:	2114      	movs	r1, #20
 8002e48:	f00c ff5e 	bl	800fd08 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e4c:	f107 0018 	add.w	r0, r7, #24
 8002e50:	2300      	movs	r3, #0
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2302      	movs	r3, #2
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e5c:	228c      	movs	r2, #140	; 0x8c
 8002e5e:	219e      	movs	r1, #158	; 0x9e
 8002e60:	f00b fbae 	bl	800e5c0 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d135      	bne.n	8002ed8 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d131      	bne.n	8002ed8 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	22a0      	movs	r2, #160	; 0xa0
 8002e82:	2105      	movs	r1, #5
 8002e84:	4813      	ldr	r0, [pc, #76]	; (8002ed4 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e86:	f00b fb9b 	bl	800e5c0 <ILI9341_Draw_Text>
 8002e8a:	e030      	b.n	8002eee <FreqMenu_DrawSweepMenu+0x2fe>
 8002e8c:	080134b8 	.word	0x080134b8
 8002e90:	40000c00 	.word	0x40000c00
 8002e94:	080134cc 	.word	0x080134cc
 8002e98:	080134e0 	.word	0x080134e0
 8002e9c:	080134f4 	.word	0x080134f4
 8002ea0:	08013508 	.word	0x08013508
 8002ea4:	08013514 	.word	0x08013514
 8002ea8:	08013518 	.word	0x08013518
 8002eac:	20001ecd 	.word	0x20001ecd
 8002eb0:	08013520 	.word	0x08013520
 8002eb4:	20001f20 	.word	0x20001f20
 8002eb8:	08013530 	.word	0x08013530
 8002ebc:	20001ecc 	.word	0x20001ecc
 8002ec0:	0801353c 	.word	0x0801353c
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	40013400 	.word	0x40013400
 8002ecc:	42f00000 	.word	0x42f00000
 8002ed0:	0801354c 	.word	0x0801354c
 8002ed4:	08013558 	.word	0x08013558
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	2302      	movs	r3, #2
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ee4:	22a0      	movs	r2, #160	; 0xa0
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	484d      	ldr	r0, [pc, #308]	; (8003020 <FreqMenu_DrawSweepMenu+0x430>)
 8002eea:	f00b fb69 	bl	800e5c0 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002f00:	4b48      	ldr	r3, [pc, #288]	; (8003024 <FreqMenu_DrawSweepMenu+0x434>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <FreqMenu_DrawSweepMenu+0x438>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	ee17 0a90 	vmov	r0, s15
 8002f16:	f003 fbb7 	bl	8006688 <SM_ConvertPeriodToHertz>
 8002f1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800302c <FreqMenu_DrawSweepMenu+0x43c>
 8002f22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f26:	ee16 0a90 	vmov	r0, s13
 8002f2a:	f7fd fb35 	bl	8000598 <__aeabi_f2d>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	1d38      	adds	r0, r7, #4
 8002f34:	e9cd 3400 	strd	r3, r4, [sp]
 8002f38:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <FreqMenu_DrawSweepMenu+0x440>)
 8002f3a:	2114      	movs	r1, #20
 8002f3c:	f00c fee4 	bl	800fd08 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f40:	1d38      	adds	r0, r7, #4
 8002f42:	2300      	movs	r3, #0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f4e:	22a0      	movs	r2, #160	; 0xa0
 8002f50:	21aa      	movs	r1, #170	; 0xaa
 8002f52:	f00b fb35 	bl	800e5c0 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f56:	4b37      	ldr	r3, [pc, #220]	; (8003034 <FreqMenu_DrawSweepMenu+0x444>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d10b      	bne.n	8002f7a <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f62:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	22d5      	movs	r2, #213	; 0xd5
 8002f70:	2106      	movs	r1, #6
 8002f72:	4831      	ldr	r0, [pc, #196]	; (8003038 <FreqMenu_DrawSweepMenu+0x448>)
 8002f74:	f00b fb24 	bl	800e5c0 <ILI9341_Draw_Text>
 8002f78:	e00a      	b.n	8002f90 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f7a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	2302      	movs	r3, #2
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	22d5      	movs	r2, #213	; 0xd5
 8002f88:	2105      	movs	r1, #5
 8002f8a:	482c      	ldr	r0, [pc, #176]	; (800303c <FreqMenu_DrawSweepMenu+0x44c>)
 8002f8c:	f00b fb18 	bl	800e5c0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	2302      	movs	r3, #2
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	22cc      	movs	r2, #204	; 0xcc
 8002f9e:	2169      	movs	r1, #105	; 0x69
 8002fa0:	4827      	ldr	r0, [pc, #156]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002fa2:	f00b fb0d 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002fa6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	2302      	movs	r3, #2
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	22de      	movs	r2, #222	; 0xde
 8002fb4:	2162      	movs	r1, #98	; 0x62
 8002fb6:	4823      	ldr	r0, [pc, #140]	; (8003044 <FreqMenu_DrawSweepMenu+0x454>)
 8002fb8:	f00b fb02 	bl	800e5c0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fbc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	22cc      	movs	r2, #204	; 0xcc
 8002fca:	21b7      	movs	r1, #183	; 0xb7
 8002fcc:	481c      	ldr	r0, [pc, #112]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002fce:	f00b faf7 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002fd2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	2302      	movs	r3, #2
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	22de      	movs	r2, #222	; 0xde
 8002fe0:	21ad      	movs	r1, #173	; 0xad
 8002fe2:	4819      	ldr	r0, [pc, #100]	; (8003048 <FreqMenu_DrawSweepMenu+0x458>)
 8002fe4:	f00b faec 	bl	800e5c0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fe8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	22cc      	movs	r2, #204	; 0xcc
 8002ff6:	f240 1107 	movw	r1, #263	; 0x107
 8002ffa:	4811      	ldr	r0, [pc, #68]	; (8003040 <FreqMenu_DrawSweepMenu+0x450>)
 8002ffc:	f00b fae0 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003000:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2302      	movs	r3, #2
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	22de      	movs	r2, #222	; 0xde
 800300e:	21fc      	movs	r1, #252	; 0xfc
 8003010:	480e      	ldr	r0, [pc, #56]	; (800304c <FreqMenu_DrawSweepMenu+0x45c>)
 8003012:	f00b fad5 	bl	800e5c0 <ILI9341_Draw_Text>
}
 8003016:	bf00      	nop
 8003018:	3778      	adds	r7, #120	; 0x78
 800301a:	46bd      	mov	sp, r7
 800301c:	bdb0      	pop	{r4, r5, r7, pc}
 800301e:	bf00      	nop
 8003020:	08013558 	.word	0x08013558
 8003024:	20000004 	.word	0x20000004
 8003028:	40013400 	.word	0x40013400
 800302c:	42f00000 	.word	0x42f00000
 8003030:	08013568 	.word	0x08013568
 8003034:	40000c00 	.word	0x40000c00
 8003038:	08013574 	.word	0x08013574
 800303c:	0801357c 	.word	0x0801357c
 8003040:	08013584 	.word	0x08013584
 8003044:	08013588 	.word	0x08013588
 8003048:	08013590 	.word	0x08013590
 800304c:	08013598 	.word	0x08013598

08003050 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d007      	beq.n	8003070 <FuncMenu_DrawMenu+0x20>
 8003060:	2b03      	cmp	r3, #3
 8003062:	d009      	beq.n	8003078 <FuncMenu_DrawMenu+0x28>
 8003064:	2b01      	cmp	r3, #1
 8003066:	d000      	beq.n	800306a <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8003068:	e00a      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 800306a:	f000 f80d 	bl	8003088 <FuncMenu_DrawMainMenu>
			break;
 800306e:	e007      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003070:	2000      	movs	r0, #0
 8003072:	f000 f851 	bl	8003118 <FuncMenu_DrawOutputMenu>
			break;
 8003076:	e003      	b.n	8003080 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8003078:	2001      	movs	r0, #1
 800307a:	f000 f84d 	bl	8003118 <FuncMenu_DrawOutputMenu>
			break;
 800307e:	bf00      	nop

	}
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800308e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	220a      	movs	r2, #10
 800309c:	210a      	movs	r1, #10
 800309e:	481a      	ldr	r0, [pc, #104]	; (8003108 <FuncMenu_DrawMainMenu+0x80>)
 80030a0:	f00b fa8e 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80030a4:	f7fd ff66 	bl	8000f74 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80030a8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	2302      	movs	r3, #2
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	22d2      	movs	r2, #210	; 0xd2
 80030b6:	2105      	movs	r1, #5
 80030b8:	4814      	ldr	r0, [pc, #80]	; (800310c <FuncMenu_DrawMainMenu+0x84>)
 80030ba:	f00b fa81 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80030be:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	2302      	movs	r3, #2
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	22d2      	movs	r2, #210	; 0xd2
 80030cc:	2161      	movs	r1, #97	; 0x61
 80030ce:	4810      	ldr	r0, [pc, #64]	; (8003110 <FuncMenu_DrawMainMenu+0x88>)
 80030d0:	f00b fa76 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80030d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2302      	movs	r3, #2
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	22d2      	movs	r2, #210	; 0xd2
 80030e2:	21af      	movs	r1, #175	; 0xaf
 80030e4:	480b      	ldr	r0, [pc, #44]	; (8003114 <FuncMenu_DrawMainMenu+0x8c>)
 80030e6:	f00b fa6b 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030ea:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	2302      	movs	r3, #2
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	22d2      	movs	r2, #210	; 0xd2
 80030f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030fc:	4805      	ldr	r0, [pc, #20]	; (8003114 <FuncMenu_DrawMainMenu+0x8c>)
 80030fe:	f00b fa5f 	bl	800e5c0 <ILI9341_Draw_Text>
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	080135a0 	.word	0x080135a0
 800310c:	080135ac 	.word	0x080135ac
 8003110:	080135b4 	.word	0x080135b4
 8003114:	080135bc 	.word	0x080135bc

08003118 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af02      	add	r7, sp, #8
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	2302      	movs	r3, #2
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2300      	movs	r3, #0
 8003134:	220a      	movs	r2, #10
 8003136:	210a      	movs	r1, #10
 8003138:	4893      	ldr	r0, [pc, #588]	; (8003388 <FuncMenu_DrawOutputMenu+0x270>)
 800313a:	f00b fa41 	bl	800e5c0 <ILI9341_Draw_Text>
 800313e:	e00a      	b.n	8003156 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	220a      	movs	r2, #10
 800314e:	210a      	movs	r1, #10
 8003150:	488e      	ldr	r0, [pc, #568]	; (800338c <FuncMenu_DrawOutputMenu+0x274>)
 8003152:	f00b fa35 	bl	800e5c0 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f002 ff23 	bl	8005fa4 <SM_GetOutputChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003164:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 83ff 	beq.w	800396c <FuncMenu_DrawOutputMenu+0x854>
	{
		switch(func_profileTmp->func)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b06      	cmp	r3, #6
 8003174:	f200 83fa 	bhi.w	800396c <FuncMenu_DrawOutputMenu+0x854>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <FuncMenu_DrawOutputMenu+0x68>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	0800319d 	.word	0x0800319d
 8003184:	08003293 	.word	0x08003293
 8003188:	080033b1 	.word	0x080033b1
 800318c:	080034a7 	.word	0x080034a7
 8003190:	0800359d 	.word	0x0800359d
 8003194:	080036cd 	.word	0x080036cd
 8003198:	080037d9 	.word	0x080037d9
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800319c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2302      	movs	r3, #2
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2300      	movs	r3, #0
 80031a8:	2232      	movs	r2, #50	; 0x32
 80031aa:	210a      	movs	r1, #10
 80031ac:	4878      	ldr	r0, [pc, #480]	; (8003390 <FuncMenu_DrawOutputMenu+0x278>)
 80031ae:	f00b fa07 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b2:	2300      	movs	r3, #0
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	2302      	movs	r3, #2
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031be:	2246      	movs	r2, #70	; 0x46
 80031c0:	210a      	movs	r1, #10
 80031c2:	4874      	ldr	r0, [pc, #464]	; (8003394 <FuncMenu_DrawOutputMenu+0x27c>)
 80031c4:	f00b f9fc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c8:	2300      	movs	r3, #0
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	2302      	movs	r3, #2
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d4:	225a      	movs	r2, #90	; 0x5a
 80031d6:	210a      	movs	r1, #10
 80031d8:	486f      	ldr	r0, [pc, #444]	; (8003398 <FuncMenu_DrawOutputMenu+0x280>)
 80031da:	f00b f9f1 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031de:	2300      	movs	r3, #0
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ea:	226e      	movs	r2, #110	; 0x6e
 80031ec:	210a      	movs	r1, #10
 80031ee:	486b      	ldr	r0, [pc, #428]	; (800339c <FuncMenu_DrawOutputMenu+0x284>)
 80031f0:	f00b f9e6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031f4:	2300      	movs	r3, #0
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	2302      	movs	r3, #2
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003200:	2282      	movs	r2, #130	; 0x82
 8003202:	210a      	movs	r1, #10
 8003204:	4866      	ldr	r0, [pc, #408]	; (80033a0 <FuncMenu_DrawOutputMenu+0x288>)
 8003206:	f00b f9db 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800320a:	2300      	movs	r3, #0
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2302      	movs	r3, #2
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003216:	2296      	movs	r2, #150	; 0x96
 8003218:	210a      	movs	r1, #10
 800321a:	4862      	ldr	r0, [pc, #392]	; (80033a4 <FuncMenu_DrawOutputMenu+0x28c>)
 800321c:	f00b f9d0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003220:	2300      	movs	r3, #0
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2302      	movs	r3, #2
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800322c:	22aa      	movs	r2, #170	; 0xaa
 800322e:	210a      	movs	r1, #10
 8003230:	485d      	ldr	r0, [pc, #372]	; (80033a8 <FuncMenu_DrawOutputMenu+0x290>)
 8003232:	f00b f9c5 	bl	800e5c0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003236:	f240 23fd 	movw	r3, #765	; 0x2fd
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2302      	movs	r3, #2
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2300      	movs	r3, #0
 8003242:	22d2      	movs	r2, #210	; 0xd2
 8003244:	2105      	movs	r1, #5
 8003246:	4859      	ldr	r0, [pc, #356]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003248:	f00b f9ba 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800324c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	2302      	movs	r3, #2
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	22d2      	movs	r2, #210	; 0xd2
 800325a:	2161      	movs	r1, #97	; 0x61
 800325c:	4853      	ldr	r0, [pc, #332]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800325e:	f00b f9af 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003262:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	22d2      	movs	r2, #210	; 0xd2
 8003270:	21af      	movs	r1, #175	; 0xaf
 8003272:	484e      	ldr	r0, [pc, #312]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003274:	f00b f9a4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003278:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	2302      	movs	r3, #2
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	22d2      	movs	r2, #210	; 0xd2
 8003286:	f44f 7182 	mov.w	r1, #260	; 0x104
 800328a:	4848      	ldr	r0, [pc, #288]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800328c:	f00b f998 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8003290:	e36c      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003292:	2300      	movs	r3, #0
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800329e:	2232      	movs	r2, #50	; 0x32
 80032a0:	210a      	movs	r1, #10
 80032a2:	483b      	ldr	r0, [pc, #236]	; (8003390 <FuncMenu_DrawOutputMenu+0x278>)
 80032a4:	f00b f98c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80032a8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	2302      	movs	r3, #2
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	2246      	movs	r2, #70	; 0x46
 80032b6:	210a      	movs	r1, #10
 80032b8:	4836      	ldr	r0, [pc, #216]	; (8003394 <FuncMenu_DrawOutputMenu+0x27c>)
 80032ba:	f00b f981 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032be:	2300      	movs	r3, #0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ca:	225a      	movs	r2, #90	; 0x5a
 80032cc:	210a      	movs	r1, #10
 80032ce:	4832      	ldr	r0, [pc, #200]	; (8003398 <FuncMenu_DrawOutputMenu+0x280>)
 80032d0:	f00b f976 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032d4:	2300      	movs	r3, #0
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032e0:	226e      	movs	r2, #110	; 0x6e
 80032e2:	210a      	movs	r1, #10
 80032e4:	482d      	ldr	r0, [pc, #180]	; (800339c <FuncMenu_DrawOutputMenu+0x284>)
 80032e6:	f00b f96b 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ea:	2300      	movs	r3, #0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2302      	movs	r3, #2
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032f6:	2282      	movs	r2, #130	; 0x82
 80032f8:	210a      	movs	r1, #10
 80032fa:	4829      	ldr	r0, [pc, #164]	; (80033a0 <FuncMenu_DrawOutputMenu+0x288>)
 80032fc:	f00b f960 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003300:	2300      	movs	r3, #0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800330c:	2296      	movs	r2, #150	; 0x96
 800330e:	210a      	movs	r1, #10
 8003310:	4824      	ldr	r0, [pc, #144]	; (80033a4 <FuncMenu_DrawOutputMenu+0x28c>)
 8003312:	f00b f955 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003316:	2300      	movs	r3, #0
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2302      	movs	r3, #2
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003322:	22aa      	movs	r2, #170	; 0xaa
 8003324:	210a      	movs	r1, #10
 8003326:	4820      	ldr	r0, [pc, #128]	; (80033a8 <FuncMenu_DrawOutputMenu+0x290>)
 8003328:	f00b f94a 	bl	800e5c0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800332c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2302      	movs	r3, #2
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	22d2      	movs	r2, #210	; 0xd2
 800333a:	2105      	movs	r1, #5
 800333c:	481b      	ldr	r0, [pc, #108]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800333e:	f00b f93f 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003342:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	2302      	movs	r3, #2
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	22d2      	movs	r2, #210	; 0xd2
 8003350:	2161      	movs	r1, #97	; 0x61
 8003352:	4816      	ldr	r0, [pc, #88]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003354:	f00b f934 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003358:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	2302      	movs	r3, #2
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	22d2      	movs	r2, #210	; 0xd2
 8003366:	21af      	movs	r1, #175	; 0xaf
 8003368:	4810      	ldr	r0, [pc, #64]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 800336a:	f00b f929 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800336e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2302      	movs	r3, #2
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2300      	movs	r3, #0
 800337a:	22d2      	movs	r2, #210	; 0xd2
 800337c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003380:	480a      	ldr	r0, [pc, #40]	; (80033ac <FuncMenu_DrawOutputMenu+0x294>)
 8003382:	f00b f91d 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 8003386:	e2f1      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
 8003388:	080135c4 	.word	0x080135c4
 800338c:	080135d4 	.word	0x080135d4
 8003390:	080135e4 	.word	0x080135e4
 8003394:	080135ec 	.word	0x080135ec
 8003398:	080135f8 	.word	0x080135f8
 800339c:	08013600 	.word	0x08013600
 80033a0:	0801360c 	.word	0x0801360c
 80033a4:	08013618 	.word	0x08013618
 80033a8:	08013620 	.word	0x08013620
 80033ac:	080135bc 	.word	0x080135bc
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033b0:	2300      	movs	r3, #0
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	2302      	movs	r3, #2
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033bc:	2232      	movs	r2, #50	; 0x32
 80033be:	210a      	movs	r1, #10
 80033c0:	48b9      	ldr	r0, [pc, #740]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80033c2:	f00b f8fd 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033c6:	2300      	movs	r3, #0
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2302      	movs	r3, #2
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033d2:	2246      	movs	r2, #70	; 0x46
 80033d4:	210a      	movs	r1, #10
 80033d6:	48b5      	ldr	r0, [pc, #724]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80033d8:	f00b f8f2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033dc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2302      	movs	r3, #2
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	225a      	movs	r2, #90	; 0x5a
 80033ea:	210a      	movs	r1, #10
 80033ec:	48b0      	ldr	r0, [pc, #704]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80033ee:	f00b f8e7 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033f2:	2300      	movs	r3, #0
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	2302      	movs	r3, #2
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033fe:	226e      	movs	r2, #110	; 0x6e
 8003400:	210a      	movs	r1, #10
 8003402:	48ac      	ldr	r0, [pc, #688]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 8003404:	f00b f8dc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003408:	2300      	movs	r3, #0
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003414:	2282      	movs	r2, #130	; 0x82
 8003416:	210a      	movs	r1, #10
 8003418:	48a7      	ldr	r0, [pc, #668]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 800341a:	f00b f8d1 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800341e:	2300      	movs	r3, #0
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2302      	movs	r3, #2
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800342a:	2296      	movs	r2, #150	; 0x96
 800342c:	210a      	movs	r1, #10
 800342e:	48a3      	ldr	r0, [pc, #652]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 8003430:	f00b f8c6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003434:	2300      	movs	r3, #0
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2302      	movs	r3, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003440:	22aa      	movs	r2, #170	; 0xaa
 8003442:	210a      	movs	r1, #10
 8003444:	489e      	ldr	r0, [pc, #632]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 8003446:	f00b f8bb 	bl	800e5c0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800344a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2302      	movs	r3, #2
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	22d2      	movs	r2, #210	; 0xd2
 8003458:	2105      	movs	r1, #5
 800345a:	489a      	ldr	r0, [pc, #616]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800345c:	f00b f8b0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003460:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	2302      	movs	r3, #2
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	22d2      	movs	r2, #210	; 0xd2
 800346e:	2161      	movs	r1, #97	; 0x61
 8003470:	4894      	ldr	r0, [pc, #592]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003472:	f00b f8a5 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003476:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2302      	movs	r3, #2
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	22d2      	movs	r2, #210	; 0xd2
 8003484:	21af      	movs	r1, #175	; 0xaf
 8003486:	488f      	ldr	r0, [pc, #572]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003488:	f00b f89a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800348c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2302      	movs	r3, #2
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2300      	movs	r3, #0
 8003498:	22d2      	movs	r2, #210	; 0xd2
 800349a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800349e:	4889      	ldr	r0, [pc, #548]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 80034a0:	f00b f88e 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 80034a4:	e262      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a6:	2300      	movs	r3, #0
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	2302      	movs	r3, #2
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034b2:	2232      	movs	r2, #50	; 0x32
 80034b4:	210a      	movs	r1, #10
 80034b6:	487c      	ldr	r0, [pc, #496]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80034b8:	f00b f882 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034bc:	2300      	movs	r3, #0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2302      	movs	r3, #2
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034c8:	2246      	movs	r2, #70	; 0x46
 80034ca:	210a      	movs	r1, #10
 80034cc:	4877      	ldr	r0, [pc, #476]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80034ce:	f00b f877 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034d2:	2300      	movs	r3, #0
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2302      	movs	r3, #2
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034de:	225a      	movs	r2, #90	; 0x5a
 80034e0:	210a      	movs	r1, #10
 80034e2:	4873      	ldr	r0, [pc, #460]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80034e4:	f00b f86c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2302      	movs	r3, #2
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	226e      	movs	r2, #110	; 0x6e
 80034f6:	210a      	movs	r1, #10
 80034f8:	486e      	ldr	r0, [pc, #440]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 80034fa:	f00b f861 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2302      	movs	r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350a:	2282      	movs	r2, #130	; 0x82
 800350c:	210a      	movs	r1, #10
 800350e:	486a      	ldr	r0, [pc, #424]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 8003510:	f00b f856 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003514:	2300      	movs	r3, #0
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2302      	movs	r3, #2
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003520:	2296      	movs	r2, #150	; 0x96
 8003522:	210a      	movs	r1, #10
 8003524:	4865      	ldr	r0, [pc, #404]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 8003526:	f00b f84b 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800352a:	2300      	movs	r3, #0
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2302      	movs	r3, #2
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003536:	22aa      	movs	r2, #170	; 0xaa
 8003538:	210a      	movs	r1, #10
 800353a:	4861      	ldr	r0, [pc, #388]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 800353c:	f00b f840 	bl	800e5c0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003540:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	2105      	movs	r1, #5
 8003550:	485c      	ldr	r0, [pc, #368]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003552:	f00b f835 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003556:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	2161      	movs	r1, #97	; 0x61
 8003566:	4857      	ldr	r0, [pc, #348]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003568:	f00b f82a 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800356c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2302      	movs	r3, #2
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	22d2      	movs	r2, #210	; 0xd2
 800357a:	21af      	movs	r1, #175	; 0xaf
 800357c:	4851      	ldr	r0, [pc, #324]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800357e:	f00b f81f 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003582:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2302      	movs	r3, #2
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	22d2      	movs	r2, #210	; 0xd2
 8003590:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003594:	484b      	ldr	r0, [pc, #300]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003596:	f00b f813 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 800359a:	e1e7      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	2232      	movs	r2, #50	; 0x32
 80035aa:	210a      	movs	r1, #10
 80035ac:	483e      	ldr	r0, [pc, #248]	; (80036a8 <FuncMenu_DrawOutputMenu+0x590>)
 80035ae:	f00b f807 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	2246      	movs	r2, #70	; 0x46
 80035c0:	210a      	movs	r1, #10
 80035c2:	483a      	ldr	r0, [pc, #232]	; (80036ac <FuncMenu_DrawOutputMenu+0x594>)
 80035c4:	f00a fffc 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035c8:	2300      	movs	r3, #0
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2302      	movs	r3, #2
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d4:	225a      	movs	r2, #90	; 0x5a
 80035d6:	210a      	movs	r1, #10
 80035d8:	4835      	ldr	r0, [pc, #212]	; (80036b0 <FuncMenu_DrawOutputMenu+0x598>)
 80035da:	f00a fff1 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035de:	2300      	movs	r3, #0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2302      	movs	r3, #2
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ea:	226e      	movs	r2, #110	; 0x6e
 80035ec:	210a      	movs	r1, #10
 80035ee:	4831      	ldr	r0, [pc, #196]	; (80036b4 <FuncMenu_DrawOutputMenu+0x59c>)
 80035f0:	f00a ffe6 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035f4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	2302      	movs	r3, #2
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	2282      	movs	r2, #130	; 0x82
 8003602:	210a      	movs	r1, #10
 8003604:	482c      	ldr	r0, [pc, #176]	; (80036b8 <FuncMenu_DrawOutputMenu+0x5a0>)
 8003606:	f00a ffdb 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360a:	2300      	movs	r3, #0
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2302      	movs	r3, #2
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003616:	2296      	movs	r2, #150	; 0x96
 8003618:	210a      	movs	r1, #10
 800361a:	4828      	ldr	r0, [pc, #160]	; (80036bc <FuncMenu_DrawOutputMenu+0x5a4>)
 800361c:	f00a ffd0 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003620:	2300      	movs	r3, #0
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	2302      	movs	r3, #2
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800362c:	22aa      	movs	r2, #170	; 0xaa
 800362e:	210a      	movs	r1, #10
 8003630:	4823      	ldr	r0, [pc, #140]	; (80036c0 <FuncMenu_DrawOutputMenu+0x5a8>)
 8003632:	f00a ffc5 	bl	800e5c0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003636:	f240 23fd 	movw	r3, #765	; 0x2fd
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2302      	movs	r3, #2
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	22d2      	movs	r2, #210	; 0xd2
 8003644:	2105      	movs	r1, #5
 8003646:	481f      	ldr	r0, [pc, #124]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003648:	f00a ffba 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800364c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2302      	movs	r3, #2
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2300      	movs	r3, #0
 8003658:	22d2      	movs	r2, #210	; 0xd2
 800365a:	2161      	movs	r1, #97	; 0x61
 800365c:	4819      	ldr	r0, [pc, #100]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800365e:	f00a ffaf 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003662:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2302      	movs	r3, #2
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	22d2      	movs	r2, #210	; 0xd2
 8003670:	21af      	movs	r1, #175	; 0xaf
 8003672:	4814      	ldr	r0, [pc, #80]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003674:	f00a ffa4 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003678:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2302      	movs	r3, #2
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	22d2      	movs	r2, #210	; 0xd2
 8003686:	f44f 7182 	mov.w	r1, #260	; 0x104
 800368a:	480e      	ldr	r0, [pc, #56]	; (80036c4 <FuncMenu_DrawOutputMenu+0x5ac>)
 800368c:	f00a ff98 	bl	800e5c0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003690:	2300      	movs	r3, #0
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2302      	movs	r3, #2
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800369c:	2232      	movs	r2, #50	; 0x32
 800369e:	2196      	movs	r1, #150	; 0x96
 80036a0:	4809      	ldr	r0, [pc, #36]	; (80036c8 <FuncMenu_DrawOutputMenu+0x5b0>)
 80036a2:	f00a ff8d 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 80036a6:	e161      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
 80036a8:	080135e4 	.word	0x080135e4
 80036ac:	080135ec 	.word	0x080135ec
 80036b0:	080135f8 	.word	0x080135f8
 80036b4:	08013600 	.word	0x08013600
 80036b8:	0801360c 	.word	0x0801360c
 80036bc:	08013618 	.word	0x08013618
 80036c0:	08013620 	.word	0x08013620
 80036c4:	080135bc 	.word	0x080135bc
 80036c8:	08013628 	.word	0x08013628
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d8:	2232      	movs	r2, #50	; 0x32
 80036da:	210a      	movs	r1, #10
 80036dc:	48a5      	ldr	r0, [pc, #660]	; (8003974 <FuncMenu_DrawOutputMenu+0x85c>)
 80036de:	f00a ff6f 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036e2:	2300      	movs	r3, #0
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2302      	movs	r3, #2
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ee:	2246      	movs	r2, #70	; 0x46
 80036f0:	210a      	movs	r1, #10
 80036f2:	48a1      	ldr	r0, [pc, #644]	; (8003978 <FuncMenu_DrawOutputMenu+0x860>)
 80036f4:	f00a ff64 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036f8:	2300      	movs	r3, #0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2302      	movs	r3, #2
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003704:	225a      	movs	r2, #90	; 0x5a
 8003706:	210a      	movs	r1, #10
 8003708:	489c      	ldr	r0, [pc, #624]	; (800397c <FuncMenu_DrawOutputMenu+0x864>)
 800370a:	f00a ff59 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370e:	2300      	movs	r3, #0
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2302      	movs	r3, #2
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800371a:	226e      	movs	r2, #110	; 0x6e
 800371c:	210a      	movs	r1, #10
 800371e:	4898      	ldr	r0, [pc, #608]	; (8003980 <FuncMenu_DrawOutputMenu+0x868>)
 8003720:	f00a ff4e 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003724:	2300      	movs	r3, #0
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	2302      	movs	r3, #2
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003730:	2282      	movs	r2, #130	; 0x82
 8003732:	210a      	movs	r1, #10
 8003734:	4893      	ldr	r0, [pc, #588]	; (8003984 <FuncMenu_DrawOutputMenu+0x86c>)
 8003736:	f00a ff43 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800373a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	2302      	movs	r3, #2
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	2296      	movs	r2, #150	; 0x96
 8003748:	210a      	movs	r1, #10
 800374a:	488f      	ldr	r0, [pc, #572]	; (8003988 <FuncMenu_DrawOutputMenu+0x870>)
 800374c:	f00a ff38 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003750:	2300      	movs	r3, #0
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2302      	movs	r3, #2
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800375c:	22aa      	movs	r2, #170	; 0xaa
 800375e:	210a      	movs	r1, #10
 8003760:	488a      	ldr	r0, [pc, #552]	; (800398c <FuncMenu_DrawOutputMenu+0x874>)
 8003762:	f00a ff2d 	bl	800e5c0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003766:	f240 23fd 	movw	r3, #765	; 0x2fd
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	2302      	movs	r3, #2
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	22d2      	movs	r2, #210	; 0xd2
 8003774:	2105      	movs	r1, #5
 8003776:	4886      	ldr	r0, [pc, #536]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 8003778:	f00a ff22 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800377c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2302      	movs	r3, #2
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	22d2      	movs	r2, #210	; 0xd2
 800378a:	2161      	movs	r1, #97	; 0x61
 800378c:	4880      	ldr	r0, [pc, #512]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 800378e:	f00a ff17 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003792:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	2302      	movs	r3, #2
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	22d2      	movs	r2, #210	; 0xd2
 80037a0:	21af      	movs	r1, #175	; 0xaf
 80037a2:	487b      	ldr	r0, [pc, #492]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80037a4:	f00a ff0c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037a8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	2302      	movs	r3, #2
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	22d2      	movs	r2, #210	; 0xd2
 80037b6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037ba:	4875      	ldr	r0, [pc, #468]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80037bc:	f00a ff00 	bl	800e5c0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037c0:	2300      	movs	r3, #0
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	2302      	movs	r3, #2
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037cc:	2232      	movs	r2, #50	; 0x32
 80037ce:	2196      	movs	r1, #150	; 0x96
 80037d0:	4870      	ldr	r0, [pc, #448]	; (8003994 <FuncMenu_DrawOutputMenu+0x87c>)
 80037d2:	f00a fef5 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 80037d6:	e0c9      	b.n	800396c <FuncMenu_DrawOutputMenu+0x854>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d8:	2300      	movs	r3, #0
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	2302      	movs	r3, #2
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e4:	2232      	movs	r2, #50	; 0x32
 80037e6:	210a      	movs	r1, #10
 80037e8:	4862      	ldr	r0, [pc, #392]	; (8003974 <FuncMenu_DrawOutputMenu+0x85c>)
 80037ea:	f00a fee9 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ee:	2300      	movs	r3, #0
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	2302      	movs	r3, #2
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037fa:	2246      	movs	r2, #70	; 0x46
 80037fc:	210a      	movs	r1, #10
 80037fe:	485e      	ldr	r0, [pc, #376]	; (8003978 <FuncMenu_DrawOutputMenu+0x860>)
 8003800:	f00a fede 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003804:	2300      	movs	r3, #0
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	2302      	movs	r3, #2
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003810:	225a      	movs	r2, #90	; 0x5a
 8003812:	210a      	movs	r1, #10
 8003814:	4859      	ldr	r0, [pc, #356]	; (800397c <FuncMenu_DrawOutputMenu+0x864>)
 8003816:	f00a fed3 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800381a:	2300      	movs	r3, #0
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2302      	movs	r3, #2
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003826:	226e      	movs	r2, #110	; 0x6e
 8003828:	210a      	movs	r1, #10
 800382a:	4855      	ldr	r0, [pc, #340]	; (8003980 <FuncMenu_DrawOutputMenu+0x868>)
 800382c:	f00a fec8 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003830:	2300      	movs	r3, #0
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	2302      	movs	r3, #2
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800383c:	2282      	movs	r2, #130	; 0x82
 800383e:	210a      	movs	r1, #10
 8003840:	4850      	ldr	r0, [pc, #320]	; (8003984 <FuncMenu_DrawOutputMenu+0x86c>)
 8003842:	f00a febd 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003846:	2300      	movs	r3, #0
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2302      	movs	r3, #2
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003852:	2296      	movs	r2, #150	; 0x96
 8003854:	210a      	movs	r1, #10
 8003856:	484c      	ldr	r0, [pc, #304]	; (8003988 <FuncMenu_DrawOutputMenu+0x870>)
 8003858:	f00a feb2 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800385c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2302      	movs	r3, #2
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	22aa      	movs	r2, #170	; 0xaa
 800386a:	210a      	movs	r1, #10
 800386c:	4847      	ldr	r0, [pc, #284]	; (800398c <FuncMenu_DrawOutputMenu+0x874>)
 800386e:	f00a fea7 	bl	800e5c0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003872:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2302      	movs	r3, #2
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	22d2      	movs	r2, #210	; 0xd2
 8003880:	2105      	movs	r1, #5
 8003882:	4843      	ldr	r0, [pc, #268]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 8003884:	f00a fe9c 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003888:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2302      	movs	r3, #2
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	22d2      	movs	r2, #210	; 0xd2
 8003896:	2161      	movs	r1, #97	; 0x61
 8003898:	483d      	ldr	r0, [pc, #244]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 800389a:	f00a fe91 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800389e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	2302      	movs	r3, #2
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	22d2      	movs	r2, #210	; 0xd2
 80038ac:	21af      	movs	r1, #175	; 0xaf
 80038ae:	483a      	ldr	r0, [pc, #232]	; (8003998 <FuncMenu_DrawOutputMenu+0x880>)
 80038b0:	f00a fe86 	bl	800e5c0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038b4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2302      	movs	r3, #2
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	22d2      	movs	r2, #210	; 0xd2
 80038c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038c6:	4832      	ldr	r0, [pc, #200]	; (8003990 <FuncMenu_DrawOutputMenu+0x878>)
 80038c8:	f00a fe7a 	bl	800e5c0 <ILI9341_Draw_Text>

				if(SM_IsFuncPwmDutyMode())
 80038cc:	f002 ff02 	bl	80066d4 <SM_IsFuncPwmDutyMode>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <FuncMenu_DrawOutputMenu+0x7d6>
					ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038d6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2302      	movs	r3, #2
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	2232      	movs	r2, #50	; 0x32
 80038e4:	2196      	movs	r1, #150	; 0x96
 80038e6:	482d      	ldr	r0, [pc, #180]	; (800399c <FuncMenu_DrawOutputMenu+0x884>)
 80038e8:	f00a fe6a 	bl	800e5c0 <ILI9341_Draw_Text>
 80038ec:	e00a      	b.n	8003904 <FuncMenu_DrawOutputMenu+0x7ec>
				else
					ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ee:	2300      	movs	r3, #0
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	2302      	movs	r3, #2
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038fa:	2232      	movs	r2, #50	; 0x32
 80038fc:	2196      	movs	r1, #150	; 0x96
 80038fe:	4827      	ldr	r0, [pc, #156]	; (800399c <FuncMenu_DrawOutputMenu+0x884>)
 8003900:	f00a fe5e 	bl	800e5c0 <ILI9341_Draw_Text>

				char duty[10] = "";
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	809a      	strh	r2, [r3, #4]
				snprintf(duty, sizeof(duty), "%0.2f%%", ((float)TIM3->CCR2 / (float)TIM3->ARR) * 100);
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <FuncMenu_DrawOutputMenu+0x888>)
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <FuncMenu_DrawOutputMenu+0x888>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800392a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80039a4 <FuncMenu_DrawOutputMenu+0x88c>
 8003932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003936:	ee17 0a90 	vmov	r0, s15
 800393a:	f7fc fe2d 	bl	8000598 <__aeabi_f2d>
 800393e:	4603      	mov	r3, r0
 8003940:	460c      	mov	r4, r1
 8003942:	f107 0008 	add.w	r0, r7, #8
 8003946:	e9cd 3400 	strd	r3, r4, [sp]
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <FuncMenu_DrawOutputMenu+0x890>)
 800394c:	210a      	movs	r1, #10
 800394e:	f00c f9db 	bl	800fd08 <sniprintf>
				ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003952:	f107 0008 	add.w	r0, r7, #8
 8003956:	2300      	movs	r3, #0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2302      	movs	r3, #2
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003962:	2232      	movs	r2, #50	; 0x32
 8003964:	21dc      	movs	r1, #220	; 0xdc
 8003966:	f00a fe2b 	bl	800e5c0 <ILI9341_Draw_Text>
				break;
 800396a:	bf00      	nop
		}

	}


}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	080135e4 	.word	0x080135e4
 8003978:	080135ec 	.word	0x080135ec
 800397c:	080135f8 	.word	0x080135f8
 8003980:	08013600 	.word	0x08013600
 8003984:	0801360c 	.word	0x0801360c
 8003988:	08013618 	.word	0x08013618
 800398c:	08013620 	.word	0x08013620
 8003990:	080135bc 	.word	0x080135bc
 8003994:	08013628 	.word	0x08013628
 8003998:	08013638 	.word	0x08013638
 800399c:	08013640 	.word	0x08013640
 80039a0:	40000400 	.word	0x40000400
 80039a4:	42c80000 	.word	0x42c80000
 80039a8:	08013648 	.word	0x08013648

080039ac <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d007      	beq.n	80039cc <GainMenu_DrawMenu+0x20>
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d008      	beq.n	80039d2 <GainMenu_DrawMenu+0x26>
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d000      	beq.n	80039c6 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 80039c4:	e008      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039c6:	f000 f80b 	bl	80039e0 <GainMenu_DrawMainMenu>
			break;
 80039ca:	e005      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039cc:	f000 f850 	bl	8003a70 <GainMenu_DrawSignalMenu>
			break;
 80039d0:	e002      	b.n	80039d8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 80039d2:	f000 f863 	bl	8003a9c <GainMenu_DrawSyncMenu>
			break;
 80039d6:	bf00      	nop

	}
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	2302      	movs	r3, #2
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	220a      	movs	r2, #10
 80039f4:	210a      	movs	r1, #10
 80039f6:	481a      	ldr	r0, [pc, #104]	; (8003a60 <GainMenu_DrawMainMenu+0x80>)
 80039f8:	f00a fde2 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80039fc:	f7fd faba 	bl	8000f74 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a00:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2302      	movs	r3, #2
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	22d2      	movs	r2, #210	; 0xd2
 8003a0e:	2105      	movs	r1, #5
 8003a10:	4814      	ldr	r0, [pc, #80]	; (8003a64 <GainMenu_DrawMainMenu+0x84>)
 8003a12:	f00a fdd5 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a16:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2300      	movs	r3, #0
 8003a22:	22d2      	movs	r2, #210	; 0xd2
 8003a24:	2161      	movs	r1, #97	; 0x61
 8003a26:	4810      	ldr	r0, [pc, #64]	; (8003a68 <GainMenu_DrawMainMenu+0x88>)
 8003a28:	f00a fdca 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a2c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	2302      	movs	r3, #2
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	22d2      	movs	r2, #210	; 0xd2
 8003a3a:	21af      	movs	r1, #175	; 0xaf
 8003a3c:	480b      	ldr	r0, [pc, #44]	; (8003a6c <GainMenu_DrawMainMenu+0x8c>)
 8003a3e:	f00a fdbf 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a42:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2302      	movs	r3, #2
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	22d2      	movs	r2, #210	; 0xd2
 8003a50:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <GainMenu_DrawMainMenu+0x8c>)
 8003a56:	f00a fdb3 	bl	800e5c0 <ILI9341_Draw_Text>
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	08013650 	.word	0x08013650
 8003a64:	0801365c 	.word	0x0801365c
 8003a68:	08013664 	.word	0x08013664
 8003a6c:	0801366c 	.word	0x0801366c

08003a70 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	220a      	movs	r2, #10
 8003a84:	210a      	movs	r1, #10
 8003a86:	4804      	ldr	r0, [pc, #16]	; (8003a98 <GainMenu_DrawSignalMenu+0x28>)
 8003a88:	f00a fd9a 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a8c:	f7fd fa72 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	08013674 	.word	0x08013674

08003a9c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	220a      	movs	r2, #10
 8003ab0:	210a      	movs	r1, #10
 8003ab2:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <GainMenu_DrawSyncMenu+0x28>)
 8003ab4:	f00a fd84 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ab8:	f7fd fa5c 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	08013684 	.word	0x08013684

08003ac8 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d007      	beq.n	8003ae8 <ToplevelMenu_DrawMenu+0x20>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d008      	beq.n	8003aee <ToplevelMenu_DrawMenu+0x26>
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d000      	beq.n	8003ae2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003ae0:	e008      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003ae2:	f000 f80b 	bl	8003afc <ToplevelMenu_DrawMainMenu>
			break;
 8003ae6:	e005      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003ae8:	f000 f848 	bl	8003b7c <ToplevelMenu_DrawOutputMenu>
			break;
 8003aec:	e002      	b.n	8003af4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003aee:	f000 f88f 	bl	8003c10 <ToplevelMenu_DrawInputMenu>
			break;
 8003af2:	bf00      	nop

	}
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003b02:	481a      	ldr	r0, [pc, #104]	; (8003b6c <ToplevelMenu_DrawMainMenu+0x70>)
 8003b04:	f00c f8f8 	bl	800fcf8 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b08:	f7fd fa34 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b0c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	2302      	movs	r3, #2
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	22d2      	movs	r2, #210	; 0xd2
 8003b1a:	2106      	movs	r1, #6
 8003b1c:	4814      	ldr	r0, [pc, #80]	; (8003b70 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b1e:	f00a fd4f 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b22:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	2302      	movs	r3, #2
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	22d2      	movs	r2, #210	; 0xd2
 8003b30:	215d      	movs	r1, #93	; 0x5d
 8003b32:	4810      	ldr	r0, [pc, #64]	; (8003b74 <ToplevelMenu_DrawMainMenu+0x78>)
 8003b34:	f00a fd44 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2302      	movs	r3, #2
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	22d2      	movs	r2, #210	; 0xd2
 8003b46:	21af      	movs	r1, #175	; 0xaf
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003b4a:	f00a fd39 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b4e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2302      	movs	r3, #2
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	22d2      	movs	r2, #210	; 0xd2
 8003b5c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b60:	4805      	ldr	r0, [pc, #20]	; (8003b78 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003b62:	f00a fd2d 	bl	800e5c0 <ILI9341_Draw_Text>


}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08013694 	.word	0x08013694
 8003b70:	080136a8 	.word	0x080136a8
 8003b74:	080136b0 	.word	0x080136b0
 8003b78:	080136b8 	.word	0x080136b8

08003b7c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	2302      	movs	r3, #2
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	220a      	movs	r2, #10
 8003b90:	210a      	movs	r1, #10
 8003b92:	481a      	ldr	r0, [pc, #104]	; (8003bfc <ToplevelMenu_DrawOutputMenu+0x80>)
 8003b94:	f00a fd14 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b98:	f7fd f9ec 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b9c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	22d2      	movs	r2, #210	; 0xd2
 8003baa:	210d      	movs	r1, #13
 8003bac:	4814      	ldr	r0, [pc, #80]	; (8003c00 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003bae:	f00a fd07 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003bb2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	22d2      	movs	r2, #210	; 0xd2
 8003bc0:	2163      	movs	r1, #99	; 0x63
 8003bc2:	4810      	ldr	r0, [pc, #64]	; (8003c04 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bc4:	f00a fcfc 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2302      	movs	r3, #2
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	22d2      	movs	r2, #210	; 0xd2
 8003bd6:	21b0      	movs	r1, #176	; 0xb0
 8003bd8:	480b      	ldr	r0, [pc, #44]	; (8003c08 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003bda:	f00a fcf1 	bl	800e5c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003bde:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2302      	movs	r3, #2
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	22d2      	movs	r2, #210	; 0xd2
 8003bec:	21f5      	movs	r1, #245	; 0xf5
 8003bee:	4807      	ldr	r0, [pc, #28]	; (8003c0c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003bf0:	f00a fce6 	bl	800e5c0 <ILI9341_Draw_Text>
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	080136c0 	.word	0x080136c0
 8003c00:	080136c8 	.word	0x080136c8
 8003c04:	080136d0 	.word	0x080136d0
 8003c08:	080136d8 	.word	0x080136d8
 8003c0c:	080136e0 	.word	0x080136e0

08003c10 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	220a      	movs	r2, #10
 8003c24:	210a      	movs	r1, #10
 8003c26:	4804      	ldr	r0, [pc, #16]	; (8003c38 <ToplevelMenu_DrawInputMenu+0x28>)
 8003c28:	f00a fcca 	bl	800e5c0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c2c:	f7fd f9a2 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	080136e8 	.word	0x080136e8

08003c3c <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <BiasMenu_getStatus+0x14>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20001ec9 	.word	0x20001ec9

08003c54 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuEntryHandler Event captured\n");
 8003c58:	480b      	ldr	r0, [pc, #44]	; (8003c88 <BiasMenuEntryHandler+0x34>)
 8003c5a:	f00c f84d 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8003c5e:	f7fd fc49 	bl	80014f4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <BiasMenuEntryHandler+0x38>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <BiasMenuEntryHandler+0x3c>)
 8003c6a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003c70:	f001 fa60 	bl	8005134 <BO_GetDcBiasEncoderValue>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <BiasMenuEntryHandler+0x3c>)
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <BiasMenuEntryHandler+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003c82:	230e      	movs	r3, #14
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	080136f0 	.word	0x080136f0
 8003c8c:	20001ec9 	.word	0x20001ec9
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	20001ecb 	.word	0x20001ecb

08003c98 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuInputHandler Event captured\n");
 8003c9c:	4807      	ldr	r0, [pc, #28]	; (8003cbc <BiasMenuInputHandler+0x24>)
 8003c9e:	f00c f82b 	bl	800fcf8 <puts>
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f002 fc90 	bl	80065c8 <SM_GetEncoderValue>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fa4e 	bl	800514c <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <BiasMenuInputHandler+0x28>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003cb6:	230e      	movs	r3, #14
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	08013714 	.word	0x08013714
 8003cc0:	20001ecb 	.word	0x20001ecb

08003cc4 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuExitHandler Event captured\n");
 8003cc8:	4808      	ldr	r0, [pc, #32]	; (8003cec <BiasMenuExitHandler+0x28>)
 8003cca:	f00c f815 	bl	800fcf8 <puts>
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <BiasMenuExitHandler+0x2c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003cd4:	f7fd fc0e 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003cd8:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <BiasMenuExitHandler+0x30>)
 8003cda:	f00c f80d 	bl	800fcf8 <puts>
	#endif

	eNewEvent = evIdle;
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <BiasMenuExitHandler+0x34>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003ce4:	2301      	movs	r3, #1
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	08013738 	.word	0x08013738
 8003cf0:	20001ec9 	.word	0x20001ec9
 8003cf4:	0801375c 	.word	0x0801375c
 8003cf8:	20001ecb 	.word	0x20001ecb

08003cfc <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003d00:	4bbb      	ldr	r3, [pc, #748]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b0e      	cmp	r3, #14
 8003d06:	f200 821c 	bhi.w	8004142 <EM_ProcessEvent+0x446>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <EM_ProcessEvent+0x14>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d7f 	.word	0x08003d7f
 8003d18:	08003e05 	.word	0x08003e05
 8003d1c:	08003e23 	.word	0x08003e23
 8003d20:	08003e69 	.word	0x08003e69
 8003d24:	08003eaf 	.word	0x08003eaf
 8003d28:	08003ee1 	.word	0x08003ee1
 8003d2c:	08003f2d 	.word	0x08003f2d
 8003d30:	08003f5f 	.word	0x08003f5f
 8003d34:	08004143 	.word	0x08004143
 8003d38:	08003f91 	.word	0x08003f91
 8003d3c:	08004021 	.word	0x08004021
 8003d40:	08004053 	.word	0x08004053
 8003d44:	08004083 	.word	0x08004083
 8003d48:	0800410d 	.word	0x0800410d
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003d4c:	48a9      	ldr	r0, [pc, #676]	; (8003ff4 <EM_ProcessEvent+0x2f8>)
 8003d4e:	f00b ffd3 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003d52:	4ba9      	ldr	r3, [pc, #676]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d105      	bne.n	8003d66 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003d5a:	f001 f82b 	bl	8004db4 <ToplevelOutputMenuEntryHandler>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d64:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d66:	4ba4      	ldr	r3, [pc, #656]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	f040 81eb 	bne.w	8004146 <EM_ProcessEvent+0x44a>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003d70:	f001 f84c 	bl	8004e0c <ToplevelInputMenuEntryHandler>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d7a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003d7c:	e1e3      	b.n	8004146 <EM_ProcessEvent+0x44a>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 8003d7e:	489f      	ldr	r0, [pc, #636]	; (8003ffc <EM_ProcessEvent+0x300>)
 8003d80:	f00b ffba 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003d84:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b06      	cmp	r3, #6
 8003d8a:	d105      	bne.n	8003d98 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003d8c:	f001 f828 	bl	8004de0 <ToplevelOutputMenuExitHandler>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b96      	ldr	r3, [pc, #600]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003d96:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003d98:	4b97      	ldr	r3, [pc, #604]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d108      	bne.n	8003db2 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f000 fff7 	bl	8004d94 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003da6:	f000 fd8d 	bl	80048c4 <FuncMainMenuEntryHandler>
 8003daa:	4603      	mov	r3, r0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b90      	ldr	r3, [pc, #576]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003db0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003db2:	4b91      	ldr	r3, [pc, #580]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d108      	bne.n	8003dcc <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 ffea 	bl	8004d94 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003dc0:	f000 fb62 	bl	8004488 <FreqMainMenuEntryHandler>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b89      	ldr	r3, [pc, #548]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003dca:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003dcc:	4b8a      	ldr	r3, [pc, #552]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d108      	bne.n	8003de6 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f000 ffdd 	bl	8004d94 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003dda:	f000 febd 	bl	8004b58 <GainMainMenuEntryHandler>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003de4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003de6:	4b84      	ldr	r3, [pc, #528]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	f040 81ad 	bne.w	800414a <EM_ProcessEvent+0x44e>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 ffcf 	bl	8004d94 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003df6:	f7ff ff2d 	bl	8003c54 <BiasMenuEntryHandler>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e02:	e1a2      	b.n	800414a <EM_ProcessEvent+0x44e>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003e04:	487e      	ldr	r0, [pc, #504]	; (8004000 <EM_ProcessEvent+0x304>)
 8003e06:	f00b ff77 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	f040 819d 	bne.w	800414e <EM_ProcessEvent+0x452>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003e14:	f001 f810 	bl	8004e38 <ToplevelInputMenuExitHandler>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e1e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e20:	e195      	b.n	800414e <EM_ProcessEvent+0x452>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003e22:	4878      	ldr	r0, [pc, #480]	; (8004004 <EM_ProcessEvent+0x308>)
 8003e24:	f00b ff68 	bl	800fcf8 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003e28:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d105      	bne.n	8003e3c <EM_ProcessEvent+0x140>
			{
				eNextState = FuncMainMenuExitHandler();
 8003e30:	f000 fd5e 	bl	80048f0 <FuncMainMenuExitHandler>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e3a:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 8003e3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <EM_ProcessEvent+0x154>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003e44:	f000 fd72 	bl	800492c <FuncSignalMenuEntryHandler>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e4e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	f040 817c 	bne.w	8004152 <EM_ProcessEvent+0x456>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003e5a:	f000 fe0d 	bl	8004a78 <FuncSyncMenuEntryHandler>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e64:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e66:	e174      	b.n	8004152 <EM_ProcessEvent+0x456>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003e68:	4867      	ldr	r0, [pc, #412]	; (8004008 <EM_ProcessEvent+0x30c>)
 8003e6a:	f00b ff45 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003e6e:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d105      	bne.n	8003e82 <EM_ProcessEvent+0x186>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003e76:	f000 fd93 	bl	80049a0 <FuncSignalMenuInputHandler>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e80:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d105      	bne.n	8003e96 <EM_ProcessEvent+0x19a>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003e8a:	f000 fddd 	bl	8004a48 <FuncSignalMenuExitHandler>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	4b57      	ldr	r3, [pc, #348]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003e94:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003e96:	4b58      	ldr	r3, [pc, #352]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	f040 815b 	bne.w	8004156 <EM_ProcessEvent+0x45a>
			{
				eNextState = FuncSignalToggleDutyMode();
 8003ea0:	f000 fdc0 	bl	8004a24 <FuncSignalToggleDutyMode>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003eaa:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003eac:	e153      	b.n	8004156 <EM_ProcessEvent+0x45a>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003eae:	4857      	ldr	r0, [pc, #348]	; (800400c <EM_ProcessEvent+0x310>)
 8003eb0:	f00b ff22 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d105      	bne.n	8003ec8 <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003ebc:	f000 fe14 	bl	8004ae8 <FuncSyncMenuInputHandler>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003ec6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b06      	cmp	r3, #6
 8003ece:	f040 8144 	bne.w	800415a <EM_ProcessEvent+0x45e>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003ed2:	f000 fe1f 	bl	8004b14 <FuncSyncMenuExitHandler>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003edc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003ede:	e13c      	b.n	800415a <EM_ProcessEvent+0x45e>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003ee0:	484b      	ldr	r0, [pc, #300]	; (8004010 <EM_ProcessEvent+0x314>)
 8003ee2:	f00b ff09 	bl	800fcf8 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d108      	bne.n	8003f00 <EM_ProcessEvent+0x204>
			{
				eNextState = GainMainMenuExitHandler();
 8003eee:	f000 fe49 	bl	8004b84 <GainMainMenuExitHandler>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003ef8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003efa:	2002      	movs	r0, #2
 8003efc:	f000 ff4a 	bl	8004d94 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003f00:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <EM_ProcessEvent+0x218>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003f08:	f000 fe58 	bl	8004bbc <GainSignalMenuEntryHandler>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f12:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f14:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	f040 8120 	bne.w	800415e <EM_ProcessEvent+0x462>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003f1e:	f000 fecb 	bl	8004cb8 <GainSyncMenuEntryHandler>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f28:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f2a:	e118      	b.n	800415e <EM_ProcessEvent+0x462>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003f2c:	4839      	ldr	r0, [pc, #228]	; (8004014 <EM_ProcessEvent+0x318>)
 8003f2e:	f00b fee3 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d105      	bne.n	8003f46 <EM_ProcessEvent+0x24a>
			{
				eNextState = GainSignalMenuInputHandler();
 8003f3a:	f000 fe77 	bl	8004c2c <GainSignalMenuInputHandler>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	f040 8109 	bne.w	8004162 <EM_ProcessEvent+0x466>
			{
				eNextState = GainSignalMenuExitHandler();
 8003f50:	f000 fe9c 	bl	8004c8c <GainSignalMenuExitHandler>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f5a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f5c:	e101      	b.n	8004162 <EM_ProcessEvent+0x466>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003f5e:	482e      	ldr	r0, [pc, #184]	; (8004018 <EM_ProcessEvent+0x31c>)
 8003f60:	f00b feca 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d105      	bne.n	8003f78 <EM_ProcessEvent+0x27c>
			{
				eNextState = GainSyncMenuInputHandler();
 8003f6c:	f000 feda 	bl	8004d24 <GainSyncMenuInputHandler>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f76:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f78:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	f040 80f2 	bne.w	8004166 <EM_ProcessEvent+0x46a>
			{
				eNextState = GainSyncMenuExitHandler();
 8003f82:	f000 fee5 	bl	8004d50 <GainSyncMenuExitHandler>
 8003f86:	4603      	mov	r3, r0
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003f8c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f8e:	e0ea      	b.n	8004166 <EM_ProcessEvent+0x46a>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003f90:	4822      	ldr	r0, [pc, #136]	; (800401c <EM_ProcessEvent+0x320>)
 8003f92:	f00b feb1 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d108      	bne.n	8003fb0 <EM_ProcessEvent+0x2b4>
			{
				eNextState = FreqMainMenuExitHandler();
 8003f9e:	f000 fa89 	bl	80044b4 <FreqMainMenuExitHandler>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fa8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003faa:	2002      	movs	r0, #2
 8003fac:	f000 fef2 	bl	8004d94 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <EM_ProcessEvent+0x2c8>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003fb8:	f000 fa9e 	bl	80044f8 <FreqPresetMenuEntryHandler>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fc2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d105      	bne.n	8003fd8 <EM_ProcessEvent+0x2dc>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003fcc:	f000 faf4 	bl	80045b8 <FreqAdjustMenuEntryHandler>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fd6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <EM_ProcessEvent+0x2fc>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	f040 80c4 	bne.w	800416a <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003fe2:	f000 f8e9 	bl	80041b8 <FreqSweepMenuEntryHandler>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <EM_ProcessEvent+0x2f4>)
 8003fec:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003fee:	e0bc      	b.n	800416a <EM_ProcessEvent+0x46e>
 8003ff0:	20001eca 	.word	0x20001eca
 8003ff4:	08013774 	.word	0x08013774
 8003ff8:	20001ecb 	.word	0x20001ecb
 8003ffc:	08013780 	.word	0x08013780
 8004000:	0801379c 	.word	0x0801379c
 8004004:	080137b8 	.word	0x080137b8
 8004008:	080137d0 	.word	0x080137d0
 800400c:	080137e8 	.word	0x080137e8
 8004010:	08013800 	.word	0x08013800
 8004014:	08013818 	.word	0x08013818
 8004018:	08013830 	.word	0x08013830
 800401c:	08013848 	.word	0x08013848

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8004020:	4857      	ldr	r0, [pc, #348]	; (8004180 <EM_ProcessEvent+0x484>)
 8004022:	f00b fe69 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004026:	4b57      	ldr	r3, [pc, #348]	; (8004184 <EM_ProcessEvent+0x488>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d105      	bne.n	800403a <EM_ProcessEvent+0x33e>
			{
				eNextState = FreqPresetMenuInputHandler();
 800402e:	f000 fa97 	bl	8004560 <FreqPresetMenuInputHandler>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	4b54      	ldr	r3, [pc, #336]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004038:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800403a:	4b52      	ldr	r3, [pc, #328]	; (8004184 <EM_ProcessEvent+0x488>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b06      	cmp	r3, #6
 8004040:	f040 8095 	bne.w	800416e <EM_ProcessEvent+0x472>
			{
				eNextState = FreqPresetMenuExitHandler();
 8004044:	f000 faa2 	bl	800458c <FreqPresetMenuExitHandler>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <EM_ProcessEvent+0x48c>)
 800404e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004050:	e08d      	b.n	800416e <EM_ProcessEvent+0x472>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8004052:	484e      	ldr	r0, [pc, #312]	; (800418c <EM_ProcessEvent+0x490>)
 8004054:	f00b fe50 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004058:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <EM_ProcessEvent+0x488>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b05      	cmp	r3, #5
 800405e:	d105      	bne.n	800406c <EM_ProcessEvent+0x370>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8004060:	f000 facc 	bl	80045fc <FreqAdjustMenuInputHandler>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <EM_ProcessEvent+0x48c>)
 800406a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800406c:	4b45      	ldr	r3, [pc, #276]	; (8004184 <EM_ProcessEvent+0x488>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b06      	cmp	r3, #6
 8004072:	d17e      	bne.n	8004172 <EM_ProcessEvent+0x476>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8004074:	f000 fad4 	bl	8004620 <FreqAdjustMenuExitHandler>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b42      	ldr	r3, [pc, #264]	; (8004188 <EM_ProcessEvent+0x48c>)
 800407e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004080:	e077      	b.n	8004172 <EM_ProcessEvent+0x476>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8004082:	4843      	ldr	r0, [pc, #268]	; (8004190 <EM_ProcessEvent+0x494>)
 8004084:	f00b fe38 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8004088:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <EM_ProcessEvent+0x488>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <EM_ProcessEvent+0x3a2>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004090:	2007      	movs	r0, #7
 8004092:	f000 f8ed 	bl	8004270 <FreqSweepMenuInputHandler>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <EM_ProcessEvent+0x48c>)
 800409c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <EM_ProcessEvent+0x488>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d106      	bne.n	80040b4 <EM_ProcessEvent+0x3b8>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80040a6:	2008      	movs	r0, #8
 80040a8:	f000 f8e2 	bl	8004270 <FreqSweepMenuInputHandler>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040b2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80040b4:	4b33      	ldr	r3, [pc, #204]	; (8004184 <EM_ProcessEvent+0x488>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d106      	bne.n	80040ca <EM_ProcessEvent+0x3ce>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80040bc:	2009      	movs	r0, #9
 80040be:	f000 f8d7 	bl	8004270 <FreqSweepMenuInputHandler>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b30      	ldr	r3, [pc, #192]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040c8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <EM_ProcessEvent+0x488>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d106      	bne.n	80040e0 <EM_ProcessEvent+0x3e4>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80040d2:	200a      	movs	r0, #10
 80040d4:	f000 f8cc 	bl	8004270 <FreqSweepMenuInputHandler>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040de:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <EM_ProcessEvent+0x488>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d106      	bne.n	80040f6 <EM_ProcessEvent+0x3fa>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80040e8:	200b      	movs	r0, #11
 80040ea:	f000 f8c1 	bl	8004270 <FreqSweepMenuInputHandler>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b25      	ldr	r3, [pc, #148]	; (8004188 <EM_ProcessEvent+0x48c>)
 80040f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040f6:	4b23      	ldr	r3, [pc, #140]	; (8004184 <EM_ProcessEvent+0x488>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d13b      	bne.n	8004176 <EM_ProcessEvent+0x47a>
			{
				eNextState = FreqSweepMenuExitHandler();
 80040fe:	f000 f99f 	bl	8004440 <FreqSweepMenuExitHandler>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004108:	701a      	strb	r2, [r3, #0]
			}

			break;
 800410a:	e034      	b.n	8004176 <EM_ProcessEvent+0x47a>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 800410c:	4821      	ldr	r0, [pc, #132]	; (8004194 <EM_ProcessEvent+0x498>)
 800410e:	f00b fdf3 	bl	800fcf8 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <EM_ProcessEvent+0x488>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b05      	cmp	r3, #5
 8004118:	d105      	bne.n	8004126 <EM_ProcessEvent+0x42a>
			{
				eNextState = BiasMenuInputHandler();
 800411a:	f7ff fdbd 	bl	8003c98 <BiasMenuInputHandler>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004124:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <EM_ProcessEvent+0x488>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d125      	bne.n	800417a <EM_ProcessEvent+0x47e>
			{
				eNextState = BiasMenuExitHandler();
 800412e:	f7ff fdc9 	bl	8003cc4 <BiasMenuExitHandler>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <EM_ProcessEvent+0x48c>)
 8004138:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800413a:	2002      	movs	r0, #2
 800413c:	f000 fe2a 	bl	8004d94 <ToplevelMenu_setStatus>
			}

			break;
 8004140:	e01b      	b.n	800417a <EM_ProcessEvent+0x47e>

		default:
			break;
 8004142:	bf00      	nop
 8004144:	e01a      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004146:	bf00      	nop
 8004148:	e018      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800414a:	bf00      	nop
 800414c:	e016      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800414e:	bf00      	nop
 8004150:	e014      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004152:	bf00      	nop
 8004154:	e012      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004156:	bf00      	nop
 8004158:	e010      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800415a:	bf00      	nop
 800415c:	e00e      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800415e:	bf00      	nop
 8004160:	e00c      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004162:	bf00      	nop
 8004164:	e00a      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004166:	bf00      	nop
 8004168:	e008      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800416a:	bf00      	nop
 800416c:	e006      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <EM_ProcessEvent+0x480>
			break;
 800417a:	bf00      	nop
	}

}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	08013860 	.word	0x08013860
 8004184:	20001ecb 	.word	0x20001ecb
 8004188:	20001eca 	.word	0x20001eca
 800418c:	08013878 	.word	0x08013878
 8004190:	08013890 	.word	0x08013890
 8004194:	080138a8 	.word	0x080138a8

08004198 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <EM_SetNewEvent+0x1c>)
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	7013      	strb	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20001ecb 	.word	0x20001ecb

080041b8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 80041bc:	4825      	ldr	r0, [pc, #148]	; (8004254 <FreqSweepMenuEntryHandler+0x9c>)
 80041be:	f00b fd9b 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 80041c2:	f7fd f997 	bl	80014f4 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <FreqSweepMenuEntryHandler+0xa0>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041d4:	edd3 7a00 	vldr	s15, [r3]
 80041d8:	eeb4 7a67 	vcmp.f32	s14, s15
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	d008      	beq.n	80041f4 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <FreqSweepMenuEntryHandler+0xa0>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041f0:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <FreqSweepMenuEntryHandler+0xa4>)
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80041fe:	eef4 7a47 	vcmp.f32	s15, s14
 8004202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004206:	d101      	bne.n	800420c <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8004208:	f000 fa20 	bl	800464c <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 800420c:	2000      	movs	r0, #0
 800420e:	f000 fa77 	bl	8004700 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004212:	2000      	movs	r0, #0
 8004214:	f000 fad4 	bl	80047c0 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8004218:	f000 fb0e 	bl	8004838 <_getCalculatedSweepFrequencyInHertz>
 800421c:	eef0 7a40 	vmov.f32	s15, s0
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <FreqSweepMenuEntryHandler+0xa8>)
 8004222:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 8004228:	2200      	movs	r2, #0
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800422c:	2009      	movs	r0, #9
 800422e:	f000 f81f 	bl	8004270 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 8004234:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <FreqSweepMenuEntryHandler+0xac>)
 800423c:	2200      	movs	r2, #0
 800423e:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <FreqSweepMenuEntryHandler+0xb0>)
 8004242:	2204      	movs	r2, #4
 8004244:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <FreqSweepMenuEntryHandler+0xb4>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800424c:	230d      	movs	r3, #13
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	080138b8 	.word	0x080138b8
 8004258:	40013400 	.word	0x40013400
 800425c:	20000004 	.word	0x20000004
 8004260:	20001f20 	.word	0x20001f20
 8004264:	40000c00 	.word	0x40000c00
 8004268:	20001ece 	.word	0x20001ece
 800426c:	20001ecb 	.word	0x20001ecb

08004270 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 800427a:	4865      	ldr	r0, [pc, #404]	; (8004410 <FreqSweepMenuInputHandler+0x1a0>)
 800427c:	f00b fd3c 	bl	800fcf8 <puts>
	#endif



	switch(pEvent)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	3b07      	subs	r3, #7
 8004284:	2b04      	cmp	r3, #4
 8004286:	f200 80ba 	bhi.w	80043fe <FreqSweepMenuInputHandler+0x18e>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <FreqSweepMenuInputHandler+0x20>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a5 	.word	0x080042a5
 8004294:	080042c5 	.word	0x080042c5
 8004298:	080043ef 	.word	0x080043ef
 800429c:	080043f7 	.word	0x080043f7
 80042a0:	08004305 	.word	0x08004305
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 80042a4:	485b      	ldr	r0, [pc, #364]	; (8004414 <FreqSweepMenuInputHandler+0x1a4>)
 80042a6:	f00b fd27 	bl	800fcf8 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 80042aa:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4a5a      	ldr	r2, [pc, #360]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042b0:	f083 0301 	eor.w	r3, r3, #1
 80042b4:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 80042b6:	4b58      	ldr	r3, [pc, #352]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a57      	ldr	r2, [pc, #348]	; (8004418 <FreqSweepMenuInputHandler+0x1a8>)
 80042bc:	f083 0301 	eor.w	r3, r3, #1
 80042c0:	6013      	str	r3, [r2, #0]
			break;
 80042c2:	e09d      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 80042c4:	4855      	ldr	r0, [pc, #340]	; (800441c <FreqSweepMenuInputHandler+0x1ac>)
 80042c6:	f00b fd17 	bl	800fcf8 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80042ca:	4b55      	ldr	r3, [pc, #340]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f083 0301 	eor.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b52      	ldr	r3, [pc, #328]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042d6:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d004      	beq.n	80042ea <FreqSweepMenuInputHandler+0x7a>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d008      	beq.n	80042f6 <FreqSweepMenuInputHandler+0x86>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <FreqSweepMenuInputHandler+0x80>
 80042e8:	e006      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 80042ea:	f000 f9af 	bl	800464c <_setSweepModeDown>
					break;
 80042ee:	e003      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 80042f0:	f000 f9dc 	bl	80046ac <_setSweepModeUp>
					break;
 80042f4:	e000      	b.n	80042f8 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80042f6:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 80042f8:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <FreqSweepMenuInputHandler+0x1b4>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f9ff 	bl	8004700 <_setEncoderControlMode>

			break;
 8004302:	e07d      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8004304:	4848      	ldr	r0, [pc, #288]	; (8004428 <FreqSweepMenuInputHandler+0x1b8>)
 8004306:	f00b fcf7 	bl	800fcf8 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <FreqSweepMenuInputHandler+0x1b4>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <FreqSweepMenuInputHandler+0xa8>
 8004312:	2b01      	cmp	r3, #1
 8004314:	d00b      	beq.n	800432e <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004316:	e073      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004318:	2000      	movs	r0, #0
 800431a:	f000 fa51 	bl	80047c0 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 800431e:	f000 fa8b 	bl	8004838 <_getCalculatedSweepFrequencyInHertz>
 8004322:	eef0 7a40 	vmov.f32	s15, s0
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <FreqSweepMenuInputHandler+0x1bc>)
 8004328:	edc3 7a00 	vstr	s15, [r3]
					break;
 800432c:	e05e      	b.n	80043ec <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 800432e:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <FreqSweepMenuInputHandler+0x1b0>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <FreqSweepMenuInputHandler+0xcc>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d02a      	beq.n	8004390 <FreqSweepMenuInputHandler+0x120>
							break;
 800433a:	e056      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 800433c:	4b3c      	ldr	r3, [pc, #240]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d803      	bhi.n	800434c <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004346:	220d      	movs	r2, #13
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800434a:	e04e      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800434c:	4b38      	ldr	r3, [pc, #224]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004358:	4b36      	ldr	r3, [pc, #216]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	dd09      	ble.n	800437c <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004374:	ee17 2a90 	vmov	r2, s15
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800437a:	e036      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 800437c:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004388:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 800438a:	edc3 7a00 	vstr	s15, [r3]
							break;
 800438e:	e02c      	b.n	80043ea <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004398:	4293      	cmp	r3, r2
 800439a:	d904      	bls.n	80043a6 <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 800439e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80043a4:	e020      	b.n	80043e8 <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d509      	bpl.n	80043d6 <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <FreqSweepMenuInputHandler+0x1c8>)
 80043c4:	edd3 7a00 	vldr	s15, [r3]
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ce:	ee17 2a90 	vmov	r2, s15
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80043d4:	e008      	b.n	80043e8 <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80043d6:	4b16      	ldr	r3, [pc, #88]	; (8004430 <FreqSweepMenuInputHandler+0x1c0>)
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <FreqSweepMenuInputHandler+0x1c4>)
 80043e4:	edc3 7a00 	vstr	s15, [r3]
							break;
 80043e8:	bf00      	nop
					break;
 80043ea:	bf00      	nop
			break;
 80043ec:	e008      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f000 f986 	bl	8004700 <_setEncoderControlMode>

			break;
 80043f4:	e004      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f000 f982 	bl	8004700 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80043fc:	e000      	b.n	8004400 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 80043fe:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <FreqSweepMenuInputHandler+0x1cc>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004406:	230d      	movs	r3, #13
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	080138dc 	.word	0x080138dc
 8004414:	08013908 	.word	0x08013908
 8004418:	40000c00 	.word	0x40000c00
 800441c:	08013920 	.word	0x08013920
 8004420:	20001ecc 	.word	0x20001ecc
 8004424:	20001ecd 	.word	0x20001ecd
 8004428:	08013938 	.word	0x08013938
 800442c:	20001f20 	.word	0x20001f20
 8004430:	40012c00 	.word	0x40012c00
 8004434:	20000004 	.word	0x20000004
 8004438:	20000000 	.word	0x20000000
 800443c:	20001ecb 	.word	0x20001ecb

08004440 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <FreqSweepMenuExitHandler+0x38>)
 8004446:	f00b fc57 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 800444a:	f7fd f853 	bl	80014f4 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a07      	ldr	r2, [pc, #28]	; (800447c <FreqSweepMenuExitHandler+0x3c>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <FreqSweepMenuExitHandler+0x40>)
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <FreqSweepMenuExitHandler+0x44>)
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004472:	230a      	movs	r3, #10
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08013950 	.word	0x08013950
 800447c:	40000c00 	.word	0x40000c00
 8004480:	20001ece 	.word	0x20001ece
 8004484:	20001ecb 	.word	0x20001ecb

08004488 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 800448c:	4806      	ldr	r0, [pc, #24]	; (80044a8 <FreqMainMenuEntryHandler+0x20>)
 800448e:	f00b fc33 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004492:	f7fd f82f 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <FreqMainMenuEntryHandler+0x24>)
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <FreqMainMenuEntryHandler+0x28>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80044a2:	230a      	movs	r3, #10
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08013978 	.word	0x08013978
 80044ac:	20001ece 	.word	0x20001ece
 80044b0:	20001ecb 	.word	0x20001ecb

080044b4 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <FreqMainMenuExitHandler+0x30>)
 80044ba:	f00b fc1d 	bl	800fcf8 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <FreqMainMenuExitHandler+0x34>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <FreqMainMenuExitHandler+0x38>)
 80044c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80044cc:	f7fd f812 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 80044d0:	4807      	ldr	r0, [pc, #28]	; (80044f0 <FreqMainMenuExitHandler+0x3c>)
 80044d2:	f00b fc11 	bl	800fcf8 <puts>
	#endif

	eNewEvent = evIdle;
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <FreqMainMenuExitHandler+0x40>)
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80044dc:	2301      	movs	r3, #1
}
 80044de:	4618      	mov	r0, r3
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	080139c8 	.word	0x080139c8
 80044e8:	20001ece 	.word	0x20001ece
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	080139f0 	.word	0x080139f0
 80044f4:	20001ecb 	.word	0x20001ecb

080044f8 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 80044fe:	4813      	ldr	r0, [pc, #76]	; (800454c <FreqPresetMenuEntryHandler+0x54>)
 8004500:	f00b fbfa 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004504:	f7fc fff6 	bl	80014f4 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004508:	f000 ff58 	bl	80053bc <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <FreqPresetMenuEntryHandler+0x58>)
 800450e:	2202      	movs	r2, #2
 8004510:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004512:	f001 f899 	bl	8005648 <FreqO_GetFPresetObject>
 8004516:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <FreqPresetMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	791a      	ldrb	r2, [r3, #4]
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <FreqPresetMenuEntryHandler+0x5c>)
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8004526:	f001 f8c1 	bl	80056ac <FreqO_GetFreqPresetEncoderRange>
 800452a:	4603      	mov	r3, r0
 800452c:	461a      	mov	r2, r3
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <FreqPresetMenuEntryHandler+0x5c>)
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
 8004532:	e002      	b.n	800453a <FreqPresetMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004534:	4808      	ldr	r0, [pc, #32]	; (8004558 <FreqPresetMenuEntryHandler+0x60>)
 8004536:	f7fd f823 	bl	8001580 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <FreqPresetMenuEntryHandler+0x64>)
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004540:	230b      	movs	r3, #11
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	08013a08 	.word	0x08013a08
 8004550:	20001ece 	.word	0x20001ece
 8004554:	40012c00 	.word	0x40012c00
 8004558:	08013a34 	.word	0x08013a34
 800455c:	20001ecb 	.word	0x20001ecb

08004560 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8004564:	4807      	ldr	r0, [pc, #28]	; (8004584 <FreqPresetMenuInputHandler+0x24>)
 8004566:	f00b fbc7 	bl	800fcf8 <puts>
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800456a:	2001      	movs	r0, #1
 800456c:	f002 f82c 	bl	80065c8 <SM_GetEncoderValue>
 8004570:	4603      	mov	r3, r0
 8004572:	4618      	mov	r0, r3
 8004574:	f000 ff5c 	bl	8005430 <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <FreqPresetMenuInputHandler+0x28>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800457e:	230b      	movs	r3, #11
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	08013a70 	.word	0x08013a70
 8004588:	20001ecb 	.word	0x20001ecb

0800458c <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8004590:	4806      	ldr	r0, [pc, #24]	; (80045ac <FreqPresetMenuExitHandler+0x20>)
 8004592:	f00b fbb1 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004596:	f7fc ffad 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <FreqPresetMenuExitHandler+0x24>)
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <FreqPresetMenuExitHandler+0x28>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80045a6:	230a      	movs	r3, #10
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	08013a9c 	.word	0x08013a9c
 80045b0:	20001ece 	.word	0x20001ece
 80045b4:	20001ecb 	.word	0x20001ecb

080045b8 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 80045bc:	480a      	ldr	r0, [pc, #40]	; (80045e8 <FreqAdjustMenuEntryHandler+0x30>)
 80045be:	f00b fb9b 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 80045c2:	f7fc ff97 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <FreqAdjustMenuEntryHandler+0x34>)
 80045c8:	2203      	movs	r2, #3
 80045ca:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80045cc:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <FreqAdjustMenuEntryHandler+0x38>)
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <FreqAdjustMenuEntryHandler+0x3c>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <FreqAdjustMenuEntryHandler+0x3c>)
 80045d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <FreqAdjustMenuEntryHandler+0x40>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80045e2:	230c      	movs	r3, #12
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	08013ac8 	.word	0x08013ac8
 80045ec:	20001ece 	.word	0x20001ece
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	20001ecb 	.word	0x20001ecb

080045fc <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8004600:	4805      	ldr	r0, [pc, #20]	; (8004618 <FreqAdjustMenuInputHandler+0x1c>)
 8004602:	f00b fb79 	bl	800fcf8 <puts>
	#endif

	FreqO_AdjustFreq();
 8004606:	f000 fee5 	bl	80053d4 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <FreqAdjustMenuInputHandler+0x20>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004610:	230c      	movs	r3, #12
}
 8004612:	4618      	mov	r0, r3
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	080138dc 	.word	0x080138dc
 800461c:	20001ecb 	.word	0x20001ecb

08004620 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004624:	4806      	ldr	r0, [pc, #24]	; (8004640 <FreqAdjustMenuExitHandler+0x20>)
 8004626:	f00b fb67 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 800462a:	f7fc ff63 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <FreqAdjustMenuExitHandler+0x24>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <FreqAdjustMenuExitHandler+0x28>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800463a:	230a      	movs	r3, #10
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	08013af4 	.word	0x08013af4
 8004644:	20001ece 	.word	0x20001ece
 8004648:	20001ecb 	.word	0x20001ecb

0800464c <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004650:	4b10      	ldr	r3, [pc, #64]	; (8004694 <_setSweepModeDown+0x48>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0f      	ldr	r2, [pc, #60]	; (8004694 <_setSweepModeDown+0x48>)
 8004656:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800465a:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <_setSweepModeDown+0x48>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <_setSweepModeDown+0x48>)
 8004662:	f043 0310 	orr.w	r3, r3, #16
 8004666:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <_setSweepModeDown+0x4c>)
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <_setSweepModeDown+0x50>)
 8004676:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <_setSweepModeDown+0x54>)
 800467c:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <_setSweepModeDown+0x58>)
 800467e:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004680:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <_setSweepModeDown+0x5c>)
 8004682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40000c00 	.word	0x40000c00
 8004698:	40013400 	.word	0x40013400
 800469c:	20000000 	.word	0x20000000
 80046a0:	20000004 	.word	0x20000004
 80046a4:	477fff00 	.word	0x477fff00
 80046a8:	40012c00 	.word	0x40012c00

080046ac <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <_setSweepModeUp+0x40>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <_setSweepModeUp+0x40>)
 80046b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80046ba:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <_setSweepModeUp+0x40>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <_setSweepModeUp+0x40>)
 80046c2:	f023 0310 	bic.w	r3, r3, #16
 80046c6:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <_setSweepModeUp+0x44>)
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <_setSweepModeUp+0x48>)
 80046d6:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <_setSweepModeUp+0x4c>)
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <_setSweepModeUp+0x50>)
 80046de:	601a      	str	r2, [r3, #0]


}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	20000004 	.word	0x20000004
 80046f8:	20000000 	.word	0x20000000
 80046fc:	41500000 	.word	0x41500000

08004700 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d038      	beq.n	8004782 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004710:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <_setEncoderControlMode+0xa4>)
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <_setEncoderControlMode+0xa8>)
 8004718:	220d      	movs	r2, #13
 800471a:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 800471c:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <_setEncoderControlMode+0xa8>)
 800471e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <_setEncoderControlMode+0xac>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <_setEncoderControlMode+0x32>
 800472c:	2b01      	cmp	r3, #1
 800472e:	d014      	beq.n	800475a <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8004730:	e031      	b.n	8004796 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004732:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <_setEncoderControlMode+0xa8>)
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <_setEncoderControlMode+0xb0>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	dc00      	bgt.n	8004750 <_setEncoderControlMode+0x50>
				break;
 800474e:	e022      	b.n	8004796 <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <_setEncoderControlMode+0xb4>)
 8004752:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <_setEncoderControlMode+0xa8>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8004758:	e01d      	b.n	8004796 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <_setEncoderControlMode+0xa8>)
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <_setEncoderControlMode+0xb8>)
 8004768:	edd3 7a00 	vldr	s15, [r3]
 800476c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	d400      	bmi.n	8004778 <_setEncoderControlMode+0x78>
				break;
 8004776:	e00e      	b.n	8004796 <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <_setEncoderControlMode+0xb4>)
 800477a:	4a0b      	ldr	r2, [pc, #44]	; (80047a8 <_setEncoderControlMode+0xa8>)
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8004780:	e009      	b.n	8004796 <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <_setEncoderControlMode+0xa4>)
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8004788:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <_setEncoderControlMode+0xa8>)
 800478a:	2201      	movs	r2, #1
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <_setEncoderControlMode+0xa8>)
 8004790:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004794:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20001ecd 	.word	0x20001ecd
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	20001ecc 	.word	0x20001ecc
 80047b0:	20000004 	.word	0x20000004
 80047b4:	40013400 	.word	0x40013400
 80047b8:	20000000 	.word	0x20000000
 80047bc:	00000000 	.word	0x00000000

080047c0 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	4603      	mov	r3, r0
 80047c8:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d122      	bne.n	8004816 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fb febd 	bl	8000554 <__aeabi_ui2d>
 80047da:	4603      	mov	r3, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004820 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 80047e2:	ec44 3b10 	vmov	d0, r3, r4
 80047e6:	f00d fa5f 	bl	8011ca8 <pow>
 80047ea:	ec51 0b10 	vmov	r0, r1, d0
 80047ee:	a30e      	add	r3, pc, #56	; (adr r3, 8004828 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f7fb fd72 	bl	80002dc <__adddf3>
 80047f8:	4603      	mov	r3, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	4618      	mov	r0, r3
 80047fe:	4621      	mov	r1, r4
 8004800:	f7fc f9fa 	bl	8000bf8 <__aeabi_d2uiz>
 8004804:	4603      	mov	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480e:	d002      	beq.n	8004816 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004810:	4a08      	ldr	r2, [pc, #32]	; (8004834 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	00000000 	.word	0x00000000
 8004824:	40080000 	.word	0x40080000
 8004828:	00000000 	.word	0x00000000
 800482c:	40d06800 	.word	0x40d06800
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40000c00 	.word	0x40000c00

08004838 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <_getCalculatedSweepFrequencyInHertz+0x54>)
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004850:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004890 <_getCalculatedSweepFrequencyInHertz+0x58>
 8004854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004858:	e011      	b.n	800487e <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <_getCalculatedSweepFrequencyInHertz+0x54>)
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004866:	4b09      	ldr	r3, [pc, #36]	; (800488c <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004876:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004890 <_getCalculatedSweepFrequencyInHertz+0x58>
 800487a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 800487e:	eeb0 0a67 	vmov.f32	s0, s15
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40000c00 	.word	0x40000c00
 8004890:	4d2037a0 	.word	0x4d2037a0

08004894 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <FreqMenu_getStatus+0x14>)
 800489a:	781b      	ldrb	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20001ece 	.word	0x20001ece

080048ac <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <FuncMenu_getStatus+0x14>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20001ecf 	.word	0x20001ecf

080048c4 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuEntryHandler Event captured\n");
 80048c8:	4806      	ldr	r0, [pc, #24]	; (80048e4 <FuncMainMenuEntryHandler+0x20>)
 80048ca:	f00b fa15 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 80048ce:	f7fc fe11 	bl	80014f4 <DM_RefreshScreen>



	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <FuncMainMenuEntryHandler+0x24>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <FuncMainMenuEntryHandler+0x28>)
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80048de:	2303      	movs	r3, #3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	08013b20 	.word	0x08013b20
 80048e8:	20001ecf 	.word	0x20001ecf
 80048ec:	20001ecb 	.word	0x20001ecb

080048f0 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuExitHandler Event captured\n");
 80048f4:	4809      	ldr	r0, [pc, #36]	; (800491c <FuncMainMenuExitHandler+0x2c>)
 80048f6:	f00b f9ff 	bl	800fcf8 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <FuncMainMenuExitHandler+0x30>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004900:	2002      	movs	r0, #2
 8004902:	f000 fa47 	bl	8004d94 <ToplevelMenu_setStatus>
//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004906:	f7fc fdf5 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 800490a:	4806      	ldr	r0, [pc, #24]	; (8004924 <FuncMainMenuExitHandler+0x34>)
 800490c:	f00b f9f4 	bl	800fcf8 <puts>
	#endif

	eNewEvent = evIdle;
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <FuncMainMenuExitHandler+0x38>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004916:	2301      	movs	r3, #1
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	08013b70 	.word	0x08013b70
 8004920:	20001ecf 	.word	0x20001ecf
 8004924:	08013b98 	.word	0x08013b98
 8004928:	20001ecb 	.word	0x20001ecb

0800492c <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuEntryHandler Event captured\n");
 8004932:	4815      	ldr	r0, [pc, #84]	; (8004988 <FuncSignalMenuEntryHandler+0x5c>)
 8004934:	f00b f9e0 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004938:	f7fc fddc 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 800493c:	f000 fec2 	bl	80056c4 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004940:	4b12      	ldr	r3, [pc, #72]	; (800498c <FuncSignalMenuEntryHandler+0x60>)
 8004942:	2202      	movs	r2, #2
 8004944:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004946:	2000      	movs	r0, #0
 8004948:	f001 fb2c 	bl	8005fa4 <SM_GetOutputChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004952:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <FuncSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	785a      	ldrb	r2, [r3, #1]
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <FuncSignalMenuEntryHandler+0x64>)
 8004960:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004962:	f001 f867 	bl	8005a34 <FuncO_GetFuncPresetEncoderRange>
 8004966:	4603      	mov	r3, r0
 8004968:	461a      	mov	r2, r3
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <FuncSignalMenuEntryHandler+0x64>)
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c
 800496e:	e002      	b.n	8004976 <FuncSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004970:	4808      	ldr	r0, [pc, #32]	; (8004994 <FuncSignalMenuEntryHandler+0x68>)
 8004972:	f7fc fe05 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <FuncSignalMenuEntryHandler+0x6c>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800497c:	2304      	movs	r3, #4
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	08013bb0 	.word	0x08013bb0
 800498c:	20001ecf 	.word	0x20001ecf
 8004990:	40012c00 	.word	0x40012c00
 8004994:	08013bdc 	.word	0x08013bdc
 8004998:	20001ecb 	.word	0x20001ecb
 800499c:	00000000 	.word	0x00000000

080049a0 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuInputHandler Event captured\n");
 80049a6:	481c      	ldr	r0, [pc, #112]	; (8004a18 <FuncSignalMenuInputHandler+0x78>)
 80049a8:	f00b f9a6 	bl	800fcf8 <puts>
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 80049ac:	f001 fe92 	bl	80066d4 <SM_IsFuncPwmDutyMode>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01a      	beq.n	80049ec <FuncSignalMenuInputHandler+0x4c>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80049b6:	2000      	movs	r0, #0
 80049b8:	f001 fe06 	bl	80065c8 <SM_GetEncoderValue>
 80049bc:	4603      	mov	r3, r0
 80049be:	80fb      	strh	r3, [r7, #6]
		TIM3->CCR2 = (pow(enc_value, 2));
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fb fdc6 	bl	8000554 <__aeabi_ui2d>
 80049c8:	4603      	mov	r3, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004a10 <FuncSignalMenuInputHandler+0x70>
 80049d0:	ec44 3b10 	vmov	d0, r3, r4
 80049d4:	f00d f968 	bl	8011ca8 <pow>
 80049d8:	ec53 2b10 	vmov	r2, r3, d0
 80049dc:	4c0f      	ldr	r4, [pc, #60]	; (8004a1c <FuncSignalMenuInputHandler+0x7c>)
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	f7fc f909 	bl	8000bf8 <__aeabi_d2uiz>
 80049e6:	4603      	mov	r3, r0
 80049e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80049ea:	e006      	b.n	80049fa <FuncSignalMenuInputHandler+0x5a>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_FORWARD));

	}
	else
	{
		FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80049ec:	2001      	movs	r0, #1
 80049ee:	f001 fdeb 	bl	80065c8 <SM_GetEncoderValue>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fe71 	bl	80056dc <FuncO_MapEncoderPositionToSignalOutput>
	}

	eNewEvent = evIdle;
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <FuncSignalMenuInputHandler+0x80>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004a00:	2304      	movs	r3, #4
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd90      	pop	{r4, r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	f3af 8000 	nop.w
 8004a10:	00000000 	.word	0x00000000
 8004a14:	40000000 	.word	0x40000000
 8004a18:	08013c10 	.word	0x08013c10
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	20001ecb 	.word	0x20001ecb

08004a24 <FuncSignalToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncSignalToggleDutyMode()
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004a28:	f001 fe60 	bl	80066ec <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <FuncSignalToggleDutyMode+0x1c>)
 8004a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <FuncSignalToggleDutyMode+0x20>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004a3a:	2304      	movs	r3, #4
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	20001ecb 	.word	0x20001ecb

08004a48 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuExitHandler Event captured\n");
 8004a4c:	4807      	ldr	r0, [pc, #28]	; (8004a6c <FuncSignalMenuExitHandler+0x24>)
 8004a4e:	f00b f953 	bl	800fcf8 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <FuncSignalMenuExitHandler+0x28>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004a58:	f7fc fd4c 	bl	80014f4 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004a5c:	f001 fe56 	bl	800670c <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <FuncSignalMenuExitHandler+0x2c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004a66:	2303      	movs	r3, #3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	08013c3c 	.word	0x08013c3c
 8004a70:	20001ecf 	.word	0x20001ecf
 8004a74:	20001ecb 	.word	0x20001ecb

08004a78 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuEntryHandler Event captured\n");
 8004a7e:	4815      	ldr	r0, [pc, #84]	; (8004ad4 <FuncSyncMenuEntryHandler+0x5c>)
 8004a80:	f00b f93a 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004a84:	f7fc fd36 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004a88:	f000 fe1c 	bl	80056c4 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8004a8c:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <FuncSyncMenuEntryHandler+0x60>)
 8004a8e:	2203      	movs	r2, #3
 8004a90:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8004a92:	2001      	movs	r0, #1
 8004a94:	f001 fa86 	bl	8005fa4 <SM_GetOutputChannel>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004a9e:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <FuncSyncMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	785a      	ldrb	r2, [r3, #1]
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <FuncSyncMenuEntryHandler+0x64>)
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004aae:	f000 ffc1 	bl	8005a34 <FuncO_GetFuncPresetEncoderRange>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <FuncSyncMenuEntryHandler+0x64>)
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aba:	e002      	b.n	8004ac2 <FuncSyncMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004abc:	4808      	ldr	r0, [pc, #32]	; (8004ae0 <FuncSyncMenuEntryHandler+0x68>)
 8004abe:	f7fc fd5f 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <FuncSyncMenuEntryHandler+0x6c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004ac8:	2305      	movs	r3, #5
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08013c68 	.word	0x08013c68
 8004ad8:	20001ecf 	.word	0x20001ecf
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	08013bdc 	.word	0x08013bdc
 8004ae4:	20001ecb 	.word	0x20001ecb

08004ae8 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuInputHandler Event captured\n");
 8004aec:	4807      	ldr	r0, [pc, #28]	; (8004b0c <FuncSyncMenuInputHandler+0x24>)
 8004aee:	f00b f903 	bl	800fcf8 <puts>
	#endif


	FuncO_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004af2:	2001      	movs	r0, #1
 8004af4:	f001 fd68 	bl	80065c8 <SM_GetEncoderValue>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fe28 	bl	8005750 <FuncO_MapEncoderPositionToSyncOutput>
	eNewEvent = evBlueBtn;
 8004b00:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <FuncSyncMenuInputHandler+0x28>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004b06:	2305      	movs	r3, #5
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	08013c90 	.word	0x08013c90
 8004b10:	20001ecb 	.word	0x20001ecb

08004b14 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuExitHandler Event captured\n");
 8004b18:	4806      	ldr	r0, [pc, #24]	; (8004b34 <FuncSyncMenuExitHandler+0x20>)
 8004b1a:	f00b f8ed 	bl	800fcf8 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <FuncSyncMenuExitHandler+0x24>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004b24:	f7fc fce6 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <FuncSyncMenuExitHandler+0x28>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004b2e:	2303      	movs	r3, #3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08013cb8 	.word	0x08013cb8
 8004b38:	20001ecf 	.word	0x20001ecf
 8004b3c:	20001ecb 	.word	0x20001ecb

08004b40 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <GainMenu_getStatus+0x14>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20001ed0 	.word	0x20001ed0

08004b58 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuEntryHandler Event captured\n");
 8004b5c:	4806      	ldr	r0, [pc, #24]	; (8004b78 <GainMainMenuEntryHandler+0x20>)
 8004b5e:	f00b f8cb 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004b62:	f7fc fcc7 	bl	80014f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <GainMainMenuEntryHandler+0x24>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <GainMainMenuEntryHandler+0x28>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b72:	2306      	movs	r3, #6
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	08013ce0 	.word	0x08013ce0
 8004b7c:	20001ed0 	.word	0x20001ed0
 8004b80:	20001ecb 	.word	0x20001ecb

08004b84 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuExitHandler Event captured\n");
 8004b88:	4808      	ldr	r0, [pc, #32]	; (8004bac <GainMainMenuExitHandler+0x28>)
 8004b8a:	f00b f8b5 	bl	800fcf8 <puts>
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <GainMainMenuExitHandler+0x2c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b94:	f7fc fcae 	bl	80014f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004b98:	4806      	ldr	r0, [pc, #24]	; (8004bb4 <GainMainMenuExitHandler+0x30>)
 8004b9a:	f00b f8ad 	bl	800fcf8 <puts>
	#endif

	eNewEvent = evIdle;
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <GainMainMenuExitHandler+0x34>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004ba4:	2301      	movs	r3, #1
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	08013d30 	.word	0x08013d30
 8004bb0:	20001ed0 	.word	0x20001ed0
 8004bb4:	08013d58 	.word	0x08013d58
 8004bb8:	20001ecb 	.word	0x20001ecb

08004bbc <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuEntryHandler Event captured\n");
 8004bc2:	4815      	ldr	r0, [pc, #84]	; (8004c18 <GainSignalMenuEntryHandler+0x5c>)
 8004bc4:	f00b f898 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004bc8:	f7fc fc94 	bl	80014f4 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004bcc:	f000 ff3e 	bl	8005a4c <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004bd0:	f001 fda8 	bl	8006724 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <GainSignalMenuEntryHandler+0x60>)
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f001 f9e2 	bl	8005fa4 <SM_GetOutputChannel>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004be6:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <GainSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8b1a      	ldrh	r2, [r3, #24]
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <GainSignalMenuEntryHandler+0x64>)
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <GainSignalMenuEntryHandler+0x64>)
 8004bf8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bfe:	e002      	b.n	8004c06 <GainSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004c00:	4808      	ldr	r0, [pc, #32]	; (8004c24 <GainSignalMenuEntryHandler+0x68>)
 8004c02:	f7fc fcbd 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <GainSignalMenuEntryHandler+0x6c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004c0c:	2307      	movs	r3, #7
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	08013d70 	.word	0x08013d70
 8004c1c:	20001ed0 	.word	0x20001ed0
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	08013d9c 	.word	0x08013d9c
 8004c28:	20001ecb 	.word	0x20001ecb

08004c2c <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuInputHandler Event captured\n");
 8004c32:	4814      	ldr	r0, [pc, #80]	; (8004c84 <GainSignalMenuInputHandler+0x58>)
 8004c34:	f00b f860 	bl	800fcf8 <puts>
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f001 f9b3 	bl	8005fa4 <SM_GetOutputChannel>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004c44:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d012      	beq.n	8004c72 <GainSignalMenuInputHandler+0x46>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d107      	bne.n	8004c64 <GainSignalMenuInputHandler+0x38>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004c54:	2001      	movs	r0, #1
 8004c56:	f001 fcb7 	bl	80065c8 <SM_GetEncoderValue>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 ff01 	bl	8005a64 <GO_MapEncoderPositionToSignalOutput>
 8004c62:	e006      	b.n	8004c72 <GainSignalMenuInputHandler+0x46>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004c64:	2001      	movs	r0, #1
 8004c66:	f001 fcaf 	bl	80065c8 <SM_GetEncoderValue>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fecf 	bl	8006a10 <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	//

	eNewEvent = evYellowBtn;
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <GainSignalMenuInputHandler+0x5c>)
 8004c74:	2203      	movs	r2, #3
 8004c76:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004c78:	2307      	movs	r3, #7
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	08013dd4 	.word	0x08013dd4
 8004c88:	20001ecb 	.word	0x20001ecb

08004c8c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuExitHandler Event captured\n");
 8004c90:	4806      	ldr	r0, [pc, #24]	; (8004cac <GainSignalMenuExitHandler+0x20>)
 8004c92:	f00b f831 	bl	800fcf8 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <GainSignalMenuExitHandler+0x24>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004c9c:	f7fc fc2a 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <GainSignalMenuExitHandler+0x28>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004ca6:	2306      	movs	r3, #6
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	08013e00 	.word	0x08013e00
 8004cb0:	20001ed0 	.word	0x20001ed0
 8004cb4:	20001ecb 	.word	0x20001ecb

08004cb8 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuEntryHandler Event captured\n");
 8004cbe:	4814      	ldr	r0, [pc, #80]	; (8004d10 <GainSyncMenuEntryHandler+0x58>)
 8004cc0:	f00b f81a 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004cc4:	f7fc fc16 	bl	80014f4 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004cc8:	f001 fd2c 	bl	8006724 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <GainSyncMenuEntryHandler+0x5c>)
 8004cce:	2203      	movs	r2, #3
 8004cd0:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f001 f966 	bl	8005fa4 <SM_GetOutputChannel>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004cde:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <GainSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8b1a      	ldrh	r2, [r3, #24]
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <GainSyncMenuEntryHandler+0x60>)
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <GainSyncMenuEntryHandler+0x60>)
 8004cf0:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cf6:	e002      	b.n	8004cfe <GainSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004cf8:	4808      	ldr	r0, [pc, #32]	; (8004d1c <GainSyncMenuEntryHandler+0x64>)
 8004cfa:	f7fc fc41 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <GainSyncMenuEntryHandler+0x68>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004d04:	2308      	movs	r3, #8
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	08013e2c 	.word	0x08013e2c
 8004d14:	20001ed0 	.word	0x20001ed0
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	08013d9c 	.word	0x08013d9c
 8004d20:	20001ecb 	.word	0x20001ecb

08004d24 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuInputHandler Event captured\n");
 8004d28:	4807      	ldr	r0, [pc, #28]	; (8004d48 <GainSyncMenuInputHandler+0x24>)
 8004d2a:	f00a ffe5 	bl	800fcf8 <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f001 fc4a 	bl	80065c8 <SM_GetEncoderValue>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 fea4 	bl	8006a84 <VPP_MapEncoderPositionToSyncOutput>

	eNewEvent = evYellowBtn;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <GainSyncMenuInputHandler+0x28>)
 8004d3e:	2203      	movs	r2, #3
 8004d40:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004d42:	2308      	movs	r3, #8
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08013e54 	.word	0x08013e54
 8004d4c:	20001ecb 	.word	0x20001ecb

08004d50 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuExitHandler Event captured\n");
 8004d54:	4806      	ldr	r0, [pc, #24]	; (8004d70 <GainSyncMenuExitHandler+0x20>)
 8004d56:	f00a ffcf 	bl	800fcf8 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <GainSyncMenuExitHandler+0x24>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004d60:	f7fc fbc8 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <GainSyncMenuExitHandler+0x28>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004d6a:	2306      	movs	r3, #6
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	08013e7c 	.word	0x08013e7c
 8004d74:	20001ed0 	.word	0x20001ed0
 8004d78:	20001ecb 	.word	0x20001ecb

08004d7c <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <ToplevelMenu_getStatus+0x14>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000008 	.word	0x20000008

08004d94 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004d9e:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <ToplevelMenu_setStatus+0x1c>)
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	7013      	strb	r3, [r2, #0]
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	20000008 	.word	0x20000008

08004db4 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004db8:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <ToplevelOutputMenuEntryHandler+0x20>)
 8004dba:	f00a ff9d 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004dbe:	f7fc fb99 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <ToplevelOutputMenuEntryHandler+0x24>)
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <ToplevelOutputMenuEntryHandler+0x28>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004dce:	2301      	movs	r3, #1
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	08013f40 	.word	0x08013f40
 8004dd8:	20000008 	.word	0x20000008
 8004ddc:	20001ecb 	.word	0x20001ecb

08004de0 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004de4:	4806      	ldr	r0, [pc, #24]	; (8004e00 <ToplevelOutputMenuExitHandler+0x20>)
 8004de6:	f00a ff87 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004dea:	f7fc fb83 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <ToplevelOutputMenuExitHandler+0x24>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <ToplevelOutputMenuExitHandler+0x28>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	08013fa0 	.word	0x08013fa0
 8004e04:	20000008 	.word	0x20000008
 8004e08:	20001ecb 	.word	0x20001ecb

08004e0c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004e10:	4806      	ldr	r0, [pc, #24]	; (8004e2c <ToplevelInputMenuEntryHandler+0x20>)
 8004e12:	f00a ff71 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004e16:	f7fc fb6d 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004e1a:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <ToplevelInputMenuEntryHandler+0x24>)
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <ToplevelInputMenuEntryHandler+0x28>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004e26:	2302      	movs	r3, #2
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	08013fd0 	.word	0x08013fd0
 8004e30:	20000008 	.word	0x20000008
 8004e34:	20001ecb 	.word	0x20001ecb

08004e38 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004e3c:	4806      	ldr	r0, [pc, #24]	; (8004e58 <ToplevelInputMenuExitHandler+0x20>)
 8004e3e:	f00a ff5b 	bl	800fcf8 <puts>
	#endif

	DM_RefreshScreen();
 8004e42:	f7fc fb57 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <ToplevelInputMenuExitHandler+0x24>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <ToplevelInputMenuExitHandler+0x28>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	08014030 	.word	0x08014030
 8004e5c:	20000008 	.word	0x20000008
 8004e60:	20001ecb 	.word	0x20001ecb

08004e64 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4013      	ands	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d101      	bne.n	8004e7e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40010400 	.word	0x40010400

08004e90 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <IM_Init+0x1c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <IM_Init+0x1c>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40014400 	.word	0x40014400

08004eb0 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d11c      	bne.n	8004efa <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004ec0:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	db09      	blt.n	8004ef0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004edc:	4b1f      	ldr	r3, [pc, #124]	; (8004f5c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004ede:	edd3 7a00 	vldr	s15, [r3]
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee8:	ee17 2a90 	vmov	r2, s15
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004eee:	e029      	b.n	8004f44 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004ef0:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	3201      	adds	r2, #1
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ef8:	e024      	b.n	8004f44 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004efa:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d104      	bne.n	8004f0c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004f02:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f0a:	e01b      	b.n	8004f44 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004f1a:	edd3 7a00 	vldr	s15, [r3]
 8004f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f26:	d809      	bhi.n	8004f3c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f34:	ee17 2a90 	vmov	r2, s15
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f3a:	e003      	b.n	8004f44 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	3a01      	subs	r2, #1
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40013400 	.word	0x40013400
 8004f58:	20000004 	.word	0x20000004
 8004f5c:	20000000 	.word	0x20000000

08004f60 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <IM_BTN1_EXTI14_Handler+0x44>)
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f6c:	88fb      	ldrh	r3, [r7, #6]
 8004f6e:	4a0e      	ldr	r2, [pc, #56]	; (8004fa8 <IM_BTN1_EXTI14_Handler+0x48>)
 8004f70:	8812      	ldrh	r2, [r2, #0]
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f78:	dd0c      	ble.n	8004f94 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004f7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f7e:	f7ff ff71 	bl	8004e64 <LL_EXTI_IsActiveFlag_0_31>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004f88:	2001      	movs	r0, #1
 8004f8a:	f7ff f905 	bl	8004198 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004f8e:	4807      	ldr	r0, [pc, #28]	; (8004fac <IM_BTN1_EXTI14_Handler+0x4c>)
 8004f90:	f00a feb2 	bl	800fcf8 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004f94:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <IM_BTN1_EXTI14_Handler+0x48>)
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	8013      	strh	r3, [r2, #0]


}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	20001ed2 	.word	0x20001ed2
 8004fac:	0801405c 	.word	0x0801405c

08004fb0 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <IM_BTN2_EXTI15_Handler+0x44>)
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <IM_BTN2_EXTI15_Handler+0x48>)
 8004fc0:	8812      	ldrh	r2, [r2, #0]
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc8:	dd0c      	ble.n	8004fe4 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004fca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004fce:	f7ff ff49 	bl	8004e64 <LL_EXTI_IsActiveFlag_0_31>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004fd8:	2003      	movs	r0, #3
 8004fda:	f7ff f8dd 	bl	8004198 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004fde:	4807      	ldr	r0, [pc, #28]	; (8004ffc <IM_BTN2_EXTI15_Handler+0x4c>)
 8004fe0:	f00a fe8a 	bl	800fcf8 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <IM_BTN2_EXTI15_Handler+0x48>)
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	8013      	strh	r3, [r2, #0]


}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	20001ed4 	.word	0x20001ed4
 8004ffc:	08014074 	.word	0x08014074

08005000 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005006:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <IM_BTN3_EXTI0_Handler+0x40>)
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <IM_BTN3_EXTI0_Handler+0x44>)
 8005010:	8812      	ldrh	r2, [r2, #0]
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005018:	dd0b      	ble.n	8005032 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800501a:	2001      	movs	r0, #1
 800501c:	f7ff ff22 	bl	8004e64 <LL_EXTI_IsActiveFlag_0_31>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8005026:	2004      	movs	r0, #4
 8005028:	f7ff f8b6 	bl	8004198 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 800502c:	4806      	ldr	r0, [pc, #24]	; (8005048 <IM_BTN3_EXTI0_Handler+0x48>)
 800502e:	f00a fe63 	bl	800fcf8 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8005032:	4a04      	ldr	r2, [pc, #16]	; (8005044 <IM_BTN3_EXTI0_Handler+0x44>)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	8013      	strh	r3, [r2, #0]


}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40014400 	.word	0x40014400
 8005044:	20001ed6 	.word	0x20001ed6
 8005048:	08014090 	.word	0x08014090

0800504c <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <IM_BTN4_EXTI1_Handler+0x40>)
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <IM_BTN4_EXTI1_Handler+0x44>)
 800505c:	8812      	ldrh	r2, [r2, #0]
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005064:	dd0b      	ble.n	800507e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8005066:	2002      	movs	r0, #2
 8005068:	f7ff fefc 	bl	8004e64 <LL_EXTI_IsActiveFlag_0_31>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8005072:	2002      	movs	r0, #2
 8005074:	f7ff f890 	bl	8004198 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005078:	4806      	ldr	r0, [pc, #24]	; (8005094 <IM_BTN4_EXTI1_Handler+0x48>)
 800507a:	f00a fe3d 	bl	800fcf8 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800507e:	4a04      	ldr	r2, [pc, #16]	; (8005090 <IM_BTN4_EXTI1_Handler+0x44>)
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	8013      	strh	r3, [r2, #0]


}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40014400 	.word	0x40014400
 8005090:	20001ed8 	.word	0x20001ed8
 8005094:	080140a8 	.word	0x080140a8

08005098 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800509e:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <IM_ENC_EXTI2_Handler+0x40>)
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <IM_ENC_EXTI2_Handler+0x44>)
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b0:	dd0b      	ble.n	80050ca <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80050b2:	2004      	movs	r0, #4
 80050b4:	f7ff fed6 	bl	8004e64 <LL_EXTI_IsActiveFlag_0_31>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80050be:	2006      	movs	r0, #6
 80050c0:	f7ff f86a 	bl	8004198 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80050c4:	4806      	ldr	r0, [pc, #24]	; (80050e0 <IM_ENC_EXTI2_Handler+0x48>)
 80050c6:	f00a fe17 	bl	800fcf8 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80050ca:	4a04      	ldr	r2, [pc, #16]	; (80050dc <IM_ENC_EXTI2_Handler+0x44>)
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	8013      	strh	r3, [r2, #0]


}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40014400 	.word	0x40014400
 80050dc:	20001eda 	.word	0x20001eda
 80050e0:	080140c0 	.word	0x080140c0

080050e4 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <IM_ENC_DIRF_Handler+0x30>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f4:	d10b      	bne.n	800510e <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 80050f6:	2005      	movs	r0, #5
 80050f8:	f7ff f84e 	bl	8004198 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 80050fc:	4806      	ldr	r0, [pc, #24]	; (8005118 <IM_ENC_DIRF_Handler+0x34>)
 80050fe:	f00a fdfb 	bl	800fcf8 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <IM_ENC_DIRF_Handler+0x30>)
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	4a03      	ldr	r2, [pc, #12]	; (8005114 <IM_ENC_DIRF_Handler+0x30>)
 8005108:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800510c:	6113      	str	r3, [r2, #16]

	}
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40012c00 	.word	0x40012c00
 8005118:	080140dc 	.word	0x080140dc

0800511c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005120:	4b03      	ldr	r3, [pc, #12]	; (8005130 <BO_GetBiasPolarity+0x14>)
 8005122:	781b      	ldrb	r3, [r3, #0]
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000009 	.word	0x20000009

08005134 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <BO_GetDcBiasEncoderValue+0x14>)
 800513a:	881b      	ldrh	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	2000000a 	.word	0x2000000a

0800514c <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8005156:	2000      	movs	r0, #0
 8005158:	f001 fa36 	bl	80065c8 <SM_GetEncoderValue>
 800515c:	4603      	mov	r3, r0
 800515e:	461a      	mov	r2, r3
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005162:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800516a:	d214      	bcs.n	8005196 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 800516c:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005180:	2200      	movs	r2, #0
 8005182:	2110      	movs	r1, #16
 8005184:	4814      	ldr	r0, [pc, #80]	; (80051d8 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005186:	f004 ffe1 	bl	800a14c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800518a:	2201      	movs	r2, #1
 800518c:	2108      	movs	r1, #8
 800518e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005192:	f005 ff9d 	bl	800b0d0 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800519c:	d314      	bcc.n	80051c8 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80051b2:	2200      	movs	r2, #0
 80051b4:	2110      	movs	r1, #16
 80051b6:	4808      	ldr	r0, [pc, #32]	; (80051d8 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80051b8:	f004 ffc8 	bl	800a14c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80051bc:	2200      	movs	r2, #0
 80051be:	2108      	movs	r1, #8
 80051c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051c4:	f005 ff84 	bl	800b0d0 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	2000000a 	.word	0x2000000a
 80051d4:	20000009 	.word	0x20000009
 80051d8:	200026ac 	.word	0x200026ac

080051dc <BO_SetPwmSignalOffsetForGain>:

void BO_SetPwmSignalOffsetForGain(eGainSettings_t temp_gain)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	71fb      	strb	r3, [r7, #7]
	// artifically offset PWM signal above DC
	uint16_t new_bias_value;
	switch(temp_gain)
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	2b06      	cmp	r3, #6
 80051ec:	d81c      	bhi.n	8005228 <BO_SetPwmSignalOffsetForGain+0x4c>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <BO_SetPwmSignalOffsetForGain+0x18>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005211 	.word	0x08005211
 80051f8:	08005219 	.word	0x08005219
 80051fc:	08005221 	.word	0x08005221
 8005200:	08005221 	.word	0x08005221
 8005204:	08005221 	.word	0x08005221
 8005208:	08005221 	.word	0x08005221
 800520c:	08005221 	.word	0x08005221
	{

		case ONE_GAIN:
			new_bias_value = 2500;
 8005210:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005214:	81fb      	strh	r3, [r7, #14]
			break;
 8005216:	e008      	b.n	800522a <BO_SetPwmSignalOffsetForGain+0x4e>
		case TWO_GAIN:
			new_bias_value = 3000;
 8005218:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800521c:	81fb      	strh	r3, [r7, #14]
			break;
 800521e:	e004      	b.n	800522a <BO_SetPwmSignalOffsetForGain+0x4e>
		case THREE_GAIN:
		case FOUR_GAIN:
		case FIVE_GAIN:
		case SIX_GAIN:
		case SEVEN_GAIN:
			new_bias_value = 4095;
 8005220:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005224:	81fb      	strh	r3, [r7, #14]
			break;
 8005226:	e000      	b.n	800522a <BO_SetPwmSignalOffsetForGain+0x4e>

		default:
			break;
 8005228:	bf00      	nop

	}

	HAL_DAC_SetValue(	&hdac1,
 800522a:	89fb      	ldrh	r3, [r7, #14]
 800522c:	2200      	movs	r2, #0
 800522e:	2110      	movs	r1, #16
 8005230:	4806      	ldr	r0, [pc, #24]	; (800524c <BO_SetPwmSignalOffsetForGain+0x70>)
 8005232:	f004 ff8b 	bl	800a14c <HAL_DAC_SetValue>
						DAC1_CHANNEL_2,
						DAC_ALIGN_12B_R,
						new_bias_value);

	HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8005236:	2200      	movs	r2, #0
 8005238:	2108      	movs	r1, #8
 800523a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800523e:	f005 ff47 	bl	800b0d0 <HAL_GPIO_WritePin>
						DCBIAS_INVERT_Pin,
						GPIO_PIN_RESET);
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200026ac 	.word	0x200026ac

08005250 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005254:	2110      	movs	r1, #16
 8005256:	4803      	ldr	r0, [pc, #12]	; (8005264 <BO_GetOutputBias+0x14>)
 8005258:	f004 ffbe 	bl	800a1d8 <HAL_DAC_GetValue>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200026ac 	.word	0x200026ac

08005268 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	e06b      	b.n	800534c <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8005274:	493a      	ldr	r1, [pc, #232]	; (8005360 <DT_InitRegister+0xf8>)
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	3308      	adds	r3, #8
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d129      	bne.n	80052de <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 800528a:	4935      	ldr	r1, [pc, #212]	; (8005360 <DT_InitRegister+0xf8>)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3304      	adds	r3, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a31      	ldr	r2, [pc, #196]	; (8005364 <DT_InitRegister+0xfc>)
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052aa:	492d      	ldr	r1, [pc, #180]	; (8005360 <DT_InitRegister+0xf8>)
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	3310      	adds	r3, #16
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c6:	ee17 0a90 	vmov	r0, s15
 80052ca:	4925      	ldr	r1, [pc, #148]	; (8005360 <DT_InitRegister+0xf8>)
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	330c      	adds	r3, #12
 80052da:	6018      	str	r0, [r3, #0]
 80052dc:	e033      	b.n	8005346 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80052de:	4920      	ldr	r1, [pc, #128]	; (8005360 <DT_InitRegister+0xf8>)
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	3304      	adds	r3, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <DT_InitRegister+0xfc>)
 80052f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80052f6:	481a      	ldr	r0, [pc, #104]	; (8005360 <DT_InitRegister+0xf8>)
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4403      	add	r3, r0
 8005304:	3308      	adds	r3, #8
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	fbb1 f3f3 	udiv	r3, r1, r3
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005314:	4912      	ldr	r1, [pc, #72]	; (8005360 <DT_InitRegister+0xf8>)
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	3310      	adds	r3, #16
 8005324:	edd3 7a00 	vldr	s15, [r3]
 8005328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005330:	ee17 0a90 	vmov	r0, s15
 8005334:	490a      	ldr	r1, [pc, #40]	; (8005360 <DT_InitRegister+0xf8>)
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	330c      	adds	r3, #12
 8005344:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3301      	adds	r3, #1
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b0d      	cmp	r3, #13
 8005350:	dd90      	ble.n	8005274 <DT_InitRegister+0xc>
	}
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	2000000c 	.word	0x2000000c
 8005364:	00155cc0 	.word	0x00155cc0

08005368 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e016      	b.n	80053a4 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8005376:	4910      	ldr	r1, [pc, #64]	; (80053b8 <DT_GetRegisterByEnum+0x50>)
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	3304      	adds	r3, #4
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d107      	bne.n	800539e <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <DT_GetRegisterByEnum+0x50>)
 800539a:	4413      	add	r3, r2
 800539c:	e006      	b.n	80053ac <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b0d      	cmp	r3, #13
 80053a8:	dde5      	ble.n	8005376 <DT_GetRegisterByEnum+0xe>

	return 0;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	2000000c 	.word	0x2000000c

080053bc <FreqO_ResetLastEncoderValue>:
uint8_t FreqPresetEncoderRange = 56;

uint16_t freq_last_encoder_value = 0;

void FreqO_ResetLastEncoderValue()
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <FreqO_ResetLastEncoderValue+0x14>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	801a      	strh	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20001edc 	.word	0x20001edc

080053d4 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80053da:	2000      	movs	r0, #0
 80053dc:	f001 f8f4 	bl	80065c8 <SM_GetEncoderValue>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	4b10      	ldr	r3, [pc, #64]	; (8005428 <FreqO_AdjustFreq+0x54>)
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80053e8:	2000      	movs	r0, #0
 80053ea:	f000 fddb 	bl	8005fa4 <SM_GetOutputChannel>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	2b06      	cmp	r3, #6
 80053fc:	d110      	bne.n	8005420 <FreqO_AdjustFreq+0x4c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <FreqO_AdjustFreq+0x58>)
 8005400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005404:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 8005406:	2000      	movs	r0, #0
 8005408:	f001 f8de 	bl	80065c8 <SM_GetEncoderValue>
 800540c:	4603      	mov	r3, r0
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <FreqO_AdjustFreq+0x58>)
 8005414:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR2 = TIM3->ARR/2;
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <FreqO_AdjustFreq+0x58>)
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	4a04      	ldr	r2, [pc, #16]	; (800542c <FreqO_AdjustFreq+0x58>)
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	6393      	str	r3, [r2, #56]	; 0x38

		}
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40013400 	.word	0x40013400
 800542c:	40000400 	.word	0x40000400

08005430 <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	2b38      	cmp	r3, #56	; 0x38
 800543e:	f200 80b4 	bhi.w	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <FreqO_MapEncoderPositionToBothOutput+0x18>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	0800552d 	.word	0x0800552d
 800544c:	0800552d 	.word	0x0800552d
 8005450:	0800552d 	.word	0x0800552d
 8005454:	0800552d 	.word	0x0800552d
 8005458:	08005535 	.word	0x08005535
 800545c:	08005535 	.word	0x08005535
 8005460:	08005535 	.word	0x08005535
 8005464:	08005535 	.word	0x08005535
 8005468:	0800553d 	.word	0x0800553d
 800546c:	0800553d 	.word	0x0800553d
 8005470:	0800553d 	.word	0x0800553d
 8005474:	0800553d 	.word	0x0800553d
 8005478:	08005545 	.word	0x08005545
 800547c:	08005545 	.word	0x08005545
 8005480:	08005545 	.word	0x08005545
 8005484:	08005545 	.word	0x08005545
 8005488:	0800554d 	.word	0x0800554d
 800548c:	0800554d 	.word	0x0800554d
 8005490:	0800554d 	.word	0x0800554d
 8005494:	0800554d 	.word	0x0800554d
 8005498:	08005555 	.word	0x08005555
 800549c:	08005555 	.word	0x08005555
 80054a0:	08005555 	.word	0x08005555
 80054a4:	08005555 	.word	0x08005555
 80054a8:	0800555f 	.word	0x0800555f
 80054ac:	0800555f 	.word	0x0800555f
 80054b0:	0800555f 	.word	0x0800555f
 80054b4:	0800555f 	.word	0x0800555f
 80054b8:	08005569 	.word	0x08005569
 80054bc:	08005569 	.word	0x08005569
 80054c0:	08005569 	.word	0x08005569
 80054c4:	080055ab 	.word	0x080055ab
 80054c8:	08005569 	.word	0x08005569
 80054cc:	08005573 	.word	0x08005573
 80054d0:	08005573 	.word	0x08005573
 80054d4:	08005573 	.word	0x08005573
 80054d8:	08005573 	.word	0x08005573
 80054dc:	0800557d 	.word	0x0800557d
 80054e0:	0800557d 	.word	0x0800557d
 80054e4:	0800557d 	.word	0x0800557d
 80054e8:	0800557d 	.word	0x0800557d
 80054ec:	08005587 	.word	0x08005587
 80054f0:	08005587 	.word	0x08005587
 80054f4:	08005587 	.word	0x08005587
 80054f8:	08005587 	.word	0x08005587
 80054fc:	08005591 	.word	0x08005591
 8005500:	08005591 	.word	0x08005591
 8005504:	08005591 	.word	0x08005591
 8005508:	08005591 	.word	0x08005591
 800550c:	0800559b 	.word	0x0800559b
 8005510:	0800559b 	.word	0x0800559b
 8005514:	0800559b 	.word	0x0800559b
 8005518:	0800559b 	.word	0x0800559b
 800551c:	080055a3 	.word	0x080055a3
 8005520:	080055a3 	.word	0x080055a3
 8005524:	080055a3 	.word	0x080055a3
 8005528:	080055a3 	.word	0x080055a3
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 800552c:	2001      	movs	r0, #1
 800552e:	f000 f845 	bl	80055bc <FreqO_ApplyPreset>
			break;
 8005532:	e03a      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8005534:	200a      	movs	r0, #10
 8005536:	f000 f841 	bl	80055bc <FreqO_ApplyPreset>
			break;
 800553a:	e036      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 800553c:	2032      	movs	r0, #50	; 0x32
 800553e:	f000 f83d 	bl	80055bc <FreqO_ApplyPreset>
			break;
 8005542:	e032      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8005544:	2064      	movs	r0, #100	; 0x64
 8005546:	f000 f839 	bl	80055bc <FreqO_ApplyPreset>
			break;
 800554a:	e02e      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 800554c:	20fa      	movs	r0, #250	; 0xfa
 800554e:	f000 f835 	bl	80055bc <FreqO_ApplyPreset>
			break;
 8005552:	e02a      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8005554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005558:	f000 f830 	bl	80055bc <FreqO_ApplyPreset>
			break;
 800555c:	e025      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 800555e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8005562:	f000 f82b 	bl	80055bc <FreqO_ApplyPreset>
			break;
 8005566:	e020      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8005568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800556c:	f000 f826 	bl	80055bc <FreqO_ApplyPreset>
			break;
 8005570:	e01b      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8005572:	f241 3088 	movw	r0, #5000	; 0x1388
 8005576:	f000 f821 	bl	80055bc <FreqO_ApplyPreset>
			break;
 800557a:	e016      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 800557c:	f242 7010 	movw	r0, #10000	; 0x2710
 8005580:	f000 f81c 	bl	80055bc <FreqO_ApplyPreset>
			break;
 8005584:	e011      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8005586:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800558a:	f000 f817 	bl	80055bc <FreqO_ApplyPreset>
			break;
 800558e:	e00c      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8005590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005594:	f000 f812 	bl	80055bc <FreqO_ApplyPreset>
			break;
 8005598:	e007      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 800559a:	4806      	ldr	r0, [pc, #24]	; (80055b4 <FreqO_MapEncoderPositionToBothOutput+0x184>)
 800559c:	f000 f80e 	bl	80055bc <FreqO_ApplyPreset>
			break;
 80055a0:	e003      	b.n	80055aa <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 80055a2:	4805      	ldr	r0, [pc, #20]	; (80055b8 <FreqO_MapEncoderPositionToBothOutput+0x188>)
 80055a4:	f000 f80a 	bl	80055bc <FreqO_ApplyPreset>
			break;
 80055a8:	bf00      	nop
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = FPRESET_100KHZ;
		FreqO_ApplyPreset_Fast(_FindFPresetObjectByIndex(tmpFreqIndex));
	}
	freq_last_encoder_value = pEncValue;
	*/
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	000124f8 	.word	0x000124f8
 80055b8:	000186a0 	.word	0x000186a0

080055bc <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fecf 	bl	8005368 <DT_GetRegisterByEnum>
 80055ca:	6178      	str	r0, [r7, #20]
	if(tmpDT)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d02e      	beq.n	8005630 <FreqO_ApplyPreset+0x74>
	{
		OUTPUT_TIMER->PSC = tmpDT->psc;
 80055d2:	4a19      	ldr	r2, [pc, #100]	; (8005638 <FreqO_ApplyPreset+0x7c>)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpDT->arr;
 80055da:	4a17      	ldr	r2, [pc, #92]	; (8005638 <FreqO_ApplyPreset+0x7c>)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80055e2:	2000      	movs	r0, #0
 80055e4:	f000 fcde 	bl	8005fa4 <SM_GetOutputChannel>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	74fb      	strb	r3, [r7, #19]
		if(tmpOut == PWM_FUNC_MODE)
 80055f2:	7cfb      	ldrb	r3, [r7, #19]
 80055f4:	2b06      	cmp	r3, #6
 80055f6:	d10d      	bne.n	8005614 <FreqO_ApplyPreset+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <FreqO_ApplyPreset+0x80>)
 80055fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = tmpDT->arr/2;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4a0d      	ldr	r2, [pc, #52]	; (800563c <FreqO_ApplyPreset+0x80>)
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR2 = TIM3->ARR/2;
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <FreqO_ApplyPreset+0x80>)
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	4a0b      	ldr	r2, [pc, #44]	; (800563c <FreqO_ApplyPreset+0x80>)
 8005610:	085b      	lsrs	r3, r3, #1
 8005612:	6393      	str	r3, [r2, #56]	; 0x38
		}

		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmpFreq = FreqO_FindFPresetObject(pPresetEnum);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f823 	bl	8005660 <FreqO_FindFPresetObject>
 800561a:	60f8      	str	r0, [r7, #12]
		if(tmpFreq)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <FreqO_ApplyPreset+0x6e>
		{
			freq_profile = tmpFreq;
 8005622:	4a07      	ldr	r2, [pc, #28]	; (8005640 <FreqO_ApplyPreset+0x84>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6013      	str	r3, [r2, #0]
		}



	}
}
 8005628:	e002      	b.n	8005630 <FreqO_ApplyPreset+0x74>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 800562a:	4806      	ldr	r0, [pc, #24]	; (8005644 <FreqO_ApplyPreset+0x88>)
 800562c:	f7fb ffa8 	bl	8001580 <DM_SetErrorDebugMsg>
}
 8005630:	bf00      	nop
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40013400 	.word	0x40013400
 800563c:	40000400 	.word	0x40000400
 8005640:	20000198 	.word	0x20000198
 8005644:	080140f4 	.word	0x080140f4

08005648 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
	return freq_profile;
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <FreqO_GetFPresetObject+0x14>)
 800564e:	681b      	ldr	r3, [r3, #0]
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000198 	.word	0x20000198

08005660 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e00e      	b.n	800568c <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800566e:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <FreqO_FindFPresetObject+0x44>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	d104      	bne.n	8005686 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <FreqO_FindFPresetObject+0x44>)
 8005682:	4413      	add	r3, r2
 8005684:	e009      	b.n	800569a <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b0d      	cmp	r3, #13
 8005690:	dded      	ble.n	800566e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005692:	4805      	ldr	r0, [pc, #20]	; (80056a8 <FreqO_FindFPresetObject+0x48>)
 8005694:	f7fb ff74 	bl	8001580 <DM_SetErrorDebugMsg>
	return 0;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000128 	.word	0x20000128
 80056a8:	0801411c 	.word	0x0801411c

080056ac <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 80056b0:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <FreqO_GetFreqPresetEncoderRange+0x14>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000124 	.word	0x20000124

080056c4 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <FuncO_ResetLastEncoderValue+0x14>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	801a      	strh	r2, [r3, #0]
}
 80056ce:	bf00      	nop
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20001f0a 	.word	0x20001f0a

080056dc <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80056e6:	2000      	movs	r0, #0
 80056e8:	f000 fc5c 	bl	8005fa4 <SM_GetOutputChannel>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d90c      	bls.n	800571a <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	3301      	adds	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d901      	bls.n	8005710 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 800570c:	2306      	movs	r3, #6
 800570e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f856 	bl	80057c4 <FuncO_ApplyPresetToSignal>
 8005718:	e010      	b.n	800573c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	429a      	cmp	r2, r3
 8005722:	d20b      	bcs.n	800573c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	3b01      	subs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b06      	cmp	r3, #6
 800572e:	d901      	bls.n	8005734 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f844 	bl	80057c4 <FuncO_ApplyPresetToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 800573c:	4a03      	ldr	r2, [pc, #12]	; (800574c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	8013      	strh	r3, [r2, #0]
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20001f0a 	.word	0x20001f0a

08005750 <FuncO_MapEncoderPositionToSyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 800575a:	2001      	movs	r0, #1
 800575c:	f000 fc22 	bl	8005fa4 <SM_GetOutputChannel>
 8005760:	4603      	mov	r3, r0
 8005762:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	429a      	cmp	r2, r3
 8005772:	d90c      	bls.n	800578e <FuncO_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpFunc++;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	3301      	adds	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b06      	cmp	r3, #6
 800577e:	d901      	bls.n	8005784 <FuncO_MapEncoderPositionToSyncOutput+0x34>
 8005780:	2306      	movs	r3, #6
 8005782:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f8f4 	bl	8005974 <FuncO_ApplyPresetToSync>
 800578c:	e010      	b.n	80057b0 <FuncO_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	429a      	cmp	r2, r3
 8005796:	d20b      	bcs.n	80057b0 <FuncO_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpFunc--;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	3b01      	subs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d901      	bls.n	80057a8 <FuncO_MapEncoderPositionToSyncOutput+0x58>
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 f8e2 	bl	8005974 <FuncO_ApplyPresetToSync>
	}
	func_last_encoder_value = pEncoderValue;
 80057b0:	4a03      	ldr	r2, [pc, #12]	; (80057c0 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	8013      	strh	r3, [r2, #0]
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20001f0a 	.word	0x20001f0a

080057c4 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80057ce:	79fc      	ldrb	r4, [r7, #7]
 80057d0:	2000      	movs	r0, #0
 80057d2:	f000 fbe7 	bl	8005fa4 <SM_GetOutputChannel>
 80057d6:	4601      	mov	r1, r0
 80057d8:	00e3      	lsls	r3, r4, #3
 80057da:	4a61      	ldr	r2, [pc, #388]	; (8005960 <FuncO_ApplyPresetToSignal+0x19c>)
 80057dc:	4413      	add	r3, r2
 80057de:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	2b06      	cmp	r3, #6
 80057e6:	d122      	bne.n	800582e <FuncO_ApplyPresetToSignal+0x6a>
	{
		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80057e8:	2000      	movs	r0, #0
 80057ea:	f000 fbdb 	bl	8005fa4 <SM_GetOutputChannel>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	737b      	strb	r3, [r7, #13]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80057f8:	7b7b      	ldrb	r3, [r7, #13]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 ff9e 	bl	800673c <VPP_ApplyProfileToSignal>


		// switch output signal from DAC to PWM
		SM_DisableDacToSignal();
 8005800:	f000 fd66 	bl	80062d0 <SM_DisableDacToSignal>
		SM_EnablePwmToSignal();
 8005804:	f000 fbe4 	bl	8005fd0 <SM_EnablePwmToSignal>

		GO_ApplyPresetToSignal(ONE_GAIN);
 8005808:	2001      	movs	r0, #1
 800580a:	f000 f969 	bl	8005ae0 <GO_ApplyPresetToSignal>

		// artifically offset PWM signal above DC
		eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 800580e:	2000      	movs	r0, #0
 8005810:	f000 fbc8 	bl	8005fa4 <SM_GetOutputChannel>
 8005814:	4603      	mov	r3, r0
 8005816:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	733b      	strb	r3, [r7, #12]
		BO_SetPwmSignalOffsetForGain(temp_gain);
 800581e:	7b3b      	ldrb	r3, [r7, #12]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fcdb 	bl	80051dc <BO_SetPwmSignalOffsetForGain>

		last_output_mode_was_pwm = 1;
 8005826:	4b4f      	ldr	r3, [pc, #316]	; (8005964 <FuncO_ApplyPresetToSignal+0x1a0>)
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);

	}

}
 800582c:	e093      	b.n	8005956 <FuncO_ApplyPresetToSignal+0x192>
	else if(last_output_mode_was_pwm)
 800582e:	4b4d      	ldr	r3, [pc, #308]	; (8005964 <FuncO_ApplyPresetToSignal+0x1a0>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d04b      	beq.n	80058ce <FuncO_ApplyPresetToSignal+0x10a>
		SM_DisablePwmToSignal();
 8005836:	f000 fc8b 	bl	8006150 <SM_DisablePwmToSignal>
		SM_EnableDacToSignal();
 800583a:	f000 fc99 	bl	8006170 <SM_EnableDacToSignal>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800583e:	79fc      	ldrb	r4, [r7, #7]
 8005840:	2000      	movs	r0, #0
 8005842:	f000 fbaf 	bl	8005fa4 <SM_GetOutputChannel>
 8005846:	4601      	mov	r1, r0
 8005848:	4a45      	ldr	r2, [pc, #276]	; (8005960 <FuncO_ApplyPresetToSignal+0x19c>)
 800584a:	00e3      	lsls	r3, r4, #3
 800584c:	4413      	add	r3, r2
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005852:	2000      	movs	r0, #0
 8005854:	f000 fba6 	bl	8005fa4 <SM_GetOutputChannel>
 8005858:	4603      	mov	r3, r0
 800585a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	73bb      	strb	r3, [r7, #14]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 ff69 	bl	800673c <VPP_ApplyProfileToSignal>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800586a:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a3e      	ldr	r2, [pc, #248]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005876:	2100      	movs	r1, #0
 8005878:	483c      	ldr	r0, [pc, #240]	; (800596c <FuncO_ApplyPresetToSignal+0x1a8>)
 800587a:	f004 fc11 	bl	800a0a0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800587e:	2000      	movs	r0, #0
 8005880:	f000 fb90 	bl	8005fa4 <SM_GetOutputChannel>
 8005884:	4603      	mov	r3, r0
 8005886:	f103 0208 	add.w	r2, r3, #8
 800588a:	2300      	movs	r3, #0
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2378      	movs	r3, #120	; 0x78
 8005890:	2100      	movs	r1, #0
 8005892:	4836      	ldr	r0, [pc, #216]	; (800596c <FuncO_ApplyPresetToSignal+0x1a8>)
 8005894:	f004 fb42 	bl	8009f1c <HAL_DAC_Start_DMA>
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005898:	2100      	movs	r1, #0
 800589a:	4835      	ldr	r0, [pc, #212]	; (8005970 <FuncO_ApplyPresetToSignal+0x1ac>)
 800589c:	f004 fc00 	bl	800a0a0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f000 fb7f 	bl	8005fa4 <SM_GetOutputChannel>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f103 0208 	add.w	r2, r3, #8
 80058ac:	2300      	movs	r3, #0
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2378      	movs	r3, #120	; 0x78
 80058b2:	2100      	movs	r1, #0
 80058b4:	482e      	ldr	r0, [pc, #184]	; (8005970 <FuncO_ApplyPresetToSignal+0x1ac>)
 80058b6:	f004 fb31 	bl	8009f1c <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80058ba:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2a      	ldr	r2, [pc, #168]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	6013      	str	r3, [r2, #0]
		last_output_mode_was_pwm = 0;
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <FuncO_ApplyPresetToSignal+0x1a0>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
}
 80058cc:	e043      	b.n	8005956 <FuncO_ApplyPresetToSignal+0x192>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80058ce:	79fc      	ldrb	r4, [r7, #7]
 80058d0:	2000      	movs	r0, #0
 80058d2:	f000 fb67 	bl	8005fa4 <SM_GetOutputChannel>
 80058d6:	4601      	mov	r1, r0
 80058d8:	4a21      	ldr	r2, [pc, #132]	; (8005960 <FuncO_ApplyPresetToSignal+0x19c>)
 80058da:	00e3      	lsls	r3, r4, #3
 80058dc:	4413      	add	r3, r2
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80058e2:	2000      	movs	r0, #0
 80058e4:	f000 fb5e 	bl	8005fa4 <SM_GetOutputChannel>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 ff21 	bl	800673c <VPP_ApplyProfileToSignal>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1a      	ldr	r2, [pc, #104]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005906:	2100      	movs	r1, #0
 8005908:	4818      	ldr	r0, [pc, #96]	; (800596c <FuncO_ApplyPresetToSignal+0x1a8>)
 800590a:	f004 fbc9 	bl	800a0a0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800590e:	2000      	movs	r0, #0
 8005910:	f000 fb48 	bl	8005fa4 <SM_GetOutputChannel>
 8005914:	4603      	mov	r3, r0
 8005916:	f103 0208 	add.w	r2, r3, #8
 800591a:	2300      	movs	r3, #0
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	2378      	movs	r3, #120	; 0x78
 8005920:	2100      	movs	r1, #0
 8005922:	4812      	ldr	r0, [pc, #72]	; (800596c <FuncO_ApplyPresetToSignal+0x1a8>)
 8005924:	f004 fafa 	bl	8009f1c <HAL_DAC_Start_DMA>
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005928:	2100      	movs	r1, #0
 800592a:	4811      	ldr	r0, [pc, #68]	; (8005970 <FuncO_ApplyPresetToSignal+0x1ac>)
 800592c:	f004 fbb8 	bl	800a0a0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005930:	2001      	movs	r0, #1
 8005932:	f000 fb37 	bl	8005fa4 <SM_GetOutputChannel>
 8005936:	4603      	mov	r3, r0
 8005938:	f103 0208 	add.w	r2, r3, #8
 800593c:	2300      	movs	r3, #0
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	2378      	movs	r3, #120	; 0x78
 8005942:	2100      	movs	r1, #0
 8005944:	480a      	ldr	r0, [pc, #40]	; (8005970 <FuncO_ApplyPresetToSignal+0x1ac>)
 8005946:	f004 fae9 	bl	8009f1c <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a06      	ldr	r2, [pc, #24]	; (8005968 <FuncO_ApplyPresetToSignal+0x1a4>)
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	6013      	str	r3, [r2, #0]
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	bd90      	pop	{r4, r7, pc}
 800595e:	bf00      	nop
 8005960:	200001a0 	.word	0x200001a0
 8005964:	20001f08 	.word	0x20001f08
 8005968:	40013400 	.word	0x40013400
 800596c:	200026ac 	.word	0x200026ac
 8005970:	20002698 	.word	0x20002698

08005974 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8005974:	b590      	push	{r4, r7, lr}
 8005976:	b087      	sub	sp, #28
 8005978:	af02      	add	r7, sp, #8
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800597e:	79fc      	ldrb	r4, [r7, #7]
 8005980:	2001      	movs	r0, #1
 8005982:	f000 fb0f 	bl	8005fa4 <SM_GetOutputChannel>
 8005986:	4601      	mov	r1, r0
 8005988:	00e3      	lsls	r3, r4, #3
 800598a:	4a26      	ldr	r2, [pc, #152]	; (8005a24 <FuncO_ApplyPresetToSync+0xb0>)
 800598c:	4413      	add	r3, r2
 800598e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005992:	79fc      	ldrb	r4, [r7, #7]
 8005994:	2001      	movs	r0, #1
 8005996:	f000 fb05 	bl	8005fa4 <SM_GetOutputChannel>
 800599a:	4601      	mov	r1, r0
 800599c:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <FuncO_ApplyPresetToSync+0xb0>)
 800599e:	00e3      	lsls	r3, r4, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 80059a6:	2001      	movs	r0, #1
 80059a8:	f000 fafc 	bl	8005fa4 <SM_GetOutputChannel>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSync(eTmpVppPreset);
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 feed 	bl	8006798 <VPP_ApplyProfileToSync>

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80059be:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <FuncO_ApplyPresetToSync+0xb4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <FuncO_ApplyPresetToSync+0xb4>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80059ca:	2100      	movs	r1, #0
 80059cc:	4817      	ldr	r0, [pc, #92]	; (8005a2c <FuncO_ApplyPresetToSync+0xb8>)
 80059ce:	f004 fb67 	bl	800a0a0 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80059d2:	2001      	movs	r0, #1
 80059d4:	f000 fae6 	bl	8005fa4 <SM_GetOutputChannel>
 80059d8:	4603      	mov	r3, r0
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	2300      	movs	r3, #0
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	2378      	movs	r3, #120	; 0x78
 80059e4:	2100      	movs	r1, #0
 80059e6:	4811      	ldr	r0, [pc, #68]	; (8005a2c <FuncO_ApplyPresetToSync+0xb8>)
 80059e8:	f004 fa98 	bl	8009f1c <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80059ec:	2100      	movs	r1, #0
 80059ee:	4810      	ldr	r0, [pc, #64]	; (8005a30 <FuncO_ApplyPresetToSync+0xbc>)
 80059f0:	f004 fb56 	bl	800a0a0 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80059f4:	2000      	movs	r0, #0
 80059f6:	f000 fad5 	bl	8005fa4 <SM_GetOutputChannel>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f103 0208 	add.w	r2, r3, #8
 8005a00:	2300      	movs	r3, #0
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2378      	movs	r3, #120	; 0x78
 8005a06:	2100      	movs	r1, #0
 8005a08:	4809      	ldr	r0, [pc, #36]	; (8005a30 <FuncO_ApplyPresetToSync+0xbc>)
 8005a0a:	f004 fa87 	bl	8009f1c <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <FuncO_ApplyPresetToSync+0xb4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <FuncO_ApplyPresetToSync+0xb4>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6013      	str	r3, [r2, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd90      	pop	{r4, r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200001a0 	.word	0x200001a0
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	20002698 	.word	0x20002698
 8005a30:	200026ac 	.word	0x200026ac

08005a34 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	2000019c 	.word	0x2000019c

08005a4c <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <GO_ResetLastEncoderValue+0x14>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	801a      	strh	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20001f0c 	.word	0x20001f0c

08005a64 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f000 fa98 	bl	8005fa4 <SM_GetOutputChannel>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005a7e:	4b17      	ldr	r3, [pc, #92]	; (8005adc <GO_MapEncoderPositionToSignalOutput+0x78>)
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d90c      	bls.n	8005aa2 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	d901      	bls.n	8005a98 <GO_MapEncoderPositionToSignalOutput+0x34>
 8005a94:	2307      	movs	r3, #7
 8005a96:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f820 	bl	8005ae0 <GO_ApplyPresetToSignal>
 8005aa0:	e010      	b.n	8005ac4 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <GO_MapEncoderPositionToSignalOutput+0x78>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d20b      	bcs.n	8005ac4 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b07      	cmp	r3, #7
 8005ab6:	d901      	bls.n	8005abc <GO_MapEncoderPositionToSignalOutput+0x58>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f80e 	bl	8005ae0 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005ac4:	4a05      	ldr	r2, [pc, #20]	; (8005adc <GO_MapEncoderPositionToSignalOutput+0x78>)
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	BO_SetPwmSignalOffsetForGain(temp_gain);
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fb85 	bl	80051dc <BO_SetPwmSignalOffsetForGain>

}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20001f0c 	.word	0x20001f0c

08005ae0 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005aea:	79fc      	ldrb	r4, [r7, #7]
 8005aec:	2000      	movs	r0, #0
 8005aee:	f000 fa59 	bl	8005fa4 <SM_GetOutputChannel>
 8005af2:	4601      	mov	r1, r0
 8005af4:	4623      	mov	r3, r4
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4423      	add	r3, r4
 8005afa:	4a4f      	ldr	r2, [pc, #316]	; (8005c38 <GO_ApplyPresetToSignal+0x158>)
 8005afc:	4413      	add	r3, r2
 8005afe:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	2b07      	cmp	r3, #7
 8005b06:	f200 8093 	bhi.w	8005c30 <GO_ApplyPresetToSignal+0x150>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <GO_ApplyPresetToSignal+0x30>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b31 	.word	0x08005b31
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b91 	.word	0x08005b91
 8005b20:	08005bb1 	.word	0x08005bb1
 8005b24:	08005bd1 	.word	0x08005bd1
 8005b28:	08005bf1 	.word	0x08005bf1
 8005b2c:	08005c11 	.word	0x08005c11
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005b30:	2200      	movs	r2, #0
 8005b32:	2101      	movs	r1, #1
 8005b34:	4841      	ldr	r0, [pc, #260]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005b36:	f005 facb 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	4840      	ldr	r0, [pc, #256]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005b40:	f005 fac6 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005b44:	2200      	movs	r2, #0
 8005b46:	2110      	movs	r1, #16
 8005b48:	483d      	ldr	r0, [pc, #244]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005b4a:	f005 fac1 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005b4e:	e06f      	b.n	8005c30 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005b50:	2201      	movs	r2, #1
 8005b52:	2101      	movs	r1, #1
 8005b54:	4839      	ldr	r0, [pc, #228]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005b56:	f005 fabb 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	4838      	ldr	r0, [pc, #224]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005b60:	f005 fab6 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005b64:	2200      	movs	r2, #0
 8005b66:	2110      	movs	r1, #16
 8005b68:	4835      	ldr	r0, [pc, #212]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005b6a:	f005 fab1 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005b6e:	e05f      	b.n	8005c30 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005b70:	2200      	movs	r2, #0
 8005b72:	2101      	movs	r1, #1
 8005b74:	4831      	ldr	r0, [pc, #196]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005b76:	f005 faab 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	4830      	ldr	r0, [pc, #192]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005b80:	f005 faa6 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005b84:	2200      	movs	r2, #0
 8005b86:	2110      	movs	r1, #16
 8005b88:	482d      	ldr	r0, [pc, #180]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005b8a:	f005 faa1 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005b8e:	e04f      	b.n	8005c30 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005b90:	2201      	movs	r2, #1
 8005b92:	2101      	movs	r1, #1
 8005b94:	4829      	ldr	r0, [pc, #164]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005b96:	f005 fa9b 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	2120      	movs	r1, #32
 8005b9e:	4828      	ldr	r0, [pc, #160]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005ba0:	f005 fa96 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2110      	movs	r1, #16
 8005ba8:	4825      	ldr	r0, [pc, #148]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005baa:	f005 fa91 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005bae:	e03f      	b.n	8005c30 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	4821      	ldr	r0, [pc, #132]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005bb6:	f005 fa8b 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2120      	movs	r1, #32
 8005bbe:	4820      	ldr	r0, [pc, #128]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005bc0:	f005 fa86 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	2110      	movs	r1, #16
 8005bc8:	481d      	ldr	r0, [pc, #116]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005bca:	f005 fa81 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005bce:	e02f      	b.n	8005c30 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4819      	ldr	r0, [pc, #100]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005bd6:	f005 fa7b 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2120      	movs	r1, #32
 8005bde:	4818      	ldr	r0, [pc, #96]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005be0:	f005 fa76 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005be4:	2201      	movs	r2, #1
 8005be6:	2110      	movs	r1, #16
 8005be8:	4815      	ldr	r0, [pc, #84]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005bea:	f005 fa71 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005bee:	e01f      	b.n	8005c30 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4811      	ldr	r0, [pc, #68]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005bf6:	f005 fa6b 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2120      	movs	r1, #32
 8005bfe:	4810      	ldr	r0, [pc, #64]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005c00:	f005 fa66 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005c04:	2201      	movs	r2, #1
 8005c06:	2110      	movs	r1, #16
 8005c08:	480d      	ldr	r0, [pc, #52]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005c0a:	f005 fa61 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005c0e:	e00f      	b.n	8005c30 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c10:	2201      	movs	r2, #1
 8005c12:	2101      	movs	r1, #1
 8005c14:	4809      	ldr	r0, [pc, #36]	; (8005c3c <GO_ApplyPresetToSignal+0x15c>)
 8005c16:	f005 fa5b 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	2120      	movs	r1, #32
 8005c1e:	4808      	ldr	r0, [pc, #32]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005c20:	f005 fa56 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005c24:	2201      	movs	r2, #1
 8005c26:	2110      	movs	r1, #16
 8005c28:	4805      	ldr	r0, [pc, #20]	; (8005c40 <GO_ApplyPresetToSignal+0x160>)
 8005c2a:	f005 fa51 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005c2e:	bf00      	nop
	}

}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd90      	pop	{r4, r7, pc}
 8005c38:	200001d8 	.word	0x200001d8
 8005c3c:	48000400 	.word	0x48000400
 8005c40:	48000800 	.word	0x48000800

08005c44 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005c4e:	79fc      	ldrb	r4, [r7, #7]
 8005c50:	2001      	movs	r0, #1
 8005c52:	f000 f9a7 	bl	8005fa4 <SM_GetOutputChannel>
 8005c56:	4601      	mov	r1, r0
 8005c58:	4623      	mov	r3, r4
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4423      	add	r3, r4
 8005c5e:	4a4f      	ldr	r2, [pc, #316]	; (8005d9c <GO_ApplyPresetToSync+0x158>)
 8005c60:	4413      	add	r3, r2
 8005c62:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	f200 8093 	bhi.w	8005d94 <GO_ApplyPresetToSync+0x150>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <GO_ApplyPresetToSync+0x30>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c95 	.word	0x08005c95
 8005c78:	08005cb5 	.word	0x08005cb5
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005cf5 	.word	0x08005cf5
 8005c84:	08005d15 	.word	0x08005d15
 8005c88:	08005d35 	.word	0x08005d35
 8005c8c:	08005d55 	.word	0x08005d55
 8005c90:	08005d75 	.word	0x08005d75
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2101      	movs	r1, #1
 8005c98:	4841      	ldr	r0, [pc, #260]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005c9a:	f005 fa19 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2120      	movs	r1, #32
 8005ca2:	4840      	ldr	r0, [pc, #256]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005ca4:	f005 fa14 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2110      	movs	r1, #16
 8005cac:	483d      	ldr	r0, [pc, #244]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005cae:	f005 fa0f 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005cb2:	e06f      	b.n	8005d94 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4839      	ldr	r0, [pc, #228]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005cba:	f005 fa09 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	4838      	ldr	r0, [pc, #224]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005cc4:	f005 fa04 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2110      	movs	r1, #16
 8005ccc:	4835      	ldr	r0, [pc, #212]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005cce:	f005 f9ff 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005cd2:	e05f      	b.n	8005d94 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4831      	ldr	r0, [pc, #196]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005cda:	f005 f9f9 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2120      	movs	r1, #32
 8005ce2:	4830      	ldr	r0, [pc, #192]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005ce4:	f005 f9f4 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2110      	movs	r1, #16
 8005cec:	482d      	ldr	r0, [pc, #180]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005cee:	f005 f9ef 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005cf2:	e04f      	b.n	8005d94 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4829      	ldr	r0, [pc, #164]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005cfa:	f005 f9e9 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005cfe:	2201      	movs	r2, #1
 8005d00:	2120      	movs	r1, #32
 8005d02:	4828      	ldr	r0, [pc, #160]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d04:	f005 f9e4 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2110      	movs	r1, #16
 8005d0c:	4825      	ldr	r0, [pc, #148]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d0e:	f005 f9df 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005d12:	e03f      	b.n	8005d94 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005d14:	2200      	movs	r2, #0
 8005d16:	2101      	movs	r1, #1
 8005d18:	4821      	ldr	r0, [pc, #132]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005d1a:	f005 f9d9 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2120      	movs	r1, #32
 8005d22:	4820      	ldr	r0, [pc, #128]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d24:	f005 f9d4 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005d28:	2201      	movs	r2, #1
 8005d2a:	2110      	movs	r1, #16
 8005d2c:	481d      	ldr	r0, [pc, #116]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d2e:	f005 f9cf 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005d32:	e02f      	b.n	8005d94 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005d34:	2201      	movs	r2, #1
 8005d36:	2101      	movs	r1, #1
 8005d38:	4819      	ldr	r0, [pc, #100]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005d3a:	f005 f9c9 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2120      	movs	r1, #32
 8005d42:	4818      	ldr	r0, [pc, #96]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d44:	f005 f9c4 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005d48:	2201      	movs	r2, #1
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	4815      	ldr	r0, [pc, #84]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d4e:	f005 f9bf 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005d52:	e01f      	b.n	8005d94 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005d54:	2200      	movs	r2, #0
 8005d56:	2101      	movs	r1, #1
 8005d58:	4811      	ldr	r0, [pc, #68]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005d5a:	f005 f9b9 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2120      	movs	r1, #32
 8005d62:	4810      	ldr	r0, [pc, #64]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d64:	f005 f9b4 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005d68:	2201      	movs	r2, #1
 8005d6a:	2110      	movs	r1, #16
 8005d6c:	480d      	ldr	r0, [pc, #52]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d6e:	f005 f9af 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005d72:	e00f      	b.n	8005d94 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005d74:	2201      	movs	r2, #1
 8005d76:	2101      	movs	r1, #1
 8005d78:	4809      	ldr	r0, [pc, #36]	; (8005da0 <GO_ApplyPresetToSync+0x15c>)
 8005d7a:	f005 f9a9 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005d7e:	2201      	movs	r2, #1
 8005d80:	2120      	movs	r1, #32
 8005d82:	4808      	ldr	r0, [pc, #32]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d84:	f005 f9a4 	bl	800b0d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005d88:	2201      	movs	r2, #1
 8005d8a:	2110      	movs	r1, #16
 8005d8c:	4805      	ldr	r0, [pc, #20]	; (8005da4 <GO_ApplyPresetToSync+0x160>)
 8005d8e:	f005 f99f 	bl	800b0d0 <HAL_GPIO_WritePin>
			break;
 8005d92:	bf00      	nop
	}
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd90      	pop	{r4, r7, pc}
 8005d9c:	200001d8 	.word	0x200001d8
 8005da0:	48000400 	.word	0x48000400
 8005da4:	48000800 	.word	0x48000800

08005da8 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 8005dac:	f000 f89a 	bl	8005ee4 <_InitOutputChannels>
	_InitNegGainCoefficients();
 8005db0:	f000 f850 	bl	8005e54 <_InitNegGainCoefficients>
	_InitGainInDecibels();
 8005db4:	f000 f802 	bl	8005dbc <_InitGainInDecibels>

}
 8005db8:	bf00      	nop
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e037      	b.n	8005e38 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <_InitGainInDecibels+0x8c>)
 8005dca:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005dcc:	491f      	ldr	r1, [pc, #124]	; (8005e4c <_InitGainInDecibels+0x90>)
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	3304      	adds	r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005de0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005de8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005dec:	ee16 0a90 	vmov	r0, s13
 8005df0:	f7fa fbd2 	bl	8000598 <__aeabi_f2d>
 8005df4:	4603      	mov	r3, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	ec44 3b10 	vmov	d0, r3, r4
 8005dfc:	f00b fed4 	bl	8011ba8 <log10>
 8005e00:	ec51 0b10 	vmov	r0, r1, d0
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <_InitGainInDecibels+0x94>)
 8005e0a:	f7fa fc1d 	bl	8000648 <__aeabi_dmul>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	460c      	mov	r4, r1
 8005e12:	4618      	mov	r0, r3
 8005e14:	4621      	mov	r1, r4
 8005e16:	f7fa ff0f 	bl	8000c38 <__aeabi_d2f>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005e1e:	490b      	ldr	r1, [pc, #44]	; (8005e4c <_InitGainInDecibels+0x90>)
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b61      	cmp	r3, #97	; 0x61
 8005e3c:	ddc4      	ble.n	8005dc8 <_InitGainInDecibels+0xc>

	}
}
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd90      	pop	{r4, r7, pc}
 8005e46:	bf00      	nop
 8005e48:	3a83126f 	.word	0x3a83126f
 8005e4c:	200001f0 	.word	0x200001f0
 8005e50:	40340000 	.word	0x40340000

08005e54 <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e033      	b.n	8005ec8 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005e60:	491e      	ldr	r1, [pc, #120]	; (8005edc <_InitNegGainCoefficients+0x88>)
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	3304      	adds	r3, #4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005e74:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <_InitNegGainCoefficients+0x8c>)
 8005e76:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005e78:	4918      	ldr	r1, [pc, #96]	; (8005edc <_InitNegGainCoefficients+0x88>)
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	3308      	adds	r3, #8
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005e96:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ea2:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eaa:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005eae:	490b      	ldr	r1, [pc, #44]	; (8005edc <_InitNegGainCoefficients+0x88>)
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	1a9b      	subs	r3, r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	3310      	adds	r3, #16
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b61      	cmp	r3, #97	; 0x61
 8005ecc:	ddc8      	ble.n	8005e60 <_InitNegGainCoefficients+0xc>
	}
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	200001f0 	.word	0x200001f0
 8005ee0:	402ccccd 	.word	0x402ccccd

08005ee4 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005eea:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <_InitOutputChannels+0xa8>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <_InitOutputChannels+0xac>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <_InitOutputChannels+0xa8>)
 8005ef6:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005ef8:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <_InitOutputChannels+0xa8>)
 8005efa:	4a25      	ldr	r2, [pc, #148]	; (8005f90 <_InitOutputChannels+0xac>)
 8005efc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005f00:	2300      	movs	r3, #0
 8005f02:	607b      	str	r3, [r7, #4]
 8005f04:	e00b      	b.n	8005f1e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005f06:	4a23      	ldr	r2, [pc, #140]	; (8005f94 <_InitOutputChannels+0xb0>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f0e:	491f      	ldr	r1, [pc, #124]	; (8005f8c <_InitOutputChannels+0xa8>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3302      	adds	r3, #2
 8005f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b77      	cmp	r3, #119	; 0x77
 8005f22:	ddf0      	ble.n	8005f06 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005f24:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <_InitOutputChannels+0xa8>)
 8005f26:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <_InitOutputChannels+0xb4>)
 8005f28:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005f2c:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <_InitOutputChannels+0xa8>)
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <_InitOutputChannels+0xb8>)
 8005f30:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005f34:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <_InitOutputChannels+0xbc>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <_InitOutputChannels+0xac>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <_InitOutputChannels+0xbc>)
 8005f40:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005f42:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <_InitOutputChannels+0xbc>)
 8005f44:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <_InitOutputChannels+0xac>)
 8005f46:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	e00b      	b.n	8005f68 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005f50:	4a10      	ldr	r2, [pc, #64]	; (8005f94 <_InitOutputChannels+0xb0>)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f58:	4911      	ldr	r1, [pc, #68]	; (8005fa0 <_InitOutputChannels+0xbc>)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b77      	cmp	r3, #119	; 0x77
 8005f6c:	ddf0      	ble.n	8005f50 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <_InitOutputChannels+0xbc>)
 8005f70:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <_InitOutputChannels+0xb4>)
 8005f72:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <_InitOutputChannels+0xbc>)
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <_InitOutputChannels+0xb8>)
 8005f7a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	200021d4 	.word	0x200021d4
 8005f90:	200001a0 	.word	0x200001a0
 8005f94:	2000152c 	.word	0x2000152c
 8005f98:	20000bac 	.word	0x20000bac
 8005f9c:	200001ed 	.word	0x200001ed
 8005fa0:	20001fe0 	.word	0x20001fe0

08005fa4 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005fb4:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <SM_GetOutputChannel+0x24>)
 8005fb6:	e000      	b.n	8005fba <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <SM_GetOutputChannel+0x28>)
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	200021d4 	.word	0x200021d4
 8005fcc:	20001fe0 	.word	0x20001fe0

08005fd0 <SM_EnablePwmToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToSignal()
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b096      	sub	sp, #88	; 0x58
 8005fd4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	605a      	str	r2, [r3, #4]
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fe4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005ff0:	f107 0320 	add.w	r3, r7, #32
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	611a      	str	r2, [r3, #16]
 8006000:	615a      	str	r2, [r3, #20]
 8006002:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006004:	f107 030c 	add.w	r3, r7, #12
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	611a      	str	r2, [r3, #16]


	htim3.Instance = TIM3;
 8006014:	4b4b      	ldr	r3, [pc, #300]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006016:	4a4c      	ldr	r2, [pc, #304]	; (8006148 <SM_EnablePwmToSignal+0x178>)
 8006018:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800601a:	4b4a      	ldr	r3, [pc, #296]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 800601c:	2200      	movs	r2, #0
 800601e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006020:	4b48      	ldr	r3, [pc, #288]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006022:	2210      	movs	r2, #16
 8006024:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006026:	4b47      	ldr	r3, [pc, #284]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006028:	2201      	movs	r2, #1
 800602a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800602c:	4b45      	ldr	r3, [pc, #276]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 800602e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006032:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006036:	2280      	movs	r2, #128	; 0x80
 8006038:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800603a:	4842      	ldr	r0, [pc, #264]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 800603c:	f006 f8ea 	bl	800c214 <HAL_TIM_Base_Init>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <SM_EnablePwmToSignal+0x7a>
	{
		Error_Handler();
 8006046:	f001 fc13 	bl	8007870 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800604a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800604e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006054:	4619      	mov	r1, r3
 8006056:	483b      	ldr	r0, [pc, #236]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006058:	f006 fe38 	bl	800cccc <HAL_TIM_ConfigClockSource>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <SM_EnablePwmToSignal+0x96>
	{
		Error_Handler();
 8006062:	f001 fc05 	bl	8007870 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006066:	4837      	ldr	r0, [pc, #220]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006068:	f006 f9bf 	bl	800c3ea <HAL_TIM_PWM_Init>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <SM_EnablePwmToSignal+0xa6>
	{
		Error_Handler();
 8006072:	f001 fbfd 	bl	8007870 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006076:	2320      	movs	r3, #32
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800607a:	2300      	movs	r3, #0
 800607c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800607e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006082:	4619      	mov	r1, r3
 8006084:	482f      	ldr	r0, [pc, #188]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006086:	f007 fbd7 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <SM_EnablePwmToSignal+0xc4>
	{
		Error_Handler();
 8006090:	f001 fbee 	bl	8007870 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006094:	2360      	movs	r3, #96	; 0x60
 8006096:	623b      	str	r3, [r7, #32]
	sConfigOC.Pulse = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800609c:	2300      	movs	r3, #0
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060a0:	2300      	movs	r3, #0
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80060a4:	f107 0320 	add.w	r3, r7, #32
 80060a8:	2204      	movs	r2, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4825      	ldr	r0, [pc, #148]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 80060ae:	f006 fcfd 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <SM_EnablePwmToSignal+0xec>
	{
		Error_Handler();
 80060b8:	f001 fbda 	bl	8007870 <Error_Handler>
	}


	// Timer Post Initialization

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80060bc:	4b23      	ldr	r3, [pc, #140]	; (800614c <SM_EnablePwmToSignal+0x17c>)
 80060be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c0:	4a22      	ldr	r2, [pc, #136]	; (800614c <SM_EnablePwmToSignal+0x17c>)
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060c8:	4b20      	ldr	r3, [pc, #128]	; (800614c <SM_EnablePwmToSignal+0x17c>)
 80060ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	68bb      	ldr	r3, [r7, #8]
	/**TIM3 GPIO Configuration
	PA4     ------> TIM3_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80060d4:	2310      	movs	r3, #16
 80060d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d8:	2302      	movs	r3, #2
 80060da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80060e4:	2302      	movs	r3, #2
 80060e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4619      	mov	r1, r3
 80060ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060f2:	f004 fd89 	bl	800ac08 <HAL_GPIO_Init>


	// TIM3_MspInit 0

	/* TIM3 clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE();
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <SM_EnablePwmToSignal+0x17c>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fa:	4a14      	ldr	r2, [pc, #80]	; (800614c <SM_EnablePwmToSignal+0x17c>)
 80060fc:	f043 0302 	orr.w	r3, r3, #2
 8006100:	6593      	str	r3, [r2, #88]	; 0x58
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <SM_EnablePwmToSignal+0x17c>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	687b      	ldr	r3, [r7, #4]

	/* TIM3 interrupt Init */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800610e:	2200      	movs	r2, #0
 8006110:	2100      	movs	r1, #0
 8006112:	201d      	movs	r0, #29
 8006114:	f003 fe4b 	bl	8009dae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006118:	201d      	movs	r0, #29
 800611a:	f003 fe62 	bl	8009de2 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM3_MspInit 1 */

	/* USER CODE END TIM3_MspInit 1 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800611e:	2104      	movs	r1, #4
 8006120:	4808      	ldr	r0, [pc, #32]	; (8006144 <SM_EnablePwmToSignal+0x174>)
 8006122:	f006 f9c3 	bl	800c4ac <HAL_TIM_PWM_Start>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006126:	2007      	movs	r0, #7
 8006128:	f7ff fcda 	bl	8005ae0 <GO_ApplyPresetToSignal>
	// 50% duty cycle
	TIM3->CCR2 = 32768;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <SM_EnablePwmToSignal+0x178>)
 800612e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->ARR = 65535;
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <SM_EnablePwmToSignal+0x178>)
 8006136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800613c:	bf00      	nop
 800613e:	3758      	adds	r7, #88	; 0x58
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20001f90 	.word	0x20001f90
 8006148:	40000400 	.word	0x40000400
 800614c:	40021000 	.word	0x40021000

08006150 <SM_DisablePwmToSignal>:

void SM_DisablePwmToSignal()
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_MspDeInit 0 */

	/* USER CODE END TIM3_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <SM_DisablePwmToSignal+0x1c>)
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	4a04      	ldr	r2, [pc, #16]	; (800616c <SM_DisablePwmToSignal+0x1c>)
 800615a:	f023 0302 	bic.w	r3, r3, #2
 800615e:	6593      	str	r3, [r2, #88]	; 0x58

	/* TIM3 interrupt Deinit */
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006160:	201d      	movs	r0, #29
 8006162:	f003 fe4c 	bl	8009dfe <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN TIM3_MspDeInit 1 */

	/* USER CODE END TIM3_MspDeInit 1 */
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40021000 	.word	0x40021000

08006170 <SM_EnableDacToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToSignal()
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b094      	sub	sp, #80	; 0x50
 8006174:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8006176:	f107 0320 	add.w	r3, r7, #32
 800617a:	2230      	movs	r2, #48	; 0x30
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f009 f8fa 	bl	800f378 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006184:	f107 030c 	add.w	r3, r7, #12
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	611a      	str	r2, [r3, #16]

	/** DAC Initialization
	*/
	hdac1.Instance = DAC1;
 8006194:	4b49      	ldr	r3, [pc, #292]	; (80062bc <SM_EnableDacToSignal+0x14c>)
 8006196:	4a4a      	ldr	r2, [pc, #296]	; (80062c0 <SM_EnableDacToSignal+0x150>)
 8006198:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800619a:	4848      	ldr	r0, [pc, #288]	; (80062bc <SM_EnableDacToSignal+0x14c>)
 800619c:	f003 fe49 	bl	8009e32 <HAL_DAC_Init>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <SM_EnableDacToSignal+0x3a>
	{
		Error_Handler();
 80061a6:	f001 fb63 	bl	8007870 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80061aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061ae:	623b      	str	r3, [r7, #32]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sConfig.DAC_SignedFormat = DISABLE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80061bc:	2300      	movs	r3, #0
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80061c0:	2306      	movs	r3, #6
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80061c8:	2300      	movs	r3, #0
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80061d4:	f107 0320 	add.w	r3, r7, #32
 80061d8:	2200      	movs	r2, #0
 80061da:	4619      	mov	r1, r3
 80061dc:	4837      	ldr	r0, [pc, #220]	; (80062bc <SM_EnableDacToSignal+0x14c>)
 80061de:	f004 f811 	bl	800a204 <HAL_DAC_ConfigChannel>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <SM_EnableDacToSignal+0x7c>
	{
		Error_Handler();
 80061e8:	f001 fb42 	bl	8007870 <Error_Handler>
	}
	/** DAC channel OUT2 config
	*/
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80061ec:	2300      	movs	r3, #0
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80061f0:	2301      	movs	r3, #1
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80061f4:	f107 0320 	add.w	r3, r7, #32
 80061f8:	2210      	movs	r2, #16
 80061fa:	4619      	mov	r1, r3
 80061fc:	482f      	ldr	r0, [pc, #188]	; (80062bc <SM_EnableDacToSignal+0x14c>)
 80061fe:	f004 f801 	bl	800a204 <HAL_DAC_ConfigChannel>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <SM_EnableDacToSignal+0x9c>
	{
		Error_Handler();
 8006208:	f001 fb32 	bl	8007870 <Error_Handler>
	}

    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800620c:	4b2d      	ldr	r3, [pc, #180]	; (80062c4 <SM_EnableDacToSignal+0x154>)
 800620e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006210:	4a2c      	ldr	r2, [pc, #176]	; (80062c4 <SM_EnableDacToSignal+0x154>)
 8006212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006218:	4b2a      	ldr	r3, [pc, #168]	; (80062c4 <SM_EnableDacToSignal+0x154>)
 800621a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006224:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <SM_EnableDacToSignal+0x154>)
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <SM_EnableDacToSignal+0x154>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <SM_EnableDacToSignal+0x154>)
 8006232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800623c:	2330      	movs	r3, #48	; 0x30
 800623e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006240:	2303      	movs	r3, #3
 8006242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	4619      	mov	r1, r3
 800624e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006252:	f004 fcd9 	bl	800ac08 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006256:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 8006258:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <SM_EnableDacToSignal+0x15c>)
 800625a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 800625e:	2206      	movs	r2, #6
 8006260:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 8006264:	2210      	movs	r2, #16
 8006266:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006268:	4b17      	ldr	r3, [pc, #92]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 800626a:	2200      	movs	r2, #0
 800626c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800626e:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 8006270:	2280      	movs	r2, #128	; 0x80
 8006272:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006274:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 8006276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800627c:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 800627e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006282:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006284:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 8006286:	2220      	movs	r2, #32
 8006288:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800628a:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 800628c:	2200      	movs	r2, #0
 800628e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006290:	480d      	ldr	r0, [pc, #52]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 8006292:	f004 f9ed 	bl	800a670 <HAL_DMA_Init>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <SM_EnableDacToSignal+0x130>
    {
      Error_Handler();
 800629c:	f001 fae8 	bl	8007870 <Error_Handler>
    }

    __HAL_LINKDMA(&hdac1,DMA_Handle1,hdma_dac1_ch1);
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <SM_EnableDacToSignal+0x14c>)
 80062a2:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 80062a4:	609a      	str	r2, [r3, #8]
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <SM_EnableDacToSignal+0x158>)
 80062a8:	4a04      	ldr	r2, [pc, #16]	; (80062bc <SM_EnableDacToSignal+0x14c>)
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28

    GO_ApplyPresetToSignal(eDefaultGainPreset);
 80062ac:	2007      	movs	r0, #7
 80062ae:	f7ff fc17 	bl	8005ae0 <GO_ApplyPresetToSignal>
}
 80062b2:	bf00      	nop
 80062b4:	3750      	adds	r7, #80	; 0x50
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200026ac 	.word	0x200026ac
 80062c0:	50000800 	.word	0x50000800
 80062c4:	40021000 	.word	0x40021000
 80062c8:	20001f24 	.word	0x20001f24
 80062cc:	4002001c 	.word	0x4002001c

080062d0 <SM_DisableDacToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToSignal()
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0

	    /**DAC1 GPIO Configuration
	    PA4     ------> DAC1_OUT1
	    PA5     ------> DAC1_OUT2
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 80062d4:	2110      	movs	r1, #16
 80062d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062da:	f004 fe17 	bl	800af0c <HAL_GPIO_DeInit>
	    /* DAC1 DMA DeInit */
	   //HAL_DMA_DeInit(hdac1.DMA_Handle1);
	  /* USER CODE BEGIN DAC1_MspDeInit 1 */

	  /* USER CODE END DAC1_MspDeInit 1 */
}
 80062de:	bf00      	nop
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <SM_EnablePwmToSync>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToSync()
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b096      	sub	sp, #88	; 0x58
 80062e8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	609a      	str	r2, [r3, #8]
 80062f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006304:	f107 0320 	add.w	r3, r7, #32
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	609a      	str	r2, [r3, #8]
 8006310:	60da      	str	r2, [r3, #12]
 8006312:	611a      	str	r2, [r3, #16]
 8006314:	615a      	str	r2, [r3, #20]
 8006316:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006318:	f107 030c 	add.w	r3, r7, #12
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	609a      	str	r2, [r3, #8]
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	611a      	str	r2, [r3, #16]


	htim3.Instance = TIM3;
 8006328:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <SM_EnablePwmToSync+0x174>)
 800632a:	4a4c      	ldr	r2, [pc, #304]	; (800645c <SM_EnablePwmToSync+0x178>)
 800632c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800632e:	4b4a      	ldr	r3, [pc, #296]	; (8006458 <SM_EnablePwmToSync+0x174>)
 8006330:	2200      	movs	r2, #0
 8006332:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006334:	4b48      	ldr	r3, [pc, #288]	; (8006458 <SM_EnablePwmToSync+0x174>)
 8006336:	2210      	movs	r2, #16
 8006338:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 800633a:	4b47      	ldr	r3, [pc, #284]	; (8006458 <SM_EnablePwmToSync+0x174>)
 800633c:	2201      	movs	r2, #1
 800633e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006340:	4b45      	ldr	r3, [pc, #276]	; (8006458 <SM_EnablePwmToSync+0x174>)
 8006342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006346:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006348:	4b43      	ldr	r3, [pc, #268]	; (8006458 <SM_EnablePwmToSync+0x174>)
 800634a:	2280      	movs	r2, #128	; 0x80
 800634c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800634e:	4842      	ldr	r0, [pc, #264]	; (8006458 <SM_EnablePwmToSync+0x174>)
 8006350:	f005 ff60 	bl	800c214 <HAL_TIM_Base_Init>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <SM_EnablePwmToSync+0x7a>
	{
		Error_Handler();
 800635a:	f001 fa89 	bl	8007870 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800635e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006362:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006364:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006368:	4619      	mov	r1, r3
 800636a:	483b      	ldr	r0, [pc, #236]	; (8006458 <SM_EnablePwmToSync+0x174>)
 800636c:	f006 fcae 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <SM_EnablePwmToSync+0x96>
	{
		Error_Handler();
 8006376:	f001 fa7b 	bl	8007870 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800637a:	4837      	ldr	r0, [pc, #220]	; (8006458 <SM_EnablePwmToSync+0x174>)
 800637c:	f006 f835 	bl	800c3ea <HAL_TIM_PWM_Init>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <SM_EnablePwmToSync+0xa6>
	{
		Error_Handler();
 8006386:	f001 fa73 	bl	8007870 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800638a:	2320      	movs	r3, #32
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800638e:	2300      	movs	r3, #0
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006396:	4619      	mov	r1, r3
 8006398:	482f      	ldr	r0, [pc, #188]	; (8006458 <SM_EnablePwmToSync+0x174>)
 800639a:	f007 fa4d 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <SM_EnablePwmToSync+0xc4>
	{
		Error_Handler();
 80063a4:	f001 fa64 	bl	8007870 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063a8:	2360      	movs	r3, #96	; 0x60
 80063aa:	623b      	str	r3, [r7, #32]
	sConfigOC.Pulse = 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063b0:	2300      	movs	r3, #0
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063b8:	f107 0320 	add.w	r3, r7, #32
 80063bc:	2200      	movs	r2, #0
 80063be:	4619      	mov	r1, r3
 80063c0:	4825      	ldr	r0, [pc, #148]	; (8006458 <SM_EnablePwmToSync+0x174>)
 80063c2:	f006 fb73 	bl	800caac <HAL_TIM_PWM_ConfigChannel>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <SM_EnablePwmToSync+0xec>
	{
		Error_Handler();
 80063cc:	f001 fa50 	bl	8007870 <Error_Handler>
	}


	// Timer Post Initialization

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80063d0:	4b23      	ldr	r3, [pc, #140]	; (8006460 <SM_EnablePwmToSync+0x17c>)
 80063d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d4:	4a22      	ldr	r2, [pc, #136]	; (8006460 <SM_EnablePwmToSync+0x17c>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <SM_EnablePwmToSync+0x17c>)
 80063de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	60bb      	str	r3, [r7, #8]
 80063e6:	68bb      	ldr	r3, [r7, #8]
	/**TIM3 GPIO Configuration
	PA4     ------> TIM3_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ec:	2302      	movs	r3, #2
 80063ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063f8:	2302      	movs	r3, #2
 80063fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	4619      	mov	r1, r3
 8006402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006406:	f004 fbff 	bl	800ac08 <HAL_GPIO_Init>


	// TIM3_MspInit 0

	/* TIM3 clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE();
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <SM_EnablePwmToSync+0x17c>)
 800640c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640e:	4a14      	ldr	r2, [pc, #80]	; (8006460 <SM_EnablePwmToSync+0x17c>)
 8006410:	f043 0302 	orr.w	r3, r3, #2
 8006414:	6593      	str	r3, [r2, #88]	; 0x58
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <SM_EnablePwmToSync+0x17c>)
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	687b      	ldr	r3, [r7, #4]

	/* TIM3 interrupt Init */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006422:	2200      	movs	r2, #0
 8006424:	2100      	movs	r1, #0
 8006426:	201d      	movs	r0, #29
 8006428:	f003 fcc1 	bl	8009dae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800642c:	201d      	movs	r0, #29
 800642e:	f003 fcd8 	bl	8009de2 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM3_MspInit 1 */

	/* USER CODE END TIM3_MspInit 1 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006432:	2100      	movs	r1, #0
 8006434:	4808      	ldr	r0, [pc, #32]	; (8006458 <SM_EnablePwmToSync+0x174>)
 8006436:	f006 f839 	bl	800c4ac <HAL_TIM_PWM_Start>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 800643a:	2007      	movs	r0, #7
 800643c:	f7ff fb50 	bl	8005ae0 <GO_ApplyPresetToSignal>
	// 50% duty cycle
	TIM3->CCR1 = 32768;
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <SM_EnablePwmToSync+0x178>)
 8006442:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006446:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->ARR = 65535;
 8006448:	4b04      	ldr	r3, [pc, #16]	; (800645c <SM_EnablePwmToSync+0x178>)
 800644a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006450:	bf00      	nop
 8006452:	3758      	adds	r7, #88	; 0x58
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20001f90 	.word	0x20001f90
 800645c:	40000400 	.word	0x40000400
 8006460:	40021000 	.word	0x40021000

08006464 <SM_EnableDacToSync>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToSync()
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b0b0      	sub	sp, #192	; 0xc0
 8006468:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 800646a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800646e:	2230      	movs	r2, #48	; 0x30
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f008 ff80 	bl	800f378 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006478:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	609a      	str	r2, [r3, #8]
 8006484:	60da      	str	r2, [r3, #12]
 8006486:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006488:	4b43      	ldr	r3, [pc, #268]	; (8006598 <SM_EnableDacToSync+0x134>)
 800648a:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800648c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006490:	4618      	mov	r0, r3
 8006492:	f003 fcce 	bl	8009e32 <HAL_DAC_Init>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <SM_EnableDacToSync+0x3c>
	{
		Error_Handler();
 800649c:	f001 f9e8 	bl	8007870 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80064a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_SignedFormat = DISABLE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80064ba:	2306      	movs	r3, #6
 80064bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80064d8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80064dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80064e0:	2200      	movs	r2, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f003 fe8e 	bl	800a204 <HAL_DAC_ConfigChannel>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <SM_EnableDacToSync+0x8e>
	{
		Error_Handler();
 80064ee:	f001 f9bf 	bl	8007870 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	__HAL_RCC_DAC2_CLK_ENABLE();
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <SM_EnableDacToSync+0x138>)
 80064f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f6:	4a29      	ldr	r2, [pc, #164]	; (800659c <SM_EnableDacToSync+0x138>)
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064fe:	4b27      	ldr	r3, [pc, #156]	; (800659c <SM_EnableDacToSync+0x138>)
 8006500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <SM_EnableDacToSync+0x138>)
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	4a23      	ldr	r2, [pc, #140]	; (800659c <SM_EnableDacToSync+0x138>)
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006516:	4b21      	ldr	r3, [pc, #132]	; (800659c <SM_EnableDacToSync+0x138>)
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006522:	2340      	movs	r3, #64	; 0x40
 8006524:	67fb      	str	r3, [r7, #124]	; 0x7c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006526:	2303      	movs	r3, #3
 8006528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006532:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006536:	4619      	mov	r1, r3
 8006538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800653c:	f004 fb64 	bl	800ac08 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <SM_EnableDacToSync+0x13c>)
 8006542:	60bb      	str	r3, [r7, #8]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006544:	2329      	movs	r3, #41	; 0x29
 8006546:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006548:	2310      	movs	r3, #16
 800654a:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006550:	2380      	movs	r3, #128	; 0x80
 8006552:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006558:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800655a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800655e:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006560:	2320      	movs	r3, #32
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006564:	2300      	movs	r3, #0
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006568:	f107 0308 	add.w	r3, r7, #8
 800656c:	4618      	mov	r0, r3
 800656e:	f004 f87f 	bl	800a670 <HAL_DMA_Init>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <SM_EnableDacToSync+0x118>
	{
	  Error_Handler();
 8006578:	f001 f97a 	bl	8007870 <Error_Handler>
	}

	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 800657c:	f107 0308 	add.w	r3, r7, #8
 8006580:	673b      	str	r3, [r7, #112]	; 0x70
 8006582:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006586:	633b      	str	r3, [r7, #48]	; 0x30

    GO_ApplyPresetToSync(eDefaultGainPreset);
 8006588:	2007      	movs	r0, #7
 800658a:	f7ff fb5b 	bl	8005c44 <GO_ApplyPresetToSync>
}
 800658e:	bf00      	nop
 8006590:	37c0      	adds	r7, #192	; 0xc0
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	50000c00 	.word	0x50000c00
 800659c:	40021000 	.word	0x40021000
 80065a0:	40020030 	.word	0x40020030

080065a4 <SM_DisableDacToSync>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToSync()
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
    __HAL_RCC_DAC2_CLK_DISABLE();
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <SM_DisableDacToSync+0x20>)
 80065aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ac:	4a05      	ldr	r2, [pc, #20]	; (80065c4 <SM_DisableDacToSync+0x20>)
 80065ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065b2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80065b4:	2140      	movs	r1, #64	; 0x40
 80065b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065ba:	f004 fca7 	bl	800af0c <HAL_GPIO_DeInit>
}
 80065be:	bf00      	nop
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40021000 	.word	0x40021000

080065c8 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80065d8:	4b08      	ldr	r3, [pc, #32]	; (80065fc <SM_GetEncoderValue+0x34>)
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	b29a      	uxth	r2, r3
 80065de:	4b07      	ldr	r3, [pc, #28]	; (80065fc <SM_GetEncoderValue+0x34>)
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	e002      	b.n	80065f0 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80065ea:	4b04      	ldr	r3, [pc, #16]	; (80065fc <SM_GetEncoderValue+0x34>)
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	b29b      	uxth	r3, r3
	}
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40012c00 	.word	0x40012c00

08006600 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <SM_GetOutputInHertz+0x7c>)
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <SM_GetOutputInHertz+0x16>
 800660e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	e007      	b.n	8006626 <SM_GetOutputInHertz+0x26>
 8006616:	4b19      	ldr	r3, [pc, #100]	; (800667c <SM_GetOutputInHertz+0x7c>)
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006622:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006626:	4b15      	ldr	r3, [pc, #84]	; (800667c <SM_GetOutputInHertz+0x7c>)
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <SM_GetOutputInHertz+0x36>
 800662e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	e007      	b.n	8006646 <SM_GetOutputInHertz+0x46>
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <SM_GetOutputInHertz+0x7c>)
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006646:	ed97 7a02 	vldr	s14, [r7, #8]
 800664a:	edd7 7a01 	vldr	s15, [r7, #4]
 800664e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006680 <SM_GetOutputInHertz+0x80>
 8006656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800665a:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 800665e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006662:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006684 <SM_GetOutputInHertz+0x84>
 8006666:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800666a:	eef0 7a66 	vmov.f32	s15, s13
}
 800666e:	eeb0 0a67 	vmov.f32	s0, s15
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40013400 	.word	0x40013400
 8006680:	4d2037a0 	.word	0x4d2037a0
 8006684:	42f00000 	.word	0x42f00000

08006688 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006694:	887b      	ldrh	r3, [r7, #2]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <SM_ConvertPeriodToHertz+0x16>
 800669a:	2301      	movs	r3, #1
 800669c:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800669e:	887b      	ldrh	r3, [r7, #2]
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80066d0 <SM_ConvertPeriodToHertz+0x48>
 80066ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80066be:	eef0 7a66 	vmov.f32	s15, s13
}
 80066c2:	eeb0 0a67 	vmov.f32	s0, s15
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	4d2037a0 	.word	0x4d2037a0

080066d4 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <SM_IsFuncPwmDutyMode+0x14>)
 80066da:	781b      	ldrb	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20001f0e 	.word	0x20001f0e

080066ec <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <SM_ToggleFuncPwmDutyMode+0x1c>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f083 0301 	eor.w	r3, r3, #1
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <SM_ToggleFuncPwmDutyMode+0x1c>)
 80066fc:	701a      	strb	r2, [r3, #0]
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20001f0e 	.word	0x20001f0e

0800670c <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <SM_ResetFuncPwmDutyMode+0x14>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]

}
 8006716:	bf00      	nop
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	20001f0e 	.word	0x20001f0e

08006724 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <VPP_ResetLastEncoderValue+0x14>)
 800672a:	2200      	movs	r2, #0
 800672c:	801a      	strh	r2, [r3, #0]
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20001f10 	.word	0x20001f10

0800673c <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006746:	79fa      	ldrb	r2, [r7, #7]
 8006748:	4613      	mov	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4a10      	ldr	r2, [pc, #64]	; (8006794 <VPP_ApplyProfileToSignal+0x58>)
 8006752:	4413      	add	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006756:	2000      	movs	r0, #0
 8006758:	f7ff fc24 	bl	8005fa4 <SM_GetOutputChannel>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	7a1b      	ldrb	r3, [r3, #8]
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff f9b9 	bl	8005ae0 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	edd3 7a04 	vldr	s15, [r3, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	ed93 7a05 	vldr	s14, [r3, #20]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8b1b      	ldrh	r3, [r3, #24]
 800677e:	4618      	mov	r0, r3
 8006780:	eef0 0a47 	vmov.f32	s1, s14
 8006784:	eeb0 0a67 	vmov.f32	s0, s15
 8006788:	f000 f834 	bl	80067f4 <_ProcessSignalDataTable>


}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	200001f0 	.word	0x200001f0

08006798 <VPP_ApplyProfileToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSync(eAmpSettings_t pPresetEnum)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80067a2:	79fa      	ldrb	r2, [r7, #7]
 80067a4:	4613      	mov	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4a10      	ldr	r2, [pc, #64]	; (80067f0 <VPP_ApplyProfileToSync+0x58>)
 80067ae:	4413      	add	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 80067b2:	2001      	movs	r0, #1
 80067b4:	f7ff fbf6 	bl	8005fa4 <SM_GetOutputChannel>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7a1b      	ldrb	r3, [r3, #8]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fa3d 	bl	8005c44 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8b1b      	ldrh	r3, [r3, #24]
 80067da:	4618      	mov	r0, r3
 80067dc:	eef0 0a47 	vmov.f32	s1, s14
 80067e0:	eeb0 0a67 	vmov.f32	s0, s15
 80067e4:	f000 f88c 	bl	8006900 <_ProcessSyncDataTable>



}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	200001f0 	.word	0x200001f0

080067f4 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80067fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8006802:	4603      	mov	r3, r0
 8006804:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006806:	2000      	movs	r0, #0
 8006808:	f7ff fbcc 	bl	8005fa4 <SM_GetOutputChannel>
 800680c:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b06      	cmp	r3, #6
 8006818:	d06b      	beq.n	80068f2 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800681a:	2300      	movs	r3, #0
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
 800681e:	e00c      	b.n	800683a <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	4933      	ldr	r1, [pc, #204]	; (80068fc <_ProcessSignalDataTable+0x108>)
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	3301      	adds	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	2b77      	cmp	r3, #119	; 0x77
 800683e:	ddef      	ble.n	8006820 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006840:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006844:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	b29b      	uxth	r3, r3
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800685a:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e02e      	b.n	80068c2 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006864:	4a25      	ldr	r2, [pc, #148]	; (80068fc <_ProcessSignalDataTable+0x108>)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686c:	ee07 3a90 	vmov	s15, r3
 8006870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006874:	edd7 7a03 	vldr	s15, [r7, #12]
 8006878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006880:	ee17 1a90 	vmov	r1, s15
 8006884:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <_ProcessSignalDataTable+0x108>)
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <_ProcessSignalDataTable+0x108>)
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006894:	ee07 3a90 	vmov	s15, r3
 8006898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800689c:	edd7 7a08 	vldr	s15, [r7, #32]
 80068a0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80068a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b0:	ee17 1a90 	vmov	r1, s15
 80068b4:	4a11      	ldr	r2, [pc, #68]	; (80068fc <_ProcessSignalDataTable+0x108>)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	3301      	adds	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	2b77      	cmp	r3, #119	; 0x77
 80068c6:	ddcd      	ble.n	8006864 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	e00e      	b.n	80068ec <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80068ce:	2000      	movs	r0, #0
 80068d0:	f7ff fb68 	bl	8005fa4 <SM_GetOutputChannel>
 80068d4:	4601      	mov	r1, r0
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <_ProcessSignalDataTable+0x108>)
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	3302      	adds	r3, #2
 80068e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	3301      	adds	r3, #1
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b77      	cmp	r3, #119	; 0x77
 80068f0:	dded      	ble.n	80068ce <_ProcessSignalDataTable+0xda>
		}
	}

}
 80068f2:	bf00      	nop
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	200023c8 	.word	0x200023c8

08006900 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	ed87 0a03 	vstr	s0, [r7, #12]
 800690a:	edc7 0a02 	vstr	s1, [r7, #8]
 800690e:	4603      	mov	r3, r0
 8006910:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006912:	2001      	movs	r0, #1
 8006914:	f7ff fb46 	bl	8005fa4 <SM_GetOutputChannel>
 8006918:	4603      	mov	r3, r0
 800691a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b06      	cmp	r3, #6
 8006922:	d059      	beq.n	80069d8 <_ProcessSyncDataTable+0xd8>
	{
		// copy refer lookup datat table from SyncChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e00f      	b.n	800694a <_ProcessSyncDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 800692a:	2001      	movs	r0, #1
 800692c:	f7ff fb3a 	bl	8005fa4 <SM_GetOutputChannel>
 8006930:	4603      	mov	r3, r0
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4933      	ldr	r1, [pc, #204]	; (8006a0c <_ProcessSyncDataTable+0x10c>)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	3301      	adds	r3, #1
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b77      	cmp	r3, #119	; 0x77
 800694e:	ddec      	ble.n	800692a <_ProcessSyncDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006950:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006954:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <_ProcessSyncDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	089b      	lsrs	r3, r3, #2
 8006960:	b29b      	uxth	r3, r3
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800696a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e02e      	b.n	80069d2 <_ProcessSyncDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006974:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <_ProcessSyncDataTable+0x10c>)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006984:	edd7 7a03 	vldr	s15, [r7, #12]
 8006988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006990:	ee17 1a90 	vmov	r1, s15
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <_ProcessSyncDataTable+0x10c>)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800699c:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <_ProcessSyncDataTable+0x10c>)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80069b0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80069b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069c0:	ee17 1a90 	vmov	r1, s15
 80069c4:	4a11      	ldr	r2, [pc, #68]	; (8006a0c <_ProcessSyncDataTable+0x10c>)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3301      	adds	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b77      	cmp	r3, #119	; 0x77
 80069d6:	ddcd      	ble.n	8006974 <_ProcessSyncDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	e00e      	b.n	80069fc <_ProcessSyncDataTable+0xfc>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80069de:	2001      	movs	r0, #1
 80069e0:	f7ff fae0 	bl	8005fa4 <SM_GetOutputChannel>
 80069e4:	4601      	mov	r1, r0
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <_ProcessSyncDataTable+0x10c>)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3302      	adds	r3, #2
 80069f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3301      	adds	r3, #1
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b77      	cmp	r3, #119	; 0x77
 8006a00:	dded      	ble.n	80069de <_ProcessSyncDataTable+0xde>
	}
}
 8006a02:	bf00      	nop
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200023c8 	.word	0x200023c8

08006a10 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	f7ff fac2 	bl	8005fa4 <SM_GetOutputChannel>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006a2a:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d90c      	bls.n	8006a4e <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	3301      	adds	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b61      	cmp	r3, #97	; 0x61
 8006a3e:	d901      	bls.n	8006a44 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006a40:	2361      	movs	r3, #97	; 0x61
 8006a42:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fe78 	bl	800673c <VPP_ApplyProfileToSignal>
 8006a4c:	e010      	b.n	8006a70 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d20b      	bcs.n	8006a70 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2b61      	cmp	r3, #97	; 0x61
 8006a62:	d901      	bls.n	8006a68 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fe66 	bl	800673c <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8006a70:	4a03      	ldr	r2, [pc, #12]	; (8006a80 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	8013      	strh	r3, [r2, #0]

}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20001f10 	.word	0x20001f10

08006a84 <VPP_MapEncoderPositionToSyncOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f7ff fa88 	bl	8005fa4 <SM_GetOutputChannel>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006a9e:	4b15      	ldr	r3, [pc, #84]	; (8006af4 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d90c      	bls.n	8006ac2 <VPP_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpAmp++;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b61      	cmp	r3, #97	; 0x61
 8006ab2:	d901      	bls.n	8006ab8 <VPP_MapEncoderPositionToSyncOutput+0x34>
 8006ab4:	2361      	movs	r3, #97	; 0x61
 8006ab6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fe6c 	bl	8006798 <VPP_ApplyProfileToSync>
 8006ac0:	e010      	b.n	8006ae4 <VPP_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d20b      	bcs.n	8006ae4 <VPP_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpAmp--;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b61      	cmp	r3, #97	; 0x61
 8006ad6:	d901      	bls.n	8006adc <VPP_MapEncoderPositionToSyncOutput+0x58>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fe5a 	bl	8006798 <VPP_ApplyProfileToSync>
	}
	amp_last_encoder_value = pEncoderValue;
 8006ae4:	4a03      	ldr	r2, [pc, #12]	; (8006af4 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	8013      	strh	r3, [r2, #0]

}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20001f10 	.word	0x20001f10

08006af8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	; 0x30
 8006afc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006b0a:	1d3b      	adds	r3, r7, #4
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f008 fc31 	bl	800f378 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006b16:	4b32      	ldr	r3, [pc, #200]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006b1e:	4b30      	ldr	r3, [pc, #192]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006b26:	4b2e      	ldr	r3, [pc, #184]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006b2c:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006b32:	4b2b      	ldr	r3, [pc, #172]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006b38:	4b29      	ldr	r3, [pc, #164]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006b3e:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b40:	2204      	movs	r2, #4
 8006b42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006b44:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006b4a:	4b25      	ldr	r3, [pc, #148]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006b50:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b52:	2201      	movs	r2, #1
 8006b54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006b56:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006b5e:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006b64:	4b1e      	ldr	r3, [pc, #120]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006b72:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b78:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006b7a:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006b82:	4817      	ldr	r0, [pc, #92]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b84:	f001 fe98 	bl	80088b8 <HAL_ADC_Init>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006b8e:	f000 fe6f 	bl	8007870 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4810      	ldr	r0, [pc, #64]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006b9e:	f002 fc21 	bl	80093e4 <HAL_ADCEx_MultiModeConfigChannel>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006ba8:	f000 fe62 	bl	8007870 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <MX_ADC1_Init+0xec>)
 8006bae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006bb0:	2306      	movs	r3, #6
 8006bb2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006bb8:	237f      	movs	r3, #127	; 0x7f
 8006bba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006bc4:	1d3b      	adds	r3, r7, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4805      	ldr	r0, [pc, #20]	; (8006be0 <MX_ADC1_Init+0xe8>)
 8006bca:	f002 f835 	bl	8008c38 <HAL_ADC_ConfigChannel>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006bd4:	f000 fe4c 	bl	8007870 <Error_Handler>
  }

}
 8006bd8:	bf00      	nop
 8006bda:	3730      	adds	r7, #48	; 0x30
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	200025a8 	.word	0x200025a8
 8006be4:	0c900008 	.word	0x0c900008

08006be8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c08:	d14f      	bne.n	8006caa <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006c0a:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <HAL_ADC_MspInit+0xcc>)
 8006c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0e:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <HAL_ADC_MspInit+0xcc>)
 8006c10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c16:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <HAL_ADC_MspInit+0xcc>)
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_ADC_MspInit+0xcc>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	4a23      	ldr	r2, [pc, #140]	; (8006cb4 <HAL_ADC_MspInit+0xcc>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c2e:	4b21      	ldr	r3, [pc, #132]	; (8006cb4 <HAL_ADC_MspInit+0xcc>)
 8006c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c46:	f107 0314 	add.w	r3, r7, #20
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c50:	f003 ffda 	bl	800ac08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006c54:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c56:	4a19      	ldr	r2, [pc, #100]	; (8006cbc <HAL_ADC_MspInit+0xd4>)
 8006c58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006c5a:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c5c:	2205      	movs	r2, #5
 8006c5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c60:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006c6c:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c6e:	2280      	movs	r2, #128	; 0x80
 8006c70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006c72:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006c7a:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c84:	2220      	movs	r2, #32
 8006c86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006c8e:	480a      	ldr	r0, [pc, #40]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006c90:	f003 fcee 	bl	800a670 <HAL_DMA_Init>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006c9a:	f000 fde9 	bl	8007870 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a05      	ldr	r2, [pc, #20]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
 8006ca4:	4a04      	ldr	r2, [pc, #16]	; (8006cb8 <HAL_ADC_MspInit+0xd0>)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006caa:	bf00      	nop
 8006cac:	3728      	adds	r7, #40	; 0x28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	20002614 	.word	0x20002614
 8006cbc:	40020008 	.word	0x40020008

08006cc0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006cc6:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <MX_COMP1_Init+0x48>)
 8006cc8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006cca:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006cd2:	4a0e      	ldr	r2, [pc, #56]	; (8006d0c <MX_COMP1_Init+0x4c>)
 8006cd4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006cee:	4805      	ldr	r0, [pc, #20]	; (8006d04 <MX_COMP1_Init+0x44>)
 8006cf0:	f002 fdcc 	bl	800988c <HAL_COMP_Init>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006cfa:	f000 fdb9 	bl	8007870 <Error_Handler>
  }

}
 8006cfe:	bf00      	nop
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20002674 	.word	0x20002674
 8006d08:	40010200 	.word	0x40010200
 8006d0c:	00800030 	.word	0x00800030

08006d10 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d18:	f107 030c 	add.w	r3, r7, #12
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	609a      	str	r2, [r3, #8]
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a0f      	ldr	r2, [pc, #60]	; (8006d6c <HAL_COMP_MspInit+0x5c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d118      	bne.n	8006d64 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d32:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <HAL_COMP_MspInit+0x60>)
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	4a0e      	ldr	r2, [pc, #56]	; (8006d70 <HAL_COMP_MspInit+0x60>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <HAL_COMP_MspInit+0x60>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	60bb      	str	r3, [r7, #8]
 8006d48:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d56:	f107 030c 	add.w	r3, r7, #12
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d60:	f003 ff52 	bl	800ac08 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006d64:	bf00      	nop
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40010200 	.word	0x40010200
 8006d70:	40021000 	.word	0x40021000

08006d74 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac2;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08c      	sub	sp, #48	; 0x30
 8006d78:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	2230      	movs	r2, #48	; 0x30
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f008 faf9 	bl	800f378 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006d86:	4b16      	ldr	r3, [pc, #88]	; (8006de0 <MX_DAC1_Init+0x6c>)
 8006d88:	4a16      	ldr	r2, [pc, #88]	; (8006de4 <MX_DAC1_Init+0x70>)
 8006d8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006d8c:	4814      	ldr	r0, [pc, #80]	; (8006de0 <MX_DAC1_Init+0x6c>)
 8006d8e:	f003 f850 	bl	8009e32 <HAL_DAC_Init>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006d98:	f000 fd6a 	bl	8007870 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	2210      	movs	r2, #16
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4806      	ldr	r0, [pc, #24]	; (8006de0 <MX_DAC1_Init+0x6c>)
 8006dc8:	f003 fa1c 	bl	800a204 <HAL_DAC_ConfigChannel>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8006dd2:	f000 fd4d 	bl	8007870 <Error_Handler>
  }

}
 8006dd6:	bf00      	nop
 8006dd8:	3730      	adds	r7, #48	; 0x30
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200026ac 	.word	0x200026ac
 8006de4:	50000800 	.word	0x50000800

08006de8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08c      	sub	sp, #48	; 0x30
 8006dec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006dee:	463b      	mov	r3, r7
 8006df0:	2230      	movs	r2, #48	; 0x30
 8006df2:	2100      	movs	r1, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f008 fabf 	bl	800f378 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006dfa:	4b16      	ldr	r3, [pc, #88]	; (8006e54 <MX_DAC2_Init+0x6c>)
 8006dfc:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <MX_DAC2_Init+0x70>)
 8006dfe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006e00:	4814      	ldr	r0, [pc, #80]	; (8006e54 <MX_DAC2_Init+0x6c>)
 8006e02:	f003 f816 	bl	8009e32 <HAL_DAC_Init>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006e0c:	f000 fd30 	bl	8007870 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006e10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e14:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006e22:	2306      	movs	r3, #6
 8006e24:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006e36:	463b      	mov	r3, r7
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4805      	ldr	r0, [pc, #20]	; (8006e54 <MX_DAC2_Init+0x6c>)
 8006e3e:	f003 f9e1 	bl	800a204 <HAL_DAC_ConfigChannel>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006e48:	f000 fd12 	bl	8007870 <Error_Handler>
  }

}
 8006e4c:	bf00      	nop
 8006e4e:	3730      	adds	r7, #48	; 0x30
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20002698 	.word	0x20002698
 8006e58:	50000c00 	.word	0x50000c00

08006e5c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08c      	sub	sp, #48	; 0x30
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e64:	f107 031c 	add.w	r3, r7, #28
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	605a      	str	r2, [r3, #4]
 8006e6e:	609a      	str	r2, [r3, #8]
 8006e70:	60da      	str	r2, [r3, #12]
 8006e72:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a40      	ldr	r2, [pc, #256]	; (8006f7c <HAL_DAC_MspInit+0x120>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d125      	bne.n	8006eca <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006e7e:	4b40      	ldr	r3, [pc, #256]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	4a3f      	ldr	r2, [pc, #252]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e8a:	4b3d      	ldr	r3, [pc, #244]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e96:	4b3a      	ldr	r3, [pc, #232]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9a:	4a39      	ldr	r2, [pc, #228]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ea2:	4b37      	ldr	r3, [pc, #220]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006eae:	2320      	movs	r3, #32
 8006eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eba:	f107 031c 	add.w	r3, r7, #28
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ec4:	f003 fea0 	bl	800ac08 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006ec8:	e054      	b.n	8006f74 <HAL_DAC_MspInit+0x118>
  else if(dacHandle->Instance==DAC2)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2d      	ldr	r2, [pc, #180]	; (8006f84 <HAL_DAC_MspInit+0x128>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d14f      	bne.n	8006f74 <HAL_DAC_MspInit+0x118>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006ed4:	4b2a      	ldr	r3, [pc, #168]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed8:	4a29      	ldr	r2, [pc, #164]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ee0:	4b27      	ldr	r3, [pc, #156]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eec:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef0:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ef8:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <HAL_DAC_MspInit+0x124>)
 8006efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f10:	f107 031c 	add.w	r3, r7, #28
 8006f14:	4619      	mov	r1, r3
 8006f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f1a:	f003 fe75 	bl	800ac08 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006f1e:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f20:	4a1a      	ldr	r2, [pc, #104]	; (8006f8c <HAL_DAC_MspInit+0x130>)
 8006f22:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006f24:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f26:	2229      	movs	r2, #41	; 0x29
 8006f28:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f2a:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f30:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006f36:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f38:	2280      	movs	r2, #128	; 0x80
 8006f3a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f42:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f44:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f4a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f4e:	2220      	movs	r2, #32
 8006f50:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006f58:	480b      	ldr	r0, [pc, #44]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f5a:	f003 fb89 	bl	800a670 <HAL_DMA_Init>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_DAC_MspInit+0x10c>
      Error_Handler();
 8006f64:	f000 fc84 	bl	8007870 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a07      	ldr	r2, [pc, #28]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f6c:	609a      	str	r2, [r3, #8]
 8006f6e:	4a06      	ldr	r2, [pc, #24]	; (8006f88 <HAL_DAC_MspInit+0x12c>)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006f74:	bf00      	nop
 8006f76:	3730      	adds	r7, #48	; 0x30
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	50000800 	.word	0x50000800
 8006f80:	40021000 	.word	0x40021000
 8006f84:	50000c00 	.word	0x50000c00
 8006f88:	200026c0 	.word	0x200026c0
 8006f8c:	40020030 	.word	0x40020030

08006f90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006f96:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <MX_DMA_Init+0x60>)
 8006f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <MX_DMA_Init+0x60>)
 8006f9c:	f043 0304 	orr.w	r3, r3, #4
 8006fa0:	6493      	str	r3, [r2, #72]	; 0x48
 8006fa2:	4b13      	ldr	r3, [pc, #76]	; (8006ff0 <MX_DMA_Init+0x60>)
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	607b      	str	r3, [r7, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006fae:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <MX_DMA_Init+0x60>)
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <MX_DMA_Init+0x60>)
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	6493      	str	r3, [r2, #72]	; 0x48
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <MX_DMA_Init+0x60>)
 8006fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2101      	movs	r1, #1
 8006fca:	200b      	movs	r0, #11
 8006fcc:	f002 feef 	bl	8009dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006fd0:	200b      	movs	r0, #11
 8006fd2:	f002 ff06 	bl	8009de2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	200d      	movs	r0, #13
 8006fdc:	f002 fee7 	bl	8009dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006fe0:	200d      	movs	r0, #13
 8006fe2:	f002 fefe 	bl	8009de2 <HAL_NVIC_EnableIRQ>

}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	40021000 	.word	0x40021000

08006ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <__NVIC_GetPriorityGrouping+0x18>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	f003 0307 	and.w	r3, r3, #7
}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800701a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800701e:	2b00      	cmp	r3, #0
 8007020:	db0b      	blt.n	800703a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	f003 021f 	and.w	r2, r3, #31
 8007028:	4907      	ldr	r1, [pc, #28]	; (8007048 <__NVIC_EnableIRQ+0x38>)
 800702a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	2001      	movs	r0, #1
 8007032:	fa00 f202 	lsl.w	r2, r0, r2
 8007036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000e100 	.word	0xe000e100

0800704c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705c:	2b00      	cmp	r3, #0
 800705e:	db0a      	blt.n	8007076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	490c      	ldr	r1, [pc, #48]	; (8007098 <__NVIC_SetPriority+0x4c>)
 8007066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706a:	0112      	lsls	r2, r2, #4
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	440b      	add	r3, r1
 8007070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007074:	e00a      	b.n	800708c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	4908      	ldr	r1, [pc, #32]	; (800709c <__NVIC_SetPriority+0x50>)
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	3b04      	subs	r3, #4
 8007084:	0112      	lsls	r2, r2, #4
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	440b      	add	r3, r1
 800708a:	761a      	strb	r2, [r3, #24]
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	e000e100 	.word	0xe000e100
 800709c:	e000ed00 	.word	0xe000ed00

080070a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b089      	sub	sp, #36	; 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f1c3 0307 	rsb	r3, r3, #7
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	bf28      	it	cs
 80070be:	2304      	movcs	r3, #4
 80070c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	3304      	adds	r3, #4
 80070c6:	2b06      	cmp	r3, #6
 80070c8:	d902      	bls.n	80070d0 <NVIC_EncodePriority+0x30>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3b03      	subs	r3, #3
 80070ce:	e000      	b.n	80070d2 <NVIC_EncodePriority+0x32>
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43da      	mvns	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	401a      	ands	r2, r3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	43d9      	mvns	r1, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070f8:	4313      	orrs	r3, r2
         );
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3724      	adds	r7, #36	; 0x24
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007112:	4a14      	ldr	r2, [pc, #80]	; (8007164 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	3302      	adds	r3, #2
 800711c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	0c1b      	lsrs	r3, r3, #16
 8007124:	43db      	mvns	r3, r3
 8007126:	ea02 0103 	and.w	r1, r2, r3
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	fa93 f3a3 	rbit	r3, r3
 8007136:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	fab3 f383 	clz	r3, r3
 800713e:	b2db      	uxtb	r3, r3
 8007140:	f003 031f 	and.w	r3, r3, #31
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	409a      	lsls	r2, r3
 8007148:	4806      	ldr	r0, [pc, #24]	; (8007164 <LL_SYSCFG_SetEXTISource+0x5c>)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	430a      	orrs	r2, r1
 8007152:	3302      	adds	r3, #2
 8007154:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	40010000 	.word	0x40010000

08007168 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007168:	b480      	push	{r7}
 800716a:	b089      	sub	sp, #36	; 0x24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	fa93 f3a3 	rbit	r3, r3
 8007182:	613b      	str	r3, [r7, #16]
  return result;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	fab3 f383 	clz	r3, r3
 800718a:	b2db      	uxtb	r3, r3
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	2103      	movs	r1, #3
 8007190:	fa01 f303 	lsl.w	r3, r1, r3
 8007194:	43db      	mvns	r3, r3
 8007196:	401a      	ands	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	fa93 f3a3 	rbit	r3, r3
 80071a2:	61bb      	str	r3, [r7, #24]
  return result;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	fab3 f383 	clz	r3, r3
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	fa01 f303 	lsl.w	r3, r1, r3
 80071b4:	431a      	orrs	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	601a      	str	r2, [r3, #0]
}
 80071ba:	bf00      	nop
 80071bc:	3724      	adds	r7, #36	; 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b089      	sub	sp, #36	; 0x24
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	fa93 f3a3 	rbit	r3, r3
 80071e0:	613b      	str	r3, [r7, #16]
  return result;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	fab3 f383 	clz	r3, r3
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	2103      	movs	r1, #3
 80071ee:	fa01 f303 	lsl.w	r3, r1, r3
 80071f2:	43db      	mvns	r3, r3
 80071f4:	401a      	ands	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	fa93 f3a3 	rbit	r3, r3
 8007200:	61bb      	str	r3, [r7, #24]
  return result;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	fab3 f383 	clz	r3, r3
 8007208:	b2db      	uxtb	r3, r3
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	fa01 f303 	lsl.w	r3, r1, r3
 8007212:	431a      	orrs	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	60da      	str	r2, [r3, #12]
}
 8007218:	bf00      	nop
 800721a:	3724      	adds	r7, #36	; 0x24
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007248:	4b08      	ldr	r3, [pc, #32]	; (800726c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800724a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800724c:	4907      	ldr	r1, [pc, #28]	; (800726c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4313      	orrs	r3, r2
 8007252:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4013      	ands	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800725e:	68fb      	ldr	r3, [r7, #12]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40021000 	.word	0x40021000

08007270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	; 0x28
 8007274:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007276:	f107 031c 	add.w	r3, r7, #28
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	605a      	str	r2, [r3, #4]
 8007280:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	609a      	str	r2, [r3, #8]
 800728c:	60da      	str	r2, [r3, #12]
 800728e:	611a      	str	r2, [r3, #16]
 8007290:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007292:	2004      	movs	r0, #4
 8007294:	f7ff ffd4 	bl	8007240 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007298:	2020      	movs	r0, #32
 800729a:	f7ff ffd1 	bl	8007240 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800729e:	2001      	movs	r0, #1
 80072a0:	f7ff ffce 	bl	8007240 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80072a4:	2002      	movs	r0, #2
 80072a6:	f7ff ffcb 	bl	8007240 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80072aa:	2108      	movs	r1, #8
 80072ac:	48d3      	ldr	r0, [pc, #844]	; (80075fc <MX_GPIO_Init+0x38c>)
 80072ae:	f7ff ffb9 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80072b2:	2108      	movs	r1, #8
 80072b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072b8:	f7ff ffb4 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80072bc:	2110      	movs	r1, #16
 80072be:	48cf      	ldr	r0, [pc, #828]	; (80075fc <MX_GPIO_Init+0x38c>)
 80072c0:	f7ff ffb0 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80072c4:	2120      	movs	r1, #32
 80072c6:	48cd      	ldr	r0, [pc, #820]	; (80075fc <MX_GPIO_Init+0x38c>)
 80072c8:	f7ff ffac 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80072cc:	2101      	movs	r1, #1
 80072ce:	48cc      	ldr	r0, [pc, #816]	; (8007600 <MX_GPIO_Init+0x390>)
 80072d0:	f7ff ffa8 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80072d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072d8:	48c8      	ldr	r0, [pc, #800]	; (80075fc <MX_GPIO_Init+0x38c>)
 80072da:	f7ff ffa3 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80072de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072e2:	48c6      	ldr	r0, [pc, #792]	; (80075fc <MX_GPIO_Init+0x38c>)
 80072e4:	f7ff ff9e 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80072e8:	2140      	movs	r1, #64	; 0x40
 80072ea:	48c5      	ldr	r0, [pc, #788]	; (8007600 <MX_GPIO_Init+0x390>)
 80072ec:	f7ff ff9a 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80072f0:	2180      	movs	r1, #128	; 0x80
 80072f2:	48c3      	ldr	r0, [pc, #780]	; (8007600 <MX_GPIO_Init+0x390>)
 80072f4:	f7ff ff96 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80072f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072fc:	48c0      	ldr	r0, [pc, #768]	; (8007600 <MX_GPIO_Init+0x390>)
 80072fe:	f7ff ff91 	bl	8007224 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007302:	49c0      	ldr	r1, [pc, #768]	; (8007604 <MX_GPIO_Init+0x394>)
 8007304:	2002      	movs	r0, #2
 8007306:	f7ff feff 	bl	8007108 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800730a:	49bf      	ldr	r1, [pc, #764]	; (8007608 <MX_GPIO_Init+0x398>)
 800730c:	2002      	movs	r0, #2
 800730e:	f7ff fefb 	bl	8007108 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007312:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007316:	2005      	movs	r0, #5
 8007318:	f7ff fef6 	bl	8007108 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 800731c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007320:	2005      	movs	r0, #5
 8007322:	f7ff fef1 	bl	8007108 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007326:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800732a:	2002      	movs	r0, #2
 800732c:	f7ff feec 	bl	8007108 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007334:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800733c:	2300      	movs	r3, #0
 800733e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007342:	2302      	movs	r3, #2
 8007344:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007348:	f107 031c 	add.w	r3, r7, #28
 800734c:	4618      	mov	r0, r3
 800734e:	f006 fd31 	bl	800ddb4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007356:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007364:	2302      	movs	r3, #2
 8007366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800736a:	f107 031c 	add.w	r3, r7, #28
 800736e:	4618      	mov	r0, r3
 8007370:	f006 fd20 	bl	800ddb4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007374:	2301      	movs	r3, #1
 8007376:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800737e:	2300      	movs	r3, #0
 8007380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007384:	2302      	movs	r3, #2
 8007386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800738a:	f107 031c 	add.w	r3, r7, #28
 800738e:	4618      	mov	r0, r3
 8007390:	f006 fd10 	bl	800ddb4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007394:	2302      	movs	r3, #2
 8007396:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800739e:	2300      	movs	r3, #0
 80073a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80073a4:	2302      	movs	r3, #2
 80073a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80073aa:	f107 031c 	add.w	r3, r7, #28
 80073ae:	4618      	mov	r0, r3
 80073b0:	f006 fd00 	bl	800ddb4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80073b4:	2304      	movs	r3, #4
 80073b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80073c4:	2302      	movs	r3, #2
 80073c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80073ca:	f107 031c 	add.w	r3, r7, #28
 80073ce:	4618      	mov	r0, r3
 80073d0:	f006 fcf0 	bl	800ddb4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80073d4:	2201      	movs	r2, #1
 80073d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073da:	4888      	ldr	r0, [pc, #544]	; (80075fc <MX_GPIO_Init+0x38c>)
 80073dc:	f7ff fef3 	bl	80071c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80073e0:	2201      	movs	r2, #1
 80073e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073e6:	4885      	ldr	r0, [pc, #532]	; (80075fc <MX_GPIO_Init+0x38c>)
 80073e8:	f7ff feed 	bl	80071c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80073ec:	2201      	movs	r2, #1
 80073ee:	2101      	movs	r1, #1
 80073f0:	4886      	ldr	r0, [pc, #536]	; (800760c <MX_GPIO_Init+0x39c>)
 80073f2:	f7ff fee8 	bl	80071c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80073f6:	2201      	movs	r2, #1
 80073f8:	2102      	movs	r1, #2
 80073fa:	4884      	ldr	r0, [pc, #528]	; (800760c <MX_GPIO_Init+0x39c>)
 80073fc:	f7ff fee3 	bl	80071c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8007400:	2201      	movs	r2, #1
 8007402:	2104      	movs	r1, #4
 8007404:	487d      	ldr	r0, [pc, #500]	; (80075fc <MX_GPIO_Init+0x38c>)
 8007406:	f7ff fede 	bl	80071c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800740a:	2200      	movs	r2, #0
 800740c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007410:	487a      	ldr	r0, [pc, #488]	; (80075fc <MX_GPIO_Init+0x38c>)
 8007412:	f7ff fea9 	bl	8007168 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007416:	2200      	movs	r2, #0
 8007418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800741c:	4877      	ldr	r0, [pc, #476]	; (80075fc <MX_GPIO_Init+0x38c>)
 800741e:	f7ff fea3 	bl	8007168 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007422:	2200      	movs	r2, #0
 8007424:	2101      	movs	r1, #1
 8007426:	4879      	ldr	r0, [pc, #484]	; (800760c <MX_GPIO_Init+0x39c>)
 8007428:	f7ff fe9e 	bl	8007168 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 800742c:	2200      	movs	r2, #0
 800742e:	2102      	movs	r1, #2
 8007430:	4876      	ldr	r0, [pc, #472]	; (800760c <MX_GPIO_Init+0x39c>)
 8007432:	f7ff fe99 	bl	8007168 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8007436:	2200      	movs	r2, #0
 8007438:	2104      	movs	r1, #4
 800743a:	4870      	ldr	r0, [pc, #448]	; (80075fc <MX_GPIO_Init+0x38c>)
 800743c:	f7ff fe94 	bl	8007168 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007440:	2308      	movs	r3, #8
 8007442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007444:	2301      	movs	r3, #1
 8007446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007450:	2302      	movs	r3, #2
 8007452:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007454:	1d3b      	adds	r3, r7, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4868      	ldr	r0, [pc, #416]	; (80075fc <MX_GPIO_Init+0x38c>)
 800745a:	f006 fe9e 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800745e:	2308      	movs	r3, #8
 8007460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007462:	2301      	movs	r3, #1
 8007464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	4619      	mov	r1, r3
 8007476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800747a:	f006 fe8e 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800747e:	2310      	movs	r3, #16
 8007480:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007482:	2301      	movs	r3, #1
 8007484:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8007492:	1d3b      	adds	r3, r7, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4859      	ldr	r0, [pc, #356]	; (80075fc <MX_GPIO_Init+0x38c>)
 8007498:	f006 fe7f 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 800749c:	2320      	movs	r3, #32
 800749e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074a0:	2301      	movs	r3, #1
 80074a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80074b0:	1d3b      	adds	r3, r7, #4
 80074b2:	4619      	mov	r1, r3
 80074b4:	4851      	ldr	r0, [pc, #324]	; (80075fc <MX_GPIO_Init+0x38c>)
 80074b6:	f006 fe70 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80074ba:	2301      	movs	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074be:	2301      	movs	r3, #1
 80074c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	484b      	ldr	r0, [pc, #300]	; (8007600 <MX_GPIO_Init+0x390>)
 80074d4:	f006 fe61 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80074d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074de:	2301      	movs	r3, #1
 80074e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4842      	ldr	r0, [pc, #264]	; (80075fc <MX_GPIO_Init+0x38c>)
 80074f4:	f006 fe51 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80074f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074fe:	2301      	movs	r3, #1
 8007500:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800750a:	2300      	movs	r3, #0
 800750c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800750e:	1d3b      	adds	r3, r7, #4
 8007510:	4619      	mov	r1, r3
 8007512:	483a      	ldr	r0, [pc, #232]	; (80075fc <MX_GPIO_Init+0x38c>)
 8007514:	f006 fe41 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800751c:	2301      	movs	r3, #1
 800751e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007520:	2303      	movs	r3, #3
 8007522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007528:	2300      	movs	r3, #0
 800752a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800752c:	1d3b      	adds	r3, r7, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4833      	ldr	r0, [pc, #204]	; (8007600 <MX_GPIO_Init+0x390>)
 8007532:	f006 fe32 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007536:	2380      	movs	r3, #128	; 0x80
 8007538:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800753a:	2301      	movs	r3, #1
 800753c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800753e:	2303      	movs	r3, #3
 8007540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007542:	2300      	movs	r3, #0
 8007544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007546:	2300      	movs	r3, #0
 8007548:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800754a:	1d3b      	adds	r3, r7, #4
 800754c:	4619      	mov	r1, r3
 800754e:	482c      	ldr	r0, [pc, #176]	; (8007600 <MX_GPIO_Init+0x390>)
 8007550:	f006 fe23 	bl	800e19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800755a:	2301      	movs	r3, #1
 800755c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800755e:	2303      	movs	r3, #3
 8007560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800756a:	1d3b      	adds	r3, r7, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4824      	ldr	r0, [pc, #144]	; (8007600 <MX_GPIO_Init+0x390>)
 8007570:	f006 fe13 	bl	800e19a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007574:	f7ff fd3e 	bl	8006ff4 <__NVIC_GetPriorityGrouping>
 8007578:	4603      	mov	r3, r0
 800757a:	2200      	movs	r2, #0
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fd8e 	bl	80070a0 <NVIC_EncodePriority>
 8007584:	4603      	mov	r3, r0
 8007586:	4619      	mov	r1, r3
 8007588:	2006      	movs	r0, #6
 800758a:	f7ff fd5f 	bl	800704c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800758e:	2006      	movs	r0, #6
 8007590:	f7ff fd3e 	bl	8007010 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007594:	f7ff fd2e 	bl	8006ff4 <__NVIC_GetPriorityGrouping>
 8007598:	4603      	mov	r3, r0
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fd7e 	bl	80070a0 <NVIC_EncodePriority>
 80075a4:	4603      	mov	r3, r0
 80075a6:	4619      	mov	r1, r3
 80075a8:	2007      	movs	r0, #7
 80075aa:	f7ff fd4f 	bl	800704c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80075ae:	2007      	movs	r0, #7
 80075b0:	f7ff fd2e 	bl	8007010 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80075b4:	f7ff fd1e 	bl	8006ff4 <__NVIC_GetPriorityGrouping>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2200      	movs	r2, #0
 80075bc:	2100      	movs	r1, #0
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff fd6e 	bl	80070a0 <NVIC_EncodePriority>
 80075c4:	4603      	mov	r3, r0
 80075c6:	4619      	mov	r1, r3
 80075c8:	2008      	movs	r0, #8
 80075ca:	f7ff fd3f 	bl	800704c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80075ce:	2008      	movs	r0, #8
 80075d0:	f7ff fd1e 	bl	8007010 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80075d4:	f7ff fd0e 	bl	8006ff4 <__NVIC_GetPriorityGrouping>
 80075d8:	4603      	mov	r3, r0
 80075da:	2200      	movs	r2, #0
 80075dc:	2100      	movs	r1, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fd5e 	bl	80070a0 <NVIC_EncodePriority>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4619      	mov	r1, r3
 80075e8:	2028      	movs	r0, #40	; 0x28
 80075ea:	f7ff fd2f 	bl	800704c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80075ee:	2028      	movs	r0, #40	; 0x28
 80075f0:	f7ff fd0e 	bl	8007010 <__NVIC_EnableIRQ>

}
 80075f4:	bf00      	nop
 80075f6:	3728      	adds	r7, #40	; 0x28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	e009      	b.n	8007610 <MX_GPIO_Init+0x3a0>
 80075fc:	48000800 	.word	0x48000800
 8007600:	48000400 	.word	0x48000400
 8007604:	0f000003 	.word	0x0f000003
 8007608:	f0000003 	.word	0xf0000003
 800760c:	48001400 	.word	0x48001400
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800761c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007620:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d013      	beq.n	8007654 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800762c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007630:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007634:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800763c:	e000      	b.n	8007640 <ITM_SendChar+0x2c>
    {
      __NOP();
 800763e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007640:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f9      	beq.n	800763e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800764a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007654:	687b      	ldr	r3, [r7, #4]
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
  int i=0;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e009      	b.n	800768c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	60ba      	str	r2, [r7, #8]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff ffc7 	bl	8007614 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	3301      	adds	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	dbf1      	blt.n	8007678 <_write+0x16>
  return len;
 8007694:	687b      	ldr	r3, [r7, #4]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80076a4:	f000 feb3 	bl	800840e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80076a8:	f000 f874 	bl	8007794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80076ac:	f7ff fde0 	bl	8007270 <MX_GPIO_Init>
  MX_DMA_Init();
 80076b0:	f7ff fc6e 	bl	8006f90 <MX_DMA_Init>
  MX_DAC1_Init();
 80076b4:	f7ff fb5e 	bl	8006d74 <MX_DAC1_Init>
  MX_ADC1_Init();
 80076b8:	f7ff fa1e 	bl	8006af8 <MX_ADC1_Init>
  MX_COMP1_Init();
 80076bc:	f7ff fb00 	bl	8006cc0 <MX_COMP1_Init>
  MX_TIM2_Init();
 80076c0:	f000 fbaa 	bl	8007e18 <MX_TIM2_Init>
  MX_SPI3_Init();
 80076c4:	f000 f912 	bl	80078ec <MX_SPI3_Init>
  MX_RNG_Init();
 80076c8:	f000 f902 	bl	80078d0 <MX_RNG_Init>
  MX_TIM1_Init();
 80076cc:	f000 fb34 	bl	8007d38 <MX_TIM1_Init>
  MX_TIM8_Init();
 80076d0:	f000 fc8a 	bl	8007fe8 <MX_TIM8_Init>
  MX_TIM16_Init();
 80076d4:	f000 fd42 	bl	800815c <MX_TIM16_Init>
  MX_TIM15_Init();
 80076d8:	f000 fcee 	bl	80080b8 <MX_TIM15_Init>
  MX_TIM5_Init();
 80076dc:	f000 fc36 	bl	8007f4c <MX_TIM5_Init>
  MX_TIM3_Init();
 80076e0:	f000 fbe6 	bl	8007eb0 <MX_TIM3_Init>
  MX_DAC2_Init();
 80076e4:	f7ff fb80 	bl	8006de8 <MX_DAC2_Init>

//  SM_EnablePwmToSignal();


//  SM_DisablePwmToSignal();
  SM_EnableDacToSignal();
 80076e8:	f7fe fd42 	bl	8006170 <SM_EnableDacToSignal>



  DT_InitRegister();
 80076ec:	f7fd fdbc 	bl	8005268 <DT_InitRegister>

  // main signal function output (external)
  SM_Init();
 80076f0:	f7fe fb5a 	bl	8005da8 <SM_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 80076f4:	2000      	movs	r0, #0
 80076f6:	f7fe f865 	bl	80057c4 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7fe f93a 	bl	8005974 <FuncO_ApplyPresetToSync>

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8007700:	2110      	movs	r1, #16
 8007702:	481f      	ldr	r0, [pc, #124]	; (8007780 <main+0xe0>)
 8007704:	f002 fbb7 	bl	8009e76 <HAL_DAC_Start>

  // send trigger input out to dac
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8007708:	4b1e      	ldr	r3, [pc, #120]	; (8007784 <main+0xe4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <main+0xe4>)
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8007714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007718:	f7fd ff50 	bl	80055bc <FreqO_ApplyPreset>



  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 800771c:	2201      	movs	r2, #1
 800771e:	2108      	movs	r1, #8
 8007720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007724:	f003 fcd4 	bl	800b0d0 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8007728:	2059      	movs	r0, #89	; 0x59
 800772a:	f7ff f807 	bl	800673c <VPP_ApplyProfileToSignal>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800772e:	2200      	movs	r2, #0
 8007730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007734:	4814      	ldr	r0, [pc, #80]	; (8007788 <main+0xe8>)
 8007736:	f003 fccb 	bl	800b0d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800773a:	2200      	movs	r2, #0
 800773c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007740:	4811      	ldr	r0, [pc, #68]	; (8007788 <main+0xe8>)
 8007742:	f003 fcc5 	bl	800b0d0 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007746:	4811      	ldr	r0, [pc, #68]	; (800778c <main+0xec>)
 8007748:	f004 fdbc 	bl	800c2c4 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800774c:	4b10      	ldr	r3, [pc, #64]	; (8007790 <main+0xf0>)
 800774e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007752:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <main+0xf0>)
 8007756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800775a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800775c:	f7f9 fae2 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8007760:	f7f9 faee 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007764:	f7fd fb94 	bl	8004e90 <IM_Init>

  // switch output signal from PWM to DAC
//  SM_DisablePwmToSignal();
//  SM_EnableDacToSignal();

  SM_DisableDacToSync();
 8007768:	f7fe ff1c 	bl	80065a4 <SM_DisableDacToSync>
  SM_EnablePwmToSync();
 800776c:	f7fe fdba 	bl	80062e4 <SM_EnablePwmToSync>

  SM_DisableDacToSync();
 8007770:	f7fe ff18 	bl	80065a4 <SM_DisableDacToSync>
  SM_EnableDacToSync();
 8007774:	f7fe fe76 	bl	8006464 <SM_EnableDacToSync>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007778:	f7fc fac0 	bl	8003cfc <EM_ProcessEvent>
 800777c:	e7fc      	b.n	8007778 <main+0xd8>
 800777e:	bf00      	nop
 8007780:	200026ac 	.word	0x200026ac
 8007784:	40013400 	.word	0x40013400
 8007788:	48000800 	.word	0x48000800
 800778c:	20002868 	.word	0x20002868
 8007790:	40001000 	.word	0x40001000

08007794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b0a8      	sub	sp, #160	; 0xa0
 8007798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800779a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800779e:	2238      	movs	r2, #56	; 0x38
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f007 fde8 	bl	800f378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80077a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80077b8:	463b      	mov	r3, r7
 80077ba:	2254      	movs	r2, #84	; 0x54
 80077bc:	2100      	movs	r1, #0
 80077be:	4618      	mov	r0, r3
 80077c0:	f007 fdda 	bl	800f378 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80077c4:	2000      	movs	r0, #0
 80077c6:	f003 fc9b 	bl	800b100 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80077ca:	2322      	movs	r3, #34	; 0x22
 80077cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80077ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077d2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80077d4:	2340      	movs	r3, #64	; 0x40
 80077d6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80077d8:	2301      	movs	r3, #1
 80077da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80077de:	2302      	movs	r3, #2
 80077e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80077e4:	2302      	movs	r3, #2
 80077e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80077ea:	2302      	movs	r3, #2
 80077ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80077f0:	232a      	movs	r3, #42	; 0x2a
 80077f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 80077f6:	231e      	movs	r3, #30
 80077f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80077fc:	2304      	movs	r3, #4
 80077fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007802:	2302      	movs	r3, #2
 8007804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007808:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800780c:	4618      	mov	r0, r3
 800780e:	f003 fd1b 	bl	800b248 <HAL_RCC_OscConfig>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007818:	f000 f82a 	bl	8007870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800781c:	230f      	movs	r3, #15
 800781e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007820:	2303      	movs	r3, #3
 8007822:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007824:	2300      	movs	r3, #0
 8007826:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007828:	2300      	movs	r3, #0
 800782a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800782c:	2300      	movs	r3, #0
 800782e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007830:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007834:	2108      	movs	r1, #8
 8007836:	4618      	mov	r0, r3
 8007838:	f004 f81e 	bl	800b878 <HAL_RCC_ClockConfig>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007842:	f000 f815 	bl	8007870 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007846:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800784a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800784c:	2300      	movs	r3, #0
 800784e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007854:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007856:	463b      	mov	r3, r7
 8007858:	4618      	mov	r0, r3
 800785a:	f004 f9fd 	bl	800bc58 <HAL_RCCEx_PeriphCLKConfig>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007864:	f000 f804 	bl	8007870 <Error_Handler>
  }
}
 8007868:	bf00      	nop
 800786a:	37a0      	adds	r7, #160	; 0xa0
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007874:	bf00      	nop
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f043 0204 	orr.w	r2, r3, #4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	601a      	str	r2, [r3, #0]
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <LL_AHB2_GRP1_EnableClock>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80078a8:	4b08      	ldr	r3, [pc, #32]	; (80078cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80078aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078ac:	4907      	ldr	r1, [pc, #28]	; (80078cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80078b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4013      	ands	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80078be:	68fb      	ldr	r3, [r7, #12]
}
 80078c0:	bf00      	nop
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	40021000 	.word	0x40021000

080078d0 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80078d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80078d8:	f7ff ffe2 	bl	80078a0 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80078dc:	4802      	ldr	r0, [pc, #8]	; (80078e8 <MX_RNG_Init+0x18>)
 80078de:	f7ff ffce 	bl	800787e <LL_RNG_Enable>

}
 80078e2:	bf00      	nop
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	50060800 	.word	0x50060800

080078ec <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80078f0:	4b1b      	ldr	r3, [pc, #108]	; (8007960 <MX_SPI3_Init+0x74>)
 80078f2:	4a1c      	ldr	r2, [pc, #112]	; (8007964 <MX_SPI3_Init+0x78>)
 80078f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <MX_SPI3_Init+0x74>)
 80078f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80078fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80078fe:	4b18      	ldr	r3, [pc, #96]	; (8007960 <MX_SPI3_Init+0x74>)
 8007900:	2200      	movs	r2, #0
 8007902:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007904:	4b16      	ldr	r3, [pc, #88]	; (8007960 <MX_SPI3_Init+0x74>)
 8007906:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800790a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800790c:	4b14      	ldr	r3, [pc, #80]	; (8007960 <MX_SPI3_Init+0x74>)
 800790e:	2200      	movs	r2, #0
 8007910:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007912:	4b13      	ldr	r3, [pc, #76]	; (8007960 <MX_SPI3_Init+0x74>)
 8007914:	2200      	movs	r2, #0
 8007916:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007918:	4b11      	ldr	r3, [pc, #68]	; (8007960 <MX_SPI3_Init+0x74>)
 800791a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800791e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <MX_SPI3_Init+0x74>)
 8007922:	2210      	movs	r2, #16
 8007924:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007926:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <MX_SPI3_Init+0x74>)
 8007928:	2200      	movs	r2, #0
 800792a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800792c:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <MX_SPI3_Init+0x74>)
 800792e:	2200      	movs	r2, #0
 8007930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <MX_SPI3_Init+0x74>)
 8007934:	2200      	movs	r2, #0
 8007936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007938:	4b09      	ldr	r3, [pc, #36]	; (8007960 <MX_SPI3_Init+0x74>)
 800793a:	2207      	movs	r2, #7
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800793e:	4b08      	ldr	r3, [pc, #32]	; (8007960 <MX_SPI3_Init+0x74>)
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <MX_SPI3_Init+0x74>)
 8007946:	2208      	movs	r2, #8
 8007948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800794a:	4805      	ldr	r0, [pc, #20]	; (8007960 <MX_SPI3_Init+0x74>)
 800794c:	f004 fbd0 	bl	800c0f0 <HAL_SPI_Init>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007956:	f7ff ff8b 	bl	8007870 <Error_Handler>
  }

}
 800795a:	bf00      	nop
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20002720 	.word	0x20002720
 8007964:	40003c00 	.word	0x40003c00

08007968 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007970:	f107 0314 	add.w	r3, r7, #20
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	60da      	str	r2, [r3, #12]
 800797e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a17      	ldr	r2, [pc, #92]	; (80079e4 <HAL_SPI_MspInit+0x7c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d128      	bne.n	80079dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800798a:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <HAL_SPI_MspInit+0x80>)
 800798c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798e:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <HAL_SPI_MspInit+0x80>)
 8007990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007994:	6593      	str	r3, [r2, #88]	; 0x58
 8007996:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <HAL_SPI_MspInit+0x80>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079a2:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <HAL_SPI_MspInit+0x80>)
 80079a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a6:	4a10      	ldr	r2, [pc, #64]	; (80079e8 <HAL_SPI_MspInit+0x80>)
 80079a8:	f043 0304 	orr.w	r3, r3, #4
 80079ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079ae:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <HAL_SPI_MspInit+0x80>)
 80079b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80079ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80079be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c0:	2302      	movs	r3, #2
 80079c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079c8:	2300      	movs	r3, #0
 80079ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80079cc:	2306      	movs	r3, #6
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	4619      	mov	r1, r3
 80079d6:	4805      	ldr	r0, [pc, #20]	; (80079ec <HAL_SPI_MspInit+0x84>)
 80079d8:	f003 f916 	bl	800ac08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80079dc:	bf00      	nop
 80079de:	3728      	adds	r7, #40	; 0x28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40003c00 	.word	0x40003c00
 80079e8:	40021000 	.word	0x40021000
 80079ec:	48000800 	.word	0x48000800

080079f0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80079f4:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	4a04      	ldr	r2, [pc, #16]	; (8007a0c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80079fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079fe:	6093      	str	r3, [r2, #8]
}
 8007a00:	bf00      	nop
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40007000 	.word	0x40007000

08007a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <HAL_MspInit+0x44>)
 8007a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a1a:	4a0e      	ldr	r2, [pc, #56]	; (8007a54 <HAL_MspInit+0x44>)
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	6613      	str	r3, [r2, #96]	; 0x60
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <HAL_MspInit+0x44>)
 8007a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	607b      	str	r3, [r7, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <HAL_MspInit+0x44>)
 8007a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a32:	4a08      	ldr	r2, [pc, #32]	; (8007a54 <HAL_MspInit+0x44>)
 8007a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a38:	6593      	str	r3, [r2, #88]	; 0x58
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <HAL_MspInit+0x44>)
 8007a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a42:	603b      	str	r3, [r7, #0]
 8007a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007a46:	f7ff ffd3 	bl	80079f0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40021000 	.word	0x40021000

08007a58 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007a62:	695a      	ldr	r2, [r3, #20]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4013      	ands	r3, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d101      	bne.n	8007a72 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	40010400 	.word	0x40010400

08007a84 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007a8c:	4a04      	ldr	r2, [pc, #16]	; (8007aa0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6153      	str	r3, [r2, #20]
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40010400 	.word	0x40010400

08007aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007aa8:	bf00      	nop
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ab6:	e7fe      	b.n	8007ab6 <HardFault_Handler+0x4>

08007ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007abc:	e7fe      	b.n	8007abc <MemManage_Handler+0x4>

08007abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ac2:	e7fe      	b.n	8007ac2 <BusFault_Handler+0x4>

08007ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ac8:	e7fe      	b.n	8007ac8 <UsageFault_Handler+0x4>

08007aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007aca:	b480      	push	{r7}
 8007acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ace:	bf00      	nop
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007adc:	bf00      	nop
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007aea:	bf00      	nop
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007af8:	f000 fcdc 	bl	80084b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007afc:	bf00      	nop
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007b04:	f7fd fa7c 	bl	8005000 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007b08:	2001      	movs	r0, #1
 8007b0a:	f7ff ffa5 	bl	8007a58 <LL_EXTI_IsActiveFlag_0_31>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007b14:	2001      	movs	r0, #1
 8007b16:	f7ff ffb5 	bl	8007a84 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007b1a:	bf00      	nop
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007b22:	f7fd fa93 	bl	800504c <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007b26:	2002      	movs	r0, #2
 8007b28:	f7ff ff96 	bl	8007a58 <LL_EXTI_IsActiveFlag_0_31>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007b32:	2002      	movs	r0, #2
 8007b34:	f7ff ffa6 	bl	8007a84 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007b38:	bf00      	nop
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007b40:	f7fd faaa 	bl	8005098 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007b44:	2004      	movs	r0, #4
 8007b46:	f7ff ff87 	bl	8007a58 <LL_EXTI_IsActiveFlag_0_31>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007b50:	2004      	movs	r0, #4
 8007b52:	f7ff ff97 	bl	8007a84 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007b56:	bf00      	nop
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007b60:	4802      	ldr	r0, [pc, #8]	; (8007b6c <DMA1_Channel1_IRQHandler+0x10>)
 8007b62:	f002 ff01 	bl	800a968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007b66:	bf00      	nop
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20002614 	.word	0x20002614

08007b70 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007b74:	4802      	ldr	r0, [pc, #8]	; (8007b80 <DMA1_Channel3_IRQHandler+0x10>)
 8007b76:	f002 fef7 	bl	800a968 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200026c0 	.word	0x200026c0

08007b84 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007b88:	f7f9 f8f8 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007b8c:	f7fd faaa 	bl	80050e4 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b90:	4803      	ldr	r0, [pc, #12]	; (8007ba0 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007b92:	f004 fe0b 	bl	800c7ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007b96:	4803      	ldr	r0, [pc, #12]	; (8007ba4 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007b98:	f004 fe08 	bl	800c7ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007b9c:	bf00      	nop
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20002868 	.word	0x20002868
 8007ba4:	200027d0 	.word	0x200027d0

08007ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007bac:	4802      	ldr	r0, [pc, #8]	; (8007bb8 <TIM3_IRQHandler+0x10>)
 8007bae:	f004 fdfd 	bl	800c7ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007bb2:	bf00      	nop
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20001f90 	.word	0x20001f90

08007bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007bc0:	f7fd f9ce 	bl	8004f60 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007bc4:	f7fd f9f4 	bl	8004fb0 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007bc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007bcc:	f7ff ff44 	bl	8007a58 <LL_EXTI_IsActiveFlag_0_31>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007bd6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007bda:	f7ff ff53 	bl	8007a84 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007bde:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007be2:	f7ff ff39 	bl	8007a58 <LL_EXTI_IsActiveFlag_0_31>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007bec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bf0:	f7ff ff48 	bl	8007a84 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007bf4:	bf00      	nop
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007bfc:	f7fd f958 	bl	8004eb0 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007c00:	4802      	ldr	r0, [pc, #8]	; (8007c0c <TIM5_IRQHandler+0x14>)
 8007c02:	f004 fdd3 	bl	800c7ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007c06:	bf00      	nop
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000281c 	.word	0x2000281c

08007c10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e00a      	b.n	8007c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007c22:	f3af 8000 	nop.w
 8007c26:	4601      	mov	r1, r0
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	60ba      	str	r2, [r7, #8]
 8007c2e:	b2ca      	uxtb	r2, r1
 8007c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	3301      	adds	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	dbf0      	blt.n	8007c22 <_read+0x12>
	}

return len;
 8007c40:	687b      	ldr	r3, [r7, #4]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
	return -1;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c72:	605a      	str	r2, [r3, #4]
	return 0;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <_isatty>:

int _isatty(int file)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
	return 1;
 8007c8a:	2301      	movs	r3, #1
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
	return 0;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007cbc:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <_sbrk+0x50>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <_sbrk+0x16>
		heap_end = &end;
 8007cc4:	4b0f      	ldr	r3, [pc, #60]	; (8007d04 <_sbrk+0x50>)
 8007cc6:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <_sbrk+0x54>)
 8007cc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007cca:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <_sbrk+0x50>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <_sbrk+0x50>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	466a      	mov	r2, sp
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d907      	bls.n	8007cee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007cde:	f007 fb21 	bl	800f324 <__errno>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cec:	e006      	b.n	8007cfc <_sbrk+0x48>
	}

	heap_end += incr;
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <_sbrk+0x50>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4a03      	ldr	r2, [pc, #12]	; (8007d04 <_sbrk+0x50>)
 8007cf8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20001f14 	.word	0x20001f14
 8007d08:	20002958 	.word	0x20002958

08007d0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007d10:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <SystemInit+0x28>)
 8007d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d16:	4a07      	ldr	r2, [pc, #28]	; (8007d34 <SystemInit+0x28>)
 8007d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d20:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <SystemInit+0x28>)
 8007d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d26:	609a      	str	r2, [r3, #8]
#endif
}
 8007d28:	bf00      	nop
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	e000ed00 	.word	0xe000ed00

08007d38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b09a      	sub	sp, #104	; 0x68
 8007d3c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007d3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007d42:	2224      	movs	r2, #36	; 0x24
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f007 fb16 	bl	800f378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	2234      	movs	r2, #52	; 0x34
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f007 fb0a 	bl	800f378 <memset>

  htim1.Instance = TIM1;
 8007d64:	4b2a      	ldr	r3, [pc, #168]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007d66:	4a2b      	ldr	r2, [pc, #172]	; (8007e14 <MX_TIM1_Init+0xdc>)
 8007d68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007d6a:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8007d70:	4b27      	ldr	r3, [pc, #156]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007d72:	2260      	movs	r2, #96	; 0x60
 8007d74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007d76:	4b26      	ldr	r3, [pc, #152]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d7e:	4b24      	ldr	r3, [pc, #144]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007d84:	4b22      	ldr	r3, [pc, #136]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007d8a:	4b21      	ldr	r3, [pc, #132]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007d8c:	2280      	movs	r2, #128	; 0x80
 8007d8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007d90:	2302      	movs	r3, #2
 8007d92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007d94:	2300      	movs	r3, #0
 8007d96:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007da4:	2300      	movs	r3, #0
 8007da6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007da8:	2301      	movs	r3, #1
 8007daa:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007dac:	2300      	movs	r3, #0
 8007dae:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007db4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007db8:	4619      	mov	r1, r3
 8007dba:	4815      	ldr	r0, [pc, #84]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007dbc:	f004 fc50 	bl	800c660 <HAL_TIM_Encoder_Init>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007dc6:	f7ff fd53 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007dca:	2320      	movs	r3, #32
 8007dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007dd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007dda:	4619      	mov	r1, r3
 8007ddc:	480c      	ldr	r0, [pc, #48]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007dde:	f005 fd2b 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007de8:	f7ff fd42 	bl	8007870 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007dec:	2300      	movs	r3, #0
 8007dee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007df0:	2300      	movs	r3, #0
 8007df2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007df4:	1d3b      	adds	r3, r7, #4
 8007df6:	4619      	mov	r1, r3
 8007df8:	4805      	ldr	r0, [pc, #20]	; (8007e10 <MX_TIM1_Init+0xd8>)
 8007dfa:	f005 fdb3 	bl	800d964 <HAL_TIMEx_ConfigBreakDeadTime>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007e04:	f7ff fd34 	bl	8007870 <Error_Handler>
  }

}
 8007e08:	bf00      	nop
 8007e0a:	3768      	adds	r7, #104	; 0x68
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20002868 	.word	0x20002868
 8007e14:	40012c00 	.word	0x40012c00

08007e18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e1e:	f107 0310 	add.w	r3, r7, #16
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	605a      	str	r2, [r3, #4]
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e2c:	1d3b      	adds	r3, r7, #4
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	605a      	str	r2, [r3, #4]
 8007e34:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007e3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007e3e:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e44:	4b19      	ldr	r3, [pc, #100]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007e4a:	4b18      	ldr	r3, [pc, #96]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e50:	4b16      	ldr	r3, [pc, #88]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007e56:	4b15      	ldr	r3, [pc, #84]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e58:	2280      	movs	r2, #128	; 0x80
 8007e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007e5c:	4813      	ldr	r0, [pc, #76]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e5e:	f004 f9d9 	bl	800c214 <HAL_TIM_Base_Init>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007e68:	f7ff fd02 	bl	8007870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007e72:	f107 0310 	add.w	r3, r7, #16
 8007e76:	4619      	mov	r1, r3
 8007e78:	480c      	ldr	r0, [pc, #48]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e7a:	f004 ff27 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007e84:	f7ff fcf4 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007e88:	2320      	movs	r3, #32
 8007e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007e90:	1d3b      	adds	r3, r7, #4
 8007e92:	4619      	mov	r1, r3
 8007e94:	4805      	ldr	r0, [pc, #20]	; (8007eac <MX_TIM2_Init+0x94>)
 8007e96:	f005 fccf 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007ea0:	f7ff fce6 	bl	8007870 <Error_Handler>
  }

}
 8007ea4:	bf00      	nop
 8007ea6:	3720      	adds	r7, #32
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	200028b4 	.word	0x200028b4

08007eb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	605a      	str	r2, [r3, #4]
 8007ec0:	609a      	str	r2, [r3, #8]
 8007ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007ece:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <MX_TIM3_Init+0x98>)
 8007ed2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007ed4:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007eda:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007edc:	2210      	movs	r2, #16
 8007ede:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007ee0:	4b18      	ldr	r3, [pc, #96]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007ee6:	4b17      	ldr	r3, [pc, #92]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007eee:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007ef0:	2280      	movs	r2, #128	; 0x80
 8007ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007ef4:	4813      	ldr	r0, [pc, #76]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007ef6:	f004 f98d 	bl	800c214 <HAL_TIM_Base_Init>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007f00:	f7ff fcb6 	bl	8007870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007f0a:	f107 0310 	add.w	r3, r7, #16
 8007f0e:	4619      	mov	r1, r3
 8007f10:	480c      	ldr	r0, [pc, #48]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007f12:	f004 fedb 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007f1c:	f7ff fca8 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007f20:	2320      	movs	r3, #32
 8007f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007f28:	1d3b      	adds	r3, r7, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4805      	ldr	r0, [pc, #20]	; (8007f44 <MX_TIM3_Init+0x94>)
 8007f2e:	f005 fc83 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007f38:	f7ff fc9a 	bl	8007870 <Error_Handler>
  }

}
 8007f3c:	bf00      	nop
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20001f90 	.word	0x20001f90
 8007f48:	40000400 	.word	0x40000400

08007f4c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f52:	f107 0310 	add.w	r3, r7, #16
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	605a      	str	r2, [r3, #4]
 8007f5c:	609a      	str	r2, [r3, #8]
 8007f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f60:	1d3b      	adds	r3, r7, #4
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	605a      	str	r2, [r3, #4]
 8007f68:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007f6a:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007f6c:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <MX_TIM5_Init+0x98>)
 8007f6e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007f70:	4b1b      	ldr	r3, [pc, #108]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f76:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007f7c:	4b18      	ldr	r3, [pc, #96]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f82:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f84:	4b16      	ldr	r3, [pc, #88]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007f8c:	2280      	movs	r2, #128	; 0x80
 8007f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007f90:	4813      	ldr	r0, [pc, #76]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007f92:	f004 f93f 	bl	800c214 <HAL_TIM_Base_Init>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007f9c:	f7ff fc68 	bl	8007870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007fa6:	f107 0310 	add.w	r3, r7, #16
 8007faa:	4619      	mov	r1, r3
 8007fac:	480c      	ldr	r0, [pc, #48]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007fae:	f004 fe8d 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007fb8:	f7ff fc5a 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007fc4:	1d3b      	adds	r3, r7, #4
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <MX_TIM5_Init+0x94>)
 8007fca:	f005 fc35 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007fd4:	f7ff fc4c 	bl	8007870 <Error_Handler>
  }

}
 8007fd8:	bf00      	nop
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	2000281c 	.word	0x2000281c
 8007fe4:	40000c00 	.word	0x40000c00

08007fe8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b094      	sub	sp, #80	; 0x50
 8007fec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	605a      	str	r2, [r3, #4]
 8007ff8:	609a      	str	r2, [r3, #8]
 8007ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ffc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008008:	463b      	mov	r3, r7
 800800a:	2234      	movs	r2, #52	; 0x34
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f007 f9b2 	bl	800f378 <memset>

  htim8.Instance = TIM8;
 8008014:	4b26      	ldr	r3, [pc, #152]	; (80080b0 <MX_TIM8_Init+0xc8>)
 8008016:	4a27      	ldr	r2, [pc, #156]	; (80080b4 <MX_TIM8_Init+0xcc>)
 8008018:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800801a:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <MX_TIM8_Init+0xc8>)
 800801c:	2200      	movs	r2, #0
 800801e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008020:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <MX_TIM8_Init+0xc8>)
 8008022:	2200      	movs	r2, #0
 8008024:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008026:	4b22      	ldr	r3, [pc, #136]	; (80080b0 <MX_TIM8_Init+0xc8>)
 8008028:	2201      	movs	r2, #1
 800802a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800802c:	4b20      	ldr	r3, [pc, #128]	; (80080b0 <MX_TIM8_Init+0xc8>)
 800802e:	2200      	movs	r2, #0
 8008030:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008032:	4b1f      	ldr	r3, [pc, #124]	; (80080b0 <MX_TIM8_Init+0xc8>)
 8008034:	2200      	movs	r2, #0
 8008036:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008038:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <MX_TIM8_Init+0xc8>)
 800803a:	2280      	movs	r2, #128	; 0x80
 800803c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800803e:	481c      	ldr	r0, [pc, #112]	; (80080b0 <MX_TIM8_Init+0xc8>)
 8008040:	f004 f8e8 	bl	800c214 <HAL_TIM_Base_Init>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800804a:	f7ff fc11 	bl	8007870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800804e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008052:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008054:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008058:	4619      	mov	r1, r3
 800805a:	4815      	ldr	r0, [pc, #84]	; (80080b0 <MX_TIM8_Init+0xc8>)
 800805c:	f004 fe36 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008066:	f7ff fc03 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800806a:	2320      	movs	r3, #32
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800806e:	2300      	movs	r3, #0
 8008070:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008072:	2300      	movs	r3, #0
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008076:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800807a:	4619      	mov	r1, r3
 800807c:	480c      	ldr	r0, [pc, #48]	; (80080b0 <MX_TIM8_Init+0xc8>)
 800807e:	f005 fbdb 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008088:	f7ff fbf2 	bl	8007870 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800808c:	2300      	movs	r3, #0
 800808e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008090:	2300      	movs	r3, #0
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008094:	463b      	mov	r3, r7
 8008096:	4619      	mov	r1, r3
 8008098:	4805      	ldr	r0, [pc, #20]	; (80080b0 <MX_TIM8_Init+0xc8>)
 800809a:	f005 fc63 	bl	800d964 <HAL_TIMEx_ConfigBreakDeadTime>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80080a4:	f7ff fbe4 	bl	8007870 <Error_Handler>
  }

}
 80080a8:	bf00      	nop
 80080aa:	3750      	adds	r7, #80	; 0x50
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20002784 	.word	0x20002784
 80080b4:	40013400 	.word	0x40013400

080080b8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080be:	f107 0310 	add.w	r3, r7, #16
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	605a      	str	r2, [r3, #4]
 80080c8:	609a      	str	r2, [r3, #8]
 80080ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080cc:	1d3b      	adds	r3, r7, #4
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]
 80080d4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80080d6:	4b1f      	ldr	r3, [pc, #124]	; (8008154 <MX_TIM15_Init+0x9c>)
 80080d8:	4a1f      	ldr	r2, [pc, #124]	; (8008158 <MX_TIM15_Init+0xa0>)
 80080da:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80080dc:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <MX_TIM15_Init+0x9c>)
 80080de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080e2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080e4:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <MX_TIM15_Init+0x9c>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80080ea:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <MX_TIM15_Init+0x9c>)
 80080ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080f0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080f2:	4b18      	ldr	r3, [pc, #96]	; (8008154 <MX_TIM15_Init+0x9c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80080f8:	4b16      	ldr	r3, [pc, #88]	; (8008154 <MX_TIM15_Init+0x9c>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080fe:	4b15      	ldr	r3, [pc, #84]	; (8008154 <MX_TIM15_Init+0x9c>)
 8008100:	2200      	movs	r2, #0
 8008102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008104:	4813      	ldr	r0, [pc, #76]	; (8008154 <MX_TIM15_Init+0x9c>)
 8008106:	f004 f885 	bl	800c214 <HAL_TIM_Base_Init>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008110:	f7ff fbae 	bl	8007870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008118:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800811a:	f107 0310 	add.w	r3, r7, #16
 800811e:	4619      	mov	r1, r3
 8008120:	480c      	ldr	r0, [pc, #48]	; (8008154 <MX_TIM15_Init+0x9c>)
 8008122:	f004 fdd3 	bl	800cccc <HAL_TIM_ConfigClockSource>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800812c:	f7ff fba0 	bl	8007870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008130:	2300      	movs	r3, #0
 8008132:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	4619      	mov	r1, r3
 800813c:	4805      	ldr	r0, [pc, #20]	; (8008154 <MX_TIM15_Init+0x9c>)
 800813e:	f005 fb7b 	bl	800d838 <HAL_TIMEx_MasterConfigSynchronization>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008148:	f7ff fb92 	bl	8007870 <Error_Handler>
  }

}
 800814c:	bf00      	nop
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200027d0 	.word	0x200027d0
 8008158:	40014000 	.word	0x40014000

0800815c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008160:	4b10      	ldr	r3, [pc, #64]	; (80081a4 <MX_TIM16_Init+0x48>)
 8008162:	4a11      	ldr	r2, [pc, #68]	; (80081a8 <MX_TIM16_Init+0x4c>)
 8008164:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008166:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <MX_TIM16_Init+0x48>)
 8008168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800816e:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <MX_TIM16_Init+0x48>)
 8008170:	2200      	movs	r2, #0
 8008172:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <MX_TIM16_Init+0x48>)
 8008176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800817a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <MX_TIM16_Init+0x48>)
 800817e:	2200      	movs	r2, #0
 8008180:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008182:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <MX_TIM16_Init+0x48>)
 8008184:	2200      	movs	r2, #0
 8008186:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <MX_TIM16_Init+0x48>)
 800818a:	2200      	movs	r2, #0
 800818c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800818e:	4805      	ldr	r0, [pc, #20]	; (80081a4 <MX_TIM16_Init+0x48>)
 8008190:	f004 f840 	bl	800c214 <HAL_TIM_Base_Init>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800819a:	f7ff fb69 	bl	8007870 <Error_Handler>
  }

}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20002900 	.word	0x20002900
 80081a8:	40014400 	.word	0x40014400

080081ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	; 0x28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b4:	f107 0314 	add.w	r3, r7, #20
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1b      	ldr	r2, [pc, #108]	; (8008238 <HAL_TIM_Encoder_MspInit+0x8c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d12f      	bne.n	800822e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80081ce:	4b1b      	ldr	r3, [pc, #108]	; (800823c <HAL_TIM_Encoder_MspInit+0x90>)
 80081d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d2:	4a1a      	ldr	r2, [pc, #104]	; (800823c <HAL_TIM_Encoder_MspInit+0x90>)
 80081d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081d8:	6613      	str	r3, [r2, #96]	; 0x60
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <HAL_TIM_Encoder_MspInit+0x90>)
 80081dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081e6:	4b15      	ldr	r3, [pc, #84]	; (800823c <HAL_TIM_Encoder_MspInit+0x90>)
 80081e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ea:	4a14      	ldr	r2, [pc, #80]	; (800823c <HAL_TIM_Encoder_MspInit+0x90>)
 80081ec:	f043 0304 	orr.w	r3, r3, #4
 80081f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081f2:	4b12      	ldr	r3, [pc, #72]	; (800823c <HAL_TIM_Encoder_MspInit+0x90>)
 80081f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80081fe:	2303      	movs	r3, #3
 8008200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008202:	2302      	movs	r3, #2
 8008204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800820a:	2300      	movs	r3, #0
 800820c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800820e:	2302      	movs	r3, #2
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008212:	f107 0314 	add.w	r3, r7, #20
 8008216:	4619      	mov	r1, r3
 8008218:	4809      	ldr	r0, [pc, #36]	; (8008240 <HAL_TIM_Encoder_MspInit+0x94>)
 800821a:	f002 fcf5 	bl	800ac08 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800821e:	2200      	movs	r2, #0
 8008220:	2100      	movs	r1, #0
 8008222:	2018      	movs	r0, #24
 8008224:	f001 fdc3 	bl	8009dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008228:	2018      	movs	r0, #24
 800822a:	f001 fdda 	bl	8009de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800822e:	bf00      	nop
 8008230:	3728      	adds	r7, #40	; 0x28
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40021000 	.word	0x40021000
 8008240:	48000800 	.word	0x48000800

08008244 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	; 0x38
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800824c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008264:	d10c      	bne.n	8008280 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008266:	4b4f      	ldr	r3, [pc, #316]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826a:	4a4e      	ldr	r2, [pc, #312]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	6593      	str	r3, [r2, #88]	; 0x58
 8008272:	4b4c      	ldr	r3, [pc, #304]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	623b      	str	r3, [r7, #32]
 800827c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800827e:	e08d      	b.n	800839c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a48      	ldr	r2, [pc, #288]	; (80083a8 <HAL_TIM_Base_MspInit+0x164>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d114      	bne.n	80082b4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800828a:	4b46      	ldr	r3, [pc, #280]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 800828c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828e:	4a45      	ldr	r2, [pc, #276]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008290:	f043 0302 	orr.w	r3, r3, #2
 8008294:	6593      	str	r3, [r2, #88]	; 0x58
 8008296:	4b43      	ldr	r3, [pc, #268]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80082a2:	2200      	movs	r2, #0
 80082a4:	2100      	movs	r1, #0
 80082a6:	201d      	movs	r0, #29
 80082a8:	f001 fd81 	bl	8009dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80082ac:	201d      	movs	r0, #29
 80082ae:	f001 fd98 	bl	8009de2 <HAL_NVIC_EnableIRQ>
}
 80082b2:	e073      	b.n	800839c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a3c      	ldr	r2, [pc, #240]	; (80083ac <HAL_TIM_Base_MspInit+0x168>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d131      	bne.n	8008322 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80082be:	4b39      	ldr	r3, [pc, #228]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 80082c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c2:	4a38      	ldr	r2, [pc, #224]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 80082c4:	f043 0308 	orr.w	r3, r3, #8
 80082c8:	6593      	str	r3, [r2, #88]	; 0x58
 80082ca:	4b36      	ldr	r3, [pc, #216]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 80082cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	61bb      	str	r3, [r7, #24]
 80082d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082d6:	4b33      	ldr	r3, [pc, #204]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 80082d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082da:	4a32      	ldr	r2, [pc, #200]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 80082dc:	f043 0301 	orr.w	r3, r3, #1
 80082e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082e2:	4b30      	ldr	r3, [pc, #192]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80082ee:	2301      	movs	r3, #1
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f2:	2302      	movs	r3, #2
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fa:	2300      	movs	r3, #0
 80082fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80082fe:	2302      	movs	r3, #2
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008306:	4619      	mov	r1, r3
 8008308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800830c:	f002 fc7c 	bl	800ac08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008310:	2200      	movs	r2, #0
 8008312:	2102      	movs	r1, #2
 8008314:	2032      	movs	r0, #50	; 0x32
 8008316:	f001 fd4a 	bl	8009dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800831a:	2032      	movs	r0, #50	; 0x32
 800831c:	f001 fd61 	bl	8009de2 <HAL_NVIC_EnableIRQ>
}
 8008320:	e03c      	b.n	800839c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a22      	ldr	r2, [pc, #136]	; (80083b0 <HAL_TIM_Base_MspInit+0x16c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d10c      	bne.n	8008346 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800832c:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 800832e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008330:	4a1c      	ldr	r2, [pc, #112]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008336:	6613      	str	r3, [r2, #96]	; 0x60
 8008338:	4b1a      	ldr	r3, [pc, #104]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 800833a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	693b      	ldr	r3, [r7, #16]
}
 8008344:	e02a      	b.n	800839c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1a      	ldr	r2, [pc, #104]	; (80083b4 <HAL_TIM_Base_MspInit+0x170>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d114      	bne.n	800837a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008350:	4b14      	ldr	r3, [pc, #80]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	4a13      	ldr	r2, [pc, #76]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800835a:	6613      	str	r3, [r2, #96]	; 0x60
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 800835e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008368:	2200      	movs	r2, #0
 800836a:	2100      	movs	r1, #0
 800836c:	2018      	movs	r0, #24
 800836e:	f001 fd1e 	bl	8009dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008372:	2018      	movs	r0, #24
 8008374:	f001 fd35 	bl	8009de2 <HAL_NVIC_EnableIRQ>
}
 8008378:	e010      	b.n	800839c <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a0e      	ldr	r2, [pc, #56]	; (80083b8 <HAL_TIM_Base_MspInit+0x174>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d10b      	bne.n	800839c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008384:	4b07      	ldr	r3, [pc, #28]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008388:	4a06      	ldr	r2, [pc, #24]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 800838a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800838e:	6613      	str	r3, [r2, #96]	; 0x60
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <HAL_TIM_Base_MspInit+0x160>)
 8008392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008398:	60bb      	str	r3, [r7, #8]
 800839a:	68bb      	ldr	r3, [r7, #8]
}
 800839c:	bf00      	nop
 800839e:	3738      	adds	r7, #56	; 0x38
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	40021000 	.word	0x40021000
 80083a8:	40000400 	.word	0x40000400
 80083ac:	40000c00 	.word	0x40000c00
 80083b0:	40013400 	.word	0x40013400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40014400 	.word	0x40014400

080083bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80083bc:	480d      	ldr	r0, [pc, #52]	; (80083f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80083be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083c0:	480d      	ldr	r0, [pc, #52]	; (80083f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80083c2:	490e      	ldr	r1, [pc, #56]	; (80083fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80083c4:	4a0e      	ldr	r2, [pc, #56]	; (8008400 <LoopForever+0xe>)
  movs r3, #0
 80083c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80083c8:	e002      	b.n	80083d0 <LoopCopyDataInit>

080083ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083ce:	3304      	adds	r3, #4

080083d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083d4:	d3f9      	bcc.n	80083ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083d6:	4a0b      	ldr	r2, [pc, #44]	; (8008404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80083d8:	4c0b      	ldr	r4, [pc, #44]	; (8008408 <LoopForever+0x16>)
  movs r3, #0
 80083da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083dc:	e001      	b.n	80083e2 <LoopFillZerobss>

080083de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083e0:	3204      	adds	r2, #4

080083e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083e4:	d3fb      	bcc.n	80083de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083e6:	f7ff fc91 	bl	8007d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083ea:	f006 ffa1 	bl	800f330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80083ee:	f7ff f957 	bl	80076a0 <main>

080083f2 <LoopForever>:

LoopForever:
    b LoopForever
 80083f2:	e7fe      	b.n	80083f2 <LoopForever>
  ldr   r0, =_estack
 80083f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80083f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083fc:	20001e80 	.word	0x20001e80
  ldr r2, =_sidata
 8008400:	080146b0 	.word	0x080146b0
  ldr r2, =_sbss
 8008404:	20001e80 	.word	0x20001e80
  ldr r4, =_ebss
 8008408:	20002954 	.word	0x20002954

0800840c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800840c:	e7fe      	b.n	800840c <ADC1_2_IRQHandler>

0800840e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008418:	2003      	movs	r0, #3
 800841a:	f001 fcbd 	bl	8009d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800841e:	2000      	movs	r0, #0
 8008420:	f000 f80e 	bl	8008440 <HAL_InitTick>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	71fb      	strb	r3, [r7, #7]
 800842e:	e001      	b.n	8008434 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008430:	f7ff faee 	bl	8007a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008434:	79fb      	ldrb	r3, [r7, #7]

}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800844c:	4b16      	ldr	r3, [pc, #88]	; (80084a8 <HAL_InitTick+0x68>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d022      	beq.n	800849a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <HAL_InitTick+0x6c>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <HAL_InitTick+0x68>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008460:	fbb1 f3f3 	udiv	r3, r1, r3
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	4618      	mov	r0, r3
 800846a:	f001 fcd6 	bl	8009e1a <HAL_SYSTICK_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10f      	bne.n	8008494 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b0f      	cmp	r3, #15
 8008478:	d809      	bhi.n	800848e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800847a:	2200      	movs	r2, #0
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008482:	f001 fc94 	bl	8009dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008486:	4a0a      	ldr	r2, [pc, #40]	; (80084b0 <HAL_InitTick+0x70>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	e007      	b.n	800849e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
 8008492:	e004      	b.n	800849e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e001      	b.n	800849e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800849e:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000cb0 	.word	0x20000cb0
 80084ac:	20000ca8 	.word	0x20000ca8
 80084b0:	20000cac 	.word	0x20000cac

080084b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084b8:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <HAL_IncTick+0x1c>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <HAL_IncTick+0x20>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4413      	add	r3, r2
 80084c2:	4a03      	ldr	r2, [pc, #12]	; (80084d0 <HAL_IncTick+0x1c>)
 80084c4:	6013      	str	r3, [r2, #0]
}
 80084c6:	bf00      	nop
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	2000294c 	.word	0x2000294c
 80084d4:	20000cb0 	.word	0x20000cb0

080084d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  return uwTick;
 80084dc:	4b03      	ldr	r3, [pc, #12]	; (80084ec <HAL_GetTick+0x14>)
 80084de:	681b      	ldr	r3, [r3, #0]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	2000294c 	.word	0x2000294c

080084f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084f8:	f7ff ffee 	bl	80084d8 <HAL_GetTick>
 80084fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008508:	d004      	beq.n	8008514 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800850a:	4b09      	ldr	r3, [pc, #36]	; (8008530 <HAL_Delay+0x40>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4413      	add	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008514:	bf00      	nop
 8008516:	f7ff ffdf 	bl	80084d8 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	429a      	cmp	r2, r3
 8008524:	d8f7      	bhi.n	8008516 <HAL_Delay+0x26>
  {
  }
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000cb0 	.word	0x20000cb0

08008534 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	609a      	str	r2, [r3, #8]
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	609a      	str	r2, [r3, #8]
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800859c:	b490      	push	{r4, r7}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3360      	adds	r3, #96	; 0x60
 80085ae:	461a      	mov	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	4b08      	ldr	r3, [pc, #32]	; (80085dc <LL_ADC_SetOffset+0x40>)
 80085bc:	4013      	ands	r3, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ce:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc90      	pop	{r4, r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	03fff000 	.word	0x03fff000

080085e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80085e0:	b490      	push	{r4, r7}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3360      	adds	r3, #96	; 0x60
 80085ee:	461a      	mov	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bc90      	pop	{r4, r7}
 8008606:	4770      	bx	lr

08008608 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008608:	b490      	push	{r4, r7}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3360      	adds	r3, #96	; 0x60
 8008618:	461a      	mov	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4313      	orrs	r3, r2
 800862c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bc90      	pop	{r4, r7}
 8008636:	4770      	bx	lr

08008638 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008638:	b490      	push	{r4, r7}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3360      	adds	r3, #96	; 0x60
 8008648:	461a      	mov	r2, r3
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4313      	orrs	r3, r2
 800865c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bc90      	pop	{r4, r7}
 8008666:	4770      	bx	lr

08008668 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008668:	b490      	push	{r4, r7}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3360      	adds	r3, #96	; 0x60
 8008678:	461a      	mov	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4313      	orrs	r3, r2
 800868c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bc90      	pop	{r4, r7}
 8008696:	4770      	bx	lr

08008698 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	431a      	orrs	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	615a      	str	r2, [r3, #20]
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80086be:	b490      	push	{r4, r7}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3330      	adds	r3, #48	; 0x30
 80086ce:	461a      	mov	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	f003 030c 	and.w	r3, r3, #12
 80086da:	4413      	add	r3, r2
 80086dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f003 031f 	and.w	r3, r3, #31
 80086e6:	211f      	movs	r1, #31
 80086e8:	fa01 f303 	lsl.w	r3, r1, r3
 80086ec:	43db      	mvns	r3, r3
 80086ee:	401a      	ands	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	0e9b      	lsrs	r3, r3, #26
 80086f4:	f003 011f 	and.w	r1, r3, #31
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008702:	4313      	orrs	r3, r2
 8008704:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bc90      	pop	{r4, r7}
 800870e:	4770      	bx	lr

08008710 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008710:	b490      	push	{r4, r7}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3314      	adds	r3, #20
 8008720:	461a      	mov	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	0e5b      	lsrs	r3, r3, #25
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	4413      	add	r3, r2
 800872e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008730:	6822      	ldr	r2, [r4, #0]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	0d1b      	lsrs	r3, r3, #20
 8008736:	f003 031f 	and.w	r3, r3, #31
 800873a:	2107      	movs	r1, #7
 800873c:	fa01 f303 	lsl.w	r3, r1, r3
 8008740:	43db      	mvns	r3, r3
 8008742:	401a      	ands	r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	0d1b      	lsrs	r3, r3, #20
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	fa01 f303 	lsl.w	r3, r1, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bc90      	pop	{r4, r7}
 800875e:	4770      	bx	lr

08008760 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008778:	43db      	mvns	r3, r3
 800877a:	401a      	ands	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f003 0318 	and.w	r3, r3, #24
 8008782:	4908      	ldr	r1, [pc, #32]	; (80087a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008784:	40d9      	lsrs	r1, r3
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	400b      	ands	r3, r1
 800878a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800878e:	431a      	orrs	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	0007ffff 	.word	0x0007ffff

080087a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80087b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6093      	str	r3, [r2, #8]
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e0:	d101      	bne.n	80087e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008808:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800882c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008830:	d101      	bne.n	8008836 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b01      	cmp	r3, #1
 8008856:	d101      	bne.n	800885c <LL_ADC_IsEnabled+0x18>
 8008858:	2301      	movs	r3, #1
 800885a:	e000      	b.n	800885e <LL_ADC_IsEnabled+0x1a>
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b04      	cmp	r3, #4
 800887c:	d101      	bne.n	8008882 <LL_ADC_REG_IsConversionOngoing+0x18>
 800887e:	2301      	movs	r3, #1
 8008880:	e000      	b.n	8008884 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f003 0308 	and.w	r3, r3, #8
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d101      	bne.n	80088a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
	...

080088b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80088b8:	b590      	push	{r4, r7, lr}
 80088ba:	b089      	sub	sp, #36	; 0x24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e1ad      	b.n	8008c2e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fe f981 	bl	8006be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff ff67 	bl	80087cc <LL_ADC_IsDeepPowerDownEnabled>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff ff4d 	bl	80087a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff ff82 	bl	800881c <LL_ADC_IsInternalRegulatorEnabled>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d113      	bne.n	8008946 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff ff66 	bl	80087f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008928:	4b9e      	ldr	r3, [pc, #632]	; (8008ba4 <HAL_ADC_Init+0x2ec>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	099b      	lsrs	r3, r3, #6
 800892e:	4a9e      	ldr	r2, [pc, #632]	; (8008ba8 <HAL_ADC_Init+0x2f0>)
 8008930:	fba2 2303 	umull	r2, r3, r2, r3
 8008934:	099b      	lsrs	r3, r3, #6
 8008936:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008938:	e002      	b.n	8008940 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3b01      	subs	r3, #1
 800893e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f9      	bne.n	800893a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff ff66 	bl	800881c <LL_ADC_IsInternalRegulatorEnabled>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10d      	bne.n	8008972 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895a:	f043 0210 	orr.w	r2, r3, #16
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008966:	f043 0201 	orr.w	r2, r3, #1
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff ff77 	bl	800886a <LL_ADC_REG_IsConversionOngoing>
 800897c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008982:	f003 0310 	and.w	r3, r3, #16
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 8148 	bne.w	8008c1c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f040 8144 	bne.w	8008c1c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008998:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800899c:	f043 0202 	orr.w	r2, r3, #2
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff ff4b 	bl	8008844 <LL_ADC_IsEnabled>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d141      	bne.n	8008a38 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089bc:	d004      	beq.n	80089c8 <HAL_ADC_Init+0x110>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a7a      	ldr	r2, [pc, #488]	; (8008bac <HAL_ADC_Init+0x2f4>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d10f      	bne.n	80089e8 <HAL_ADC_Init+0x130>
 80089c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80089cc:	f7ff ff3a 	bl	8008844 <LL_ADC_IsEnabled>
 80089d0:	4604      	mov	r4, r0
 80089d2:	4876      	ldr	r0, [pc, #472]	; (8008bac <HAL_ADC_Init+0x2f4>)
 80089d4:	f7ff ff36 	bl	8008844 <LL_ADC_IsEnabled>
 80089d8:	4603      	mov	r3, r0
 80089da:	4323      	orrs	r3, r4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bf0c      	ite	eq
 80089e0:	2301      	moveq	r3, #1
 80089e2:	2300      	movne	r3, #0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	e012      	b.n	8008a0e <HAL_ADC_Init+0x156>
 80089e8:	4871      	ldr	r0, [pc, #452]	; (8008bb0 <HAL_ADC_Init+0x2f8>)
 80089ea:	f7ff ff2b 	bl	8008844 <LL_ADC_IsEnabled>
 80089ee:	4604      	mov	r4, r0
 80089f0:	4870      	ldr	r0, [pc, #448]	; (8008bb4 <HAL_ADC_Init+0x2fc>)
 80089f2:	f7ff ff27 	bl	8008844 <LL_ADC_IsEnabled>
 80089f6:	4603      	mov	r3, r0
 80089f8:	431c      	orrs	r4, r3
 80089fa:	486f      	ldr	r0, [pc, #444]	; (8008bb8 <HAL_ADC_Init+0x300>)
 80089fc:	f7ff ff22 	bl	8008844 <LL_ADC_IsEnabled>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4323      	orrs	r3, r4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bf0c      	ite	eq
 8008a08:	2301      	moveq	r3, #1
 8008a0a:	2300      	movne	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d012      	beq.n	8008a38 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a1a:	d004      	beq.n	8008a26 <HAL_ADC_Init+0x16e>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a62      	ldr	r2, [pc, #392]	; (8008bac <HAL_ADC_Init+0x2f4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d101      	bne.n	8008a2a <HAL_ADC_Init+0x172>
 8008a26:	4a65      	ldr	r2, [pc, #404]	; (8008bbc <HAL_ADC_Init+0x304>)
 8008a28:	e000      	b.n	8008a2c <HAL_ADC_Init+0x174>
 8008a2a:	4a65      	ldr	r2, [pc, #404]	; (8008bc0 <HAL_ADC_Init+0x308>)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7ff fd7e 	bl	8008534 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7f5b      	ldrb	r3, [r3, #29]
 8008a3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008a48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008a4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d106      	bne.n	8008a74 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	045b      	lsls	r3, r3, #17
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	4b4b      	ldr	r3, [pc, #300]	; (8008bc4 <HAL_ADC_Init+0x30c>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	69b9      	ldr	r1, [r7, #24]
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fed3 	bl	800886a <LL_ADC_REG_IsConversionOngoing>
 8008ac4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff fee0 	bl	8008890 <LL_ADC_INJ_IsConversionOngoing>
 8008ad0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d17f      	bne.n	8008bd8 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d17c      	bne.n	8008bd8 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008ae2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008aec:	4313      	orrs	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008afa:	f023 0302 	bic.w	r3, r3, #2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	430b      	orrs	r3, r1
 8008b06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d017      	beq.n	8008b40 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691a      	ldr	r2, [r3, #16]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008b1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6911      	ldr	r1, [r2, #16]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008b3e:	e013      	b.n	8008b68 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d12a      	bne.n	8008bc8 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b7c:	f023 0304 	bic.w	r3, r3, #4
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b88:	4311      	orrs	r1, r2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008b8e:	4311      	orrs	r1, r2
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b94:	430a      	orrs	r2, r1
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0201 	orr.w	r2, r2, #1
 8008ba0:	611a      	str	r2, [r3, #16]
 8008ba2:	e019      	b.n	8008bd8 <HAL_ADC_Init+0x320>
 8008ba4:	20000ca8 	.word	0x20000ca8
 8008ba8:	053e2d63 	.word	0x053e2d63
 8008bac:	50000100 	.word	0x50000100
 8008bb0:	50000400 	.word	0x50000400
 8008bb4:	50000500 	.word	0x50000500
 8008bb8:	50000600 	.word	0x50000600
 8008bbc:	50000300 	.word	0x50000300
 8008bc0:	50000700 	.word	0x50000700
 8008bc4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0201 	bic.w	r2, r2, #1
 8008bd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d10c      	bne.n	8008bfa <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f023 010f 	bic.w	r1, r3, #15
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8008bf8:	e007      	b.n	8008c0a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 020f 	bic.w	r2, r2, #15
 8008c08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	f043 0201 	orr.w	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c1a:	e007      	b.n	8008c2c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c20:	f043 0210 	orr.w	r2, r3, #16
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3724      	adds	r7, #36	; 0x24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd90      	pop	{r4, r7, pc}
 8008c36:	bf00      	nop

08008c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b0a6      	sub	sp, #152	; 0x98
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_ADC_ConfigChannel+0x22>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e38e      	b.n	8009378 <HAL_ADC_ConfigChannel+0x740>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fdff 	bl	800886a <LL_ADC_REG_IsConversionOngoing>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f040 836f 	bne.w	8009352 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	6859      	ldr	r1, [r3, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	f7ff fd1c 	bl	80086be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff fded 	bl	800886a <LL_ADC_REG_IsConversionOngoing>
 8008c90:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff fdf9 	bl	8008890 <LL_ADC_INJ_IsConversionOngoing>
 8008c9e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 817b 	bne.w	8008fa2 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f040 8176 	bne.w	8008fa2 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cbe:	d10f      	bne.n	8008ce0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f7ff fd20 	bl	8008710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fcdd 	bl	8008698 <LL_ADC_SetSamplingTimeCommonConfig>
 8008cde:	e00e      	b.n	8008cfe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	6819      	ldr	r1, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	461a      	mov	r2, r3
 8008cee:	f7ff fd0f 	bl	8008710 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff fccd 	bl	8008698 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	695a      	ldr	r2, [r3, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	08db      	lsrs	r3, r3, #3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	fa02 f303 	lsl.w	r3, r2, r3
 8008d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d022      	beq.n	8008d66 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	6919      	ldr	r1, [r3, #16]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d30:	f7ff fc34 	bl	800859c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	6919      	ldr	r1, [r3, #16]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	461a      	mov	r2, r3
 8008d42:	f7ff fc79 	bl	8008638 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	6919      	ldr	r1, [r3, #16]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	7f1b      	ldrb	r3, [r3, #28]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d102      	bne.n	8008d5c <HAL_ADC_ConfigChannel+0x124>
 8008d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d5a:	e000      	b.n	8008d5e <HAL_ADC_ConfigChannel+0x126>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f7ff fc82 	bl	8008668 <LL_ADC_SetOffsetSaturation>
 8008d64:	e11d      	b.n	8008fa2 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fc37 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008d72:	4603      	mov	r3, r0
 8008d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <HAL_ADC_ConfigChannel+0x15a>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fc2c 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	0e9b      	lsrs	r3, r3, #26
 8008d8c:	f003 021f 	and.w	r2, r3, #31
 8008d90:	e012      	b.n	8008db8 <HAL_ADC_ConfigChannel+0x180>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff fc21 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008da8:	fa93 f3a3 	rbit	r3, r3
 8008dac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008dae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008db0:	fab3 f383 	clz	r3, r3
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <HAL_ADC_ConfigChannel+0x198>
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	0e9b      	lsrs	r3, r3, #26
 8008dca:	f003 031f 	and.w	r3, r3, #31
 8008dce:	e00a      	b.n	8008de6 <HAL_ADC_ConfigChannel+0x1ae>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dd8:	fa93 f3a3 	rbit	r3, r3
 8008ddc:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008de0:	fab3 f383 	clz	r3, r3
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d106      	bne.n	8008df8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2200      	movs	r2, #0
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fc08 	bl	8008608 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fbee 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <HAL_ADC_ConfigChannel+0x1ec>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2101      	movs	r1, #1
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff fbe3 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	0e9b      	lsrs	r3, r3, #26
 8008e1e:	f003 021f 	and.w	r2, r3, #31
 8008e22:	e010      	b.n	8008e46 <HAL_ADC_ConfigChannel+0x20e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2101      	movs	r1, #1
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fbd8 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008e30:	4603      	mov	r3, r0
 8008e32:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e36:	fa93 f3a3 	rbit	r3, r3
 8008e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3e:	fab3 f383 	clz	r3, r3
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d105      	bne.n	8008e5e <HAL_ADC_ConfigChannel+0x226>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	0e9b      	lsrs	r3, r3, #26
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	e00a      	b.n	8008e74 <HAL_ADC_ConfigChannel+0x23c>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e66:	fa93 f3a3 	rbit	r3, r3
 8008e6a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e6e:	fab3 f383 	clz	r3, r3
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d106      	bne.n	8008e86 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2101      	movs	r1, #1
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fbc1 	bl	8008608 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fba7 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_ADC_ConfigChannel+0x27a>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fb9c 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	0e9b      	lsrs	r3, r3, #26
 8008eac:	f003 021f 	and.w	r2, r3, #31
 8008eb0:	e010      	b.n	8008ed4 <HAL_ADC_ConfigChannel+0x29c>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2102      	movs	r1, #2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fb91 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ec4:	fa93 f3a3 	rbit	r3, r3
 8008ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ecc:	fab3 f383 	clz	r3, r3
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d105      	bne.n	8008eec <HAL_ADC_ConfigChannel+0x2b4>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	0e9b      	lsrs	r3, r3, #26
 8008ee6:	f003 031f 	and.w	r3, r3, #31
 8008eea:	e00a      	b.n	8008f02 <HAL_ADC_ConfigChannel+0x2ca>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ef4:	fa93 f3a3 	rbit	r3, r3
 8008ef8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008efc:	fab3 f383 	clz	r3, r3
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d106      	bne.n	8008f14 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2102      	movs	r1, #2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fb7a 	bl	8008608 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2103      	movs	r1, #3
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff fb60 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <HAL_ADC_ConfigChannel+0x308>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2103      	movs	r1, #3
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff fb55 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008f36:	4603      	mov	r3, r0
 8008f38:	0e9b      	lsrs	r3, r3, #26
 8008f3a:	f003 021f 	and.w	r2, r3, #31
 8008f3e:	e010      	b.n	8008f62 <HAL_ADC_ConfigChannel+0x32a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2103      	movs	r1, #3
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff fb4a 	bl	80085e0 <LL_ADC_GetOffsetChannel>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f52:	fa93 f3a3 	rbit	r3, r3
 8008f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5a:	fab3 f383 	clz	r3, r3
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	461a      	mov	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d105      	bne.n	8008f7a <HAL_ADC_ConfigChannel+0x342>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	0e9b      	lsrs	r3, r3, #26
 8008f74:	f003 031f 	and.w	r3, r3, #31
 8008f78:	e00a      	b.n	8008f90 <HAL_ADC_ConfigChannel+0x358>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f82:	fa93 f3a3 	rbit	r3, r3
 8008f86:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f8a:	fab3 f383 	clz	r3, r3
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d106      	bne.n	8008fa2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2103      	movs	r1, #3
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fb33 	bl	8008608 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff fc4c 	bl	8008844 <LL_ADC_IsEnabled>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 810c 	bne.w	80091cc <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6818      	ldr	r0, [r3, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	6819      	ldr	r1, [r3, #0]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f7ff fbcd 	bl	8008760 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	4aaf      	ldr	r2, [pc, #700]	; (8009288 <HAL_ADC_ConfigChannel+0x650>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	f040 80fd 	bne.w	80091cc <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10b      	bne.n	8008ffa <HAL_ADC_ConfigChannel+0x3c2>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	0e9b      	lsrs	r3, r3, #26
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	bf94      	ite	ls
 8008ff2:	2301      	movls	r3, #1
 8008ff4:	2300      	movhi	r3, #0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	e012      	b.n	8009020 <HAL_ADC_ConfigChannel+0x3e8>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009002:	fa93 f3a3 	rbit	r3, r3
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	fab3 f383 	clz	r3, r3
 800900e:	b2db      	uxtb	r3, r3
 8009010:	3301      	adds	r3, #1
 8009012:	f003 031f 	and.w	r3, r3, #31
 8009016:	2b09      	cmp	r3, #9
 8009018:	bf94      	ite	ls
 800901a:	2301      	movls	r3, #1
 800901c:	2300      	movhi	r3, #0
 800901e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009020:	2b00      	cmp	r3, #0
 8009022:	d064      	beq.n	80090ee <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800902c:	2b00      	cmp	r3, #0
 800902e:	d107      	bne.n	8009040 <HAL_ADC_ConfigChannel+0x408>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	0e9b      	lsrs	r3, r3, #26
 8009036:	3301      	adds	r3, #1
 8009038:	069b      	lsls	r3, r3, #26
 800903a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800903e:	e00e      	b.n	800905e <HAL_ADC_ConfigChannel+0x426>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009048:	fa93 f3a3 	rbit	r3, r3
 800904c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800904e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009050:	fab3 f383 	clz	r3, r3
 8009054:	b2db      	uxtb	r3, r3
 8009056:	3301      	adds	r3, #1
 8009058:	069b      	lsls	r3, r3, #26
 800905a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009066:	2b00      	cmp	r3, #0
 8009068:	d109      	bne.n	800907e <HAL_ADC_ConfigChannel+0x446>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	0e9b      	lsrs	r3, r3, #26
 8009070:	3301      	adds	r3, #1
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	2101      	movs	r1, #1
 8009078:	fa01 f303 	lsl.w	r3, r1, r3
 800907c:	e010      	b.n	80090a0 <HAL_ADC_ConfigChannel+0x468>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	fa93 f3a3 	rbit	r3, r3
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	fab3 f383 	clz	r3, r3
 8009092:	b2db      	uxtb	r3, r3
 8009094:	3301      	adds	r3, #1
 8009096:	f003 031f 	and.w	r3, r3, #31
 800909a:	2101      	movs	r1, #1
 800909c:	fa01 f303 	lsl.w	r3, r1, r3
 80090a0:	ea42 0103 	orr.w	r1, r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <HAL_ADC_ConfigChannel+0x48e>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	0e9b      	lsrs	r3, r3, #26
 80090b6:	3301      	adds	r3, #1
 80090b8:	f003 021f 	and.w	r2, r3, #31
 80090bc:	4613      	mov	r3, r2
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	4413      	add	r3, r2
 80090c2:	051b      	lsls	r3, r3, #20
 80090c4:	e011      	b.n	80090ea <HAL_ADC_ConfigChannel+0x4b2>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	fa93 f3a3 	rbit	r3, r3
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	fab3 f383 	clz	r3, r3
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	3301      	adds	r3, #1
 80090de:	f003 021f 	and.w	r2, r3, #31
 80090e2:	4613      	mov	r3, r2
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4413      	add	r3, r2
 80090e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090ea:	430b      	orrs	r3, r1
 80090ec:	e069      	b.n	80091c2 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d107      	bne.n	800910a <HAL_ADC_ConfigChannel+0x4d2>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	0e9b      	lsrs	r3, r3, #26
 8009100:	3301      	adds	r3, #1
 8009102:	069b      	lsls	r3, r3, #26
 8009104:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009108:	e00e      	b.n	8009128 <HAL_ADC_ConfigChannel+0x4f0>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	fa93 f3a3 	rbit	r3, r3
 8009116:	61fb      	str	r3, [r7, #28]
  return result;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	fab3 f383 	clz	r3, r3
 800911e:	b2db      	uxtb	r3, r3
 8009120:	3301      	adds	r3, #1
 8009122:	069b      	lsls	r3, r3, #26
 8009124:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009130:	2b00      	cmp	r3, #0
 8009132:	d109      	bne.n	8009148 <HAL_ADC_ConfigChannel+0x510>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	0e9b      	lsrs	r3, r3, #26
 800913a:	3301      	adds	r3, #1
 800913c:	f003 031f 	and.w	r3, r3, #31
 8009140:	2101      	movs	r1, #1
 8009142:	fa01 f303 	lsl.w	r3, r1, r3
 8009146:	e010      	b.n	800916a <HAL_ADC_ConfigChannel+0x532>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	fa93 f3a3 	rbit	r3, r3
 8009154:	617b      	str	r3, [r7, #20]
  return result;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	fab3 f383 	clz	r3, r3
 800915c:	b2db      	uxtb	r3, r3
 800915e:	3301      	adds	r3, #1
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f303 	lsl.w	r3, r1, r3
 800916a:	ea42 0103 	orr.w	r1, r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10d      	bne.n	8009196 <HAL_ADC_ConfigChannel+0x55e>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	0e9b      	lsrs	r3, r3, #26
 8009180:	3301      	adds	r3, #1
 8009182:	f003 021f 	and.w	r2, r3, #31
 8009186:	4613      	mov	r3, r2
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	4413      	add	r3, r2
 800918c:	3b1e      	subs	r3, #30
 800918e:	051b      	lsls	r3, r3, #20
 8009190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009194:	e014      	b.n	80091c0 <HAL_ADC_ConfigChannel+0x588>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	fa93 f3a3 	rbit	r3, r3
 80091a2:	60fb      	str	r3, [r7, #12]
  return result;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	fab3 f383 	clz	r3, r3
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	3301      	adds	r3, #1
 80091ae:	f003 021f 	and.w	r2, r3, #31
 80091b2:	4613      	mov	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	3b1e      	subs	r3, #30
 80091ba:	051b      	lsls	r3, r3, #20
 80091bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091c0:	430b      	orrs	r3, r1
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	6892      	ldr	r2, [r2, #8]
 80091c6:	4619      	mov	r1, r3
 80091c8:	f7ff faa2 	bl	8008710 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4b2e      	ldr	r3, [pc, #184]	; (800928c <HAL_ADC_ConfigChannel+0x654>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 80c9 	beq.w	800936c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091e2:	d004      	beq.n	80091ee <HAL_ADC_ConfigChannel+0x5b6>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a29      	ldr	r2, [pc, #164]	; (8009290 <HAL_ADC_ConfigChannel+0x658>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d101      	bne.n	80091f2 <HAL_ADC_ConfigChannel+0x5ba>
 80091ee:	4b29      	ldr	r3, [pc, #164]	; (8009294 <HAL_ADC_ConfigChannel+0x65c>)
 80091f0:	e000      	b.n	80091f4 <HAL_ADC_ConfigChannel+0x5bc>
 80091f2:	4b29      	ldr	r3, [pc, #164]	; (8009298 <HAL_ADC_ConfigChannel+0x660>)
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff f9c3 	bl	8008580 <LL_ADC_GetCommonPathInternalCh>
 80091fa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a26      	ldr	r2, [pc, #152]	; (800929c <HAL_ADC_ConfigChannel+0x664>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d004      	beq.n	8009212 <HAL_ADC_ConfigChannel+0x5da>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a24      	ldr	r2, [pc, #144]	; (80092a0 <HAL_ADC_ConfigChannel+0x668>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d14e      	bne.n	80092b0 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d148      	bne.n	80092b0 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009226:	d005      	beq.n	8009234 <HAL_ADC_ConfigChannel+0x5fc>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1d      	ldr	r2, [pc, #116]	; (80092a4 <HAL_ADC_ConfigChannel+0x66c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	f040 8099 	bne.w	8009366 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800923c:	d004      	beq.n	8009248 <HAL_ADC_ConfigChannel+0x610>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a13      	ldr	r2, [pc, #76]	; (8009290 <HAL_ADC_ConfigChannel+0x658>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d101      	bne.n	800924c <HAL_ADC_ConfigChannel+0x614>
 8009248:	4a12      	ldr	r2, [pc, #72]	; (8009294 <HAL_ADC_ConfigChannel+0x65c>)
 800924a:	e000      	b.n	800924e <HAL_ADC_ConfigChannel+0x616>
 800924c:	4a12      	ldr	r2, [pc, #72]	; (8009298 <HAL_ADC_ConfigChannel+0x660>)
 800924e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f7ff f97e 	bl	800855a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800925e:	4b12      	ldr	r3, [pc, #72]	; (80092a8 <HAL_ADC_ConfigChannel+0x670>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	099b      	lsrs	r3, r3, #6
 8009264:	4a11      	ldr	r2, [pc, #68]	; (80092ac <HAL_ADC_ConfigChannel+0x674>)
 8009266:	fba2 2303 	umull	r2, r3, r2, r3
 800926a:	099a      	lsrs	r2, r3, #6
 800926c:	4613      	mov	r3, r2
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009276:	e002      	b.n	800927e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	3b01      	subs	r3, #1
 800927c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f9      	bne.n	8009278 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009284:	e06f      	b.n	8009366 <HAL_ADC_ConfigChannel+0x72e>
 8009286:	bf00      	nop
 8009288:	407f0000 	.word	0x407f0000
 800928c:	80080000 	.word	0x80080000
 8009290:	50000100 	.word	0x50000100
 8009294:	50000300 	.word	0x50000300
 8009298:	50000700 	.word	0x50000700
 800929c:	c3210000 	.word	0xc3210000
 80092a0:	90c00010 	.word	0x90c00010
 80092a4:	50000600 	.word	0x50000600
 80092a8:	20000ca8 	.word	0x20000ca8
 80092ac:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a32      	ldr	r2, [pc, #200]	; (8009380 <HAL_ADC_ConfigChannel+0x748>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d125      	bne.n	8009306 <HAL_ADC_ConfigChannel+0x6ce>
 80092ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d11f      	bne.n	8009306 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a2e      	ldr	r2, [pc, #184]	; (8009384 <HAL_ADC_ConfigChannel+0x74c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d104      	bne.n	80092da <HAL_ADC_ConfigChannel+0x6a2>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a2c      	ldr	r2, [pc, #176]	; (8009388 <HAL_ADC_ConfigChannel+0x750>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d047      	beq.n	800936a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e2:	d004      	beq.n	80092ee <HAL_ADC_ConfigChannel+0x6b6>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a26      	ldr	r2, [pc, #152]	; (8009384 <HAL_ADC_ConfigChannel+0x74c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d101      	bne.n	80092f2 <HAL_ADC_ConfigChannel+0x6ba>
 80092ee:	4a27      	ldr	r2, [pc, #156]	; (800938c <HAL_ADC_ConfigChannel+0x754>)
 80092f0:	e000      	b.n	80092f4 <HAL_ADC_ConfigChannel+0x6bc>
 80092f2:	4a27      	ldr	r2, [pc, #156]	; (8009390 <HAL_ADC_ConfigChannel+0x758>)
 80092f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092fc:	4619      	mov	r1, r3
 80092fe:	4610      	mov	r0, r2
 8009300:	f7ff f92b 	bl	800855a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009304:	e031      	b.n	800936a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a22      	ldr	r2, [pc, #136]	; (8009394 <HAL_ADC_ConfigChannel+0x75c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d12d      	bne.n	800936c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d127      	bne.n	800936c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a18      	ldr	r2, [pc, #96]	; (8009384 <HAL_ADC_ConfigChannel+0x74c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d022      	beq.n	800936c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800932e:	d004      	beq.n	800933a <HAL_ADC_ConfigChannel+0x702>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a13      	ldr	r2, [pc, #76]	; (8009384 <HAL_ADC_ConfigChannel+0x74c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d101      	bne.n	800933e <HAL_ADC_ConfigChannel+0x706>
 800933a:	4a14      	ldr	r2, [pc, #80]	; (800938c <HAL_ADC_ConfigChannel+0x754>)
 800933c:	e000      	b.n	8009340 <HAL_ADC_ConfigChannel+0x708>
 800933e:	4a14      	ldr	r2, [pc, #80]	; (8009390 <HAL_ADC_ConfigChannel+0x758>)
 8009340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7ff f905 	bl	800855a <LL_ADC_SetCommonPathInternalCh>
 8009350:	e00c      	b.n	800936c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009356:	f043 0220 	orr.w	r2, r3, #32
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009364:	e002      	b.n	800936c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009366:	bf00      	nop
 8009368:	e000      	b.n	800936c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800936a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009374:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009378:	4618      	mov	r0, r3
 800937a:	3798      	adds	r7, #152	; 0x98
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	c7520000 	.word	0xc7520000
 8009384:	50000100 	.word	0x50000100
 8009388:	50000500 	.word	0x50000500
 800938c:	50000300 	.word	0x50000300
 8009390:	50000700 	.word	0x50000700
 8009394:	cb840000 	.word	0xcb840000

08009398 <LL_ADC_IsEnabled>:
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <LL_ADC_IsEnabled+0x18>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e000      	b.n	80093b2 <LL_ADC_IsEnabled+0x1a>
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <LL_ADC_REG_IsConversionOngoing>:
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d101      	bne.n	80093d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b0a1      	sub	sp, #132	; 0x84
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80093fe:	2302      	movs	r3, #2
 8009400:	e0e3      	b.n	80095ca <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009412:	d102      	bne.n	800941a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009414:	4b6f      	ldr	r3, [pc, #444]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009416:	60bb      	str	r3, [r7, #8]
 8009418:	e009      	b.n	800942e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a6e      	ldr	r2, [pc, #440]	; (80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d102      	bne.n	800942a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009424:	4b6d      	ldr	r3, [pc, #436]	; (80095dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009426:	60bb      	str	r3, [r7, #8]
 8009428:	e001      	b.n	800942e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800942a:	2300      	movs	r3, #0
 800942c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10b      	bne.n	800944c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009438:	f043 0220 	orr.w	r2, r3, #32
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e0be      	b.n	80095ca <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff ffb5 	bl	80093be <LL_ADC_REG_IsConversionOngoing>
 8009454:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff ffaf 	bl	80093be <LL_ADC_REG_IsConversionOngoing>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 80a0 	bne.w	80095a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800946a:	2b00      	cmp	r3, #0
 800946c:	f040 809c 	bne.w	80095a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009478:	d004      	beq.n	8009484 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a55      	ldr	r2, [pc, #340]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d101      	bne.n	8009488 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009484:	4b56      	ldr	r3, [pc, #344]	; (80095e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009486:	e000      	b.n	800948a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009488:	4b56      	ldr	r3, [pc, #344]	; (80095e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800948a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d04b      	beq.n	800952c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	6859      	ldr	r1, [r3, #4]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094a6:	035b      	lsls	r3, r3, #13
 80094a8:	430b      	orrs	r3, r1
 80094aa:	431a      	orrs	r2, r3
 80094ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094b8:	d004      	beq.n	80094c4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a45      	ldr	r2, [pc, #276]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d10f      	bne.n	80094e4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80094c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80094c8:	f7ff ff66 	bl	8009398 <LL_ADC_IsEnabled>
 80094cc:	4604      	mov	r4, r0
 80094ce:	4841      	ldr	r0, [pc, #260]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80094d0:	f7ff ff62 	bl	8009398 <LL_ADC_IsEnabled>
 80094d4:	4603      	mov	r3, r0
 80094d6:	4323      	orrs	r3, r4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bf0c      	ite	eq
 80094dc:	2301      	moveq	r3, #1
 80094de:	2300      	movne	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	e012      	b.n	800950a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80094e4:	483c      	ldr	r0, [pc, #240]	; (80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80094e6:	f7ff ff57 	bl	8009398 <LL_ADC_IsEnabled>
 80094ea:	4604      	mov	r4, r0
 80094ec:	483b      	ldr	r0, [pc, #236]	; (80095dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80094ee:	f7ff ff53 	bl	8009398 <LL_ADC_IsEnabled>
 80094f2:	4603      	mov	r3, r0
 80094f4:	431c      	orrs	r4, r3
 80094f6:	483c      	ldr	r0, [pc, #240]	; (80095e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80094f8:	f7ff ff4e 	bl	8009398 <LL_ADC_IsEnabled>
 80094fc:	4603      	mov	r3, r0
 80094fe:	4323      	orrs	r3, r4
 8009500:	2b00      	cmp	r3, #0
 8009502:	bf0c      	ite	eq
 8009504:	2301      	moveq	r3, #1
 8009506:	2300      	movne	r3, #0
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d056      	beq.n	80095bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800950e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009516:	f023 030f 	bic.w	r3, r3, #15
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	6811      	ldr	r1, [r2, #0]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	6892      	ldr	r2, [r2, #8]
 8009522:	430a      	orrs	r2, r1
 8009524:	431a      	orrs	r2, r3
 8009526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009528:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800952a:	e047      	b.n	80095bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800952c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009536:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009540:	d004      	beq.n	800954c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a23      	ldr	r2, [pc, #140]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d10f      	bne.n	800956c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800954c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009550:	f7ff ff22 	bl	8009398 <LL_ADC_IsEnabled>
 8009554:	4604      	mov	r4, r0
 8009556:	481f      	ldr	r0, [pc, #124]	; (80095d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009558:	f7ff ff1e 	bl	8009398 <LL_ADC_IsEnabled>
 800955c:	4603      	mov	r3, r0
 800955e:	4323      	orrs	r3, r4
 8009560:	2b00      	cmp	r3, #0
 8009562:	bf0c      	ite	eq
 8009564:	2301      	moveq	r3, #1
 8009566:	2300      	movne	r3, #0
 8009568:	b2db      	uxtb	r3, r3
 800956a:	e012      	b.n	8009592 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800956c:	481a      	ldr	r0, [pc, #104]	; (80095d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800956e:	f7ff ff13 	bl	8009398 <LL_ADC_IsEnabled>
 8009572:	4604      	mov	r4, r0
 8009574:	4819      	ldr	r0, [pc, #100]	; (80095dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009576:	f7ff ff0f 	bl	8009398 <LL_ADC_IsEnabled>
 800957a:	4603      	mov	r3, r0
 800957c:	431c      	orrs	r4, r3
 800957e:	481a      	ldr	r0, [pc, #104]	; (80095e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009580:	f7ff ff0a 	bl	8009398 <LL_ADC_IsEnabled>
 8009584:	4603      	mov	r3, r0
 8009586:	4323      	orrs	r3, r4
 8009588:	2b00      	cmp	r3, #0
 800958a:	bf0c      	ite	eq
 800958c:	2301      	moveq	r3, #1
 800958e:	2300      	movne	r3, #0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d012      	beq.n	80095bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800959e:	f023 030f 	bic.w	r3, r3, #15
 80095a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80095a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80095a6:	e009      	b.n	80095bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ac:	f043 0220 	orr.w	r2, r3, #32
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80095ba:	e000      	b.n	80095be <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80095bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80095c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3784      	adds	r7, #132	; 0x84
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd90      	pop	{r4, r7, pc}
 80095d2:	bf00      	nop
 80095d4:	50000100 	.word	0x50000100
 80095d8:	50000400 	.word	0x50000400
 80095dc:	50000500 	.word	0x50000500
 80095e0:	50000300 	.word	0x50000300
 80095e4:	50000700 	.word	0x50000700
 80095e8:	50000600 	.word	0x50000600

080095ec <LL_EXTI_EnableIT_0_31>:
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80095f4:	4b05      	ldr	r3, [pc, #20]	; (800960c <LL_EXTI_EnableIT_0_31+0x20>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	4904      	ldr	r1, [pc, #16]	; (800960c <LL_EXTI_EnableIT_0_31+0x20>)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	600b      	str	r3, [r1, #0]
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40010400 	.word	0x40010400

08009610 <LL_EXTI_EnableIT_32_63>:
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <LL_EXTI_EnableIT_32_63+0x20>)
 800961a:	6a1a      	ldr	r2, [r3, #32]
 800961c:	4904      	ldr	r1, [pc, #16]	; (8009630 <LL_EXTI_EnableIT_32_63+0x20>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4313      	orrs	r3, r2
 8009622:	620b      	str	r3, [r1, #32]
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	40010400 	.word	0x40010400

08009634 <LL_EXTI_DisableIT_0_31>:
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <LL_EXTI_DisableIT_0_31+0x24>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	43db      	mvns	r3, r3
 8009644:	4904      	ldr	r1, [pc, #16]	; (8009658 <LL_EXTI_DisableIT_0_31+0x24>)
 8009646:	4013      	ands	r3, r2
 8009648:	600b      	str	r3, [r1, #0]
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40010400 	.word	0x40010400

0800965c <LL_EXTI_DisableIT_32_63>:
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <LL_EXTI_DisableIT_32_63+0x24>)
 8009666:	6a1a      	ldr	r2, [r3, #32]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	43db      	mvns	r3, r3
 800966c:	4904      	ldr	r1, [pc, #16]	; (8009680 <LL_EXTI_DisableIT_32_63+0x24>)
 800966e:	4013      	ands	r3, r2
 8009670:	620b      	str	r3, [r1, #32]
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	40010400 	.word	0x40010400

08009684 <LL_EXTI_EnableEvent_0_31>:
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800968c:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	4904      	ldr	r1, [pc, #16]	; (80096a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4313      	orrs	r3, r2
 8009696:	604b      	str	r3, [r1, #4]
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	40010400 	.word	0x40010400

080096a8 <LL_EXTI_EnableEvent_32_63>:
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80096b0:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80096b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096b4:	4904      	ldr	r1, [pc, #16]	; (80096c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	40010400 	.word	0x40010400

080096cc <LL_EXTI_DisableEvent_0_31>:
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80096d4:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	43db      	mvns	r3, r3
 80096dc:	4904      	ldr	r1, [pc, #16]	; (80096f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80096de:	4013      	ands	r3, r2
 80096e0:	604b      	str	r3, [r1, #4]
}
 80096e2:	bf00      	nop
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	40010400 	.word	0x40010400

080096f4 <LL_EXTI_DisableEvent_32_63>:
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80096fc:	4b06      	ldr	r3, [pc, #24]	; (8009718 <LL_EXTI_DisableEvent_32_63+0x24>)
 80096fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	43db      	mvns	r3, r3
 8009704:	4904      	ldr	r1, [pc, #16]	; (8009718 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009706:	4013      	ands	r3, r2
 8009708:	624b      	str	r3, [r1, #36]	; 0x24
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	40010400 	.word	0x40010400

0800971c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009724:	4b05      	ldr	r3, [pc, #20]	; (800973c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	4904      	ldr	r1, [pc, #16]	; (800973c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4313      	orrs	r3, r2
 800972e:	608b      	str	r3, [r1, #8]
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	40010400 	.word	0x40010400

08009740 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800974a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800974c:	4904      	ldr	r1, [pc, #16]	; (8009760 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4313      	orrs	r3, r2
 8009752:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	40010400 	.word	0x40010400

08009764 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800976c:	4b06      	ldr	r3, [pc, #24]	; (8009788 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	43db      	mvns	r3, r3
 8009774:	4904      	ldr	r1, [pc, #16]	; (8009788 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009776:	4013      	ands	r3, r2
 8009778:	608b      	str	r3, [r1, #8]
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40010400 	.word	0x40010400

0800978c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009794:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	43db      	mvns	r3, r3
 800979c:	4904      	ldr	r1, [pc, #16]	; (80097b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800979e:	4013      	ands	r3, r2
 80097a0:	628b      	str	r3, [r1, #40]	; 0x28
}
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	40010400 	.word	0x40010400

080097b4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80097bc:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	4904      	ldr	r1, [pc, #16]	; (80097d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60cb      	str	r3, [r1, #12]
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	40010400 	.word	0x40010400

080097d8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4904      	ldr	r1, [pc, #16]	; (80097f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	40010400 	.word	0x40010400

080097fc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	43db      	mvns	r3, r3
 800980c:	4904      	ldr	r1, [pc, #16]	; (8009820 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800980e:	4013      	ands	r3, r2
 8009810:	60cb      	str	r3, [r1, #12]
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	40010400 	.word	0x40010400

08009824 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800982c:	4b06      	ldr	r3, [pc, #24]	; (8009848 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800982e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	43db      	mvns	r3, r3
 8009834:	4904      	ldr	r1, [pc, #16]	; (8009848 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009836:	4013      	ands	r3, r2
 8009838:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800983a:	bf00      	nop
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40010400 	.word	0x40010400

0800984c <LL_EXTI_ClearFlag_0_31>:
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009854:	4a04      	ldr	r2, [pc, #16]	; (8009868 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6153      	str	r3, [r2, #20]
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40010400 	.word	0x40010400

0800986c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009874:	4a04      	ldr	r2, [pc, #16]	; (8009888 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6353      	str	r3, [r2, #52]	; 0x34
}
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40010400 	.word	0x40010400

0800988c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	77fb      	strb	r3, [r7, #31]
 80098a6:	e180      	b.n	8009baa <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098b6:	d102      	bne.n	80098be <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	77fb      	strb	r3, [r7, #31]
 80098bc:	e175      	b.n	8009baa <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	7f5b      	ldrb	r3, [r3, #29]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d108      	bne.n	80098da <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fd fa1b 	bl	8006d10 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e4:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4b98      	ldr	r3, [pc, #608]	; (8009b6c <HAL_COMP_Init+0x2e0>)
 800990c:	4013      	ands	r3, r2
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	6979      	ldr	r1, [r7, #20]
 8009914:	430b      	orrs	r3, r1
 8009916:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d015      	beq.n	8009952 <HAL_COMP_Init+0xc6>
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d112      	bne.n	8009952 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800992c:	4b90      	ldr	r3, [pc, #576]	; (8009b70 <HAL_COMP_Init+0x2e4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	099b      	lsrs	r3, r3, #6
 8009932:	4a90      	ldr	r2, [pc, #576]	; (8009b74 <HAL_COMP_Init+0x2e8>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	099a      	lsrs	r2, r3, #6
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009944:	e002      	b.n	800994c <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3b01      	subs	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1f9      	bne.n	8009946 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a88      	ldr	r2, [pc, #544]	; (8009b78 <HAL_COMP_Init+0x2ec>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d028      	beq.n	80099ae <HAL_COMP_Init+0x122>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a86      	ldr	r2, [pc, #536]	; (8009b7c <HAL_COMP_Init+0x2f0>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d020      	beq.n	80099a8 <HAL_COMP_Init+0x11c>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a85      	ldr	r2, [pc, #532]	; (8009b80 <HAL_COMP_Init+0x2f4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d018      	beq.n	80099a2 <HAL_COMP_Init+0x116>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a83      	ldr	r2, [pc, #524]	; (8009b84 <HAL_COMP_Init+0x2f8>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d010      	beq.n	800999c <HAL_COMP_Init+0x110>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a82      	ldr	r2, [pc, #520]	; (8009b88 <HAL_COMP_Init+0x2fc>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d008      	beq.n	8009996 <HAL_COMP_Init+0x10a>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a80      	ldr	r2, [pc, #512]	; (8009b8c <HAL_COMP_Init+0x300>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d101      	bne.n	8009992 <HAL_COMP_Init+0x106>
 800998e:	2301      	movs	r3, #1
 8009990:	e00f      	b.n	80099b2 <HAL_COMP_Init+0x126>
 8009992:	2302      	movs	r3, #2
 8009994:	e00d      	b.n	80099b2 <HAL_COMP_Init+0x126>
 8009996:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800999a:	e00a      	b.n	80099b2 <HAL_COMP_Init+0x126>
 800999c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099a0:	e007      	b.n	80099b2 <HAL_COMP_Init+0x126>
 80099a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80099a6:	e004      	b.n	80099b2 <HAL_COMP_Init+0x126>
 80099a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099ac:	e001      	b.n	80099b2 <HAL_COMP_Init+0x126>
 80099ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099b2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 80b6 	beq.w	8009b2e <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	f003 0310 	and.w	r3, r3, #16
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d011      	beq.n	80099f2 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a6e      	ldr	r2, [pc, #440]	; (8009b8c <HAL_COMP_Init+0x300>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d004      	beq.n	80099e2 <HAL_COMP_Init+0x156>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a6c      	ldr	r2, [pc, #432]	; (8009b90 <HAL_COMP_Init+0x304>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d103      	bne.n	80099ea <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80099e2:	6938      	ldr	r0, [r7, #16]
 80099e4:	f7ff feac 	bl	8009740 <LL_EXTI_EnableRisingTrig_32_63>
 80099e8:	e014      	b.n	8009a14 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80099ea:	6938      	ldr	r0, [r7, #16]
 80099ec:	f7ff fe96 	bl	800971c <LL_EXTI_EnableRisingTrig_0_31>
 80099f0:	e010      	b.n	8009a14 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a65      	ldr	r2, [pc, #404]	; (8009b8c <HAL_COMP_Init+0x300>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d004      	beq.n	8009a06 <HAL_COMP_Init+0x17a>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a63      	ldr	r2, [pc, #396]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d103      	bne.n	8009a0e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009a06:	6938      	ldr	r0, [r7, #16]
 8009a08:	f7ff fec0 	bl	800978c <LL_EXTI_DisableRisingTrig_32_63>
 8009a0c:	e002      	b.n	8009a14 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009a0e:	6938      	ldr	r0, [r7, #16]
 8009a10:	f7ff fea8 	bl	8009764 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d011      	beq.n	8009a44 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a59      	ldr	r2, [pc, #356]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_COMP_Init+0x1a8>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a58      	ldr	r2, [pc, #352]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d103      	bne.n	8009a3c <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009a34:	6938      	ldr	r0, [r7, #16]
 8009a36:	f7ff fecf 	bl	80097d8 <LL_EXTI_EnableFallingTrig_32_63>
 8009a3a:	e014      	b.n	8009a66 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009a3c:	6938      	ldr	r0, [r7, #16]
 8009a3e:	f7ff feb9 	bl	80097b4 <LL_EXTI_EnableFallingTrig_0_31>
 8009a42:	e010      	b.n	8009a66 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a50      	ldr	r2, [pc, #320]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d004      	beq.n	8009a58 <HAL_COMP_Init+0x1cc>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a4f      	ldr	r2, [pc, #316]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d103      	bne.n	8009a60 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009a58:	6938      	ldr	r0, [r7, #16]
 8009a5a:	f7ff fee3 	bl	8009824 <LL_EXTI_DisableFallingTrig_32_63>
 8009a5e:	e002      	b.n	8009a66 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009a60:	6938      	ldr	r0, [r7, #16]
 8009a62:	f7ff fecb 	bl	80097fc <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a48      	ldr	r2, [pc, #288]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d004      	beq.n	8009a7a <HAL_COMP_Init+0x1ee>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a46      	ldr	r2, [pc, #280]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d103      	bne.n	8009a82 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f7ff fef6 	bl	800986c <LL_EXTI_ClearFlag_32_63>
 8009a80:	e002      	b.n	8009a88 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009a82:	6938      	ldr	r0, [r7, #16]
 8009a84:	f7ff fee2 	bl	800984c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d011      	beq.n	8009ab8 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a3c      	ldr	r2, [pc, #240]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d004      	beq.n	8009aa8 <HAL_COMP_Init+0x21c>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a3b      	ldr	r2, [pc, #236]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d103      	bne.n	8009ab0 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009aa8:	6938      	ldr	r0, [r7, #16]
 8009aaa:	f7ff fdfd 	bl	80096a8 <LL_EXTI_EnableEvent_32_63>
 8009aae:	e014      	b.n	8009ada <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009ab0:	6938      	ldr	r0, [r7, #16]
 8009ab2:	f7ff fde7 	bl	8009684 <LL_EXTI_EnableEvent_0_31>
 8009ab6:	e010      	b.n	8009ada <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a33      	ldr	r2, [pc, #204]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d004      	beq.n	8009acc <HAL_COMP_Init+0x240>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a32      	ldr	r2, [pc, #200]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d103      	bne.n	8009ad4 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009acc:	6938      	ldr	r0, [r7, #16]
 8009ace:	f7ff fe11 	bl	80096f4 <LL_EXTI_DisableEvent_32_63>
 8009ad2:	e002      	b.n	8009ada <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009ad4:	6938      	ldr	r0, [r7, #16]
 8009ad6:	f7ff fdf9 	bl	80096cc <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d011      	beq.n	8009b0a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a28      	ldr	r2, [pc, #160]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d004      	beq.n	8009afa <HAL_COMP_Init+0x26e>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a26      	ldr	r2, [pc, #152]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d103      	bne.n	8009b02 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009afa:	6938      	ldr	r0, [r7, #16]
 8009afc:	f7ff fd88 	bl	8009610 <LL_EXTI_EnableIT_32_63>
 8009b00:	e04b      	b.n	8009b9a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009b02:	6938      	ldr	r0, [r7, #16]
 8009b04:	f7ff fd72 	bl	80095ec <LL_EXTI_EnableIT_0_31>
 8009b08:	e047      	b.n	8009b9a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1f      	ldr	r2, [pc, #124]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d004      	beq.n	8009b1e <HAL_COMP_Init+0x292>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a1d      	ldr	r2, [pc, #116]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d103      	bne.n	8009b26 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009b1e:	6938      	ldr	r0, [r7, #16]
 8009b20:	f7ff fd9c 	bl	800965c <LL_EXTI_DisableIT_32_63>
 8009b24:	e039      	b.n	8009b9a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009b26:	6938      	ldr	r0, [r7, #16]
 8009b28:	f7ff fd84 	bl	8009634 <LL_EXTI_DisableIT_0_31>
 8009b2c:	e035      	b.n	8009b9a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d004      	beq.n	8009b42 <HAL_COMP_Init+0x2b6>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a14      	ldr	r2, [pc, #80]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d103      	bne.n	8009b4a <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009b42:	6938      	ldr	r0, [r7, #16]
 8009b44:	f7ff fdd6 	bl	80096f4 <LL_EXTI_DisableEvent_32_63>
 8009b48:	e002      	b.n	8009b50 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009b4a:	6938      	ldr	r0, [r7, #16]
 8009b4c:	f7ff fdbe 	bl	80096cc <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a0d      	ldr	r2, [pc, #52]	; (8009b8c <HAL_COMP_Init+0x300>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d004      	beq.n	8009b64 <HAL_COMP_Init+0x2d8>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a0c      	ldr	r2, [pc, #48]	; (8009b90 <HAL_COMP_Init+0x304>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d117      	bne.n	8009b94 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009b64:	6938      	ldr	r0, [r7, #16]
 8009b66:	f7ff fd79 	bl	800965c <LL_EXTI_DisableIT_32_63>
 8009b6a:	e016      	b.n	8009b9a <HAL_COMP_Init+0x30e>
 8009b6c:	ff007e0f 	.word	0xff007e0f
 8009b70:	20000ca8 	.word	0x20000ca8
 8009b74:	053e2d63 	.word	0x053e2d63
 8009b78:	40010200 	.word	0x40010200
 8009b7c:	40010204 	.word	0x40010204
 8009b80:	40010208 	.word	0x40010208
 8009b84:	4001020c 	.word	0x4001020c
 8009b88:	40010210 	.word	0x40010210
 8009b8c:	40010214 	.word	0x40010214
 8009b90:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009b94:	6938      	ldr	r0, [r7, #16]
 8009b96:	f7ff fd4d 	bl	8009634 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	7f5b      	ldrb	r3, [r3, #29]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d102      	bne.n	8009baa <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009baa:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3720      	adds	r7, #32
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <__NVIC_SetPriorityGrouping>:
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bc4:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009be6:	4a04      	ldr	r2, [pc, #16]	; (8009bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	60d3      	str	r3, [r2, #12]
}
 8009bec:	bf00      	nop
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	e000ed00 	.word	0xe000ed00

08009bfc <__NVIC_GetPriorityGrouping>:
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <__NVIC_GetPriorityGrouping+0x18>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	0a1b      	lsrs	r3, r3, #8
 8009c06:	f003 0307 	and.w	r3, r3, #7
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	e000ed00 	.word	0xe000ed00

08009c18 <__NVIC_EnableIRQ>:
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	db0b      	blt.n	8009c42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	f003 021f 	and.w	r2, r3, #31
 8009c30:	4907      	ldr	r1, [pc, #28]	; (8009c50 <__NVIC_EnableIRQ+0x38>)
 8009c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	2001      	movs	r0, #1
 8009c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8009c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	e000e100 	.word	0xe000e100

08009c54 <__NVIC_DisableIRQ>:
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	db10      	blt.n	8009c88 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	f003 021f 	and.w	r2, r3, #31
 8009c6c:	4909      	ldr	r1, [pc, #36]	; (8009c94 <__NVIC_DisableIRQ+0x40>)
 8009c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	2001      	movs	r0, #1
 8009c76:	fa00 f202 	lsl.w	r2, r0, r2
 8009c7a:	3320      	adds	r3, #32
 8009c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c84:	f3bf 8f6f 	isb	sy
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	e000e100 	.word	0xe000e100

08009c98 <__NVIC_SetPriority>:
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	6039      	str	r1, [r7, #0]
 8009ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	db0a      	blt.n	8009cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	490c      	ldr	r1, [pc, #48]	; (8009ce4 <__NVIC_SetPriority+0x4c>)
 8009cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cb6:	0112      	lsls	r2, r2, #4
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	440b      	add	r3, r1
 8009cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009cc0:	e00a      	b.n	8009cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	4908      	ldr	r1, [pc, #32]	; (8009ce8 <__NVIC_SetPriority+0x50>)
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	3b04      	subs	r3, #4
 8009cd0:	0112      	lsls	r2, r2, #4
 8009cd2:	b2d2      	uxtb	r2, r2
 8009cd4:	440b      	add	r3, r1
 8009cd6:	761a      	strb	r2, [r3, #24]
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	e000e100 	.word	0xe000e100
 8009ce8:	e000ed00 	.word	0xe000ed00

08009cec <NVIC_EncodePriority>:
{
 8009cec:	b480      	push	{r7}
 8009cee:	b089      	sub	sp, #36	; 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f003 0307 	and.w	r3, r3, #7
 8009cfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f1c3 0307 	rsb	r3, r3, #7
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	bf28      	it	cs
 8009d0a:	2304      	movcs	r3, #4
 8009d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	3304      	adds	r3, #4
 8009d12:	2b06      	cmp	r3, #6
 8009d14:	d902      	bls.n	8009d1c <NVIC_EncodePriority+0x30>
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	3b03      	subs	r3, #3
 8009d1a:	e000      	b.n	8009d1e <NVIC_EncodePriority+0x32>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	43da      	mvns	r2, r3
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	401a      	ands	r2, r3
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3e:	43d9      	mvns	r1, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d44:	4313      	orrs	r3, r2
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3724      	adds	r7, #36	; 0x24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
	...

08009d54 <SysTick_Config>:
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d64:	d301      	bcc.n	8009d6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009d66:	2301      	movs	r3, #1
 8009d68:	e00f      	b.n	8009d8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d6a:	4a0a      	ldr	r2, [pc, #40]	; (8009d94 <SysTick_Config+0x40>)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d72:	210f      	movs	r1, #15
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d78:	f7ff ff8e 	bl	8009c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d7c:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <SysTick_Config+0x40>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d82:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <SysTick_Config+0x40>)
 8009d84:	2207      	movs	r2, #7
 8009d86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	e000e010 	.word	0xe000e010

08009d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff ff07 	bl	8009bb4 <__NVIC_SetPriorityGrouping>
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b086      	sub	sp, #24
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	4603      	mov	r3, r0
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009dbc:	f7ff ff1e 	bl	8009bfc <__NVIC_GetPriorityGrouping>
 8009dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	6978      	ldr	r0, [r7, #20]
 8009dc8:	f7ff ff90 	bl	8009cec <NVIC_EncodePriority>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff ff5f 	bl	8009c98 <__NVIC_SetPriority>
}
 8009dda:	bf00      	nop
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	4603      	mov	r3, r0
 8009dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff ff11 	bl	8009c18 <__NVIC_EnableIRQ>
}
 8009df6:	bf00      	nop
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	4603      	mov	r3, r0
 8009e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7ff ff21 	bl	8009c54 <__NVIC_DisableIRQ>
}
 8009e12:	bf00      	nop
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff ff96 	bl	8009d54 <SysTick_Config>
 8009e28:	4603      	mov	r3, r0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e014      	b.n	8009e6e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	791b      	ldrb	r3, [r3, #4]
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7fd f801 	bl	8006e5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	795b      	ldrb	r3, [r3, #5]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <HAL_DAC_Start+0x16>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e043      	b.n	8009f14 <HAL_DAC_Start+0x9e>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6819      	ldr	r1, [r3, #0]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	f003 0310 	and.w	r3, r3, #16
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	409a      	lsls	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	f7fe fb1d 	bl	80084f0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10f      	bne.n	8009edc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d11d      	bne.n	8009f06 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f042 0201 	orr.w	r2, r2, #1
 8009ed8:	605a      	str	r2, [r3, #4]
 8009eda:	e014      	b.n	8009f06 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2102      	movs	r1, #2
 8009eee:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d107      	bne.n	8009f06 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0202 	orr.w	r2, r2, #2
 8009f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	795b      	ldrb	r3, [r3, #5]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d101      	bne.n	8009f3a <HAL_DAC_Start_DMA+0x1e>
 8009f36:	2302      	movs	r3, #2
 8009f38:	e0a1      	b.n	800a07e <HAL_DAC_Start_DMA+0x162>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2202      	movs	r2, #2
 8009f44:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d12a      	bne.n	8009fa2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	4a4d      	ldr	r2, [pc, #308]	; (800a088 <HAL_DAC_Start_DMA+0x16c>)
 8009f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	4a4c      	ldr	r2, [pc, #304]	; (800a08c <HAL_DAC_Start_DMA+0x170>)
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	4a4b      	ldr	r2, [pc, #300]	; (800a090 <HAL_DAC_Start_DMA+0x174>)
 8009f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f72:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d009      	beq.n	8009f8e <HAL_DAC_Start_DMA+0x72>
 8009f7a:	2b08      	cmp	r3, #8
 8009f7c:	d00c      	beq.n	8009f98 <HAL_DAC_Start_DMA+0x7c>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d000      	beq.n	8009f84 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009f82:	e039      	b.n	8009ff8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	613b      	str	r3, [r7, #16]
        break;
 8009f8c:	e034      	b.n	8009ff8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	330c      	adds	r3, #12
 8009f94:	613b      	str	r3, [r7, #16]
        break;
 8009f96:	e02f      	b.n	8009ff8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3310      	adds	r3, #16
 8009f9e:	613b      	str	r3, [r7, #16]
        break;
 8009fa0:	e02a      	b.n	8009ff8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	4a3b      	ldr	r2, [pc, #236]	; (800a094 <HAL_DAC_Start_DMA+0x178>)
 8009fa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	4a3a      	ldr	r2, [pc, #232]	; (800a098 <HAL_DAC_Start_DMA+0x17c>)
 8009fb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	4a39      	ldr	r2, [pc, #228]	; (800a09c <HAL_DAC_Start_DMA+0x180>)
 8009fb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009fc8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d009      	beq.n	8009fe4 <HAL_DAC_Start_DMA+0xc8>
 8009fd0:	2b08      	cmp	r3, #8
 8009fd2:	d00c      	beq.n	8009fee <HAL_DAC_Start_DMA+0xd2>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d000      	beq.n	8009fda <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009fd8:	e00e      	b.n	8009ff8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3314      	adds	r3, #20
 8009fe0:	613b      	str	r3, [r7, #16]
        break;
 8009fe2:	e009      	b.n	8009ff8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	3318      	adds	r3, #24
 8009fea:	613b      	str	r3, [r7, #16]
        break;
 8009fec:	e004      	b.n	8009ff8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	331c      	adds	r3, #28
 8009ff4:	613b      	str	r3, [r7, #16]
        break;
 8009ff6:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d111      	bne.n	800a022 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a00c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6898      	ldr	r0, [r3, #8]
 800a012:	6879      	ldr	r1, [r7, #4]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	f000 fbd2 	bl	800a7c0 <HAL_DMA_Start_IT>
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]
 800a020:	e010      	b.n	800a044 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a030:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68d8      	ldr	r0, [r3, #12]
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	f000 fbc0 	bl	800a7c0 <HAL_DMA_Start_IT>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10f      	bne.n	800a070 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6819      	ldr	r1, [r3, #0]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2201      	movs	r2, #1
 800a05e:	409a      	lsls	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a068:	2001      	movs	r0, #1
 800a06a:	f7fe fa41 	bl	80084f0 <HAL_Delay>
 800a06e:	e005      	b.n	800a07c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	f043 0204 	orr.w	r2, r3, #4
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	0800a55d 	.word	0x0800a55d
 800a08c:	0800a57f 	.word	0x0800a57f
 800a090:	0800a59b 	.word	0x0800a59b
 800a094:	0800a605 	.word	0x0800a605
 800a098:	0800a627 	.word	0x0800a627
 800a09c:	0800a643 	.word	0x0800a643

0800a0a0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6819      	ldr	r1, [r3, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	f003 0310 	and.w	r3, r3, #16
 800a0b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a0be:	43da      	mvns	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	400a      	ands	r2, r1
 800a0c6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6819      	ldr	r1, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0da:	43da      	mvns	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	400a      	ands	r2, r1
 800a0e2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	f7fe fa03 	bl	80084f0 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10f      	bne.n	800a110 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fbde 	bl	800a8b6 <HAL_DMA_Abort>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	e00e      	b.n	800a12e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fbce 	bl	800a8b6 <HAL_DMA_Abort>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a12c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2204      	movs	r2, #4
 800a138:	711a      	strb	r2, [r3, #4]
 800a13a:	e002      	b.n	800a142 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d105      	bne.n	800a17c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4413      	add	r3, r2
 800a176:	3308      	adds	r3, #8
 800a178:	617b      	str	r3, [r7, #20]
 800a17a:	e004      	b.n	800a186 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4413      	add	r3, r2
 800a182:	3314      	adds	r3, #20
 800a184:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	461a      	mov	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	371c      	adds	r7, #28
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d103      	bne.n	800a1f0 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	e002      	b.n	800a1f6 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
	...

0800a204 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	; 0x28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a210:	2300      	movs	r3, #0
 800a212:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	795b      	ldrb	r3, [r3, #5]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <HAL_DAC_ConfigChannel+0x1c>
 800a21c:	2302      	movs	r3, #2
 800a21e:	e194      	b.n	800a54a <HAL_DAC_ConfigChannel+0x346>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2201      	movs	r2, #1
 800a224:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2202      	movs	r2, #2
 800a22a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	2b04      	cmp	r3, #4
 800a232:	d174      	bne.n	800a31e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d137      	bne.n	800a2aa <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a23a:	f7fe f94d 	bl	80084d8 <HAL_GetTick>
 800a23e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a240:	e011      	b.n	800a266 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a242:	f7fe f949 	bl	80084d8 <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d90a      	bls.n	800a266 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	f043 0208 	orr.w	r2, r3, #8
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2203      	movs	r2, #3
 800a260:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e171      	b.n	800a54a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1e6      	bne.n	800a242 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a274:	2001      	movs	r0, #1
 800a276:	f7fe f93b 	bl	80084f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a282:	641a      	str	r2, [r3, #64]	; 0x40
 800a284:	e01e      	b.n	800a2c4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a286:	f7fe f927 	bl	80084d8 <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	2b01      	cmp	r3, #1
 800a292:	d90a      	bls.n	800a2aa <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f043 0208 	orr.w	r2, r3, #8
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e14f      	b.n	800a54a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dbe8      	blt.n	800a286 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a2b4:	2001      	movs	r0, #1
 800a2b6:	f7fe f91b 	bl	80084f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f003 0310 	and.w	r3, r3, #16
 800a2d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a2d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d8:	43db      	mvns	r3, r3
 800a2da:	ea02 0103 	and.w	r1, r2, r3
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f003 0310 	and.w	r3, r3, #16
 800a2e8:	409a      	lsls	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f003 0310 	and.w	r3, r3, #16
 800a2fe:	21ff      	movs	r1, #255	; 0xff
 800a300:	fa01 f303 	lsl.w	r3, r1, r3
 800a304:	43db      	mvns	r3, r3
 800a306:	ea02 0103 	and.w	r1, r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f003 0310 	and.w	r3, r3, #16
 800a314:	409a      	lsls	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d11d      	bne.n	800a362 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f003 0310 	and.w	r3, r3, #16
 800a334:	221f      	movs	r2, #31
 800a336:	fa02 f303 	lsl.w	r3, r2, r3
 800a33a:	43db      	mvns	r3, r3
 800a33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33e:	4013      	ands	r3, r2
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f003 0310 	and.w	r3, r3, #16
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	fa02 f303 	lsl.w	r3, r2, r3
 800a354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a356:	4313      	orrs	r3, r2
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a360:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a368:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2207      	movs	r2, #7
 800a372:	fa02 f303 	lsl.w	r3, r2, r3
 800a376:	43db      	mvns	r3, r3
 800a378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a37a:	4013      	ands	r3, r2
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	623b      	str	r3, [r7, #32]
 800a38e:	e011      	b.n	800a3b4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a39c:	2301      	movs	r3, #1
 800a39e:	623b      	str	r3, [r7, #32]
 800a3a0:	e008      	b.n	800a3b4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	623b      	str	r3, [r7, #32]
 800a3ae:	e001      	b.n	800a3b4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	6a3a      	ldr	r2, [r7, #32]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f003 0310 	and.w	r3, r3, #16
 800a3ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d2:	43db      	mvns	r3, r3
 800a3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	791b      	ldrb	r3, [r3, #4]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d102      	bne.n	800a3e8 <HAL_DAC_ConfigChannel+0x1e4>
 800a3e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3e6:	e000      	b.n	800a3ea <HAL_DAC_ConfigChannel+0x1e6>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f003 0310 	and.w	r3, r3, #16
 800a3f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fe:	43db      	mvns	r3, r3
 800a400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a402:	4013      	ands	r3, r2
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	795b      	ldrb	r3, [r3, #5]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d102      	bne.n	800a414 <HAL_DAC_ConfigChannel+0x210>
 800a40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a412:	e000      	b.n	800a416 <HAL_DAC_ConfigChannel+0x212>
 800a414:	2300      	movs	r3, #0
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	4313      	orrs	r3, r2
 800a41a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a422:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d114      	bne.n	800a456 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a42c:	f001 fbc2 	bl	800bbb4 <HAL_RCC_GetHCLKFreq>
 800a430:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	4a47      	ldr	r2, [pc, #284]	; (800a554 <HAL_DAC_ConfigChannel+0x350>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d904      	bls.n	800a444 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a440:	627b      	str	r3, [r7, #36]	; 0x24
 800a442:	e00d      	b.n	800a460 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	4a44      	ldr	r2, [pc, #272]	; (800a558 <HAL_DAC_ConfigChannel+0x354>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d909      	bls.n	800a460 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
 800a454:	e004      	b.n	800a460 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45c:	4313      	orrs	r3, r2
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f003 0310 	and.w	r3, r3, #16
 800a466:	69ba      	ldr	r2, [r7, #24]
 800a468:	fa02 f303 	lsl.w	r3, r2, r3
 800a46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46e:	4313      	orrs	r3, r2
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6819      	ldr	r1, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f003 0310 	and.w	r3, r3, #16
 800a486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a48a:	fa02 f303 	lsl.w	r3, r2, r3
 800a48e:	43da      	mvns	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	400a      	ands	r2, r1
 800a496:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f003 0310 	and.w	r3, r3, #16
 800a4a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ae:	43db      	mvns	r3, r3
 800a4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f003 0310 	and.w	r3, r3, #16
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6819      	ldr	r1, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f003 0310 	and.w	r3, r3, #16
 800a4e2:	22c0      	movs	r2, #192	; 0xc0
 800a4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e8:	43da      	mvns	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	400a      	ands	r2, r1
 800a4f0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	089b      	lsrs	r3, r3, #2
 800a4f8:	f003 030f 	and.w	r3, r3, #15
 800a4fc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	089b      	lsrs	r3, r3, #2
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f003 0310 	and.w	r3, r3, #16
 800a51c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a520:	fa01 f303 	lsl.w	r3, r1, r3
 800a524:	43db      	mvns	r3, r3
 800a526:	ea02 0103 	and.w	r1, r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	409a      	lsls	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	430a      	orrs	r2, r1
 800a53a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2201      	movs	r2, #1
 800a540:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3728      	adds	r7, #40	; 0x28
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	09896800 	.word	0x09896800
 800a558:	04c4b400 	.word	0x04c4b400

0800a55c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a568:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7ff fe16 	bl	800a19c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	711a      	strb	r2, [r3, #4]
}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f7ff fe0f 	bl	800a1b0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a592:	bf00      	nop
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	f043 0204 	orr.w	r2, r3, #4
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff fe05 	bl	800a1c4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	711a      	strb	r2, [r3, #4]
}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a610:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff ffd8 	bl	800a5c8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	711a      	strb	r2, [r3, #4]
}
 800a61e:	bf00      	nop
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a632:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f7ff ffd1 	bl	800a5dc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	f043 0204 	orr.w	r2, r3, #4
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f7ff ffc7 	bl	800a5f0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2201      	movs	r2, #1
 800a666:	711a      	strb	r2, [r3, #4]
}
 800a668:	bf00      	nop
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e08d      	b.n	800a79e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	4b47      	ldr	r3, [pc, #284]	; (800a7a8 <HAL_DMA_Init+0x138>)
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d80f      	bhi.n	800a6ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	4b45      	ldr	r3, [pc, #276]	; (800a7ac <HAL_DMA_Init+0x13c>)
 800a696:	4413      	add	r3, r2
 800a698:	4a45      	ldr	r2, [pc, #276]	; (800a7b0 <HAL_DMA_Init+0x140>)
 800a69a:	fba2 2303 	umull	r2, r3, r2, r3
 800a69e:	091b      	lsrs	r3, r3, #4
 800a6a0:	009a      	lsls	r2, r3, #2
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a42      	ldr	r2, [pc, #264]	; (800a7b4 <HAL_DMA_Init+0x144>)
 800a6aa:	641a      	str	r2, [r3, #64]	; 0x40
 800a6ac:	e00e      	b.n	800a6cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4b40      	ldr	r3, [pc, #256]	; (800a7b8 <HAL_DMA_Init+0x148>)
 800a6b6:	4413      	add	r3, r2
 800a6b8:	4a3d      	ldr	r2, [pc, #244]	; (800a7b0 <HAL_DMA_Init+0x140>)
 800a6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a6be:	091b      	lsrs	r3, r3, #4
 800a6c0:	009a      	lsls	r2, r3, #2
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a3c      	ldr	r2, [pc, #240]	; (800a7bc <HAL_DMA_Init+0x14c>)
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a6f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fa10 	bl	800ab44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a72c:	d102      	bne.n	800a734 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73c:	b2d2      	uxtb	r2, r2
 800a73e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a748:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d010      	beq.n	800a774 <HAL_DMA_Init+0x104>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b04      	cmp	r3, #4
 800a758:	d80c      	bhi.n	800a774 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa30 	bl	800abc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a764:	2200      	movs	r2, #0
 800a766:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a770:	605a      	str	r2, [r3, #4]
 800a772:	e008      	b.n	800a786 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	40020407 	.word	0x40020407
 800a7ac:	bffdfff8 	.word	0xbffdfff8
 800a7b0:	cccccccd 	.word	0xcccccccd
 800a7b4:	40020000 	.word	0x40020000
 800a7b8:	bffdfbf8 	.word	0xbffdfbf8
 800a7bc:	40020400 	.word	0x40020400

0800a7c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d101      	bne.n	800a7e0 <HAL_DMA_Start_IT+0x20>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e066      	b.n	800a8ae <HAL_DMA_Start_IT+0xee>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d155      	bne.n	800a8a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 0201 	bic.w	r2, r2, #1
 800a810:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 f954 	bl	800aac6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a822:	2b00      	cmp	r3, #0
 800a824:	d008      	beq.n	800a838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f042 020e 	orr.w	r2, r2, #14
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	e00f      	b.n	800a858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f022 0204 	bic.w	r2, r2, #4
 800a846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 020a 	orr.w	r2, r2, #10
 800a856:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a874:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a88c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f042 0201 	orr.w	r2, r2, #1
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	e005      	b.n	800a8ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3718      	adds	r7, #24
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d005      	beq.n	800a8da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2204      	movs	r2, #4
 800a8d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	73fb      	strb	r3, [r7, #15]
 800a8d8:	e037      	b.n	800a94a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 020e 	bic.w	r2, r2, #14
 800a8e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f022 0201 	bic.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90e:	f003 021f 	and.w	r2, r3, #31
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	2101      	movs	r1, #1
 800a918:	fa01 f202 	lsl.w	r2, r1, r2
 800a91c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a926:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00c      	beq.n	800a94a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a93a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a93e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a948:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a984:	f003 031f 	and.w	r3, r3, #31
 800a988:	2204      	movs	r2, #4
 800a98a:	409a      	lsls	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4013      	ands	r3, r2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d026      	beq.n	800a9e2 <HAL_DMA_IRQHandler+0x7a>
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f003 0304 	and.w	r3, r3, #4
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d021      	beq.n	800a9e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d107      	bne.n	800a9bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f022 0204 	bic.w	r2, r2, #4
 800a9ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c0:	f003 021f 	and.w	r2, r3, #31
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c8:	2104      	movs	r1, #4
 800a9ca:	fa01 f202 	lsl.w	r2, r1, r2
 800a9ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d071      	beq.n	800aabc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a9e0:	e06c      	b.n	800aabc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e6:	f003 031f 	and.w	r3, r3, #31
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	409a      	lsls	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d02e      	beq.n	800aa54 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	f003 0302 	and.w	r3, r3, #2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d029      	beq.n	800aa54 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10b      	bne.n	800aa26 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 020a 	bic.w	r2, r2, #10
 800aa1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2a:	f003 021f 	and.w	r2, r3, #31
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	2102      	movs	r1, #2
 800aa34:	fa01 f202 	lsl.w	r2, r1, r2
 800aa38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d038      	beq.n	800aabc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800aa52:	e033      	b.n	800aabc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa58:	f003 031f 	and.w	r3, r3, #31
 800aa5c:	2208      	movs	r2, #8
 800aa5e:	409a      	lsls	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4013      	ands	r3, r2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d02a      	beq.n	800aabe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f003 0308 	and.w	r3, r3, #8
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d025      	beq.n	800aabe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f022 020e 	bic.w	r2, r2, #14
 800aa80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa86:	f003 021f 	and.w	r2, r3, #31
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8e:	2101      	movs	r1, #1
 800aa90:	fa01 f202 	lsl.w	r2, r1, r2
 800aa94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d004      	beq.n	800aabe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
}
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b085      	sub	sp, #20
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	607a      	str	r2, [r7, #4]
 800aad2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aadc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d004      	beq.n	800aaf0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aaee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf4:	f003 021f 	and.w	r2, r3, #31
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafc:	2101      	movs	r1, #1
 800aafe:	fa01 f202 	lsl.w	r2, r1, r2
 800ab02:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b10      	cmp	r3, #16
 800ab12:	d108      	bne.n	800ab26 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ab24:	e007      	b.n	800ab36 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	60da      	str	r2, [r3, #12]
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
	...

0800ab44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	4b16      	ldr	r3, [pc, #88]	; (800abac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d802      	bhi.n	800ab5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ab58:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ab5a:	617b      	str	r3, [r7, #20]
 800ab5c:	e001      	b.n	800ab62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ab5e:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ab60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	3b08      	subs	r3, #8
 800ab6e:	4a12      	ldr	r2, [pc, #72]	; (800abb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ab70:	fba2 2303 	umull	r2, r3, r2, r3
 800ab74:	091b      	lsrs	r3, r3, #4
 800ab76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7c:	089b      	lsrs	r3, r3, #2
 800ab7e:	009a      	lsls	r2, r3, #2
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	4413      	add	r3, r2
 800ab84:	461a      	mov	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a0b      	ldr	r2, [pc, #44]	; (800abbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ab8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f003 031f 	and.w	r3, r3, #31
 800ab96:	2201      	movs	r2, #1
 800ab98:	409a      	lsls	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ab9e:	bf00      	nop
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	40020407 	.word	0x40020407
 800abb0:	40020800 	.word	0x40020800
 800abb4:	40020820 	.word	0x40020820
 800abb8:	cccccccd 	.word	0xcccccccd
 800abbc:	40020880 	.word	0x40020880

0800abc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	461a      	mov	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a08      	ldr	r2, [pc, #32]	; (800ac04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800abe2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	f003 031f 	and.w	r3, r3, #31
 800abec:	2201      	movs	r2, #1
 800abee:	409a      	lsls	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800abf4:	bf00      	nop
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	1000823f 	.word	0x1000823f
 800ac04:	40020940 	.word	0x40020940

0800ac08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ac16:	e15a      	b.n	800aece <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	fa01 f303 	lsl.w	r3, r1, r3
 800ac24:	4013      	ands	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 814c 	beq.w	800aec8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d00b      	beq.n	800ac50 <HAL_GPIO_Init+0x48>
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d007      	beq.n	800ac50 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ac44:	2b11      	cmp	r3, #17
 800ac46:	d003      	beq.n	800ac50 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	2b12      	cmp	r3, #18
 800ac4e:	d130      	bne.n	800acb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	2203      	movs	r2, #3
 800ac5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac60:	43db      	mvns	r3, r3
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	4013      	ands	r3, r2
 800ac66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	fa02 f303 	lsl.w	r3, r2, r3
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ac86:	2201      	movs	r2, #1
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8e:	43db      	mvns	r3, r3
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4013      	ands	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	091b      	lsrs	r3, r3, #4
 800ac9c:	f003 0201 	and.w	r2, r3, #1
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	fa02 f303 	lsl.w	r3, r2, r3
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	2203      	movs	r2, #3
 800acbe:	fa02 f303 	lsl.w	r3, r2, r3
 800acc2:	43db      	mvns	r3, r3
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	4013      	ands	r3, r2
 800acc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	689a      	ldr	r2, [r3, #8]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	fa02 f303 	lsl.w	r3, r2, r3
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d003      	beq.n	800acf2 <HAL_GPIO_Init+0xea>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	2b12      	cmp	r3, #18
 800acf0:	d123      	bne.n	800ad3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	08da      	lsrs	r2, r3, #3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3208      	adds	r2, #8
 800acfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f003 0307 	and.w	r3, r3, #7
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	220f      	movs	r2, #15
 800ad0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad0e:	43db      	mvns	r3, r3
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	4013      	ands	r3, r2
 800ad14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	691a      	ldr	r2, [r3, #16]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	fa02 f303 	lsl.w	r3, r2, r3
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	08da      	lsrs	r2, r3, #3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3208      	adds	r2, #8
 800ad34:	6939      	ldr	r1, [r7, #16]
 800ad36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	2203      	movs	r2, #3
 800ad46:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4a:	43db      	mvns	r3, r3
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f003 0203 	and.w	r2, r3, #3
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	005b      	lsls	r3, r3, #1
 800ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 80a6 	beq.w	800aec8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad7c:	4b5b      	ldr	r3, [pc, #364]	; (800aeec <HAL_GPIO_Init+0x2e4>)
 800ad7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad80:	4a5a      	ldr	r2, [pc, #360]	; (800aeec <HAL_GPIO_Init+0x2e4>)
 800ad82:	f043 0301 	orr.w	r3, r3, #1
 800ad86:	6613      	str	r3, [r2, #96]	; 0x60
 800ad88:	4b58      	ldr	r3, [pc, #352]	; (800aeec <HAL_GPIO_Init+0x2e4>)
 800ad8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad8c:	f003 0301 	and.w	r3, r3, #1
 800ad90:	60bb      	str	r3, [r7, #8]
 800ad92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad94:	4a56      	ldr	r2, [pc, #344]	; (800aef0 <HAL_GPIO_Init+0x2e8>)
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	089b      	lsrs	r3, r3, #2
 800ad9a:	3302      	adds	r3, #2
 800ad9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ada0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f003 0303 	and.w	r3, r3, #3
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	220f      	movs	r2, #15
 800adac:	fa02 f303 	lsl.w	r3, r2, r3
 800adb0:	43db      	mvns	r3, r3
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4013      	ands	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800adbe:	d01f      	beq.n	800ae00 <HAL_GPIO_Init+0x1f8>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a4c      	ldr	r2, [pc, #304]	; (800aef4 <HAL_GPIO_Init+0x2ec>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d019      	beq.n	800adfc <HAL_GPIO_Init+0x1f4>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a4b      	ldr	r2, [pc, #300]	; (800aef8 <HAL_GPIO_Init+0x2f0>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d013      	beq.n	800adf8 <HAL_GPIO_Init+0x1f0>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a4a      	ldr	r2, [pc, #296]	; (800aefc <HAL_GPIO_Init+0x2f4>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d00d      	beq.n	800adf4 <HAL_GPIO_Init+0x1ec>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a49      	ldr	r2, [pc, #292]	; (800af00 <HAL_GPIO_Init+0x2f8>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d007      	beq.n	800adf0 <HAL_GPIO_Init+0x1e8>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a48      	ldr	r2, [pc, #288]	; (800af04 <HAL_GPIO_Init+0x2fc>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d101      	bne.n	800adec <HAL_GPIO_Init+0x1e4>
 800ade8:	2305      	movs	r3, #5
 800adea:	e00a      	b.n	800ae02 <HAL_GPIO_Init+0x1fa>
 800adec:	2306      	movs	r3, #6
 800adee:	e008      	b.n	800ae02 <HAL_GPIO_Init+0x1fa>
 800adf0:	2304      	movs	r3, #4
 800adf2:	e006      	b.n	800ae02 <HAL_GPIO_Init+0x1fa>
 800adf4:	2303      	movs	r3, #3
 800adf6:	e004      	b.n	800ae02 <HAL_GPIO_Init+0x1fa>
 800adf8:	2302      	movs	r3, #2
 800adfa:	e002      	b.n	800ae02 <HAL_GPIO_Init+0x1fa>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e000      	b.n	800ae02 <HAL_GPIO_Init+0x1fa>
 800ae00:	2300      	movs	r3, #0
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	f002 0203 	and.w	r2, r2, #3
 800ae08:	0092      	lsls	r2, r2, #2
 800ae0a:	4093      	lsls	r3, r2
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae12:	4937      	ldr	r1, [pc, #220]	; (800aef0 <HAL_GPIO_Init+0x2e8>)
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	089b      	lsrs	r3, r3, #2
 800ae18:	3302      	adds	r3, #2
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ae20:	4b39      	ldr	r3, [pc, #228]	; (800af08 <HAL_GPIO_Init+0x300>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	43db      	mvns	r3, r3
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d003      	beq.n	800ae44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ae44:	4a30      	ldr	r2, [pc, #192]	; (800af08 <HAL_GPIO_Init+0x300>)
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800ae4a:	4b2f      	ldr	r3, [pc, #188]	; (800af08 <HAL_GPIO_Init+0x300>)
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	43db      	mvns	r3, r3
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4013      	ands	r3, r2
 800ae58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ae6e:	4a26      	ldr	r2, [pc, #152]	; (800af08 <HAL_GPIO_Init+0x300>)
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ae74:	4b24      	ldr	r3, [pc, #144]	; (800af08 <HAL_GPIO_Init+0x300>)
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	4013      	ands	r3, r2
 800ae82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d003      	beq.n	800ae98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ae98:	4a1b      	ldr	r2, [pc, #108]	; (800af08 <HAL_GPIO_Init+0x300>)
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ae9e:	4b1a      	ldr	r3, [pc, #104]	; (800af08 <HAL_GPIO_Init+0x300>)
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	43db      	mvns	r3, r3
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4013      	ands	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800aec2:	4a11      	ldr	r2, [pc, #68]	; (800af08 <HAL_GPIO_Init+0x300>)
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	3301      	adds	r3, #1
 800aecc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	fa22 f303 	lsr.w	r3, r2, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f47f ae9d 	bne.w	800ac18 <HAL_GPIO_Init+0x10>
  }
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	40021000 	.word	0x40021000
 800aef0:	40010000 	.word	0x40010000
 800aef4:	48000400 	.word	0x48000400
 800aef8:	48000800 	.word	0x48000800
 800aefc:	48000c00 	.word	0x48000c00
 800af00:	48001000 	.word	0x48001000
 800af04:	48001400 	.word	0x48001400
 800af08:	40010400 	.word	0x40010400

0800af0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800af1a:	e0bd      	b.n	800b098 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800af1c:	2201      	movs	r2, #1
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	fa02 f303 	lsl.w	r3, r2, r3
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	4013      	ands	r3, r2
 800af28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80b0 	beq.w	800b092 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800af32:	4a60      	ldr	r2, [pc, #384]	; (800b0b4 <HAL_GPIO_DeInit+0x1a8>)
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	089b      	lsrs	r3, r3, #2
 800af38:	3302      	adds	r3, #2
 800af3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f003 0303 	and.w	r3, r3, #3
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	220f      	movs	r2, #15
 800af4a:	fa02 f303 	lsl.w	r3, r2, r3
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4013      	ands	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800af5a:	d01f      	beq.n	800af9c <HAL_GPIO_DeInit+0x90>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a56      	ldr	r2, [pc, #344]	; (800b0b8 <HAL_GPIO_DeInit+0x1ac>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d019      	beq.n	800af98 <HAL_GPIO_DeInit+0x8c>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a55      	ldr	r2, [pc, #340]	; (800b0bc <HAL_GPIO_DeInit+0x1b0>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d013      	beq.n	800af94 <HAL_GPIO_DeInit+0x88>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a54      	ldr	r2, [pc, #336]	; (800b0c0 <HAL_GPIO_DeInit+0x1b4>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d00d      	beq.n	800af90 <HAL_GPIO_DeInit+0x84>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a53      	ldr	r2, [pc, #332]	; (800b0c4 <HAL_GPIO_DeInit+0x1b8>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d007      	beq.n	800af8c <HAL_GPIO_DeInit+0x80>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a52      	ldr	r2, [pc, #328]	; (800b0c8 <HAL_GPIO_DeInit+0x1bc>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d101      	bne.n	800af88 <HAL_GPIO_DeInit+0x7c>
 800af84:	2305      	movs	r3, #5
 800af86:	e00a      	b.n	800af9e <HAL_GPIO_DeInit+0x92>
 800af88:	2306      	movs	r3, #6
 800af8a:	e008      	b.n	800af9e <HAL_GPIO_DeInit+0x92>
 800af8c:	2304      	movs	r3, #4
 800af8e:	e006      	b.n	800af9e <HAL_GPIO_DeInit+0x92>
 800af90:	2303      	movs	r3, #3
 800af92:	e004      	b.n	800af9e <HAL_GPIO_DeInit+0x92>
 800af94:	2302      	movs	r3, #2
 800af96:	e002      	b.n	800af9e <HAL_GPIO_DeInit+0x92>
 800af98:	2301      	movs	r3, #1
 800af9a:	e000      	b.n	800af9e <HAL_GPIO_DeInit+0x92>
 800af9c:	2300      	movs	r3, #0
 800af9e:	697a      	ldr	r2, [r7, #20]
 800afa0:	f002 0203 	and.w	r2, r2, #3
 800afa4:	0092      	lsls	r2, r2, #2
 800afa6:	4093      	lsls	r3, r2
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d132      	bne.n	800b014 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800afae:	4b47      	ldr	r3, [pc, #284]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	43db      	mvns	r3, r3
 800afb6:	4945      	ldr	r1, [pc, #276]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afb8:	4013      	ands	r3, r2
 800afba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800afbc:	4b43      	ldr	r3, [pc, #268]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	43db      	mvns	r3, r3
 800afc4:	4941      	ldr	r1, [pc, #260]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afc6:	4013      	ands	r3, r2
 800afc8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800afca:	4b40      	ldr	r3, [pc, #256]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	43db      	mvns	r3, r3
 800afd2:	493e      	ldr	r1, [pc, #248]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afd4:	4013      	ands	r3, r2
 800afd6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800afd8:	4b3c      	ldr	r3, [pc, #240]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afda:	68da      	ldr	r2, [r3, #12]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	43db      	mvns	r3, r3
 800afe0:	493a      	ldr	r1, [pc, #232]	; (800b0cc <HAL_GPIO_DeInit+0x1c0>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f003 0303 	and.w	r3, r3, #3
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	220f      	movs	r2, #15
 800aff0:	fa02 f303 	lsl.w	r3, r2, r3
 800aff4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800aff6:	4a2f      	ldr	r2, [pc, #188]	; (800b0b4 <HAL_GPIO_DeInit+0x1a8>)
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	089b      	lsrs	r3, r3, #2
 800affc:	3302      	adds	r3, #2
 800affe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	43da      	mvns	r2, r3
 800b006:	482b      	ldr	r0, [pc, #172]	; (800b0b4 <HAL_GPIO_DeInit+0x1a8>)
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	089b      	lsrs	r3, r3, #2
 800b00c:	400a      	ands	r2, r1
 800b00e:	3302      	adds	r3, #2
 800b010:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	2103      	movs	r1, #3
 800b01e:	fa01 f303 	lsl.w	r3, r1, r3
 800b022:	431a      	orrs	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	08da      	lsrs	r2, r3, #3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3208      	adds	r2, #8
 800b030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	220f      	movs	r2, #15
 800b03e:	fa02 f303 	lsl.w	r3, r2, r3
 800b042:	43db      	mvns	r3, r3
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	08d2      	lsrs	r2, r2, #3
 800b048:	4019      	ands	r1, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3208      	adds	r2, #8
 800b04e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68da      	ldr	r2, [r3, #12]
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	2103      	movs	r1, #3
 800b05c:	fa01 f303 	lsl.w	r3, r1, r3
 800b060:	43db      	mvns	r3, r3
 800b062:	401a      	ands	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	2101      	movs	r1, #1
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	fa01 f303 	lsl.w	r3, r1, r3
 800b074:	43db      	mvns	r3, r3
 800b076:	401a      	ands	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689a      	ldr	r2, [r3, #8]
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	2103      	movs	r1, #3
 800b086:	fa01 f303 	lsl.w	r3, r1, r3
 800b08a:	43db      	mvns	r3, r3
 800b08c:	401a      	ands	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	3301      	adds	r3, #1
 800b096:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f47f af3b 	bne.w	800af1c <HAL_GPIO_DeInit+0x10>
  }
}
 800b0a6:	bf00      	nop
 800b0a8:	371c      	adds	r7, #28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	40010000 	.word	0x40010000
 800b0b8:	48000400 	.word	0x48000400
 800b0bc:	48000800 	.word	0x48000800
 800b0c0:	48000c00 	.word	0x48000c00
 800b0c4:	48001000 	.word	0x48001000
 800b0c8:	48001400 	.word	0x48001400
 800b0cc:	40010400 	.word	0x40010400

0800b0d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	807b      	strh	r3, [r7, #2]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b0e0:	787b      	ldrb	r3, [r7, #1]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b0e6:	887a      	ldrh	r2, [r7, #2]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b0ec:	e002      	b.n	800b0f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b0ee:	887a      	ldrh	r2, [r7, #2]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d141      	bne.n	800b192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b10e:	4b4b      	ldr	r3, [pc, #300]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b11a:	d131      	bne.n	800b180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b11c:	4b47      	ldr	r3, [pc, #284]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b122:	4a46      	ldr	r2, [pc, #280]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b12c:	4b43      	ldr	r3, [pc, #268]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b134:	4a41      	ldr	r2, [pc, #260]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b13a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b13c:	4b40      	ldr	r3, [pc, #256]	; (800b240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2232      	movs	r2, #50	; 0x32
 800b142:	fb02 f303 	mul.w	r3, r2, r3
 800b146:	4a3f      	ldr	r2, [pc, #252]	; (800b244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b148:	fba2 2303 	umull	r2, r3, r2, r3
 800b14c:	0c9b      	lsrs	r3, r3, #18
 800b14e:	3301      	adds	r3, #1
 800b150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b152:	e002      	b.n	800b15a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3b01      	subs	r3, #1
 800b158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b15a:	4b38      	ldr	r3, [pc, #224]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b166:	d102      	bne.n	800b16e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1f2      	bne.n	800b154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b16e:	4b33      	ldr	r3, [pc, #204]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b17a:	d158      	bne.n	800b22e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e057      	b.n	800b230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b180:	4b2e      	ldr	r3, [pc, #184]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b186:	4a2d      	ldr	r2, [pc, #180]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b18c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b190:	e04d      	b.n	800b22e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b198:	d141      	bne.n	800b21e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b19a:	4b28      	ldr	r3, [pc, #160]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b1a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1a6:	d131      	bne.n	800b20c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b1a8:	4b24      	ldr	r3, [pc, #144]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ae:	4a23      	ldr	r2, [pc, #140]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b1b8:	4b20      	ldr	r3, [pc, #128]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b1c0:	4a1e      	ldr	r2, [pc, #120]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b1c8:	4b1d      	ldr	r3, [pc, #116]	; (800b240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2232      	movs	r2, #50	; 0x32
 800b1ce:	fb02 f303 	mul.w	r3, r2, r3
 800b1d2:	4a1c      	ldr	r2, [pc, #112]	; (800b244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d8:	0c9b      	lsrs	r3, r3, #18
 800b1da:	3301      	adds	r3, #1
 800b1dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b1de:	e002      	b.n	800b1e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b1e6:	4b15      	ldr	r3, [pc, #84]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1f2:	d102      	bne.n	800b1fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1f2      	bne.n	800b1e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b1fa:	4b10      	ldr	r3, [pc, #64]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b206:	d112      	bne.n	800b22e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e011      	b.n	800b230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b20c:	4b0b      	ldr	r3, [pc, #44]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b212:	4a0a      	ldr	r2, [pc, #40]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b218:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b21c:	e007      	b.n	800b22e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b21e:	4b07      	ldr	r3, [pc, #28]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b226:	4a05      	ldr	r2, [pc, #20]	; (800b23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b22c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	40007000 	.word	0x40007000
 800b240:	20000ca8 	.word	0x20000ca8
 800b244:	431bde83 	.word	0x431bde83

0800b248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e308      	b.n	800b86c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d075      	beq.n	800b352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b266:	4ba3      	ldr	r3, [pc, #652]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	f003 030c 	and.w	r3, r3, #12
 800b26e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b270:	4ba0      	ldr	r3, [pc, #640]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f003 0303 	and.w	r3, r3, #3
 800b278:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b0c      	cmp	r3, #12
 800b27e:	d102      	bne.n	800b286 <HAL_RCC_OscConfig+0x3e>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b03      	cmp	r3, #3
 800b284:	d002      	beq.n	800b28c <HAL_RCC_OscConfig+0x44>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d10b      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b28c:	4b99      	ldr	r3, [pc, #612]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d05b      	beq.n	800b350 <HAL_RCC_OscConfig+0x108>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d157      	bne.n	800b350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e2e3      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ac:	d106      	bne.n	800b2bc <HAL_RCC_OscConfig+0x74>
 800b2ae:	4b91      	ldr	r3, [pc, #580]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a90      	ldr	r2, [pc, #576]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2b8:	6013      	str	r3, [r2, #0]
 800b2ba:	e01d      	b.n	800b2f8 <HAL_RCC_OscConfig+0xb0>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2c4:	d10c      	bne.n	800b2e0 <HAL_RCC_OscConfig+0x98>
 800b2c6:	4b8b      	ldr	r3, [pc, #556]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a8a      	ldr	r2, [pc, #552]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2d0:	6013      	str	r3, [r2, #0]
 800b2d2:	4b88      	ldr	r3, [pc, #544]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a87      	ldr	r2, [pc, #540]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	e00b      	b.n	800b2f8 <HAL_RCC_OscConfig+0xb0>
 800b2e0:	4b84      	ldr	r3, [pc, #528]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a83      	ldr	r2, [pc, #524]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	4b81      	ldr	r3, [pc, #516]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a80      	ldr	r2, [pc, #512]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b2f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b2f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d013      	beq.n	800b328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b300:	f7fd f8ea 	bl	80084d8 <HAL_GetTick>
 800b304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b306:	e008      	b.n	800b31a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b308:	f7fd f8e6 	bl	80084d8 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2b64      	cmp	r3, #100	; 0x64
 800b314:	d901      	bls.n	800b31a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	e2a8      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b31a:	4b76      	ldr	r3, [pc, #472]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b322:	2b00      	cmp	r3, #0
 800b324:	d0f0      	beq.n	800b308 <HAL_RCC_OscConfig+0xc0>
 800b326:	e014      	b.n	800b352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b328:	f7fd f8d6 	bl	80084d8 <HAL_GetTick>
 800b32c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b32e:	e008      	b.n	800b342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b330:	f7fd f8d2 	bl	80084d8 <HAL_GetTick>
 800b334:	4602      	mov	r2, r0
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	2b64      	cmp	r3, #100	; 0x64
 800b33c:	d901      	bls.n	800b342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b33e:	2303      	movs	r3, #3
 800b340:	e294      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b342:	4b6c      	ldr	r3, [pc, #432]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1f0      	bne.n	800b330 <HAL_RCC_OscConfig+0xe8>
 800b34e:	e000      	b.n	800b352 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d075      	beq.n	800b44a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b35e:	4b65      	ldr	r3, [pc, #404]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f003 030c 	and.w	r3, r3, #12
 800b366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b368:	4b62      	ldr	r3, [pc, #392]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	f003 0303 	and.w	r3, r3, #3
 800b370:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	2b0c      	cmp	r3, #12
 800b376:	d102      	bne.n	800b37e <HAL_RCC_OscConfig+0x136>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d002      	beq.n	800b384 <HAL_RCC_OscConfig+0x13c>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b04      	cmp	r3, #4
 800b382:	d11f      	bne.n	800b3c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b384:	4b5b      	ldr	r3, [pc, #364]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <HAL_RCC_OscConfig+0x154>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e267      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b39c:	4b55      	ldr	r3, [pc, #340]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	061b      	lsls	r3, r3, #24
 800b3aa:	4952      	ldr	r1, [pc, #328]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b3b0:	4b51      	ldr	r3, [pc, #324]	; (800b4f8 <HAL_RCC_OscConfig+0x2b0>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fd f843 	bl	8008440 <HAL_InitTick>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d043      	beq.n	800b448 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e253      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d023      	beq.n	800b414 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b3cc:	4b49      	ldr	r3, [pc, #292]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a48      	ldr	r2, [pc, #288]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b3d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3d8:	f7fd f87e 	bl	80084d8 <HAL_GetTick>
 800b3dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b3de:	e008      	b.n	800b3f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3e0:	f7fd f87a 	bl	80084d8 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d901      	bls.n	800b3f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e23c      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b3f2:	4b40      	ldr	r3, [pc, #256]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0f0      	beq.n	800b3e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3fe:	4b3d      	ldr	r3, [pc, #244]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	061b      	lsls	r3, r3, #24
 800b40c:	4939      	ldr	r1, [pc, #228]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	604b      	str	r3, [r1, #4]
 800b412:	e01a      	b.n	800b44a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b414:	4b37      	ldr	r3, [pc, #220]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a36      	ldr	r2, [pc, #216]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b41a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b41e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b420:	f7fd f85a 	bl	80084d8 <HAL_GetTick>
 800b424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b426:	e008      	b.n	800b43a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b428:	f7fd f856 	bl	80084d8 <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	2b02      	cmp	r3, #2
 800b434:	d901      	bls.n	800b43a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e218      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b43a:	4b2e      	ldr	r3, [pc, #184]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1f0      	bne.n	800b428 <HAL_RCC_OscConfig+0x1e0>
 800b446:	e000      	b.n	800b44a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b448:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0308 	and.w	r3, r3, #8
 800b452:	2b00      	cmp	r3, #0
 800b454:	d03c      	beq.n	800b4d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d01c      	beq.n	800b498 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b45e:	4b25      	ldr	r3, [pc, #148]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b464:	4a23      	ldr	r2, [pc, #140]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b466:	f043 0301 	orr.w	r3, r3, #1
 800b46a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b46e:	f7fd f833 	bl	80084d8 <HAL_GetTick>
 800b472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b474:	e008      	b.n	800b488 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b476:	f7fd f82f 	bl	80084d8 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	2b02      	cmp	r3, #2
 800b482:	d901      	bls.n	800b488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e1f1      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b488:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b48a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0ef      	beq.n	800b476 <HAL_RCC_OscConfig+0x22e>
 800b496:	e01b      	b.n	800b4d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b498:	4b16      	ldr	r3, [pc, #88]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b49a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b49e:	4a15      	ldr	r2, [pc, #84]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b4a0:	f023 0301 	bic.w	r3, r3, #1
 800b4a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4a8:	f7fd f816 	bl	80084d8 <HAL_GetTick>
 800b4ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4b0:	f7fd f812 	bl	80084d8 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e1d4      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b4c2:	4b0c      	ldr	r3, [pc, #48]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b4c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1ef      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 80ab 	beq.w	800b634 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b4e2:	4b04      	ldr	r3, [pc, #16]	; (800b4f4 <HAL_RCC_OscConfig+0x2ac>)
 800b4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <HAL_RCC_OscConfig+0x2b4>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e005      	b.n	800b4fe <HAL_RCC_OscConfig+0x2b6>
 800b4f2:	bf00      	nop
 800b4f4:	40021000 	.word	0x40021000
 800b4f8:	20000cac 	.word	0x20000cac
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00d      	beq.n	800b51e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b502:	4baf      	ldr	r3, [pc, #700]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b506:	4aae      	ldr	r2, [pc, #696]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b50c:	6593      	str	r3, [r2, #88]	; 0x58
 800b50e:	4bac      	ldr	r3, [pc, #688]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b51a:	2301      	movs	r3, #1
 800b51c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b51e:	4ba9      	ldr	r3, [pc, #676]	; (800b7c4 <HAL_RCC_OscConfig+0x57c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b526:	2b00      	cmp	r3, #0
 800b528:	d118      	bne.n	800b55c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b52a:	4ba6      	ldr	r3, [pc, #664]	; (800b7c4 <HAL_RCC_OscConfig+0x57c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4aa5      	ldr	r2, [pc, #660]	; (800b7c4 <HAL_RCC_OscConfig+0x57c>)
 800b530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b536:	f7fc ffcf 	bl	80084d8 <HAL_GetTick>
 800b53a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b53c:	e008      	b.n	800b550 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b53e:	f7fc ffcb 	bl	80084d8 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d901      	bls.n	800b550 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e18d      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b550:	4b9c      	ldr	r3, [pc, #624]	; (800b7c4 <HAL_RCC_OscConfig+0x57c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0f0      	beq.n	800b53e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d108      	bne.n	800b576 <HAL_RCC_OscConfig+0x32e>
 800b564:	4b96      	ldr	r3, [pc, #600]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56a:	4a95      	ldr	r2, [pc, #596]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b56c:	f043 0301 	orr.w	r3, r3, #1
 800b570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b574:	e024      	b.n	800b5c0 <HAL_RCC_OscConfig+0x378>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	2b05      	cmp	r3, #5
 800b57c:	d110      	bne.n	800b5a0 <HAL_RCC_OscConfig+0x358>
 800b57e:	4b90      	ldr	r3, [pc, #576]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b584:	4a8e      	ldr	r2, [pc, #568]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b586:	f043 0304 	orr.w	r3, r3, #4
 800b58a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b58e:	4b8c      	ldr	r3, [pc, #560]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b594:	4a8a      	ldr	r2, [pc, #552]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b596:	f043 0301 	orr.w	r3, r3, #1
 800b59a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b59e:	e00f      	b.n	800b5c0 <HAL_RCC_OscConfig+0x378>
 800b5a0:	4b87      	ldr	r3, [pc, #540]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a6:	4a86      	ldr	r2, [pc, #536]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b5a8:	f023 0301 	bic.w	r3, r3, #1
 800b5ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b5b0:	4b83      	ldr	r3, [pc, #524]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b6:	4a82      	ldr	r2, [pc, #520]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b5b8:	f023 0304 	bic.w	r3, r3, #4
 800b5bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d016      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5c8:	f7fc ff86 	bl	80084d8 <HAL_GetTick>
 800b5cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5ce:	e00a      	b.n	800b5e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5d0:	f7fc ff82 	bl	80084d8 <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d901      	bls.n	800b5e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e142      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5e6:	4b76      	ldr	r3, [pc, #472]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ec:	f003 0302 	and.w	r3, r3, #2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0ed      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x388>
 800b5f4:	e015      	b.n	800b622 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5f6:	f7fc ff6f 	bl	80084d8 <HAL_GetTick>
 800b5fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b5fc:	e00a      	b.n	800b614 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5fe:	f7fc ff6b 	bl	80084d8 <HAL_GetTick>
 800b602:	4602      	mov	r2, r0
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	f241 3288 	movw	r2, #5000	; 0x1388
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d901      	bls.n	800b614 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b610:	2303      	movs	r3, #3
 800b612:	e12b      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b614:	4b6a      	ldr	r3, [pc, #424]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b61a:	f003 0302 	and.w	r3, r3, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1ed      	bne.n	800b5fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b622:	7ffb      	ldrb	r3, [r7, #31]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d105      	bne.n	800b634 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b628:	4b65      	ldr	r3, [pc, #404]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62c:	4a64      	ldr	r2, [pc, #400]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b62e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b632:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0320 	and.w	r3, r3, #32
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d03c      	beq.n	800b6ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01c      	beq.n	800b682 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b648:	4b5d      	ldr	r3, [pc, #372]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b64a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b64e:	4a5c      	ldr	r2, [pc, #368]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b650:	f043 0301 	orr.w	r3, r3, #1
 800b654:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b658:	f7fc ff3e 	bl	80084d8 <HAL_GetTick>
 800b65c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b65e:	e008      	b.n	800b672 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b660:	f7fc ff3a 	bl	80084d8 <HAL_GetTick>
 800b664:	4602      	mov	r2, r0
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d901      	bls.n	800b672 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e0fc      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b672:	4b53      	ldr	r3, [pc, #332]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b678:	f003 0302 	and.w	r3, r3, #2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0ef      	beq.n	800b660 <HAL_RCC_OscConfig+0x418>
 800b680:	e01b      	b.n	800b6ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b682:	4b4f      	ldr	r3, [pc, #316]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b688:	4a4d      	ldr	r2, [pc, #308]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b68a:	f023 0301 	bic.w	r3, r3, #1
 800b68e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b692:	f7fc ff21 	bl	80084d8 <HAL_GetTick>
 800b696:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b698:	e008      	b.n	800b6ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b69a:	f7fc ff1d 	bl	80084d8 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d901      	bls.n	800b6ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e0df      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b6ac:	4b44      	ldr	r3, [pc, #272]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b6ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1ef      	bne.n	800b69a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 80d3 	beq.w	800b86a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b6c4:	4b3e      	ldr	r3, [pc, #248]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f003 030c 	and.w	r3, r3, #12
 800b6cc:	2b0c      	cmp	r3, #12
 800b6ce:	f000 808d 	beq.w	800b7ec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d15a      	bne.n	800b790 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6da:	4b39      	ldr	r3, [pc, #228]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a38      	ldr	r2, [pc, #224]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b6e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6e6:	f7fc fef7 	bl	80084d8 <HAL_GetTick>
 800b6ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b6ec:	e008      	b.n	800b700 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6ee:	f7fc fef3 	bl	80084d8 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e0b5      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b700:	4b2f      	ldr	r3, [pc, #188]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f0      	bne.n	800b6ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b70c:	4b2c      	ldr	r3, [pc, #176]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b70e:	68da      	ldr	r2, [r3, #12]
 800b710:	4b2d      	ldr	r3, [pc, #180]	; (800b7c8 <HAL_RCC_OscConfig+0x580>)
 800b712:	4013      	ands	r3, r2
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	6a11      	ldr	r1, [r2, #32]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b71c:	3a01      	subs	r2, #1
 800b71e:	0112      	lsls	r2, r2, #4
 800b720:	4311      	orrs	r1, r2
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b726:	0212      	lsls	r2, r2, #8
 800b728:	4311      	orrs	r1, r2
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b72e:	0852      	lsrs	r2, r2, #1
 800b730:	3a01      	subs	r2, #1
 800b732:	0552      	lsls	r2, r2, #21
 800b734:	4311      	orrs	r1, r2
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b73a:	0852      	lsrs	r2, r2, #1
 800b73c:	3a01      	subs	r2, #1
 800b73e:	0652      	lsls	r2, r2, #25
 800b740:	4311      	orrs	r1, r2
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b746:	06d2      	lsls	r2, r2, #27
 800b748:	430a      	orrs	r2, r1
 800b74a:	491d      	ldr	r1, [pc, #116]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b74c:	4313      	orrs	r3, r2
 800b74e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b750:	4b1b      	ldr	r3, [pc, #108]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a1a      	ldr	r2, [pc, #104]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b75a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b75c:	4b18      	ldr	r3, [pc, #96]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	4a17      	ldr	r2, [pc, #92]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b766:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b768:	f7fc feb6 	bl	80084d8 <HAL_GetTick>
 800b76c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b76e:	e008      	b.n	800b782 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b770:	f7fc feb2 	bl	80084d8 <HAL_GetTick>
 800b774:	4602      	mov	r2, r0
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d901      	bls.n	800b782 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e074      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b782:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0f0      	beq.n	800b770 <HAL_RCC_OscConfig+0x528>
 800b78e:	e06c      	b.n	800b86a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b790:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a0a      	ldr	r2, [pc, #40]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b79a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b79c:	4b08      	ldr	r3, [pc, #32]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	4a07      	ldr	r2, [pc, #28]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b7a2:	f023 0303 	bic.w	r3, r3, #3
 800b7a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b7a8:	4b05      	ldr	r3, [pc, #20]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	4a04      	ldr	r2, [pc, #16]	; (800b7c0 <HAL_RCC_OscConfig+0x578>)
 800b7ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b7b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7b8:	f7fc fe8e 	bl	80084d8 <HAL_GetTick>
 800b7bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7be:	e00e      	b.n	800b7de <HAL_RCC_OscConfig+0x596>
 800b7c0:	40021000 	.word	0x40021000
 800b7c4:	40007000 	.word	0x40007000
 800b7c8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7cc:	f7fc fe84 	bl	80084d8 <HAL_GetTick>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d901      	bls.n	800b7de <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	e046      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b7de:	4b25      	ldr	r3, [pc, #148]	; (800b874 <HAL_RCC_OscConfig+0x62c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f0      	bne.n	800b7cc <HAL_RCC_OscConfig+0x584>
 800b7ea:	e03e      	b.n	800b86a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e039      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b7f8:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <HAL_RCC_OscConfig+0x62c>)
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f003 0203 	and.w	r2, r3, #3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d12c      	bne.n	800b866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	3b01      	subs	r3, #1
 800b818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d123      	bne.n	800b866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d11b      	bne.n	800b866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d113      	bne.n	800b866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b848:	085b      	lsrs	r3, r3, #1
 800b84a:	3b01      	subs	r3, #1
 800b84c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b84e:	429a      	cmp	r2, r3
 800b850:	d109      	bne.n	800b866 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85c:	085b      	lsrs	r3, r3, #1
 800b85e:	3b01      	subs	r3, #1
 800b860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b862:	429a      	cmp	r2, r3
 800b864:	d001      	beq.n	800b86a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e000      	b.n	800b86c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	40021000 	.word	0x40021000

0800b878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e11e      	b.n	800bace <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b890:	4b91      	ldr	r3, [pc, #580]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d910      	bls.n	800b8c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b89e:	4b8e      	ldr	r3, [pc, #568]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f023 020f 	bic.w	r2, r3, #15
 800b8a6:	498c      	ldr	r1, [pc, #560]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8ae:	4b8a      	ldr	r3, [pc, #552]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 030f 	and.w	r3, r3, #15
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d001      	beq.n	800b8c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e106      	b.n	800bace <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d073      	beq.n	800b9b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d129      	bne.n	800b928 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8d4:	4b81      	ldr	r3, [pc, #516]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e0f4      	b.n	800bace <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b8e4:	f000 f972 	bl	800bbcc <RCC_GetSysClockFreqFromPLLSource>
 800b8e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	4a7c      	ldr	r2, [pc, #496]	; (800bae0 <HAL_RCC_ClockConfig+0x268>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d93f      	bls.n	800b972 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b8f2:	4b7a      	ldr	r3, [pc, #488]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d009      	beq.n	800b912 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b906:	2b00      	cmp	r3, #0
 800b908:	d033      	beq.n	800b972 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d12f      	bne.n	800b972 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b912:	4b72      	ldr	r3, [pc, #456]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b91a:	4a70      	ldr	r2, [pc, #448]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b922:	2380      	movs	r3, #128	; 0x80
 800b924:	617b      	str	r3, [r7, #20]
 800b926:	e024      	b.n	800b972 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d107      	bne.n	800b940 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b930:	4b6a      	ldr	r3, [pc, #424]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d109      	bne.n	800b950 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	e0c6      	b.n	800bace <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b940:	4b66      	ldr	r3, [pc, #408]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e0be      	b.n	800bace <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b950:	f000 f8ce 	bl	800baf0 <HAL_RCC_GetSysClockFreq>
 800b954:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	4a61      	ldr	r2, [pc, #388]	; (800bae0 <HAL_RCC_ClockConfig+0x268>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d909      	bls.n	800b972 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b95e:	4b5f      	ldr	r3, [pc, #380]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b966:	4a5d      	ldr	r2, [pc, #372]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b96c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b96e:	2380      	movs	r3, #128	; 0x80
 800b970:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b972:	4b5a      	ldr	r3, [pc, #360]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f023 0203 	bic.w	r2, r3, #3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	4957      	ldr	r1, [pc, #348]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b980:	4313      	orrs	r3, r2
 800b982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b984:	f7fc fda8 	bl	80084d8 <HAL_GetTick>
 800b988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b98a:	e00a      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b98c:	f7fc fda4 	bl	80084d8 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	f241 3288 	movw	r2, #5000	; 0x1388
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d901      	bls.n	800b9a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e095      	b.n	800bace <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9a2:	4b4e      	ldr	r3, [pc, #312]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f003 020c 	and.w	r2, r3, #12
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d1eb      	bne.n	800b98c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d023      	beq.n	800ba08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d005      	beq.n	800b9d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b9cc:	4b43      	ldr	r3, [pc, #268]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	4a42      	ldr	r2, [pc, #264]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b9d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b9d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0308 	and.w	r3, r3, #8
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d007      	beq.n	800b9f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b9e4:	4b3d      	ldr	r3, [pc, #244]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9ec:	4a3b      	ldr	r2, [pc, #236]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b9ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b9f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9f4:	4b39      	ldr	r3, [pc, #228]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	4936      	ldr	r1, [pc, #216]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	608b      	str	r3, [r1, #8]
 800ba06:	e008      	b.n	800ba1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	2b80      	cmp	r3, #128	; 0x80
 800ba0c:	d105      	bne.n	800ba1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ba0e:	4b33      	ldr	r3, [pc, #204]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	4a32      	ldr	r2, [pc, #200]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800ba14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba1a:	4b2f      	ldr	r3, [pc, #188]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 030f 	and.w	r3, r3, #15
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d21d      	bcs.n	800ba64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba28:	4b2b      	ldr	r3, [pc, #172]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f023 020f 	bic.w	r2, r3, #15
 800ba30:	4929      	ldr	r1, [pc, #164]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ba38:	f7fc fd4e 	bl	80084d8 <HAL_GetTick>
 800ba3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba3e:	e00a      	b.n	800ba56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba40:	f7fc fd4a 	bl	80084d8 <HAL_GetTick>
 800ba44:	4602      	mov	r2, r0
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e03b      	b.n	800bace <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba56:	4b20      	ldr	r3, [pc, #128]	; (800bad8 <HAL_RCC_ClockConfig+0x260>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 030f 	and.w	r3, r3, #15
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d1ed      	bne.n	800ba40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d008      	beq.n	800ba82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba70:	4b1a      	ldr	r3, [pc, #104]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	4917      	ldr	r1, [pc, #92]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba8e:	4b13      	ldr	r3, [pc, #76]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	490f      	ldr	r1, [pc, #60]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800baa2:	f000 f825 	bl	800baf0 <HAL_RCC_GetSysClockFreq>
 800baa6:	4601      	mov	r1, r0
 800baa8:	4b0c      	ldr	r3, [pc, #48]	; (800badc <HAL_RCC_ClockConfig+0x264>)
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	091b      	lsrs	r3, r3, #4
 800baae:	f003 030f 	and.w	r3, r3, #15
 800bab2:	4a0c      	ldr	r2, [pc, #48]	; (800bae4 <HAL_RCC_ClockConfig+0x26c>)
 800bab4:	5cd3      	ldrb	r3, [r2, r3]
 800bab6:	f003 031f 	and.w	r3, r3, #31
 800baba:	fa21 f303 	lsr.w	r3, r1, r3
 800babe:	4a0a      	ldr	r2, [pc, #40]	; (800bae8 <HAL_RCC_ClockConfig+0x270>)
 800bac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bac2:	4b0a      	ldr	r3, [pc, #40]	; (800baec <HAL_RCC_ClockConfig+0x274>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fc fcba 	bl	8008440 <HAL_InitTick>
 800bacc:	4603      	mov	r3, r0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3718      	adds	r7, #24
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	40022000 	.word	0x40022000
 800badc:	40021000 	.word	0x40021000
 800bae0:	04c4b400 	.word	0x04c4b400
 800bae4:	0801414c 	.word	0x0801414c
 800bae8:	20000ca8 	.word	0x20000ca8
 800baec:	20000cac 	.word	0x20000cac

0800baf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800baf6:	4b2c      	ldr	r3, [pc, #176]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	f003 030c 	and.w	r3, r3, #12
 800bafe:	2b04      	cmp	r3, #4
 800bb00:	d102      	bne.n	800bb08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bb02:	4b2a      	ldr	r3, [pc, #168]	; (800bbac <HAL_RCC_GetSysClockFreq+0xbc>)
 800bb04:	613b      	str	r3, [r7, #16]
 800bb06:	e047      	b.n	800bb98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bb08:	4b27      	ldr	r3, [pc, #156]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	f003 030c 	and.w	r3, r3, #12
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d102      	bne.n	800bb1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bb14:	4b26      	ldr	r3, [pc, #152]	; (800bbb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bb16:	613b      	str	r3, [r7, #16]
 800bb18:	e03e      	b.n	800bb98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bb1a:	4b23      	ldr	r3, [pc, #140]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f003 030c 	and.w	r3, r3, #12
 800bb22:	2b0c      	cmp	r3, #12
 800bb24:	d136      	bne.n	800bb94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb26:	4b20      	ldr	r3, [pc, #128]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f003 0303 	and.w	r3, r3, #3
 800bb2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb30:	4b1d      	ldr	r3, [pc, #116]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	091b      	lsrs	r3, r3, #4
 800bb36:	f003 030f 	and.w	r3, r3, #15
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d10c      	bne.n	800bb5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb44:	4a1a      	ldr	r2, [pc, #104]	; (800bbb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb4c:	4a16      	ldr	r2, [pc, #88]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb4e:	68d2      	ldr	r2, [r2, #12]
 800bb50:	0a12      	lsrs	r2, r2, #8
 800bb52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb56:	fb02 f303 	mul.w	r3, r2, r3
 800bb5a:	617b      	str	r3, [r7, #20]
      break;
 800bb5c:	e00c      	b.n	800bb78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb5e:	4a13      	ldr	r2, [pc, #76]	; (800bbac <HAL_RCC_GetSysClockFreq+0xbc>)
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb66:	4a10      	ldr	r2, [pc, #64]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb68:	68d2      	ldr	r2, [r2, #12]
 800bb6a:	0a12      	lsrs	r2, r2, #8
 800bb6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb70:	fb02 f303 	mul.w	r3, r2, r3
 800bb74:	617b      	str	r3, [r7, #20]
      break;
 800bb76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb78:	4b0b      	ldr	r3, [pc, #44]	; (800bba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	0e5b      	lsrs	r3, r3, #25
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	3301      	adds	r3, #1
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	e001      	b.n	800bb98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bb98:	693b      	ldr	r3, [r7, #16]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	371c      	adds	r7, #28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	40021000 	.word	0x40021000
 800bbac:	00f42400 	.word	0x00f42400
 800bbb0:	007a1200 	.word	0x007a1200

0800bbb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bbb8:	4b03      	ldr	r3, [pc, #12]	; (800bbc8 <HAL_RCC_GetHCLKFreq+0x14>)
 800bbba:	681b      	ldr	r3, [r3, #0]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	20000ca8 	.word	0x20000ca8

0800bbcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bbd2:	4b1e      	ldr	r3, [pc, #120]	; (800bc4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bbdc:	4b1b      	ldr	r3, [pc, #108]	; (800bc4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	091b      	lsrs	r3, r3, #4
 800bbe2:	f003 030f 	and.w	r3, r3, #15
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d10c      	bne.n	800bc0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bbf0:	4a17      	ldr	r2, [pc, #92]	; (800bc50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf8:	4a14      	ldr	r2, [pc, #80]	; (800bc4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bbfa:	68d2      	ldr	r2, [r2, #12]
 800bbfc:	0a12      	lsrs	r2, r2, #8
 800bbfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc02:	fb02 f303 	mul.w	r3, r2, r3
 800bc06:	617b      	str	r3, [r7, #20]
    break;
 800bc08:	e00c      	b.n	800bc24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bc0a:	4a12      	ldr	r2, [pc, #72]	; (800bc54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc12:	4a0e      	ldr	r2, [pc, #56]	; (800bc4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bc14:	68d2      	ldr	r2, [r2, #12]
 800bc16:	0a12      	lsrs	r2, r2, #8
 800bc18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc1c:	fb02 f303 	mul.w	r3, r2, r3
 800bc20:	617b      	str	r3, [r7, #20]
    break;
 800bc22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bc24:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	0e5b      	lsrs	r3, r3, #25
 800bc2a:	f003 0303 	and.w	r3, r3, #3
 800bc2e:	3301      	adds	r3, #1
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bc3e:	687b      	ldr	r3, [r7, #4]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	371c      	adds	r7, #28
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	40021000 	.word	0x40021000
 800bc50:	007a1200 	.word	0x007a1200
 800bc54:	00f42400 	.word	0x00f42400

0800bc58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bc60:	2300      	movs	r3, #0
 800bc62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bc64:	2300      	movs	r3, #0
 800bc66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 8098 	beq.w	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc76:	2300      	movs	r3, #0
 800bc78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc7a:	4b43      	ldr	r3, [pc, #268]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10d      	bne.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc86:	4b40      	ldr	r3, [pc, #256]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc8a:	4a3f      	ldr	r2, [pc, #252]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc90:	6593      	str	r3, [r2, #88]	; 0x58
 800bc92:	4b3d      	ldr	r3, [pc, #244]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc9a:	60bb      	str	r3, [r7, #8]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bca2:	4b3a      	ldr	r3, [pc, #232]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a39      	ldr	r2, [pc, #228]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcae:	f7fc fc13 	bl	80084d8 <HAL_GetTick>
 800bcb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcb4:	e009      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcb6:	f7fc fc0f 	bl	80084d8 <HAL_GetTick>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	1ad3      	subs	r3, r2, r3
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d902      	bls.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	74fb      	strb	r3, [r7, #19]
        break;
 800bcc8:	e005      	b.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcca:	4b30      	ldr	r3, [pc, #192]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0ef      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bcd6:	7cfb      	ldrb	r3, [r7, #19]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d159      	bne.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bcdc:	4b2a      	ldr	r3, [pc, #168]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bce6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d01e      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d019      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bcf8:	4b23      	ldr	r3, [pc, #140]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd04:	4b20      	ldr	r3, [pc, #128]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd0a:	4a1f      	ldr	r2, [pc, #124]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd14:	4b1c      	ldr	r3, [pc, #112]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd1a:	4a1b      	ldr	r2, [pc, #108]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bd24:	4a18      	ldr	r2, [pc, #96]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d016      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd36:	f7fc fbcf 	bl	80084d8 <HAL_GetTick>
 800bd3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd3c:	e00b      	b.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd3e:	f7fc fbcb 	bl	80084d8 <HAL_GetTick>
 800bd42:	4602      	mov	r2, r0
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d902      	bls.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bd50:	2303      	movs	r3, #3
 800bd52:	74fb      	strb	r3, [r7, #19]
            break;
 800bd54:	e006      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd56:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0ec      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bd64:	7cfb      	ldrb	r3, [r7, #19]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10b      	bne.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd6a:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd78:	4903      	ldr	r1, [pc, #12]	; (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bd80:	e008      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd82:	7cfb      	ldrb	r3, [r7, #19]
 800bd84:	74bb      	strb	r3, [r7, #18]
 800bd86:	e005      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bd88:	40021000 	.word	0x40021000
 800bd8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd90:	7cfb      	ldrb	r3, [r7, #19]
 800bd92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd94:	7c7b      	ldrb	r3, [r7, #17]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d105      	bne.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd9a:	4baf      	ldr	r3, [pc, #700]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9e:	4aae      	ldr	r2, [pc, #696]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bda0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bda4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bdb2:	4ba9      	ldr	r3, [pc, #676]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb8:	f023 0203 	bic.w	r2, r3, #3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	49a5      	ldr	r1, [pc, #660]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00a      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bdd4:	4ba0      	ldr	r3, [pc, #640]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdda:	f023 020c 	bic.w	r2, r3, #12
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	499d      	ldr	r1, [pc, #628]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde4:	4313      	orrs	r3, r2
 800bde6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0304 	and.w	r3, r3, #4
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00a      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bdf6:	4b98      	ldr	r3, [pc, #608]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	4994      	ldr	r1, [pc, #592]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be06:	4313      	orrs	r3, r2
 800be08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00a      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800be18:	4b8f      	ldr	r3, [pc, #572]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	498c      	ldr	r1, [pc, #560]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be28:	4313      	orrs	r3, r2
 800be2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 0310 	and.w	r3, r3, #16
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800be3a:	4b87      	ldr	r3, [pc, #540]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	4983      	ldr	r1, [pc, #524]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be4a:	4313      	orrs	r3, r2
 800be4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0320 	and.w	r3, r3, #32
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00a      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be5c:	4b7e      	ldr	r3, [pc, #504]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	497b      	ldr	r1, [pc, #492]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be6c:	4313      	orrs	r3, r2
 800be6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00a      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be7e:	4b76      	ldr	r3, [pc, #472]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	69db      	ldr	r3, [r3, #28]
 800be8c:	4972      	ldr	r1, [pc, #456]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00a      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bea0:	4b6d      	ldr	r3, [pc, #436]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	496a      	ldr	r1, [pc, #424]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beb0:	4313      	orrs	r3, r2
 800beb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00a      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bec2:	4b65      	ldr	r3, [pc, #404]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed0:	4961      	ldr	r1, [pc, #388]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bed2:	4313      	orrs	r3, r2
 800bed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00a      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bee4:	4b5c      	ldr	r3, [pc, #368]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800beea:	f023 0203 	bic.w	r2, r3, #3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef2:	4959      	ldr	r1, [pc, #356]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bef4:	4313      	orrs	r3, r2
 800bef6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf06:	4b54      	ldr	r3, [pc, #336]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	4950      	ldr	r1, [pc, #320]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d015      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf28:	4b4b      	ldr	r3, [pc, #300]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf36:	4948      	ldr	r1, [pc, #288]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf46:	d105      	bne.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf48:	4b43      	ldr	r3, [pc, #268]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	4a42      	ldr	r2, [pc, #264]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d015      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bf60:	4b3d      	ldr	r3, [pc, #244]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf6e:	493a      	ldr	r1, [pc, #232]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf7e:	d105      	bne.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf80:	4b35      	ldr	r3, [pc, #212]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	4a34      	ldr	r2, [pc, #208]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d015      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf98:	4b2f      	ldr	r3, [pc, #188]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	492c      	ldr	r1, [pc, #176]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfb6:	d105      	bne.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bfb8:	4b27      	ldr	r3, [pc, #156]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	4a26      	ldr	r2, [pc, #152]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfc2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d015      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfd0:	4b21      	ldr	r3, [pc, #132]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfde:	491e      	ldr	r1, [pc, #120]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfee:	d105      	bne.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bff0:	4b19      	ldr	r3, [pc, #100]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	4a18      	ldr	r2, [pc, #96]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bffa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c004:	2b00      	cmp	r3, #0
 800c006:	d015      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c008:	4b13      	ldr	r3, [pc, #76]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c00e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	4910      	ldr	r1, [pc, #64]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c018:	4313      	orrs	r3, r2
 800c01a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c026:	d105      	bne.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c028:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	4a0a      	ldr	r2, [pc, #40]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c02e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c032:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d018      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c040:	4b05      	ldr	r3, [pc, #20]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c046:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c04e:	4902      	ldr	r1, [pc, #8]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c050:	4313      	orrs	r3, r2
 800c052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c056:	e001      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800c058:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c064:	d105      	bne.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c066:	4b21      	ldr	r3, [pc, #132]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	4a20      	ldr	r2, [pc, #128]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c06c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c070:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d015      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c07e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c084:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c08c:	4917      	ldr	r1, [pc, #92]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c09c:	d105      	bne.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c09e:	4b13      	ldr	r3, [pc, #76]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	4a12      	ldr	r2, [pc, #72]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c0a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0a8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d015      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c0b6:	4b0d      	ldr	r3, [pc, #52]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c0b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0c4:	4909      	ldr	r1, [pc, #36]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0d4:	d105      	bne.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	4a04      	ldr	r2, [pc, #16]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c0dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0e0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c0e2:	7cbb      	ldrb	r3, [r7, #18]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	40021000 	.word	0x40021000

0800c0f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e084      	b.n	800c20c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d106      	bne.n	800c122 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7fb fc23 	bl	8007968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2202      	movs	r2, #2
 800c126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c138:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c142:	d902      	bls.n	800c14a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c144:	2300      	movs	r3, #0
 800c146:	60fb      	str	r3, [r7, #12]
 800c148:	e002      	b.n	800c150 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c14a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c14e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c158:	d007      	beq.n	800c16a <HAL_SPI_Init+0x7a>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c162:	d002      	beq.n	800c16a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10b      	bne.n	800c18a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c17a:	d903      	bls.n	800c184 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	631a      	str	r2, [r3, #48]	; 0x30
 800c182:	e002      	b.n	800c18a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	431a      	orrs	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	431a      	orrs	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1a8:	431a      	orrs	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	ea42 0103 	orr.w	r1, r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	699b      	ldr	r3, [r3, #24]
 800c1c8:	0c1b      	lsrs	r3, r3, #16
 800c1ca:	f003 0204 	and.w	r2, r3, #4
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	431a      	orrs	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d8:	431a      	orrs	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	ea42 0103 	orr.w	r1, r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	430a      	orrs	r2, r1
 800c1ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	69da      	ldr	r2, [r3, #28]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e049      	b.n	800c2ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7fc f802 	bl	8008244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2202      	movs	r2, #2
 800c244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3304      	adds	r3, #4
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f000 fe5c 	bl	800cf10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d001      	beq.n	800c2dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e019      	b.n	800c310 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	689a      	ldr	r2, [r3, #8]
 800c2ea:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <HAL_TIM_Base_Start+0x58>)
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b06      	cmp	r3, #6
 800c2f4:	d00b      	beq.n	800c30e <HAL_TIM_Base_Start+0x4a>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2fc:	d007      	beq.n	800c30e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f042 0201 	orr.w	r2, r2, #1
 800c30c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	00010007 	.word	0x00010007

0800c320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	2b01      	cmp	r3, #1
 800c332:	d001      	beq.n	800c338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	e021      	b.n	800c37c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2202      	movs	r2, #2
 800c33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68da      	ldr	r2, [r3, #12]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f042 0201 	orr.w	r2, r2, #1
 800c34e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689a      	ldr	r2, [r3, #8]
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <HAL_TIM_Base_Start_IT+0x68>)
 800c358:	4013      	ands	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b06      	cmp	r3, #6
 800c360:	d00b      	beq.n	800c37a <HAL_TIM_Base_Start_IT+0x5a>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c368:	d007      	beq.n	800c37a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f042 0201 	orr.w	r2, r2, #1
 800c378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	00010007 	.word	0x00010007

0800c38c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0201 	bic.w	r2, r2, #1
 800c3a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6a1a      	ldr	r2, [r3, #32]
 800c3aa:	f241 1311 	movw	r3, #4369	; 0x1111
 800c3ae:	4013      	ands	r3, r2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10f      	bne.n	800c3d4 <HAL_TIM_Base_Stop_IT+0x48>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6a1a      	ldr	r2, [r3, #32]
 800c3ba:	f244 4344 	movw	r3, #17476	; 0x4444
 800c3be:	4013      	ands	r3, r2
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d107      	bne.n	800c3d4 <HAL_TIM_Base_Stop_IT+0x48>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 0201 	bic.w	r2, r2, #1
 800c3d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	370c      	adds	r7, #12
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e049      	b.n	800c490 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b00      	cmp	r3, #0
 800c406:	d106      	bne.n	800c416 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f841 	bl	800c498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2202      	movs	r2, #2
 800c41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3304      	adds	r3, #4
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f000 fd71 	bl	800cf10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2201      	movs	r2, #1
 800c472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c4a0:	bf00      	nop
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d109      	bne.n	800c4d0 <HAL_TIM_PWM_Start+0x24>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	bf14      	ite	ne
 800c4c8:	2301      	movne	r3, #1
 800c4ca:	2300      	moveq	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	e03c      	b.n	800c54a <HAL_TIM_PWM_Start+0x9e>
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	d109      	bne.n	800c4ea <HAL_TIM_PWM_Start+0x3e>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	bf14      	ite	ne
 800c4e2:	2301      	movne	r3, #1
 800c4e4:	2300      	moveq	r3, #0
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	e02f      	b.n	800c54a <HAL_TIM_PWM_Start+0x9e>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b08      	cmp	r3, #8
 800c4ee:	d109      	bne.n	800c504 <HAL_TIM_PWM_Start+0x58>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	bf14      	ite	ne
 800c4fc:	2301      	movne	r3, #1
 800c4fe:	2300      	moveq	r3, #0
 800c500:	b2db      	uxtb	r3, r3
 800c502:	e022      	b.n	800c54a <HAL_TIM_PWM_Start+0x9e>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b0c      	cmp	r3, #12
 800c508:	d109      	bne.n	800c51e <HAL_TIM_PWM_Start+0x72>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b01      	cmp	r3, #1
 800c514:	bf14      	ite	ne
 800c516:	2301      	movne	r3, #1
 800c518:	2300      	moveq	r3, #0
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	e015      	b.n	800c54a <HAL_TIM_PWM_Start+0x9e>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b10      	cmp	r3, #16
 800c522:	d109      	bne.n	800c538 <HAL_TIM_PWM_Start+0x8c>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	bf14      	ite	ne
 800c530:	2301      	movne	r3, #1
 800c532:	2300      	moveq	r3, #0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	e008      	b.n	800c54a <HAL_TIM_PWM_Start+0x9e>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	2b01      	cmp	r3, #1
 800c542:	bf14      	ite	ne
 800c544:	2301      	movne	r3, #1
 800c546:	2300      	moveq	r3, #0
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d001      	beq.n	800c552 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e073      	b.n	800c63a <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d104      	bne.n	800c562 <HAL_TIM_PWM_Start+0xb6>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c560:	e023      	b.n	800c5aa <HAL_TIM_PWM_Start+0xfe>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2b04      	cmp	r3, #4
 800c566:	d104      	bne.n	800c572 <HAL_TIM_PWM_Start+0xc6>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2202      	movs	r2, #2
 800c56c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c570:	e01b      	b.n	800c5aa <HAL_TIM_PWM_Start+0xfe>
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b08      	cmp	r3, #8
 800c576:	d104      	bne.n	800c582 <HAL_TIM_PWM_Start+0xd6>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2202      	movs	r2, #2
 800c57c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c580:	e013      	b.n	800c5aa <HAL_TIM_PWM_Start+0xfe>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	2b0c      	cmp	r3, #12
 800c586:	d104      	bne.n	800c592 <HAL_TIM_PWM_Start+0xe6>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2202      	movs	r2, #2
 800c58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c590:	e00b      	b.n	800c5aa <HAL_TIM_PWM_Start+0xfe>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b10      	cmp	r3, #16
 800c596:	d104      	bne.n	800c5a2 <HAL_TIM_PWM_Start+0xf6>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2202      	movs	r2, #2
 800c59c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5a0:	e003      	b.n	800c5aa <HAL_TIM_PWM_Start+0xfe>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f001 f91a 	bl	800d7ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a21      	ldr	r2, [pc, #132]	; (800c644 <HAL_TIM_PWM_Start+0x198>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d018      	beq.n	800c5f4 <HAL_TIM_PWM_Start+0x148>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a20      	ldr	r2, [pc, #128]	; (800c648 <HAL_TIM_PWM_Start+0x19c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d013      	beq.n	800c5f4 <HAL_TIM_PWM_Start+0x148>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a1e      	ldr	r2, [pc, #120]	; (800c64c <HAL_TIM_PWM_Start+0x1a0>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00e      	beq.n	800c5f4 <HAL_TIM_PWM_Start+0x148>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a1d      	ldr	r2, [pc, #116]	; (800c650 <HAL_TIM_PWM_Start+0x1a4>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d009      	beq.n	800c5f4 <HAL_TIM_PWM_Start+0x148>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a1b      	ldr	r2, [pc, #108]	; (800c654 <HAL_TIM_PWM_Start+0x1a8>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d004      	beq.n	800c5f4 <HAL_TIM_PWM_Start+0x148>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a1a      	ldr	r2, [pc, #104]	; (800c658 <HAL_TIM_PWM_Start+0x1ac>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d101      	bne.n	800c5f8 <HAL_TIM_PWM_Start+0x14c>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e000      	b.n	800c5fa <HAL_TIM_PWM_Start+0x14e>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c60c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	689a      	ldr	r2, [r3, #8]
 800c614:	4b11      	ldr	r3, [pc, #68]	; (800c65c <HAL_TIM_PWM_Start+0x1b0>)
 800c616:	4013      	ands	r3, r2
 800c618:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b06      	cmp	r3, #6
 800c61e:	d00b      	beq.n	800c638 <HAL_TIM_PWM_Start+0x18c>
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c626:	d007      	beq.n	800c638 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f042 0201 	orr.w	r2, r2, #1
 800c636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	40012c00 	.word	0x40012c00
 800c648:	40013400 	.word	0x40013400
 800c64c:	40014000 	.word	0x40014000
 800c650:	40014400 	.word	0x40014400
 800c654:	40014800 	.word	0x40014800
 800c658:	40015000 	.word	0x40015000
 800c65c:	00010007 	.word	0x00010007

0800c660 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	e097      	b.n	800c7a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7fb fd8f 	bl	80081ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2202      	movs	r2, #2
 800c692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	6812      	ldr	r2, [r2, #0]
 800c6a0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c6a4:	f023 0307 	bic.w	r3, r3, #7
 800c6a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	f000 fc2b 	bl	800cf10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6e2:	f023 0303 	bic.w	r3, r3, #3
 800c6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c700:	f023 030c 	bic.w	r3, r3, #12
 800c704:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c70c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	69db      	ldr	r3, [r3, #28]
 800c71a:	021b      	lsls	r3, r3, #8
 800c71c:	4313      	orrs	r3, r2
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	4313      	orrs	r3, r2
 800c722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	011a      	lsls	r2, r3, #4
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	031b      	lsls	r3, r3, #12
 800c730:	4313      	orrs	r3, r2
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	4313      	orrs	r3, r2
 800c736:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c73e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c746:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	695b      	ldr	r3, [r3, #20]
 800c750:	011b      	lsls	r3, r3, #4
 800c752:	4313      	orrs	r3, r2
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	4313      	orrs	r3, r2
 800c758:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2201      	movs	r2, #1
 800c796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	f003 0302 	and.w	r3, r3, #2
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d122      	bne.n	800c808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d11b      	bne.n	800c808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f06f 0202 	mvn.w	r2, #2
 800c7d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	699b      	ldr	r3, [r3, #24]
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fb70 	bl	800ced4 <HAL_TIM_IC_CaptureCallback>
 800c7f4:	e005      	b.n	800c802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fb62 	bl	800cec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fb73 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	f003 0304 	and.w	r3, r3, #4
 800c812:	2b04      	cmp	r3, #4
 800c814:	d122      	bne.n	800c85c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b04      	cmp	r3, #4
 800c822:	d11b      	bne.n	800c85c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f06f 0204 	mvn.w	r2, #4
 800c82c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2202      	movs	r2, #2
 800c832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fb46 	bl	800ced4 <HAL_TIM_IC_CaptureCallback>
 800c848:	e005      	b.n	800c856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fb38 	bl	800cec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fb49 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	f003 0308 	and.w	r3, r3, #8
 800c866:	2b08      	cmp	r3, #8
 800c868:	d122      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	f003 0308 	and.w	r3, r3, #8
 800c874:	2b08      	cmp	r3, #8
 800c876:	d11b      	bne.n	800c8b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f06f 0208 	mvn.w	r2, #8
 800c880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2204      	movs	r2, #4
 800c886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	f003 0303 	and.w	r3, r3, #3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fb1c 	bl	800ced4 <HAL_TIM_IC_CaptureCallback>
 800c89c:	e005      	b.n	800c8aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fb0e 	bl	800cec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fb1f 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	f003 0310 	and.w	r3, r3, #16
 800c8ba:	2b10      	cmp	r3, #16
 800c8bc:	d122      	bne.n	800c904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b10      	cmp	r3, #16
 800c8ca:	d11b      	bne.n	800c904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f06f 0210 	mvn.w	r2, #16
 800c8d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2208      	movs	r2, #8
 800c8da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 faf2 	bl	800ced4 <HAL_TIM_IC_CaptureCallback>
 800c8f0:	e005      	b.n	800c8fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fae4 	bl	800cec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 faf5 	bl	800cee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d10e      	bne.n	800c930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f003 0301 	and.w	r3, r3, #1
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d107      	bne.n	800c930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f06f 0201 	mvn.w	r2, #1
 800c928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 fabe 	bl	800ceac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c93a:	2b80      	cmp	r3, #128	; 0x80
 800c93c:	d10e      	bne.n	800c95c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c948:	2b80      	cmp	r3, #128	; 0x80
 800c94a:	d107      	bne.n	800c95c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f001 f8c0 	bl	800dadc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c96a:	d10e      	bne.n	800c98a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c976:	2b80      	cmp	r3, #128	; 0x80
 800c978:	d107      	bne.n	800c98a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f001 f8b3 	bl	800daf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c994:	2b40      	cmp	r3, #64	; 0x40
 800c996:	d10e      	bne.n	800c9b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a2:	2b40      	cmp	r3, #64	; 0x40
 800c9a4:	d107      	bne.n	800c9b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c9ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 faa3 	bl	800cefc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	f003 0320 	and.w	r3, r3, #32
 800c9c0:	2b20      	cmp	r3, #32
 800c9c2:	d10e      	bne.n	800c9e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f003 0320 	and.w	r3, r3, #32
 800c9ce:	2b20      	cmp	r3, #32
 800c9d0:	d107      	bne.n	800c9e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f06f 0220 	mvn.w	r2, #32
 800c9da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f001 f873 	bl	800dac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9f0:	d10f      	bne.n	800ca12 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca00:	d107      	bne.n	800ca12 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ca0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f001 f879 	bl	800db04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca20:	d10f      	bne.n	800ca42 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca30:	d107      	bne.n	800ca42 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ca3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f001 f86b 	bl	800db18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca50:	d10f      	bne.n	800ca72 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca60:	d107      	bne.n	800ca72 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ca6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 f85d 	bl	800db2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca80:	d10f      	bne.n	800caa2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca90:	d107      	bne.n	800caa2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ca9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 f84f 	bl	800db40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800caa2:	bf00      	nop
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
	...

0800caac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d101      	bne.n	800cac6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cac2:	2302      	movs	r3, #2
 800cac4:	e0fd      	b.n	800ccc2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b14      	cmp	r3, #20
 800cad2:	f200 80f0 	bhi.w	800ccb6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800cad6:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cadc:	0800cb31 	.word	0x0800cb31
 800cae0:	0800ccb7 	.word	0x0800ccb7
 800cae4:	0800ccb7 	.word	0x0800ccb7
 800cae8:	0800ccb7 	.word	0x0800ccb7
 800caec:	0800cb71 	.word	0x0800cb71
 800caf0:	0800ccb7 	.word	0x0800ccb7
 800caf4:	0800ccb7 	.word	0x0800ccb7
 800caf8:	0800ccb7 	.word	0x0800ccb7
 800cafc:	0800cbb3 	.word	0x0800cbb3
 800cb00:	0800ccb7 	.word	0x0800ccb7
 800cb04:	0800ccb7 	.word	0x0800ccb7
 800cb08:	0800ccb7 	.word	0x0800ccb7
 800cb0c:	0800cbf3 	.word	0x0800cbf3
 800cb10:	0800ccb7 	.word	0x0800ccb7
 800cb14:	0800ccb7 	.word	0x0800ccb7
 800cb18:	0800ccb7 	.word	0x0800ccb7
 800cb1c:	0800cc35 	.word	0x0800cc35
 800cb20:	0800ccb7 	.word	0x0800ccb7
 800cb24:	0800ccb7 	.word	0x0800ccb7
 800cb28:	0800ccb7 	.word	0x0800ccb7
 800cb2c:	0800cc75 	.word	0x0800cc75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	68b9      	ldr	r1, [r7, #8]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 fa92 	bl	800d060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	699a      	ldr	r2, [r3, #24]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f042 0208 	orr.w	r2, r2, #8
 800cb4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	699a      	ldr	r2, [r3, #24]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f022 0204 	bic.w	r2, r2, #4
 800cb5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6999      	ldr	r1, [r3, #24]
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	691a      	ldr	r2, [r3, #16]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	430a      	orrs	r2, r1
 800cb6c:	619a      	str	r2, [r3, #24]
      break;
 800cb6e:	e0a3      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68b9      	ldr	r1, [r7, #8]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fb0c 	bl	800d194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	699a      	ldr	r2, [r3, #24]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	699a      	ldr	r2, [r3, #24]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6999      	ldr	r1, [r3, #24]
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	021a      	lsls	r2, r3, #8
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	430a      	orrs	r2, r1
 800cbae:	619a      	str	r2, [r3, #24]
      break;
 800cbb0:	e082      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68b9      	ldr	r1, [r7, #8]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 fb7f 	bl	800d2bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	69da      	ldr	r2, [r3, #28]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f042 0208 	orr.w	r2, r2, #8
 800cbcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	69da      	ldr	r2, [r3, #28]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f022 0204 	bic.w	r2, r2, #4
 800cbdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	69d9      	ldr	r1, [r3, #28]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	691a      	ldr	r2, [r3, #16]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	430a      	orrs	r2, r1
 800cbee:	61da      	str	r2, [r3, #28]
      break;
 800cbf0:	e062      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68b9      	ldr	r1, [r7, #8]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 fbf1 	bl	800d3e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69da      	ldr	r2, [r3, #28]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	69da      	ldr	r2, [r3, #28]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	69d9      	ldr	r1, [r3, #28]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	021a      	lsls	r2, r3, #8
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	430a      	orrs	r2, r1
 800cc30:	61da      	str	r2, [r3, #28]
      break;
 800cc32:	e041      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	68b9      	ldr	r1, [r7, #8]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 fc64 	bl	800d508 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f042 0208 	orr.w	r2, r2, #8
 800cc4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f022 0204 	bic.w	r2, r2, #4
 800cc5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	691a      	ldr	r2, [r3, #16]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cc72:	e021      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 fcae 	bl	800d5dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	021a      	lsls	r2, r3, #8
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ccb4:	e000      	b.n	800ccb8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ccb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop

0800cccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d101      	bne.n	800cce4 <HAL_TIM_ConfigClockSource+0x18>
 800cce0:	2302      	movs	r3, #2
 800cce2:	e0d2      	b.n	800ce8a <HAL_TIM_ConfigClockSource+0x1be>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2202      	movs	r2, #2
 800ccf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cd02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd20:	f000 80a9 	beq.w	800ce76 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd28:	d81a      	bhi.n	800cd60 <HAL_TIM_ConfigClockSource+0x94>
 800cd2a:	2b30      	cmp	r3, #48	; 0x30
 800cd2c:	f000 809a 	beq.w	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cd30:	2b30      	cmp	r3, #48	; 0x30
 800cd32:	d809      	bhi.n	800cd48 <HAL_TIM_ConfigClockSource+0x7c>
 800cd34:	2b10      	cmp	r3, #16
 800cd36:	f000 8095 	beq.w	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cd3a:	2b20      	cmp	r3, #32
 800cd3c:	f000 8092 	beq.w	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 808f 	beq.w	800ce64 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cd46:	e097      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cd48:	2b50      	cmp	r3, #80	; 0x50
 800cd4a:	d05b      	beq.n	800ce04 <HAL_TIM_ConfigClockSource+0x138>
 800cd4c:	2b50      	cmp	r3, #80	; 0x50
 800cd4e:	d802      	bhi.n	800cd56 <HAL_TIM_ConfigClockSource+0x8a>
 800cd50:	2b40      	cmp	r3, #64	; 0x40
 800cd52:	d077      	beq.n	800ce44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cd54:	e090      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cd56:	2b60      	cmp	r3, #96	; 0x60
 800cd58:	d064      	beq.n	800ce24 <HAL_TIM_ConfigClockSource+0x158>
 800cd5a:	2b70      	cmp	r3, #112	; 0x70
 800cd5c:	d028      	beq.n	800cdb0 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800cd5e:	e08b      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cd60:	4a4c      	ldr	r2, [pc, #304]	; (800ce94 <HAL_TIM_ConfigClockSource+0x1c8>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d07e      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cd66:	4a4b      	ldr	r2, [pc, #300]	; (800ce94 <HAL_TIM_ConfigClockSource+0x1c8>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d810      	bhi.n	800cd8e <HAL_TIM_ConfigClockSource+0xc2>
 800cd6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd70:	d078      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cd72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd76:	d803      	bhi.n	800cd80 <HAL_TIM_ConfigClockSource+0xb4>
 800cd78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd7c:	d02f      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x112>
      break;
 800cd7e:	e07b      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cd80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cd84:	d06e      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cd86:	4a44      	ldr	r2, [pc, #272]	; (800ce98 <HAL_TIM_ConfigClockSource+0x1cc>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d06b      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cd8c:	e074      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cd8e:	4a43      	ldr	r2, [pc, #268]	; (800ce9c <HAL_TIM_ConfigClockSource+0x1d0>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d067      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cd94:	4a41      	ldr	r2, [pc, #260]	; (800ce9c <HAL_TIM_ConfigClockSource+0x1d0>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d803      	bhi.n	800cda2 <HAL_TIM_ConfigClockSource+0xd6>
 800cd9a:	4a41      	ldr	r2, [pc, #260]	; (800cea0 <HAL_TIM_ConfigClockSource+0x1d4>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d061      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cda0:	e06a      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cda2:	4a40      	ldr	r2, [pc, #256]	; (800cea4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d05d      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
 800cda8:	4a3f      	ldr	r2, [pc, #252]	; (800cea8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d05a      	beq.n	800ce64 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cdae:	e063      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	6899      	ldr	r1, [r3, #8]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	f000 fcf4 	bl	800d7ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cdd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	609a      	str	r2, [r3, #8]
      break;
 800cddc:	e04c      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6818      	ldr	r0, [r3, #0]
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	6899      	ldr	r1, [r3, #8]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f000 fcdd 	bl	800d7ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	689a      	ldr	r2, [r3, #8]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce00:	609a      	str	r2, [r3, #8]
      break;
 800ce02:	e039      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	6859      	ldr	r1, [r3, #4]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	461a      	mov	r2, r3
 800ce12:	f000 fc4f 	bl	800d6b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2150      	movs	r1, #80	; 0x50
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 fca8 	bl	800d772 <TIM_ITRx_SetConfig>
      break;
 800ce22:	e029      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	6859      	ldr	r1, [r3, #4]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	461a      	mov	r2, r3
 800ce32:	f000 fc6e 	bl	800d712 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2160      	movs	r1, #96	; 0x60
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fc98 	bl	800d772 <TIM_ITRx_SetConfig>
      break;
 800ce42:	e019      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6818      	ldr	r0, [r3, #0]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	6859      	ldr	r1, [r3, #4]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	461a      	mov	r2, r3
 800ce52:	f000 fc2f 	bl	800d6b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2140      	movs	r1, #64	; 0x40
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f000 fc88 	bl	800d772 <TIM_ITRx_SetConfig>
      break;
 800ce62:	e009      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	4610      	mov	r0, r2
 800ce70:	f000 fc7f 	bl	800d772 <TIM_ITRx_SetConfig>
      break;
 800ce74:	e000      	b.n	800ce78 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800ce76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	00100030 	.word	0x00100030
 800ce98:	00100020 	.word	0x00100020
 800ce9c:	00100050 	.word	0x00100050
 800cea0:	00100040 	.word	0x00100040
 800cea4:	00100060 	.word	0x00100060
 800cea8:	00100070 	.word	0x00100070

0800ceac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cef0:	bf00      	nop
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a46      	ldr	r2, [pc, #280]	; (800d03c <TIM_Base_SetConfig+0x12c>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d017      	beq.n	800cf58 <TIM_Base_SetConfig+0x48>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf2e:	d013      	beq.n	800cf58 <TIM_Base_SetConfig+0x48>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a43      	ldr	r2, [pc, #268]	; (800d040 <TIM_Base_SetConfig+0x130>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d00f      	beq.n	800cf58 <TIM_Base_SetConfig+0x48>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a42      	ldr	r2, [pc, #264]	; (800d044 <TIM_Base_SetConfig+0x134>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d00b      	beq.n	800cf58 <TIM_Base_SetConfig+0x48>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a41      	ldr	r2, [pc, #260]	; (800d048 <TIM_Base_SetConfig+0x138>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d007      	beq.n	800cf58 <TIM_Base_SetConfig+0x48>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a40      	ldr	r2, [pc, #256]	; (800d04c <TIM_Base_SetConfig+0x13c>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d003      	beq.n	800cf58 <TIM_Base_SetConfig+0x48>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a3f      	ldr	r2, [pc, #252]	; (800d050 <TIM_Base_SetConfig+0x140>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d108      	bne.n	800cf6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a33      	ldr	r2, [pc, #204]	; (800d03c <TIM_Base_SetConfig+0x12c>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d023      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf78:	d01f      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a30      	ldr	r2, [pc, #192]	; (800d040 <TIM_Base_SetConfig+0x130>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d01b      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a2f      	ldr	r2, [pc, #188]	; (800d044 <TIM_Base_SetConfig+0x134>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d017      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a2e      	ldr	r2, [pc, #184]	; (800d048 <TIM_Base_SetConfig+0x138>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d013      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a2d      	ldr	r2, [pc, #180]	; (800d04c <TIM_Base_SetConfig+0x13c>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d00f      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a2d      	ldr	r2, [pc, #180]	; (800d054 <TIM_Base_SetConfig+0x144>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d00b      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a2c      	ldr	r2, [pc, #176]	; (800d058 <TIM_Base_SetConfig+0x148>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d007      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a2b      	ldr	r2, [pc, #172]	; (800d05c <TIM_Base_SetConfig+0x14c>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d003      	beq.n	800cfba <TIM_Base_SetConfig+0xaa>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4a26      	ldr	r2, [pc, #152]	; (800d050 <TIM_Base_SetConfig+0x140>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d108      	bne.n	800cfcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	689a      	ldr	r2, [r3, #8]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a12      	ldr	r2, [pc, #72]	; (800d03c <TIM_Base_SetConfig+0x12c>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d013      	beq.n	800d020 <TIM_Base_SetConfig+0x110>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a14      	ldr	r2, [pc, #80]	; (800d04c <TIM_Base_SetConfig+0x13c>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d00f      	beq.n	800d020 <TIM_Base_SetConfig+0x110>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a14      	ldr	r2, [pc, #80]	; (800d054 <TIM_Base_SetConfig+0x144>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00b      	beq.n	800d020 <TIM_Base_SetConfig+0x110>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a13      	ldr	r2, [pc, #76]	; (800d058 <TIM_Base_SetConfig+0x148>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d007      	beq.n	800d020 <TIM_Base_SetConfig+0x110>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a12      	ldr	r2, [pc, #72]	; (800d05c <TIM_Base_SetConfig+0x14c>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <TIM_Base_SetConfig+0x110>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a0d      	ldr	r2, [pc, #52]	; (800d050 <TIM_Base_SetConfig+0x140>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d103      	bne.n	800d028 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	691a      	ldr	r2, [r3, #16]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	615a      	str	r2, [r3, #20]
}
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	40012c00 	.word	0x40012c00
 800d040:	40000400 	.word	0x40000400
 800d044:	40000800 	.word	0x40000800
 800d048:	40000c00 	.word	0x40000c00
 800d04c:	40013400 	.word	0x40013400
 800d050:	40015000 	.word	0x40015000
 800d054:	40014000 	.word	0x40014000
 800d058:	40014400 	.word	0x40014400
 800d05c:	40014800 	.word	0x40014800

0800d060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d060:	b480      	push	{r7}
 800d062:	b087      	sub	sp, #28
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	f023 0201 	bic.w	r2, r3, #1
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f023 0303 	bic.w	r3, r3, #3
 800d09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	f023 0302 	bic.w	r3, r3, #2
 800d0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	697a      	ldr	r2, [r7, #20]
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a30      	ldr	r2, [pc, #192]	; (800d17c <TIM_OC1_SetConfig+0x11c>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d013      	beq.n	800d0e8 <TIM_OC1_SetConfig+0x88>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a2f      	ldr	r2, [pc, #188]	; (800d180 <TIM_OC1_SetConfig+0x120>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d00f      	beq.n	800d0e8 <TIM_OC1_SetConfig+0x88>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a2e      	ldr	r2, [pc, #184]	; (800d184 <TIM_OC1_SetConfig+0x124>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d00b      	beq.n	800d0e8 <TIM_OC1_SetConfig+0x88>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a2d      	ldr	r2, [pc, #180]	; (800d188 <TIM_OC1_SetConfig+0x128>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d007      	beq.n	800d0e8 <TIM_OC1_SetConfig+0x88>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a2c      	ldr	r2, [pc, #176]	; (800d18c <TIM_OC1_SetConfig+0x12c>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d003      	beq.n	800d0e8 <TIM_OC1_SetConfig+0x88>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4a2b      	ldr	r2, [pc, #172]	; (800d190 <TIM_OC1_SetConfig+0x130>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d10c      	bne.n	800d102 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	f023 0308 	bic.w	r3, r3, #8
 800d0ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	697a      	ldr	r2, [r7, #20]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f023 0304 	bic.w	r3, r3, #4
 800d100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a1d      	ldr	r2, [pc, #116]	; (800d17c <TIM_OC1_SetConfig+0x11c>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d013      	beq.n	800d132 <TIM_OC1_SetConfig+0xd2>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a1c      	ldr	r2, [pc, #112]	; (800d180 <TIM_OC1_SetConfig+0x120>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d00f      	beq.n	800d132 <TIM_OC1_SetConfig+0xd2>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a1b      	ldr	r2, [pc, #108]	; (800d184 <TIM_OC1_SetConfig+0x124>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d00b      	beq.n	800d132 <TIM_OC1_SetConfig+0xd2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a1a      	ldr	r2, [pc, #104]	; (800d188 <TIM_OC1_SetConfig+0x128>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d007      	beq.n	800d132 <TIM_OC1_SetConfig+0xd2>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a19      	ldr	r2, [pc, #100]	; (800d18c <TIM_OC1_SetConfig+0x12c>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d003      	beq.n	800d132 <TIM_OC1_SetConfig+0xd2>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a18      	ldr	r2, [pc, #96]	; (800d190 <TIM_OC1_SetConfig+0x130>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d111      	bne.n	800d156 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	693a      	ldr	r2, [r7, #16]
 800d148:	4313      	orrs	r3, r2
 800d14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	4313      	orrs	r3, r2
 800d154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	697a      	ldr	r2, [r7, #20]
 800d16e:	621a      	str	r2, [r3, #32]
}
 800d170:	bf00      	nop
 800d172:	371c      	adds	r7, #28
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	40012c00 	.word	0x40012c00
 800d180:	40013400 	.word	0x40013400
 800d184:	40014000 	.word	0x40014000
 800d188:	40014400 	.word	0x40014400
 800d18c:	40014800 	.word	0x40014800
 800d190:	40015000 	.word	0x40015000

0800d194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	f023 0210 	bic.w	r2, r3, #16
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a1b      	ldr	r3, [r3, #32]
 800d1ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	021b      	lsls	r3, r3, #8
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f023 0320 	bic.w	r3, r3, #32
 800d1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	011b      	lsls	r3, r3, #4
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a2c      	ldr	r2, [pc, #176]	; (800d2a4 <TIM_OC2_SetConfig+0x110>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d007      	beq.n	800d208 <TIM_OC2_SetConfig+0x74>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a2b      	ldr	r2, [pc, #172]	; (800d2a8 <TIM_OC2_SetConfig+0x114>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d003      	beq.n	800d208 <TIM_OC2_SetConfig+0x74>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a2a      	ldr	r2, [pc, #168]	; (800d2ac <TIM_OC2_SetConfig+0x118>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d10d      	bne.n	800d224 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d20e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	011b      	lsls	r3, r3, #4
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	4313      	orrs	r3, r2
 800d21a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a1f      	ldr	r2, [pc, #124]	; (800d2a4 <TIM_OC2_SetConfig+0x110>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d013      	beq.n	800d254 <TIM_OC2_SetConfig+0xc0>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a1e      	ldr	r2, [pc, #120]	; (800d2a8 <TIM_OC2_SetConfig+0x114>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d00f      	beq.n	800d254 <TIM_OC2_SetConfig+0xc0>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a1e      	ldr	r2, [pc, #120]	; (800d2b0 <TIM_OC2_SetConfig+0x11c>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d00b      	beq.n	800d254 <TIM_OC2_SetConfig+0xc0>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a1d      	ldr	r2, [pc, #116]	; (800d2b4 <TIM_OC2_SetConfig+0x120>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d007      	beq.n	800d254 <TIM_OC2_SetConfig+0xc0>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a1c      	ldr	r2, [pc, #112]	; (800d2b8 <TIM_OC2_SetConfig+0x124>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d003      	beq.n	800d254 <TIM_OC2_SetConfig+0xc0>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a17      	ldr	r2, [pc, #92]	; (800d2ac <TIM_OC2_SetConfig+0x118>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d113      	bne.n	800d27c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d25a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	695b      	ldr	r3, [r3, #20]
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	4313      	orrs	r3, r2
 800d26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	4313      	orrs	r3, r2
 800d27a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	621a      	str	r2, [r3, #32]
}
 800d296:	bf00      	nop
 800d298:	371c      	adds	r7, #28
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	40012c00 	.word	0x40012c00
 800d2a8:	40013400 	.word	0x40013400
 800d2ac:	40015000 	.word	0x40015000
 800d2b0:	40014000 	.word	0x40014000
 800d2b4:	40014400 	.word	0x40014400
 800d2b8:	40014800 	.word	0x40014800

0800d2bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a1b      	ldr	r3, [r3, #32]
 800d2ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6a1b      	ldr	r3, [r3, #32]
 800d2d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	69db      	ldr	r3, [r3, #28]
 800d2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f023 0303 	bic.w	r3, r3, #3
 800d2f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	021b      	lsls	r3, r3, #8
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	4313      	orrs	r3, r2
 800d314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a2b      	ldr	r2, [pc, #172]	; (800d3c8 <TIM_OC3_SetConfig+0x10c>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d007      	beq.n	800d32e <TIM_OC3_SetConfig+0x72>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a2a      	ldr	r2, [pc, #168]	; (800d3cc <TIM_OC3_SetConfig+0x110>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d003      	beq.n	800d32e <TIM_OC3_SetConfig+0x72>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a29      	ldr	r2, [pc, #164]	; (800d3d0 <TIM_OC3_SetConfig+0x114>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d10d      	bne.n	800d34a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	4313      	orrs	r3, r2
 800d340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a1e      	ldr	r2, [pc, #120]	; (800d3c8 <TIM_OC3_SetConfig+0x10c>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d013      	beq.n	800d37a <TIM_OC3_SetConfig+0xbe>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a1d      	ldr	r2, [pc, #116]	; (800d3cc <TIM_OC3_SetConfig+0x110>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d00f      	beq.n	800d37a <TIM_OC3_SetConfig+0xbe>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a1d      	ldr	r2, [pc, #116]	; (800d3d4 <TIM_OC3_SetConfig+0x118>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d00b      	beq.n	800d37a <TIM_OC3_SetConfig+0xbe>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a1c      	ldr	r2, [pc, #112]	; (800d3d8 <TIM_OC3_SetConfig+0x11c>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d007      	beq.n	800d37a <TIM_OC3_SetConfig+0xbe>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a1b      	ldr	r2, [pc, #108]	; (800d3dc <TIM_OC3_SetConfig+0x120>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d003      	beq.n	800d37a <TIM_OC3_SetConfig+0xbe>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a16      	ldr	r2, [pc, #88]	; (800d3d0 <TIM_OC3_SetConfig+0x114>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d113      	bne.n	800d3a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	695b      	ldr	r3, [r3, #20]
 800d38e:	011b      	lsls	r3, r3, #4
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	4313      	orrs	r3, r2
 800d394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	699b      	ldr	r3, [r3, #24]
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	621a      	str	r2, [r3, #32]
}
 800d3bc:	bf00      	nop
 800d3be:	371c      	adds	r7, #28
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	40012c00 	.word	0x40012c00
 800d3cc:	40013400 	.word	0x40013400
 800d3d0:	40015000 	.word	0x40015000
 800d3d4:	40014000 	.word	0x40014000
 800d3d8:	40014400 	.word	0x40014400
 800d3dc:	40014800 	.word	0x40014800

0800d3e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	69db      	ldr	r3, [r3, #28]
 800d406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d41a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	021b      	lsls	r3, r3, #8
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	4313      	orrs	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d42e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	031b      	lsls	r3, r3, #12
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	4313      	orrs	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a2c      	ldr	r2, [pc, #176]	; (800d4f0 <TIM_OC4_SetConfig+0x110>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d007      	beq.n	800d454 <TIM_OC4_SetConfig+0x74>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a2b      	ldr	r2, [pc, #172]	; (800d4f4 <TIM_OC4_SetConfig+0x114>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d003      	beq.n	800d454 <TIM_OC4_SetConfig+0x74>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a2a      	ldr	r2, [pc, #168]	; (800d4f8 <TIM_OC4_SetConfig+0x118>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d10d      	bne.n	800d470 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	031b      	lsls	r3, r3, #12
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	4313      	orrs	r3, r2
 800d466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d46e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a1f      	ldr	r2, [pc, #124]	; (800d4f0 <TIM_OC4_SetConfig+0x110>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d013      	beq.n	800d4a0 <TIM_OC4_SetConfig+0xc0>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a1e      	ldr	r2, [pc, #120]	; (800d4f4 <TIM_OC4_SetConfig+0x114>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00f      	beq.n	800d4a0 <TIM_OC4_SetConfig+0xc0>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a1e      	ldr	r2, [pc, #120]	; (800d4fc <TIM_OC4_SetConfig+0x11c>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d00b      	beq.n	800d4a0 <TIM_OC4_SetConfig+0xc0>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a1d      	ldr	r2, [pc, #116]	; (800d500 <TIM_OC4_SetConfig+0x120>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d007      	beq.n	800d4a0 <TIM_OC4_SetConfig+0xc0>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a1c      	ldr	r2, [pc, #112]	; (800d504 <TIM_OC4_SetConfig+0x124>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d003      	beq.n	800d4a0 <TIM_OC4_SetConfig+0xc0>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a17      	ldr	r2, [pc, #92]	; (800d4f8 <TIM_OC4_SetConfig+0x118>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d113      	bne.n	800d4c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	695b      	ldr	r3, [r3, #20]
 800d4b4:	019b      	lsls	r3, r3, #6
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	019b      	lsls	r3, r3, #6
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	693a      	ldr	r2, [r7, #16]
 800d4cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	621a      	str	r2, [r3, #32]
}
 800d4e2:	bf00      	nop
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	40012c00 	.word	0x40012c00
 800d4f4:	40013400 	.word	0x40013400
 800d4f8:	40015000 	.word	0x40015000
 800d4fc:	40014000 	.word	0x40014000
 800d500:	40014400 	.word	0x40014400
 800d504:	40014800 	.word	0x40014800

0800d508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	4313      	orrs	r3, r2
 800d544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d54c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	041b      	lsls	r3, r3, #16
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	4313      	orrs	r3, r2
 800d558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a19      	ldr	r2, [pc, #100]	; (800d5c4 <TIM_OC5_SetConfig+0xbc>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d013      	beq.n	800d58a <TIM_OC5_SetConfig+0x82>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a18      	ldr	r2, [pc, #96]	; (800d5c8 <TIM_OC5_SetConfig+0xc0>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d00f      	beq.n	800d58a <TIM_OC5_SetConfig+0x82>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a17      	ldr	r2, [pc, #92]	; (800d5cc <TIM_OC5_SetConfig+0xc4>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d00b      	beq.n	800d58a <TIM_OC5_SetConfig+0x82>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a16      	ldr	r2, [pc, #88]	; (800d5d0 <TIM_OC5_SetConfig+0xc8>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d007      	beq.n	800d58a <TIM_OC5_SetConfig+0x82>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4a15      	ldr	r2, [pc, #84]	; (800d5d4 <TIM_OC5_SetConfig+0xcc>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d003      	beq.n	800d58a <TIM_OC5_SetConfig+0x82>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4a14      	ldr	r2, [pc, #80]	; (800d5d8 <TIM_OC5_SetConfig+0xd0>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d109      	bne.n	800d59e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d590:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	021b      	lsls	r3, r3, #8
 800d598:	697a      	ldr	r2, [r7, #20]
 800d59a:	4313      	orrs	r3, r2
 800d59c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	697a      	ldr	r2, [r7, #20]
 800d5a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	685a      	ldr	r2, [r3, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	693a      	ldr	r2, [r7, #16]
 800d5b6:	621a      	str	r2, [r3, #32]
}
 800d5b8:	bf00      	nop
 800d5ba:	371c      	adds	r7, #28
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr
 800d5c4:	40012c00 	.word	0x40012c00
 800d5c8:	40013400 	.word	0x40013400
 800d5cc:	40014000 	.word	0x40014000
 800d5d0:	40014400 	.word	0x40014400
 800d5d4:	40014800 	.word	0x40014800
 800d5d8:	40015000 	.word	0x40015000

0800d5dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b087      	sub	sp, #28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d60a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	4313      	orrs	r3, r2
 800d61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	051b      	lsls	r3, r3, #20
 800d62a:	693a      	ldr	r2, [r7, #16]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a1a      	ldr	r2, [pc, #104]	; (800d69c <TIM_OC6_SetConfig+0xc0>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d013      	beq.n	800d660 <TIM_OC6_SetConfig+0x84>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4a19      	ldr	r2, [pc, #100]	; (800d6a0 <TIM_OC6_SetConfig+0xc4>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d00f      	beq.n	800d660 <TIM_OC6_SetConfig+0x84>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	4a18      	ldr	r2, [pc, #96]	; (800d6a4 <TIM_OC6_SetConfig+0xc8>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d00b      	beq.n	800d660 <TIM_OC6_SetConfig+0x84>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4a17      	ldr	r2, [pc, #92]	; (800d6a8 <TIM_OC6_SetConfig+0xcc>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d007      	beq.n	800d660 <TIM_OC6_SetConfig+0x84>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a16      	ldr	r2, [pc, #88]	; (800d6ac <TIM_OC6_SetConfig+0xd0>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d003      	beq.n	800d660 <TIM_OC6_SetConfig+0x84>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4a15      	ldr	r2, [pc, #84]	; (800d6b0 <TIM_OC6_SetConfig+0xd4>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d109      	bne.n	800d674 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d666:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	029b      	lsls	r3, r3, #10
 800d66e:	697a      	ldr	r2, [r7, #20]
 800d670:	4313      	orrs	r3, r2
 800d672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	621a      	str	r2, [r3, #32]
}
 800d68e:	bf00      	nop
 800d690:	371c      	adds	r7, #28
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	40012c00 	.word	0x40012c00
 800d6a0:	40013400 	.word	0x40013400
 800d6a4:	40014000 	.word	0x40014000
 800d6a8:	40014400 	.word	0x40014400
 800d6ac:	40014800 	.word	0x40014800
 800d6b0:	40015000 	.word	0x40015000

0800d6b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6a1b      	ldr	r3, [r3, #32]
 800d6ca:	f023 0201 	bic.w	r2, r3, #1
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	699b      	ldr	r3, [r3, #24]
 800d6d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d6de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	693a      	ldr	r2, [r7, #16]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f023 030a 	bic.w	r3, r3, #10
 800d6f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6f2:	697a      	ldr	r2, [r7, #20]
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	621a      	str	r2, [r3, #32]
}
 800d706:	bf00      	nop
 800d708:	371c      	adds	r7, #28
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d712:	b480      	push	{r7}
 800d714:	b087      	sub	sp, #28
 800d716:	af00      	add	r7, sp, #0
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	60b9      	str	r1, [r7, #8]
 800d71c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	f023 0210 	bic.w	r2, r3, #16
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	699b      	ldr	r3, [r3, #24]
 800d72e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6a1b      	ldr	r3, [r3, #32]
 800d734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d73c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	031b      	lsls	r3, r3, #12
 800d742:	697a      	ldr	r2, [r7, #20]
 800d744:	4313      	orrs	r3, r2
 800d746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d74e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	011b      	lsls	r3, r3, #4
 800d754:	693a      	ldr	r2, [r7, #16]
 800d756:	4313      	orrs	r3, r2
 800d758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	621a      	str	r2, [r3, #32]
}
 800d766:	bf00      	nop
 800d768:	371c      	adds	r7, #28
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr

0800d772 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d772:	b480      	push	{r7}
 800d774:	b085      	sub	sp, #20
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d78c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4313      	orrs	r3, r2
 800d794:	f043 0307 	orr.w	r3, r3, #7
 800d798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	609a      	str	r2, [r3, #8]
}
 800d7a0:	bf00      	nop
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b087      	sub	sp, #28
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d7c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	021a      	lsls	r2, r3, #8
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	431a      	orrs	r2, r3
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	697a      	ldr	r2, [r7, #20]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	609a      	str	r2, [r3, #8]
}
 800d7e0:	bf00      	nop
 800d7e2:	371c      	adds	r7, #28
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b087      	sub	sp, #28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	f003 031f 	and.w	r3, r3, #31
 800d7fe:	2201      	movs	r2, #1
 800d800:	fa02 f303 	lsl.w	r3, r2, r3
 800d804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6a1a      	ldr	r2, [r3, #32]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	43db      	mvns	r3, r3
 800d80e:	401a      	ands	r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6a1a      	ldr	r2, [r3, #32]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	f003 031f 	and.w	r3, r3, #31
 800d81e:	6879      	ldr	r1, [r7, #4]
 800d820:	fa01 f303 	lsl.w	r3, r1, r3
 800d824:	431a      	orrs	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	621a      	str	r2, [r3, #32]
}
 800d82a:	bf00      	nop
 800d82c:	371c      	adds	r7, #28
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
	...

0800d838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d101      	bne.n	800d850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d84c:	2302      	movs	r3, #2
 800d84e:	e074      	b.n	800d93a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2202      	movs	r2, #2
 800d85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a34      	ldr	r2, [pc, #208]	; (800d948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d009      	beq.n	800d88e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a33      	ldr	r2, [pc, #204]	; (800d94c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d004      	beq.n	800d88e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a31      	ldr	r2, [pc, #196]	; (800d950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d108      	bne.n	800d8a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d8a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a21      	ldr	r2, [pc, #132]	; (800d948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d022      	beq.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8d0:	d01d      	beq.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a1f      	ldr	r2, [pc, #124]	; (800d954 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d018      	beq.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a1d      	ldr	r2, [pc, #116]	; (800d958 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d013      	beq.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a1c      	ldr	r2, [pc, #112]	; (800d95c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d00e      	beq.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a15      	ldr	r2, [pc, #84]	; (800d94c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d009      	beq.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a18      	ldr	r2, [pc, #96]	; (800d960 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d004      	beq.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a11      	ldr	r2, [pc, #68]	; (800d950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d10c      	bne.n	800d928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	40012c00 	.word	0x40012c00
 800d94c:	40013400 	.word	0x40013400
 800d950:	40015000 	.word	0x40015000
 800d954:	40000400 	.word	0x40000400
 800d958:	40000800 	.word	0x40000800
 800d95c:	40000c00 	.word	0x40000c00
 800d960:	40014000 	.word	0x40014000

0800d964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d96e:	2300      	movs	r3, #0
 800d970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d101      	bne.n	800d980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d97c:	2302      	movs	r3, #2
 800d97e:	e096      	b.n	800daae <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	4313      	orrs	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	695b      	ldr	r3, [r3, #20]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	699b      	ldr	r3, [r3, #24]
 800d9f4:	041b      	lsls	r3, r3, #16
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4a2f      	ldr	r2, [pc, #188]	; (800dabc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d009      	beq.n	800da18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4a2d      	ldr	r2, [pc, #180]	; (800dac0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d004      	beq.n	800da18 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a2c      	ldr	r2, [pc, #176]	; (800dac4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d106      	bne.n	800da26 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a24      	ldr	r2, [pc, #144]	; (800dabc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d009      	beq.n	800da44 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a22      	ldr	r2, [pc, #136]	; (800dac0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d004      	beq.n	800da44 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a21      	ldr	r2, [pc, #132]	; (800dac4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d12b      	bne.n	800da9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4e:	051b      	lsls	r3, r3, #20
 800da50:	4313      	orrs	r3, r2
 800da52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	4313      	orrs	r3, r2
 800da60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	4313      	orrs	r3, r2
 800da6e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a11      	ldr	r2, [pc, #68]	; (800dabc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d009      	beq.n	800da8e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a10      	ldr	r2, [pc, #64]	; (800dac0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d004      	beq.n	800da8e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a0e      	ldr	r2, [pc, #56]	; (800dac4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d106      	bne.n	800da9c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da98:	4313      	orrs	r3, r2
 800da9a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3714      	adds	r7, #20
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	40012c00 	.word	0x40012c00
 800dac0:	40013400 	.word	0x40013400
 800dac4:	40015000 	.word	0x40015000

0800dac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800db34:	bf00      	nop
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800db48:	bf00      	nop
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <LL_EXTI_EnableIT_0_31>:
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800db5c:	4b05      	ldr	r3, [pc, #20]	; (800db74 <LL_EXTI_EnableIT_0_31+0x20>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	4904      	ldr	r1, [pc, #16]	; (800db74 <LL_EXTI_EnableIT_0_31+0x20>)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4313      	orrs	r3, r2
 800db66:	600b      	str	r3, [r1, #0]
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr
 800db74:	40010400 	.word	0x40010400

0800db78 <LL_EXTI_EnableIT_32_63>:
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800db80:	4b05      	ldr	r3, [pc, #20]	; (800db98 <LL_EXTI_EnableIT_32_63+0x20>)
 800db82:	6a1a      	ldr	r2, [r3, #32]
 800db84:	4904      	ldr	r1, [pc, #16]	; (800db98 <LL_EXTI_EnableIT_32_63+0x20>)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4313      	orrs	r3, r2
 800db8a:	620b      	str	r3, [r1, #32]
}
 800db8c:	bf00      	nop
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr
 800db98:	40010400 	.word	0x40010400

0800db9c <LL_EXTI_DisableIT_0_31>:
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800dba4:	4b06      	ldr	r3, [pc, #24]	; (800dbc0 <LL_EXTI_DisableIT_0_31+0x24>)
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	43db      	mvns	r3, r3
 800dbac:	4904      	ldr	r1, [pc, #16]	; (800dbc0 <LL_EXTI_DisableIT_0_31+0x24>)
 800dbae:	4013      	ands	r3, r2
 800dbb0:	600b      	str	r3, [r1, #0]
}
 800dbb2:	bf00      	nop
 800dbb4:	370c      	adds	r7, #12
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	40010400 	.word	0x40010400

0800dbc4 <LL_EXTI_DisableIT_32_63>:
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800dbcc:	4b06      	ldr	r3, [pc, #24]	; (800dbe8 <LL_EXTI_DisableIT_32_63+0x24>)
 800dbce:	6a1a      	ldr	r2, [r3, #32]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	43db      	mvns	r3, r3
 800dbd4:	4904      	ldr	r1, [pc, #16]	; (800dbe8 <LL_EXTI_DisableIT_32_63+0x24>)
 800dbd6:	4013      	ands	r3, r2
 800dbd8:	620b      	str	r3, [r1, #32]
}
 800dbda:	bf00      	nop
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	40010400 	.word	0x40010400

0800dbec <LL_EXTI_EnableEvent_0_31>:
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800dbf4:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <LL_EXTI_EnableEvent_0_31+0x20>)
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	4904      	ldr	r1, [pc, #16]	; (800dc0c <LL_EXTI_EnableEvent_0_31+0x20>)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	604b      	str	r3, [r1, #4]
}
 800dc00:	bf00      	nop
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	40010400 	.word	0x40010400

0800dc10 <LL_EXTI_EnableEvent_32_63>:
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dc1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc1c:	4904      	ldr	r1, [pc, #16]	; (800dc30 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr
 800dc30:	40010400 	.word	0x40010400

0800dc34 <LL_EXTI_DisableEvent_0_31>:
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800dc3c:	4b06      	ldr	r3, [pc, #24]	; (800dc58 <LL_EXTI_DisableEvent_0_31+0x24>)
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	43db      	mvns	r3, r3
 800dc44:	4904      	ldr	r1, [pc, #16]	; (800dc58 <LL_EXTI_DisableEvent_0_31+0x24>)
 800dc46:	4013      	ands	r3, r2
 800dc48:	604b      	str	r3, [r1, #4]
}
 800dc4a:	bf00      	nop
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	40010400 	.word	0x40010400

0800dc5c <LL_EXTI_DisableEvent_32_63>:
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800dc64:	4b06      	ldr	r3, [pc, #24]	; (800dc80 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dc66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	43db      	mvns	r3, r3
 800dc6c:	4904      	ldr	r1, [pc, #16]	; (800dc80 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dc6e:	4013      	ands	r3, r2
 800dc70:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dc72:	bf00      	nop
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	40010400 	.word	0x40010400

0800dc84 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800dc8c:	4b05      	ldr	r3, [pc, #20]	; (800dca4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dc8e:	689a      	ldr	r2, [r3, #8]
 800dc90:	4904      	ldr	r1, [pc, #16]	; (800dca4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	608b      	str	r3, [r1, #8]
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr
 800dca4:	40010400 	.word	0x40010400

0800dca8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800dcb0:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800dcb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcb4:	4904      	ldr	r1, [pc, #16]	; (800dcc8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	628b      	str	r3, [r1, #40]	; 0x28
}
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	40010400 	.word	0x40010400

0800dccc <LL_EXTI_DisableRisingTrig_0_31>:
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800dcd4:	4b06      	ldr	r3, [pc, #24]	; (800dcf0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	43db      	mvns	r3, r3
 800dcdc:	4904      	ldr	r1, [pc, #16]	; (800dcf0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dcde:	4013      	ands	r3, r2
 800dce0:	608b      	str	r3, [r1, #8]
}
 800dce2:	bf00      	nop
 800dce4:	370c      	adds	r7, #12
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	40010400 	.word	0x40010400

0800dcf4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800dcfc:	4b06      	ldr	r3, [pc, #24]	; (800dd18 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800dcfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	43db      	mvns	r3, r3
 800dd04:	4904      	ldr	r1, [pc, #16]	; (800dd18 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800dd06:	4013      	ands	r3, r2
 800dd08:	628b      	str	r3, [r1, #40]	; 0x28
}
 800dd0a:	bf00      	nop
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	40010400 	.word	0x40010400

0800dd1c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800dd24:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dd26:	68da      	ldr	r2, [r3, #12]
 800dd28:	4904      	ldr	r1, [pc, #16]	; (800dd3c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	60cb      	str	r3, [r1, #12]
}
 800dd30:	bf00      	nop
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	40010400 	.word	0x40010400

0800dd40 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800dd48:	4b05      	ldr	r3, [pc, #20]	; (800dd60 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800dd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4c:	4904      	ldr	r1, [pc, #16]	; (800dd60 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	40010400 	.word	0x40010400

0800dd64 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800dd6c:	4b06      	ldr	r3, [pc, #24]	; (800dd88 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800dd6e:	68da      	ldr	r2, [r3, #12]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	43db      	mvns	r3, r3
 800dd74:	4904      	ldr	r1, [pc, #16]	; (800dd88 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800dd76:	4013      	ands	r3, r2
 800dd78:	60cb      	str	r3, [r1, #12]
}
 800dd7a:	bf00      	nop
 800dd7c:	370c      	adds	r7, #12
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	40010400 	.word	0x40010400

0800dd8c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800dd94:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800dd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	43db      	mvns	r3, r3
 800dd9c:	4904      	ldr	r1, [pc, #16]	; (800ddb0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800dd9e:	4013      	ands	r3, r2
 800dda0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800dda2:	bf00      	nop
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	40010400 	.word	0x40010400

0800ddb4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7a1b      	ldrb	r3, [r3, #8]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f000 80c8 	beq.w	800df5a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d05d      	beq.n	800de8e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	7a5b      	ldrb	r3, [r3, #9]
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d00e      	beq.n	800ddf8 <LL_EXTI_Init+0x44>
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d017      	beq.n	800de0e <LL_EXTI_Init+0x5a>
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d120      	bne.n	800de24 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff ff24 	bl	800dc34 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff feaf 	bl	800db54 <LL_EXTI_EnableIT_0_31>
          break;
 800ddf6:	e018      	b.n	800de2a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7ff fecd 	bl	800db9c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff fef0 	bl	800dbec <LL_EXTI_EnableEvent_0_31>
          break;
 800de0c:	e00d      	b.n	800de2a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff fe9e 	bl	800db54 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7ff fee5 	bl	800dbec <LL_EXTI_EnableEvent_0_31>
          break;
 800de22:	e002      	b.n	800de2a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800de24:	2301      	movs	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
          break;
 800de28:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7a9b      	ldrb	r3, [r3, #10]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d02d      	beq.n	800de8e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	7a9b      	ldrb	r3, [r3, #10]
 800de36:	2b02      	cmp	r3, #2
 800de38:	d00e      	beq.n	800de58 <LL_EXTI_Init+0xa4>
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d017      	beq.n	800de6e <LL_EXTI_Init+0xba>
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d120      	bne.n	800de84 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff ff8c 	bl	800dd64 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff ff17 	bl	800dc84 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800de56:	e01b      	b.n	800de90 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7ff ff35 	bl	800dccc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff ff58 	bl	800dd1c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800de6c:	e010      	b.n	800de90 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4618      	mov	r0, r3
 800de74:	f7ff ff06 	bl	800dc84 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7ff ff4d 	bl	800dd1c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800de82:	e005      	b.n	800de90 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f043 0302 	orr.w	r3, r3, #2
 800de8a:	60fb      	str	r3, [r7, #12]
            break;
 800de8c:	e000      	b.n	800de90 <LL_EXTI_Init+0xdc>
        }
      }
 800de8e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d075      	beq.n	800df84 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7a5b      	ldrb	r3, [r3, #9]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d00e      	beq.n	800debe <LL_EXTI_Init+0x10a>
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d017      	beq.n	800ded4 <LL_EXTI_Init+0x120>
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d120      	bne.n	800deea <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	f7ff fed5 	bl	800dc5c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7ff fe5e 	bl	800db78 <LL_EXTI_EnableIT_32_63>
          break;
 800debc:	e01a      	b.n	800def4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff fe7e 	bl	800dbc4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff fe9f 	bl	800dc10 <LL_EXTI_EnableEvent_32_63>
          break;
 800ded2:	e00f      	b.n	800def4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff fe4d 	bl	800db78 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff fe94 	bl	800dc10 <LL_EXTI_EnableEvent_32_63>
          break;
 800dee8:	e004      	b.n	800def4 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f043 0304 	orr.w	r3, r3, #4
 800def0:	60fb      	str	r3, [r7, #12]
          break;
 800def2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	7a9b      	ldrb	r3, [r3, #10]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d043      	beq.n	800df84 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	7a9b      	ldrb	r3, [r3, #10]
 800df00:	2b02      	cmp	r3, #2
 800df02:	d00e      	beq.n	800df22 <LL_EXTI_Init+0x16e>
 800df04:	2b03      	cmp	r3, #3
 800df06:	d017      	beq.n	800df38 <LL_EXTI_Init+0x184>
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d120      	bne.n	800df4e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff ff3b 	bl	800dd8c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7ff fec4 	bl	800dca8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800df20:	e031      	b.n	800df86 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	4618      	mov	r0, r3
 800df28:	f7ff fee4 	bl	800dcf4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff ff05 	bl	800dd40 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800df36:	e026      	b.n	800df86 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7ff feb3 	bl	800dca8 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	4618      	mov	r0, r3
 800df48:	f7ff fefa 	bl	800dd40 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800df4c:	e01b      	b.n	800df86 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f043 0305 	orr.w	r3, r3, #5
 800df54:	60fb      	str	r3, [r7, #12]
            break;
 800df56:	bf00      	nop
 800df58:	e015      	b.n	800df86 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4618      	mov	r0, r3
 800df60:	f7ff fe1c 	bl	800db9c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4618      	mov	r0, r3
 800df6a:	f7ff fe63 	bl	800dc34 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fe26 	bl	800dbc4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff fe6d 	bl	800dc5c <LL_EXTI_DisableEvent_32_63>
 800df82:	e000      	b.n	800df86 <LL_EXTI_Init+0x1d2>
      }
 800df84:	bf00      	nop
  }

  return status;
 800df86:	68fb      	ldr	r3, [r7, #12]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3710      	adds	r7, #16
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <LL_GPIO_SetPinMode>:
{
 800df90:	b480      	push	{r7}
 800df92:	b089      	sub	sp, #36	; 0x24
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	fa93 f3a3 	rbit	r3, r3
 800dfaa:	613b      	str	r3, [r7, #16]
  return result;
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	fab3 f383 	clz	r3, r3
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	2103      	movs	r1, #3
 800dfb8:	fa01 f303 	lsl.w	r3, r1, r3
 800dfbc:	43db      	mvns	r3, r3
 800dfbe:	401a      	ands	r2, r3
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	fa93 f3a3 	rbit	r3, r3
 800dfca:	61bb      	str	r3, [r7, #24]
  return result;
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	fab3 f383 	clz	r3, r3
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	fa01 f303 	lsl.w	r3, r1, r3
 800dfdc:	431a      	orrs	r2, r3
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	601a      	str	r2, [r3, #0]
}
 800dfe2:	bf00      	nop
 800dfe4:	3724      	adds	r7, #36	; 0x24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <LL_GPIO_SetPinOutputType>:
{
 800dfee:	b480      	push	{r7}
 800dff0:	b085      	sub	sp, #20
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	60f8      	str	r0, [r7, #12]
 800dff6:	60b9      	str	r1, [r7, #8]
 800dff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	43db      	mvns	r3, r3
 800e002:	401a      	ands	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	6879      	ldr	r1, [r7, #4]
 800e008:	fb01 f303 	mul.w	r3, r1, r3
 800e00c:	431a      	orrs	r2, r3
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	605a      	str	r2, [r3, #4]
}
 800e012:	bf00      	nop
 800e014:	3714      	adds	r7, #20
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr

0800e01e <LL_GPIO_SetPinSpeed>:
{
 800e01e:	b480      	push	{r7}
 800e020:	b089      	sub	sp, #36	; 0x24
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	689a      	ldr	r2, [r3, #8]
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	fa93 f3a3 	rbit	r3, r3
 800e038:	613b      	str	r3, [r7, #16]
  return result;
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	fab3 f383 	clz	r3, r3
 800e040:	b2db      	uxtb	r3, r3
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	2103      	movs	r1, #3
 800e046:	fa01 f303 	lsl.w	r3, r1, r3
 800e04a:	43db      	mvns	r3, r3
 800e04c:	401a      	ands	r2, r3
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	fa93 f3a3 	rbit	r3, r3
 800e058:	61bb      	str	r3, [r7, #24]
  return result;
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	fab3 f383 	clz	r3, r3
 800e060:	b2db      	uxtb	r3, r3
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	6879      	ldr	r1, [r7, #4]
 800e066:	fa01 f303 	lsl.w	r3, r1, r3
 800e06a:	431a      	orrs	r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	609a      	str	r2, [r3, #8]
}
 800e070:	bf00      	nop
 800e072:	3724      	adds	r7, #36	; 0x24
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <LL_GPIO_SetPinPull>:
{
 800e07c:	b480      	push	{r7}
 800e07e:	b089      	sub	sp, #36	; 0x24
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	68da      	ldr	r2, [r3, #12]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	fa93 f3a3 	rbit	r3, r3
 800e096:	613b      	str	r3, [r7, #16]
  return result;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	fab3 f383 	clz	r3, r3
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	005b      	lsls	r3, r3, #1
 800e0a2:	2103      	movs	r1, #3
 800e0a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e0a8:	43db      	mvns	r3, r3
 800e0aa:	401a      	ands	r2, r3
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	fa93 f3a3 	rbit	r3, r3
 800e0b6:	61bb      	str	r3, [r7, #24]
  return result;
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	fab3 f383 	clz	r3, r3
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	6879      	ldr	r1, [r7, #4]
 800e0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e0c8:	431a      	orrs	r2, r3
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	60da      	str	r2, [r3, #12]
}
 800e0ce:	bf00      	nop
 800e0d0:	3724      	adds	r7, #36	; 0x24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <LL_GPIO_SetAFPin_0_7>:
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b089      	sub	sp, #36	; 0x24
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	60f8      	str	r0, [r7, #12]
 800e0e2:	60b9      	str	r1, [r7, #8]
 800e0e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6a1a      	ldr	r2, [r3, #32]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	fa93 f3a3 	rbit	r3, r3
 800e0f4:	613b      	str	r3, [r7, #16]
  return result;
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	fab3 f383 	clz	r3, r3
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	210f      	movs	r1, #15
 800e102:	fa01 f303 	lsl.w	r3, r1, r3
 800e106:	43db      	mvns	r3, r3
 800e108:	401a      	ands	r2, r3
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	fa93 f3a3 	rbit	r3, r3
 800e114:	61bb      	str	r3, [r7, #24]
  return result;
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	fab3 f383 	clz	r3, r3
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	6879      	ldr	r1, [r7, #4]
 800e122:	fa01 f303 	lsl.w	r3, r1, r3
 800e126:	431a      	orrs	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	621a      	str	r2, [r3, #32]
}
 800e12c:	bf00      	nop
 800e12e:	3724      	adds	r7, #36	; 0x24
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <LL_GPIO_SetAFPin_8_15>:
{
 800e138:	b480      	push	{r7}
 800e13a:	b089      	sub	sp, #36	; 0x24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	0a1b      	lsrs	r3, r3, #8
 800e14c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	fa93 f3a3 	rbit	r3, r3
 800e154:	613b      	str	r3, [r7, #16]
  return result;
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	fab3 f383 	clz	r3, r3
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	210f      	movs	r1, #15
 800e162:	fa01 f303 	lsl.w	r3, r1, r3
 800e166:	43db      	mvns	r3, r3
 800e168:	401a      	ands	r2, r3
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	0a1b      	lsrs	r3, r3, #8
 800e16e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	fa93 f3a3 	rbit	r3, r3
 800e176:	61bb      	str	r3, [r7, #24]
  return result;
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	fab3 f383 	clz	r3, r3
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	fa01 f303 	lsl.w	r3, r1, r3
 800e188:	431a      	orrs	r2, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e18e:	bf00      	nop
 800e190:	3724      	adds	r7, #36	; 0x24
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b086      	sub	sp, #24
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	fa93 f3a3 	rbit	r3, r3
 800e1b0:	60bb      	str	r3, [r7, #8]
  return result;
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	fab3 f383 	clz	r3, r3
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e1bc:	e040      	b.n	800e240 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	2101      	movs	r1, #1
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d032      	beq.n	800e23a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	461a      	mov	r2, r3
 800e1da:	6939      	ldr	r1, [r7, #16]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7ff fed7 	bl	800df90 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d003      	beq.n	800e1f2 <LL_GPIO_Init+0x58>
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d106      	bne.n	800e200 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	6939      	ldr	r1, [r7, #16]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff ff0f 	bl	800e01e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	461a      	mov	r2, r3
 800e206:	6939      	ldr	r1, [r7, #16]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7ff ff37 	bl	800e07c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	2b02      	cmp	r3, #2
 800e214:	d111      	bne.n	800e23a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	2bff      	cmp	r3, #255	; 0xff
 800e21a:	d807      	bhi.n	800e22c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	695b      	ldr	r3, [r3, #20]
 800e220:	461a      	mov	r2, r3
 800e222:	6939      	ldr	r1, [r7, #16]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff ff58 	bl	800e0da <LL_GPIO_SetAFPin_0_7>
 800e22a:	e006      	b.n	800e23a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	461a      	mov	r2, r3
 800e232:	6939      	ldr	r1, [r7, #16]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7ff ff7f 	bl	800e138 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	3301      	adds	r3, #1
 800e23e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	fa22 f303 	lsr.w	r3, r2, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1b7      	bne.n	800e1be <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d003      	beq.n	800e25e <LL_GPIO_Init+0xc4>
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d107      	bne.n	800e26e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	6819      	ldr	r1, [r3, #0]
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	461a      	mov	r2, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff fec0 	bl	800dfee <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800e278:	b590      	push	{r4, r7, lr}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4604      	mov	r4, r0
 800e280:	4608      	mov	r0, r1
 800e282:	4611      	mov	r1, r2
 800e284:	461a      	mov	r2, r3
 800e286:	4623      	mov	r3, r4
 800e288:	80fb      	strh	r3, [r7, #6]
 800e28a:	4603      	mov	r3, r0
 800e28c:	80bb      	strh	r3, [r7, #4]
 800e28e:	460b      	mov	r3, r1
 800e290:	70fb      	strb	r3, [r7, #3]
 800e292:	4613      	mov	r3, r2
 800e294:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800e296:	2300      	movs	r3, #0
 800e298:	60fb      	str	r3, [r7, #12]
 800e29a:	e026      	b.n	800e2ea <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800e29c:	2300      	movs	r3, #0
 800e29e:	60bb      	str	r3, [r7, #8]
 800e2a0:	e01c      	b.n	800e2dc <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	88fb      	ldrh	r3, [r7, #6]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	b298      	uxth	r0, r3
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2b2:	4413      	add	r3, r2
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	88bb      	ldrh	r3, [r7, #4]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	4413      	add	r3, r2
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	883a      	ldrh	r2, [r7, #0]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	f000 fc1f 	bl	800eb14 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	60bb      	str	r3, [r7, #8]
 800e2dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	dbde      	blt.n	800e2a2 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60fb      	str	r3, [r7, #12]
 800e2ea:	78fb      	ldrb	r3, [r7, #3]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	dbd4      	blt.n	800e29c <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800e2f2:	bf00      	nop
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd90      	pop	{r4, r7, pc}

0800e2fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800e2fa:	b590      	push	{r4, r7, lr}
 800e2fc:	b087      	sub	sp, #28
 800e2fe:	af02      	add	r7, sp, #8
 800e300:	4604      	mov	r4, r0
 800e302:	4608      	mov	r0, r1
 800e304:	4611      	mov	r1, r2
 800e306:	461a      	mov	r2, r3
 800e308:	4623      	mov	r3, r4
 800e30a:	80fb      	strh	r3, [r7, #6]
 800e30c:	4603      	mov	r3, r0
 800e30e:	80bb      	strh	r3, [r7, #4]
 800e310:	460b      	mov	r3, r1
 800e312:	807b      	strh	r3, [r7, #2]
 800e314:	4613      	mov	r3, r2
 800e316:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800e318:	2300      	movs	r3, #0
 800e31a:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800e31c:	7bfa      	ldrb	r2, [r7, #15]
 800e31e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e322:	429a      	cmp	r2, r3
 800e324:	d939      	bls.n	800e39a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800e326:	88ba      	ldrh	r2, [r7, #4]
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	441a      	add	r2, r3
 800e32c:	88b9      	ldrh	r1, [r7, #4]
 800e32e:	883b      	ldrh	r3, [r7, #0]
 800e330:	4419      	add	r1, r3
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	1acb      	subs	r3, r1, r3
 800e336:	429a      	cmp	r2, r3
 800e338:	f000 8089 	beq.w	800e44e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800e33c:	88fa      	ldrh	r2, [r7, #6]
 800e33e:	7bfb      	ldrb	r3, [r7, #15]
 800e340:	441a      	add	r2, r3
 800e342:	88f9      	ldrh	r1, [r7, #6]
 800e344:	887b      	ldrh	r3, [r7, #2]
 800e346:	4419      	add	r1, r3
 800e348:	7bfb      	ldrb	r3, [r7, #15]
 800e34a:	1acb      	subs	r3, r1, r3
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d07e      	beq.n	800e44e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800e350:	7bfb      	ldrb	r3, [r7, #15]
 800e352:	b29a      	uxth	r2, r3
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	4413      	add	r3, r2
 800e358:	b298      	uxth	r0, r3
 800e35a:	7bfb      	ldrb	r3, [r7, #15]
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	88bb      	ldrh	r3, [r7, #4]
 800e360:	4413      	add	r3, r2
 800e362:	b299      	uxth	r1, r3
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	b29b      	uxth	r3, r3
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	887a      	ldrh	r2, [r7, #2]
 800e36e:	1ad3      	subs	r3, r2, r3
 800e370:	b29b      	uxth	r3, r3
 800e372:	3301      	adds	r3, #1
 800e374:	b29c      	uxth	r4, r3
 800e376:	7bfb      	ldrb	r3, [r7, #15]
 800e378:	b29b      	uxth	r3, r3
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	883a      	ldrh	r2, [r7, #0]
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	b29b      	uxth	r3, r3
 800e384:	3301      	adds	r3, #1
 800e386:	b29a      	uxth	r2, r3
 800e388:	2304      	movs	r3, #4
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	8c3b      	ldrh	r3, [r7, #32]
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	4613      	mov	r3, r2
 800e392:	4622      	mov	r2, r4
 800e394:	f000 fd18 	bl	800edc8 <ILI9341_Draw_Rectangle>
				goto finish;
 800e398:	e05a      	b.n	800e450 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e39a:	7bfb      	ldrb	r3, [r7, #15]
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	88fb      	ldrh	r3, [r7, #6]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	b298      	uxth	r0, r3
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	b29a      	uxth	r2, r3
 800e3a8:	88bb      	ldrh	r3, [r7, #4]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	887a      	ldrh	r2, [r7, #2]
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3be:	f000 fa6b 	bl	800e898 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	88fb      	ldrh	r3, [r7, #6]
 800e3c8:	4413      	add	r3, r2
 800e3ca:	b298      	uxth	r0, r3
										(y + h) - b,
 800e3cc:	88ba      	ldrh	r2, [r7, #4]
 800e3ce:	883b      	ldrh	r3, [r7, #0]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	b299      	uxth	r1, r3
										(w - b)+1,
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	887a      	ldrh	r2, [r7, #2]
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3ec:	f000 fa54 	bl	800e898 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	88fb      	ldrh	r3, [r7, #6]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	b298      	uxth	r0, r3
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	88bb      	ldrh	r3, [r7, #4]
 800e400:	4413      	add	r3, r2
 800e402:	b299      	uxth	r1, r3
 800e404:	7bfb      	ldrb	r3, [r7, #15]
 800e406:	b29b      	uxth	r3, r3
 800e408:	005b      	lsls	r3, r3, #1
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	883a      	ldrh	r2, [r7, #0]
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	b29a      	uxth	r2, r3
 800e412:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e414:	f000 faa4 	bl	800e960 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800e418:	88fa      	ldrh	r2, [r7, #6]
 800e41a:	887b      	ldrh	r3, [r7, #2]
 800e41c:	4413      	add	r3, r2
 800e41e:	b29a      	uxth	r2, r3
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	b29b      	uxth	r3, r3
 800e424:	1ad3      	subs	r3, r2, r3
 800e426:	b298      	uxth	r0, r3
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	88bb      	ldrh	r3, [r7, #4]
 800e42e:	4413      	add	r3, r2
 800e430:	b299      	uxth	r1, r3
 800e432:	7bfb      	ldrb	r3, [r7, #15]
 800e434:	b29b      	uxth	r3, r3
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	b29b      	uxth	r3, r3
 800e43a:	883a      	ldrh	r2, [r7, #0]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	b29a      	uxth	r2, r3
 800e440:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e442:	f000 fa8d 	bl	800e960 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800e446:	7bfb      	ldrb	r3, [r7, #15]
 800e448:	3301      	adds	r3, #1
 800e44a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800e44c:	e766      	b.n	800e31c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800e44e:	bf00      	nop
	// done
	return;
 800e450:	bf00      	nop
}
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	bd90      	pop	{r4, r7, pc}

0800e458 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b089      	sub	sp, #36	; 0x24
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	4604      	mov	r4, r0
 800e460:	4608      	mov	r0, r1
 800e462:	4611      	mov	r1, r2
 800e464:	461a      	mov	r2, r3
 800e466:	4623      	mov	r3, r4
 800e468:	71fb      	strb	r3, [r7, #7]
 800e46a:	4603      	mov	r3, r0
 800e46c:	80bb      	strh	r3, [r7, #4]
 800e46e:	460b      	mov	r3, r1
 800e470:	807b      	strh	r3, [r7, #2]
 800e472:	4613      	mov	r3, r2
 800e474:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800e476:	79fb      	ldrb	r3, [r7, #7]
 800e478:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800e47a:	7dfb      	ldrb	r3, [r7, #23]
 800e47c:	2b1f      	cmp	r3, #31
 800e47e:	d802      	bhi.n	800e486 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800e480:	2300      	movs	r3, #0
 800e482:	71fb      	strb	r3, [r7, #7]
 800e484:	e002      	b.n	800e48c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800e486:	7dfb      	ldrb	r3, [r7, #23]
 800e488:	3b20      	subs	r3, #32
 800e48a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e48c:	2300      	movs	r3, #0
 800e48e:	753b      	strb	r3, [r7, #20]
 800e490:	e012      	b.n	800e4b8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800e492:	7dfa      	ldrb	r2, [r7, #23]
 800e494:	7d38      	ldrb	r0, [r7, #20]
 800e496:	7d39      	ldrb	r1, [r7, #20]
 800e498:	4c48      	ldr	r4, [pc, #288]	; (800e5bc <ILI9341_Draw_Char+0x164>)
 800e49a:	4613      	mov	r3, r2
 800e49c:	005b      	lsls	r3, r3, #1
 800e49e:	4413      	add	r3, r2
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	4423      	add	r3, r4
 800e4a4:	4403      	add	r3, r0
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	f107 0318 	add.w	r3, r7, #24
 800e4ac:	440b      	add	r3, r1
 800e4ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e4b2:	7d3b      	ldrb	r3, [r7, #20]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	753b      	strb	r3, [r7, #20]
 800e4b8:	7d3b      	ldrb	r3, [r7, #20]
 800e4ba:	2b05      	cmp	r3, #5
 800e4bc:	d9e9      	bls.n	800e492 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800e4be:	2300      	movs	r3, #0
 800e4c0:	757b      	strb	r3, [r7, #21]
 800e4c2:	e074      	b.n	800e5ae <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	75bb      	strb	r3, [r7, #22]
 800e4c8:	e06b      	b.n	800e5a2 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800e4ca:	7d7b      	ldrb	r3, [r7, #21]
 800e4cc:	f107 0218 	add.w	r2, r7, #24
 800e4d0:	4413      	add	r3, r2
 800e4d2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	7dbb      	ldrb	r3, [r7, #22]
 800e4da:	fa42 f303 	asr.w	r3, r2, r3
 800e4de:	f003 0301 	and.w	r3, r3, #1
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d02d      	beq.n	800e542 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800e4e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d10e      	bne.n	800e50a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800e4ec:	7d7b      	ldrb	r3, [r7, #21]
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	88bb      	ldrh	r3, [r7, #4]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	b298      	uxth	r0, r3
 800e4f6:	7dbb      	ldrb	r3, [r7, #22]
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	887b      	ldrh	r3, [r7, #2]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	883a      	ldrh	r2, [r7, #0]
 800e502:	4619      	mov	r1, r3
 800e504:	f000 fb06 	bl	800eb14 <ILI9341_Draw_Pixel>
 800e508:	e048      	b.n	800e59c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800e50a:	7d7b      	ldrb	r3, [r7, #21]
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e510:	fb12 f303 	smulbb	r3, r2, r3
 800e514:	b29a      	uxth	r2, r3
 800e516:	88bb      	ldrh	r3, [r7, #4]
 800e518:	4413      	add	r3, r2
 800e51a:	b298      	uxth	r0, r3
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e522:	fb12 f303 	smulbb	r3, r2, r3
 800e526:	b29a      	uxth	r2, r3
 800e528:	887b      	ldrh	r3, [r7, #2]
 800e52a:	4413      	add	r3, r2
 800e52c:	b299      	uxth	r1, r3
 800e52e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e530:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e532:	2301      	movs	r3, #1
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	883b      	ldrh	r3, [r7, #0]
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	4623      	mov	r3, r4
 800e53c:	f000 fc44 	bl	800edc8 <ILI9341_Draw_Rectangle>
 800e540:	e02c      	b.n	800e59c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800e542:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e544:	2b01      	cmp	r3, #1
 800e546:	d10e      	bne.n	800e566 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800e548:	7d7b      	ldrb	r3, [r7, #21]
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	88bb      	ldrh	r3, [r7, #4]
 800e54e:	4413      	add	r3, r2
 800e550:	b298      	uxth	r0, r3
 800e552:	7dbb      	ldrb	r3, [r7, #22]
 800e554:	b29a      	uxth	r2, r3
 800e556:	887b      	ldrh	r3, [r7, #2]
 800e558:	4413      	add	r3, r2
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e55e:	4619      	mov	r1, r3
 800e560:	f000 fad8 	bl	800eb14 <ILI9341_Draw_Pixel>
 800e564:	e01a      	b.n	800e59c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800e566:	7d7b      	ldrb	r3, [r7, #21]
 800e568:	b29b      	uxth	r3, r3
 800e56a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e56c:	fb12 f303 	smulbb	r3, r2, r3
 800e570:	b29a      	uxth	r2, r3
 800e572:	88bb      	ldrh	r3, [r7, #4]
 800e574:	4413      	add	r3, r2
 800e576:	b298      	uxth	r0, r3
 800e578:	7dbb      	ldrb	r3, [r7, #22]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e57e:	fb12 f303 	smulbb	r3, r2, r3
 800e582:	b29a      	uxth	r2, r3
 800e584:	887b      	ldrh	r3, [r7, #2]
 800e586:	4413      	add	r3, r2
 800e588:	b299      	uxth	r1, r3
 800e58a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e58c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e58e:	2301      	movs	r3, #1
 800e590:	9301      	str	r3, [sp, #4]
 800e592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e594:	9300      	str	r3, [sp, #0]
 800e596:	4623      	mov	r3, r4
 800e598:	f000 fc16 	bl	800edc8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800e59c:	7dbb      	ldrb	r3, [r7, #22]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	75bb      	strb	r3, [r7, #22]
 800e5a2:	7dbb      	ldrb	r3, [r7, #22]
 800e5a4:	2b07      	cmp	r3, #7
 800e5a6:	d990      	bls.n	800e4ca <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800e5a8:	7d7b      	ldrb	r3, [r7, #21]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	757b      	strb	r3, [r7, #21]
 800e5ae:	7d7b      	ldrb	r3, [r7, #21]
 800e5b0:	2b05      	cmp	r3, #5
 800e5b2:	d987      	bls.n	800e4c4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800e5b4:	bf00      	nop
 800e5b6:	371c      	adds	r7, #28
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd90      	pop	{r4, r7, pc}
 800e5bc:	0801415c 	.word	0x0801415c

0800e5c0 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e5c0:	b590      	push	{r4, r7, lr}
 800e5c2:	b087      	sub	sp, #28
 800e5c4:	af02      	add	r7, sp, #8
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	4608      	mov	r0, r1
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	817b      	strh	r3, [r7, #10]
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	813b      	strh	r3, [r7, #8]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e5da:	897b      	ldrh	r3, [r7, #10]
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	b298      	uxth	r0, r3
 800e5e0:	8c3b      	ldrh	r3, [r7, #32]
 800e5e2:	00db      	lsls	r3, r3, #3
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5e8:	8939      	ldrh	r1, [r7, #8]
 800e5ea:	f000 f9b9 	bl	800e960 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e5ee:	897b      	ldrh	r3, [r7, #10]
 800e5f0:	3b02      	subs	r3, #2
 800e5f2:	b298      	uxth	r0, r3
 800e5f4:	8c3b      	ldrh	r3, [r7, #32]
 800e5f6:	00db      	lsls	r3, r3, #3
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5fc:	8939      	ldrh	r1, [r7, #8]
 800e5fe:	f000 f9af 	bl	800e960 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e602:	e016      	b.n	800e632 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	1c5a      	adds	r2, r3, #1
 800e608:	60fa      	str	r2, [r7, #12]
 800e60a:	7818      	ldrb	r0, [r3, #0]
 800e60c:	88fc      	ldrh	r4, [r7, #6]
 800e60e:	893a      	ldrh	r2, [r7, #8]
 800e610:	8979      	ldrh	r1, [r7, #10]
 800e612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	8c3b      	ldrh	r3, [r7, #32]
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	4623      	mov	r3, r4
 800e61c:	f7ff ff1c 	bl	800e458 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e620:	8c3b      	ldrh	r3, [r7, #32]
 800e622:	461a      	mov	r2, r3
 800e624:	0052      	lsls	r2, r2, #1
 800e626:	4413      	add	r3, r2
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	897b      	ldrh	r3, [r7, #10]
 800e62e:	4413      	add	r3, r2
 800e630:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1e4      	bne.n	800e604 <ILI9341_Draw_Text+0x44>
    }


}
 800e63a:	bf00      	nop
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd90      	pop	{r4, r7, pc}

0800e642 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e646:	f000 fca3 	bl	800ef90 <_LCD_Enable>
	ILI9341_SPI_Init();
 800e64a:	f000 f907 	bl	800e85c <ILI9341_SPI_Init>
	_LCD_Reset();
 800e64e:	f000 fcaf 	bl	800efb0 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e652:	2001      	movs	r0, #1
 800e654:	f000 fd7a 	bl	800f14c <_LCD_SendCommand>
	HAL_Delay(2000);
 800e658:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e65c:	f7f9 ff48 	bl	80084f0 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e660:	20cb      	movs	r0, #203	; 0xcb
 800e662:	f000 fd73 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e666:	2039      	movs	r0, #57	; 0x39
 800e668:	f000 fda2 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e66c:	202c      	movs	r0, #44	; 0x2c
 800e66e:	f000 fd9f 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e672:	2000      	movs	r0, #0
 800e674:	f000 fd9c 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x34);
 800e678:	2034      	movs	r0, #52	; 0x34
 800e67a:	f000 fd99 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x02);
 800e67e:	2002      	movs	r0, #2
 800e680:	f000 fd96 	bl	800f1b0 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e684:	20cf      	movs	r0, #207	; 0xcf
 800e686:	f000 fd61 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e68a:	2000      	movs	r0, #0
 800e68c:	f000 fd90 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e690:	20c1      	movs	r0, #193	; 0xc1
 800e692:	f000 fd8d 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x30);
 800e696:	2030      	movs	r0, #48	; 0x30
 800e698:	f000 fd8a 	bl	800f1b0 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e69c:	20e8      	movs	r0, #232	; 0xe8
 800e69e:	f000 fd55 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e6a2:	2085      	movs	r0, #133	; 0x85
 800e6a4:	f000 fd84 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	f000 fd81 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x78);
 800e6ae:	2078      	movs	r0, #120	; 0x78
 800e6b0:	f000 fd7e 	bl	800f1b0 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e6b4:	20ea      	movs	r0, #234	; 0xea
 800e6b6:	f000 fd49 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	f000 fd78 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	f000 fd75 	bl	800f1b0 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e6c6:	20ed      	movs	r0, #237	; 0xed
 800e6c8:	f000 fd40 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e6cc:	2064      	movs	r0, #100	; 0x64
 800e6ce:	f000 fd6f 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e6d2:	2003      	movs	r0, #3
 800e6d4:	f000 fd6c 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e6d8:	2012      	movs	r0, #18
 800e6da:	f000 fd69 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e6de:	2081      	movs	r0, #129	; 0x81
 800e6e0:	f000 fd66 	bl	800f1b0 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e6e4:	20f7      	movs	r0, #247	; 0xf7
 800e6e6:	f000 fd31 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e6ea:	2020      	movs	r0, #32
 800e6ec:	f000 fd60 	bl	800f1b0 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e6f0:	20c0      	movs	r0, #192	; 0xc0
 800e6f2:	f000 fd2b 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e6f6:	2023      	movs	r0, #35	; 0x23
 800e6f8:	f000 fd5a 	bl	800f1b0 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e6fc:	20c1      	movs	r0, #193	; 0xc1
 800e6fe:	f000 fd25 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e702:	2010      	movs	r0, #16
 800e704:	f000 fd54 	bl	800f1b0 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e708:	20c5      	movs	r0, #197	; 0xc5
 800e70a:	f000 fd1f 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e70e:	203e      	movs	r0, #62	; 0x3e
 800e710:	f000 fd4e 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e714:	2028      	movs	r0, #40	; 0x28
 800e716:	f000 fd4b 	bl	800f1b0 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e71a:	20c7      	movs	r0, #199	; 0xc7
 800e71c:	f000 fd16 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e720:	2086      	movs	r0, #134	; 0x86
 800e722:	f000 fd45 	bl	800f1b0 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e726:	2036      	movs	r0, #54	; 0x36
 800e728:	f000 fd10 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e72c:	2048      	movs	r0, #72	; 0x48
 800e72e:	f000 fd3f 	bl	800f1b0 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e732:	203a      	movs	r0, #58	; 0x3a
 800e734:	f000 fd0a 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e738:	2055      	movs	r0, #85	; 0x55
 800e73a:	f000 fd39 	bl	800f1b0 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e73e:	20b1      	movs	r0, #177	; 0xb1
 800e740:	f000 fd04 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e744:	2000      	movs	r0, #0
 800e746:	f000 fd33 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e74a:	2018      	movs	r0, #24
 800e74c:	f000 fd30 	bl	800f1b0 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e750:	20b6      	movs	r0, #182	; 0xb6
 800e752:	f000 fcfb 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e756:	2008      	movs	r0, #8
 800e758:	f000 fd2a 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e75c:	2082      	movs	r0, #130	; 0x82
 800e75e:	f000 fd27 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e762:	2027      	movs	r0, #39	; 0x27
 800e764:	f000 fd24 	bl	800f1b0 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e768:	20f2      	movs	r0, #242	; 0xf2
 800e76a:	f000 fcef 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e76e:	2000      	movs	r0, #0
 800e770:	f000 fd1e 	bl	800f1b0 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e774:	2026      	movs	r0, #38	; 0x26
 800e776:	f000 fce9 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e77a:	2001      	movs	r0, #1
 800e77c:	f000 fd18 	bl	800f1b0 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e780:	20e0      	movs	r0, #224	; 0xe0
 800e782:	f000 fce3 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e786:	200f      	movs	r0, #15
 800e788:	f000 fd12 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e78c:	2031      	movs	r0, #49	; 0x31
 800e78e:	f000 fd0f 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e792:	202b      	movs	r0, #43	; 0x2b
 800e794:	f000 fd0c 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e798:	200c      	movs	r0, #12
 800e79a:	f000 fd09 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e79e:	200e      	movs	r0, #14
 800e7a0:	f000 fd06 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e7a4:	2008      	movs	r0, #8
 800e7a6:	f000 fd03 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e7aa:	204e      	movs	r0, #78	; 0x4e
 800e7ac:	f000 fd00 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e7b0:	20f1      	movs	r0, #241	; 0xf1
 800e7b2:	f000 fcfd 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e7b6:	2037      	movs	r0, #55	; 0x37
 800e7b8:	f000 fcfa 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e7bc:	2007      	movs	r0, #7
 800e7be:	f000 fcf7 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e7c2:	2010      	movs	r0, #16
 800e7c4:	f000 fcf4 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e7c8:	2003      	movs	r0, #3
 800e7ca:	f000 fcf1 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e7ce:	200e      	movs	r0, #14
 800e7d0:	f000 fcee 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e7d4:	2009      	movs	r0, #9
 800e7d6:	f000 fceb 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e7da:	2000      	movs	r0, #0
 800e7dc:	f000 fce8 	bl	800f1b0 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e7e0:	20e1      	movs	r0, #225	; 0xe1
 800e7e2:	f000 fcb3 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	f000 fce2 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e7ec:	200e      	movs	r0, #14
 800e7ee:	f000 fcdf 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e7f2:	2014      	movs	r0, #20
 800e7f4:	f000 fcdc 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e7f8:	2003      	movs	r0, #3
 800e7fa:	f000 fcd9 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e7fe:	2011      	movs	r0, #17
 800e800:	f000 fcd6 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e804:	2007      	movs	r0, #7
 800e806:	f000 fcd3 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e80a:	2031      	movs	r0, #49	; 0x31
 800e80c:	f000 fcd0 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e810:	20c1      	movs	r0, #193	; 0xc1
 800e812:	f000 fccd 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e816:	2048      	movs	r0, #72	; 0x48
 800e818:	f000 fcca 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e81c:	2008      	movs	r0, #8
 800e81e:	f000 fcc7 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e822:	200f      	movs	r0, #15
 800e824:	f000 fcc4 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e828:	200c      	movs	r0, #12
 800e82a:	f000 fcc1 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e82e:	2031      	movs	r0, #49	; 0x31
 800e830:	f000 fcbe 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e834:	2036      	movs	r0, #54	; 0x36
 800e836:	f000 fcbb 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e83a:	200f      	movs	r0, #15
 800e83c:	f000 fcb8 	bl	800f1b0 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e840:	2011      	movs	r0, #17
 800e842:	f000 fc83 	bl	800f14c <_LCD_SendCommand>
	HAL_Delay(240);
 800e846:	20f0      	movs	r0, #240	; 0xf0
 800e848:	f7f9 fe52 	bl	80084f0 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e84c:	2029      	movs	r0, #41	; 0x29
 800e84e:	f000 fc7d 	bl	800f14c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e852:	2000      	movs	r0, #0
 800e854:	f000 fb4e 	bl	800eef4 <ILI9341_Set_Rotation>
}
 800e858:	bf00      	nop
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e85c:	b480      	push	{r7}
 800e85e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e860:	4b0b      	ldr	r3, [pc, #44]	; (800e890 <ILI9341_SPI_Init+0x34>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e868:	2b40      	cmp	r3, #64	; 0x40
 800e86a:	d005      	beq.n	800e878 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e86c:	4b08      	ldr	r3, [pc, #32]	; (800e890 <ILI9341_SPI_Init+0x34>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a07      	ldr	r2, [pc, #28]	; (800e890 <ILI9341_SPI_Init+0x34>)
 800e872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e876:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e878:	4b06      	ldr	r3, [pc, #24]	; (800e894 <ILI9341_SPI_Init+0x38>)
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	4a05      	ldr	r2, [pc, #20]	; (800e894 <ILI9341_SPI_Init+0x38>)
 800e87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e882:	6153      	str	r3, [r2, #20]
}
 800e884:	bf00      	nop
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	40003c00 	.word	0x40003c00
 800e894:	48000400 	.word	0x48000400

0800e898 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e898:	b590      	push	{r4, r7, lr}
 800e89a:	b087      	sub	sp, #28
 800e89c:	af02      	add	r7, sp, #8
 800e89e:	4604      	mov	r4, r0
 800e8a0:	4608      	mov	r0, r1
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	4623      	mov	r3, r4
 800e8a8:	80fb      	strh	r3, [r7, #6]
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	80bb      	strh	r3, [r7, #4]
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	807b      	strh	r3, [r7, #2]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e8b6:	4b28      	ldr	r3, [pc, #160]	; (800e958 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	88fa      	ldrh	r2, [r7, #6]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d246      	bcs.n	800e950 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e8c2:	4b26      	ldr	r3, [pc, #152]	; (800e95c <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	88ba      	ldrh	r2, [r7, #4]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d240      	bcs.n	800e950 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e8ce:	88fa      	ldrh	r2, [r7, #6]
 800e8d0:	887b      	ldrh	r3, [r7, #2]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	3b01      	subs	r3, #1
 800e8d6:	4a20      	ldr	r2, [pc, #128]	; (800e958 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e8d8:	8812      	ldrh	r2, [r2, #0]
 800e8da:	b292      	uxth	r2, r2
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	db05      	blt.n	800e8ec <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e8e0:	4b1d      	ldr	r3, [pc, #116]	; (800e958 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	88fb      	ldrh	r3, [r7, #6]
 800e8e8:	1ad3      	subs	r3, r2, r3
 800e8ea:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e8ec:	88fa      	ldrh	r2, [r7, #6]
 800e8ee:	887b      	ldrh	r3, [r7, #2]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	88bb      	ldrh	r3, [r7, #4]
 800e8fa:	88b9      	ldrh	r1, [r7, #4]
 800e8fc:	88f8      	ldrh	r0, [r7, #6]
 800e8fe:	f000 f893 	bl	800ea28 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e902:	2300      	movs	r3, #0
 800e904:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e906:	887b      	ldrh	r3, [r7, #2]
 800e908:	f003 0301 	and.w	r3, r3, #1
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d009      	beq.n	800e924 <ILI9341_Draw_Horizontal_Line+0x8c>
 800e910:	887b      	ldrh	r3, [r7, #2]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d906      	bls.n	800e924 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e916:	2301      	movs	r3, #1
 800e918:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e91a:	887b      	ldrh	r3, [r7, #2]
 800e91c:	085b      	lsrs	r3, r3, #1
 800e91e:	b29b      	uxth	r3, r3
 800e920:	005b      	lsls	r3, r3, #1
 800e922:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e924:	887c      	ldrh	r4, [r7, #2]
 800e926:	883a      	ldrh	r2, [r7, #0]
 800e928:	88b9      	ldrh	r1, [r7, #4]
 800e92a:	88f8      	ldrh	r0, [r7, #6]
 800e92c:	2303      	movs	r3, #3
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	4623      	mov	r3, r4
 800e932:	f000 fb5b 	bl	800efec <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e936:	7bfb      	ldrb	r3, [r7, #15]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00a      	beq.n	800e952 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800e93c:	88fa      	ldrh	r2, [r7, #6]
 800e93e:	887b      	ldrh	r3, [r7, #2]
 800e940:	4413      	add	r3, r2
 800e942:	b29b      	uxth	r3, r3
 800e944:	883a      	ldrh	r2, [r7, #0]
 800e946:	88b9      	ldrh	r1, [r7, #4]
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 f8e3 	bl	800eb14 <ILI9341_Draw_Pixel>
 800e94e:	e000      	b.n	800e952 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e950:	bf00      	nop
							(ypos),
							colour);
	}


}
 800e952:	3714      	adds	r7, #20
 800e954:	46bd      	mov	sp, r7
 800e956:	bd90      	pop	{r4, r7, pc}
 800e958:	20000cb6 	.word	0x20000cb6
 800e95c:	20000cb4 	.word	0x20000cb4

0800e960 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b087      	sub	sp, #28
 800e964:	af02      	add	r7, sp, #8
 800e966:	4604      	mov	r4, r0
 800e968:	4608      	mov	r0, r1
 800e96a:	4611      	mov	r1, r2
 800e96c:	461a      	mov	r2, r3
 800e96e:	4623      	mov	r3, r4
 800e970:	80fb      	strh	r3, [r7, #6]
 800e972:	4603      	mov	r3, r0
 800e974:	80bb      	strh	r3, [r7, #4]
 800e976:	460b      	mov	r3, r1
 800e978:	807b      	strh	r3, [r7, #2]
 800e97a:	4613      	mov	r3, r2
 800e97c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e97e:	4b28      	ldr	r3, [pc, #160]	; (800ea20 <ILI9341_Draw_Vertical_Line+0xc0>)
 800e980:	881b      	ldrh	r3, [r3, #0]
 800e982:	b29b      	uxth	r3, r3
 800e984:	88fa      	ldrh	r2, [r7, #6]
 800e986:	429a      	cmp	r2, r3
 800e988:	d246      	bcs.n	800ea18 <ILI9341_Draw_Vertical_Line+0xb8>
 800e98a:	4b26      	ldr	r3, [pc, #152]	; (800ea24 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e98c:	881b      	ldrh	r3, [r3, #0]
 800e98e:	b29b      	uxth	r3, r3
 800e990:	88ba      	ldrh	r2, [r7, #4]
 800e992:	429a      	cmp	r2, r3
 800e994:	d240      	bcs.n	800ea18 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800e996:	88ba      	ldrh	r2, [r7, #4]
 800e998:	887b      	ldrh	r3, [r7, #2]
 800e99a:	4413      	add	r3, r2
 800e99c:	3b01      	subs	r3, #1
 800e99e:	4a21      	ldr	r2, [pc, #132]	; (800ea24 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e9a0:	8812      	ldrh	r2, [r2, #0]
 800e9a2:	b292      	uxth	r2, r2
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	db05      	blt.n	800e9b4 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800e9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ea24 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	88bb      	ldrh	r3, [r7, #4]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800e9b4:	88ba      	ldrh	r2, [r7, #4]
 800e9b6:	887b      	ldrh	r3, [r7, #2]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	88fa      	ldrh	r2, [r7, #6]
 800e9c2:	88b9      	ldrh	r1, [r7, #4]
 800e9c4:	88f8      	ldrh	r0, [r7, #6]
 800e9c6:	f000 f82f 	bl	800ea28 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e9ce:	887b      	ldrh	r3, [r7, #2]
 800e9d0:	f003 0301 	and.w	r3, r3, #1
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d009      	beq.n	800e9ec <ILI9341_Draw_Vertical_Line+0x8c>
 800e9d8:	887b      	ldrh	r3, [r7, #2]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d906      	bls.n	800e9ec <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e9e2:	887b      	ldrh	r3, [r7, #2]
 800e9e4:	085b      	lsrs	r3, r3, #1
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d008      	beq.n	800ea04 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e9f2:	88ba      	ldrh	r2, [r7, #4]
 800e9f4:	887b      	ldrh	r3, [r7, #2]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	b299      	uxth	r1, r3
 800e9fa:	883a      	ldrh	r2, [r7, #0]
 800e9fc:	88fb      	ldrh	r3, [r7, #6]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f000 f888 	bl	800eb14 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800ea04:	887c      	ldrh	r4, [r7, #2]
 800ea06:	883a      	ldrh	r2, [r7, #0]
 800ea08:	88b9      	ldrh	r1, [r7, #4]
 800ea0a:	88f8      	ldrh	r0, [r7, #6]
 800ea0c:	2303      	movs	r3, #3
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	4623      	mov	r3, r4
 800ea12:	f000 faeb 	bl	800efec <_LCD_Write_Frame>
 800ea16:	e000      	b.n	800ea1a <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800ea18:	bf00      	nop
}
 800ea1a:	3714      	adds	r7, #20
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}
 800ea20:	20000cb6 	.word	0x20000cb6
 800ea24:	20000cb4 	.word	0x20000cb4

0800ea28 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800ea28:	b590      	push	{r4, r7, lr}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	4604      	mov	r4, r0
 800ea30:	4608      	mov	r0, r1
 800ea32:	4611      	mov	r1, r2
 800ea34:	461a      	mov	r2, r3
 800ea36:	4623      	mov	r3, r4
 800ea38:	80fb      	strh	r3, [r7, #6]
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	80bb      	strh	r3, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	807b      	strh	r3, [r7, #2]
 800ea42:	4613      	mov	r3, r2
 800ea44:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800ea46:	202a      	movs	r0, #42	; 0x2a
 800ea48:	f000 fb80 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800ea4c:	88fb      	ldrh	r3, [r7, #6]
 800ea4e:	0a1b      	lsrs	r3, r3, #8
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 fbab 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(sc);
 800ea5a:	88fb      	ldrh	r3, [r7, #6]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f000 fba6 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800ea64:	887b      	ldrh	r3, [r7, #2]
 800ea66:	0a1b      	lsrs	r3, r3, #8
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 fb9f 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(ec);
 800ea72:	887b      	ldrh	r3, [r7, #2]
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	4618      	mov	r0, r3
 800ea78:	f000 fb9a 	bl	800f1b0 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800ea7c:	202b      	movs	r0, #43	; 0x2b
 800ea7e:	f000 fb65 	bl	800f14c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800ea82:	88bb      	ldrh	r3, [r7, #4]
 800ea84:	0a1b      	lsrs	r3, r3, #8
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f000 fb90 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(sp);
 800ea90:	88bb      	ldrh	r3, [r7, #4]
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	4618      	mov	r0, r3
 800ea96:	f000 fb8b 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800ea9a:	883b      	ldrh	r3, [r7, #0]
 800ea9c:	0a1b      	lsrs	r3, r3, #8
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f000 fb84 	bl	800f1b0 <_LCD_SendData>
	_LCD_SendData(ep);
 800eaa8:	883b      	ldrh	r3, [r7, #0]
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	4618      	mov	r0, r3
 800eaae:	f000 fb7f 	bl	800f1b0 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800eab2:	202c      	movs	r0, #44	; 0x2c
 800eab4:	f000 fb4a 	bl	800f14c <_LCD_SendCommand>
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd90      	pop	{r4, r7, pc}

0800eac0 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af02      	add	r7, sp, #8
 800eac6:	4603      	mov	r3, r0
 800eac8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800eaca:	4b10      	ldr	r3, [pc, #64]	; (800eb0c <ILI9341_Fill_Screen+0x4c>)
 800eacc:	881b      	ldrh	r3, [r3, #0]
 800eace:	b29a      	uxth	r2, r3
 800ead0:	4b0f      	ldr	r3, [pc, #60]	; (800eb10 <ILI9341_Fill_Screen+0x50>)
 800ead2:	881b      	ldrh	r3, [r3, #0]
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	2100      	movs	r1, #0
 800ead8:	2000      	movs	r0, #0
 800eada:	f7ff ffa5 	bl	800ea28 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800eade:	4b0b      	ldr	r3, [pc, #44]	; (800eb0c <ILI9341_Fill_Screen+0x4c>)
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	461a      	mov	r2, r3
 800eae6:	4b0a      	ldr	r3, [pc, #40]	; (800eb10 <ILI9341_Fill_Screen+0x50>)
 800eae8:	881b      	ldrh	r3, [r3, #0]
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	fb03 f302 	mul.w	r3, r3, r2
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	88fa      	ldrh	r2, [r7, #6]
 800eaf4:	2304      	movs	r3, #4
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	2100      	movs	r1, #0
 800eafc:	2000      	movs	r0, #0
 800eafe:	f000 fa75 	bl	800efec <_LCD_Write_Frame>
}
 800eb02:	bf00      	nop
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20000cb6 	.word	0x20000cb6
 800eb10:	20000cb4 	.word	0x20000cb4

0800eb14 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b08e      	sub	sp, #56	; 0x38
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	80fb      	strh	r3, [r7, #6]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	80bb      	strh	r3, [r7, #4]
 800eb22:	4613      	mov	r3, r2
 800eb24:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800eb26:	4b98      	ldr	r3, [pc, #608]	; (800ed88 <ILI9341_Draw_Pixel+0x274>)
 800eb28:	881b      	ldrh	r3, [r3, #0]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	88fa      	ldrh	r2, [r7, #6]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	f080 8143 	bcs.w	800edba <ILI9341_Draw_Pixel+0x2a6>
 800eb34:	4b95      	ldr	r3, [pc, #596]	; (800ed8c <ILI9341_Draw_Pixel+0x278>)
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	88ba      	ldrh	r2, [r7, #4]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	f080 813c 	bcs.w	800edba <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800eb42:	4b93      	ldr	r3, [pc, #588]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb44:	695b      	ldr	r3, [r3, #20]
 800eb46:	4a92      	ldr	r2, [pc, #584]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb4c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb4e:	4b90      	ldr	r3, [pc, #576]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	4a8f      	ldr	r2, [pc, #572]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb58:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800eb5a:	220a      	movs	r2, #10
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	202a      	movs	r0, #42	; 0x2a
 800eb60:	f000 fb58 	bl	800f214 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb64:	2300      	movs	r3, #0
 800eb66:	637b      	str	r3, [r7, #52]	; 0x34
 800eb68:	e008      	b.n	800eb7c <ILI9341_Draw_Pixel+0x68>
 800eb6a:	4b89      	ldr	r3, [pc, #548]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	4a88      	ldr	r2, [pc, #544]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb74:	6153      	str	r3, [r2, #20]
 800eb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb78:	3301      	adds	r3, #1
 800eb7a:	637b      	str	r3, [r7, #52]	; 0x34
 800eb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb7e:	2b02      	cmp	r3, #2
 800eb80:	ddf3      	ble.n	800eb6a <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800eb82:	4b83      	ldr	r3, [pc, #524]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	4a82      	ldr	r2, [pc, #520]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb8c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800eb8e:	4b80      	ldr	r3, [pc, #512]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb90:	695b      	ldr	r3, [r3, #20]
 800eb92:	4a7f      	ldr	r2, [pc, #508]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb98:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb9a:	4b7d      	ldr	r3, [pc, #500]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eb9c:	695b      	ldr	r3, [r3, #20]
 800eb9e:	4a7c      	ldr	r2, [pc, #496]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eba4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800eba6:	88fb      	ldrh	r3, [r7, #6]
 800eba8:	0a1b      	lsrs	r3, r3, #8
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	753b      	strb	r3, [r7, #20]
 800ebb0:	88fb      	ldrh	r3, [r7, #6]
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	757b      	strb	r3, [r7, #21]
 800ebb6:	88fb      	ldrh	r3, [r7, #6]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	121b      	asrs	r3, r3, #8
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	75bb      	strb	r3, [r7, #22]
 800ebc0:	88fb      	ldrh	r3, [r7, #6]
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800ebca:	f107 0014 	add.w	r0, r7, #20
 800ebce:	230a      	movs	r3, #10
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	2104      	movs	r1, #4
 800ebd4:	f000 fb50 	bl	800f278 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ebd8:	2300      	movs	r3, #0
 800ebda:	633b      	str	r3, [r7, #48]	; 0x30
 800ebdc:	e008      	b.n	800ebf0 <ILI9341_Draw_Pixel+0xdc>
 800ebde:	4b6c      	ldr	r3, [pc, #432]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ebe0:	695b      	ldr	r3, [r3, #20]
 800ebe2:	4a6b      	ldr	r2, [pc, #428]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ebe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebe8:	6153      	str	r3, [r2, #20]
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	3301      	adds	r3, #1
 800ebee:	633b      	str	r3, [r7, #48]	; 0x30
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	ddf3      	ble.n	800ebde <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ebf6:	4b66      	ldr	r3, [pc, #408]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ebf8:	695b      	ldr	r3, [r3, #20]
 800ebfa:	4a65      	ldr	r2, [pc, #404]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ebfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec00:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ec02:	4b63      	ldr	r3, [pc, #396]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec04:	695b      	ldr	r3, [r3, #20]
 800ec06:	4a62      	ldr	r2, [pc, #392]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec0c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec0e:	4b60      	ldr	r3, [pc, #384]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec10:	695b      	ldr	r3, [r3, #20]
 800ec12:	4a5f      	ldr	r2, [pc, #380]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec18:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800ec1a:	220a      	movs	r2, #10
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	202b      	movs	r0, #43	; 0x2b
 800ec20:	f000 faf8 	bl	800f214 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec24:	2300      	movs	r3, #0
 800ec26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec28:	e008      	b.n	800ec3c <ILI9341_Draw_Pixel+0x128>
 800ec2a:	4b59      	ldr	r3, [pc, #356]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	4a58      	ldr	r2, [pc, #352]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec34:	6153      	str	r3, [r2, #20]
 800ec36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec38:	3301      	adds	r3, #1
 800ec3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	ddf3      	ble.n	800ec2a <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ec42:	4b53      	ldr	r3, [pc, #332]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec44:	695b      	ldr	r3, [r3, #20]
 800ec46:	4a52      	ldr	r2, [pc, #328]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ec4e:	4b50      	ldr	r3, [pc, #320]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	4a4f      	ldr	r2, [pc, #316]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec58:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec5a:	4b4d      	ldr	r3, [pc, #308]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec5c:	695b      	ldr	r3, [r3, #20]
 800ec5e:	4a4c      	ldr	r2, [pc, #304]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ec60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec64:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800ec66:	88bb      	ldrh	r3, [r7, #4]
 800ec68:	0a1b      	lsrs	r3, r3, #8
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	743b      	strb	r3, [r7, #16]
 800ec70:	88bb      	ldrh	r3, [r7, #4]
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	747b      	strb	r3, [r7, #17]
 800ec76:	88bb      	ldrh	r3, [r7, #4]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	121b      	asrs	r3, r3, #8
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	74bb      	strb	r3, [r7, #18]
 800ec80:	88bb      	ldrh	r3, [r7, #4]
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	3301      	adds	r3, #1
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800ec8a:	f107 0010 	add.w	r0, r7, #16
 800ec8e:	230a      	movs	r3, #10
 800ec90:	2200      	movs	r2, #0
 800ec92:	2104      	movs	r1, #4
 800ec94:	f000 faf0 	bl	800f278 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec98:	2300      	movs	r3, #0
 800ec9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec9c:	e008      	b.n	800ecb0 <ILI9341_Draw_Pixel+0x19c>
 800ec9e:	4b3c      	ldr	r3, [pc, #240]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eca0:	695b      	ldr	r3, [r3, #20]
 800eca2:	4a3b      	ldr	r2, [pc, #236]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800eca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eca8:	6153      	str	r3, [r2, #20]
 800ecaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecac:	3301      	adds	r3, #1
 800ecae:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	ddf3      	ble.n	800ec9e <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ecb6:	4b36      	ldr	r3, [pc, #216]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecb8:	695b      	ldr	r3, [r3, #20]
 800ecba:	4a35      	ldr	r2, [pc, #212]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecc0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ecc2:	4b33      	ldr	r3, [pc, #204]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	4a32      	ldr	r2, [pc, #200]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eccc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecce:	4b30      	ldr	r3, [pc, #192]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	4a2f      	ldr	r2, [pc, #188]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecd8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800ecda:	220a      	movs	r2, #10
 800ecdc:	2100      	movs	r1, #0
 800ecde:	202c      	movs	r0, #44	; 0x2c
 800ece0:	f000 fa98 	bl	800f214 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ece4:	2300      	movs	r3, #0
 800ece6:	627b      	str	r3, [r7, #36]	; 0x24
 800ece8:	e008      	b.n	800ecfc <ILI9341_Draw_Pixel+0x1e8>
 800ecea:	4b29      	ldr	r3, [pc, #164]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecec:	695b      	ldr	r3, [r3, #20]
 800ecee:	4a28      	ldr	r2, [pc, #160]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ecf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecf4:	6153      	str	r3, [r2, #20]
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	627b      	str	r3, [r7, #36]	; 0x24
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	ddf3      	ble.n	800ecea <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ed02:	4b23      	ldr	r3, [pc, #140]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed04:	695b      	ldr	r3, [r3, #20]
 800ed06:	4a22      	ldr	r2, [pc, #136]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed0c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed0e:	4b20      	ldr	r3, [pc, #128]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	4a1f      	ldr	r2, [pc, #124]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed18:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed1a:	4b1d      	ldr	r3, [pc, #116]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed1c:	695b      	ldr	r3, [r3, #20]
 800ed1e:	4a1c      	ldr	r2, [pc, #112]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed24:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800ed26:	887b      	ldrh	r3, [r7, #2]
 800ed28:	0a1b      	lsrs	r3, r3, #8
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	733b      	strb	r3, [r7, #12]
 800ed30:	887b      	ldrh	r3, [r7, #2]
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800ed36:	f107 000c 	add.w	r0, r7, #12
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2102      	movs	r1, #2
 800ed40:	f000 fa9a 	bl	800f278 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed44:	2300      	movs	r3, #0
 800ed46:	623b      	str	r3, [r7, #32]
 800ed48:	e008      	b.n	800ed5c <ILI9341_Draw_Pixel+0x248>
 800ed4a:	4b11      	ldr	r3, [pc, #68]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	4a10      	ldr	r2, [pc, #64]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed54:	6153      	str	r3, [r2, #20]
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	623b      	str	r3, [r7, #32]
 800ed5c:	6a3b      	ldr	r3, [r7, #32]
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	ddf3      	ble.n	800ed4a <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed62:	2300      	movs	r3, #0
 800ed64:	61fb      	str	r3, [r7, #28]
 800ed66:	e008      	b.n	800ed7a <ILI9341_Draw_Pixel+0x266>
 800ed68:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	4a08      	ldr	r2, [pc, #32]	; (800ed90 <ILI9341_Draw_Pixel+0x27c>)
 800ed6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed72:	6153      	str	r3, [r2, #20]
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	3301      	adds	r3, #1
 800ed78:	61fb      	str	r3, [r7, #28]
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	ddf3      	ble.n	800ed68 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed80:	2300      	movs	r3, #0
 800ed82:	61bb      	str	r3, [r7, #24]
 800ed84:	e00f      	b.n	800eda6 <ILI9341_Draw_Pixel+0x292>
 800ed86:	bf00      	nop
 800ed88:	20000cb6 	.word	0x20000cb6
 800ed8c:	20000cb4 	.word	0x20000cb4
 800ed90:	48000400 	.word	0x48000400
 800ed94:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <ILI9341_Draw_Pixel+0x2b0>)
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	4a0a      	ldr	r2, [pc, #40]	; (800edc4 <ILI9341_Draw_Pixel+0x2b0>)
 800ed9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed9e:	6153      	str	r3, [r2, #20]
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	3301      	adds	r3, #1
 800eda4:	61bb      	str	r3, [r7, #24]
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	ddf3      	ble.n	800ed94 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800edac:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <ILI9341_Draw_Pixel+0x2b0>)
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	4a04      	ldr	r2, [pc, #16]	; (800edc4 <ILI9341_Draw_Pixel+0x2b0>)
 800edb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edb6:	6153      	str	r3, [r2, #20]
 800edb8:	e000      	b.n	800edbc <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800edba:	bf00      	nop


}
 800edbc:	3738      	adds	r7, #56	; 0x38
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	48000400 	.word	0x48000400

0800edc8 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800edc8:	b590      	push	{r4, r7, lr}
 800edca:	b087      	sub	sp, #28
 800edcc:	af02      	add	r7, sp, #8
 800edce:	4604      	mov	r4, r0
 800edd0:	4608      	mov	r0, r1
 800edd2:	4611      	mov	r1, r2
 800edd4:	461a      	mov	r2, r3
 800edd6:	4623      	mov	r3, r4
 800edd8:	80fb      	strh	r3, [r7, #6]
 800edda:	4603      	mov	r3, r0
 800eddc:	80bb      	strh	r3, [r7, #4]
 800edde:	460b      	mov	r3, r1
 800ede0:	807b      	strh	r3, [r7, #2]
 800ede2:	4613      	mov	r3, r2
 800ede4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ede6:	4b41      	ldr	r3, [pc, #260]	; (800eeec <ILI9341_Draw_Rectangle+0x124>)
 800ede8:	881b      	ldrh	r3, [r3, #0]
 800edea:	b29b      	uxth	r3, r3
 800edec:	88fa      	ldrh	r2, [r7, #6]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d278      	bcs.n	800eee4 <ILI9341_Draw_Rectangle+0x11c>
 800edf2:	4b3f      	ldr	r3, [pc, #252]	; (800eef0 <ILI9341_Draw_Rectangle+0x128>)
 800edf4:	881b      	ldrh	r3, [r3, #0]
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	88ba      	ldrh	r2, [r7, #4]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d272      	bcs.n	800eee4 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800edfe:	88fa      	ldrh	r2, [r7, #6]
 800ee00:	887b      	ldrh	r3, [r7, #2]
 800ee02:	4413      	add	r3, r2
 800ee04:	3b01      	subs	r3, #1
 800ee06:	4a39      	ldr	r2, [pc, #228]	; (800eeec <ILI9341_Draw_Rectangle+0x124>)
 800ee08:	8812      	ldrh	r2, [r2, #0]
 800ee0a:	b292      	uxth	r2, r2
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	db05      	blt.n	800ee1c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800ee10:	4b36      	ldr	r3, [pc, #216]	; (800eeec <ILI9341_Draw_Rectangle+0x124>)
 800ee12:	881b      	ldrh	r3, [r3, #0]
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	88fb      	ldrh	r3, [r7, #6]
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800ee1c:	88ba      	ldrh	r2, [r7, #4]
 800ee1e:	883b      	ldrh	r3, [r7, #0]
 800ee20:	4413      	add	r3, r2
 800ee22:	3b01      	subs	r3, #1
 800ee24:	4a32      	ldr	r2, [pc, #200]	; (800eef0 <ILI9341_Draw_Rectangle+0x128>)
 800ee26:	8812      	ldrh	r2, [r2, #0]
 800ee28:	b292      	uxth	r2, r2
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	db05      	blt.n	800ee3a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ee2e:	4b30      	ldr	r3, [pc, #192]	; (800eef0 <ILI9341_Draw_Rectangle+0x128>)
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	88bb      	ldrh	r3, [r7, #4]
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ee3a:	88fa      	ldrh	r2, [r7, #6]
 800ee3c:	887b      	ldrh	r3, [r7, #2]
 800ee3e:	4413      	add	r3, r2
 800ee40:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ee42:	3b01      	subs	r3, #1
 800ee44:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ee46:	88ba      	ldrh	r2, [r7, #4]
 800ee48:	883b      	ldrh	r3, [r7, #0]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	88b9      	ldrh	r1, [r7, #4]
 800ee54:	88f8      	ldrh	r0, [r7, #6]
 800ee56:	4622      	mov	r2, r4
 800ee58:	f7ff fde6 	bl	800ea28 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ee5c:	883a      	ldrh	r2, [r7, #0]
 800ee5e:	887b      	ldrh	r3, [r7, #2]
 800ee60:	fb12 f303 	smulbb	r3, r2, r3
 800ee64:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ee66:	2300      	movs	r3, #0
 800ee68:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ee6a:	89fb      	ldrh	r3, [r7, #14]
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d009      	beq.n	800ee88 <ILI9341_Draw_Rectangle+0xc0>
 800ee74:	89fb      	ldrh	r3, [r7, #14]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d906      	bls.n	800ee88 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ee7e:	89fb      	ldrh	r3, [r7, #14]
 800ee80:	085b      	lsrs	r3, r3, #1
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	005b      	lsls	r3, r3, #1
 800ee86:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ee88:	89fc      	ldrh	r4, [r7, #14]
 800ee8a:	8c3a      	ldrh	r2, [r7, #32]
 800ee8c:	88b9      	ldrh	r1, [r7, #4]
 800ee8e:	88f8      	ldrh	r0, [r7, #6]
 800ee90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	4623      	mov	r3, r4
 800ee98:	f000 f8a8 	bl	800efec <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ee9c:	7b7b      	ldrb	r3, [r7, #13]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d021      	beq.n	800eee6 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800eea2:	88fa      	ldrh	r2, [r7, #6]
 800eea4:	887b      	ldrh	r3, [r7, #2]
 800eea6:	4413      	add	r3, r2
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	3b02      	subs	r3, #2
 800eeac:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800eeae:	88ba      	ldrh	r2, [r7, #4]
 800eeb0:	883b      	ldrh	r3, [r7, #0]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	8c3a      	ldrh	r2, [r7, #32]
 800eebc:	4619      	mov	r1, r3
 800eebe:	f7ff fe29 	bl	800eb14 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800eec2:	88fa      	ldrh	r2, [r7, #6]
 800eec4:	887b      	ldrh	r3, [r7, #2]
 800eec6:	4413      	add	r3, r2
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	3b01      	subs	r3, #1
 800eecc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800eece:	88ba      	ldrh	r2, [r7, #4]
 800eed0:	883b      	ldrh	r3, [r7, #0]
 800eed2:	4413      	add	r3, r2
 800eed4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800eed6:	3b01      	subs	r3, #1
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	8c3a      	ldrh	r2, [r7, #32]
 800eedc:	4619      	mov	r1, r3
 800eede:	f7ff fe19 	bl	800eb14 <ILI9341_Draw_Pixel>
 800eee2:	e000      	b.n	800eee6 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800eee4:	bf00      	nop
							colour);
	}
}
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd90      	pop	{r4, r7, pc}
 800eeec:	20000cb6 	.word	0x20000cb6
 800eef0:	20000cb4 	.word	0x20000cb4

0800eef4 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800eefe:	79fb      	ldrb	r3, [r7, #7]
 800ef00:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800ef02:	2036      	movs	r0, #54	; 0x36
 800ef04:	f000 f922 	bl	800f14c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d836      	bhi.n	800ef7c <ILI9341_Set_Rotation+0x88>
 800ef0e:	a201      	add	r2, pc, #4	; (adr r2, 800ef14 <ILI9341_Set_Rotation+0x20>)
 800ef10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef14:	0800ef25 	.word	0x0800ef25
 800ef18:	0800ef3b 	.word	0x0800ef3b
 800ef1c:	0800ef51 	.word	0x0800ef51
 800ef20:	0800ef67 	.word	0x0800ef67
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800ef24:	2048      	movs	r0, #72	; 0x48
 800ef26:	f000 f943 	bl	800f1b0 <_LCD_SendData>
			LCD_WIDTH = 240;
 800ef2a:	4b17      	ldr	r3, [pc, #92]	; (800ef88 <ILI9341_Set_Rotation+0x94>)
 800ef2c:	22f0      	movs	r2, #240	; 0xf0
 800ef2e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ef30:	4b16      	ldr	r3, [pc, #88]	; (800ef8c <ILI9341_Set_Rotation+0x98>)
 800ef32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ef36:	801a      	strh	r2, [r3, #0]
			break;
 800ef38:	e021      	b.n	800ef7e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800ef3a:	2028      	movs	r0, #40	; 0x28
 800ef3c:	f000 f938 	bl	800f1b0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ef40:	4b11      	ldr	r3, [pc, #68]	; (800ef88 <ILI9341_Set_Rotation+0x94>)
 800ef42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ef46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ef48:	4b10      	ldr	r3, [pc, #64]	; (800ef8c <ILI9341_Set_Rotation+0x98>)
 800ef4a:	22f0      	movs	r2, #240	; 0xf0
 800ef4c:	801a      	strh	r2, [r3, #0]
			break;
 800ef4e:	e016      	b.n	800ef7e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800ef50:	2088      	movs	r0, #136	; 0x88
 800ef52:	f000 f92d 	bl	800f1b0 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800ef56:	4b0c      	ldr	r3, [pc, #48]	; (800ef88 <ILI9341_Set_Rotation+0x94>)
 800ef58:	22f0      	movs	r2, #240	; 0xf0
 800ef5a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ef5c:	4b0b      	ldr	r3, [pc, #44]	; (800ef8c <ILI9341_Set_Rotation+0x98>)
 800ef5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ef62:	801a      	strh	r2, [r3, #0]
			break;
 800ef64:	e00b      	b.n	800ef7e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800ef66:	20e8      	movs	r0, #232	; 0xe8
 800ef68:	f000 f922 	bl	800f1b0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ef6c:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <ILI9341_Set_Rotation+0x94>)
 800ef6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ef72:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ef74:	4b05      	ldr	r3, [pc, #20]	; (800ef8c <ILI9341_Set_Rotation+0x98>)
 800ef76:	22f0      	movs	r2, #240	; 0xf0
 800ef78:	801a      	strh	r2, [r3, #0]
			break;
 800ef7a:	e000      	b.n	800ef7e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800ef7c:	bf00      	nop
	}
}
 800ef7e:	bf00      	nop
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	20000cb6 	.word	0x20000cb6
 800ef8c:	20000cb4 	.word	0x20000cb4

0800ef90 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800ef90:	b480      	push	{r7}
 800ef92:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ef94:	4b05      	ldr	r3, [pc, #20]	; (800efac <_LCD_Enable+0x1c>)
 800ef96:	695b      	ldr	r3, [r3, #20]
 800ef98:	4a04      	ldr	r2, [pc, #16]	; (800efac <_LCD_Enable+0x1c>)
 800ef9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef9e:	6153      	str	r3, [r2, #20]
}
 800efa0:	bf00      	nop
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	48000400 	.word	0x48000400

0800efb0 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800efb4:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <_LCD_Reset+0x38>)
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	4a0b      	ldr	r2, [pc, #44]	; (800efe8 <_LCD_Reset+0x38>)
 800efba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800efbe:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800efc0:	20c8      	movs	r0, #200	; 0xc8
 800efc2:	f7f9 fa95 	bl	80084f0 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800efc6:	4b08      	ldr	r3, [pc, #32]	; (800efe8 <_LCD_Reset+0x38>)
 800efc8:	695b      	ldr	r3, [r3, #20]
 800efca:	4a07      	ldr	r2, [pc, #28]	; (800efe8 <_LCD_Reset+0x38>)
 800efcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efd0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800efd2:	20c8      	movs	r0, #200	; 0xc8
 800efd4:	f7f9 fa8c 	bl	80084f0 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800efd8:	4b03      	ldr	r3, [pc, #12]	; (800efe8 <_LCD_Reset+0x38>)
 800efda:	695b      	ldr	r3, [r3, #20]
 800efdc:	4a02      	ldr	r2, [pc, #8]	; (800efe8 <_LCD_Reset+0x38>)
 800efde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800efe2:	6153      	str	r3, [r2, #20]
}
 800efe4:	bf00      	nop
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	48000400 	.word	0x48000400

0800efec <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800efec:	b5b0      	push	{r4, r5, r7, lr}
 800efee:	b08e      	sub	sp, #56	; 0x38
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	607b      	str	r3, [r7, #4]
 800eff4:	4603      	mov	r3, r0
 800eff6:	81fb      	strh	r3, [r7, #14]
 800eff8:	460b      	mov	r3, r1
 800effa:	81bb      	strh	r3, [r7, #12]
 800effc:	4613      	mov	r3, r2
 800effe:	817b      	strh	r3, [r7, #10]
 800f000:	466b      	mov	r3, sp
 800f002:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800f004:	2300      	movs	r3, #0
 800f006:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	005b      	lsls	r3, r3, #1
 800f00c:	4a4d      	ldr	r2, [pc, #308]	; (800f144 <_LCD_Write_Frame+0x158>)
 800f00e:	8812      	ldrh	r2, [r2, #0]
 800f010:	4293      	cmp	r3, r2
 800f012:	d202      	bcs.n	800f01a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f018:	e002      	b.n	800f020 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800f01a:	4b4a      	ldr	r3, [pc, #296]	; (800f144 <_LCD_Write_Frame+0x158>)
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800f020:	897b      	ldrh	r3, [r7, #10]
 800f022:	0a1b      	lsrs	r3, r3, #8
 800f024:	b29b      	uxth	r3, r3
 800f026:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800f028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f02a:	4603      	mov	r3, r0
 800f02c:	3b01      	subs	r3, #1
 800f02e:	61bb      	str	r3, [r7, #24]
 800f030:	4601      	mov	r1, r0
 800f032:	f04f 0200 	mov.w	r2, #0
 800f036:	f04f 0300 	mov.w	r3, #0
 800f03a:	f04f 0400 	mov.w	r4, #0
 800f03e:	00d4      	lsls	r4, r2, #3
 800f040:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f044:	00cb      	lsls	r3, r1, #3
 800f046:	4601      	mov	r1, r0
 800f048:	f04f 0200 	mov.w	r2, #0
 800f04c:	f04f 0300 	mov.w	r3, #0
 800f050:	f04f 0400 	mov.w	r4, #0
 800f054:	00d4      	lsls	r4, r2, #3
 800f056:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f05a:	00cb      	lsls	r3, r1, #3
 800f05c:	1dc3      	adds	r3, r0, #7
 800f05e:	08db      	lsrs	r3, r3, #3
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	ebad 0d03 	sub.w	sp, sp, r3
 800f066:	466b      	mov	r3, sp
 800f068:	3300      	adds	r3, #0
 800f06a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f06c:	2300      	movs	r3, #0
 800f06e:	633b      	str	r3, [r7, #48]	; 0x30
 800f070:	e00d      	b.n	800f08e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	4413      	add	r3, r2
 800f078:	7ffa      	ldrb	r2, [r7, #31]
 800f07a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	3301      	adds	r3, #1
 800f080:	897a      	ldrh	r2, [r7, #10]
 800f082:	b2d1      	uxtb	r1, r2
 800f084:	697a      	ldr	r2, [r7, #20]
 800f086:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08a:	3302      	adds	r3, #2
 800f08c:	633b      	str	r3, [r7, #48]	; 0x30
 800f08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	429a      	cmp	r2, r3
 800f094:	d3ed      	bcc.n	800f072 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800f09c:	2301      	movs	r3, #1
 800f09e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00d      	beq.n	800f0c6 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800f0aa:	693a      	ldr	r2, [r7, #16]
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0b2:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0be:	fb01 f202 	mul.w	r2, r1, r2
 800f0c2:	1a9b      	subs	r3, r3, r2
 800f0c4:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f0c6:	4b20      	ldr	r3, [pc, #128]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f0c8:	695b      	ldr	r3, [r3, #20]
 800f0ca:	4a1f      	ldr	r2, [pc, #124]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0d0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f0d2:	4b1d      	ldr	r3, [pc, #116]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f0d4:	695b      	ldr	r3, [r3, #20]
 800f0d6:	4a1c      	ldr	r2, [pc, #112]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f0d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0dc:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800f0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00f      	beq.n	800f104 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0e8:	e008      	b.n	800f0fc <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800f0ea:	6978      	ldr	r0, [r7, #20]
 800f0ec:	230a      	movs	r3, #10
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0f2:	f000 f8c1 	bl	800f278 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800f0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f100:	429a      	cmp	r2, r3
 800f102:	d3f2      	bcc.n	800f0ea <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800f104:	6978      	ldr	r0, [r7, #20]
 800f106:	230a      	movs	r3, #10
 800f108:	2200      	movs	r2, #0
 800f10a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f10c:	f000 f8b4 	bl	800f278 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f110:	2300      	movs	r3, #0
 800f112:	623b      	str	r3, [r7, #32]
 800f114:	e008      	b.n	800f128 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f116:	4b0c      	ldr	r3, [pc, #48]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f118:	695b      	ldr	r3, [r3, #20]
 800f11a:	4a0b      	ldr	r2, [pc, #44]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f11c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f120:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	3301      	adds	r3, #1
 800f126:	623b      	str	r3, [r7, #32]
 800f128:	6a3b      	ldr	r3, [r7, #32]
 800f12a:	2b02      	cmp	r3, #2
 800f12c:	ddf3      	ble.n	800f116 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f12e:	4b06      	ldr	r3, [pc, #24]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	4a05      	ldr	r2, [pc, #20]	; (800f148 <_LCD_Write_Frame+0x15c>)
 800f134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f138:	6153      	str	r3, [r2, #20]
 800f13a:	46ad      	mov	sp, r5

}
 800f13c:	bf00      	nop
 800f13e:	3738      	adds	r7, #56	; 0x38
 800f140:	46bd      	mov	sp, r7
 800f142:	bdb0      	pop	{r4, r5, r7, pc}
 800f144:	20000cb8 	.word	0x20000cb8
 800f148:	48000400 	.word	0x48000400

0800f14c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f156:	4b15      	ldr	r3, [pc, #84]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f158:	695b      	ldr	r3, [r3, #20]
 800f15a:	4a14      	ldr	r2, [pc, #80]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f15c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f160:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f162:	4b12      	ldr	r3, [pc, #72]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f164:	695b      	ldr	r3, [r3, #20]
 800f166:	4a11      	ldr	r2, [pc, #68]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f16c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	2200      	movs	r2, #0
 800f172:	2100      	movs	r1, #0
 800f174:	4618      	mov	r0, r3
 800f176:	f000 f84d 	bl	800f214 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f17a:	2300      	movs	r3, #0
 800f17c:	60fb      	str	r3, [r7, #12]
 800f17e:	e008      	b.n	800f192 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f180:	4b0a      	ldr	r3, [pc, #40]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	4a09      	ldr	r2, [pc, #36]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f18a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	3301      	adds	r3, #1
 800f190:	60fb      	str	r3, [r7, #12]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2b02      	cmp	r3, #2
 800f196:	ddf3      	ble.n	800f180 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f198:	4b04      	ldr	r3, [pc, #16]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f19a:	695b      	ldr	r3, [r3, #20]
 800f19c:	4a03      	ldr	r2, [pc, #12]	; (800f1ac <_LCD_SendCommand+0x60>)
 800f19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1a2:	6153      	str	r3, [r2, #20]
}
 800f1a4:	bf00      	nop
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	48000400 	.word	0x48000400

0800f1b0 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f1ba:	4b15      	ldr	r3, [pc, #84]	; (800f210 <_LCD_SendData+0x60>)
 800f1bc:	695b      	ldr	r3, [r3, #20]
 800f1be:	4a14      	ldr	r2, [pc, #80]	; (800f210 <_LCD_SendData+0x60>)
 800f1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f1c6:	4b12      	ldr	r3, [pc, #72]	; (800f210 <_LCD_SendData+0x60>)
 800f1c8:	695b      	ldr	r3, [r3, #20]
 800f1ca:	4a11      	ldr	r2, [pc, #68]	; (800f210 <_LCD_SendData+0x60>)
 800f1cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1d0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f000 f81b 	bl	800f214 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f1de:	2300      	movs	r3, #0
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	e008      	b.n	800f1f6 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f1e4:	4b0a      	ldr	r3, [pc, #40]	; (800f210 <_LCD_SendData+0x60>)
 800f1e6:	695b      	ldr	r3, [r3, #20]
 800f1e8:	4a09      	ldr	r2, [pc, #36]	; (800f210 <_LCD_SendData+0x60>)
 800f1ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1ee:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	60fb      	str	r3, [r7, #12]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2b02      	cmp	r3, #2
 800f1fa:	ddf3      	ble.n	800f1e4 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f1fc:	4b04      	ldr	r3, [pc, #16]	; (800f210 <_LCD_SendData+0x60>)
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	4a03      	ldr	r2, [pc, #12]	; (800f210 <_LCD_SendData+0x60>)
 800f202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f206:	6153      	str	r3, [r2, #20]
}
 800f208:	bf00      	nop
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	48000400 	.word	0x48000400

0800f214 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f214:	b480      	push	{r7}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	71fb      	strb	r3, [r7, #7]
 800f21e:	460b      	mov	r3, r1
 800f220:	71bb      	strb	r3, [r7, #6]
 800f222:	4613      	mov	r3, r2
 800f224:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f226:	2300      	movs	r3, #0
 800f228:	60fb      	str	r3, [r7, #12]
 800f22a:	e003      	b.n	800f234 <_SPI_SendByte+0x20>
   		asm("nop");
 800f22c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	3301      	adds	r3, #1
 800f232:	60fb      	str	r3, [r7, #12]
 800f234:	79bb      	ldrb	r3, [r7, #6]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	429a      	cmp	r2, r3
 800f23a:	dbf7      	blt.n	800f22c <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f23c:	4b0c      	ldr	r3, [pc, #48]	; (800f270 <_SPI_SendByte+0x5c>)
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	f003 0302 	and.w	r3, r3, #2
 800f244:	2b02      	cmp	r3, #2
 800f246:	d102      	bne.n	800f24e <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800f248:	4a0a      	ldr	r2, [pc, #40]	; (800f274 <_SPI_SendByte+0x60>)
 800f24a:	79fb      	ldrb	r3, [r7, #7]
 800f24c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f24e:	2300      	movs	r3, #0
 800f250:	60bb      	str	r3, [r7, #8]
 800f252:	e003      	b.n	800f25c <_SPI_SendByte+0x48>
   		asm("nop");
 800f254:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	3301      	adds	r3, #1
 800f25a:	60bb      	str	r3, [r7, #8]
 800f25c:	797b      	ldrb	r3, [r7, #5]
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	429a      	cmp	r2, r3
 800f262:	dbf7      	blt.n	800f254 <_SPI_SendByte+0x40>

#endif

}
 800f264:	bf00      	nop
 800f266:	3714      	adds	r7, #20
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr
 800f270:	40003c00 	.word	0x40003c00
 800f274:	40003c0c 	.word	0x40003c0c

0800f278 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f278:	b480      	push	{r7}
 800f27a:	b089      	sub	sp, #36	; 0x24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	4611      	mov	r1, r2
 800f284:	461a      	mov	r2, r3
 800f286:	460b      	mov	r3, r1
 800f288:	71fb      	strb	r3, [r7, #7]
 800f28a:	4613      	mov	r3, r2
 800f28c:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f28e:	2300      	movs	r3, #0
 800f290:	61fb      	str	r3, [r7, #28]
 800f292:	e003      	b.n	800f29c <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800f294:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	3301      	adds	r3, #1
 800f29a:	61fb      	str	r3, [r7, #28]
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	69fa      	ldr	r2, [r7, #28]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	dbf7      	blt.n	800f294 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800f2a8:	e01d      	b.n	800f2e6 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f2aa:	4b1c      	ldr	r3, [pc, #112]	; (800f31c <_SPI_SendByteMultiByte+0xa4>)
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	f003 0302 	and.w	r3, r3, #2
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d117      	bne.n	800f2e6 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d90a      	bls.n	800f2d2 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	881a      	ldrh	r2, [r3, #0]
 800f2c0:	4b16      	ldr	r3, [pc, #88]	; (800f31c <_SPI_SendByteMultiByte+0xa4>)
 800f2c2:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	3302      	adds	r3, #2
 800f2c8:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	3b02      	subs	r3, #2
 800f2ce:	60bb      	str	r3, [r7, #8]
 800f2d0:	e009      	b.n	800f2e6 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800f2d2:	4a13      	ldr	r2, [pc, #76]	; (800f320 <_SPI_SendByteMultiByte+0xa8>)
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	3b01      	subs	r3, #1
 800f2e4:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1de      	bne.n	800f2aa <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800f2ec:	4b0b      	ldr	r3, [pc, #44]	; (800f31c <_SPI_SendByteMultiByte+0xa4>)
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	4a0a      	ldr	r2, [pc, #40]	; (800f31c <_SPI_SendByteMultiByte+0xa4>)
 800f2f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2f6:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	617b      	str	r3, [r7, #20]
 800f2fc:	e003      	b.n	800f306 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800f2fe:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	3301      	adds	r3, #1
 800f304:	617b      	str	r3, [r7, #20]
 800f306:	79bb      	ldrb	r3, [r7, #6]
 800f308:	697a      	ldr	r2, [r7, #20]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	dbf7      	blt.n	800f2fe <_SPI_SendByteMultiByte+0x86>

#endif

}
 800f30e:	bf00      	nop
 800f310:	3724      	adds	r7, #36	; 0x24
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	40003c00 	.word	0x40003c00
 800f320:	40003c0c 	.word	0x40003c0c

0800f324 <__errno>:
 800f324:	4b01      	ldr	r3, [pc, #4]	; (800f32c <__errno+0x8>)
 800f326:	6818      	ldr	r0, [r3, #0]
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	20001cac 	.word	0x20001cac

0800f330 <__libc_init_array>:
 800f330:	b570      	push	{r4, r5, r6, lr}
 800f332:	4e0d      	ldr	r6, [pc, #52]	; (800f368 <__libc_init_array+0x38>)
 800f334:	4c0d      	ldr	r4, [pc, #52]	; (800f36c <__libc_init_array+0x3c>)
 800f336:	1ba4      	subs	r4, r4, r6
 800f338:	10a4      	asrs	r4, r4, #2
 800f33a:	2500      	movs	r5, #0
 800f33c:	42a5      	cmp	r5, r4
 800f33e:	d109      	bne.n	800f354 <__libc_init_array+0x24>
 800f340:	4e0b      	ldr	r6, [pc, #44]	; (800f370 <__libc_init_array+0x40>)
 800f342:	4c0c      	ldr	r4, [pc, #48]	; (800f374 <__libc_init_array+0x44>)
 800f344:	f003 ff46 	bl	80131d4 <_init>
 800f348:	1ba4      	subs	r4, r4, r6
 800f34a:	10a4      	asrs	r4, r4, #2
 800f34c:	2500      	movs	r5, #0
 800f34e:	42a5      	cmp	r5, r4
 800f350:	d105      	bne.n	800f35e <__libc_init_array+0x2e>
 800f352:	bd70      	pop	{r4, r5, r6, pc}
 800f354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f358:	4798      	blx	r3
 800f35a:	3501      	adds	r5, #1
 800f35c:	e7ee      	b.n	800f33c <__libc_init_array+0xc>
 800f35e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f362:	4798      	blx	r3
 800f364:	3501      	adds	r5, #1
 800f366:	e7f2      	b.n	800f34e <__libc_init_array+0x1e>
 800f368:	080146a8 	.word	0x080146a8
 800f36c:	080146a8 	.word	0x080146a8
 800f370:	080146a8 	.word	0x080146a8
 800f374:	080146ac 	.word	0x080146ac

0800f378 <memset>:
 800f378:	4402      	add	r2, r0
 800f37a:	4603      	mov	r3, r0
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d100      	bne.n	800f382 <memset+0xa>
 800f380:	4770      	bx	lr
 800f382:	f803 1b01 	strb.w	r1, [r3], #1
 800f386:	e7f9      	b.n	800f37c <memset+0x4>

0800f388 <__cvt>:
 800f388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f38c:	ec55 4b10 	vmov	r4, r5, d0
 800f390:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f392:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f396:	2d00      	cmp	r5, #0
 800f398:	460e      	mov	r6, r1
 800f39a:	4691      	mov	r9, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	bfb8      	it	lt
 800f3a0:	4622      	movlt	r2, r4
 800f3a2:	462b      	mov	r3, r5
 800f3a4:	f027 0720 	bic.w	r7, r7, #32
 800f3a8:	bfbb      	ittet	lt
 800f3aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3ae:	461d      	movlt	r5, r3
 800f3b0:	2300      	movge	r3, #0
 800f3b2:	232d      	movlt	r3, #45	; 0x2d
 800f3b4:	bfb8      	it	lt
 800f3b6:	4614      	movlt	r4, r2
 800f3b8:	2f46      	cmp	r7, #70	; 0x46
 800f3ba:	700b      	strb	r3, [r1, #0]
 800f3bc:	d004      	beq.n	800f3c8 <__cvt+0x40>
 800f3be:	2f45      	cmp	r7, #69	; 0x45
 800f3c0:	d100      	bne.n	800f3c4 <__cvt+0x3c>
 800f3c2:	3601      	adds	r6, #1
 800f3c4:	2102      	movs	r1, #2
 800f3c6:	e000      	b.n	800f3ca <__cvt+0x42>
 800f3c8:	2103      	movs	r1, #3
 800f3ca:	ab03      	add	r3, sp, #12
 800f3cc:	9301      	str	r3, [sp, #4]
 800f3ce:	ab02      	add	r3, sp, #8
 800f3d0:	9300      	str	r3, [sp, #0]
 800f3d2:	4632      	mov	r2, r6
 800f3d4:	4653      	mov	r3, sl
 800f3d6:	ec45 4b10 	vmov	d0, r4, r5
 800f3da:	f000 fe25 	bl	8010028 <_dtoa_r>
 800f3de:	2f47      	cmp	r7, #71	; 0x47
 800f3e0:	4680      	mov	r8, r0
 800f3e2:	d102      	bne.n	800f3ea <__cvt+0x62>
 800f3e4:	f019 0f01 	tst.w	r9, #1
 800f3e8:	d026      	beq.n	800f438 <__cvt+0xb0>
 800f3ea:	2f46      	cmp	r7, #70	; 0x46
 800f3ec:	eb08 0906 	add.w	r9, r8, r6
 800f3f0:	d111      	bne.n	800f416 <__cvt+0x8e>
 800f3f2:	f898 3000 	ldrb.w	r3, [r8]
 800f3f6:	2b30      	cmp	r3, #48	; 0x30
 800f3f8:	d10a      	bne.n	800f410 <__cvt+0x88>
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	4620      	mov	r0, r4
 800f400:	4629      	mov	r1, r5
 800f402:	f7f1 fb89 	bl	8000b18 <__aeabi_dcmpeq>
 800f406:	b918      	cbnz	r0, 800f410 <__cvt+0x88>
 800f408:	f1c6 0601 	rsb	r6, r6, #1
 800f40c:	f8ca 6000 	str.w	r6, [sl]
 800f410:	f8da 3000 	ldr.w	r3, [sl]
 800f414:	4499      	add	r9, r3
 800f416:	2200      	movs	r2, #0
 800f418:	2300      	movs	r3, #0
 800f41a:	4620      	mov	r0, r4
 800f41c:	4629      	mov	r1, r5
 800f41e:	f7f1 fb7b 	bl	8000b18 <__aeabi_dcmpeq>
 800f422:	b938      	cbnz	r0, 800f434 <__cvt+0xac>
 800f424:	2230      	movs	r2, #48	; 0x30
 800f426:	9b03      	ldr	r3, [sp, #12]
 800f428:	454b      	cmp	r3, r9
 800f42a:	d205      	bcs.n	800f438 <__cvt+0xb0>
 800f42c:	1c59      	adds	r1, r3, #1
 800f42e:	9103      	str	r1, [sp, #12]
 800f430:	701a      	strb	r2, [r3, #0]
 800f432:	e7f8      	b.n	800f426 <__cvt+0x9e>
 800f434:	f8cd 900c 	str.w	r9, [sp, #12]
 800f438:	9b03      	ldr	r3, [sp, #12]
 800f43a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f43c:	eba3 0308 	sub.w	r3, r3, r8
 800f440:	4640      	mov	r0, r8
 800f442:	6013      	str	r3, [r2, #0]
 800f444:	b004      	add	sp, #16
 800f446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f44a <__exponent>:
 800f44a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f44c:	2900      	cmp	r1, #0
 800f44e:	4604      	mov	r4, r0
 800f450:	bfba      	itte	lt
 800f452:	4249      	neglt	r1, r1
 800f454:	232d      	movlt	r3, #45	; 0x2d
 800f456:	232b      	movge	r3, #43	; 0x2b
 800f458:	2909      	cmp	r1, #9
 800f45a:	f804 2b02 	strb.w	r2, [r4], #2
 800f45e:	7043      	strb	r3, [r0, #1]
 800f460:	dd20      	ble.n	800f4a4 <__exponent+0x5a>
 800f462:	f10d 0307 	add.w	r3, sp, #7
 800f466:	461f      	mov	r7, r3
 800f468:	260a      	movs	r6, #10
 800f46a:	fb91 f5f6 	sdiv	r5, r1, r6
 800f46e:	fb06 1115 	mls	r1, r6, r5, r1
 800f472:	3130      	adds	r1, #48	; 0x30
 800f474:	2d09      	cmp	r5, #9
 800f476:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f47a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800f47e:	4629      	mov	r1, r5
 800f480:	dc09      	bgt.n	800f496 <__exponent+0x4c>
 800f482:	3130      	adds	r1, #48	; 0x30
 800f484:	3b02      	subs	r3, #2
 800f486:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f48a:	42bb      	cmp	r3, r7
 800f48c:	4622      	mov	r2, r4
 800f48e:	d304      	bcc.n	800f49a <__exponent+0x50>
 800f490:	1a10      	subs	r0, r2, r0
 800f492:	b003      	add	sp, #12
 800f494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f496:	4613      	mov	r3, r2
 800f498:	e7e7      	b.n	800f46a <__exponent+0x20>
 800f49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f49e:	f804 2b01 	strb.w	r2, [r4], #1
 800f4a2:	e7f2      	b.n	800f48a <__exponent+0x40>
 800f4a4:	2330      	movs	r3, #48	; 0x30
 800f4a6:	4419      	add	r1, r3
 800f4a8:	7083      	strb	r3, [r0, #2]
 800f4aa:	1d02      	adds	r2, r0, #4
 800f4ac:	70c1      	strb	r1, [r0, #3]
 800f4ae:	e7ef      	b.n	800f490 <__exponent+0x46>

0800f4b0 <_printf_float>:
 800f4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b4:	b08d      	sub	sp, #52	; 0x34
 800f4b6:	460c      	mov	r4, r1
 800f4b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f4bc:	4616      	mov	r6, r2
 800f4be:	461f      	mov	r7, r3
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	f001 fce3 	bl	8010e8c <_localeconv_r>
 800f4c6:	6803      	ldr	r3, [r0, #0]
 800f4c8:	9304      	str	r3, [sp, #16]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7f0 fea8 	bl	8000220 <strlen>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800f4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d8:	9005      	str	r0, [sp, #20]
 800f4da:	3307      	adds	r3, #7
 800f4dc:	f023 0307 	bic.w	r3, r3, #7
 800f4e0:	f103 0208 	add.w	r2, r3, #8
 800f4e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f4e8:	f8d4 b000 	ldr.w	fp, [r4]
 800f4ec:	f8c8 2000 	str.w	r2, [r8]
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f4f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f4fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f500:	9307      	str	r3, [sp, #28]
 800f502:	f8cd 8018 	str.w	r8, [sp, #24]
 800f506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f50a:	4ba7      	ldr	r3, [pc, #668]	; (800f7a8 <_printf_float+0x2f8>)
 800f50c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f510:	f7f1 fb34 	bl	8000b7c <__aeabi_dcmpun>
 800f514:	bb70      	cbnz	r0, 800f574 <_printf_float+0xc4>
 800f516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f51a:	4ba3      	ldr	r3, [pc, #652]	; (800f7a8 <_printf_float+0x2f8>)
 800f51c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f520:	f7f1 fb0e 	bl	8000b40 <__aeabi_dcmple>
 800f524:	bb30      	cbnz	r0, 800f574 <_printf_float+0xc4>
 800f526:	2200      	movs	r2, #0
 800f528:	2300      	movs	r3, #0
 800f52a:	4640      	mov	r0, r8
 800f52c:	4649      	mov	r1, r9
 800f52e:	f7f1 fafd 	bl	8000b2c <__aeabi_dcmplt>
 800f532:	b110      	cbz	r0, 800f53a <_printf_float+0x8a>
 800f534:	232d      	movs	r3, #45	; 0x2d
 800f536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f53a:	4a9c      	ldr	r2, [pc, #624]	; (800f7ac <_printf_float+0x2fc>)
 800f53c:	4b9c      	ldr	r3, [pc, #624]	; (800f7b0 <_printf_float+0x300>)
 800f53e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f542:	bf8c      	ite	hi
 800f544:	4690      	movhi	r8, r2
 800f546:	4698      	movls	r8, r3
 800f548:	2303      	movs	r3, #3
 800f54a:	f02b 0204 	bic.w	r2, fp, #4
 800f54e:	6123      	str	r3, [r4, #16]
 800f550:	6022      	str	r2, [r4, #0]
 800f552:	f04f 0900 	mov.w	r9, #0
 800f556:	9700      	str	r7, [sp, #0]
 800f558:	4633      	mov	r3, r6
 800f55a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f55c:	4621      	mov	r1, r4
 800f55e:	4628      	mov	r0, r5
 800f560:	f000 f9e6 	bl	800f930 <_printf_common>
 800f564:	3001      	adds	r0, #1
 800f566:	f040 808d 	bne.w	800f684 <_printf_float+0x1d4>
 800f56a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f56e:	b00d      	add	sp, #52	; 0x34
 800f570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f574:	4642      	mov	r2, r8
 800f576:	464b      	mov	r3, r9
 800f578:	4640      	mov	r0, r8
 800f57a:	4649      	mov	r1, r9
 800f57c:	f7f1 fafe 	bl	8000b7c <__aeabi_dcmpun>
 800f580:	b110      	cbz	r0, 800f588 <_printf_float+0xd8>
 800f582:	4a8c      	ldr	r2, [pc, #560]	; (800f7b4 <_printf_float+0x304>)
 800f584:	4b8c      	ldr	r3, [pc, #560]	; (800f7b8 <_printf_float+0x308>)
 800f586:	e7da      	b.n	800f53e <_printf_float+0x8e>
 800f588:	6861      	ldr	r1, [r4, #4]
 800f58a:	1c4b      	adds	r3, r1, #1
 800f58c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f590:	a80a      	add	r0, sp, #40	; 0x28
 800f592:	d13e      	bne.n	800f612 <_printf_float+0x162>
 800f594:	2306      	movs	r3, #6
 800f596:	6063      	str	r3, [r4, #4]
 800f598:	2300      	movs	r3, #0
 800f59a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f59e:	ab09      	add	r3, sp, #36	; 0x24
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	ec49 8b10 	vmov	d0, r8, r9
 800f5a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f5aa:	6022      	str	r2, [r4, #0]
 800f5ac:	f8cd a004 	str.w	sl, [sp, #4]
 800f5b0:	6861      	ldr	r1, [r4, #4]
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f7ff fee8 	bl	800f388 <__cvt>
 800f5b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f5bc:	2b47      	cmp	r3, #71	; 0x47
 800f5be:	4680      	mov	r8, r0
 800f5c0:	d109      	bne.n	800f5d6 <_printf_float+0x126>
 800f5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5c4:	1cd8      	adds	r0, r3, #3
 800f5c6:	db02      	blt.n	800f5ce <_printf_float+0x11e>
 800f5c8:	6862      	ldr	r2, [r4, #4]
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	dd47      	ble.n	800f65e <_printf_float+0x1ae>
 800f5ce:	f1aa 0a02 	sub.w	sl, sl, #2
 800f5d2:	fa5f fa8a 	uxtb.w	sl, sl
 800f5d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f5da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5dc:	d824      	bhi.n	800f628 <_printf_float+0x178>
 800f5de:	3901      	subs	r1, #1
 800f5e0:	4652      	mov	r2, sl
 800f5e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f5e6:	9109      	str	r1, [sp, #36]	; 0x24
 800f5e8:	f7ff ff2f 	bl	800f44a <__exponent>
 800f5ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5ee:	1813      	adds	r3, r2, r0
 800f5f0:	2a01      	cmp	r2, #1
 800f5f2:	4681      	mov	r9, r0
 800f5f4:	6123      	str	r3, [r4, #16]
 800f5f6:	dc02      	bgt.n	800f5fe <_printf_float+0x14e>
 800f5f8:	6822      	ldr	r2, [r4, #0]
 800f5fa:	07d1      	lsls	r1, r2, #31
 800f5fc:	d501      	bpl.n	800f602 <_printf_float+0x152>
 800f5fe:	3301      	adds	r3, #1
 800f600:	6123      	str	r3, [r4, #16]
 800f602:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f606:	2b00      	cmp	r3, #0
 800f608:	d0a5      	beq.n	800f556 <_printf_float+0xa6>
 800f60a:	232d      	movs	r3, #45	; 0x2d
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	e7a1      	b.n	800f556 <_printf_float+0xa6>
 800f612:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f616:	f000 8177 	beq.w	800f908 <_printf_float+0x458>
 800f61a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f61e:	d1bb      	bne.n	800f598 <_printf_float+0xe8>
 800f620:	2900      	cmp	r1, #0
 800f622:	d1b9      	bne.n	800f598 <_printf_float+0xe8>
 800f624:	2301      	movs	r3, #1
 800f626:	e7b6      	b.n	800f596 <_printf_float+0xe6>
 800f628:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f62c:	d119      	bne.n	800f662 <_printf_float+0x1b2>
 800f62e:	2900      	cmp	r1, #0
 800f630:	6863      	ldr	r3, [r4, #4]
 800f632:	dd0c      	ble.n	800f64e <_printf_float+0x19e>
 800f634:	6121      	str	r1, [r4, #16]
 800f636:	b913      	cbnz	r3, 800f63e <_printf_float+0x18e>
 800f638:	6822      	ldr	r2, [r4, #0]
 800f63a:	07d2      	lsls	r2, r2, #31
 800f63c:	d502      	bpl.n	800f644 <_printf_float+0x194>
 800f63e:	3301      	adds	r3, #1
 800f640:	440b      	add	r3, r1
 800f642:	6123      	str	r3, [r4, #16]
 800f644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f646:	65a3      	str	r3, [r4, #88]	; 0x58
 800f648:	f04f 0900 	mov.w	r9, #0
 800f64c:	e7d9      	b.n	800f602 <_printf_float+0x152>
 800f64e:	b913      	cbnz	r3, 800f656 <_printf_float+0x1a6>
 800f650:	6822      	ldr	r2, [r4, #0]
 800f652:	07d0      	lsls	r0, r2, #31
 800f654:	d501      	bpl.n	800f65a <_printf_float+0x1aa>
 800f656:	3302      	adds	r3, #2
 800f658:	e7f3      	b.n	800f642 <_printf_float+0x192>
 800f65a:	2301      	movs	r3, #1
 800f65c:	e7f1      	b.n	800f642 <_printf_float+0x192>
 800f65e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f662:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f666:	4293      	cmp	r3, r2
 800f668:	db05      	blt.n	800f676 <_printf_float+0x1c6>
 800f66a:	6822      	ldr	r2, [r4, #0]
 800f66c:	6123      	str	r3, [r4, #16]
 800f66e:	07d1      	lsls	r1, r2, #31
 800f670:	d5e8      	bpl.n	800f644 <_printf_float+0x194>
 800f672:	3301      	adds	r3, #1
 800f674:	e7e5      	b.n	800f642 <_printf_float+0x192>
 800f676:	2b00      	cmp	r3, #0
 800f678:	bfd4      	ite	le
 800f67a:	f1c3 0302 	rsble	r3, r3, #2
 800f67e:	2301      	movgt	r3, #1
 800f680:	4413      	add	r3, r2
 800f682:	e7de      	b.n	800f642 <_printf_float+0x192>
 800f684:	6823      	ldr	r3, [r4, #0]
 800f686:	055a      	lsls	r2, r3, #21
 800f688:	d407      	bmi.n	800f69a <_printf_float+0x1ea>
 800f68a:	6923      	ldr	r3, [r4, #16]
 800f68c:	4642      	mov	r2, r8
 800f68e:	4631      	mov	r1, r6
 800f690:	4628      	mov	r0, r5
 800f692:	47b8      	blx	r7
 800f694:	3001      	adds	r0, #1
 800f696:	d12b      	bne.n	800f6f0 <_printf_float+0x240>
 800f698:	e767      	b.n	800f56a <_printf_float+0xba>
 800f69a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f69e:	f240 80dc 	bls.w	800f85a <_printf_float+0x3aa>
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6aa:	f7f1 fa35 	bl	8000b18 <__aeabi_dcmpeq>
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	d033      	beq.n	800f71a <_printf_float+0x26a>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	4a41      	ldr	r2, [pc, #260]	; (800f7bc <_printf_float+0x30c>)
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	47b8      	blx	r7
 800f6bc:	3001      	adds	r0, #1
 800f6be:	f43f af54 	beq.w	800f56a <_printf_float+0xba>
 800f6c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	db02      	blt.n	800f6d0 <_printf_float+0x220>
 800f6ca:	6823      	ldr	r3, [r4, #0]
 800f6cc:	07d8      	lsls	r0, r3, #31
 800f6ce:	d50f      	bpl.n	800f6f0 <_printf_float+0x240>
 800f6d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6d4:	4631      	mov	r1, r6
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	47b8      	blx	r7
 800f6da:	3001      	adds	r0, #1
 800f6dc:	f43f af45 	beq.w	800f56a <_printf_float+0xba>
 800f6e0:	f04f 0800 	mov.w	r8, #0
 800f6e4:	f104 091a 	add.w	r9, r4, #26
 800f6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	4543      	cmp	r3, r8
 800f6ee:	dc09      	bgt.n	800f704 <_printf_float+0x254>
 800f6f0:	6823      	ldr	r3, [r4, #0]
 800f6f2:	079b      	lsls	r3, r3, #30
 800f6f4:	f100 8103 	bmi.w	800f8fe <_printf_float+0x44e>
 800f6f8:	68e0      	ldr	r0, [r4, #12]
 800f6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6fc:	4298      	cmp	r0, r3
 800f6fe:	bfb8      	it	lt
 800f700:	4618      	movlt	r0, r3
 800f702:	e734      	b.n	800f56e <_printf_float+0xbe>
 800f704:	2301      	movs	r3, #1
 800f706:	464a      	mov	r2, r9
 800f708:	4631      	mov	r1, r6
 800f70a:	4628      	mov	r0, r5
 800f70c:	47b8      	blx	r7
 800f70e:	3001      	adds	r0, #1
 800f710:	f43f af2b 	beq.w	800f56a <_printf_float+0xba>
 800f714:	f108 0801 	add.w	r8, r8, #1
 800f718:	e7e6      	b.n	800f6e8 <_printf_float+0x238>
 800f71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	dc2b      	bgt.n	800f778 <_printf_float+0x2c8>
 800f720:	2301      	movs	r3, #1
 800f722:	4a26      	ldr	r2, [pc, #152]	; (800f7bc <_printf_float+0x30c>)
 800f724:	4631      	mov	r1, r6
 800f726:	4628      	mov	r0, r5
 800f728:	47b8      	blx	r7
 800f72a:	3001      	adds	r0, #1
 800f72c:	f43f af1d 	beq.w	800f56a <_printf_float+0xba>
 800f730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f732:	b923      	cbnz	r3, 800f73e <_printf_float+0x28e>
 800f734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f736:	b913      	cbnz	r3, 800f73e <_printf_float+0x28e>
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	07d9      	lsls	r1, r3, #31
 800f73c:	d5d8      	bpl.n	800f6f0 <_printf_float+0x240>
 800f73e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f742:	4631      	mov	r1, r6
 800f744:	4628      	mov	r0, r5
 800f746:	47b8      	blx	r7
 800f748:	3001      	adds	r0, #1
 800f74a:	f43f af0e 	beq.w	800f56a <_printf_float+0xba>
 800f74e:	f04f 0900 	mov.w	r9, #0
 800f752:	f104 0a1a 	add.w	sl, r4, #26
 800f756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f758:	425b      	negs	r3, r3
 800f75a:	454b      	cmp	r3, r9
 800f75c:	dc01      	bgt.n	800f762 <_printf_float+0x2b2>
 800f75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f760:	e794      	b.n	800f68c <_printf_float+0x1dc>
 800f762:	2301      	movs	r3, #1
 800f764:	4652      	mov	r2, sl
 800f766:	4631      	mov	r1, r6
 800f768:	4628      	mov	r0, r5
 800f76a:	47b8      	blx	r7
 800f76c:	3001      	adds	r0, #1
 800f76e:	f43f aefc 	beq.w	800f56a <_printf_float+0xba>
 800f772:	f109 0901 	add.w	r9, r9, #1
 800f776:	e7ee      	b.n	800f756 <_printf_float+0x2a6>
 800f778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f77a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f77c:	429a      	cmp	r2, r3
 800f77e:	bfa8      	it	ge
 800f780:	461a      	movge	r2, r3
 800f782:	2a00      	cmp	r2, #0
 800f784:	4691      	mov	r9, r2
 800f786:	dd07      	ble.n	800f798 <_printf_float+0x2e8>
 800f788:	4613      	mov	r3, r2
 800f78a:	4631      	mov	r1, r6
 800f78c:	4642      	mov	r2, r8
 800f78e:	4628      	mov	r0, r5
 800f790:	47b8      	blx	r7
 800f792:	3001      	adds	r0, #1
 800f794:	f43f aee9 	beq.w	800f56a <_printf_float+0xba>
 800f798:	f104 031a 	add.w	r3, r4, #26
 800f79c:	f04f 0b00 	mov.w	fp, #0
 800f7a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7a4:	9306      	str	r3, [sp, #24]
 800f7a6:	e015      	b.n	800f7d4 <_printf_float+0x324>
 800f7a8:	7fefffff 	.word	0x7fefffff
 800f7ac:	080143a4 	.word	0x080143a4
 800f7b0:	080143a0 	.word	0x080143a0
 800f7b4:	080143ac 	.word	0x080143ac
 800f7b8:	080143a8 	.word	0x080143a8
 800f7bc:	0801465c 	.word	0x0801465c
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	9a06      	ldr	r2, [sp, #24]
 800f7c4:	4631      	mov	r1, r6
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	47b8      	blx	r7
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	f43f aecd 	beq.w	800f56a <_printf_float+0xba>
 800f7d0:	f10b 0b01 	add.w	fp, fp, #1
 800f7d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f7d8:	ebaa 0309 	sub.w	r3, sl, r9
 800f7dc:	455b      	cmp	r3, fp
 800f7de:	dcef      	bgt.n	800f7c0 <_printf_float+0x310>
 800f7e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	44d0      	add	r8, sl
 800f7e8:	db15      	blt.n	800f816 <_printf_float+0x366>
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	07da      	lsls	r2, r3, #31
 800f7ee:	d412      	bmi.n	800f816 <_printf_float+0x366>
 800f7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7f4:	eba3 020a 	sub.w	r2, r3, sl
 800f7f8:	eba3 0a01 	sub.w	sl, r3, r1
 800f7fc:	4592      	cmp	sl, r2
 800f7fe:	bfa8      	it	ge
 800f800:	4692      	movge	sl, r2
 800f802:	f1ba 0f00 	cmp.w	sl, #0
 800f806:	dc0e      	bgt.n	800f826 <_printf_float+0x376>
 800f808:	f04f 0800 	mov.w	r8, #0
 800f80c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f810:	f104 091a 	add.w	r9, r4, #26
 800f814:	e019      	b.n	800f84a <_printf_float+0x39a>
 800f816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f81a:	4631      	mov	r1, r6
 800f81c:	4628      	mov	r0, r5
 800f81e:	47b8      	blx	r7
 800f820:	3001      	adds	r0, #1
 800f822:	d1e5      	bne.n	800f7f0 <_printf_float+0x340>
 800f824:	e6a1      	b.n	800f56a <_printf_float+0xba>
 800f826:	4653      	mov	r3, sl
 800f828:	4642      	mov	r2, r8
 800f82a:	4631      	mov	r1, r6
 800f82c:	4628      	mov	r0, r5
 800f82e:	47b8      	blx	r7
 800f830:	3001      	adds	r0, #1
 800f832:	d1e9      	bne.n	800f808 <_printf_float+0x358>
 800f834:	e699      	b.n	800f56a <_printf_float+0xba>
 800f836:	2301      	movs	r3, #1
 800f838:	464a      	mov	r2, r9
 800f83a:	4631      	mov	r1, r6
 800f83c:	4628      	mov	r0, r5
 800f83e:	47b8      	blx	r7
 800f840:	3001      	adds	r0, #1
 800f842:	f43f ae92 	beq.w	800f56a <_printf_float+0xba>
 800f846:	f108 0801 	add.w	r8, r8, #1
 800f84a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f84e:	1a9b      	subs	r3, r3, r2
 800f850:	eba3 030a 	sub.w	r3, r3, sl
 800f854:	4543      	cmp	r3, r8
 800f856:	dcee      	bgt.n	800f836 <_printf_float+0x386>
 800f858:	e74a      	b.n	800f6f0 <_printf_float+0x240>
 800f85a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f85c:	2a01      	cmp	r2, #1
 800f85e:	dc01      	bgt.n	800f864 <_printf_float+0x3b4>
 800f860:	07db      	lsls	r3, r3, #31
 800f862:	d53a      	bpl.n	800f8da <_printf_float+0x42a>
 800f864:	2301      	movs	r3, #1
 800f866:	4642      	mov	r2, r8
 800f868:	4631      	mov	r1, r6
 800f86a:	4628      	mov	r0, r5
 800f86c:	47b8      	blx	r7
 800f86e:	3001      	adds	r0, #1
 800f870:	f43f ae7b 	beq.w	800f56a <_printf_float+0xba>
 800f874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f878:	4631      	mov	r1, r6
 800f87a:	4628      	mov	r0, r5
 800f87c:	47b8      	blx	r7
 800f87e:	3001      	adds	r0, #1
 800f880:	f108 0801 	add.w	r8, r8, #1
 800f884:	f43f ae71 	beq.w	800f56a <_printf_float+0xba>
 800f888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f88a:	2200      	movs	r2, #0
 800f88c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f894:	2300      	movs	r3, #0
 800f896:	f7f1 f93f 	bl	8000b18 <__aeabi_dcmpeq>
 800f89a:	b9c8      	cbnz	r0, 800f8d0 <_printf_float+0x420>
 800f89c:	4653      	mov	r3, sl
 800f89e:	4642      	mov	r2, r8
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b8      	blx	r7
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	d10e      	bne.n	800f8c8 <_printf_float+0x418>
 800f8aa:	e65e      	b.n	800f56a <_printf_float+0xba>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	4652      	mov	r2, sl
 800f8b0:	4631      	mov	r1, r6
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	47b8      	blx	r7
 800f8b6:	3001      	adds	r0, #1
 800f8b8:	f43f ae57 	beq.w	800f56a <_printf_float+0xba>
 800f8bc:	f108 0801 	add.w	r8, r8, #1
 800f8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8c2:	3b01      	subs	r3, #1
 800f8c4:	4543      	cmp	r3, r8
 800f8c6:	dcf1      	bgt.n	800f8ac <_printf_float+0x3fc>
 800f8c8:	464b      	mov	r3, r9
 800f8ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f8ce:	e6de      	b.n	800f68e <_printf_float+0x1de>
 800f8d0:	f04f 0800 	mov.w	r8, #0
 800f8d4:	f104 0a1a 	add.w	sl, r4, #26
 800f8d8:	e7f2      	b.n	800f8c0 <_printf_float+0x410>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e7df      	b.n	800f89e <_printf_float+0x3ee>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	464a      	mov	r2, r9
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b8      	blx	r7
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	f43f ae3e 	beq.w	800f56a <_printf_float+0xba>
 800f8ee:	f108 0801 	add.w	r8, r8, #1
 800f8f2:	68e3      	ldr	r3, [r4, #12]
 800f8f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	4543      	cmp	r3, r8
 800f8fa:	dcf0      	bgt.n	800f8de <_printf_float+0x42e>
 800f8fc:	e6fc      	b.n	800f6f8 <_printf_float+0x248>
 800f8fe:	f04f 0800 	mov.w	r8, #0
 800f902:	f104 0919 	add.w	r9, r4, #25
 800f906:	e7f4      	b.n	800f8f2 <_printf_float+0x442>
 800f908:	2900      	cmp	r1, #0
 800f90a:	f43f ae8b 	beq.w	800f624 <_printf_float+0x174>
 800f90e:	2300      	movs	r3, #0
 800f910:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f914:	ab09      	add	r3, sp, #36	; 0x24
 800f916:	9300      	str	r3, [sp, #0]
 800f918:	ec49 8b10 	vmov	d0, r8, r9
 800f91c:	6022      	str	r2, [r4, #0]
 800f91e:	f8cd a004 	str.w	sl, [sp, #4]
 800f922:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f926:	4628      	mov	r0, r5
 800f928:	f7ff fd2e 	bl	800f388 <__cvt>
 800f92c:	4680      	mov	r8, r0
 800f92e:	e648      	b.n	800f5c2 <_printf_float+0x112>

0800f930 <_printf_common>:
 800f930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f934:	4691      	mov	r9, r2
 800f936:	461f      	mov	r7, r3
 800f938:	688a      	ldr	r2, [r1, #8]
 800f93a:	690b      	ldr	r3, [r1, #16]
 800f93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f940:	4293      	cmp	r3, r2
 800f942:	bfb8      	it	lt
 800f944:	4613      	movlt	r3, r2
 800f946:	f8c9 3000 	str.w	r3, [r9]
 800f94a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f94e:	4606      	mov	r6, r0
 800f950:	460c      	mov	r4, r1
 800f952:	b112      	cbz	r2, 800f95a <_printf_common+0x2a>
 800f954:	3301      	adds	r3, #1
 800f956:	f8c9 3000 	str.w	r3, [r9]
 800f95a:	6823      	ldr	r3, [r4, #0]
 800f95c:	0699      	lsls	r1, r3, #26
 800f95e:	bf42      	ittt	mi
 800f960:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f964:	3302      	addmi	r3, #2
 800f966:	f8c9 3000 	strmi.w	r3, [r9]
 800f96a:	6825      	ldr	r5, [r4, #0]
 800f96c:	f015 0506 	ands.w	r5, r5, #6
 800f970:	d107      	bne.n	800f982 <_printf_common+0x52>
 800f972:	f104 0a19 	add.w	sl, r4, #25
 800f976:	68e3      	ldr	r3, [r4, #12]
 800f978:	f8d9 2000 	ldr.w	r2, [r9]
 800f97c:	1a9b      	subs	r3, r3, r2
 800f97e:	42ab      	cmp	r3, r5
 800f980:	dc28      	bgt.n	800f9d4 <_printf_common+0xa4>
 800f982:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f986:	6822      	ldr	r2, [r4, #0]
 800f988:	3300      	adds	r3, #0
 800f98a:	bf18      	it	ne
 800f98c:	2301      	movne	r3, #1
 800f98e:	0692      	lsls	r2, r2, #26
 800f990:	d42d      	bmi.n	800f9ee <_printf_common+0xbe>
 800f992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f996:	4639      	mov	r1, r7
 800f998:	4630      	mov	r0, r6
 800f99a:	47c0      	blx	r8
 800f99c:	3001      	adds	r0, #1
 800f99e:	d020      	beq.n	800f9e2 <_printf_common+0xb2>
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	68e5      	ldr	r5, [r4, #12]
 800f9a4:	f8d9 2000 	ldr.w	r2, [r9]
 800f9a8:	f003 0306 	and.w	r3, r3, #6
 800f9ac:	2b04      	cmp	r3, #4
 800f9ae:	bf08      	it	eq
 800f9b0:	1aad      	subeq	r5, r5, r2
 800f9b2:	68a3      	ldr	r3, [r4, #8]
 800f9b4:	6922      	ldr	r2, [r4, #16]
 800f9b6:	bf0c      	ite	eq
 800f9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9bc:	2500      	movne	r5, #0
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	bfc4      	itt	gt
 800f9c2:	1a9b      	subgt	r3, r3, r2
 800f9c4:	18ed      	addgt	r5, r5, r3
 800f9c6:	f04f 0900 	mov.w	r9, #0
 800f9ca:	341a      	adds	r4, #26
 800f9cc:	454d      	cmp	r5, r9
 800f9ce:	d11a      	bne.n	800fa06 <_printf_common+0xd6>
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	e008      	b.n	800f9e6 <_printf_common+0xb6>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	4652      	mov	r2, sl
 800f9d8:	4639      	mov	r1, r7
 800f9da:	4630      	mov	r0, r6
 800f9dc:	47c0      	blx	r8
 800f9de:	3001      	adds	r0, #1
 800f9e0:	d103      	bne.n	800f9ea <_printf_common+0xba>
 800f9e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ea:	3501      	adds	r5, #1
 800f9ec:	e7c3      	b.n	800f976 <_printf_common+0x46>
 800f9ee:	18e1      	adds	r1, r4, r3
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	2030      	movs	r0, #48	; 0x30
 800f9f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9f8:	4422      	add	r2, r4
 800f9fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa02:	3302      	adds	r3, #2
 800fa04:	e7c5      	b.n	800f992 <_printf_common+0x62>
 800fa06:	2301      	movs	r3, #1
 800fa08:	4622      	mov	r2, r4
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	47c0      	blx	r8
 800fa10:	3001      	adds	r0, #1
 800fa12:	d0e6      	beq.n	800f9e2 <_printf_common+0xb2>
 800fa14:	f109 0901 	add.w	r9, r9, #1
 800fa18:	e7d8      	b.n	800f9cc <_printf_common+0x9c>
	...

0800fa1c <_printf_i>:
 800fa1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fa24:	460c      	mov	r4, r1
 800fa26:	7e09      	ldrb	r1, [r1, #24]
 800fa28:	b085      	sub	sp, #20
 800fa2a:	296e      	cmp	r1, #110	; 0x6e
 800fa2c:	4617      	mov	r7, r2
 800fa2e:	4606      	mov	r6, r0
 800fa30:	4698      	mov	r8, r3
 800fa32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa34:	f000 80b3 	beq.w	800fb9e <_printf_i+0x182>
 800fa38:	d822      	bhi.n	800fa80 <_printf_i+0x64>
 800fa3a:	2963      	cmp	r1, #99	; 0x63
 800fa3c:	d036      	beq.n	800faac <_printf_i+0x90>
 800fa3e:	d80a      	bhi.n	800fa56 <_printf_i+0x3a>
 800fa40:	2900      	cmp	r1, #0
 800fa42:	f000 80b9 	beq.w	800fbb8 <_printf_i+0x19c>
 800fa46:	2958      	cmp	r1, #88	; 0x58
 800fa48:	f000 8083 	beq.w	800fb52 <_printf_i+0x136>
 800fa4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fa54:	e032      	b.n	800fabc <_printf_i+0xa0>
 800fa56:	2964      	cmp	r1, #100	; 0x64
 800fa58:	d001      	beq.n	800fa5e <_printf_i+0x42>
 800fa5a:	2969      	cmp	r1, #105	; 0x69
 800fa5c:	d1f6      	bne.n	800fa4c <_printf_i+0x30>
 800fa5e:	6820      	ldr	r0, [r4, #0]
 800fa60:	6813      	ldr	r3, [r2, #0]
 800fa62:	0605      	lsls	r5, r0, #24
 800fa64:	f103 0104 	add.w	r1, r3, #4
 800fa68:	d52a      	bpl.n	800fac0 <_printf_i+0xa4>
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	6011      	str	r1, [r2, #0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	da03      	bge.n	800fa7a <_printf_i+0x5e>
 800fa72:	222d      	movs	r2, #45	; 0x2d
 800fa74:	425b      	negs	r3, r3
 800fa76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fa7a:	486f      	ldr	r0, [pc, #444]	; (800fc38 <_printf_i+0x21c>)
 800fa7c:	220a      	movs	r2, #10
 800fa7e:	e039      	b.n	800faf4 <_printf_i+0xd8>
 800fa80:	2973      	cmp	r1, #115	; 0x73
 800fa82:	f000 809d 	beq.w	800fbc0 <_printf_i+0x1a4>
 800fa86:	d808      	bhi.n	800fa9a <_printf_i+0x7e>
 800fa88:	296f      	cmp	r1, #111	; 0x6f
 800fa8a:	d020      	beq.n	800face <_printf_i+0xb2>
 800fa8c:	2970      	cmp	r1, #112	; 0x70
 800fa8e:	d1dd      	bne.n	800fa4c <_printf_i+0x30>
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	f043 0320 	orr.w	r3, r3, #32
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	e003      	b.n	800faa2 <_printf_i+0x86>
 800fa9a:	2975      	cmp	r1, #117	; 0x75
 800fa9c:	d017      	beq.n	800face <_printf_i+0xb2>
 800fa9e:	2978      	cmp	r1, #120	; 0x78
 800faa0:	d1d4      	bne.n	800fa4c <_printf_i+0x30>
 800faa2:	2378      	movs	r3, #120	; 0x78
 800faa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800faa8:	4864      	ldr	r0, [pc, #400]	; (800fc3c <_printf_i+0x220>)
 800faaa:	e055      	b.n	800fb58 <_printf_i+0x13c>
 800faac:	6813      	ldr	r3, [r2, #0]
 800faae:	1d19      	adds	r1, r3, #4
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6011      	str	r1, [r2, #0]
 800fab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fabc:	2301      	movs	r3, #1
 800fabe:	e08c      	b.n	800fbda <_printf_i+0x1be>
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	6011      	str	r1, [r2, #0]
 800fac4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fac8:	bf18      	it	ne
 800faca:	b21b      	sxthne	r3, r3
 800facc:	e7cf      	b.n	800fa6e <_printf_i+0x52>
 800face:	6813      	ldr	r3, [r2, #0]
 800fad0:	6825      	ldr	r5, [r4, #0]
 800fad2:	1d18      	adds	r0, r3, #4
 800fad4:	6010      	str	r0, [r2, #0]
 800fad6:	0628      	lsls	r0, r5, #24
 800fad8:	d501      	bpl.n	800fade <_printf_i+0xc2>
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	e002      	b.n	800fae4 <_printf_i+0xc8>
 800fade:	0668      	lsls	r0, r5, #25
 800fae0:	d5fb      	bpl.n	800fada <_printf_i+0xbe>
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	4854      	ldr	r0, [pc, #336]	; (800fc38 <_printf_i+0x21c>)
 800fae6:	296f      	cmp	r1, #111	; 0x6f
 800fae8:	bf14      	ite	ne
 800faea:	220a      	movne	r2, #10
 800faec:	2208      	moveq	r2, #8
 800faee:	2100      	movs	r1, #0
 800faf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800faf4:	6865      	ldr	r5, [r4, #4]
 800faf6:	60a5      	str	r5, [r4, #8]
 800faf8:	2d00      	cmp	r5, #0
 800fafa:	f2c0 8095 	blt.w	800fc28 <_printf_i+0x20c>
 800fafe:	6821      	ldr	r1, [r4, #0]
 800fb00:	f021 0104 	bic.w	r1, r1, #4
 800fb04:	6021      	str	r1, [r4, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d13d      	bne.n	800fb86 <_printf_i+0x16a>
 800fb0a:	2d00      	cmp	r5, #0
 800fb0c:	f040 808e 	bne.w	800fc2c <_printf_i+0x210>
 800fb10:	4665      	mov	r5, ip
 800fb12:	2a08      	cmp	r2, #8
 800fb14:	d10b      	bne.n	800fb2e <_printf_i+0x112>
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	07db      	lsls	r3, r3, #31
 800fb1a:	d508      	bpl.n	800fb2e <_printf_i+0x112>
 800fb1c:	6923      	ldr	r3, [r4, #16]
 800fb1e:	6862      	ldr	r2, [r4, #4]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	bfde      	ittt	le
 800fb24:	2330      	movle	r3, #48	; 0x30
 800fb26:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb2a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fb2e:	ebac 0305 	sub.w	r3, ip, r5
 800fb32:	6123      	str	r3, [r4, #16]
 800fb34:	f8cd 8000 	str.w	r8, [sp]
 800fb38:	463b      	mov	r3, r7
 800fb3a:	aa03      	add	r2, sp, #12
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f7ff fef6 	bl	800f930 <_printf_common>
 800fb44:	3001      	adds	r0, #1
 800fb46:	d14d      	bne.n	800fbe4 <_printf_i+0x1c8>
 800fb48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb4c:	b005      	add	sp, #20
 800fb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb52:	4839      	ldr	r0, [pc, #228]	; (800fc38 <_printf_i+0x21c>)
 800fb54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fb58:	6813      	ldr	r3, [r2, #0]
 800fb5a:	6821      	ldr	r1, [r4, #0]
 800fb5c:	1d1d      	adds	r5, r3, #4
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	6015      	str	r5, [r2, #0]
 800fb62:	060a      	lsls	r2, r1, #24
 800fb64:	d50b      	bpl.n	800fb7e <_printf_i+0x162>
 800fb66:	07ca      	lsls	r2, r1, #31
 800fb68:	bf44      	itt	mi
 800fb6a:	f041 0120 	orrmi.w	r1, r1, #32
 800fb6e:	6021      	strmi	r1, [r4, #0]
 800fb70:	b91b      	cbnz	r3, 800fb7a <_printf_i+0x15e>
 800fb72:	6822      	ldr	r2, [r4, #0]
 800fb74:	f022 0220 	bic.w	r2, r2, #32
 800fb78:	6022      	str	r2, [r4, #0]
 800fb7a:	2210      	movs	r2, #16
 800fb7c:	e7b7      	b.n	800faee <_printf_i+0xd2>
 800fb7e:	064d      	lsls	r5, r1, #25
 800fb80:	bf48      	it	mi
 800fb82:	b29b      	uxthmi	r3, r3
 800fb84:	e7ef      	b.n	800fb66 <_printf_i+0x14a>
 800fb86:	4665      	mov	r5, ip
 800fb88:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb8c:	fb02 3311 	mls	r3, r2, r1, r3
 800fb90:	5cc3      	ldrb	r3, [r0, r3]
 800fb92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fb96:	460b      	mov	r3, r1
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	d1f5      	bne.n	800fb88 <_printf_i+0x16c>
 800fb9c:	e7b9      	b.n	800fb12 <_printf_i+0xf6>
 800fb9e:	6813      	ldr	r3, [r2, #0]
 800fba0:	6825      	ldr	r5, [r4, #0]
 800fba2:	6961      	ldr	r1, [r4, #20]
 800fba4:	1d18      	adds	r0, r3, #4
 800fba6:	6010      	str	r0, [r2, #0]
 800fba8:	0628      	lsls	r0, r5, #24
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	d501      	bpl.n	800fbb2 <_printf_i+0x196>
 800fbae:	6019      	str	r1, [r3, #0]
 800fbb0:	e002      	b.n	800fbb8 <_printf_i+0x19c>
 800fbb2:	066a      	lsls	r2, r5, #25
 800fbb4:	d5fb      	bpl.n	800fbae <_printf_i+0x192>
 800fbb6:	8019      	strh	r1, [r3, #0]
 800fbb8:	2300      	movs	r3, #0
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	4665      	mov	r5, ip
 800fbbe:	e7b9      	b.n	800fb34 <_printf_i+0x118>
 800fbc0:	6813      	ldr	r3, [r2, #0]
 800fbc2:	1d19      	adds	r1, r3, #4
 800fbc4:	6011      	str	r1, [r2, #0]
 800fbc6:	681d      	ldr	r5, [r3, #0]
 800fbc8:	6862      	ldr	r2, [r4, #4]
 800fbca:	2100      	movs	r1, #0
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f7f0 fb2f 	bl	8000230 <memchr>
 800fbd2:	b108      	cbz	r0, 800fbd8 <_printf_i+0x1bc>
 800fbd4:	1b40      	subs	r0, r0, r5
 800fbd6:	6060      	str	r0, [r4, #4]
 800fbd8:	6863      	ldr	r3, [r4, #4]
 800fbda:	6123      	str	r3, [r4, #16]
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbe2:	e7a7      	b.n	800fb34 <_printf_i+0x118>
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	462a      	mov	r2, r5
 800fbe8:	4639      	mov	r1, r7
 800fbea:	4630      	mov	r0, r6
 800fbec:	47c0      	blx	r8
 800fbee:	3001      	adds	r0, #1
 800fbf0:	d0aa      	beq.n	800fb48 <_printf_i+0x12c>
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	079b      	lsls	r3, r3, #30
 800fbf6:	d413      	bmi.n	800fc20 <_printf_i+0x204>
 800fbf8:	68e0      	ldr	r0, [r4, #12]
 800fbfa:	9b03      	ldr	r3, [sp, #12]
 800fbfc:	4298      	cmp	r0, r3
 800fbfe:	bfb8      	it	lt
 800fc00:	4618      	movlt	r0, r3
 800fc02:	e7a3      	b.n	800fb4c <_printf_i+0x130>
 800fc04:	2301      	movs	r3, #1
 800fc06:	464a      	mov	r2, r9
 800fc08:	4639      	mov	r1, r7
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	47c0      	blx	r8
 800fc0e:	3001      	adds	r0, #1
 800fc10:	d09a      	beq.n	800fb48 <_printf_i+0x12c>
 800fc12:	3501      	adds	r5, #1
 800fc14:	68e3      	ldr	r3, [r4, #12]
 800fc16:	9a03      	ldr	r2, [sp, #12]
 800fc18:	1a9b      	subs	r3, r3, r2
 800fc1a:	42ab      	cmp	r3, r5
 800fc1c:	dcf2      	bgt.n	800fc04 <_printf_i+0x1e8>
 800fc1e:	e7eb      	b.n	800fbf8 <_printf_i+0x1dc>
 800fc20:	2500      	movs	r5, #0
 800fc22:	f104 0919 	add.w	r9, r4, #25
 800fc26:	e7f5      	b.n	800fc14 <_printf_i+0x1f8>
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1ac      	bne.n	800fb86 <_printf_i+0x16a>
 800fc2c:	7803      	ldrb	r3, [r0, #0]
 800fc2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc36:	e76c      	b.n	800fb12 <_printf_i+0xf6>
 800fc38:	080143b0 	.word	0x080143b0
 800fc3c:	080143c1 	.word	0x080143c1

0800fc40 <_puts_r>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	460e      	mov	r6, r1
 800fc44:	4605      	mov	r5, r0
 800fc46:	b118      	cbz	r0, 800fc50 <_puts_r+0x10>
 800fc48:	6983      	ldr	r3, [r0, #24]
 800fc4a:	b90b      	cbnz	r3, 800fc50 <_puts_r+0x10>
 800fc4c:	f001 f894 	bl	8010d78 <__sinit>
 800fc50:	69ab      	ldr	r3, [r5, #24]
 800fc52:	68ac      	ldr	r4, [r5, #8]
 800fc54:	b913      	cbnz	r3, 800fc5c <_puts_r+0x1c>
 800fc56:	4628      	mov	r0, r5
 800fc58:	f001 f88e 	bl	8010d78 <__sinit>
 800fc5c:	4b23      	ldr	r3, [pc, #140]	; (800fcec <_puts_r+0xac>)
 800fc5e:	429c      	cmp	r4, r3
 800fc60:	d117      	bne.n	800fc92 <_puts_r+0x52>
 800fc62:	686c      	ldr	r4, [r5, #4]
 800fc64:	89a3      	ldrh	r3, [r4, #12]
 800fc66:	071b      	lsls	r3, r3, #28
 800fc68:	d51d      	bpl.n	800fca6 <_puts_r+0x66>
 800fc6a:	6923      	ldr	r3, [r4, #16]
 800fc6c:	b1db      	cbz	r3, 800fca6 <_puts_r+0x66>
 800fc6e:	3e01      	subs	r6, #1
 800fc70:	68a3      	ldr	r3, [r4, #8]
 800fc72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc76:	3b01      	subs	r3, #1
 800fc78:	60a3      	str	r3, [r4, #8]
 800fc7a:	b9e9      	cbnz	r1, 800fcb8 <_puts_r+0x78>
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	da2e      	bge.n	800fcde <_puts_r+0x9e>
 800fc80:	4622      	mov	r2, r4
 800fc82:	210a      	movs	r1, #10
 800fc84:	4628      	mov	r0, r5
 800fc86:	f000 f883 	bl	800fd90 <__swbuf_r>
 800fc8a:	3001      	adds	r0, #1
 800fc8c:	d011      	beq.n	800fcb2 <_puts_r+0x72>
 800fc8e:	200a      	movs	r0, #10
 800fc90:	e011      	b.n	800fcb6 <_puts_r+0x76>
 800fc92:	4b17      	ldr	r3, [pc, #92]	; (800fcf0 <_puts_r+0xb0>)
 800fc94:	429c      	cmp	r4, r3
 800fc96:	d101      	bne.n	800fc9c <_puts_r+0x5c>
 800fc98:	68ac      	ldr	r4, [r5, #8]
 800fc9a:	e7e3      	b.n	800fc64 <_puts_r+0x24>
 800fc9c:	4b15      	ldr	r3, [pc, #84]	; (800fcf4 <_puts_r+0xb4>)
 800fc9e:	429c      	cmp	r4, r3
 800fca0:	bf08      	it	eq
 800fca2:	68ec      	ldreq	r4, [r5, #12]
 800fca4:	e7de      	b.n	800fc64 <_puts_r+0x24>
 800fca6:	4621      	mov	r1, r4
 800fca8:	4628      	mov	r0, r5
 800fcaa:	f000 f8c3 	bl	800fe34 <__swsetup_r>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d0dd      	beq.n	800fc6e <_puts_r+0x2e>
 800fcb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcb6:	bd70      	pop	{r4, r5, r6, pc}
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	da04      	bge.n	800fcc6 <_puts_r+0x86>
 800fcbc:	69a2      	ldr	r2, [r4, #24]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	dc06      	bgt.n	800fcd0 <_puts_r+0x90>
 800fcc2:	290a      	cmp	r1, #10
 800fcc4:	d004      	beq.n	800fcd0 <_puts_r+0x90>
 800fcc6:	6823      	ldr	r3, [r4, #0]
 800fcc8:	1c5a      	adds	r2, r3, #1
 800fcca:	6022      	str	r2, [r4, #0]
 800fccc:	7019      	strb	r1, [r3, #0]
 800fcce:	e7cf      	b.n	800fc70 <_puts_r+0x30>
 800fcd0:	4622      	mov	r2, r4
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f000 f85c 	bl	800fd90 <__swbuf_r>
 800fcd8:	3001      	adds	r0, #1
 800fcda:	d1c9      	bne.n	800fc70 <_puts_r+0x30>
 800fcdc:	e7e9      	b.n	800fcb2 <_puts_r+0x72>
 800fcde:	6823      	ldr	r3, [r4, #0]
 800fce0:	200a      	movs	r0, #10
 800fce2:	1c5a      	adds	r2, r3, #1
 800fce4:	6022      	str	r2, [r4, #0]
 800fce6:	7018      	strb	r0, [r3, #0]
 800fce8:	e7e5      	b.n	800fcb6 <_puts_r+0x76>
 800fcea:	bf00      	nop
 800fcec:	08014400 	.word	0x08014400
 800fcf0:	08014420 	.word	0x08014420
 800fcf4:	080143e0 	.word	0x080143e0

0800fcf8 <puts>:
 800fcf8:	4b02      	ldr	r3, [pc, #8]	; (800fd04 <puts+0xc>)
 800fcfa:	4601      	mov	r1, r0
 800fcfc:	6818      	ldr	r0, [r3, #0]
 800fcfe:	f7ff bf9f 	b.w	800fc40 <_puts_r>
 800fd02:	bf00      	nop
 800fd04:	20001cac 	.word	0x20001cac

0800fd08 <sniprintf>:
 800fd08:	b40c      	push	{r2, r3}
 800fd0a:	b530      	push	{r4, r5, lr}
 800fd0c:	4b17      	ldr	r3, [pc, #92]	; (800fd6c <sniprintf+0x64>)
 800fd0e:	1e0c      	subs	r4, r1, #0
 800fd10:	b09d      	sub	sp, #116	; 0x74
 800fd12:	681d      	ldr	r5, [r3, #0]
 800fd14:	da08      	bge.n	800fd28 <sniprintf+0x20>
 800fd16:	238b      	movs	r3, #139	; 0x8b
 800fd18:	602b      	str	r3, [r5, #0]
 800fd1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd1e:	b01d      	add	sp, #116	; 0x74
 800fd20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd24:	b002      	add	sp, #8
 800fd26:	4770      	bx	lr
 800fd28:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd30:	bf14      	ite	ne
 800fd32:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fd36:	4623      	moveq	r3, r4
 800fd38:	9304      	str	r3, [sp, #16]
 800fd3a:	9307      	str	r3, [sp, #28]
 800fd3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd40:	9002      	str	r0, [sp, #8]
 800fd42:	9006      	str	r0, [sp, #24]
 800fd44:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd4a:	ab21      	add	r3, sp, #132	; 0x84
 800fd4c:	a902      	add	r1, sp, #8
 800fd4e:	4628      	mov	r0, r5
 800fd50:	9301      	str	r3, [sp, #4]
 800fd52:	f001 fd0b 	bl	801176c <_svfiprintf_r>
 800fd56:	1c43      	adds	r3, r0, #1
 800fd58:	bfbc      	itt	lt
 800fd5a:	238b      	movlt	r3, #139	; 0x8b
 800fd5c:	602b      	strlt	r3, [r5, #0]
 800fd5e:	2c00      	cmp	r4, #0
 800fd60:	d0dd      	beq.n	800fd1e <sniprintf+0x16>
 800fd62:	9b02      	ldr	r3, [sp, #8]
 800fd64:	2200      	movs	r2, #0
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	e7d9      	b.n	800fd1e <sniprintf+0x16>
 800fd6a:	bf00      	nop
 800fd6c:	20001cac 	.word	0x20001cac

0800fd70 <strcat>:
 800fd70:	b510      	push	{r4, lr}
 800fd72:	4603      	mov	r3, r0
 800fd74:	781a      	ldrb	r2, [r3, #0]
 800fd76:	1c5c      	adds	r4, r3, #1
 800fd78:	b93a      	cbnz	r2, 800fd8a <strcat+0x1a>
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd80:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd84:	2a00      	cmp	r2, #0
 800fd86:	d1f9      	bne.n	800fd7c <strcat+0xc>
 800fd88:	bd10      	pop	{r4, pc}
 800fd8a:	4623      	mov	r3, r4
 800fd8c:	e7f2      	b.n	800fd74 <strcat+0x4>
	...

0800fd90 <__swbuf_r>:
 800fd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd92:	460e      	mov	r6, r1
 800fd94:	4614      	mov	r4, r2
 800fd96:	4605      	mov	r5, r0
 800fd98:	b118      	cbz	r0, 800fda2 <__swbuf_r+0x12>
 800fd9a:	6983      	ldr	r3, [r0, #24]
 800fd9c:	b90b      	cbnz	r3, 800fda2 <__swbuf_r+0x12>
 800fd9e:	f000 ffeb 	bl	8010d78 <__sinit>
 800fda2:	4b21      	ldr	r3, [pc, #132]	; (800fe28 <__swbuf_r+0x98>)
 800fda4:	429c      	cmp	r4, r3
 800fda6:	d12a      	bne.n	800fdfe <__swbuf_r+0x6e>
 800fda8:	686c      	ldr	r4, [r5, #4]
 800fdaa:	69a3      	ldr	r3, [r4, #24]
 800fdac:	60a3      	str	r3, [r4, #8]
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	071a      	lsls	r2, r3, #28
 800fdb2:	d52e      	bpl.n	800fe12 <__swbuf_r+0x82>
 800fdb4:	6923      	ldr	r3, [r4, #16]
 800fdb6:	b363      	cbz	r3, 800fe12 <__swbuf_r+0x82>
 800fdb8:	6923      	ldr	r3, [r4, #16]
 800fdba:	6820      	ldr	r0, [r4, #0]
 800fdbc:	1ac0      	subs	r0, r0, r3
 800fdbe:	6963      	ldr	r3, [r4, #20]
 800fdc0:	b2f6      	uxtb	r6, r6
 800fdc2:	4283      	cmp	r3, r0
 800fdc4:	4637      	mov	r7, r6
 800fdc6:	dc04      	bgt.n	800fdd2 <__swbuf_r+0x42>
 800fdc8:	4621      	mov	r1, r4
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f000 ff6a 	bl	8010ca4 <_fflush_r>
 800fdd0:	bb28      	cbnz	r0, 800fe1e <__swbuf_r+0x8e>
 800fdd2:	68a3      	ldr	r3, [r4, #8]
 800fdd4:	3b01      	subs	r3, #1
 800fdd6:	60a3      	str	r3, [r4, #8]
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	1c5a      	adds	r2, r3, #1
 800fddc:	6022      	str	r2, [r4, #0]
 800fdde:	701e      	strb	r6, [r3, #0]
 800fde0:	6963      	ldr	r3, [r4, #20]
 800fde2:	3001      	adds	r0, #1
 800fde4:	4283      	cmp	r3, r0
 800fde6:	d004      	beq.n	800fdf2 <__swbuf_r+0x62>
 800fde8:	89a3      	ldrh	r3, [r4, #12]
 800fdea:	07db      	lsls	r3, r3, #31
 800fdec:	d519      	bpl.n	800fe22 <__swbuf_r+0x92>
 800fdee:	2e0a      	cmp	r6, #10
 800fdf0:	d117      	bne.n	800fe22 <__swbuf_r+0x92>
 800fdf2:	4621      	mov	r1, r4
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	f000 ff55 	bl	8010ca4 <_fflush_r>
 800fdfa:	b190      	cbz	r0, 800fe22 <__swbuf_r+0x92>
 800fdfc:	e00f      	b.n	800fe1e <__swbuf_r+0x8e>
 800fdfe:	4b0b      	ldr	r3, [pc, #44]	; (800fe2c <__swbuf_r+0x9c>)
 800fe00:	429c      	cmp	r4, r3
 800fe02:	d101      	bne.n	800fe08 <__swbuf_r+0x78>
 800fe04:	68ac      	ldr	r4, [r5, #8]
 800fe06:	e7d0      	b.n	800fdaa <__swbuf_r+0x1a>
 800fe08:	4b09      	ldr	r3, [pc, #36]	; (800fe30 <__swbuf_r+0xa0>)
 800fe0a:	429c      	cmp	r4, r3
 800fe0c:	bf08      	it	eq
 800fe0e:	68ec      	ldreq	r4, [r5, #12]
 800fe10:	e7cb      	b.n	800fdaa <__swbuf_r+0x1a>
 800fe12:	4621      	mov	r1, r4
 800fe14:	4628      	mov	r0, r5
 800fe16:	f000 f80d 	bl	800fe34 <__swsetup_r>
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d0cc      	beq.n	800fdb8 <__swbuf_r+0x28>
 800fe1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fe22:	4638      	mov	r0, r7
 800fe24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe26:	bf00      	nop
 800fe28:	08014400 	.word	0x08014400
 800fe2c:	08014420 	.word	0x08014420
 800fe30:	080143e0 	.word	0x080143e0

0800fe34 <__swsetup_r>:
 800fe34:	4b32      	ldr	r3, [pc, #200]	; (800ff00 <__swsetup_r+0xcc>)
 800fe36:	b570      	push	{r4, r5, r6, lr}
 800fe38:	681d      	ldr	r5, [r3, #0]
 800fe3a:	4606      	mov	r6, r0
 800fe3c:	460c      	mov	r4, r1
 800fe3e:	b125      	cbz	r5, 800fe4a <__swsetup_r+0x16>
 800fe40:	69ab      	ldr	r3, [r5, #24]
 800fe42:	b913      	cbnz	r3, 800fe4a <__swsetup_r+0x16>
 800fe44:	4628      	mov	r0, r5
 800fe46:	f000 ff97 	bl	8010d78 <__sinit>
 800fe4a:	4b2e      	ldr	r3, [pc, #184]	; (800ff04 <__swsetup_r+0xd0>)
 800fe4c:	429c      	cmp	r4, r3
 800fe4e:	d10f      	bne.n	800fe70 <__swsetup_r+0x3c>
 800fe50:	686c      	ldr	r4, [r5, #4]
 800fe52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	0715      	lsls	r5, r2, #28
 800fe5a:	d42c      	bmi.n	800feb6 <__swsetup_r+0x82>
 800fe5c:	06d0      	lsls	r0, r2, #27
 800fe5e:	d411      	bmi.n	800fe84 <__swsetup_r+0x50>
 800fe60:	2209      	movs	r2, #9
 800fe62:	6032      	str	r2, [r6, #0]
 800fe64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe68:	81a3      	strh	r3, [r4, #12]
 800fe6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe6e:	e03e      	b.n	800feee <__swsetup_r+0xba>
 800fe70:	4b25      	ldr	r3, [pc, #148]	; (800ff08 <__swsetup_r+0xd4>)
 800fe72:	429c      	cmp	r4, r3
 800fe74:	d101      	bne.n	800fe7a <__swsetup_r+0x46>
 800fe76:	68ac      	ldr	r4, [r5, #8]
 800fe78:	e7eb      	b.n	800fe52 <__swsetup_r+0x1e>
 800fe7a:	4b24      	ldr	r3, [pc, #144]	; (800ff0c <__swsetup_r+0xd8>)
 800fe7c:	429c      	cmp	r4, r3
 800fe7e:	bf08      	it	eq
 800fe80:	68ec      	ldreq	r4, [r5, #12]
 800fe82:	e7e6      	b.n	800fe52 <__swsetup_r+0x1e>
 800fe84:	0751      	lsls	r1, r2, #29
 800fe86:	d512      	bpl.n	800feae <__swsetup_r+0x7a>
 800fe88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe8a:	b141      	cbz	r1, 800fe9e <__swsetup_r+0x6a>
 800fe8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe90:	4299      	cmp	r1, r3
 800fe92:	d002      	beq.n	800fe9a <__swsetup_r+0x66>
 800fe94:	4630      	mov	r0, r6
 800fe96:	f001 fb67 	bl	8011568 <_free_r>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	6363      	str	r3, [r4, #52]	; 0x34
 800fe9e:	89a3      	ldrh	r3, [r4, #12]
 800fea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fea4:	81a3      	strh	r3, [r4, #12]
 800fea6:	2300      	movs	r3, #0
 800fea8:	6063      	str	r3, [r4, #4]
 800feaa:	6923      	ldr	r3, [r4, #16]
 800feac:	6023      	str	r3, [r4, #0]
 800feae:	89a3      	ldrh	r3, [r4, #12]
 800feb0:	f043 0308 	orr.w	r3, r3, #8
 800feb4:	81a3      	strh	r3, [r4, #12]
 800feb6:	6923      	ldr	r3, [r4, #16]
 800feb8:	b94b      	cbnz	r3, 800fece <__swsetup_r+0x9a>
 800feba:	89a3      	ldrh	r3, [r4, #12]
 800febc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fec4:	d003      	beq.n	800fece <__swsetup_r+0x9a>
 800fec6:	4621      	mov	r1, r4
 800fec8:	4630      	mov	r0, r6
 800feca:	f001 f811 	bl	8010ef0 <__smakebuf_r>
 800fece:	89a2      	ldrh	r2, [r4, #12]
 800fed0:	f012 0301 	ands.w	r3, r2, #1
 800fed4:	d00c      	beq.n	800fef0 <__swsetup_r+0xbc>
 800fed6:	2300      	movs	r3, #0
 800fed8:	60a3      	str	r3, [r4, #8]
 800feda:	6963      	ldr	r3, [r4, #20]
 800fedc:	425b      	negs	r3, r3
 800fede:	61a3      	str	r3, [r4, #24]
 800fee0:	6923      	ldr	r3, [r4, #16]
 800fee2:	b953      	cbnz	r3, 800fefa <__swsetup_r+0xc6>
 800fee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fee8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800feec:	d1ba      	bne.n	800fe64 <__swsetup_r+0x30>
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	0792      	lsls	r2, r2, #30
 800fef2:	bf58      	it	pl
 800fef4:	6963      	ldrpl	r3, [r4, #20]
 800fef6:	60a3      	str	r3, [r4, #8]
 800fef8:	e7f2      	b.n	800fee0 <__swsetup_r+0xac>
 800fefa:	2000      	movs	r0, #0
 800fefc:	e7f7      	b.n	800feee <__swsetup_r+0xba>
 800fefe:	bf00      	nop
 800ff00:	20001cac 	.word	0x20001cac
 800ff04:	08014400 	.word	0x08014400
 800ff08:	08014420 	.word	0x08014420
 800ff0c:	080143e0 	.word	0x080143e0

0800ff10 <quorem>:
 800ff10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	6903      	ldr	r3, [r0, #16]
 800ff16:	690c      	ldr	r4, [r1, #16]
 800ff18:	42a3      	cmp	r3, r4
 800ff1a:	4680      	mov	r8, r0
 800ff1c:	f2c0 8082 	blt.w	8010024 <quorem+0x114>
 800ff20:	3c01      	subs	r4, #1
 800ff22:	f101 0714 	add.w	r7, r1, #20
 800ff26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ff2a:	f100 0614 	add.w	r6, r0, #20
 800ff2e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ff32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ff36:	eb06 030c 	add.w	r3, r6, ip
 800ff3a:	3501      	adds	r5, #1
 800ff3c:	eb07 090c 	add.w	r9, r7, ip
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	fbb0 f5f5 	udiv	r5, r0, r5
 800ff46:	b395      	cbz	r5, 800ffae <quorem+0x9e>
 800ff48:	f04f 0a00 	mov.w	sl, #0
 800ff4c:	4638      	mov	r0, r7
 800ff4e:	46b6      	mov	lr, r6
 800ff50:	46d3      	mov	fp, sl
 800ff52:	f850 2b04 	ldr.w	r2, [r0], #4
 800ff56:	b293      	uxth	r3, r2
 800ff58:	fb05 a303 	mla	r3, r5, r3, sl
 800ff5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	ebab 0303 	sub.w	r3, fp, r3
 800ff66:	0c12      	lsrs	r2, r2, #16
 800ff68:	f8de b000 	ldr.w	fp, [lr]
 800ff6c:	fb05 a202 	mla	r2, r5, r2, sl
 800ff70:	fa13 f38b 	uxtah	r3, r3, fp
 800ff74:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ff78:	fa1f fb82 	uxth.w	fp, r2
 800ff7c:	f8de 2000 	ldr.w	r2, [lr]
 800ff80:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ff84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff8e:	4581      	cmp	r9, r0
 800ff90:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ff94:	f84e 3b04 	str.w	r3, [lr], #4
 800ff98:	d2db      	bcs.n	800ff52 <quorem+0x42>
 800ff9a:	f856 300c 	ldr.w	r3, [r6, ip]
 800ff9e:	b933      	cbnz	r3, 800ffae <quorem+0x9e>
 800ffa0:	9b01      	ldr	r3, [sp, #4]
 800ffa2:	3b04      	subs	r3, #4
 800ffa4:	429e      	cmp	r6, r3
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	d330      	bcc.n	801000c <quorem+0xfc>
 800ffaa:	f8c8 4010 	str.w	r4, [r8, #16]
 800ffae:	4640      	mov	r0, r8
 800ffb0:	f001 fa06 	bl	80113c0 <__mcmp>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	db25      	blt.n	8010004 <quorem+0xf4>
 800ffb8:	3501      	adds	r5, #1
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f04f 0c00 	mov.w	ip, #0
 800ffc0:	f857 2b04 	ldr.w	r2, [r7], #4
 800ffc4:	f8d0 e000 	ldr.w	lr, [r0]
 800ffc8:	b293      	uxth	r3, r2
 800ffca:	ebac 0303 	sub.w	r3, ip, r3
 800ffce:	0c12      	lsrs	r2, r2, #16
 800ffd0:	fa13 f38e 	uxtah	r3, r3, lr
 800ffd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ffd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffe2:	45b9      	cmp	r9, r7
 800ffe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ffe8:	f840 3b04 	str.w	r3, [r0], #4
 800ffec:	d2e8      	bcs.n	800ffc0 <quorem+0xb0>
 800ffee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fff2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fff6:	b92a      	cbnz	r2, 8010004 <quorem+0xf4>
 800fff8:	3b04      	subs	r3, #4
 800fffa:	429e      	cmp	r6, r3
 800fffc:	461a      	mov	r2, r3
 800fffe:	d30b      	bcc.n	8010018 <quorem+0x108>
 8010000:	f8c8 4010 	str.w	r4, [r8, #16]
 8010004:	4628      	mov	r0, r5
 8010006:	b003      	add	sp, #12
 8010008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000c:	6812      	ldr	r2, [r2, #0]
 801000e:	3b04      	subs	r3, #4
 8010010:	2a00      	cmp	r2, #0
 8010012:	d1ca      	bne.n	800ffaa <quorem+0x9a>
 8010014:	3c01      	subs	r4, #1
 8010016:	e7c5      	b.n	800ffa4 <quorem+0x94>
 8010018:	6812      	ldr	r2, [r2, #0]
 801001a:	3b04      	subs	r3, #4
 801001c:	2a00      	cmp	r2, #0
 801001e:	d1ef      	bne.n	8010000 <quorem+0xf0>
 8010020:	3c01      	subs	r4, #1
 8010022:	e7ea      	b.n	800fffa <quorem+0xea>
 8010024:	2000      	movs	r0, #0
 8010026:	e7ee      	b.n	8010006 <quorem+0xf6>

08010028 <_dtoa_r>:
 8010028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002c:	ec57 6b10 	vmov	r6, r7, d0
 8010030:	b097      	sub	sp, #92	; 0x5c
 8010032:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010034:	9106      	str	r1, [sp, #24]
 8010036:	4604      	mov	r4, r0
 8010038:	920b      	str	r2, [sp, #44]	; 0x2c
 801003a:	9312      	str	r3, [sp, #72]	; 0x48
 801003c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010040:	e9cd 6700 	strd	r6, r7, [sp]
 8010044:	b93d      	cbnz	r5, 8010056 <_dtoa_r+0x2e>
 8010046:	2010      	movs	r0, #16
 8010048:	f000 ff92 	bl	8010f70 <malloc>
 801004c:	6260      	str	r0, [r4, #36]	; 0x24
 801004e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010052:	6005      	str	r5, [r0, #0]
 8010054:	60c5      	str	r5, [r0, #12]
 8010056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010058:	6819      	ldr	r1, [r3, #0]
 801005a:	b151      	cbz	r1, 8010072 <_dtoa_r+0x4a>
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	604a      	str	r2, [r1, #4]
 8010060:	2301      	movs	r3, #1
 8010062:	4093      	lsls	r3, r2
 8010064:	608b      	str	r3, [r1, #8]
 8010066:	4620      	mov	r0, r4
 8010068:	f000 ffc9 	bl	8010ffe <_Bfree>
 801006c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801006e:	2200      	movs	r2, #0
 8010070:	601a      	str	r2, [r3, #0]
 8010072:	1e3b      	subs	r3, r7, #0
 8010074:	bfbb      	ittet	lt
 8010076:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801007a:	9301      	strlt	r3, [sp, #4]
 801007c:	2300      	movge	r3, #0
 801007e:	2201      	movlt	r2, #1
 8010080:	bfac      	ite	ge
 8010082:	f8c8 3000 	strge.w	r3, [r8]
 8010086:	f8c8 2000 	strlt.w	r2, [r8]
 801008a:	4baf      	ldr	r3, [pc, #700]	; (8010348 <_dtoa_r+0x320>)
 801008c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010090:	ea33 0308 	bics.w	r3, r3, r8
 8010094:	d114      	bne.n	80100c0 <_dtoa_r+0x98>
 8010096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010098:	f242 730f 	movw	r3, #9999	; 0x270f
 801009c:	6013      	str	r3, [r2, #0]
 801009e:	9b00      	ldr	r3, [sp, #0]
 80100a0:	b923      	cbnz	r3, 80100ac <_dtoa_r+0x84>
 80100a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80100a6:	2800      	cmp	r0, #0
 80100a8:	f000 8542 	beq.w	8010b30 <_dtoa_r+0xb08>
 80100ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801035c <_dtoa_r+0x334>
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f000 8544 	beq.w	8010b40 <_dtoa_r+0xb18>
 80100b8:	f10b 0303 	add.w	r3, fp, #3
 80100bc:	f000 bd3e 	b.w	8010b3c <_dtoa_r+0xb14>
 80100c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80100c4:	2200      	movs	r2, #0
 80100c6:	2300      	movs	r3, #0
 80100c8:	4630      	mov	r0, r6
 80100ca:	4639      	mov	r1, r7
 80100cc:	f7f0 fd24 	bl	8000b18 <__aeabi_dcmpeq>
 80100d0:	4681      	mov	r9, r0
 80100d2:	b168      	cbz	r0, 80100f0 <_dtoa_r+0xc8>
 80100d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80100d6:	2301      	movs	r3, #1
 80100d8:	6013      	str	r3, [r2, #0]
 80100da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f000 8524 	beq.w	8010b2a <_dtoa_r+0xb02>
 80100e2:	4b9a      	ldr	r3, [pc, #616]	; (801034c <_dtoa_r+0x324>)
 80100e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80100e6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80100ea:	6013      	str	r3, [r2, #0]
 80100ec:	f000 bd28 	b.w	8010b40 <_dtoa_r+0xb18>
 80100f0:	aa14      	add	r2, sp, #80	; 0x50
 80100f2:	a915      	add	r1, sp, #84	; 0x54
 80100f4:	ec47 6b10 	vmov	d0, r6, r7
 80100f8:	4620      	mov	r0, r4
 80100fa:	f001 f9d8 	bl	80114ae <__d2b>
 80100fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010102:	9004      	str	r0, [sp, #16]
 8010104:	2d00      	cmp	r5, #0
 8010106:	d07c      	beq.n	8010202 <_dtoa_r+0x1da>
 8010108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801010c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010110:	46b2      	mov	sl, r6
 8010112:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801011a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801011e:	2200      	movs	r2, #0
 8010120:	4b8b      	ldr	r3, [pc, #556]	; (8010350 <_dtoa_r+0x328>)
 8010122:	4650      	mov	r0, sl
 8010124:	4659      	mov	r1, fp
 8010126:	f7f0 f8d7 	bl	80002d8 <__aeabi_dsub>
 801012a:	a381      	add	r3, pc, #516	; (adr r3, 8010330 <_dtoa_r+0x308>)
 801012c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010130:	f7f0 fa8a 	bl	8000648 <__aeabi_dmul>
 8010134:	a380      	add	r3, pc, #512	; (adr r3, 8010338 <_dtoa_r+0x310>)
 8010136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013a:	f7f0 f8cf 	bl	80002dc <__adddf3>
 801013e:	4606      	mov	r6, r0
 8010140:	4628      	mov	r0, r5
 8010142:	460f      	mov	r7, r1
 8010144:	f7f0 fa16 	bl	8000574 <__aeabi_i2d>
 8010148:	a37d      	add	r3, pc, #500	; (adr r3, 8010340 <_dtoa_r+0x318>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	f7f0 fa7b 	bl	8000648 <__aeabi_dmul>
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	4630      	mov	r0, r6
 8010158:	4639      	mov	r1, r7
 801015a:	f7f0 f8bf 	bl	80002dc <__adddf3>
 801015e:	4606      	mov	r6, r0
 8010160:	460f      	mov	r7, r1
 8010162:	f7f0 fd21 	bl	8000ba8 <__aeabi_d2iz>
 8010166:	2200      	movs	r2, #0
 8010168:	4682      	mov	sl, r0
 801016a:	2300      	movs	r3, #0
 801016c:	4630      	mov	r0, r6
 801016e:	4639      	mov	r1, r7
 8010170:	f7f0 fcdc 	bl	8000b2c <__aeabi_dcmplt>
 8010174:	b148      	cbz	r0, 801018a <_dtoa_r+0x162>
 8010176:	4650      	mov	r0, sl
 8010178:	f7f0 f9fc 	bl	8000574 <__aeabi_i2d>
 801017c:	4632      	mov	r2, r6
 801017e:	463b      	mov	r3, r7
 8010180:	f7f0 fcca 	bl	8000b18 <__aeabi_dcmpeq>
 8010184:	b908      	cbnz	r0, 801018a <_dtoa_r+0x162>
 8010186:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801018a:	f1ba 0f16 	cmp.w	sl, #22
 801018e:	d859      	bhi.n	8010244 <_dtoa_r+0x21c>
 8010190:	4970      	ldr	r1, [pc, #448]	; (8010354 <_dtoa_r+0x32c>)
 8010192:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010196:	e9dd 2300 	ldrd	r2, r3, [sp]
 801019a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801019e:	f7f0 fce3 	bl	8000b68 <__aeabi_dcmpgt>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d050      	beq.n	8010248 <_dtoa_r+0x220>
 80101a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80101aa:	2300      	movs	r3, #0
 80101ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80101ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101b0:	1b5d      	subs	r5, r3, r5
 80101b2:	f1b5 0801 	subs.w	r8, r5, #1
 80101b6:	bf49      	itett	mi
 80101b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80101bc:	2300      	movpl	r3, #0
 80101be:	9305      	strmi	r3, [sp, #20]
 80101c0:	f04f 0800 	movmi.w	r8, #0
 80101c4:	bf58      	it	pl
 80101c6:	9305      	strpl	r3, [sp, #20]
 80101c8:	f1ba 0f00 	cmp.w	sl, #0
 80101cc:	db3e      	blt.n	801024c <_dtoa_r+0x224>
 80101ce:	2300      	movs	r3, #0
 80101d0:	44d0      	add	r8, sl
 80101d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80101d6:	9307      	str	r3, [sp, #28]
 80101d8:	9b06      	ldr	r3, [sp, #24]
 80101da:	2b09      	cmp	r3, #9
 80101dc:	f200 8090 	bhi.w	8010300 <_dtoa_r+0x2d8>
 80101e0:	2b05      	cmp	r3, #5
 80101e2:	bfc4      	itt	gt
 80101e4:	3b04      	subgt	r3, #4
 80101e6:	9306      	strgt	r3, [sp, #24]
 80101e8:	9b06      	ldr	r3, [sp, #24]
 80101ea:	f1a3 0302 	sub.w	r3, r3, #2
 80101ee:	bfcc      	ite	gt
 80101f0:	2500      	movgt	r5, #0
 80101f2:	2501      	movle	r5, #1
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	f200 808f 	bhi.w	8010318 <_dtoa_r+0x2f0>
 80101fa:	e8df f003 	tbb	[pc, r3]
 80101fe:	7f7d      	.short	0x7f7d
 8010200:	7131      	.short	0x7131
 8010202:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010206:	441d      	add	r5, r3
 8010208:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801020c:	2820      	cmp	r0, #32
 801020e:	dd13      	ble.n	8010238 <_dtoa_r+0x210>
 8010210:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010214:	9b00      	ldr	r3, [sp, #0]
 8010216:	fa08 f800 	lsl.w	r8, r8, r0
 801021a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801021e:	fa23 f000 	lsr.w	r0, r3, r0
 8010222:	ea48 0000 	orr.w	r0, r8, r0
 8010226:	f7f0 f995 	bl	8000554 <__aeabi_ui2d>
 801022a:	2301      	movs	r3, #1
 801022c:	4682      	mov	sl, r0
 801022e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010232:	3d01      	subs	r5, #1
 8010234:	9313      	str	r3, [sp, #76]	; 0x4c
 8010236:	e772      	b.n	801011e <_dtoa_r+0xf6>
 8010238:	9b00      	ldr	r3, [sp, #0]
 801023a:	f1c0 0020 	rsb	r0, r0, #32
 801023e:	fa03 f000 	lsl.w	r0, r3, r0
 8010242:	e7f0      	b.n	8010226 <_dtoa_r+0x1fe>
 8010244:	2301      	movs	r3, #1
 8010246:	e7b1      	b.n	80101ac <_dtoa_r+0x184>
 8010248:	900f      	str	r0, [sp, #60]	; 0x3c
 801024a:	e7b0      	b.n	80101ae <_dtoa_r+0x186>
 801024c:	9b05      	ldr	r3, [sp, #20]
 801024e:	eba3 030a 	sub.w	r3, r3, sl
 8010252:	9305      	str	r3, [sp, #20]
 8010254:	f1ca 0300 	rsb	r3, sl, #0
 8010258:	9307      	str	r3, [sp, #28]
 801025a:	2300      	movs	r3, #0
 801025c:	930e      	str	r3, [sp, #56]	; 0x38
 801025e:	e7bb      	b.n	80101d8 <_dtoa_r+0x1b0>
 8010260:	2301      	movs	r3, #1
 8010262:	930a      	str	r3, [sp, #40]	; 0x28
 8010264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010266:	2b00      	cmp	r3, #0
 8010268:	dd59      	ble.n	801031e <_dtoa_r+0x2f6>
 801026a:	9302      	str	r3, [sp, #8]
 801026c:	4699      	mov	r9, r3
 801026e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010270:	2200      	movs	r2, #0
 8010272:	6072      	str	r2, [r6, #4]
 8010274:	2204      	movs	r2, #4
 8010276:	f102 0014 	add.w	r0, r2, #20
 801027a:	4298      	cmp	r0, r3
 801027c:	6871      	ldr	r1, [r6, #4]
 801027e:	d953      	bls.n	8010328 <_dtoa_r+0x300>
 8010280:	4620      	mov	r0, r4
 8010282:	f000 fe88 	bl	8010f96 <_Balloc>
 8010286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010288:	6030      	str	r0, [r6, #0]
 801028a:	f1b9 0f0e 	cmp.w	r9, #14
 801028e:	f8d3 b000 	ldr.w	fp, [r3]
 8010292:	f200 80e6 	bhi.w	8010462 <_dtoa_r+0x43a>
 8010296:	2d00      	cmp	r5, #0
 8010298:	f000 80e3 	beq.w	8010462 <_dtoa_r+0x43a>
 801029c:	ed9d 7b00 	vldr	d7, [sp]
 80102a0:	f1ba 0f00 	cmp.w	sl, #0
 80102a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80102a8:	dd74      	ble.n	8010394 <_dtoa_r+0x36c>
 80102aa:	4a2a      	ldr	r2, [pc, #168]	; (8010354 <_dtoa_r+0x32c>)
 80102ac:	f00a 030f 	and.w	r3, sl, #15
 80102b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80102b4:	ed93 7b00 	vldr	d7, [r3]
 80102b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80102bc:	06f0      	lsls	r0, r6, #27
 80102be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80102c2:	d565      	bpl.n	8010390 <_dtoa_r+0x368>
 80102c4:	4b24      	ldr	r3, [pc, #144]	; (8010358 <_dtoa_r+0x330>)
 80102c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80102ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80102ce:	f7f0 fae5 	bl	800089c <__aeabi_ddiv>
 80102d2:	e9cd 0100 	strd	r0, r1, [sp]
 80102d6:	f006 060f 	and.w	r6, r6, #15
 80102da:	2503      	movs	r5, #3
 80102dc:	4f1e      	ldr	r7, [pc, #120]	; (8010358 <_dtoa_r+0x330>)
 80102de:	e04c      	b.n	801037a <_dtoa_r+0x352>
 80102e0:	2301      	movs	r3, #1
 80102e2:	930a      	str	r3, [sp, #40]	; 0x28
 80102e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102e6:	4453      	add	r3, sl
 80102e8:	f103 0901 	add.w	r9, r3, #1
 80102ec:	9302      	str	r3, [sp, #8]
 80102ee:	464b      	mov	r3, r9
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	bfb8      	it	lt
 80102f4:	2301      	movlt	r3, #1
 80102f6:	e7ba      	b.n	801026e <_dtoa_r+0x246>
 80102f8:	2300      	movs	r3, #0
 80102fa:	e7b2      	b.n	8010262 <_dtoa_r+0x23a>
 80102fc:	2300      	movs	r3, #0
 80102fe:	e7f0      	b.n	80102e2 <_dtoa_r+0x2ba>
 8010300:	2501      	movs	r5, #1
 8010302:	2300      	movs	r3, #0
 8010304:	9306      	str	r3, [sp, #24]
 8010306:	950a      	str	r5, [sp, #40]	; 0x28
 8010308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801030c:	9302      	str	r3, [sp, #8]
 801030e:	4699      	mov	r9, r3
 8010310:	2200      	movs	r2, #0
 8010312:	2312      	movs	r3, #18
 8010314:	920b      	str	r2, [sp, #44]	; 0x2c
 8010316:	e7aa      	b.n	801026e <_dtoa_r+0x246>
 8010318:	2301      	movs	r3, #1
 801031a:	930a      	str	r3, [sp, #40]	; 0x28
 801031c:	e7f4      	b.n	8010308 <_dtoa_r+0x2e0>
 801031e:	2301      	movs	r3, #1
 8010320:	9302      	str	r3, [sp, #8]
 8010322:	4699      	mov	r9, r3
 8010324:	461a      	mov	r2, r3
 8010326:	e7f5      	b.n	8010314 <_dtoa_r+0x2ec>
 8010328:	3101      	adds	r1, #1
 801032a:	6071      	str	r1, [r6, #4]
 801032c:	0052      	lsls	r2, r2, #1
 801032e:	e7a2      	b.n	8010276 <_dtoa_r+0x24e>
 8010330:	636f4361 	.word	0x636f4361
 8010334:	3fd287a7 	.word	0x3fd287a7
 8010338:	8b60c8b3 	.word	0x8b60c8b3
 801033c:	3fc68a28 	.word	0x3fc68a28
 8010340:	509f79fb 	.word	0x509f79fb
 8010344:	3fd34413 	.word	0x3fd34413
 8010348:	7ff00000 	.word	0x7ff00000
 801034c:	0801465d 	.word	0x0801465d
 8010350:	3ff80000 	.word	0x3ff80000
 8010354:	08014468 	.word	0x08014468
 8010358:	08014440 	.word	0x08014440
 801035c:	080143db 	.word	0x080143db
 8010360:	07f1      	lsls	r1, r6, #31
 8010362:	d508      	bpl.n	8010376 <_dtoa_r+0x34e>
 8010364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010368:	e9d7 2300 	ldrd	r2, r3, [r7]
 801036c:	f7f0 f96c 	bl	8000648 <__aeabi_dmul>
 8010370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010374:	3501      	adds	r5, #1
 8010376:	1076      	asrs	r6, r6, #1
 8010378:	3708      	adds	r7, #8
 801037a:	2e00      	cmp	r6, #0
 801037c:	d1f0      	bne.n	8010360 <_dtoa_r+0x338>
 801037e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010382:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010386:	f7f0 fa89 	bl	800089c <__aeabi_ddiv>
 801038a:	e9cd 0100 	strd	r0, r1, [sp]
 801038e:	e01a      	b.n	80103c6 <_dtoa_r+0x39e>
 8010390:	2502      	movs	r5, #2
 8010392:	e7a3      	b.n	80102dc <_dtoa_r+0x2b4>
 8010394:	f000 80a0 	beq.w	80104d8 <_dtoa_r+0x4b0>
 8010398:	f1ca 0600 	rsb	r6, sl, #0
 801039c:	4b9f      	ldr	r3, [pc, #636]	; (801061c <_dtoa_r+0x5f4>)
 801039e:	4fa0      	ldr	r7, [pc, #640]	; (8010620 <_dtoa_r+0x5f8>)
 80103a0:	f006 020f 	and.w	r2, r6, #15
 80103a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80103b0:	f7f0 f94a 	bl	8000648 <__aeabi_dmul>
 80103b4:	e9cd 0100 	strd	r0, r1, [sp]
 80103b8:	1136      	asrs	r6, r6, #4
 80103ba:	2300      	movs	r3, #0
 80103bc:	2502      	movs	r5, #2
 80103be:	2e00      	cmp	r6, #0
 80103c0:	d17f      	bne.n	80104c2 <_dtoa_r+0x49a>
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d1e1      	bne.n	801038a <_dtoa_r+0x362>
 80103c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 8087 	beq.w	80104dc <_dtoa_r+0x4b4>
 80103ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80103d2:	2200      	movs	r2, #0
 80103d4:	4b93      	ldr	r3, [pc, #588]	; (8010624 <_dtoa_r+0x5fc>)
 80103d6:	4630      	mov	r0, r6
 80103d8:	4639      	mov	r1, r7
 80103da:	f7f0 fba7 	bl	8000b2c <__aeabi_dcmplt>
 80103de:	2800      	cmp	r0, #0
 80103e0:	d07c      	beq.n	80104dc <_dtoa_r+0x4b4>
 80103e2:	f1b9 0f00 	cmp.w	r9, #0
 80103e6:	d079      	beq.n	80104dc <_dtoa_r+0x4b4>
 80103e8:	9b02      	ldr	r3, [sp, #8]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	dd35      	ble.n	801045a <_dtoa_r+0x432>
 80103ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80103f2:	9308      	str	r3, [sp, #32]
 80103f4:	4639      	mov	r1, r7
 80103f6:	2200      	movs	r2, #0
 80103f8:	4b8b      	ldr	r3, [pc, #556]	; (8010628 <_dtoa_r+0x600>)
 80103fa:	4630      	mov	r0, r6
 80103fc:	f7f0 f924 	bl	8000648 <__aeabi_dmul>
 8010400:	e9cd 0100 	strd	r0, r1, [sp]
 8010404:	9f02      	ldr	r7, [sp, #8]
 8010406:	3501      	adds	r5, #1
 8010408:	4628      	mov	r0, r5
 801040a:	f7f0 f8b3 	bl	8000574 <__aeabi_i2d>
 801040e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010412:	f7f0 f919 	bl	8000648 <__aeabi_dmul>
 8010416:	2200      	movs	r2, #0
 8010418:	4b84      	ldr	r3, [pc, #528]	; (801062c <_dtoa_r+0x604>)
 801041a:	f7ef ff5f 	bl	80002dc <__adddf3>
 801041e:	4605      	mov	r5, r0
 8010420:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010424:	2f00      	cmp	r7, #0
 8010426:	d15d      	bne.n	80104e4 <_dtoa_r+0x4bc>
 8010428:	2200      	movs	r2, #0
 801042a:	4b81      	ldr	r3, [pc, #516]	; (8010630 <_dtoa_r+0x608>)
 801042c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010430:	f7ef ff52 	bl	80002d8 <__aeabi_dsub>
 8010434:	462a      	mov	r2, r5
 8010436:	4633      	mov	r3, r6
 8010438:	e9cd 0100 	strd	r0, r1, [sp]
 801043c:	f7f0 fb94 	bl	8000b68 <__aeabi_dcmpgt>
 8010440:	2800      	cmp	r0, #0
 8010442:	f040 8288 	bne.w	8010956 <_dtoa_r+0x92e>
 8010446:	462a      	mov	r2, r5
 8010448:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801044c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010450:	f7f0 fb6c 	bl	8000b2c <__aeabi_dcmplt>
 8010454:	2800      	cmp	r0, #0
 8010456:	f040 827c 	bne.w	8010952 <_dtoa_r+0x92a>
 801045a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801045e:	e9cd 2300 	strd	r2, r3, [sp]
 8010462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010464:	2b00      	cmp	r3, #0
 8010466:	f2c0 8150 	blt.w	801070a <_dtoa_r+0x6e2>
 801046a:	f1ba 0f0e 	cmp.w	sl, #14
 801046e:	f300 814c 	bgt.w	801070a <_dtoa_r+0x6e2>
 8010472:	4b6a      	ldr	r3, [pc, #424]	; (801061c <_dtoa_r+0x5f4>)
 8010474:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010478:	ed93 7b00 	vldr	d7, [r3]
 801047c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801047e:	2b00      	cmp	r3, #0
 8010480:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010484:	f280 80d8 	bge.w	8010638 <_dtoa_r+0x610>
 8010488:	f1b9 0f00 	cmp.w	r9, #0
 801048c:	f300 80d4 	bgt.w	8010638 <_dtoa_r+0x610>
 8010490:	f040 825e 	bne.w	8010950 <_dtoa_r+0x928>
 8010494:	2200      	movs	r2, #0
 8010496:	4b66      	ldr	r3, [pc, #408]	; (8010630 <_dtoa_r+0x608>)
 8010498:	ec51 0b17 	vmov	r0, r1, d7
 801049c:	f7f0 f8d4 	bl	8000648 <__aeabi_dmul>
 80104a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104a4:	f7f0 fb56 	bl	8000b54 <__aeabi_dcmpge>
 80104a8:	464f      	mov	r7, r9
 80104aa:	464e      	mov	r6, r9
 80104ac:	2800      	cmp	r0, #0
 80104ae:	f040 8234 	bne.w	801091a <_dtoa_r+0x8f2>
 80104b2:	2331      	movs	r3, #49	; 0x31
 80104b4:	f10b 0501 	add.w	r5, fp, #1
 80104b8:	f88b 3000 	strb.w	r3, [fp]
 80104bc:	f10a 0a01 	add.w	sl, sl, #1
 80104c0:	e22f      	b.n	8010922 <_dtoa_r+0x8fa>
 80104c2:	07f2      	lsls	r2, r6, #31
 80104c4:	d505      	bpl.n	80104d2 <_dtoa_r+0x4aa>
 80104c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104ca:	f7f0 f8bd 	bl	8000648 <__aeabi_dmul>
 80104ce:	3501      	adds	r5, #1
 80104d0:	2301      	movs	r3, #1
 80104d2:	1076      	asrs	r6, r6, #1
 80104d4:	3708      	adds	r7, #8
 80104d6:	e772      	b.n	80103be <_dtoa_r+0x396>
 80104d8:	2502      	movs	r5, #2
 80104da:	e774      	b.n	80103c6 <_dtoa_r+0x39e>
 80104dc:	f8cd a020 	str.w	sl, [sp, #32]
 80104e0:	464f      	mov	r7, r9
 80104e2:	e791      	b.n	8010408 <_dtoa_r+0x3e0>
 80104e4:	4b4d      	ldr	r3, [pc, #308]	; (801061c <_dtoa_r+0x5f4>)
 80104e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80104ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80104ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d047      	beq.n	8010584 <_dtoa_r+0x55c>
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	2000      	movs	r0, #0
 80104fa:	494e      	ldr	r1, [pc, #312]	; (8010634 <_dtoa_r+0x60c>)
 80104fc:	f7f0 f9ce 	bl	800089c <__aeabi_ddiv>
 8010500:	462a      	mov	r2, r5
 8010502:	4633      	mov	r3, r6
 8010504:	f7ef fee8 	bl	80002d8 <__aeabi_dsub>
 8010508:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801050c:	465d      	mov	r5, fp
 801050e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010512:	f7f0 fb49 	bl	8000ba8 <__aeabi_d2iz>
 8010516:	4606      	mov	r6, r0
 8010518:	f7f0 f82c 	bl	8000574 <__aeabi_i2d>
 801051c:	4602      	mov	r2, r0
 801051e:	460b      	mov	r3, r1
 8010520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010524:	f7ef fed8 	bl	80002d8 <__aeabi_dsub>
 8010528:	3630      	adds	r6, #48	; 0x30
 801052a:	f805 6b01 	strb.w	r6, [r5], #1
 801052e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010532:	e9cd 0100 	strd	r0, r1, [sp]
 8010536:	f7f0 faf9 	bl	8000b2c <__aeabi_dcmplt>
 801053a:	2800      	cmp	r0, #0
 801053c:	d163      	bne.n	8010606 <_dtoa_r+0x5de>
 801053e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010542:	2000      	movs	r0, #0
 8010544:	4937      	ldr	r1, [pc, #220]	; (8010624 <_dtoa_r+0x5fc>)
 8010546:	f7ef fec7 	bl	80002d8 <__aeabi_dsub>
 801054a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801054e:	f7f0 faed 	bl	8000b2c <__aeabi_dcmplt>
 8010552:	2800      	cmp	r0, #0
 8010554:	f040 80b7 	bne.w	80106c6 <_dtoa_r+0x69e>
 8010558:	eba5 030b 	sub.w	r3, r5, fp
 801055c:	429f      	cmp	r7, r3
 801055e:	f77f af7c 	ble.w	801045a <_dtoa_r+0x432>
 8010562:	2200      	movs	r2, #0
 8010564:	4b30      	ldr	r3, [pc, #192]	; (8010628 <_dtoa_r+0x600>)
 8010566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801056a:	f7f0 f86d 	bl	8000648 <__aeabi_dmul>
 801056e:	2200      	movs	r2, #0
 8010570:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010574:	4b2c      	ldr	r3, [pc, #176]	; (8010628 <_dtoa_r+0x600>)
 8010576:	e9dd 0100 	ldrd	r0, r1, [sp]
 801057a:	f7f0 f865 	bl	8000648 <__aeabi_dmul>
 801057e:	e9cd 0100 	strd	r0, r1, [sp]
 8010582:	e7c4      	b.n	801050e <_dtoa_r+0x4e6>
 8010584:	462a      	mov	r2, r5
 8010586:	4633      	mov	r3, r6
 8010588:	f7f0 f85e 	bl	8000648 <__aeabi_dmul>
 801058c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010590:	eb0b 0507 	add.w	r5, fp, r7
 8010594:	465e      	mov	r6, fp
 8010596:	e9dd 0100 	ldrd	r0, r1, [sp]
 801059a:	f7f0 fb05 	bl	8000ba8 <__aeabi_d2iz>
 801059e:	4607      	mov	r7, r0
 80105a0:	f7ef ffe8 	bl	8000574 <__aeabi_i2d>
 80105a4:	3730      	adds	r7, #48	; 0x30
 80105a6:	4602      	mov	r2, r0
 80105a8:	460b      	mov	r3, r1
 80105aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105ae:	f7ef fe93 	bl	80002d8 <__aeabi_dsub>
 80105b2:	f806 7b01 	strb.w	r7, [r6], #1
 80105b6:	42ae      	cmp	r6, r5
 80105b8:	e9cd 0100 	strd	r0, r1, [sp]
 80105bc:	f04f 0200 	mov.w	r2, #0
 80105c0:	d126      	bne.n	8010610 <_dtoa_r+0x5e8>
 80105c2:	4b1c      	ldr	r3, [pc, #112]	; (8010634 <_dtoa_r+0x60c>)
 80105c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80105c8:	f7ef fe88 	bl	80002dc <__adddf3>
 80105cc:	4602      	mov	r2, r0
 80105ce:	460b      	mov	r3, r1
 80105d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105d4:	f7f0 fac8 	bl	8000b68 <__aeabi_dcmpgt>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d174      	bne.n	80106c6 <_dtoa_r+0x69e>
 80105dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80105e0:	2000      	movs	r0, #0
 80105e2:	4914      	ldr	r1, [pc, #80]	; (8010634 <_dtoa_r+0x60c>)
 80105e4:	f7ef fe78 	bl	80002d8 <__aeabi_dsub>
 80105e8:	4602      	mov	r2, r0
 80105ea:	460b      	mov	r3, r1
 80105ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105f0:	f7f0 fa9c 	bl	8000b2c <__aeabi_dcmplt>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	f43f af30 	beq.w	801045a <_dtoa_r+0x432>
 80105fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80105fe:	2b30      	cmp	r3, #48	; 0x30
 8010600:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010604:	d002      	beq.n	801060c <_dtoa_r+0x5e4>
 8010606:	f8dd a020 	ldr.w	sl, [sp, #32]
 801060a:	e04a      	b.n	80106a2 <_dtoa_r+0x67a>
 801060c:	4615      	mov	r5, r2
 801060e:	e7f4      	b.n	80105fa <_dtoa_r+0x5d2>
 8010610:	4b05      	ldr	r3, [pc, #20]	; (8010628 <_dtoa_r+0x600>)
 8010612:	f7f0 f819 	bl	8000648 <__aeabi_dmul>
 8010616:	e9cd 0100 	strd	r0, r1, [sp]
 801061a:	e7bc      	b.n	8010596 <_dtoa_r+0x56e>
 801061c:	08014468 	.word	0x08014468
 8010620:	08014440 	.word	0x08014440
 8010624:	3ff00000 	.word	0x3ff00000
 8010628:	40240000 	.word	0x40240000
 801062c:	401c0000 	.word	0x401c0000
 8010630:	40140000 	.word	0x40140000
 8010634:	3fe00000 	.word	0x3fe00000
 8010638:	e9dd 6700 	ldrd	r6, r7, [sp]
 801063c:	465d      	mov	r5, fp
 801063e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010642:	4630      	mov	r0, r6
 8010644:	4639      	mov	r1, r7
 8010646:	f7f0 f929 	bl	800089c <__aeabi_ddiv>
 801064a:	f7f0 faad 	bl	8000ba8 <__aeabi_d2iz>
 801064e:	4680      	mov	r8, r0
 8010650:	f7ef ff90 	bl	8000574 <__aeabi_i2d>
 8010654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010658:	f7ef fff6 	bl	8000648 <__aeabi_dmul>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	4630      	mov	r0, r6
 8010662:	4639      	mov	r1, r7
 8010664:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010668:	f7ef fe36 	bl	80002d8 <__aeabi_dsub>
 801066c:	f805 6b01 	strb.w	r6, [r5], #1
 8010670:	eba5 060b 	sub.w	r6, r5, fp
 8010674:	45b1      	cmp	r9, r6
 8010676:	4602      	mov	r2, r0
 8010678:	460b      	mov	r3, r1
 801067a:	d139      	bne.n	80106f0 <_dtoa_r+0x6c8>
 801067c:	f7ef fe2e 	bl	80002dc <__adddf3>
 8010680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010684:	4606      	mov	r6, r0
 8010686:	460f      	mov	r7, r1
 8010688:	f7f0 fa6e 	bl	8000b68 <__aeabi_dcmpgt>
 801068c:	b9c8      	cbnz	r0, 80106c2 <_dtoa_r+0x69a>
 801068e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010692:	4630      	mov	r0, r6
 8010694:	4639      	mov	r1, r7
 8010696:	f7f0 fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 801069a:	b110      	cbz	r0, 80106a2 <_dtoa_r+0x67a>
 801069c:	f018 0f01 	tst.w	r8, #1
 80106a0:	d10f      	bne.n	80106c2 <_dtoa_r+0x69a>
 80106a2:	9904      	ldr	r1, [sp, #16]
 80106a4:	4620      	mov	r0, r4
 80106a6:	f000 fcaa 	bl	8010ffe <_Bfree>
 80106aa:	2300      	movs	r3, #0
 80106ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80106ae:	702b      	strb	r3, [r5, #0]
 80106b0:	f10a 0301 	add.w	r3, sl, #1
 80106b4:	6013      	str	r3, [r2, #0]
 80106b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 8241 	beq.w	8010b40 <_dtoa_r+0xb18>
 80106be:	601d      	str	r5, [r3, #0]
 80106c0:	e23e      	b.n	8010b40 <_dtoa_r+0xb18>
 80106c2:	f8cd a020 	str.w	sl, [sp, #32]
 80106c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80106ca:	2a39      	cmp	r2, #57	; 0x39
 80106cc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80106d0:	d108      	bne.n	80106e4 <_dtoa_r+0x6bc>
 80106d2:	459b      	cmp	fp, r3
 80106d4:	d10a      	bne.n	80106ec <_dtoa_r+0x6c4>
 80106d6:	9b08      	ldr	r3, [sp, #32]
 80106d8:	3301      	adds	r3, #1
 80106da:	9308      	str	r3, [sp, #32]
 80106dc:	2330      	movs	r3, #48	; 0x30
 80106de:	f88b 3000 	strb.w	r3, [fp]
 80106e2:	465b      	mov	r3, fp
 80106e4:	781a      	ldrb	r2, [r3, #0]
 80106e6:	3201      	adds	r2, #1
 80106e8:	701a      	strb	r2, [r3, #0]
 80106ea:	e78c      	b.n	8010606 <_dtoa_r+0x5de>
 80106ec:	461d      	mov	r5, r3
 80106ee:	e7ea      	b.n	80106c6 <_dtoa_r+0x69e>
 80106f0:	2200      	movs	r2, #0
 80106f2:	4b9b      	ldr	r3, [pc, #620]	; (8010960 <_dtoa_r+0x938>)
 80106f4:	f7ef ffa8 	bl	8000648 <__aeabi_dmul>
 80106f8:	2200      	movs	r2, #0
 80106fa:	2300      	movs	r3, #0
 80106fc:	4606      	mov	r6, r0
 80106fe:	460f      	mov	r7, r1
 8010700:	f7f0 fa0a 	bl	8000b18 <__aeabi_dcmpeq>
 8010704:	2800      	cmp	r0, #0
 8010706:	d09a      	beq.n	801063e <_dtoa_r+0x616>
 8010708:	e7cb      	b.n	80106a2 <_dtoa_r+0x67a>
 801070a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801070c:	2a00      	cmp	r2, #0
 801070e:	f000 808b 	beq.w	8010828 <_dtoa_r+0x800>
 8010712:	9a06      	ldr	r2, [sp, #24]
 8010714:	2a01      	cmp	r2, #1
 8010716:	dc6e      	bgt.n	80107f6 <_dtoa_r+0x7ce>
 8010718:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801071a:	2a00      	cmp	r2, #0
 801071c:	d067      	beq.n	80107ee <_dtoa_r+0x7c6>
 801071e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010722:	9f07      	ldr	r7, [sp, #28]
 8010724:	9d05      	ldr	r5, [sp, #20]
 8010726:	9a05      	ldr	r2, [sp, #20]
 8010728:	2101      	movs	r1, #1
 801072a:	441a      	add	r2, r3
 801072c:	4620      	mov	r0, r4
 801072e:	9205      	str	r2, [sp, #20]
 8010730:	4498      	add	r8, r3
 8010732:	f000 fd04 	bl	801113e <__i2b>
 8010736:	4606      	mov	r6, r0
 8010738:	2d00      	cmp	r5, #0
 801073a:	dd0c      	ble.n	8010756 <_dtoa_r+0x72e>
 801073c:	f1b8 0f00 	cmp.w	r8, #0
 8010740:	dd09      	ble.n	8010756 <_dtoa_r+0x72e>
 8010742:	4545      	cmp	r5, r8
 8010744:	9a05      	ldr	r2, [sp, #20]
 8010746:	462b      	mov	r3, r5
 8010748:	bfa8      	it	ge
 801074a:	4643      	movge	r3, r8
 801074c:	1ad2      	subs	r2, r2, r3
 801074e:	9205      	str	r2, [sp, #20]
 8010750:	1aed      	subs	r5, r5, r3
 8010752:	eba8 0803 	sub.w	r8, r8, r3
 8010756:	9b07      	ldr	r3, [sp, #28]
 8010758:	b1eb      	cbz	r3, 8010796 <_dtoa_r+0x76e>
 801075a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801075c:	2b00      	cmp	r3, #0
 801075e:	d067      	beq.n	8010830 <_dtoa_r+0x808>
 8010760:	b18f      	cbz	r7, 8010786 <_dtoa_r+0x75e>
 8010762:	4631      	mov	r1, r6
 8010764:	463a      	mov	r2, r7
 8010766:	4620      	mov	r0, r4
 8010768:	f000 fd88 	bl	801127c <__pow5mult>
 801076c:	9a04      	ldr	r2, [sp, #16]
 801076e:	4601      	mov	r1, r0
 8010770:	4606      	mov	r6, r0
 8010772:	4620      	mov	r0, r4
 8010774:	f000 fcec 	bl	8011150 <__multiply>
 8010778:	9904      	ldr	r1, [sp, #16]
 801077a:	9008      	str	r0, [sp, #32]
 801077c:	4620      	mov	r0, r4
 801077e:	f000 fc3e 	bl	8010ffe <_Bfree>
 8010782:	9b08      	ldr	r3, [sp, #32]
 8010784:	9304      	str	r3, [sp, #16]
 8010786:	9b07      	ldr	r3, [sp, #28]
 8010788:	1bda      	subs	r2, r3, r7
 801078a:	d004      	beq.n	8010796 <_dtoa_r+0x76e>
 801078c:	9904      	ldr	r1, [sp, #16]
 801078e:	4620      	mov	r0, r4
 8010790:	f000 fd74 	bl	801127c <__pow5mult>
 8010794:	9004      	str	r0, [sp, #16]
 8010796:	2101      	movs	r1, #1
 8010798:	4620      	mov	r0, r4
 801079a:	f000 fcd0 	bl	801113e <__i2b>
 801079e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107a0:	4607      	mov	r7, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 81d0 	beq.w	8010b48 <_dtoa_r+0xb20>
 80107a8:	461a      	mov	r2, r3
 80107aa:	4601      	mov	r1, r0
 80107ac:	4620      	mov	r0, r4
 80107ae:	f000 fd65 	bl	801127c <__pow5mult>
 80107b2:	9b06      	ldr	r3, [sp, #24]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	4607      	mov	r7, r0
 80107b8:	dc40      	bgt.n	801083c <_dtoa_r+0x814>
 80107ba:	9b00      	ldr	r3, [sp, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d139      	bne.n	8010834 <_dtoa_r+0x80c>
 80107c0:	9b01      	ldr	r3, [sp, #4]
 80107c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d136      	bne.n	8010838 <_dtoa_r+0x810>
 80107ca:	9b01      	ldr	r3, [sp, #4]
 80107cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107d0:	0d1b      	lsrs	r3, r3, #20
 80107d2:	051b      	lsls	r3, r3, #20
 80107d4:	b12b      	cbz	r3, 80107e2 <_dtoa_r+0x7ba>
 80107d6:	9b05      	ldr	r3, [sp, #20]
 80107d8:	3301      	adds	r3, #1
 80107da:	9305      	str	r3, [sp, #20]
 80107dc:	f108 0801 	add.w	r8, r8, #1
 80107e0:	2301      	movs	r3, #1
 80107e2:	9307      	str	r3, [sp, #28]
 80107e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d12a      	bne.n	8010840 <_dtoa_r+0x818>
 80107ea:	2001      	movs	r0, #1
 80107ec:	e030      	b.n	8010850 <_dtoa_r+0x828>
 80107ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80107f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80107f4:	e795      	b.n	8010722 <_dtoa_r+0x6fa>
 80107f6:	9b07      	ldr	r3, [sp, #28]
 80107f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80107fc:	42bb      	cmp	r3, r7
 80107fe:	bfbf      	itttt	lt
 8010800:	9b07      	ldrlt	r3, [sp, #28]
 8010802:	9707      	strlt	r7, [sp, #28]
 8010804:	1afa      	sublt	r2, r7, r3
 8010806:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010808:	bfbb      	ittet	lt
 801080a:	189b      	addlt	r3, r3, r2
 801080c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801080e:	1bdf      	subge	r7, r3, r7
 8010810:	2700      	movlt	r7, #0
 8010812:	f1b9 0f00 	cmp.w	r9, #0
 8010816:	bfb5      	itete	lt
 8010818:	9b05      	ldrlt	r3, [sp, #20]
 801081a:	9d05      	ldrge	r5, [sp, #20]
 801081c:	eba3 0509 	sublt.w	r5, r3, r9
 8010820:	464b      	movge	r3, r9
 8010822:	bfb8      	it	lt
 8010824:	2300      	movlt	r3, #0
 8010826:	e77e      	b.n	8010726 <_dtoa_r+0x6fe>
 8010828:	9f07      	ldr	r7, [sp, #28]
 801082a:	9d05      	ldr	r5, [sp, #20]
 801082c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801082e:	e783      	b.n	8010738 <_dtoa_r+0x710>
 8010830:	9a07      	ldr	r2, [sp, #28]
 8010832:	e7ab      	b.n	801078c <_dtoa_r+0x764>
 8010834:	2300      	movs	r3, #0
 8010836:	e7d4      	b.n	80107e2 <_dtoa_r+0x7ba>
 8010838:	9b00      	ldr	r3, [sp, #0]
 801083a:	e7d2      	b.n	80107e2 <_dtoa_r+0x7ba>
 801083c:	2300      	movs	r3, #0
 801083e:	9307      	str	r3, [sp, #28]
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010846:	6918      	ldr	r0, [r3, #16]
 8010848:	f000 fc2b 	bl	80110a2 <__hi0bits>
 801084c:	f1c0 0020 	rsb	r0, r0, #32
 8010850:	4440      	add	r0, r8
 8010852:	f010 001f 	ands.w	r0, r0, #31
 8010856:	d047      	beq.n	80108e8 <_dtoa_r+0x8c0>
 8010858:	f1c0 0320 	rsb	r3, r0, #32
 801085c:	2b04      	cmp	r3, #4
 801085e:	dd3b      	ble.n	80108d8 <_dtoa_r+0x8b0>
 8010860:	9b05      	ldr	r3, [sp, #20]
 8010862:	f1c0 001c 	rsb	r0, r0, #28
 8010866:	4403      	add	r3, r0
 8010868:	9305      	str	r3, [sp, #20]
 801086a:	4405      	add	r5, r0
 801086c:	4480      	add	r8, r0
 801086e:	9b05      	ldr	r3, [sp, #20]
 8010870:	2b00      	cmp	r3, #0
 8010872:	dd05      	ble.n	8010880 <_dtoa_r+0x858>
 8010874:	461a      	mov	r2, r3
 8010876:	9904      	ldr	r1, [sp, #16]
 8010878:	4620      	mov	r0, r4
 801087a:	f000 fd4d 	bl	8011318 <__lshift>
 801087e:	9004      	str	r0, [sp, #16]
 8010880:	f1b8 0f00 	cmp.w	r8, #0
 8010884:	dd05      	ble.n	8010892 <_dtoa_r+0x86a>
 8010886:	4639      	mov	r1, r7
 8010888:	4642      	mov	r2, r8
 801088a:	4620      	mov	r0, r4
 801088c:	f000 fd44 	bl	8011318 <__lshift>
 8010890:	4607      	mov	r7, r0
 8010892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010894:	b353      	cbz	r3, 80108ec <_dtoa_r+0x8c4>
 8010896:	4639      	mov	r1, r7
 8010898:	9804      	ldr	r0, [sp, #16]
 801089a:	f000 fd91 	bl	80113c0 <__mcmp>
 801089e:	2800      	cmp	r0, #0
 80108a0:	da24      	bge.n	80108ec <_dtoa_r+0x8c4>
 80108a2:	2300      	movs	r3, #0
 80108a4:	220a      	movs	r2, #10
 80108a6:	9904      	ldr	r1, [sp, #16]
 80108a8:	4620      	mov	r0, r4
 80108aa:	f000 fbbf 	bl	801102c <__multadd>
 80108ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108b0:	9004      	str	r0, [sp, #16]
 80108b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f000 814d 	beq.w	8010b56 <_dtoa_r+0xb2e>
 80108bc:	2300      	movs	r3, #0
 80108be:	4631      	mov	r1, r6
 80108c0:	220a      	movs	r2, #10
 80108c2:	4620      	mov	r0, r4
 80108c4:	f000 fbb2 	bl	801102c <__multadd>
 80108c8:	9b02      	ldr	r3, [sp, #8]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	4606      	mov	r6, r0
 80108ce:	dc4f      	bgt.n	8010970 <_dtoa_r+0x948>
 80108d0:	9b06      	ldr	r3, [sp, #24]
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	dd4c      	ble.n	8010970 <_dtoa_r+0x948>
 80108d6:	e011      	b.n	80108fc <_dtoa_r+0x8d4>
 80108d8:	d0c9      	beq.n	801086e <_dtoa_r+0x846>
 80108da:	9a05      	ldr	r2, [sp, #20]
 80108dc:	331c      	adds	r3, #28
 80108de:	441a      	add	r2, r3
 80108e0:	9205      	str	r2, [sp, #20]
 80108e2:	441d      	add	r5, r3
 80108e4:	4498      	add	r8, r3
 80108e6:	e7c2      	b.n	801086e <_dtoa_r+0x846>
 80108e8:	4603      	mov	r3, r0
 80108ea:	e7f6      	b.n	80108da <_dtoa_r+0x8b2>
 80108ec:	f1b9 0f00 	cmp.w	r9, #0
 80108f0:	dc38      	bgt.n	8010964 <_dtoa_r+0x93c>
 80108f2:	9b06      	ldr	r3, [sp, #24]
 80108f4:	2b02      	cmp	r3, #2
 80108f6:	dd35      	ble.n	8010964 <_dtoa_r+0x93c>
 80108f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80108fc:	9b02      	ldr	r3, [sp, #8]
 80108fe:	b963      	cbnz	r3, 801091a <_dtoa_r+0x8f2>
 8010900:	4639      	mov	r1, r7
 8010902:	2205      	movs	r2, #5
 8010904:	4620      	mov	r0, r4
 8010906:	f000 fb91 	bl	801102c <__multadd>
 801090a:	4601      	mov	r1, r0
 801090c:	4607      	mov	r7, r0
 801090e:	9804      	ldr	r0, [sp, #16]
 8010910:	f000 fd56 	bl	80113c0 <__mcmp>
 8010914:	2800      	cmp	r0, #0
 8010916:	f73f adcc 	bgt.w	80104b2 <_dtoa_r+0x48a>
 801091a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801091c:	465d      	mov	r5, fp
 801091e:	ea6f 0a03 	mvn.w	sl, r3
 8010922:	f04f 0900 	mov.w	r9, #0
 8010926:	4639      	mov	r1, r7
 8010928:	4620      	mov	r0, r4
 801092a:	f000 fb68 	bl	8010ffe <_Bfree>
 801092e:	2e00      	cmp	r6, #0
 8010930:	f43f aeb7 	beq.w	80106a2 <_dtoa_r+0x67a>
 8010934:	f1b9 0f00 	cmp.w	r9, #0
 8010938:	d005      	beq.n	8010946 <_dtoa_r+0x91e>
 801093a:	45b1      	cmp	r9, r6
 801093c:	d003      	beq.n	8010946 <_dtoa_r+0x91e>
 801093e:	4649      	mov	r1, r9
 8010940:	4620      	mov	r0, r4
 8010942:	f000 fb5c 	bl	8010ffe <_Bfree>
 8010946:	4631      	mov	r1, r6
 8010948:	4620      	mov	r0, r4
 801094a:	f000 fb58 	bl	8010ffe <_Bfree>
 801094e:	e6a8      	b.n	80106a2 <_dtoa_r+0x67a>
 8010950:	2700      	movs	r7, #0
 8010952:	463e      	mov	r6, r7
 8010954:	e7e1      	b.n	801091a <_dtoa_r+0x8f2>
 8010956:	f8dd a020 	ldr.w	sl, [sp, #32]
 801095a:	463e      	mov	r6, r7
 801095c:	e5a9      	b.n	80104b2 <_dtoa_r+0x48a>
 801095e:	bf00      	nop
 8010960:	40240000 	.word	0x40240000
 8010964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010966:	f8cd 9008 	str.w	r9, [sp, #8]
 801096a:	2b00      	cmp	r3, #0
 801096c:	f000 80fa 	beq.w	8010b64 <_dtoa_r+0xb3c>
 8010970:	2d00      	cmp	r5, #0
 8010972:	dd05      	ble.n	8010980 <_dtoa_r+0x958>
 8010974:	4631      	mov	r1, r6
 8010976:	462a      	mov	r2, r5
 8010978:	4620      	mov	r0, r4
 801097a:	f000 fccd 	bl	8011318 <__lshift>
 801097e:	4606      	mov	r6, r0
 8010980:	9b07      	ldr	r3, [sp, #28]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d04c      	beq.n	8010a20 <_dtoa_r+0x9f8>
 8010986:	6871      	ldr	r1, [r6, #4]
 8010988:	4620      	mov	r0, r4
 801098a:	f000 fb04 	bl	8010f96 <_Balloc>
 801098e:	6932      	ldr	r2, [r6, #16]
 8010990:	3202      	adds	r2, #2
 8010992:	4605      	mov	r5, r0
 8010994:	0092      	lsls	r2, r2, #2
 8010996:	f106 010c 	add.w	r1, r6, #12
 801099a:	300c      	adds	r0, #12
 801099c:	f000 faf0 	bl	8010f80 <memcpy>
 80109a0:	2201      	movs	r2, #1
 80109a2:	4629      	mov	r1, r5
 80109a4:	4620      	mov	r0, r4
 80109a6:	f000 fcb7 	bl	8011318 <__lshift>
 80109aa:	9b00      	ldr	r3, [sp, #0]
 80109ac:	f8cd b014 	str.w	fp, [sp, #20]
 80109b0:	f003 0301 	and.w	r3, r3, #1
 80109b4:	46b1      	mov	r9, r6
 80109b6:	9307      	str	r3, [sp, #28]
 80109b8:	4606      	mov	r6, r0
 80109ba:	4639      	mov	r1, r7
 80109bc:	9804      	ldr	r0, [sp, #16]
 80109be:	f7ff faa7 	bl	800ff10 <quorem>
 80109c2:	4649      	mov	r1, r9
 80109c4:	4605      	mov	r5, r0
 80109c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80109ca:	9804      	ldr	r0, [sp, #16]
 80109cc:	f000 fcf8 	bl	80113c0 <__mcmp>
 80109d0:	4632      	mov	r2, r6
 80109d2:	9000      	str	r0, [sp, #0]
 80109d4:	4639      	mov	r1, r7
 80109d6:	4620      	mov	r0, r4
 80109d8:	f000 fd0c 	bl	80113f4 <__mdiff>
 80109dc:	68c3      	ldr	r3, [r0, #12]
 80109de:	4602      	mov	r2, r0
 80109e0:	bb03      	cbnz	r3, 8010a24 <_dtoa_r+0x9fc>
 80109e2:	4601      	mov	r1, r0
 80109e4:	9008      	str	r0, [sp, #32]
 80109e6:	9804      	ldr	r0, [sp, #16]
 80109e8:	f000 fcea 	bl	80113c0 <__mcmp>
 80109ec:	9a08      	ldr	r2, [sp, #32]
 80109ee:	4603      	mov	r3, r0
 80109f0:	4611      	mov	r1, r2
 80109f2:	4620      	mov	r0, r4
 80109f4:	9308      	str	r3, [sp, #32]
 80109f6:	f000 fb02 	bl	8010ffe <_Bfree>
 80109fa:	9b08      	ldr	r3, [sp, #32]
 80109fc:	b9a3      	cbnz	r3, 8010a28 <_dtoa_r+0xa00>
 80109fe:	9a06      	ldr	r2, [sp, #24]
 8010a00:	b992      	cbnz	r2, 8010a28 <_dtoa_r+0xa00>
 8010a02:	9a07      	ldr	r2, [sp, #28]
 8010a04:	b982      	cbnz	r2, 8010a28 <_dtoa_r+0xa00>
 8010a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010a0a:	d029      	beq.n	8010a60 <_dtoa_r+0xa38>
 8010a0c:	9b00      	ldr	r3, [sp, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	dd01      	ble.n	8010a16 <_dtoa_r+0x9ee>
 8010a12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010a16:	9b05      	ldr	r3, [sp, #20]
 8010a18:	1c5d      	adds	r5, r3, #1
 8010a1a:	f883 8000 	strb.w	r8, [r3]
 8010a1e:	e782      	b.n	8010926 <_dtoa_r+0x8fe>
 8010a20:	4630      	mov	r0, r6
 8010a22:	e7c2      	b.n	80109aa <_dtoa_r+0x982>
 8010a24:	2301      	movs	r3, #1
 8010a26:	e7e3      	b.n	80109f0 <_dtoa_r+0x9c8>
 8010a28:	9a00      	ldr	r2, [sp, #0]
 8010a2a:	2a00      	cmp	r2, #0
 8010a2c:	db04      	blt.n	8010a38 <_dtoa_r+0xa10>
 8010a2e:	d125      	bne.n	8010a7c <_dtoa_r+0xa54>
 8010a30:	9a06      	ldr	r2, [sp, #24]
 8010a32:	bb1a      	cbnz	r2, 8010a7c <_dtoa_r+0xa54>
 8010a34:	9a07      	ldr	r2, [sp, #28]
 8010a36:	bb0a      	cbnz	r2, 8010a7c <_dtoa_r+0xa54>
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	ddec      	ble.n	8010a16 <_dtoa_r+0x9ee>
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	9904      	ldr	r1, [sp, #16]
 8010a40:	4620      	mov	r0, r4
 8010a42:	f000 fc69 	bl	8011318 <__lshift>
 8010a46:	4639      	mov	r1, r7
 8010a48:	9004      	str	r0, [sp, #16]
 8010a4a:	f000 fcb9 	bl	80113c0 <__mcmp>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	dc03      	bgt.n	8010a5a <_dtoa_r+0xa32>
 8010a52:	d1e0      	bne.n	8010a16 <_dtoa_r+0x9ee>
 8010a54:	f018 0f01 	tst.w	r8, #1
 8010a58:	d0dd      	beq.n	8010a16 <_dtoa_r+0x9ee>
 8010a5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010a5e:	d1d8      	bne.n	8010a12 <_dtoa_r+0x9ea>
 8010a60:	9b05      	ldr	r3, [sp, #20]
 8010a62:	9a05      	ldr	r2, [sp, #20]
 8010a64:	1c5d      	adds	r5, r3, #1
 8010a66:	2339      	movs	r3, #57	; 0x39
 8010a68:	7013      	strb	r3, [r2, #0]
 8010a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010a6e:	2b39      	cmp	r3, #57	; 0x39
 8010a70:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010a74:	d04f      	beq.n	8010b16 <_dtoa_r+0xaee>
 8010a76:	3301      	adds	r3, #1
 8010a78:	7013      	strb	r3, [r2, #0]
 8010a7a:	e754      	b.n	8010926 <_dtoa_r+0x8fe>
 8010a7c:	9a05      	ldr	r2, [sp, #20]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f102 0501 	add.w	r5, r2, #1
 8010a84:	dd06      	ble.n	8010a94 <_dtoa_r+0xa6c>
 8010a86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010a8a:	d0e9      	beq.n	8010a60 <_dtoa_r+0xa38>
 8010a8c:	f108 0801 	add.w	r8, r8, #1
 8010a90:	9b05      	ldr	r3, [sp, #20]
 8010a92:	e7c2      	b.n	8010a1a <_dtoa_r+0x9f2>
 8010a94:	9a02      	ldr	r2, [sp, #8]
 8010a96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010a9a:	eba5 030b 	sub.w	r3, r5, fp
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d021      	beq.n	8010ae6 <_dtoa_r+0xabe>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	220a      	movs	r2, #10
 8010aa6:	9904      	ldr	r1, [sp, #16]
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f000 fabf 	bl	801102c <__multadd>
 8010aae:	45b1      	cmp	r9, r6
 8010ab0:	9004      	str	r0, [sp, #16]
 8010ab2:	f04f 0300 	mov.w	r3, #0
 8010ab6:	f04f 020a 	mov.w	r2, #10
 8010aba:	4649      	mov	r1, r9
 8010abc:	4620      	mov	r0, r4
 8010abe:	d105      	bne.n	8010acc <_dtoa_r+0xaa4>
 8010ac0:	f000 fab4 	bl	801102c <__multadd>
 8010ac4:	4681      	mov	r9, r0
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	9505      	str	r5, [sp, #20]
 8010aca:	e776      	b.n	80109ba <_dtoa_r+0x992>
 8010acc:	f000 faae 	bl	801102c <__multadd>
 8010ad0:	4631      	mov	r1, r6
 8010ad2:	4681      	mov	r9, r0
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	220a      	movs	r2, #10
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 faa7 	bl	801102c <__multadd>
 8010ade:	4606      	mov	r6, r0
 8010ae0:	e7f2      	b.n	8010ac8 <_dtoa_r+0xaa0>
 8010ae2:	f04f 0900 	mov.w	r9, #0
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	9904      	ldr	r1, [sp, #16]
 8010aea:	4620      	mov	r0, r4
 8010aec:	f000 fc14 	bl	8011318 <__lshift>
 8010af0:	4639      	mov	r1, r7
 8010af2:	9004      	str	r0, [sp, #16]
 8010af4:	f000 fc64 	bl	80113c0 <__mcmp>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	dcb6      	bgt.n	8010a6a <_dtoa_r+0xa42>
 8010afc:	d102      	bne.n	8010b04 <_dtoa_r+0xadc>
 8010afe:	f018 0f01 	tst.w	r8, #1
 8010b02:	d1b2      	bne.n	8010a6a <_dtoa_r+0xa42>
 8010b04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b08:	2b30      	cmp	r3, #48	; 0x30
 8010b0a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010b0e:	f47f af0a 	bne.w	8010926 <_dtoa_r+0x8fe>
 8010b12:	4615      	mov	r5, r2
 8010b14:	e7f6      	b.n	8010b04 <_dtoa_r+0xadc>
 8010b16:	4593      	cmp	fp, r2
 8010b18:	d105      	bne.n	8010b26 <_dtoa_r+0xafe>
 8010b1a:	2331      	movs	r3, #49	; 0x31
 8010b1c:	f10a 0a01 	add.w	sl, sl, #1
 8010b20:	f88b 3000 	strb.w	r3, [fp]
 8010b24:	e6ff      	b.n	8010926 <_dtoa_r+0x8fe>
 8010b26:	4615      	mov	r5, r2
 8010b28:	e79f      	b.n	8010a6a <_dtoa_r+0xa42>
 8010b2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010b90 <_dtoa_r+0xb68>
 8010b2e:	e007      	b.n	8010b40 <_dtoa_r+0xb18>
 8010b30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010b94 <_dtoa_r+0xb6c>
 8010b36:	b11b      	cbz	r3, 8010b40 <_dtoa_r+0xb18>
 8010b38:	f10b 0308 	add.w	r3, fp, #8
 8010b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b3e:	6013      	str	r3, [r2, #0]
 8010b40:	4658      	mov	r0, fp
 8010b42:	b017      	add	sp, #92	; 0x5c
 8010b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	f77f ae35 	ble.w	80107ba <_dtoa_r+0x792>
 8010b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b52:	9307      	str	r3, [sp, #28]
 8010b54:	e649      	b.n	80107ea <_dtoa_r+0x7c2>
 8010b56:	9b02      	ldr	r3, [sp, #8]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	dc03      	bgt.n	8010b64 <_dtoa_r+0xb3c>
 8010b5c:	9b06      	ldr	r3, [sp, #24]
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	f73f aecc 	bgt.w	80108fc <_dtoa_r+0x8d4>
 8010b64:	465d      	mov	r5, fp
 8010b66:	4639      	mov	r1, r7
 8010b68:	9804      	ldr	r0, [sp, #16]
 8010b6a:	f7ff f9d1 	bl	800ff10 <quorem>
 8010b6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010b72:	f805 8b01 	strb.w	r8, [r5], #1
 8010b76:	9a02      	ldr	r2, [sp, #8]
 8010b78:	eba5 030b 	sub.w	r3, r5, fp
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	ddb0      	ble.n	8010ae2 <_dtoa_r+0xaba>
 8010b80:	2300      	movs	r3, #0
 8010b82:	220a      	movs	r2, #10
 8010b84:	9904      	ldr	r1, [sp, #16]
 8010b86:	4620      	mov	r0, r4
 8010b88:	f000 fa50 	bl	801102c <__multadd>
 8010b8c:	9004      	str	r0, [sp, #16]
 8010b8e:	e7ea      	b.n	8010b66 <_dtoa_r+0xb3e>
 8010b90:	0801465c 	.word	0x0801465c
 8010b94:	080143d2 	.word	0x080143d2

08010b98 <__sflush_r>:
 8010b98:	898a      	ldrh	r2, [r1, #12]
 8010b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9e:	4605      	mov	r5, r0
 8010ba0:	0710      	lsls	r0, r2, #28
 8010ba2:	460c      	mov	r4, r1
 8010ba4:	d458      	bmi.n	8010c58 <__sflush_r+0xc0>
 8010ba6:	684b      	ldr	r3, [r1, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	dc05      	bgt.n	8010bb8 <__sflush_r+0x20>
 8010bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dc02      	bgt.n	8010bb8 <__sflush_r+0x20>
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bba:	2e00      	cmp	r6, #0
 8010bbc:	d0f9      	beq.n	8010bb2 <__sflush_r+0x1a>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010bc4:	682f      	ldr	r7, [r5, #0]
 8010bc6:	6a21      	ldr	r1, [r4, #32]
 8010bc8:	602b      	str	r3, [r5, #0]
 8010bca:	d032      	beq.n	8010c32 <__sflush_r+0x9a>
 8010bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010bce:	89a3      	ldrh	r3, [r4, #12]
 8010bd0:	075a      	lsls	r2, r3, #29
 8010bd2:	d505      	bpl.n	8010be0 <__sflush_r+0x48>
 8010bd4:	6863      	ldr	r3, [r4, #4]
 8010bd6:	1ac0      	subs	r0, r0, r3
 8010bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bda:	b10b      	cbz	r3, 8010be0 <__sflush_r+0x48>
 8010bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bde:	1ac0      	subs	r0, r0, r3
 8010be0:	2300      	movs	r3, #0
 8010be2:	4602      	mov	r2, r0
 8010be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010be6:	6a21      	ldr	r1, [r4, #32]
 8010be8:	4628      	mov	r0, r5
 8010bea:	47b0      	blx	r6
 8010bec:	1c43      	adds	r3, r0, #1
 8010bee:	89a3      	ldrh	r3, [r4, #12]
 8010bf0:	d106      	bne.n	8010c00 <__sflush_r+0x68>
 8010bf2:	6829      	ldr	r1, [r5, #0]
 8010bf4:	291d      	cmp	r1, #29
 8010bf6:	d848      	bhi.n	8010c8a <__sflush_r+0xf2>
 8010bf8:	4a29      	ldr	r2, [pc, #164]	; (8010ca0 <__sflush_r+0x108>)
 8010bfa:	40ca      	lsrs	r2, r1
 8010bfc:	07d6      	lsls	r6, r2, #31
 8010bfe:	d544      	bpl.n	8010c8a <__sflush_r+0xf2>
 8010c00:	2200      	movs	r2, #0
 8010c02:	6062      	str	r2, [r4, #4]
 8010c04:	04d9      	lsls	r1, r3, #19
 8010c06:	6922      	ldr	r2, [r4, #16]
 8010c08:	6022      	str	r2, [r4, #0]
 8010c0a:	d504      	bpl.n	8010c16 <__sflush_r+0x7e>
 8010c0c:	1c42      	adds	r2, r0, #1
 8010c0e:	d101      	bne.n	8010c14 <__sflush_r+0x7c>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	b903      	cbnz	r3, 8010c16 <__sflush_r+0x7e>
 8010c14:	6560      	str	r0, [r4, #84]	; 0x54
 8010c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c18:	602f      	str	r7, [r5, #0]
 8010c1a:	2900      	cmp	r1, #0
 8010c1c:	d0c9      	beq.n	8010bb2 <__sflush_r+0x1a>
 8010c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c22:	4299      	cmp	r1, r3
 8010c24:	d002      	beq.n	8010c2c <__sflush_r+0x94>
 8010c26:	4628      	mov	r0, r5
 8010c28:	f000 fc9e 	bl	8011568 <_free_r>
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8010c30:	e7c0      	b.n	8010bb4 <__sflush_r+0x1c>
 8010c32:	2301      	movs	r3, #1
 8010c34:	4628      	mov	r0, r5
 8010c36:	47b0      	blx	r6
 8010c38:	1c41      	adds	r1, r0, #1
 8010c3a:	d1c8      	bne.n	8010bce <__sflush_r+0x36>
 8010c3c:	682b      	ldr	r3, [r5, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d0c5      	beq.n	8010bce <__sflush_r+0x36>
 8010c42:	2b1d      	cmp	r3, #29
 8010c44:	d001      	beq.n	8010c4a <__sflush_r+0xb2>
 8010c46:	2b16      	cmp	r3, #22
 8010c48:	d101      	bne.n	8010c4e <__sflush_r+0xb6>
 8010c4a:	602f      	str	r7, [r5, #0]
 8010c4c:	e7b1      	b.n	8010bb2 <__sflush_r+0x1a>
 8010c4e:	89a3      	ldrh	r3, [r4, #12]
 8010c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c54:	81a3      	strh	r3, [r4, #12]
 8010c56:	e7ad      	b.n	8010bb4 <__sflush_r+0x1c>
 8010c58:	690f      	ldr	r7, [r1, #16]
 8010c5a:	2f00      	cmp	r7, #0
 8010c5c:	d0a9      	beq.n	8010bb2 <__sflush_r+0x1a>
 8010c5e:	0793      	lsls	r3, r2, #30
 8010c60:	680e      	ldr	r6, [r1, #0]
 8010c62:	bf08      	it	eq
 8010c64:	694b      	ldreq	r3, [r1, #20]
 8010c66:	600f      	str	r7, [r1, #0]
 8010c68:	bf18      	it	ne
 8010c6a:	2300      	movne	r3, #0
 8010c6c:	eba6 0807 	sub.w	r8, r6, r7
 8010c70:	608b      	str	r3, [r1, #8]
 8010c72:	f1b8 0f00 	cmp.w	r8, #0
 8010c76:	dd9c      	ble.n	8010bb2 <__sflush_r+0x1a>
 8010c78:	4643      	mov	r3, r8
 8010c7a:	463a      	mov	r2, r7
 8010c7c:	6a21      	ldr	r1, [r4, #32]
 8010c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c80:	4628      	mov	r0, r5
 8010c82:	47b0      	blx	r6
 8010c84:	2800      	cmp	r0, #0
 8010c86:	dc06      	bgt.n	8010c96 <__sflush_r+0xfe>
 8010c88:	89a3      	ldrh	r3, [r4, #12]
 8010c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c8e:	81a3      	strh	r3, [r4, #12]
 8010c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c94:	e78e      	b.n	8010bb4 <__sflush_r+0x1c>
 8010c96:	4407      	add	r7, r0
 8010c98:	eba8 0800 	sub.w	r8, r8, r0
 8010c9c:	e7e9      	b.n	8010c72 <__sflush_r+0xda>
 8010c9e:	bf00      	nop
 8010ca0:	20400001 	.word	0x20400001

08010ca4 <_fflush_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	690b      	ldr	r3, [r1, #16]
 8010ca8:	4605      	mov	r5, r0
 8010caa:	460c      	mov	r4, r1
 8010cac:	b1db      	cbz	r3, 8010ce6 <_fflush_r+0x42>
 8010cae:	b118      	cbz	r0, 8010cb8 <_fflush_r+0x14>
 8010cb0:	6983      	ldr	r3, [r0, #24]
 8010cb2:	b90b      	cbnz	r3, 8010cb8 <_fflush_r+0x14>
 8010cb4:	f000 f860 	bl	8010d78 <__sinit>
 8010cb8:	4b0c      	ldr	r3, [pc, #48]	; (8010cec <_fflush_r+0x48>)
 8010cba:	429c      	cmp	r4, r3
 8010cbc:	d109      	bne.n	8010cd2 <_fflush_r+0x2e>
 8010cbe:	686c      	ldr	r4, [r5, #4]
 8010cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cc4:	b17b      	cbz	r3, 8010ce6 <_fflush_r+0x42>
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4628      	mov	r0, r5
 8010cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cce:	f7ff bf63 	b.w	8010b98 <__sflush_r>
 8010cd2:	4b07      	ldr	r3, [pc, #28]	; (8010cf0 <_fflush_r+0x4c>)
 8010cd4:	429c      	cmp	r4, r3
 8010cd6:	d101      	bne.n	8010cdc <_fflush_r+0x38>
 8010cd8:	68ac      	ldr	r4, [r5, #8]
 8010cda:	e7f1      	b.n	8010cc0 <_fflush_r+0x1c>
 8010cdc:	4b05      	ldr	r3, [pc, #20]	; (8010cf4 <_fflush_r+0x50>)
 8010cde:	429c      	cmp	r4, r3
 8010ce0:	bf08      	it	eq
 8010ce2:	68ec      	ldreq	r4, [r5, #12]
 8010ce4:	e7ec      	b.n	8010cc0 <_fflush_r+0x1c>
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	bd38      	pop	{r3, r4, r5, pc}
 8010cea:	bf00      	nop
 8010cec:	08014400 	.word	0x08014400
 8010cf0:	08014420 	.word	0x08014420
 8010cf4:	080143e0 	.word	0x080143e0

08010cf8 <std>:
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	b510      	push	{r4, lr}
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8010d02:	6083      	str	r3, [r0, #8]
 8010d04:	8181      	strh	r1, [r0, #12]
 8010d06:	6643      	str	r3, [r0, #100]	; 0x64
 8010d08:	81c2      	strh	r2, [r0, #14]
 8010d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d0e:	6183      	str	r3, [r0, #24]
 8010d10:	4619      	mov	r1, r3
 8010d12:	2208      	movs	r2, #8
 8010d14:	305c      	adds	r0, #92	; 0x5c
 8010d16:	f7fe fb2f 	bl	800f378 <memset>
 8010d1a:	4b05      	ldr	r3, [pc, #20]	; (8010d30 <std+0x38>)
 8010d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d1e:	4b05      	ldr	r3, [pc, #20]	; (8010d34 <std+0x3c>)
 8010d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d22:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <std+0x40>)
 8010d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d26:	4b05      	ldr	r3, [pc, #20]	; (8010d3c <std+0x44>)
 8010d28:	6224      	str	r4, [r4, #32]
 8010d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8010d2c:	bd10      	pop	{r4, pc}
 8010d2e:	bf00      	nop
 8010d30:	0801197d 	.word	0x0801197d
 8010d34:	0801199f 	.word	0x0801199f
 8010d38:	080119d7 	.word	0x080119d7
 8010d3c:	080119fb 	.word	0x080119fb

08010d40 <_cleanup_r>:
 8010d40:	4901      	ldr	r1, [pc, #4]	; (8010d48 <_cleanup_r+0x8>)
 8010d42:	f000 b885 	b.w	8010e50 <_fwalk_reent>
 8010d46:	bf00      	nop
 8010d48:	08010ca5 	.word	0x08010ca5

08010d4c <__sfmoreglue>:
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	1e4a      	subs	r2, r1, #1
 8010d50:	2568      	movs	r5, #104	; 0x68
 8010d52:	4355      	muls	r5, r2
 8010d54:	460e      	mov	r6, r1
 8010d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d5a:	f000 fc53 	bl	8011604 <_malloc_r>
 8010d5e:	4604      	mov	r4, r0
 8010d60:	b140      	cbz	r0, 8010d74 <__sfmoreglue+0x28>
 8010d62:	2100      	movs	r1, #0
 8010d64:	e9c0 1600 	strd	r1, r6, [r0]
 8010d68:	300c      	adds	r0, #12
 8010d6a:	60a0      	str	r0, [r4, #8]
 8010d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d70:	f7fe fb02 	bl	800f378 <memset>
 8010d74:	4620      	mov	r0, r4
 8010d76:	bd70      	pop	{r4, r5, r6, pc}

08010d78 <__sinit>:
 8010d78:	6983      	ldr	r3, [r0, #24]
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	bb33      	cbnz	r3, 8010dce <__sinit+0x56>
 8010d80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010d84:	6503      	str	r3, [r0, #80]	; 0x50
 8010d86:	4b12      	ldr	r3, [pc, #72]	; (8010dd0 <__sinit+0x58>)
 8010d88:	4a12      	ldr	r2, [pc, #72]	; (8010dd4 <__sinit+0x5c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	6282      	str	r2, [r0, #40]	; 0x28
 8010d8e:	4298      	cmp	r0, r3
 8010d90:	bf04      	itt	eq
 8010d92:	2301      	moveq	r3, #1
 8010d94:	6183      	streq	r3, [r0, #24]
 8010d96:	f000 f81f 	bl	8010dd8 <__sfp>
 8010d9a:	6060      	str	r0, [r4, #4]
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 f81b 	bl	8010dd8 <__sfp>
 8010da2:	60a0      	str	r0, [r4, #8]
 8010da4:	4620      	mov	r0, r4
 8010da6:	f000 f817 	bl	8010dd8 <__sfp>
 8010daa:	2200      	movs	r2, #0
 8010dac:	60e0      	str	r0, [r4, #12]
 8010dae:	2104      	movs	r1, #4
 8010db0:	6860      	ldr	r0, [r4, #4]
 8010db2:	f7ff ffa1 	bl	8010cf8 <std>
 8010db6:	2201      	movs	r2, #1
 8010db8:	2109      	movs	r1, #9
 8010dba:	68a0      	ldr	r0, [r4, #8]
 8010dbc:	f7ff ff9c 	bl	8010cf8 <std>
 8010dc0:	2202      	movs	r2, #2
 8010dc2:	2112      	movs	r1, #18
 8010dc4:	68e0      	ldr	r0, [r4, #12]
 8010dc6:	f7ff ff97 	bl	8010cf8 <std>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	61a3      	str	r3, [r4, #24]
 8010dce:	bd10      	pop	{r4, pc}
 8010dd0:	0801439c 	.word	0x0801439c
 8010dd4:	08010d41 	.word	0x08010d41

08010dd8 <__sfp>:
 8010dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dda:	4b1b      	ldr	r3, [pc, #108]	; (8010e48 <__sfp+0x70>)
 8010ddc:	681e      	ldr	r6, [r3, #0]
 8010dde:	69b3      	ldr	r3, [r6, #24]
 8010de0:	4607      	mov	r7, r0
 8010de2:	b913      	cbnz	r3, 8010dea <__sfp+0x12>
 8010de4:	4630      	mov	r0, r6
 8010de6:	f7ff ffc7 	bl	8010d78 <__sinit>
 8010dea:	3648      	adds	r6, #72	; 0x48
 8010dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010df0:	3b01      	subs	r3, #1
 8010df2:	d503      	bpl.n	8010dfc <__sfp+0x24>
 8010df4:	6833      	ldr	r3, [r6, #0]
 8010df6:	b133      	cbz	r3, 8010e06 <__sfp+0x2e>
 8010df8:	6836      	ldr	r6, [r6, #0]
 8010dfa:	e7f7      	b.n	8010dec <__sfp+0x14>
 8010dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010e00:	b16d      	cbz	r5, 8010e1e <__sfp+0x46>
 8010e02:	3468      	adds	r4, #104	; 0x68
 8010e04:	e7f4      	b.n	8010df0 <__sfp+0x18>
 8010e06:	2104      	movs	r1, #4
 8010e08:	4638      	mov	r0, r7
 8010e0a:	f7ff ff9f 	bl	8010d4c <__sfmoreglue>
 8010e0e:	6030      	str	r0, [r6, #0]
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d1f1      	bne.n	8010df8 <__sfp+0x20>
 8010e14:	230c      	movs	r3, #12
 8010e16:	603b      	str	r3, [r7, #0]
 8010e18:	4604      	mov	r4, r0
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e1e:	4b0b      	ldr	r3, [pc, #44]	; (8010e4c <__sfp+0x74>)
 8010e20:	6665      	str	r5, [r4, #100]	; 0x64
 8010e22:	e9c4 5500 	strd	r5, r5, [r4]
 8010e26:	60a5      	str	r5, [r4, #8]
 8010e28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010e2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010e30:	2208      	movs	r2, #8
 8010e32:	4629      	mov	r1, r5
 8010e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e38:	f7fe fa9e 	bl	800f378 <memset>
 8010e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e44:	e7e9      	b.n	8010e1a <__sfp+0x42>
 8010e46:	bf00      	nop
 8010e48:	0801439c 	.word	0x0801439c
 8010e4c:	ffff0001 	.word	0xffff0001

08010e50 <_fwalk_reent>:
 8010e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e54:	4680      	mov	r8, r0
 8010e56:	4689      	mov	r9, r1
 8010e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e5c:	2600      	movs	r6, #0
 8010e5e:	b914      	cbnz	r4, 8010e66 <_fwalk_reent+0x16>
 8010e60:	4630      	mov	r0, r6
 8010e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010e6a:	3f01      	subs	r7, #1
 8010e6c:	d501      	bpl.n	8010e72 <_fwalk_reent+0x22>
 8010e6e:	6824      	ldr	r4, [r4, #0]
 8010e70:	e7f5      	b.n	8010e5e <_fwalk_reent+0xe>
 8010e72:	89ab      	ldrh	r3, [r5, #12]
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d907      	bls.n	8010e88 <_fwalk_reent+0x38>
 8010e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	d003      	beq.n	8010e88 <_fwalk_reent+0x38>
 8010e80:	4629      	mov	r1, r5
 8010e82:	4640      	mov	r0, r8
 8010e84:	47c8      	blx	r9
 8010e86:	4306      	orrs	r6, r0
 8010e88:	3568      	adds	r5, #104	; 0x68
 8010e8a:	e7ee      	b.n	8010e6a <_fwalk_reent+0x1a>

08010e8c <_localeconv_r>:
 8010e8c:	4b04      	ldr	r3, [pc, #16]	; (8010ea0 <_localeconv_r+0x14>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	6a18      	ldr	r0, [r3, #32]
 8010e92:	4b04      	ldr	r3, [pc, #16]	; (8010ea4 <_localeconv_r+0x18>)
 8010e94:	2800      	cmp	r0, #0
 8010e96:	bf08      	it	eq
 8010e98:	4618      	moveq	r0, r3
 8010e9a:	30f0      	adds	r0, #240	; 0xf0
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	20001cac 	.word	0x20001cac
 8010ea4:	20001d10 	.word	0x20001d10

08010ea8 <__swhatbuf_r>:
 8010ea8:	b570      	push	{r4, r5, r6, lr}
 8010eaa:	460e      	mov	r6, r1
 8010eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010eb0:	2900      	cmp	r1, #0
 8010eb2:	b096      	sub	sp, #88	; 0x58
 8010eb4:	4614      	mov	r4, r2
 8010eb6:	461d      	mov	r5, r3
 8010eb8:	da07      	bge.n	8010eca <__swhatbuf_r+0x22>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	602b      	str	r3, [r5, #0]
 8010ebe:	89b3      	ldrh	r3, [r6, #12]
 8010ec0:	061a      	lsls	r2, r3, #24
 8010ec2:	d410      	bmi.n	8010ee6 <__swhatbuf_r+0x3e>
 8010ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ec8:	e00e      	b.n	8010ee8 <__swhatbuf_r+0x40>
 8010eca:	466a      	mov	r2, sp
 8010ecc:	f000 fdbc 	bl	8011a48 <_fstat_r>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	dbf2      	blt.n	8010eba <__swhatbuf_r+0x12>
 8010ed4:	9a01      	ldr	r2, [sp, #4]
 8010ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ede:	425a      	negs	r2, r3
 8010ee0:	415a      	adcs	r2, r3
 8010ee2:	602a      	str	r2, [r5, #0]
 8010ee4:	e7ee      	b.n	8010ec4 <__swhatbuf_r+0x1c>
 8010ee6:	2340      	movs	r3, #64	; 0x40
 8010ee8:	2000      	movs	r0, #0
 8010eea:	6023      	str	r3, [r4, #0]
 8010eec:	b016      	add	sp, #88	; 0x58
 8010eee:	bd70      	pop	{r4, r5, r6, pc}

08010ef0 <__smakebuf_r>:
 8010ef0:	898b      	ldrh	r3, [r1, #12]
 8010ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ef4:	079d      	lsls	r5, r3, #30
 8010ef6:	4606      	mov	r6, r0
 8010ef8:	460c      	mov	r4, r1
 8010efa:	d507      	bpl.n	8010f0c <__smakebuf_r+0x1c>
 8010efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f00:	6023      	str	r3, [r4, #0]
 8010f02:	6123      	str	r3, [r4, #16]
 8010f04:	2301      	movs	r3, #1
 8010f06:	6163      	str	r3, [r4, #20]
 8010f08:	b002      	add	sp, #8
 8010f0a:	bd70      	pop	{r4, r5, r6, pc}
 8010f0c:	ab01      	add	r3, sp, #4
 8010f0e:	466a      	mov	r2, sp
 8010f10:	f7ff ffca 	bl	8010ea8 <__swhatbuf_r>
 8010f14:	9900      	ldr	r1, [sp, #0]
 8010f16:	4605      	mov	r5, r0
 8010f18:	4630      	mov	r0, r6
 8010f1a:	f000 fb73 	bl	8011604 <_malloc_r>
 8010f1e:	b948      	cbnz	r0, 8010f34 <__smakebuf_r+0x44>
 8010f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f24:	059a      	lsls	r2, r3, #22
 8010f26:	d4ef      	bmi.n	8010f08 <__smakebuf_r+0x18>
 8010f28:	f023 0303 	bic.w	r3, r3, #3
 8010f2c:	f043 0302 	orr.w	r3, r3, #2
 8010f30:	81a3      	strh	r3, [r4, #12]
 8010f32:	e7e3      	b.n	8010efc <__smakebuf_r+0xc>
 8010f34:	4b0d      	ldr	r3, [pc, #52]	; (8010f6c <__smakebuf_r+0x7c>)
 8010f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f38:	89a3      	ldrh	r3, [r4, #12]
 8010f3a:	6020      	str	r0, [r4, #0]
 8010f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f40:	81a3      	strh	r3, [r4, #12]
 8010f42:	9b00      	ldr	r3, [sp, #0]
 8010f44:	6163      	str	r3, [r4, #20]
 8010f46:	9b01      	ldr	r3, [sp, #4]
 8010f48:	6120      	str	r0, [r4, #16]
 8010f4a:	b15b      	cbz	r3, 8010f64 <__smakebuf_r+0x74>
 8010f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f50:	4630      	mov	r0, r6
 8010f52:	f000 fd8b 	bl	8011a6c <_isatty_r>
 8010f56:	b128      	cbz	r0, 8010f64 <__smakebuf_r+0x74>
 8010f58:	89a3      	ldrh	r3, [r4, #12]
 8010f5a:	f023 0303 	bic.w	r3, r3, #3
 8010f5e:	f043 0301 	orr.w	r3, r3, #1
 8010f62:	81a3      	strh	r3, [r4, #12]
 8010f64:	89a3      	ldrh	r3, [r4, #12]
 8010f66:	431d      	orrs	r5, r3
 8010f68:	81a5      	strh	r5, [r4, #12]
 8010f6a:	e7cd      	b.n	8010f08 <__smakebuf_r+0x18>
 8010f6c:	08010d41 	.word	0x08010d41

08010f70 <malloc>:
 8010f70:	4b02      	ldr	r3, [pc, #8]	; (8010f7c <malloc+0xc>)
 8010f72:	4601      	mov	r1, r0
 8010f74:	6818      	ldr	r0, [r3, #0]
 8010f76:	f000 bb45 	b.w	8011604 <_malloc_r>
 8010f7a:	bf00      	nop
 8010f7c:	20001cac 	.word	0x20001cac

08010f80 <memcpy>:
 8010f80:	b510      	push	{r4, lr}
 8010f82:	1e43      	subs	r3, r0, #1
 8010f84:	440a      	add	r2, r1
 8010f86:	4291      	cmp	r1, r2
 8010f88:	d100      	bne.n	8010f8c <memcpy+0xc>
 8010f8a:	bd10      	pop	{r4, pc}
 8010f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f94:	e7f7      	b.n	8010f86 <memcpy+0x6>

08010f96 <_Balloc>:
 8010f96:	b570      	push	{r4, r5, r6, lr}
 8010f98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	460e      	mov	r6, r1
 8010f9e:	b93d      	cbnz	r5, 8010fb0 <_Balloc+0x1a>
 8010fa0:	2010      	movs	r0, #16
 8010fa2:	f7ff ffe5 	bl	8010f70 <malloc>
 8010fa6:	6260      	str	r0, [r4, #36]	; 0x24
 8010fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010fac:	6005      	str	r5, [r0, #0]
 8010fae:	60c5      	str	r5, [r0, #12]
 8010fb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010fb2:	68eb      	ldr	r3, [r5, #12]
 8010fb4:	b183      	cbz	r3, 8010fd8 <_Balloc+0x42>
 8010fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010fbe:	b9b8      	cbnz	r0, 8010ff0 <_Balloc+0x5a>
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	fa01 f506 	lsl.w	r5, r1, r6
 8010fc6:	1d6a      	adds	r2, r5, #5
 8010fc8:	0092      	lsls	r2, r2, #2
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 fabe 	bl	801154c <_calloc_r>
 8010fd0:	b160      	cbz	r0, 8010fec <_Balloc+0x56>
 8010fd2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010fd6:	e00e      	b.n	8010ff6 <_Balloc+0x60>
 8010fd8:	2221      	movs	r2, #33	; 0x21
 8010fda:	2104      	movs	r1, #4
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f000 fab5 	bl	801154c <_calloc_r>
 8010fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fe4:	60e8      	str	r0, [r5, #12]
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d1e4      	bne.n	8010fb6 <_Balloc+0x20>
 8010fec:	2000      	movs	r0, #0
 8010fee:	bd70      	pop	{r4, r5, r6, pc}
 8010ff0:	6802      	ldr	r2, [r0, #0]
 8010ff2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ffc:	e7f7      	b.n	8010fee <_Balloc+0x58>

08010ffe <_Bfree>:
 8010ffe:	b570      	push	{r4, r5, r6, lr}
 8011000:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011002:	4606      	mov	r6, r0
 8011004:	460d      	mov	r5, r1
 8011006:	b93c      	cbnz	r4, 8011018 <_Bfree+0x1a>
 8011008:	2010      	movs	r0, #16
 801100a:	f7ff ffb1 	bl	8010f70 <malloc>
 801100e:	6270      	str	r0, [r6, #36]	; 0x24
 8011010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011014:	6004      	str	r4, [r0, #0]
 8011016:	60c4      	str	r4, [r0, #12]
 8011018:	b13d      	cbz	r5, 801102a <_Bfree+0x2c>
 801101a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801101c:	686a      	ldr	r2, [r5, #4]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011024:	6029      	str	r1, [r5, #0]
 8011026:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801102a:	bd70      	pop	{r4, r5, r6, pc}

0801102c <__multadd>:
 801102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011030:	690d      	ldr	r5, [r1, #16]
 8011032:	461f      	mov	r7, r3
 8011034:	4606      	mov	r6, r0
 8011036:	460c      	mov	r4, r1
 8011038:	f101 0c14 	add.w	ip, r1, #20
 801103c:	2300      	movs	r3, #0
 801103e:	f8dc 0000 	ldr.w	r0, [ip]
 8011042:	b281      	uxth	r1, r0
 8011044:	fb02 7101 	mla	r1, r2, r1, r7
 8011048:	0c0f      	lsrs	r7, r1, #16
 801104a:	0c00      	lsrs	r0, r0, #16
 801104c:	fb02 7000 	mla	r0, r2, r0, r7
 8011050:	b289      	uxth	r1, r1
 8011052:	3301      	adds	r3, #1
 8011054:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011058:	429d      	cmp	r5, r3
 801105a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801105e:	f84c 1b04 	str.w	r1, [ip], #4
 8011062:	dcec      	bgt.n	801103e <__multadd+0x12>
 8011064:	b1d7      	cbz	r7, 801109c <__multadd+0x70>
 8011066:	68a3      	ldr	r3, [r4, #8]
 8011068:	42ab      	cmp	r3, r5
 801106a:	dc12      	bgt.n	8011092 <__multadd+0x66>
 801106c:	6861      	ldr	r1, [r4, #4]
 801106e:	4630      	mov	r0, r6
 8011070:	3101      	adds	r1, #1
 8011072:	f7ff ff90 	bl	8010f96 <_Balloc>
 8011076:	6922      	ldr	r2, [r4, #16]
 8011078:	3202      	adds	r2, #2
 801107a:	f104 010c 	add.w	r1, r4, #12
 801107e:	4680      	mov	r8, r0
 8011080:	0092      	lsls	r2, r2, #2
 8011082:	300c      	adds	r0, #12
 8011084:	f7ff ff7c 	bl	8010f80 <memcpy>
 8011088:	4621      	mov	r1, r4
 801108a:	4630      	mov	r0, r6
 801108c:	f7ff ffb7 	bl	8010ffe <_Bfree>
 8011090:	4644      	mov	r4, r8
 8011092:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011096:	3501      	adds	r5, #1
 8011098:	615f      	str	r7, [r3, #20]
 801109a:	6125      	str	r5, [r4, #16]
 801109c:	4620      	mov	r0, r4
 801109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110a2 <__hi0bits>:
 80110a2:	0c02      	lsrs	r2, r0, #16
 80110a4:	0412      	lsls	r2, r2, #16
 80110a6:	4603      	mov	r3, r0
 80110a8:	b9b2      	cbnz	r2, 80110d8 <__hi0bits+0x36>
 80110aa:	0403      	lsls	r3, r0, #16
 80110ac:	2010      	movs	r0, #16
 80110ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80110b2:	bf04      	itt	eq
 80110b4:	021b      	lsleq	r3, r3, #8
 80110b6:	3008      	addeq	r0, #8
 80110b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80110bc:	bf04      	itt	eq
 80110be:	011b      	lsleq	r3, r3, #4
 80110c0:	3004      	addeq	r0, #4
 80110c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80110c6:	bf04      	itt	eq
 80110c8:	009b      	lsleq	r3, r3, #2
 80110ca:	3002      	addeq	r0, #2
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	db06      	blt.n	80110de <__hi0bits+0x3c>
 80110d0:	005b      	lsls	r3, r3, #1
 80110d2:	d503      	bpl.n	80110dc <__hi0bits+0x3a>
 80110d4:	3001      	adds	r0, #1
 80110d6:	4770      	bx	lr
 80110d8:	2000      	movs	r0, #0
 80110da:	e7e8      	b.n	80110ae <__hi0bits+0xc>
 80110dc:	2020      	movs	r0, #32
 80110de:	4770      	bx	lr

080110e0 <__lo0bits>:
 80110e0:	6803      	ldr	r3, [r0, #0]
 80110e2:	f013 0207 	ands.w	r2, r3, #7
 80110e6:	4601      	mov	r1, r0
 80110e8:	d00b      	beq.n	8011102 <__lo0bits+0x22>
 80110ea:	07da      	lsls	r2, r3, #31
 80110ec:	d423      	bmi.n	8011136 <__lo0bits+0x56>
 80110ee:	0798      	lsls	r0, r3, #30
 80110f0:	bf49      	itett	mi
 80110f2:	085b      	lsrmi	r3, r3, #1
 80110f4:	089b      	lsrpl	r3, r3, #2
 80110f6:	2001      	movmi	r0, #1
 80110f8:	600b      	strmi	r3, [r1, #0]
 80110fa:	bf5c      	itt	pl
 80110fc:	600b      	strpl	r3, [r1, #0]
 80110fe:	2002      	movpl	r0, #2
 8011100:	4770      	bx	lr
 8011102:	b298      	uxth	r0, r3
 8011104:	b9a8      	cbnz	r0, 8011132 <__lo0bits+0x52>
 8011106:	0c1b      	lsrs	r3, r3, #16
 8011108:	2010      	movs	r0, #16
 801110a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801110e:	bf04      	itt	eq
 8011110:	0a1b      	lsreq	r3, r3, #8
 8011112:	3008      	addeq	r0, #8
 8011114:	071a      	lsls	r2, r3, #28
 8011116:	bf04      	itt	eq
 8011118:	091b      	lsreq	r3, r3, #4
 801111a:	3004      	addeq	r0, #4
 801111c:	079a      	lsls	r2, r3, #30
 801111e:	bf04      	itt	eq
 8011120:	089b      	lsreq	r3, r3, #2
 8011122:	3002      	addeq	r0, #2
 8011124:	07da      	lsls	r2, r3, #31
 8011126:	d402      	bmi.n	801112e <__lo0bits+0x4e>
 8011128:	085b      	lsrs	r3, r3, #1
 801112a:	d006      	beq.n	801113a <__lo0bits+0x5a>
 801112c:	3001      	adds	r0, #1
 801112e:	600b      	str	r3, [r1, #0]
 8011130:	4770      	bx	lr
 8011132:	4610      	mov	r0, r2
 8011134:	e7e9      	b.n	801110a <__lo0bits+0x2a>
 8011136:	2000      	movs	r0, #0
 8011138:	4770      	bx	lr
 801113a:	2020      	movs	r0, #32
 801113c:	4770      	bx	lr

0801113e <__i2b>:
 801113e:	b510      	push	{r4, lr}
 8011140:	460c      	mov	r4, r1
 8011142:	2101      	movs	r1, #1
 8011144:	f7ff ff27 	bl	8010f96 <_Balloc>
 8011148:	2201      	movs	r2, #1
 801114a:	6144      	str	r4, [r0, #20]
 801114c:	6102      	str	r2, [r0, #16]
 801114e:	bd10      	pop	{r4, pc}

08011150 <__multiply>:
 8011150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	4614      	mov	r4, r2
 8011156:	690a      	ldr	r2, [r1, #16]
 8011158:	6923      	ldr	r3, [r4, #16]
 801115a:	429a      	cmp	r2, r3
 801115c:	bfb8      	it	lt
 801115e:	460b      	movlt	r3, r1
 8011160:	4688      	mov	r8, r1
 8011162:	bfbc      	itt	lt
 8011164:	46a0      	movlt	r8, r4
 8011166:	461c      	movlt	r4, r3
 8011168:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801116c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011170:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011178:	eb07 0609 	add.w	r6, r7, r9
 801117c:	42b3      	cmp	r3, r6
 801117e:	bfb8      	it	lt
 8011180:	3101      	addlt	r1, #1
 8011182:	f7ff ff08 	bl	8010f96 <_Balloc>
 8011186:	f100 0514 	add.w	r5, r0, #20
 801118a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801118e:	462b      	mov	r3, r5
 8011190:	2200      	movs	r2, #0
 8011192:	4573      	cmp	r3, lr
 8011194:	d316      	bcc.n	80111c4 <__multiply+0x74>
 8011196:	f104 0214 	add.w	r2, r4, #20
 801119a:	f108 0114 	add.w	r1, r8, #20
 801119e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80111a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80111a6:	9300      	str	r3, [sp, #0]
 80111a8:	9b00      	ldr	r3, [sp, #0]
 80111aa:	9201      	str	r2, [sp, #4]
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d80c      	bhi.n	80111ca <__multiply+0x7a>
 80111b0:	2e00      	cmp	r6, #0
 80111b2:	dd03      	ble.n	80111bc <__multiply+0x6c>
 80111b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d05d      	beq.n	8011278 <__multiply+0x128>
 80111bc:	6106      	str	r6, [r0, #16]
 80111be:	b003      	add	sp, #12
 80111c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c4:	f843 2b04 	str.w	r2, [r3], #4
 80111c8:	e7e3      	b.n	8011192 <__multiply+0x42>
 80111ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80111ce:	f1bb 0f00 	cmp.w	fp, #0
 80111d2:	d023      	beq.n	801121c <__multiply+0xcc>
 80111d4:	4689      	mov	r9, r1
 80111d6:	46ac      	mov	ip, r5
 80111d8:	f04f 0800 	mov.w	r8, #0
 80111dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80111e0:	f8dc a000 	ldr.w	sl, [ip]
 80111e4:	b2a3      	uxth	r3, r4
 80111e6:	fa1f fa8a 	uxth.w	sl, sl
 80111ea:	fb0b a303 	mla	r3, fp, r3, sl
 80111ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80111f2:	f8dc 4000 	ldr.w	r4, [ip]
 80111f6:	4443      	add	r3, r8
 80111f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80111fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8011200:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011204:	46e2      	mov	sl, ip
 8011206:	b29b      	uxth	r3, r3
 8011208:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801120c:	454f      	cmp	r7, r9
 801120e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011212:	f84a 3b04 	str.w	r3, [sl], #4
 8011216:	d82b      	bhi.n	8011270 <__multiply+0x120>
 8011218:	f8cc 8004 	str.w	r8, [ip, #4]
 801121c:	9b01      	ldr	r3, [sp, #4]
 801121e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011222:	3204      	adds	r2, #4
 8011224:	f1ba 0f00 	cmp.w	sl, #0
 8011228:	d020      	beq.n	801126c <__multiply+0x11c>
 801122a:	682b      	ldr	r3, [r5, #0]
 801122c:	4689      	mov	r9, r1
 801122e:	46a8      	mov	r8, r5
 8011230:	f04f 0b00 	mov.w	fp, #0
 8011234:	f8b9 c000 	ldrh.w	ip, [r9]
 8011238:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801123c:	fb0a 440c 	mla	r4, sl, ip, r4
 8011240:	445c      	add	r4, fp
 8011242:	46c4      	mov	ip, r8
 8011244:	b29b      	uxth	r3, r3
 8011246:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801124a:	f84c 3b04 	str.w	r3, [ip], #4
 801124e:	f859 3b04 	ldr.w	r3, [r9], #4
 8011252:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011256:	0c1b      	lsrs	r3, r3, #16
 8011258:	fb0a b303 	mla	r3, sl, r3, fp
 801125c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011260:	454f      	cmp	r7, r9
 8011262:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011266:	d805      	bhi.n	8011274 <__multiply+0x124>
 8011268:	f8c8 3004 	str.w	r3, [r8, #4]
 801126c:	3504      	adds	r5, #4
 801126e:	e79b      	b.n	80111a8 <__multiply+0x58>
 8011270:	46d4      	mov	ip, sl
 8011272:	e7b3      	b.n	80111dc <__multiply+0x8c>
 8011274:	46e0      	mov	r8, ip
 8011276:	e7dd      	b.n	8011234 <__multiply+0xe4>
 8011278:	3e01      	subs	r6, #1
 801127a:	e799      	b.n	80111b0 <__multiply+0x60>

0801127c <__pow5mult>:
 801127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011280:	4615      	mov	r5, r2
 8011282:	f012 0203 	ands.w	r2, r2, #3
 8011286:	4606      	mov	r6, r0
 8011288:	460f      	mov	r7, r1
 801128a:	d007      	beq.n	801129c <__pow5mult+0x20>
 801128c:	3a01      	subs	r2, #1
 801128e:	4c21      	ldr	r4, [pc, #132]	; (8011314 <__pow5mult+0x98>)
 8011290:	2300      	movs	r3, #0
 8011292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011296:	f7ff fec9 	bl	801102c <__multadd>
 801129a:	4607      	mov	r7, r0
 801129c:	10ad      	asrs	r5, r5, #2
 801129e:	d035      	beq.n	801130c <__pow5mult+0x90>
 80112a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80112a2:	b93c      	cbnz	r4, 80112b4 <__pow5mult+0x38>
 80112a4:	2010      	movs	r0, #16
 80112a6:	f7ff fe63 	bl	8010f70 <malloc>
 80112aa:	6270      	str	r0, [r6, #36]	; 0x24
 80112ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112b0:	6004      	str	r4, [r0, #0]
 80112b2:	60c4      	str	r4, [r0, #12]
 80112b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80112b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112bc:	b94c      	cbnz	r4, 80112d2 <__pow5mult+0x56>
 80112be:	f240 2171 	movw	r1, #625	; 0x271
 80112c2:	4630      	mov	r0, r6
 80112c4:	f7ff ff3b 	bl	801113e <__i2b>
 80112c8:	2300      	movs	r3, #0
 80112ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80112ce:	4604      	mov	r4, r0
 80112d0:	6003      	str	r3, [r0, #0]
 80112d2:	f04f 0800 	mov.w	r8, #0
 80112d6:	07eb      	lsls	r3, r5, #31
 80112d8:	d50a      	bpl.n	80112f0 <__pow5mult+0x74>
 80112da:	4639      	mov	r1, r7
 80112dc:	4622      	mov	r2, r4
 80112de:	4630      	mov	r0, r6
 80112e0:	f7ff ff36 	bl	8011150 <__multiply>
 80112e4:	4639      	mov	r1, r7
 80112e6:	4681      	mov	r9, r0
 80112e8:	4630      	mov	r0, r6
 80112ea:	f7ff fe88 	bl	8010ffe <_Bfree>
 80112ee:	464f      	mov	r7, r9
 80112f0:	106d      	asrs	r5, r5, #1
 80112f2:	d00b      	beq.n	801130c <__pow5mult+0x90>
 80112f4:	6820      	ldr	r0, [r4, #0]
 80112f6:	b938      	cbnz	r0, 8011308 <__pow5mult+0x8c>
 80112f8:	4622      	mov	r2, r4
 80112fa:	4621      	mov	r1, r4
 80112fc:	4630      	mov	r0, r6
 80112fe:	f7ff ff27 	bl	8011150 <__multiply>
 8011302:	6020      	str	r0, [r4, #0]
 8011304:	f8c0 8000 	str.w	r8, [r0]
 8011308:	4604      	mov	r4, r0
 801130a:	e7e4      	b.n	80112d6 <__pow5mult+0x5a>
 801130c:	4638      	mov	r0, r7
 801130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011312:	bf00      	nop
 8011314:	08014530 	.word	0x08014530

08011318 <__lshift>:
 8011318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801131c:	460c      	mov	r4, r1
 801131e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011322:	6923      	ldr	r3, [r4, #16]
 8011324:	6849      	ldr	r1, [r1, #4]
 8011326:	eb0a 0903 	add.w	r9, sl, r3
 801132a:	68a3      	ldr	r3, [r4, #8]
 801132c:	4607      	mov	r7, r0
 801132e:	4616      	mov	r6, r2
 8011330:	f109 0501 	add.w	r5, r9, #1
 8011334:	42ab      	cmp	r3, r5
 8011336:	db32      	blt.n	801139e <__lshift+0x86>
 8011338:	4638      	mov	r0, r7
 801133a:	f7ff fe2c 	bl	8010f96 <_Balloc>
 801133e:	2300      	movs	r3, #0
 8011340:	4680      	mov	r8, r0
 8011342:	f100 0114 	add.w	r1, r0, #20
 8011346:	461a      	mov	r2, r3
 8011348:	4553      	cmp	r3, sl
 801134a:	db2b      	blt.n	80113a4 <__lshift+0x8c>
 801134c:	6920      	ldr	r0, [r4, #16]
 801134e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011352:	f104 0314 	add.w	r3, r4, #20
 8011356:	f016 021f 	ands.w	r2, r6, #31
 801135a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801135e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011362:	d025      	beq.n	80113b0 <__lshift+0x98>
 8011364:	f1c2 0e20 	rsb	lr, r2, #32
 8011368:	2000      	movs	r0, #0
 801136a:	681e      	ldr	r6, [r3, #0]
 801136c:	468a      	mov	sl, r1
 801136e:	4096      	lsls	r6, r2
 8011370:	4330      	orrs	r0, r6
 8011372:	f84a 0b04 	str.w	r0, [sl], #4
 8011376:	f853 0b04 	ldr.w	r0, [r3], #4
 801137a:	459c      	cmp	ip, r3
 801137c:	fa20 f00e 	lsr.w	r0, r0, lr
 8011380:	d814      	bhi.n	80113ac <__lshift+0x94>
 8011382:	6048      	str	r0, [r1, #4]
 8011384:	b108      	cbz	r0, 801138a <__lshift+0x72>
 8011386:	f109 0502 	add.w	r5, r9, #2
 801138a:	3d01      	subs	r5, #1
 801138c:	4638      	mov	r0, r7
 801138e:	f8c8 5010 	str.w	r5, [r8, #16]
 8011392:	4621      	mov	r1, r4
 8011394:	f7ff fe33 	bl	8010ffe <_Bfree>
 8011398:	4640      	mov	r0, r8
 801139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801139e:	3101      	adds	r1, #1
 80113a0:	005b      	lsls	r3, r3, #1
 80113a2:	e7c7      	b.n	8011334 <__lshift+0x1c>
 80113a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80113a8:	3301      	adds	r3, #1
 80113aa:	e7cd      	b.n	8011348 <__lshift+0x30>
 80113ac:	4651      	mov	r1, sl
 80113ae:	e7dc      	b.n	801136a <__lshift+0x52>
 80113b0:	3904      	subs	r1, #4
 80113b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80113b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80113ba:	459c      	cmp	ip, r3
 80113bc:	d8f9      	bhi.n	80113b2 <__lshift+0x9a>
 80113be:	e7e4      	b.n	801138a <__lshift+0x72>

080113c0 <__mcmp>:
 80113c0:	6903      	ldr	r3, [r0, #16]
 80113c2:	690a      	ldr	r2, [r1, #16]
 80113c4:	1a9b      	subs	r3, r3, r2
 80113c6:	b530      	push	{r4, r5, lr}
 80113c8:	d10c      	bne.n	80113e4 <__mcmp+0x24>
 80113ca:	0092      	lsls	r2, r2, #2
 80113cc:	3014      	adds	r0, #20
 80113ce:	3114      	adds	r1, #20
 80113d0:	1884      	adds	r4, r0, r2
 80113d2:	4411      	add	r1, r2
 80113d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80113d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80113dc:	4295      	cmp	r5, r2
 80113de:	d003      	beq.n	80113e8 <__mcmp+0x28>
 80113e0:	d305      	bcc.n	80113ee <__mcmp+0x2e>
 80113e2:	2301      	movs	r3, #1
 80113e4:	4618      	mov	r0, r3
 80113e6:	bd30      	pop	{r4, r5, pc}
 80113e8:	42a0      	cmp	r0, r4
 80113ea:	d3f3      	bcc.n	80113d4 <__mcmp+0x14>
 80113ec:	e7fa      	b.n	80113e4 <__mcmp+0x24>
 80113ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113f2:	e7f7      	b.n	80113e4 <__mcmp+0x24>

080113f4 <__mdiff>:
 80113f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f8:	460d      	mov	r5, r1
 80113fa:	4607      	mov	r7, r0
 80113fc:	4611      	mov	r1, r2
 80113fe:	4628      	mov	r0, r5
 8011400:	4614      	mov	r4, r2
 8011402:	f7ff ffdd 	bl	80113c0 <__mcmp>
 8011406:	1e06      	subs	r6, r0, #0
 8011408:	d108      	bne.n	801141c <__mdiff+0x28>
 801140a:	4631      	mov	r1, r6
 801140c:	4638      	mov	r0, r7
 801140e:	f7ff fdc2 	bl	8010f96 <_Balloc>
 8011412:	2301      	movs	r3, #1
 8011414:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801141c:	bfa4      	itt	ge
 801141e:	4623      	movge	r3, r4
 8011420:	462c      	movge	r4, r5
 8011422:	4638      	mov	r0, r7
 8011424:	6861      	ldr	r1, [r4, #4]
 8011426:	bfa6      	itte	ge
 8011428:	461d      	movge	r5, r3
 801142a:	2600      	movge	r6, #0
 801142c:	2601      	movlt	r6, #1
 801142e:	f7ff fdb2 	bl	8010f96 <_Balloc>
 8011432:	692b      	ldr	r3, [r5, #16]
 8011434:	60c6      	str	r6, [r0, #12]
 8011436:	6926      	ldr	r6, [r4, #16]
 8011438:	f105 0914 	add.w	r9, r5, #20
 801143c:	f104 0214 	add.w	r2, r4, #20
 8011440:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011444:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011448:	f100 0514 	add.w	r5, r0, #20
 801144c:	f04f 0e00 	mov.w	lr, #0
 8011450:	f852 ab04 	ldr.w	sl, [r2], #4
 8011454:	f859 4b04 	ldr.w	r4, [r9], #4
 8011458:	fa1e f18a 	uxtah	r1, lr, sl
 801145c:	b2a3      	uxth	r3, r4
 801145e:	1ac9      	subs	r1, r1, r3
 8011460:	0c23      	lsrs	r3, r4, #16
 8011462:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011466:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801146a:	b289      	uxth	r1, r1
 801146c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011470:	45c8      	cmp	r8, r9
 8011472:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011476:	4694      	mov	ip, r2
 8011478:	f845 3b04 	str.w	r3, [r5], #4
 801147c:	d8e8      	bhi.n	8011450 <__mdiff+0x5c>
 801147e:	45bc      	cmp	ip, r7
 8011480:	d304      	bcc.n	801148c <__mdiff+0x98>
 8011482:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011486:	b183      	cbz	r3, 80114aa <__mdiff+0xb6>
 8011488:	6106      	str	r6, [r0, #16]
 801148a:	e7c5      	b.n	8011418 <__mdiff+0x24>
 801148c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011490:	fa1e f381 	uxtah	r3, lr, r1
 8011494:	141a      	asrs	r2, r3, #16
 8011496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801149a:	b29b      	uxth	r3, r3
 801149c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80114a4:	f845 3b04 	str.w	r3, [r5], #4
 80114a8:	e7e9      	b.n	801147e <__mdiff+0x8a>
 80114aa:	3e01      	subs	r6, #1
 80114ac:	e7e9      	b.n	8011482 <__mdiff+0x8e>

080114ae <__d2b>:
 80114ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114b2:	460e      	mov	r6, r1
 80114b4:	2101      	movs	r1, #1
 80114b6:	ec59 8b10 	vmov	r8, r9, d0
 80114ba:	4615      	mov	r5, r2
 80114bc:	f7ff fd6b 	bl	8010f96 <_Balloc>
 80114c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80114c4:	4607      	mov	r7, r0
 80114c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114ca:	bb34      	cbnz	r4, 801151a <__d2b+0x6c>
 80114cc:	9301      	str	r3, [sp, #4]
 80114ce:	f1b8 0300 	subs.w	r3, r8, #0
 80114d2:	d027      	beq.n	8011524 <__d2b+0x76>
 80114d4:	a802      	add	r0, sp, #8
 80114d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80114da:	f7ff fe01 	bl	80110e0 <__lo0bits>
 80114de:	9900      	ldr	r1, [sp, #0]
 80114e0:	b1f0      	cbz	r0, 8011520 <__d2b+0x72>
 80114e2:	9a01      	ldr	r2, [sp, #4]
 80114e4:	f1c0 0320 	rsb	r3, r0, #32
 80114e8:	fa02 f303 	lsl.w	r3, r2, r3
 80114ec:	430b      	orrs	r3, r1
 80114ee:	40c2      	lsrs	r2, r0
 80114f0:	617b      	str	r3, [r7, #20]
 80114f2:	9201      	str	r2, [sp, #4]
 80114f4:	9b01      	ldr	r3, [sp, #4]
 80114f6:	61bb      	str	r3, [r7, #24]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bf14      	ite	ne
 80114fc:	2102      	movne	r1, #2
 80114fe:	2101      	moveq	r1, #1
 8011500:	6139      	str	r1, [r7, #16]
 8011502:	b1c4      	cbz	r4, 8011536 <__d2b+0x88>
 8011504:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011508:	4404      	add	r4, r0
 801150a:	6034      	str	r4, [r6, #0]
 801150c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011510:	6028      	str	r0, [r5, #0]
 8011512:	4638      	mov	r0, r7
 8011514:	b003      	add	sp, #12
 8011516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801151a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801151e:	e7d5      	b.n	80114cc <__d2b+0x1e>
 8011520:	6179      	str	r1, [r7, #20]
 8011522:	e7e7      	b.n	80114f4 <__d2b+0x46>
 8011524:	a801      	add	r0, sp, #4
 8011526:	f7ff fddb 	bl	80110e0 <__lo0bits>
 801152a:	9b01      	ldr	r3, [sp, #4]
 801152c:	617b      	str	r3, [r7, #20]
 801152e:	2101      	movs	r1, #1
 8011530:	6139      	str	r1, [r7, #16]
 8011532:	3020      	adds	r0, #32
 8011534:	e7e5      	b.n	8011502 <__d2b+0x54>
 8011536:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801153a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801153e:	6030      	str	r0, [r6, #0]
 8011540:	6918      	ldr	r0, [r3, #16]
 8011542:	f7ff fdae 	bl	80110a2 <__hi0bits>
 8011546:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801154a:	e7e1      	b.n	8011510 <__d2b+0x62>

0801154c <_calloc_r>:
 801154c:	b538      	push	{r3, r4, r5, lr}
 801154e:	fb02 f401 	mul.w	r4, r2, r1
 8011552:	4621      	mov	r1, r4
 8011554:	f000 f856 	bl	8011604 <_malloc_r>
 8011558:	4605      	mov	r5, r0
 801155a:	b118      	cbz	r0, 8011564 <_calloc_r+0x18>
 801155c:	4622      	mov	r2, r4
 801155e:	2100      	movs	r1, #0
 8011560:	f7fd ff0a 	bl	800f378 <memset>
 8011564:	4628      	mov	r0, r5
 8011566:	bd38      	pop	{r3, r4, r5, pc}

08011568 <_free_r>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	4605      	mov	r5, r0
 801156c:	2900      	cmp	r1, #0
 801156e:	d045      	beq.n	80115fc <_free_r+0x94>
 8011570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011574:	1f0c      	subs	r4, r1, #4
 8011576:	2b00      	cmp	r3, #0
 8011578:	bfb8      	it	lt
 801157a:	18e4      	addlt	r4, r4, r3
 801157c:	f000 fac3 	bl	8011b06 <__malloc_lock>
 8011580:	4a1f      	ldr	r2, [pc, #124]	; (8011600 <_free_r+0x98>)
 8011582:	6813      	ldr	r3, [r2, #0]
 8011584:	4610      	mov	r0, r2
 8011586:	b933      	cbnz	r3, 8011596 <_free_r+0x2e>
 8011588:	6063      	str	r3, [r4, #4]
 801158a:	6014      	str	r4, [r2, #0]
 801158c:	4628      	mov	r0, r5
 801158e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011592:	f000 bab9 	b.w	8011b08 <__malloc_unlock>
 8011596:	42a3      	cmp	r3, r4
 8011598:	d90c      	bls.n	80115b4 <_free_r+0x4c>
 801159a:	6821      	ldr	r1, [r4, #0]
 801159c:	1862      	adds	r2, r4, r1
 801159e:	4293      	cmp	r3, r2
 80115a0:	bf04      	itt	eq
 80115a2:	681a      	ldreq	r2, [r3, #0]
 80115a4:	685b      	ldreq	r3, [r3, #4]
 80115a6:	6063      	str	r3, [r4, #4]
 80115a8:	bf04      	itt	eq
 80115aa:	1852      	addeq	r2, r2, r1
 80115ac:	6022      	streq	r2, [r4, #0]
 80115ae:	6004      	str	r4, [r0, #0]
 80115b0:	e7ec      	b.n	801158c <_free_r+0x24>
 80115b2:	4613      	mov	r3, r2
 80115b4:	685a      	ldr	r2, [r3, #4]
 80115b6:	b10a      	cbz	r2, 80115bc <_free_r+0x54>
 80115b8:	42a2      	cmp	r2, r4
 80115ba:	d9fa      	bls.n	80115b2 <_free_r+0x4a>
 80115bc:	6819      	ldr	r1, [r3, #0]
 80115be:	1858      	adds	r0, r3, r1
 80115c0:	42a0      	cmp	r0, r4
 80115c2:	d10b      	bne.n	80115dc <_free_r+0x74>
 80115c4:	6820      	ldr	r0, [r4, #0]
 80115c6:	4401      	add	r1, r0
 80115c8:	1858      	adds	r0, r3, r1
 80115ca:	4282      	cmp	r2, r0
 80115cc:	6019      	str	r1, [r3, #0]
 80115ce:	d1dd      	bne.n	801158c <_free_r+0x24>
 80115d0:	6810      	ldr	r0, [r2, #0]
 80115d2:	6852      	ldr	r2, [r2, #4]
 80115d4:	605a      	str	r2, [r3, #4]
 80115d6:	4401      	add	r1, r0
 80115d8:	6019      	str	r1, [r3, #0]
 80115da:	e7d7      	b.n	801158c <_free_r+0x24>
 80115dc:	d902      	bls.n	80115e4 <_free_r+0x7c>
 80115de:	230c      	movs	r3, #12
 80115e0:	602b      	str	r3, [r5, #0]
 80115e2:	e7d3      	b.n	801158c <_free_r+0x24>
 80115e4:	6820      	ldr	r0, [r4, #0]
 80115e6:	1821      	adds	r1, r4, r0
 80115e8:	428a      	cmp	r2, r1
 80115ea:	bf04      	itt	eq
 80115ec:	6811      	ldreq	r1, [r2, #0]
 80115ee:	6852      	ldreq	r2, [r2, #4]
 80115f0:	6062      	str	r2, [r4, #4]
 80115f2:	bf04      	itt	eq
 80115f4:	1809      	addeq	r1, r1, r0
 80115f6:	6021      	streq	r1, [r4, #0]
 80115f8:	605c      	str	r4, [r3, #4]
 80115fa:	e7c7      	b.n	801158c <_free_r+0x24>
 80115fc:	bd38      	pop	{r3, r4, r5, pc}
 80115fe:	bf00      	nop
 8011600:	20001f18 	.word	0x20001f18

08011604 <_malloc_r>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	1ccd      	adds	r5, r1, #3
 8011608:	f025 0503 	bic.w	r5, r5, #3
 801160c:	3508      	adds	r5, #8
 801160e:	2d0c      	cmp	r5, #12
 8011610:	bf38      	it	cc
 8011612:	250c      	movcc	r5, #12
 8011614:	2d00      	cmp	r5, #0
 8011616:	4606      	mov	r6, r0
 8011618:	db01      	blt.n	801161e <_malloc_r+0x1a>
 801161a:	42a9      	cmp	r1, r5
 801161c:	d903      	bls.n	8011626 <_malloc_r+0x22>
 801161e:	230c      	movs	r3, #12
 8011620:	6033      	str	r3, [r6, #0]
 8011622:	2000      	movs	r0, #0
 8011624:	bd70      	pop	{r4, r5, r6, pc}
 8011626:	f000 fa6e 	bl	8011b06 <__malloc_lock>
 801162a:	4a21      	ldr	r2, [pc, #132]	; (80116b0 <_malloc_r+0xac>)
 801162c:	6814      	ldr	r4, [r2, #0]
 801162e:	4621      	mov	r1, r4
 8011630:	b991      	cbnz	r1, 8011658 <_malloc_r+0x54>
 8011632:	4c20      	ldr	r4, [pc, #128]	; (80116b4 <_malloc_r+0xb0>)
 8011634:	6823      	ldr	r3, [r4, #0]
 8011636:	b91b      	cbnz	r3, 8011640 <_malloc_r+0x3c>
 8011638:	4630      	mov	r0, r6
 801163a:	f000 f98f 	bl	801195c <_sbrk_r>
 801163e:	6020      	str	r0, [r4, #0]
 8011640:	4629      	mov	r1, r5
 8011642:	4630      	mov	r0, r6
 8011644:	f000 f98a 	bl	801195c <_sbrk_r>
 8011648:	1c43      	adds	r3, r0, #1
 801164a:	d124      	bne.n	8011696 <_malloc_r+0x92>
 801164c:	230c      	movs	r3, #12
 801164e:	6033      	str	r3, [r6, #0]
 8011650:	4630      	mov	r0, r6
 8011652:	f000 fa59 	bl	8011b08 <__malloc_unlock>
 8011656:	e7e4      	b.n	8011622 <_malloc_r+0x1e>
 8011658:	680b      	ldr	r3, [r1, #0]
 801165a:	1b5b      	subs	r3, r3, r5
 801165c:	d418      	bmi.n	8011690 <_malloc_r+0x8c>
 801165e:	2b0b      	cmp	r3, #11
 8011660:	d90f      	bls.n	8011682 <_malloc_r+0x7e>
 8011662:	600b      	str	r3, [r1, #0]
 8011664:	50cd      	str	r5, [r1, r3]
 8011666:	18cc      	adds	r4, r1, r3
 8011668:	4630      	mov	r0, r6
 801166a:	f000 fa4d 	bl	8011b08 <__malloc_unlock>
 801166e:	f104 000b 	add.w	r0, r4, #11
 8011672:	1d23      	adds	r3, r4, #4
 8011674:	f020 0007 	bic.w	r0, r0, #7
 8011678:	1ac3      	subs	r3, r0, r3
 801167a:	d0d3      	beq.n	8011624 <_malloc_r+0x20>
 801167c:	425a      	negs	r2, r3
 801167e:	50e2      	str	r2, [r4, r3]
 8011680:	e7d0      	b.n	8011624 <_malloc_r+0x20>
 8011682:	428c      	cmp	r4, r1
 8011684:	684b      	ldr	r3, [r1, #4]
 8011686:	bf16      	itet	ne
 8011688:	6063      	strne	r3, [r4, #4]
 801168a:	6013      	streq	r3, [r2, #0]
 801168c:	460c      	movne	r4, r1
 801168e:	e7eb      	b.n	8011668 <_malloc_r+0x64>
 8011690:	460c      	mov	r4, r1
 8011692:	6849      	ldr	r1, [r1, #4]
 8011694:	e7cc      	b.n	8011630 <_malloc_r+0x2c>
 8011696:	1cc4      	adds	r4, r0, #3
 8011698:	f024 0403 	bic.w	r4, r4, #3
 801169c:	42a0      	cmp	r0, r4
 801169e:	d005      	beq.n	80116ac <_malloc_r+0xa8>
 80116a0:	1a21      	subs	r1, r4, r0
 80116a2:	4630      	mov	r0, r6
 80116a4:	f000 f95a 	bl	801195c <_sbrk_r>
 80116a8:	3001      	adds	r0, #1
 80116aa:	d0cf      	beq.n	801164c <_malloc_r+0x48>
 80116ac:	6025      	str	r5, [r4, #0]
 80116ae:	e7db      	b.n	8011668 <_malloc_r+0x64>
 80116b0:	20001f18 	.word	0x20001f18
 80116b4:	20001f1c 	.word	0x20001f1c

080116b8 <__ssputs_r>:
 80116b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116bc:	688e      	ldr	r6, [r1, #8]
 80116be:	429e      	cmp	r6, r3
 80116c0:	4682      	mov	sl, r0
 80116c2:	460c      	mov	r4, r1
 80116c4:	4690      	mov	r8, r2
 80116c6:	4699      	mov	r9, r3
 80116c8:	d837      	bhi.n	801173a <__ssputs_r+0x82>
 80116ca:	898a      	ldrh	r2, [r1, #12]
 80116cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116d0:	d031      	beq.n	8011736 <__ssputs_r+0x7e>
 80116d2:	6825      	ldr	r5, [r4, #0]
 80116d4:	6909      	ldr	r1, [r1, #16]
 80116d6:	1a6f      	subs	r7, r5, r1
 80116d8:	6965      	ldr	r5, [r4, #20]
 80116da:	2302      	movs	r3, #2
 80116dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80116e4:	f109 0301 	add.w	r3, r9, #1
 80116e8:	443b      	add	r3, r7
 80116ea:	429d      	cmp	r5, r3
 80116ec:	bf38      	it	cc
 80116ee:	461d      	movcc	r5, r3
 80116f0:	0553      	lsls	r3, r2, #21
 80116f2:	d530      	bpl.n	8011756 <__ssputs_r+0x9e>
 80116f4:	4629      	mov	r1, r5
 80116f6:	f7ff ff85 	bl	8011604 <_malloc_r>
 80116fa:	4606      	mov	r6, r0
 80116fc:	b950      	cbnz	r0, 8011714 <__ssputs_r+0x5c>
 80116fe:	230c      	movs	r3, #12
 8011700:	f8ca 3000 	str.w	r3, [sl]
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801170a:	81a3      	strh	r3, [r4, #12]
 801170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011714:	463a      	mov	r2, r7
 8011716:	6921      	ldr	r1, [r4, #16]
 8011718:	f7ff fc32 	bl	8010f80 <memcpy>
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011726:	81a3      	strh	r3, [r4, #12]
 8011728:	6126      	str	r6, [r4, #16]
 801172a:	6165      	str	r5, [r4, #20]
 801172c:	443e      	add	r6, r7
 801172e:	1bed      	subs	r5, r5, r7
 8011730:	6026      	str	r6, [r4, #0]
 8011732:	60a5      	str	r5, [r4, #8]
 8011734:	464e      	mov	r6, r9
 8011736:	454e      	cmp	r6, r9
 8011738:	d900      	bls.n	801173c <__ssputs_r+0x84>
 801173a:	464e      	mov	r6, r9
 801173c:	4632      	mov	r2, r6
 801173e:	4641      	mov	r1, r8
 8011740:	6820      	ldr	r0, [r4, #0]
 8011742:	f000 f9c7 	bl	8011ad4 <memmove>
 8011746:	68a3      	ldr	r3, [r4, #8]
 8011748:	1b9b      	subs	r3, r3, r6
 801174a:	60a3      	str	r3, [r4, #8]
 801174c:	6823      	ldr	r3, [r4, #0]
 801174e:	441e      	add	r6, r3
 8011750:	6026      	str	r6, [r4, #0]
 8011752:	2000      	movs	r0, #0
 8011754:	e7dc      	b.n	8011710 <__ssputs_r+0x58>
 8011756:	462a      	mov	r2, r5
 8011758:	f000 f9d7 	bl	8011b0a <_realloc_r>
 801175c:	4606      	mov	r6, r0
 801175e:	2800      	cmp	r0, #0
 8011760:	d1e2      	bne.n	8011728 <__ssputs_r+0x70>
 8011762:	6921      	ldr	r1, [r4, #16]
 8011764:	4650      	mov	r0, sl
 8011766:	f7ff feff 	bl	8011568 <_free_r>
 801176a:	e7c8      	b.n	80116fe <__ssputs_r+0x46>

0801176c <_svfiprintf_r>:
 801176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011770:	461d      	mov	r5, r3
 8011772:	898b      	ldrh	r3, [r1, #12]
 8011774:	061f      	lsls	r7, r3, #24
 8011776:	b09d      	sub	sp, #116	; 0x74
 8011778:	4680      	mov	r8, r0
 801177a:	460c      	mov	r4, r1
 801177c:	4616      	mov	r6, r2
 801177e:	d50f      	bpl.n	80117a0 <_svfiprintf_r+0x34>
 8011780:	690b      	ldr	r3, [r1, #16]
 8011782:	b96b      	cbnz	r3, 80117a0 <_svfiprintf_r+0x34>
 8011784:	2140      	movs	r1, #64	; 0x40
 8011786:	f7ff ff3d 	bl	8011604 <_malloc_r>
 801178a:	6020      	str	r0, [r4, #0]
 801178c:	6120      	str	r0, [r4, #16]
 801178e:	b928      	cbnz	r0, 801179c <_svfiprintf_r+0x30>
 8011790:	230c      	movs	r3, #12
 8011792:	f8c8 3000 	str.w	r3, [r8]
 8011796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801179a:	e0c8      	b.n	801192e <_svfiprintf_r+0x1c2>
 801179c:	2340      	movs	r3, #64	; 0x40
 801179e:	6163      	str	r3, [r4, #20]
 80117a0:	2300      	movs	r3, #0
 80117a2:	9309      	str	r3, [sp, #36]	; 0x24
 80117a4:	2320      	movs	r3, #32
 80117a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117aa:	2330      	movs	r3, #48	; 0x30
 80117ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117b0:	9503      	str	r5, [sp, #12]
 80117b2:	f04f 0b01 	mov.w	fp, #1
 80117b6:	4637      	mov	r7, r6
 80117b8:	463d      	mov	r5, r7
 80117ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80117be:	b10b      	cbz	r3, 80117c4 <_svfiprintf_r+0x58>
 80117c0:	2b25      	cmp	r3, #37	; 0x25
 80117c2:	d13e      	bne.n	8011842 <_svfiprintf_r+0xd6>
 80117c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80117c8:	d00b      	beq.n	80117e2 <_svfiprintf_r+0x76>
 80117ca:	4653      	mov	r3, sl
 80117cc:	4632      	mov	r2, r6
 80117ce:	4621      	mov	r1, r4
 80117d0:	4640      	mov	r0, r8
 80117d2:	f7ff ff71 	bl	80116b8 <__ssputs_r>
 80117d6:	3001      	adds	r0, #1
 80117d8:	f000 80a4 	beq.w	8011924 <_svfiprintf_r+0x1b8>
 80117dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117de:	4453      	add	r3, sl
 80117e0:	9309      	str	r3, [sp, #36]	; 0x24
 80117e2:	783b      	ldrb	r3, [r7, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f000 809d 	beq.w	8011924 <_svfiprintf_r+0x1b8>
 80117ea:	2300      	movs	r3, #0
 80117ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117f4:	9304      	str	r3, [sp, #16]
 80117f6:	9307      	str	r3, [sp, #28]
 80117f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117fc:	931a      	str	r3, [sp, #104]	; 0x68
 80117fe:	462f      	mov	r7, r5
 8011800:	2205      	movs	r2, #5
 8011802:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011806:	4850      	ldr	r0, [pc, #320]	; (8011948 <_svfiprintf_r+0x1dc>)
 8011808:	f7ee fd12 	bl	8000230 <memchr>
 801180c:	9b04      	ldr	r3, [sp, #16]
 801180e:	b9d0      	cbnz	r0, 8011846 <_svfiprintf_r+0xda>
 8011810:	06d9      	lsls	r1, r3, #27
 8011812:	bf44      	itt	mi
 8011814:	2220      	movmi	r2, #32
 8011816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801181a:	071a      	lsls	r2, r3, #28
 801181c:	bf44      	itt	mi
 801181e:	222b      	movmi	r2, #43	; 0x2b
 8011820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011824:	782a      	ldrb	r2, [r5, #0]
 8011826:	2a2a      	cmp	r2, #42	; 0x2a
 8011828:	d015      	beq.n	8011856 <_svfiprintf_r+0xea>
 801182a:	9a07      	ldr	r2, [sp, #28]
 801182c:	462f      	mov	r7, r5
 801182e:	2000      	movs	r0, #0
 8011830:	250a      	movs	r5, #10
 8011832:	4639      	mov	r1, r7
 8011834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011838:	3b30      	subs	r3, #48	; 0x30
 801183a:	2b09      	cmp	r3, #9
 801183c:	d94d      	bls.n	80118da <_svfiprintf_r+0x16e>
 801183e:	b1b8      	cbz	r0, 8011870 <_svfiprintf_r+0x104>
 8011840:	e00f      	b.n	8011862 <_svfiprintf_r+0xf6>
 8011842:	462f      	mov	r7, r5
 8011844:	e7b8      	b.n	80117b8 <_svfiprintf_r+0x4c>
 8011846:	4a40      	ldr	r2, [pc, #256]	; (8011948 <_svfiprintf_r+0x1dc>)
 8011848:	1a80      	subs	r0, r0, r2
 801184a:	fa0b f000 	lsl.w	r0, fp, r0
 801184e:	4318      	orrs	r0, r3
 8011850:	9004      	str	r0, [sp, #16]
 8011852:	463d      	mov	r5, r7
 8011854:	e7d3      	b.n	80117fe <_svfiprintf_r+0x92>
 8011856:	9a03      	ldr	r2, [sp, #12]
 8011858:	1d11      	adds	r1, r2, #4
 801185a:	6812      	ldr	r2, [r2, #0]
 801185c:	9103      	str	r1, [sp, #12]
 801185e:	2a00      	cmp	r2, #0
 8011860:	db01      	blt.n	8011866 <_svfiprintf_r+0xfa>
 8011862:	9207      	str	r2, [sp, #28]
 8011864:	e004      	b.n	8011870 <_svfiprintf_r+0x104>
 8011866:	4252      	negs	r2, r2
 8011868:	f043 0302 	orr.w	r3, r3, #2
 801186c:	9207      	str	r2, [sp, #28]
 801186e:	9304      	str	r3, [sp, #16]
 8011870:	783b      	ldrb	r3, [r7, #0]
 8011872:	2b2e      	cmp	r3, #46	; 0x2e
 8011874:	d10c      	bne.n	8011890 <_svfiprintf_r+0x124>
 8011876:	787b      	ldrb	r3, [r7, #1]
 8011878:	2b2a      	cmp	r3, #42	; 0x2a
 801187a:	d133      	bne.n	80118e4 <_svfiprintf_r+0x178>
 801187c:	9b03      	ldr	r3, [sp, #12]
 801187e:	1d1a      	adds	r2, r3, #4
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	9203      	str	r2, [sp, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	bfb8      	it	lt
 8011888:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801188c:	3702      	adds	r7, #2
 801188e:	9305      	str	r3, [sp, #20]
 8011890:	4d2e      	ldr	r5, [pc, #184]	; (801194c <_svfiprintf_r+0x1e0>)
 8011892:	7839      	ldrb	r1, [r7, #0]
 8011894:	2203      	movs	r2, #3
 8011896:	4628      	mov	r0, r5
 8011898:	f7ee fcca 	bl	8000230 <memchr>
 801189c:	b138      	cbz	r0, 80118ae <_svfiprintf_r+0x142>
 801189e:	2340      	movs	r3, #64	; 0x40
 80118a0:	1b40      	subs	r0, r0, r5
 80118a2:	fa03 f000 	lsl.w	r0, r3, r0
 80118a6:	9b04      	ldr	r3, [sp, #16]
 80118a8:	4303      	orrs	r3, r0
 80118aa:	3701      	adds	r7, #1
 80118ac:	9304      	str	r3, [sp, #16]
 80118ae:	7839      	ldrb	r1, [r7, #0]
 80118b0:	4827      	ldr	r0, [pc, #156]	; (8011950 <_svfiprintf_r+0x1e4>)
 80118b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118b6:	2206      	movs	r2, #6
 80118b8:	1c7e      	adds	r6, r7, #1
 80118ba:	f7ee fcb9 	bl	8000230 <memchr>
 80118be:	2800      	cmp	r0, #0
 80118c0:	d038      	beq.n	8011934 <_svfiprintf_r+0x1c8>
 80118c2:	4b24      	ldr	r3, [pc, #144]	; (8011954 <_svfiprintf_r+0x1e8>)
 80118c4:	bb13      	cbnz	r3, 801190c <_svfiprintf_r+0x1a0>
 80118c6:	9b03      	ldr	r3, [sp, #12]
 80118c8:	3307      	adds	r3, #7
 80118ca:	f023 0307 	bic.w	r3, r3, #7
 80118ce:	3308      	adds	r3, #8
 80118d0:	9303      	str	r3, [sp, #12]
 80118d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d4:	444b      	add	r3, r9
 80118d6:	9309      	str	r3, [sp, #36]	; 0x24
 80118d8:	e76d      	b.n	80117b6 <_svfiprintf_r+0x4a>
 80118da:	fb05 3202 	mla	r2, r5, r2, r3
 80118de:	2001      	movs	r0, #1
 80118e0:	460f      	mov	r7, r1
 80118e2:	e7a6      	b.n	8011832 <_svfiprintf_r+0xc6>
 80118e4:	2300      	movs	r3, #0
 80118e6:	3701      	adds	r7, #1
 80118e8:	9305      	str	r3, [sp, #20]
 80118ea:	4619      	mov	r1, r3
 80118ec:	250a      	movs	r5, #10
 80118ee:	4638      	mov	r0, r7
 80118f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118f4:	3a30      	subs	r2, #48	; 0x30
 80118f6:	2a09      	cmp	r2, #9
 80118f8:	d903      	bls.n	8011902 <_svfiprintf_r+0x196>
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d0c8      	beq.n	8011890 <_svfiprintf_r+0x124>
 80118fe:	9105      	str	r1, [sp, #20]
 8011900:	e7c6      	b.n	8011890 <_svfiprintf_r+0x124>
 8011902:	fb05 2101 	mla	r1, r5, r1, r2
 8011906:	2301      	movs	r3, #1
 8011908:	4607      	mov	r7, r0
 801190a:	e7f0      	b.n	80118ee <_svfiprintf_r+0x182>
 801190c:	ab03      	add	r3, sp, #12
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	4622      	mov	r2, r4
 8011912:	4b11      	ldr	r3, [pc, #68]	; (8011958 <_svfiprintf_r+0x1ec>)
 8011914:	a904      	add	r1, sp, #16
 8011916:	4640      	mov	r0, r8
 8011918:	f7fd fdca 	bl	800f4b0 <_printf_float>
 801191c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011920:	4681      	mov	r9, r0
 8011922:	d1d6      	bne.n	80118d2 <_svfiprintf_r+0x166>
 8011924:	89a3      	ldrh	r3, [r4, #12]
 8011926:	065b      	lsls	r3, r3, #25
 8011928:	f53f af35 	bmi.w	8011796 <_svfiprintf_r+0x2a>
 801192c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801192e:	b01d      	add	sp, #116	; 0x74
 8011930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011934:	ab03      	add	r3, sp, #12
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	4622      	mov	r2, r4
 801193a:	4b07      	ldr	r3, [pc, #28]	; (8011958 <_svfiprintf_r+0x1ec>)
 801193c:	a904      	add	r1, sp, #16
 801193e:	4640      	mov	r0, r8
 8011940:	f7fe f86c 	bl	800fa1c <_printf_i>
 8011944:	e7ea      	b.n	801191c <_svfiprintf_r+0x1b0>
 8011946:	bf00      	nop
 8011948:	0801453c 	.word	0x0801453c
 801194c:	08014542 	.word	0x08014542
 8011950:	08014546 	.word	0x08014546
 8011954:	0800f4b1 	.word	0x0800f4b1
 8011958:	080116b9 	.word	0x080116b9

0801195c <_sbrk_r>:
 801195c:	b538      	push	{r3, r4, r5, lr}
 801195e:	4c06      	ldr	r4, [pc, #24]	; (8011978 <_sbrk_r+0x1c>)
 8011960:	2300      	movs	r3, #0
 8011962:	4605      	mov	r5, r0
 8011964:	4608      	mov	r0, r1
 8011966:	6023      	str	r3, [r4, #0]
 8011968:	f7f6 f9a4 	bl	8007cb4 <_sbrk>
 801196c:	1c43      	adds	r3, r0, #1
 801196e:	d102      	bne.n	8011976 <_sbrk_r+0x1a>
 8011970:	6823      	ldr	r3, [r4, #0]
 8011972:	b103      	cbz	r3, 8011976 <_sbrk_r+0x1a>
 8011974:	602b      	str	r3, [r5, #0]
 8011976:	bd38      	pop	{r3, r4, r5, pc}
 8011978:	20002950 	.word	0x20002950

0801197c <__sread>:
 801197c:	b510      	push	{r4, lr}
 801197e:	460c      	mov	r4, r1
 8011980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011984:	f000 f8e8 	bl	8011b58 <_read_r>
 8011988:	2800      	cmp	r0, #0
 801198a:	bfab      	itete	ge
 801198c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801198e:	89a3      	ldrhlt	r3, [r4, #12]
 8011990:	181b      	addge	r3, r3, r0
 8011992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011996:	bfac      	ite	ge
 8011998:	6563      	strge	r3, [r4, #84]	; 0x54
 801199a:	81a3      	strhlt	r3, [r4, #12]
 801199c:	bd10      	pop	{r4, pc}

0801199e <__swrite>:
 801199e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a2:	461f      	mov	r7, r3
 80119a4:	898b      	ldrh	r3, [r1, #12]
 80119a6:	05db      	lsls	r3, r3, #23
 80119a8:	4605      	mov	r5, r0
 80119aa:	460c      	mov	r4, r1
 80119ac:	4616      	mov	r6, r2
 80119ae:	d505      	bpl.n	80119bc <__swrite+0x1e>
 80119b0:	2302      	movs	r3, #2
 80119b2:	2200      	movs	r2, #0
 80119b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b8:	f000 f868 	bl	8011a8c <_lseek_r>
 80119bc:	89a3      	ldrh	r3, [r4, #12]
 80119be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119c6:	81a3      	strh	r3, [r4, #12]
 80119c8:	4632      	mov	r2, r6
 80119ca:	463b      	mov	r3, r7
 80119cc:	4628      	mov	r0, r5
 80119ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119d2:	f000 b817 	b.w	8011a04 <_write_r>

080119d6 <__sseek>:
 80119d6:	b510      	push	{r4, lr}
 80119d8:	460c      	mov	r4, r1
 80119da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119de:	f000 f855 	bl	8011a8c <_lseek_r>
 80119e2:	1c43      	adds	r3, r0, #1
 80119e4:	89a3      	ldrh	r3, [r4, #12]
 80119e6:	bf15      	itete	ne
 80119e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80119ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119f2:	81a3      	strheq	r3, [r4, #12]
 80119f4:	bf18      	it	ne
 80119f6:	81a3      	strhne	r3, [r4, #12]
 80119f8:	bd10      	pop	{r4, pc}

080119fa <__sclose>:
 80119fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119fe:	f000 b813 	b.w	8011a28 <_close_r>
	...

08011a04 <_write_r>:
 8011a04:	b538      	push	{r3, r4, r5, lr}
 8011a06:	4c07      	ldr	r4, [pc, #28]	; (8011a24 <_write_r+0x20>)
 8011a08:	4605      	mov	r5, r0
 8011a0a:	4608      	mov	r0, r1
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	2200      	movs	r2, #0
 8011a10:	6022      	str	r2, [r4, #0]
 8011a12:	461a      	mov	r2, r3
 8011a14:	f7f5 fe25 	bl	8007662 <_write>
 8011a18:	1c43      	adds	r3, r0, #1
 8011a1a:	d102      	bne.n	8011a22 <_write_r+0x1e>
 8011a1c:	6823      	ldr	r3, [r4, #0]
 8011a1e:	b103      	cbz	r3, 8011a22 <_write_r+0x1e>
 8011a20:	602b      	str	r3, [r5, #0]
 8011a22:	bd38      	pop	{r3, r4, r5, pc}
 8011a24:	20002950 	.word	0x20002950

08011a28 <_close_r>:
 8011a28:	b538      	push	{r3, r4, r5, lr}
 8011a2a:	4c06      	ldr	r4, [pc, #24]	; (8011a44 <_close_r+0x1c>)
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	4605      	mov	r5, r0
 8011a30:	4608      	mov	r0, r1
 8011a32:	6023      	str	r3, [r4, #0]
 8011a34:	f7f6 f909 	bl	8007c4a <_close>
 8011a38:	1c43      	adds	r3, r0, #1
 8011a3a:	d102      	bne.n	8011a42 <_close_r+0x1a>
 8011a3c:	6823      	ldr	r3, [r4, #0]
 8011a3e:	b103      	cbz	r3, 8011a42 <_close_r+0x1a>
 8011a40:	602b      	str	r3, [r5, #0]
 8011a42:	bd38      	pop	{r3, r4, r5, pc}
 8011a44:	20002950 	.word	0x20002950

08011a48 <_fstat_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	4c07      	ldr	r4, [pc, #28]	; (8011a68 <_fstat_r+0x20>)
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	4605      	mov	r5, r0
 8011a50:	4608      	mov	r0, r1
 8011a52:	4611      	mov	r1, r2
 8011a54:	6023      	str	r3, [r4, #0]
 8011a56:	f7f6 f904 	bl	8007c62 <_fstat>
 8011a5a:	1c43      	adds	r3, r0, #1
 8011a5c:	d102      	bne.n	8011a64 <_fstat_r+0x1c>
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	b103      	cbz	r3, 8011a64 <_fstat_r+0x1c>
 8011a62:	602b      	str	r3, [r5, #0]
 8011a64:	bd38      	pop	{r3, r4, r5, pc}
 8011a66:	bf00      	nop
 8011a68:	20002950 	.word	0x20002950

08011a6c <_isatty_r>:
 8011a6c:	b538      	push	{r3, r4, r5, lr}
 8011a6e:	4c06      	ldr	r4, [pc, #24]	; (8011a88 <_isatty_r+0x1c>)
 8011a70:	2300      	movs	r3, #0
 8011a72:	4605      	mov	r5, r0
 8011a74:	4608      	mov	r0, r1
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	f7f6 f903 	bl	8007c82 <_isatty>
 8011a7c:	1c43      	adds	r3, r0, #1
 8011a7e:	d102      	bne.n	8011a86 <_isatty_r+0x1a>
 8011a80:	6823      	ldr	r3, [r4, #0]
 8011a82:	b103      	cbz	r3, 8011a86 <_isatty_r+0x1a>
 8011a84:	602b      	str	r3, [r5, #0]
 8011a86:	bd38      	pop	{r3, r4, r5, pc}
 8011a88:	20002950 	.word	0x20002950

08011a8c <_lseek_r>:
 8011a8c:	b538      	push	{r3, r4, r5, lr}
 8011a8e:	4c07      	ldr	r4, [pc, #28]	; (8011aac <_lseek_r+0x20>)
 8011a90:	4605      	mov	r5, r0
 8011a92:	4608      	mov	r0, r1
 8011a94:	4611      	mov	r1, r2
 8011a96:	2200      	movs	r2, #0
 8011a98:	6022      	str	r2, [r4, #0]
 8011a9a:	461a      	mov	r2, r3
 8011a9c:	f7f6 f8fc 	bl	8007c98 <_lseek>
 8011aa0:	1c43      	adds	r3, r0, #1
 8011aa2:	d102      	bne.n	8011aaa <_lseek_r+0x1e>
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	b103      	cbz	r3, 8011aaa <_lseek_r+0x1e>
 8011aa8:	602b      	str	r3, [r5, #0]
 8011aaa:	bd38      	pop	{r3, r4, r5, pc}
 8011aac:	20002950 	.word	0x20002950

08011ab0 <__ascii_mbtowc>:
 8011ab0:	b082      	sub	sp, #8
 8011ab2:	b901      	cbnz	r1, 8011ab6 <__ascii_mbtowc+0x6>
 8011ab4:	a901      	add	r1, sp, #4
 8011ab6:	b142      	cbz	r2, 8011aca <__ascii_mbtowc+0x1a>
 8011ab8:	b14b      	cbz	r3, 8011ace <__ascii_mbtowc+0x1e>
 8011aba:	7813      	ldrb	r3, [r2, #0]
 8011abc:	600b      	str	r3, [r1, #0]
 8011abe:	7812      	ldrb	r2, [r2, #0]
 8011ac0:	1c10      	adds	r0, r2, #0
 8011ac2:	bf18      	it	ne
 8011ac4:	2001      	movne	r0, #1
 8011ac6:	b002      	add	sp, #8
 8011ac8:	4770      	bx	lr
 8011aca:	4610      	mov	r0, r2
 8011acc:	e7fb      	b.n	8011ac6 <__ascii_mbtowc+0x16>
 8011ace:	f06f 0001 	mvn.w	r0, #1
 8011ad2:	e7f8      	b.n	8011ac6 <__ascii_mbtowc+0x16>

08011ad4 <memmove>:
 8011ad4:	4288      	cmp	r0, r1
 8011ad6:	b510      	push	{r4, lr}
 8011ad8:	eb01 0302 	add.w	r3, r1, r2
 8011adc:	d807      	bhi.n	8011aee <memmove+0x1a>
 8011ade:	1e42      	subs	r2, r0, #1
 8011ae0:	4299      	cmp	r1, r3
 8011ae2:	d00a      	beq.n	8011afa <memmove+0x26>
 8011ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ae8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011aec:	e7f8      	b.n	8011ae0 <memmove+0xc>
 8011aee:	4283      	cmp	r3, r0
 8011af0:	d9f5      	bls.n	8011ade <memmove+0xa>
 8011af2:	1881      	adds	r1, r0, r2
 8011af4:	1ad2      	subs	r2, r2, r3
 8011af6:	42d3      	cmn	r3, r2
 8011af8:	d100      	bne.n	8011afc <memmove+0x28>
 8011afa:	bd10      	pop	{r4, pc}
 8011afc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011b04:	e7f7      	b.n	8011af6 <memmove+0x22>

08011b06 <__malloc_lock>:
 8011b06:	4770      	bx	lr

08011b08 <__malloc_unlock>:
 8011b08:	4770      	bx	lr

08011b0a <_realloc_r>:
 8011b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b0c:	4607      	mov	r7, r0
 8011b0e:	4614      	mov	r4, r2
 8011b10:	460e      	mov	r6, r1
 8011b12:	b921      	cbnz	r1, 8011b1e <_realloc_r+0x14>
 8011b14:	4611      	mov	r1, r2
 8011b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011b1a:	f7ff bd73 	b.w	8011604 <_malloc_r>
 8011b1e:	b922      	cbnz	r2, 8011b2a <_realloc_r+0x20>
 8011b20:	f7ff fd22 	bl	8011568 <_free_r>
 8011b24:	4625      	mov	r5, r4
 8011b26:	4628      	mov	r0, r5
 8011b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b2a:	f000 f834 	bl	8011b96 <_malloc_usable_size_r>
 8011b2e:	42a0      	cmp	r0, r4
 8011b30:	d20f      	bcs.n	8011b52 <_realloc_r+0x48>
 8011b32:	4621      	mov	r1, r4
 8011b34:	4638      	mov	r0, r7
 8011b36:	f7ff fd65 	bl	8011604 <_malloc_r>
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d0f2      	beq.n	8011b26 <_realloc_r+0x1c>
 8011b40:	4631      	mov	r1, r6
 8011b42:	4622      	mov	r2, r4
 8011b44:	f7ff fa1c 	bl	8010f80 <memcpy>
 8011b48:	4631      	mov	r1, r6
 8011b4a:	4638      	mov	r0, r7
 8011b4c:	f7ff fd0c 	bl	8011568 <_free_r>
 8011b50:	e7e9      	b.n	8011b26 <_realloc_r+0x1c>
 8011b52:	4635      	mov	r5, r6
 8011b54:	e7e7      	b.n	8011b26 <_realloc_r+0x1c>
	...

08011b58 <_read_r>:
 8011b58:	b538      	push	{r3, r4, r5, lr}
 8011b5a:	4c07      	ldr	r4, [pc, #28]	; (8011b78 <_read_r+0x20>)
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	4608      	mov	r0, r1
 8011b60:	4611      	mov	r1, r2
 8011b62:	2200      	movs	r2, #0
 8011b64:	6022      	str	r2, [r4, #0]
 8011b66:	461a      	mov	r2, r3
 8011b68:	f7f6 f852 	bl	8007c10 <_read>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_read_r+0x1e>
 8011b70:	6823      	ldr	r3, [r4, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_read_r+0x1e>
 8011b74:	602b      	str	r3, [r5, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	20002950 	.word	0x20002950

08011b7c <__ascii_wctomb>:
 8011b7c:	b149      	cbz	r1, 8011b92 <__ascii_wctomb+0x16>
 8011b7e:	2aff      	cmp	r2, #255	; 0xff
 8011b80:	bf85      	ittet	hi
 8011b82:	238a      	movhi	r3, #138	; 0x8a
 8011b84:	6003      	strhi	r3, [r0, #0]
 8011b86:	700a      	strbls	r2, [r1, #0]
 8011b88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011b8c:	bf98      	it	ls
 8011b8e:	2001      	movls	r0, #1
 8011b90:	4770      	bx	lr
 8011b92:	4608      	mov	r0, r1
 8011b94:	4770      	bx	lr

08011b96 <_malloc_usable_size_r>:
 8011b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b9a:	1f18      	subs	r0, r3, #4
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	bfbc      	itt	lt
 8011ba0:	580b      	ldrlt	r3, [r1, r0]
 8011ba2:	18c0      	addlt	r0, r0, r3
 8011ba4:	4770      	bx	lr
	...

08011ba8 <log10>:
 8011ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011baa:	ed2d 8b02 	vpush	{d8}
 8011bae:	b08b      	sub	sp, #44	; 0x2c
 8011bb0:	ec55 4b10 	vmov	r4, r5, d0
 8011bb4:	f000 f9e8 	bl	8011f88 <__ieee754_log10>
 8011bb8:	4b36      	ldr	r3, [pc, #216]	; (8011c94 <log10+0xec>)
 8011bba:	eeb0 8a40 	vmov.f32	s16, s0
 8011bbe:	eef0 8a60 	vmov.f32	s17, s1
 8011bc2:	f993 6000 	ldrsb.w	r6, [r3]
 8011bc6:	1c73      	adds	r3, r6, #1
 8011bc8:	d05c      	beq.n	8011c84 <log10+0xdc>
 8011bca:	4622      	mov	r2, r4
 8011bcc:	462b      	mov	r3, r5
 8011bce:	4620      	mov	r0, r4
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	f7ee ffd3 	bl	8000b7c <__aeabi_dcmpun>
 8011bd6:	4607      	mov	r7, r0
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d153      	bne.n	8011c84 <log10+0xdc>
 8011bdc:	2200      	movs	r2, #0
 8011bde:	2300      	movs	r3, #0
 8011be0:	4620      	mov	r0, r4
 8011be2:	4629      	mov	r1, r5
 8011be4:	f7ee ffac 	bl	8000b40 <__aeabi_dcmple>
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d04b      	beq.n	8011c84 <log10+0xdc>
 8011bec:	4b2a      	ldr	r3, [pc, #168]	; (8011c98 <log10+0xf0>)
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	9708      	str	r7, [sp, #32]
 8011bf2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011bf6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011bfa:	b9a6      	cbnz	r6, 8011c26 <log10+0x7e>
 8011bfc:	4b27      	ldr	r3, [pc, #156]	; (8011c9c <log10+0xf4>)
 8011bfe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011c02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c06:	4620      	mov	r0, r4
 8011c08:	2200      	movs	r2, #0
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	f7ee ff83 	bl	8000b18 <__aeabi_dcmpeq>
 8011c12:	bb40      	cbnz	r0, 8011c66 <log10+0xbe>
 8011c14:	2301      	movs	r3, #1
 8011c16:	2e02      	cmp	r6, #2
 8011c18:	9300      	str	r3, [sp, #0]
 8011c1a:	d119      	bne.n	8011c50 <log10+0xa8>
 8011c1c:	f7fd fb82 	bl	800f324 <__errno>
 8011c20:	2321      	movs	r3, #33	; 0x21
 8011c22:	6003      	str	r3, [r0, #0]
 8011c24:	e019      	b.n	8011c5a <log10+0xb2>
 8011c26:	4b1e      	ldr	r3, [pc, #120]	; (8011ca0 <log10+0xf8>)
 8011c28:	2200      	movs	r2, #0
 8011c2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011c2e:	4620      	mov	r0, r4
 8011c30:	2200      	movs	r2, #0
 8011c32:	2300      	movs	r3, #0
 8011c34:	4629      	mov	r1, r5
 8011c36:	f7ee ff6f 	bl	8000b18 <__aeabi_dcmpeq>
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	d0ea      	beq.n	8011c14 <log10+0x6c>
 8011c3e:	2302      	movs	r3, #2
 8011c40:	429e      	cmp	r6, r3
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	d111      	bne.n	8011c6a <log10+0xc2>
 8011c46:	f7fd fb6d 	bl	800f324 <__errno>
 8011c4a:	2322      	movs	r3, #34	; 0x22
 8011c4c:	6003      	str	r3, [r0, #0]
 8011c4e:	e011      	b.n	8011c74 <log10+0xcc>
 8011c50:	4668      	mov	r0, sp
 8011c52:	f000 fff4 	bl	8012c3e <matherr>
 8011c56:	2800      	cmp	r0, #0
 8011c58:	d0e0      	beq.n	8011c1c <log10+0x74>
 8011c5a:	4812      	ldr	r0, [pc, #72]	; (8011ca4 <log10+0xfc>)
 8011c5c:	f000 fff4 	bl	8012c48 <nan>
 8011c60:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011c64:	e006      	b.n	8011c74 <log10+0xcc>
 8011c66:	2302      	movs	r3, #2
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	4668      	mov	r0, sp
 8011c6c:	f000 ffe7 	bl	8012c3e <matherr>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d0e8      	beq.n	8011c46 <log10+0x9e>
 8011c74:	9b08      	ldr	r3, [sp, #32]
 8011c76:	b11b      	cbz	r3, 8011c80 <log10+0xd8>
 8011c78:	f7fd fb54 	bl	800f324 <__errno>
 8011c7c:	9b08      	ldr	r3, [sp, #32]
 8011c7e:	6003      	str	r3, [r0, #0]
 8011c80:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011c84:	eeb0 0a48 	vmov.f32	s0, s16
 8011c88:	eef0 0a68 	vmov.f32	s1, s17
 8011c8c:	b00b      	add	sp, #44	; 0x2c
 8011c8e:	ecbd 8b02 	vpop	{d8}
 8011c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c94:	20001e7c 	.word	0x20001e7c
 8011c98:	08014658 	.word	0x08014658
 8011c9c:	c7efffff 	.word	0xc7efffff
 8011ca0:	fff00000 	.word	0xfff00000
 8011ca4:	08014541 	.word	0x08014541

08011ca8 <pow>:
 8011ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cac:	ed2d 8b04 	vpush	{d8-d9}
 8011cb0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011f84 <pow+0x2dc>
 8011cb4:	b08d      	sub	sp, #52	; 0x34
 8011cb6:	ec57 6b10 	vmov	r6, r7, d0
 8011cba:	ec55 4b11 	vmov	r4, r5, d1
 8011cbe:	f000 f9ef 	bl	80120a0 <__ieee754_pow>
 8011cc2:	f999 3000 	ldrsb.w	r3, [r9]
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	eeb0 8a40 	vmov.f32	s16, s0
 8011cce:	eef0 8a60 	vmov.f32	s17, s1
 8011cd2:	46c8      	mov	r8, r9
 8011cd4:	d05f      	beq.n	8011d96 <pow+0xee>
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	462b      	mov	r3, r5
 8011cda:	4620      	mov	r0, r4
 8011cdc:	4629      	mov	r1, r5
 8011cde:	f7ee ff4d 	bl	8000b7c <__aeabi_dcmpun>
 8011ce2:	4683      	mov	fp, r0
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d156      	bne.n	8011d96 <pow+0xee>
 8011ce8:	4632      	mov	r2, r6
 8011cea:	463b      	mov	r3, r7
 8011cec:	4630      	mov	r0, r6
 8011cee:	4639      	mov	r1, r7
 8011cf0:	f7ee ff44 	bl	8000b7c <__aeabi_dcmpun>
 8011cf4:	9001      	str	r0, [sp, #4]
 8011cf6:	b1e8      	cbz	r0, 8011d34 <pow+0x8c>
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	4629      	mov	r1, r5
 8011d00:	f7ee ff0a 	bl	8000b18 <__aeabi_dcmpeq>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	d046      	beq.n	8011d96 <pow+0xee>
 8011d08:	2301      	movs	r3, #1
 8011d0a:	9302      	str	r3, [sp, #8]
 8011d0c:	4b96      	ldr	r3, [pc, #600]	; (8011f68 <pow+0x2c0>)
 8011d0e:	9303      	str	r3, [sp, #12]
 8011d10:	4b96      	ldr	r3, [pc, #600]	; (8011f6c <pow+0x2c4>)
 8011d12:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011d16:	2200      	movs	r2, #0
 8011d18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011d1c:	9b00      	ldr	r3, [sp, #0]
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011d24:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011d28:	d033      	beq.n	8011d92 <pow+0xea>
 8011d2a:	a802      	add	r0, sp, #8
 8011d2c:	f000 ff87 	bl	8012c3e <matherr>
 8011d30:	bb48      	cbnz	r0, 8011d86 <pow+0xde>
 8011d32:	e05d      	b.n	8011df0 <pow+0x148>
 8011d34:	f04f 0a00 	mov.w	sl, #0
 8011d38:	f04f 0b00 	mov.w	fp, #0
 8011d3c:	4652      	mov	r2, sl
 8011d3e:	465b      	mov	r3, fp
 8011d40:	4630      	mov	r0, r6
 8011d42:	4639      	mov	r1, r7
 8011d44:	f7ee fee8 	bl	8000b18 <__aeabi_dcmpeq>
 8011d48:	ec4b ab19 	vmov	d9, sl, fp
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d054      	beq.n	8011dfa <pow+0x152>
 8011d50:	4652      	mov	r2, sl
 8011d52:	465b      	mov	r3, fp
 8011d54:	4620      	mov	r0, r4
 8011d56:	4629      	mov	r1, r5
 8011d58:	f7ee fede 	bl	8000b18 <__aeabi_dcmpeq>
 8011d5c:	4680      	mov	r8, r0
 8011d5e:	b318      	cbz	r0, 8011da8 <pow+0x100>
 8011d60:	2301      	movs	r3, #1
 8011d62:	9302      	str	r3, [sp, #8]
 8011d64:	4b80      	ldr	r3, [pc, #512]	; (8011f68 <pow+0x2c0>)
 8011d66:	9303      	str	r3, [sp, #12]
 8011d68:	9b01      	ldr	r3, [sp, #4]
 8011d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8011d6c:	9b00      	ldr	r3, [sp, #0]
 8011d6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011d72:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011d76:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d0d5      	beq.n	8011d2a <pow+0x82>
 8011d7e:	4b7b      	ldr	r3, [pc, #492]	; (8011f6c <pow+0x2c4>)
 8011d80:	2200      	movs	r2, #0
 8011d82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d88:	b11b      	cbz	r3, 8011d92 <pow+0xea>
 8011d8a:	f7fd facb 	bl	800f324 <__errno>
 8011d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d90:	6003      	str	r3, [r0, #0]
 8011d92:	ed9d 8b08 	vldr	d8, [sp, #32]
 8011d96:	eeb0 0a48 	vmov.f32	s0, s16
 8011d9a:	eef0 0a68 	vmov.f32	s1, s17
 8011d9e:	b00d      	add	sp, #52	; 0x34
 8011da0:	ecbd 8b04 	vpop	{d8-d9}
 8011da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da8:	ec45 4b10 	vmov	d0, r4, r5
 8011dac:	f000 ff3f 	bl	8012c2e <finite>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d0f0      	beq.n	8011d96 <pow+0xee>
 8011db4:	4652      	mov	r2, sl
 8011db6:	465b      	mov	r3, fp
 8011db8:	4620      	mov	r0, r4
 8011dba:	4629      	mov	r1, r5
 8011dbc:	f7ee feb6 	bl	8000b2c <__aeabi_dcmplt>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d0e8      	beq.n	8011d96 <pow+0xee>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	9302      	str	r3, [sp, #8]
 8011dc8:	4b67      	ldr	r3, [pc, #412]	; (8011f68 <pow+0x2c0>)
 8011dca:	9303      	str	r3, [sp, #12]
 8011dcc:	f999 3000 	ldrsb.w	r3, [r9]
 8011dd0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011dd4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011dd8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011ddc:	b913      	cbnz	r3, 8011de4 <pow+0x13c>
 8011dde:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011de2:	e7a2      	b.n	8011d2a <pow+0x82>
 8011de4:	4962      	ldr	r1, [pc, #392]	; (8011f70 <pow+0x2c8>)
 8011de6:	2000      	movs	r0, #0
 8011de8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d19c      	bne.n	8011d2a <pow+0x82>
 8011df0:	f7fd fa98 	bl	800f324 <__errno>
 8011df4:	2321      	movs	r3, #33	; 0x21
 8011df6:	6003      	str	r3, [r0, #0]
 8011df8:	e7c5      	b.n	8011d86 <pow+0xde>
 8011dfa:	eeb0 0a48 	vmov.f32	s0, s16
 8011dfe:	eef0 0a68 	vmov.f32	s1, s17
 8011e02:	f000 ff14 	bl	8012c2e <finite>
 8011e06:	9000      	str	r0, [sp, #0]
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	f040 8081 	bne.w	8011f10 <pow+0x268>
 8011e0e:	ec47 6b10 	vmov	d0, r6, r7
 8011e12:	f000 ff0c 	bl	8012c2e <finite>
 8011e16:	2800      	cmp	r0, #0
 8011e18:	d07a      	beq.n	8011f10 <pow+0x268>
 8011e1a:	ec45 4b10 	vmov	d0, r4, r5
 8011e1e:	f000 ff06 	bl	8012c2e <finite>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d074      	beq.n	8011f10 <pow+0x268>
 8011e26:	ec53 2b18 	vmov	r2, r3, d8
 8011e2a:	ee18 0a10 	vmov	r0, s16
 8011e2e:	4619      	mov	r1, r3
 8011e30:	f7ee fea4 	bl	8000b7c <__aeabi_dcmpun>
 8011e34:	f999 9000 	ldrsb.w	r9, [r9]
 8011e38:	4b4b      	ldr	r3, [pc, #300]	; (8011f68 <pow+0x2c0>)
 8011e3a:	b1b0      	cbz	r0, 8011e6a <pow+0x1c2>
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e42:	9b00      	ldr	r3, [sp, #0]
 8011e44:	930a      	str	r3, [sp, #40]	; 0x28
 8011e46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011e4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011e4e:	f1b9 0f00 	cmp.w	r9, #0
 8011e52:	d0c4      	beq.n	8011dde <pow+0x136>
 8011e54:	4652      	mov	r2, sl
 8011e56:	465b      	mov	r3, fp
 8011e58:	4650      	mov	r0, sl
 8011e5a:	4659      	mov	r1, fp
 8011e5c:	f7ee fd1e 	bl	800089c <__aeabi_ddiv>
 8011e60:	f1b9 0f02 	cmp.w	r9, #2
 8011e64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011e68:	e7c1      	b.n	8011dee <pow+0x146>
 8011e6a:	2203      	movs	r2, #3
 8011e6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e70:	900a      	str	r0, [sp, #40]	; 0x28
 8011e72:	4629      	mov	r1, r5
 8011e74:	4620      	mov	r0, r4
 8011e76:	2200      	movs	r2, #0
 8011e78:	4b3e      	ldr	r3, [pc, #248]	; (8011f74 <pow+0x2cc>)
 8011e7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011e82:	f7ee fbe1 	bl	8000648 <__aeabi_dmul>
 8011e86:	4604      	mov	r4, r0
 8011e88:	460d      	mov	r5, r1
 8011e8a:	f1b9 0f00 	cmp.w	r9, #0
 8011e8e:	d124      	bne.n	8011eda <pow+0x232>
 8011e90:	4b39      	ldr	r3, [pc, #228]	; (8011f78 <pow+0x2d0>)
 8011e92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011e96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	4652      	mov	r2, sl
 8011e9e:	465b      	mov	r3, fp
 8011ea0:	4639      	mov	r1, r7
 8011ea2:	f7ee fe43 	bl	8000b2c <__aeabi_dcmplt>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d056      	beq.n	8011f58 <pow+0x2b0>
 8011eaa:	ec45 4b10 	vmov	d0, r4, r5
 8011eae:	f000 fed3 	bl	8012c58 <rint>
 8011eb2:	4622      	mov	r2, r4
 8011eb4:	462b      	mov	r3, r5
 8011eb6:	ec51 0b10 	vmov	r0, r1, d0
 8011eba:	f7ee fe2d 	bl	8000b18 <__aeabi_dcmpeq>
 8011ebe:	b920      	cbnz	r0, 8011eca <pow+0x222>
 8011ec0:	4b2e      	ldr	r3, [pc, #184]	; (8011f7c <pow+0x2d4>)
 8011ec2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011ec6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011eca:	f998 3000 	ldrsb.w	r3, [r8]
 8011ece:	2b02      	cmp	r3, #2
 8011ed0:	d142      	bne.n	8011f58 <pow+0x2b0>
 8011ed2:	f7fd fa27 	bl	800f324 <__errno>
 8011ed6:	2322      	movs	r3, #34	; 0x22
 8011ed8:	e78d      	b.n	8011df6 <pow+0x14e>
 8011eda:	4b29      	ldr	r3, [pc, #164]	; (8011f80 <pow+0x2d8>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	4652      	mov	r2, sl
 8011ee6:	465b      	mov	r3, fp
 8011ee8:	4639      	mov	r1, r7
 8011eea:	f7ee fe1f 	bl	8000b2c <__aeabi_dcmplt>
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	d0eb      	beq.n	8011eca <pow+0x222>
 8011ef2:	ec45 4b10 	vmov	d0, r4, r5
 8011ef6:	f000 feaf 	bl	8012c58 <rint>
 8011efa:	4622      	mov	r2, r4
 8011efc:	462b      	mov	r3, r5
 8011efe:	ec51 0b10 	vmov	r0, r1, d0
 8011f02:	f7ee fe09 	bl	8000b18 <__aeabi_dcmpeq>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d1df      	bne.n	8011eca <pow+0x222>
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	4b18      	ldr	r3, [pc, #96]	; (8011f70 <pow+0x2c8>)
 8011f0e:	e7da      	b.n	8011ec6 <pow+0x21e>
 8011f10:	2200      	movs	r2, #0
 8011f12:	2300      	movs	r3, #0
 8011f14:	ec51 0b18 	vmov	r0, r1, d8
 8011f18:	f7ee fdfe 	bl	8000b18 <__aeabi_dcmpeq>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	f43f af3a 	beq.w	8011d96 <pow+0xee>
 8011f22:	ec47 6b10 	vmov	d0, r6, r7
 8011f26:	f000 fe82 	bl	8012c2e <finite>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	f43f af33 	beq.w	8011d96 <pow+0xee>
 8011f30:	ec45 4b10 	vmov	d0, r4, r5
 8011f34:	f000 fe7b 	bl	8012c2e <finite>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	f43f af2c 	beq.w	8011d96 <pow+0xee>
 8011f3e:	2304      	movs	r3, #4
 8011f40:	9302      	str	r3, [sp, #8]
 8011f42:	4b09      	ldr	r3, [pc, #36]	; (8011f68 <pow+0x2c0>)
 8011f44:	9303      	str	r3, [sp, #12]
 8011f46:	2300      	movs	r3, #0
 8011f48:	930a      	str	r3, [sp, #40]	; 0x28
 8011f4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011f4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011f52:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011f56:	e7b8      	b.n	8011eca <pow+0x222>
 8011f58:	a802      	add	r0, sp, #8
 8011f5a:	f000 fe70 	bl	8012c3e <matherr>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f47f af11 	bne.w	8011d86 <pow+0xde>
 8011f64:	e7b5      	b.n	8011ed2 <pow+0x22a>
 8011f66:	bf00      	nop
 8011f68:	0801465e 	.word	0x0801465e
 8011f6c:	3ff00000 	.word	0x3ff00000
 8011f70:	fff00000 	.word	0xfff00000
 8011f74:	3fe00000 	.word	0x3fe00000
 8011f78:	47efffff 	.word	0x47efffff
 8011f7c:	c7efffff 	.word	0xc7efffff
 8011f80:	7ff00000 	.word	0x7ff00000
 8011f84:	20001e7c 	.word	0x20001e7c

08011f88 <__ieee754_log10>:
 8011f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f8c:	ec55 4b10 	vmov	r4, r5, d0
 8011f90:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011f94:	462b      	mov	r3, r5
 8011f96:	da2f      	bge.n	8011ff8 <__ieee754_log10+0x70>
 8011f98:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011f9c:	4322      	orrs	r2, r4
 8011f9e:	d10a      	bne.n	8011fb6 <__ieee754_log10+0x2e>
 8011fa0:	493b      	ldr	r1, [pc, #236]	; (8012090 <__ieee754_log10+0x108>)
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	f7ee fc78 	bl	800089c <__aeabi_ddiv>
 8011fac:	ec41 0b10 	vmov	d0, r0, r1
 8011fb0:	b003      	add	sp, #12
 8011fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	2d00      	cmp	r5, #0
 8011fb8:	da08      	bge.n	8011fcc <__ieee754_log10+0x44>
 8011fba:	ee10 2a10 	vmov	r2, s0
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	f7ee f989 	bl	80002d8 <__aeabi_dsub>
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	2300      	movs	r3, #0
 8011fca:	e7ed      	b.n	8011fa8 <__ieee754_log10+0x20>
 8011fcc:	2200      	movs	r2, #0
 8011fce:	4b31      	ldr	r3, [pc, #196]	; (8012094 <__ieee754_log10+0x10c>)
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	ee10 0a10 	vmov	r0, s0
 8011fd6:	f7ee fb37 	bl	8000648 <__aeabi_dmul>
 8011fda:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011fde:	4604      	mov	r4, r0
 8011fe0:	460d      	mov	r5, r1
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	492c      	ldr	r1, [pc, #176]	; (8012098 <__ieee754_log10+0x110>)
 8011fe6:	428b      	cmp	r3, r1
 8011fe8:	dd08      	ble.n	8011ffc <__ieee754_log10+0x74>
 8011fea:	4622      	mov	r2, r4
 8011fec:	462b      	mov	r3, r5
 8011fee:	4620      	mov	r0, r4
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	f7ee f973 	bl	80002dc <__adddf3>
 8011ff6:	e7d9      	b.n	8011fac <__ieee754_log10+0x24>
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	e7f3      	b.n	8011fe4 <__ieee754_log10+0x5c>
 8011ffc:	1518      	asrs	r0, r3, #20
 8011ffe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8012002:	4410      	add	r0, r2
 8012004:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8012008:	4448      	add	r0, r9
 801200a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801200e:	f7ee fab1 	bl	8000574 <__aeabi_i2d>
 8012012:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8012016:	3303      	adds	r3, #3
 8012018:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801201c:	ec45 4b10 	vmov	d0, r4, r5
 8012020:	4606      	mov	r6, r0
 8012022:	460f      	mov	r7, r1
 8012024:	f000 ff14 	bl	8012e50 <__ieee754_log>
 8012028:	a313      	add	r3, pc, #76	; (adr r3, 8012078 <__ieee754_log10+0xf0>)
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	4630      	mov	r0, r6
 8012030:	4639      	mov	r1, r7
 8012032:	ed8d 0b00 	vstr	d0, [sp]
 8012036:	f7ee fb07 	bl	8000648 <__aeabi_dmul>
 801203a:	ed9d 0b00 	vldr	d0, [sp]
 801203e:	4604      	mov	r4, r0
 8012040:	460d      	mov	r5, r1
 8012042:	a30f      	add	r3, pc, #60	; (adr r3, 8012080 <__ieee754_log10+0xf8>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	ec51 0b10 	vmov	r0, r1, d0
 801204c:	f7ee fafc 	bl	8000648 <__aeabi_dmul>
 8012050:	4602      	mov	r2, r0
 8012052:	460b      	mov	r3, r1
 8012054:	4620      	mov	r0, r4
 8012056:	4629      	mov	r1, r5
 8012058:	f7ee f940 	bl	80002dc <__adddf3>
 801205c:	a30a      	add	r3, pc, #40	; (adr r3, 8012088 <__ieee754_log10+0x100>)
 801205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012062:	4604      	mov	r4, r0
 8012064:	460d      	mov	r5, r1
 8012066:	4630      	mov	r0, r6
 8012068:	4639      	mov	r1, r7
 801206a:	f7ee faed 	bl	8000648 <__aeabi_dmul>
 801206e:	4602      	mov	r2, r0
 8012070:	460b      	mov	r3, r1
 8012072:	4620      	mov	r0, r4
 8012074:	4629      	mov	r1, r5
 8012076:	e7bc      	b.n	8011ff2 <__ieee754_log10+0x6a>
 8012078:	11f12b36 	.word	0x11f12b36
 801207c:	3d59fef3 	.word	0x3d59fef3
 8012080:	1526e50e 	.word	0x1526e50e
 8012084:	3fdbcb7b 	.word	0x3fdbcb7b
 8012088:	509f6000 	.word	0x509f6000
 801208c:	3fd34413 	.word	0x3fd34413
 8012090:	c3500000 	.word	0xc3500000
 8012094:	43500000 	.word	0x43500000
 8012098:	7fefffff 	.word	0x7fefffff
 801209c:	00000000 	.word	0x00000000

080120a0 <__ieee754_pow>:
 80120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a4:	b091      	sub	sp, #68	; 0x44
 80120a6:	ed8d 1b00 	vstr	d1, [sp]
 80120aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80120ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80120b2:	ea58 0302 	orrs.w	r3, r8, r2
 80120b6:	ec57 6b10 	vmov	r6, r7, d0
 80120ba:	f000 84be 	beq.w	8012a3a <__ieee754_pow+0x99a>
 80120be:	4b7a      	ldr	r3, [pc, #488]	; (80122a8 <__ieee754_pow+0x208>)
 80120c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80120c4:	429c      	cmp	r4, r3
 80120c6:	463d      	mov	r5, r7
 80120c8:	ee10 aa10 	vmov	sl, s0
 80120cc:	dc09      	bgt.n	80120e2 <__ieee754_pow+0x42>
 80120ce:	d103      	bne.n	80120d8 <__ieee754_pow+0x38>
 80120d0:	b93e      	cbnz	r6, 80120e2 <__ieee754_pow+0x42>
 80120d2:	45a0      	cmp	r8, r4
 80120d4:	dc0d      	bgt.n	80120f2 <__ieee754_pow+0x52>
 80120d6:	e001      	b.n	80120dc <__ieee754_pow+0x3c>
 80120d8:	4598      	cmp	r8, r3
 80120da:	dc02      	bgt.n	80120e2 <__ieee754_pow+0x42>
 80120dc:	4598      	cmp	r8, r3
 80120de:	d10e      	bne.n	80120fe <__ieee754_pow+0x5e>
 80120e0:	b16a      	cbz	r2, 80120fe <__ieee754_pow+0x5e>
 80120e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80120e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80120ea:	ea54 030a 	orrs.w	r3, r4, sl
 80120ee:	f000 84a4 	beq.w	8012a3a <__ieee754_pow+0x99a>
 80120f2:	486e      	ldr	r0, [pc, #440]	; (80122ac <__ieee754_pow+0x20c>)
 80120f4:	b011      	add	sp, #68	; 0x44
 80120f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fa:	f000 bda5 	b.w	8012c48 <nan>
 80120fe:	2d00      	cmp	r5, #0
 8012100:	da53      	bge.n	80121aa <__ieee754_pow+0x10a>
 8012102:	4b6b      	ldr	r3, [pc, #428]	; (80122b0 <__ieee754_pow+0x210>)
 8012104:	4598      	cmp	r8, r3
 8012106:	dc4d      	bgt.n	80121a4 <__ieee754_pow+0x104>
 8012108:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801210c:	4598      	cmp	r8, r3
 801210e:	dd4c      	ble.n	80121aa <__ieee754_pow+0x10a>
 8012110:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012114:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012118:	2b14      	cmp	r3, #20
 801211a:	dd26      	ble.n	801216a <__ieee754_pow+0xca>
 801211c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012120:	fa22 f103 	lsr.w	r1, r2, r3
 8012124:	fa01 f303 	lsl.w	r3, r1, r3
 8012128:	4293      	cmp	r3, r2
 801212a:	d13e      	bne.n	80121aa <__ieee754_pow+0x10a>
 801212c:	f001 0101 	and.w	r1, r1, #1
 8012130:	f1c1 0b02 	rsb	fp, r1, #2
 8012134:	2a00      	cmp	r2, #0
 8012136:	d15b      	bne.n	80121f0 <__ieee754_pow+0x150>
 8012138:	4b5b      	ldr	r3, [pc, #364]	; (80122a8 <__ieee754_pow+0x208>)
 801213a:	4598      	cmp	r8, r3
 801213c:	d124      	bne.n	8012188 <__ieee754_pow+0xe8>
 801213e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012142:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012146:	ea53 030a 	orrs.w	r3, r3, sl
 801214a:	f000 8476 	beq.w	8012a3a <__ieee754_pow+0x99a>
 801214e:	4b59      	ldr	r3, [pc, #356]	; (80122b4 <__ieee754_pow+0x214>)
 8012150:	429c      	cmp	r4, r3
 8012152:	dd2d      	ble.n	80121b0 <__ieee754_pow+0x110>
 8012154:	f1b9 0f00 	cmp.w	r9, #0
 8012158:	f280 8473 	bge.w	8012a42 <__ieee754_pow+0x9a2>
 801215c:	2000      	movs	r0, #0
 801215e:	2100      	movs	r1, #0
 8012160:	ec41 0b10 	vmov	d0, r0, r1
 8012164:	b011      	add	sp, #68	; 0x44
 8012166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216a:	2a00      	cmp	r2, #0
 801216c:	d13e      	bne.n	80121ec <__ieee754_pow+0x14c>
 801216e:	f1c3 0314 	rsb	r3, r3, #20
 8012172:	fa48 f103 	asr.w	r1, r8, r3
 8012176:	fa01 f303 	lsl.w	r3, r1, r3
 801217a:	4543      	cmp	r3, r8
 801217c:	f040 8469 	bne.w	8012a52 <__ieee754_pow+0x9b2>
 8012180:	f001 0101 	and.w	r1, r1, #1
 8012184:	f1c1 0b02 	rsb	fp, r1, #2
 8012188:	4b4b      	ldr	r3, [pc, #300]	; (80122b8 <__ieee754_pow+0x218>)
 801218a:	4598      	cmp	r8, r3
 801218c:	d118      	bne.n	80121c0 <__ieee754_pow+0x120>
 801218e:	f1b9 0f00 	cmp.w	r9, #0
 8012192:	f280 845a 	bge.w	8012a4a <__ieee754_pow+0x9aa>
 8012196:	4948      	ldr	r1, [pc, #288]	; (80122b8 <__ieee754_pow+0x218>)
 8012198:	4632      	mov	r2, r6
 801219a:	463b      	mov	r3, r7
 801219c:	2000      	movs	r0, #0
 801219e:	f7ee fb7d 	bl	800089c <__aeabi_ddiv>
 80121a2:	e7dd      	b.n	8012160 <__ieee754_pow+0xc0>
 80121a4:	f04f 0b02 	mov.w	fp, #2
 80121a8:	e7c4      	b.n	8012134 <__ieee754_pow+0x94>
 80121aa:	f04f 0b00 	mov.w	fp, #0
 80121ae:	e7c1      	b.n	8012134 <__ieee754_pow+0x94>
 80121b0:	f1b9 0f00 	cmp.w	r9, #0
 80121b4:	dad2      	bge.n	801215c <__ieee754_pow+0xbc>
 80121b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80121ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80121be:	e7cf      	b.n	8012160 <__ieee754_pow+0xc0>
 80121c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80121c4:	d106      	bne.n	80121d4 <__ieee754_pow+0x134>
 80121c6:	4632      	mov	r2, r6
 80121c8:	463b      	mov	r3, r7
 80121ca:	4610      	mov	r0, r2
 80121cc:	4619      	mov	r1, r3
 80121ce:	f7ee fa3b 	bl	8000648 <__aeabi_dmul>
 80121d2:	e7c5      	b.n	8012160 <__ieee754_pow+0xc0>
 80121d4:	4b39      	ldr	r3, [pc, #228]	; (80122bc <__ieee754_pow+0x21c>)
 80121d6:	4599      	cmp	r9, r3
 80121d8:	d10a      	bne.n	80121f0 <__ieee754_pow+0x150>
 80121da:	2d00      	cmp	r5, #0
 80121dc:	db08      	blt.n	80121f0 <__ieee754_pow+0x150>
 80121de:	ec47 6b10 	vmov	d0, r6, r7
 80121e2:	b011      	add	sp, #68	; 0x44
 80121e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e8:	f000 bc68 	b.w	8012abc <__ieee754_sqrt>
 80121ec:	f04f 0b00 	mov.w	fp, #0
 80121f0:	ec47 6b10 	vmov	d0, r6, r7
 80121f4:	f000 fd12 	bl	8012c1c <fabs>
 80121f8:	ec51 0b10 	vmov	r0, r1, d0
 80121fc:	f1ba 0f00 	cmp.w	sl, #0
 8012200:	d127      	bne.n	8012252 <__ieee754_pow+0x1b2>
 8012202:	b124      	cbz	r4, 801220e <__ieee754_pow+0x16e>
 8012204:	4b2c      	ldr	r3, [pc, #176]	; (80122b8 <__ieee754_pow+0x218>)
 8012206:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801220a:	429a      	cmp	r2, r3
 801220c:	d121      	bne.n	8012252 <__ieee754_pow+0x1b2>
 801220e:	f1b9 0f00 	cmp.w	r9, #0
 8012212:	da05      	bge.n	8012220 <__ieee754_pow+0x180>
 8012214:	4602      	mov	r2, r0
 8012216:	460b      	mov	r3, r1
 8012218:	2000      	movs	r0, #0
 801221a:	4927      	ldr	r1, [pc, #156]	; (80122b8 <__ieee754_pow+0x218>)
 801221c:	f7ee fb3e 	bl	800089c <__aeabi_ddiv>
 8012220:	2d00      	cmp	r5, #0
 8012222:	da9d      	bge.n	8012160 <__ieee754_pow+0xc0>
 8012224:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012228:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801222c:	ea54 030b 	orrs.w	r3, r4, fp
 8012230:	d108      	bne.n	8012244 <__ieee754_pow+0x1a4>
 8012232:	4602      	mov	r2, r0
 8012234:	460b      	mov	r3, r1
 8012236:	4610      	mov	r0, r2
 8012238:	4619      	mov	r1, r3
 801223a:	f7ee f84d 	bl	80002d8 <__aeabi_dsub>
 801223e:	4602      	mov	r2, r0
 8012240:	460b      	mov	r3, r1
 8012242:	e7ac      	b.n	801219e <__ieee754_pow+0xfe>
 8012244:	f1bb 0f01 	cmp.w	fp, #1
 8012248:	d18a      	bne.n	8012160 <__ieee754_pow+0xc0>
 801224a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801224e:	4619      	mov	r1, r3
 8012250:	e786      	b.n	8012160 <__ieee754_pow+0xc0>
 8012252:	0fed      	lsrs	r5, r5, #31
 8012254:	1e6b      	subs	r3, r5, #1
 8012256:	930d      	str	r3, [sp, #52]	; 0x34
 8012258:	ea5b 0303 	orrs.w	r3, fp, r3
 801225c:	d102      	bne.n	8012264 <__ieee754_pow+0x1c4>
 801225e:	4632      	mov	r2, r6
 8012260:	463b      	mov	r3, r7
 8012262:	e7e8      	b.n	8012236 <__ieee754_pow+0x196>
 8012264:	4b16      	ldr	r3, [pc, #88]	; (80122c0 <__ieee754_pow+0x220>)
 8012266:	4598      	cmp	r8, r3
 8012268:	f340 80fe 	ble.w	8012468 <__ieee754_pow+0x3c8>
 801226c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012270:	4598      	cmp	r8, r3
 8012272:	dd0a      	ble.n	801228a <__ieee754_pow+0x1ea>
 8012274:	4b0f      	ldr	r3, [pc, #60]	; (80122b4 <__ieee754_pow+0x214>)
 8012276:	429c      	cmp	r4, r3
 8012278:	dc0d      	bgt.n	8012296 <__ieee754_pow+0x1f6>
 801227a:	f1b9 0f00 	cmp.w	r9, #0
 801227e:	f6bf af6d 	bge.w	801215c <__ieee754_pow+0xbc>
 8012282:	a307      	add	r3, pc, #28	; (adr r3, 80122a0 <__ieee754_pow+0x200>)
 8012284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012288:	e79f      	b.n	80121ca <__ieee754_pow+0x12a>
 801228a:	4b0e      	ldr	r3, [pc, #56]	; (80122c4 <__ieee754_pow+0x224>)
 801228c:	429c      	cmp	r4, r3
 801228e:	ddf4      	ble.n	801227a <__ieee754_pow+0x1da>
 8012290:	4b09      	ldr	r3, [pc, #36]	; (80122b8 <__ieee754_pow+0x218>)
 8012292:	429c      	cmp	r4, r3
 8012294:	dd18      	ble.n	80122c8 <__ieee754_pow+0x228>
 8012296:	f1b9 0f00 	cmp.w	r9, #0
 801229a:	dcf2      	bgt.n	8012282 <__ieee754_pow+0x1e2>
 801229c:	e75e      	b.n	801215c <__ieee754_pow+0xbc>
 801229e:	bf00      	nop
 80122a0:	8800759c 	.word	0x8800759c
 80122a4:	7e37e43c 	.word	0x7e37e43c
 80122a8:	7ff00000 	.word	0x7ff00000
 80122ac:	08014541 	.word	0x08014541
 80122b0:	433fffff 	.word	0x433fffff
 80122b4:	3fefffff 	.word	0x3fefffff
 80122b8:	3ff00000 	.word	0x3ff00000
 80122bc:	3fe00000 	.word	0x3fe00000
 80122c0:	41e00000 	.word	0x41e00000
 80122c4:	3feffffe 	.word	0x3feffffe
 80122c8:	2200      	movs	r2, #0
 80122ca:	4b63      	ldr	r3, [pc, #396]	; (8012458 <__ieee754_pow+0x3b8>)
 80122cc:	f7ee f804 	bl	80002d8 <__aeabi_dsub>
 80122d0:	a355      	add	r3, pc, #340	; (adr r3, 8012428 <__ieee754_pow+0x388>)
 80122d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d6:	4604      	mov	r4, r0
 80122d8:	460d      	mov	r5, r1
 80122da:	f7ee f9b5 	bl	8000648 <__aeabi_dmul>
 80122de:	a354      	add	r3, pc, #336	; (adr r3, 8012430 <__ieee754_pow+0x390>)
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	4606      	mov	r6, r0
 80122e6:	460f      	mov	r7, r1
 80122e8:	4620      	mov	r0, r4
 80122ea:	4629      	mov	r1, r5
 80122ec:	f7ee f9ac 	bl	8000648 <__aeabi_dmul>
 80122f0:	2200      	movs	r2, #0
 80122f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122f6:	4b59      	ldr	r3, [pc, #356]	; (801245c <__ieee754_pow+0x3bc>)
 80122f8:	4620      	mov	r0, r4
 80122fa:	4629      	mov	r1, r5
 80122fc:	f7ee f9a4 	bl	8000648 <__aeabi_dmul>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	a14c      	add	r1, pc, #304	; (adr r1, 8012438 <__ieee754_pow+0x398>)
 8012306:	e9d1 0100 	ldrd	r0, r1, [r1]
 801230a:	f7ed ffe5 	bl	80002d8 <__aeabi_dsub>
 801230e:	4622      	mov	r2, r4
 8012310:	462b      	mov	r3, r5
 8012312:	f7ee f999 	bl	8000648 <__aeabi_dmul>
 8012316:	4602      	mov	r2, r0
 8012318:	460b      	mov	r3, r1
 801231a:	2000      	movs	r0, #0
 801231c:	4950      	ldr	r1, [pc, #320]	; (8012460 <__ieee754_pow+0x3c0>)
 801231e:	f7ed ffdb 	bl	80002d8 <__aeabi_dsub>
 8012322:	4622      	mov	r2, r4
 8012324:	462b      	mov	r3, r5
 8012326:	4680      	mov	r8, r0
 8012328:	4689      	mov	r9, r1
 801232a:	4620      	mov	r0, r4
 801232c:	4629      	mov	r1, r5
 801232e:	f7ee f98b 	bl	8000648 <__aeabi_dmul>
 8012332:	4602      	mov	r2, r0
 8012334:	460b      	mov	r3, r1
 8012336:	4640      	mov	r0, r8
 8012338:	4649      	mov	r1, r9
 801233a:	f7ee f985 	bl	8000648 <__aeabi_dmul>
 801233e:	a340      	add	r3, pc, #256	; (adr r3, 8012440 <__ieee754_pow+0x3a0>)
 8012340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012344:	f7ee f980 	bl	8000648 <__aeabi_dmul>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012350:	f7ed ffc2 	bl	80002d8 <__aeabi_dsub>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	4604      	mov	r4, r0
 801235a:	460d      	mov	r5, r1
 801235c:	4630      	mov	r0, r6
 801235e:	4639      	mov	r1, r7
 8012360:	f7ed ffbc 	bl	80002dc <__adddf3>
 8012364:	2000      	movs	r0, #0
 8012366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801236a:	4632      	mov	r2, r6
 801236c:	463b      	mov	r3, r7
 801236e:	f7ed ffb3 	bl	80002d8 <__aeabi_dsub>
 8012372:	4602      	mov	r2, r0
 8012374:	460b      	mov	r3, r1
 8012376:	4620      	mov	r0, r4
 8012378:	4629      	mov	r1, r5
 801237a:	f7ed ffad 	bl	80002d8 <__aeabi_dsub>
 801237e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012380:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8012384:	4313      	orrs	r3, r2
 8012386:	4606      	mov	r6, r0
 8012388:	460f      	mov	r7, r1
 801238a:	f040 81eb 	bne.w	8012764 <__ieee754_pow+0x6c4>
 801238e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012448 <__ieee754_pow+0x3a8>
 8012392:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012396:	2400      	movs	r4, #0
 8012398:	4622      	mov	r2, r4
 801239a:	462b      	mov	r3, r5
 801239c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80123a4:	f7ed ff98 	bl	80002d8 <__aeabi_dsub>
 80123a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123ac:	f7ee f94c 	bl	8000648 <__aeabi_dmul>
 80123b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123b4:	4680      	mov	r8, r0
 80123b6:	4689      	mov	r9, r1
 80123b8:	4630      	mov	r0, r6
 80123ba:	4639      	mov	r1, r7
 80123bc:	f7ee f944 	bl	8000648 <__aeabi_dmul>
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4640      	mov	r0, r8
 80123c6:	4649      	mov	r1, r9
 80123c8:	f7ed ff88 	bl	80002dc <__adddf3>
 80123cc:	4622      	mov	r2, r4
 80123ce:	462b      	mov	r3, r5
 80123d0:	4680      	mov	r8, r0
 80123d2:	4689      	mov	r9, r1
 80123d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80123d8:	f7ee f936 	bl	8000648 <__aeabi_dmul>
 80123dc:	460b      	mov	r3, r1
 80123de:	4604      	mov	r4, r0
 80123e0:	460d      	mov	r5, r1
 80123e2:	4602      	mov	r2, r0
 80123e4:	4649      	mov	r1, r9
 80123e6:	4640      	mov	r0, r8
 80123e8:	e9cd 4500 	strd	r4, r5, [sp]
 80123ec:	f7ed ff76 	bl	80002dc <__adddf3>
 80123f0:	4b1c      	ldr	r3, [pc, #112]	; (8012464 <__ieee754_pow+0x3c4>)
 80123f2:	4299      	cmp	r1, r3
 80123f4:	4606      	mov	r6, r0
 80123f6:	460f      	mov	r7, r1
 80123f8:	468b      	mov	fp, r1
 80123fa:	f340 82f7 	ble.w	80129ec <__ieee754_pow+0x94c>
 80123fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012402:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012406:	4303      	orrs	r3, r0
 8012408:	f000 81ea 	beq.w	80127e0 <__ieee754_pow+0x740>
 801240c:	a310      	add	r3, pc, #64	; (adr r3, 8012450 <__ieee754_pow+0x3b0>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012416:	f7ee f917 	bl	8000648 <__aeabi_dmul>
 801241a:	a30d      	add	r3, pc, #52	; (adr r3, 8012450 <__ieee754_pow+0x3b0>)
 801241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012420:	e6d5      	b.n	80121ce <__ieee754_pow+0x12e>
 8012422:	bf00      	nop
 8012424:	f3af 8000 	nop.w
 8012428:	60000000 	.word	0x60000000
 801242c:	3ff71547 	.word	0x3ff71547
 8012430:	f85ddf44 	.word	0xf85ddf44
 8012434:	3e54ae0b 	.word	0x3e54ae0b
 8012438:	55555555 	.word	0x55555555
 801243c:	3fd55555 	.word	0x3fd55555
 8012440:	652b82fe 	.word	0x652b82fe
 8012444:	3ff71547 	.word	0x3ff71547
 8012448:	00000000 	.word	0x00000000
 801244c:	bff00000 	.word	0xbff00000
 8012450:	8800759c 	.word	0x8800759c
 8012454:	7e37e43c 	.word	0x7e37e43c
 8012458:	3ff00000 	.word	0x3ff00000
 801245c:	3fd00000 	.word	0x3fd00000
 8012460:	3fe00000 	.word	0x3fe00000
 8012464:	408fffff 	.word	0x408fffff
 8012468:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801246c:	f04f 0200 	mov.w	r2, #0
 8012470:	da05      	bge.n	801247e <__ieee754_pow+0x3de>
 8012472:	4bd3      	ldr	r3, [pc, #844]	; (80127c0 <__ieee754_pow+0x720>)
 8012474:	f7ee f8e8 	bl	8000648 <__aeabi_dmul>
 8012478:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801247c:	460c      	mov	r4, r1
 801247e:	1523      	asrs	r3, r4, #20
 8012480:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012484:	4413      	add	r3, r2
 8012486:	9309      	str	r3, [sp, #36]	; 0x24
 8012488:	4bce      	ldr	r3, [pc, #824]	; (80127c4 <__ieee754_pow+0x724>)
 801248a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801248e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012492:	429c      	cmp	r4, r3
 8012494:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012498:	dd08      	ble.n	80124ac <__ieee754_pow+0x40c>
 801249a:	4bcb      	ldr	r3, [pc, #812]	; (80127c8 <__ieee754_pow+0x728>)
 801249c:	429c      	cmp	r4, r3
 801249e:	f340 815e 	ble.w	801275e <__ieee754_pow+0x6be>
 80124a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124a4:	3301      	adds	r3, #1
 80124a6:	9309      	str	r3, [sp, #36]	; 0x24
 80124a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80124ac:	f04f 0a00 	mov.w	sl, #0
 80124b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80124b4:	930c      	str	r3, [sp, #48]	; 0x30
 80124b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124b8:	4bc4      	ldr	r3, [pc, #784]	; (80127cc <__ieee754_pow+0x72c>)
 80124ba:	4413      	add	r3, r2
 80124bc:	ed93 7b00 	vldr	d7, [r3]
 80124c0:	4629      	mov	r1, r5
 80124c2:	ec53 2b17 	vmov	r2, r3, d7
 80124c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80124ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80124ce:	f7ed ff03 	bl	80002d8 <__aeabi_dsub>
 80124d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80124d6:	4606      	mov	r6, r0
 80124d8:	460f      	mov	r7, r1
 80124da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80124de:	f7ed fefd 	bl	80002dc <__adddf3>
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	2000      	movs	r0, #0
 80124e8:	49b9      	ldr	r1, [pc, #740]	; (80127d0 <__ieee754_pow+0x730>)
 80124ea:	f7ee f9d7 	bl	800089c <__aeabi_ddiv>
 80124ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80124f2:	4602      	mov	r2, r0
 80124f4:	460b      	mov	r3, r1
 80124f6:	4630      	mov	r0, r6
 80124f8:	4639      	mov	r1, r7
 80124fa:	f7ee f8a5 	bl	8000648 <__aeabi_dmul>
 80124fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012502:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012506:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801250a:	2300      	movs	r3, #0
 801250c:	9302      	str	r3, [sp, #8]
 801250e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012512:	106d      	asrs	r5, r5, #1
 8012514:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012518:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801251c:	2200      	movs	r2, #0
 801251e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012522:	4640      	mov	r0, r8
 8012524:	4649      	mov	r1, r9
 8012526:	4614      	mov	r4, r2
 8012528:	461d      	mov	r5, r3
 801252a:	f7ee f88d 	bl	8000648 <__aeabi_dmul>
 801252e:	4602      	mov	r2, r0
 8012530:	460b      	mov	r3, r1
 8012532:	4630      	mov	r0, r6
 8012534:	4639      	mov	r1, r7
 8012536:	f7ed fecf 	bl	80002d8 <__aeabi_dsub>
 801253a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801253e:	4606      	mov	r6, r0
 8012540:	460f      	mov	r7, r1
 8012542:	4620      	mov	r0, r4
 8012544:	4629      	mov	r1, r5
 8012546:	f7ed fec7 	bl	80002d8 <__aeabi_dsub>
 801254a:	4602      	mov	r2, r0
 801254c:	460b      	mov	r3, r1
 801254e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012552:	f7ed fec1 	bl	80002d8 <__aeabi_dsub>
 8012556:	4642      	mov	r2, r8
 8012558:	464b      	mov	r3, r9
 801255a:	f7ee f875 	bl	8000648 <__aeabi_dmul>
 801255e:	4602      	mov	r2, r0
 8012560:	460b      	mov	r3, r1
 8012562:	4630      	mov	r0, r6
 8012564:	4639      	mov	r1, r7
 8012566:	f7ed feb7 	bl	80002d8 <__aeabi_dsub>
 801256a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801256e:	f7ee f86b 	bl	8000648 <__aeabi_dmul>
 8012572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801257a:	4610      	mov	r0, r2
 801257c:	4619      	mov	r1, r3
 801257e:	f7ee f863 	bl	8000648 <__aeabi_dmul>
 8012582:	a37b      	add	r3, pc, #492	; (adr r3, 8012770 <__ieee754_pow+0x6d0>)
 8012584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012588:	4604      	mov	r4, r0
 801258a:	460d      	mov	r5, r1
 801258c:	f7ee f85c 	bl	8000648 <__aeabi_dmul>
 8012590:	a379      	add	r3, pc, #484	; (adr r3, 8012778 <__ieee754_pow+0x6d8>)
 8012592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012596:	f7ed fea1 	bl	80002dc <__adddf3>
 801259a:	4622      	mov	r2, r4
 801259c:	462b      	mov	r3, r5
 801259e:	f7ee f853 	bl	8000648 <__aeabi_dmul>
 80125a2:	a377      	add	r3, pc, #476	; (adr r3, 8012780 <__ieee754_pow+0x6e0>)
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	f7ed fe98 	bl	80002dc <__adddf3>
 80125ac:	4622      	mov	r2, r4
 80125ae:	462b      	mov	r3, r5
 80125b0:	f7ee f84a 	bl	8000648 <__aeabi_dmul>
 80125b4:	a374      	add	r3, pc, #464	; (adr r3, 8012788 <__ieee754_pow+0x6e8>)
 80125b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ba:	f7ed fe8f 	bl	80002dc <__adddf3>
 80125be:	4622      	mov	r2, r4
 80125c0:	462b      	mov	r3, r5
 80125c2:	f7ee f841 	bl	8000648 <__aeabi_dmul>
 80125c6:	a372      	add	r3, pc, #456	; (adr r3, 8012790 <__ieee754_pow+0x6f0>)
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	f7ed fe86 	bl	80002dc <__adddf3>
 80125d0:	4622      	mov	r2, r4
 80125d2:	462b      	mov	r3, r5
 80125d4:	f7ee f838 	bl	8000648 <__aeabi_dmul>
 80125d8:	a36f      	add	r3, pc, #444	; (adr r3, 8012798 <__ieee754_pow+0x6f8>)
 80125da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125de:	f7ed fe7d 	bl	80002dc <__adddf3>
 80125e2:	4622      	mov	r2, r4
 80125e4:	4606      	mov	r6, r0
 80125e6:	460f      	mov	r7, r1
 80125e8:	462b      	mov	r3, r5
 80125ea:	4620      	mov	r0, r4
 80125ec:	4629      	mov	r1, r5
 80125ee:	f7ee f82b 	bl	8000648 <__aeabi_dmul>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	4630      	mov	r0, r6
 80125f8:	4639      	mov	r1, r7
 80125fa:	f7ee f825 	bl	8000648 <__aeabi_dmul>
 80125fe:	4642      	mov	r2, r8
 8012600:	4604      	mov	r4, r0
 8012602:	460d      	mov	r5, r1
 8012604:	464b      	mov	r3, r9
 8012606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801260a:	f7ed fe67 	bl	80002dc <__adddf3>
 801260e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012612:	f7ee f819 	bl	8000648 <__aeabi_dmul>
 8012616:	4622      	mov	r2, r4
 8012618:	462b      	mov	r3, r5
 801261a:	f7ed fe5f 	bl	80002dc <__adddf3>
 801261e:	4642      	mov	r2, r8
 8012620:	4606      	mov	r6, r0
 8012622:	460f      	mov	r7, r1
 8012624:	464b      	mov	r3, r9
 8012626:	4640      	mov	r0, r8
 8012628:	4649      	mov	r1, r9
 801262a:	f7ee f80d 	bl	8000648 <__aeabi_dmul>
 801262e:	2200      	movs	r2, #0
 8012630:	4b68      	ldr	r3, [pc, #416]	; (80127d4 <__ieee754_pow+0x734>)
 8012632:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012636:	f7ed fe51 	bl	80002dc <__adddf3>
 801263a:	4632      	mov	r2, r6
 801263c:	463b      	mov	r3, r7
 801263e:	f7ed fe4d 	bl	80002dc <__adddf3>
 8012642:	9802      	ldr	r0, [sp, #8]
 8012644:	460d      	mov	r5, r1
 8012646:	4604      	mov	r4, r0
 8012648:	4602      	mov	r2, r0
 801264a:	460b      	mov	r3, r1
 801264c:	4640      	mov	r0, r8
 801264e:	4649      	mov	r1, r9
 8012650:	f7ed fffa 	bl	8000648 <__aeabi_dmul>
 8012654:	2200      	movs	r2, #0
 8012656:	4680      	mov	r8, r0
 8012658:	4689      	mov	r9, r1
 801265a:	4b5e      	ldr	r3, [pc, #376]	; (80127d4 <__ieee754_pow+0x734>)
 801265c:	4620      	mov	r0, r4
 801265e:	4629      	mov	r1, r5
 8012660:	f7ed fe3a 	bl	80002d8 <__aeabi_dsub>
 8012664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012668:	f7ed fe36 	bl	80002d8 <__aeabi_dsub>
 801266c:	4602      	mov	r2, r0
 801266e:	460b      	mov	r3, r1
 8012670:	4630      	mov	r0, r6
 8012672:	4639      	mov	r1, r7
 8012674:	f7ed fe30 	bl	80002d8 <__aeabi_dsub>
 8012678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801267c:	f7ed ffe4 	bl	8000648 <__aeabi_dmul>
 8012680:	4622      	mov	r2, r4
 8012682:	4606      	mov	r6, r0
 8012684:	460f      	mov	r7, r1
 8012686:	462b      	mov	r3, r5
 8012688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801268c:	f7ed ffdc 	bl	8000648 <__aeabi_dmul>
 8012690:	4602      	mov	r2, r0
 8012692:	460b      	mov	r3, r1
 8012694:	4630      	mov	r0, r6
 8012696:	4639      	mov	r1, r7
 8012698:	f7ed fe20 	bl	80002dc <__adddf3>
 801269c:	4606      	mov	r6, r0
 801269e:	460f      	mov	r7, r1
 80126a0:	4602      	mov	r2, r0
 80126a2:	460b      	mov	r3, r1
 80126a4:	4640      	mov	r0, r8
 80126a6:	4649      	mov	r1, r9
 80126a8:	f7ed fe18 	bl	80002dc <__adddf3>
 80126ac:	9802      	ldr	r0, [sp, #8]
 80126ae:	a33c      	add	r3, pc, #240	; (adr r3, 80127a0 <__ieee754_pow+0x700>)
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	4604      	mov	r4, r0
 80126b6:	460d      	mov	r5, r1
 80126b8:	f7ed ffc6 	bl	8000648 <__aeabi_dmul>
 80126bc:	4642      	mov	r2, r8
 80126be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80126c2:	464b      	mov	r3, r9
 80126c4:	4620      	mov	r0, r4
 80126c6:	4629      	mov	r1, r5
 80126c8:	f7ed fe06 	bl	80002d8 <__aeabi_dsub>
 80126cc:	4602      	mov	r2, r0
 80126ce:	460b      	mov	r3, r1
 80126d0:	4630      	mov	r0, r6
 80126d2:	4639      	mov	r1, r7
 80126d4:	f7ed fe00 	bl	80002d8 <__aeabi_dsub>
 80126d8:	a333      	add	r3, pc, #204	; (adr r3, 80127a8 <__ieee754_pow+0x708>)
 80126da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126de:	f7ed ffb3 	bl	8000648 <__aeabi_dmul>
 80126e2:	a333      	add	r3, pc, #204	; (adr r3, 80127b0 <__ieee754_pow+0x710>)
 80126e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e8:	4606      	mov	r6, r0
 80126ea:	460f      	mov	r7, r1
 80126ec:	4620      	mov	r0, r4
 80126ee:	4629      	mov	r1, r5
 80126f0:	f7ed ffaa 	bl	8000648 <__aeabi_dmul>
 80126f4:	4602      	mov	r2, r0
 80126f6:	460b      	mov	r3, r1
 80126f8:	4630      	mov	r0, r6
 80126fa:	4639      	mov	r1, r7
 80126fc:	f7ed fdee 	bl	80002dc <__adddf3>
 8012700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012702:	4b35      	ldr	r3, [pc, #212]	; (80127d8 <__ieee754_pow+0x738>)
 8012704:	4413      	add	r3, r2
 8012706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270a:	f7ed fde7 	bl	80002dc <__adddf3>
 801270e:	4604      	mov	r4, r0
 8012710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012712:	460d      	mov	r5, r1
 8012714:	f7ed ff2e 	bl	8000574 <__aeabi_i2d>
 8012718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801271a:	4b30      	ldr	r3, [pc, #192]	; (80127dc <__ieee754_pow+0x73c>)
 801271c:	4413      	add	r3, r2
 801271e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012722:	4606      	mov	r6, r0
 8012724:	460f      	mov	r7, r1
 8012726:	4622      	mov	r2, r4
 8012728:	462b      	mov	r3, r5
 801272a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801272e:	f7ed fdd5 	bl	80002dc <__adddf3>
 8012732:	4642      	mov	r2, r8
 8012734:	464b      	mov	r3, r9
 8012736:	f7ed fdd1 	bl	80002dc <__adddf3>
 801273a:	4632      	mov	r2, r6
 801273c:	463b      	mov	r3, r7
 801273e:	f7ed fdcd 	bl	80002dc <__adddf3>
 8012742:	9802      	ldr	r0, [sp, #8]
 8012744:	4632      	mov	r2, r6
 8012746:	463b      	mov	r3, r7
 8012748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801274c:	f7ed fdc4 	bl	80002d8 <__aeabi_dsub>
 8012750:	4642      	mov	r2, r8
 8012752:	464b      	mov	r3, r9
 8012754:	f7ed fdc0 	bl	80002d8 <__aeabi_dsub>
 8012758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801275c:	e607      	b.n	801236e <__ieee754_pow+0x2ce>
 801275e:	f04f 0a01 	mov.w	sl, #1
 8012762:	e6a5      	b.n	80124b0 <__ieee754_pow+0x410>
 8012764:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80127b8 <__ieee754_pow+0x718>
 8012768:	e613      	b.n	8012392 <__ieee754_pow+0x2f2>
 801276a:	bf00      	nop
 801276c:	f3af 8000 	nop.w
 8012770:	4a454eef 	.word	0x4a454eef
 8012774:	3fca7e28 	.word	0x3fca7e28
 8012778:	93c9db65 	.word	0x93c9db65
 801277c:	3fcd864a 	.word	0x3fcd864a
 8012780:	a91d4101 	.word	0xa91d4101
 8012784:	3fd17460 	.word	0x3fd17460
 8012788:	518f264d 	.word	0x518f264d
 801278c:	3fd55555 	.word	0x3fd55555
 8012790:	db6fabff 	.word	0xdb6fabff
 8012794:	3fdb6db6 	.word	0x3fdb6db6
 8012798:	33333303 	.word	0x33333303
 801279c:	3fe33333 	.word	0x3fe33333
 80127a0:	e0000000 	.word	0xe0000000
 80127a4:	3feec709 	.word	0x3feec709
 80127a8:	dc3a03fd 	.word	0xdc3a03fd
 80127ac:	3feec709 	.word	0x3feec709
 80127b0:	145b01f5 	.word	0x145b01f5
 80127b4:	be3e2fe0 	.word	0xbe3e2fe0
 80127b8:	00000000 	.word	0x00000000
 80127bc:	3ff00000 	.word	0x3ff00000
 80127c0:	43400000 	.word	0x43400000
 80127c4:	0003988e 	.word	0x0003988e
 80127c8:	000bb679 	.word	0x000bb679
 80127cc:	08014668 	.word	0x08014668
 80127d0:	3ff00000 	.word	0x3ff00000
 80127d4:	40080000 	.word	0x40080000
 80127d8:	08014688 	.word	0x08014688
 80127dc:	08014678 	.word	0x08014678
 80127e0:	a3b4      	add	r3, pc, #720	; (adr r3, 8012ab4 <__ieee754_pow+0xa14>)
 80127e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e6:	4640      	mov	r0, r8
 80127e8:	4649      	mov	r1, r9
 80127ea:	f7ed fd77 	bl	80002dc <__adddf3>
 80127ee:	4622      	mov	r2, r4
 80127f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127f4:	462b      	mov	r3, r5
 80127f6:	4630      	mov	r0, r6
 80127f8:	4639      	mov	r1, r7
 80127fa:	f7ed fd6d 	bl	80002d8 <__aeabi_dsub>
 80127fe:	4602      	mov	r2, r0
 8012800:	460b      	mov	r3, r1
 8012802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012806:	f7ee f9af 	bl	8000b68 <__aeabi_dcmpgt>
 801280a:	2800      	cmp	r0, #0
 801280c:	f47f adfe 	bne.w	801240c <__ieee754_pow+0x36c>
 8012810:	4aa3      	ldr	r2, [pc, #652]	; (8012aa0 <__ieee754_pow+0xa00>)
 8012812:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012816:	4293      	cmp	r3, r2
 8012818:	f340 810a 	ble.w	8012a30 <__ieee754_pow+0x990>
 801281c:	151b      	asrs	r3, r3, #20
 801281e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012822:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012826:	fa4a f303 	asr.w	r3, sl, r3
 801282a:	445b      	add	r3, fp
 801282c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012830:	4e9c      	ldr	r6, [pc, #624]	; (8012aa4 <__ieee754_pow+0xa04>)
 8012832:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012836:	4116      	asrs	r6, r2
 8012838:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801283c:	2000      	movs	r0, #0
 801283e:	ea23 0106 	bic.w	r1, r3, r6
 8012842:	f1c2 0214 	rsb	r2, r2, #20
 8012846:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801284a:	fa4a fa02 	asr.w	sl, sl, r2
 801284e:	f1bb 0f00 	cmp.w	fp, #0
 8012852:	4602      	mov	r2, r0
 8012854:	460b      	mov	r3, r1
 8012856:	4620      	mov	r0, r4
 8012858:	4629      	mov	r1, r5
 801285a:	bfb8      	it	lt
 801285c:	f1ca 0a00 	rsblt	sl, sl, #0
 8012860:	f7ed fd3a 	bl	80002d8 <__aeabi_dsub>
 8012864:	e9cd 0100 	strd	r0, r1, [sp]
 8012868:	4642      	mov	r2, r8
 801286a:	464b      	mov	r3, r9
 801286c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012870:	f7ed fd34 	bl	80002dc <__adddf3>
 8012874:	2000      	movs	r0, #0
 8012876:	a378      	add	r3, pc, #480	; (adr r3, 8012a58 <__ieee754_pow+0x9b8>)
 8012878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287c:	4604      	mov	r4, r0
 801287e:	460d      	mov	r5, r1
 8012880:	f7ed fee2 	bl	8000648 <__aeabi_dmul>
 8012884:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012888:	4606      	mov	r6, r0
 801288a:	460f      	mov	r7, r1
 801288c:	4620      	mov	r0, r4
 801288e:	4629      	mov	r1, r5
 8012890:	f7ed fd22 	bl	80002d8 <__aeabi_dsub>
 8012894:	4602      	mov	r2, r0
 8012896:	460b      	mov	r3, r1
 8012898:	4640      	mov	r0, r8
 801289a:	4649      	mov	r1, r9
 801289c:	f7ed fd1c 	bl	80002d8 <__aeabi_dsub>
 80128a0:	a36f      	add	r3, pc, #444	; (adr r3, 8012a60 <__ieee754_pow+0x9c0>)
 80128a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a6:	f7ed fecf 	bl	8000648 <__aeabi_dmul>
 80128aa:	a36f      	add	r3, pc, #444	; (adr r3, 8012a68 <__ieee754_pow+0x9c8>)
 80128ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b0:	4680      	mov	r8, r0
 80128b2:	4689      	mov	r9, r1
 80128b4:	4620      	mov	r0, r4
 80128b6:	4629      	mov	r1, r5
 80128b8:	f7ed fec6 	bl	8000648 <__aeabi_dmul>
 80128bc:	4602      	mov	r2, r0
 80128be:	460b      	mov	r3, r1
 80128c0:	4640      	mov	r0, r8
 80128c2:	4649      	mov	r1, r9
 80128c4:	f7ed fd0a 	bl	80002dc <__adddf3>
 80128c8:	4604      	mov	r4, r0
 80128ca:	460d      	mov	r5, r1
 80128cc:	4602      	mov	r2, r0
 80128ce:	460b      	mov	r3, r1
 80128d0:	4630      	mov	r0, r6
 80128d2:	4639      	mov	r1, r7
 80128d4:	f7ed fd02 	bl	80002dc <__adddf3>
 80128d8:	4632      	mov	r2, r6
 80128da:	463b      	mov	r3, r7
 80128dc:	4680      	mov	r8, r0
 80128de:	4689      	mov	r9, r1
 80128e0:	f7ed fcfa 	bl	80002d8 <__aeabi_dsub>
 80128e4:	4602      	mov	r2, r0
 80128e6:	460b      	mov	r3, r1
 80128e8:	4620      	mov	r0, r4
 80128ea:	4629      	mov	r1, r5
 80128ec:	f7ed fcf4 	bl	80002d8 <__aeabi_dsub>
 80128f0:	4642      	mov	r2, r8
 80128f2:	4606      	mov	r6, r0
 80128f4:	460f      	mov	r7, r1
 80128f6:	464b      	mov	r3, r9
 80128f8:	4640      	mov	r0, r8
 80128fa:	4649      	mov	r1, r9
 80128fc:	f7ed fea4 	bl	8000648 <__aeabi_dmul>
 8012900:	a35b      	add	r3, pc, #364	; (adr r3, 8012a70 <__ieee754_pow+0x9d0>)
 8012902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012906:	4604      	mov	r4, r0
 8012908:	460d      	mov	r5, r1
 801290a:	f7ed fe9d 	bl	8000648 <__aeabi_dmul>
 801290e:	a35a      	add	r3, pc, #360	; (adr r3, 8012a78 <__ieee754_pow+0x9d8>)
 8012910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012914:	f7ed fce0 	bl	80002d8 <__aeabi_dsub>
 8012918:	4622      	mov	r2, r4
 801291a:	462b      	mov	r3, r5
 801291c:	f7ed fe94 	bl	8000648 <__aeabi_dmul>
 8012920:	a357      	add	r3, pc, #348	; (adr r3, 8012a80 <__ieee754_pow+0x9e0>)
 8012922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012926:	f7ed fcd9 	bl	80002dc <__adddf3>
 801292a:	4622      	mov	r2, r4
 801292c:	462b      	mov	r3, r5
 801292e:	f7ed fe8b 	bl	8000648 <__aeabi_dmul>
 8012932:	a355      	add	r3, pc, #340	; (adr r3, 8012a88 <__ieee754_pow+0x9e8>)
 8012934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012938:	f7ed fcce 	bl	80002d8 <__aeabi_dsub>
 801293c:	4622      	mov	r2, r4
 801293e:	462b      	mov	r3, r5
 8012940:	f7ed fe82 	bl	8000648 <__aeabi_dmul>
 8012944:	a352      	add	r3, pc, #328	; (adr r3, 8012a90 <__ieee754_pow+0x9f0>)
 8012946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294a:	f7ed fcc7 	bl	80002dc <__adddf3>
 801294e:	4622      	mov	r2, r4
 8012950:	462b      	mov	r3, r5
 8012952:	f7ed fe79 	bl	8000648 <__aeabi_dmul>
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	4640      	mov	r0, r8
 801295c:	4649      	mov	r1, r9
 801295e:	f7ed fcbb 	bl	80002d8 <__aeabi_dsub>
 8012962:	4604      	mov	r4, r0
 8012964:	460d      	mov	r5, r1
 8012966:	4602      	mov	r2, r0
 8012968:	460b      	mov	r3, r1
 801296a:	4640      	mov	r0, r8
 801296c:	4649      	mov	r1, r9
 801296e:	f7ed fe6b 	bl	8000648 <__aeabi_dmul>
 8012972:	2200      	movs	r2, #0
 8012974:	e9cd 0100 	strd	r0, r1, [sp]
 8012978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801297c:	4620      	mov	r0, r4
 801297e:	4629      	mov	r1, r5
 8012980:	f7ed fcaa 	bl	80002d8 <__aeabi_dsub>
 8012984:	4602      	mov	r2, r0
 8012986:	460b      	mov	r3, r1
 8012988:	e9dd 0100 	ldrd	r0, r1, [sp]
 801298c:	f7ed ff86 	bl	800089c <__aeabi_ddiv>
 8012990:	4632      	mov	r2, r6
 8012992:	4604      	mov	r4, r0
 8012994:	460d      	mov	r5, r1
 8012996:	463b      	mov	r3, r7
 8012998:	4640      	mov	r0, r8
 801299a:	4649      	mov	r1, r9
 801299c:	f7ed fe54 	bl	8000648 <__aeabi_dmul>
 80129a0:	4632      	mov	r2, r6
 80129a2:	463b      	mov	r3, r7
 80129a4:	f7ed fc9a 	bl	80002dc <__adddf3>
 80129a8:	4602      	mov	r2, r0
 80129aa:	460b      	mov	r3, r1
 80129ac:	4620      	mov	r0, r4
 80129ae:	4629      	mov	r1, r5
 80129b0:	f7ed fc92 	bl	80002d8 <__aeabi_dsub>
 80129b4:	4642      	mov	r2, r8
 80129b6:	464b      	mov	r3, r9
 80129b8:	f7ed fc8e 	bl	80002d8 <__aeabi_dsub>
 80129bc:	4602      	mov	r2, r0
 80129be:	460b      	mov	r3, r1
 80129c0:	2000      	movs	r0, #0
 80129c2:	4939      	ldr	r1, [pc, #228]	; (8012aa8 <__ieee754_pow+0xa08>)
 80129c4:	f7ed fc88 	bl	80002d8 <__aeabi_dsub>
 80129c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80129cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80129d0:	4602      	mov	r2, r0
 80129d2:	460b      	mov	r3, r1
 80129d4:	da2f      	bge.n	8012a36 <__ieee754_pow+0x996>
 80129d6:	4650      	mov	r0, sl
 80129d8:	ec43 2b10 	vmov	d0, r2, r3
 80129dc:	f000 f9c0 	bl	8012d60 <scalbn>
 80129e0:	ec51 0b10 	vmov	r0, r1, d0
 80129e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129e8:	f7ff bbf1 	b.w	80121ce <__ieee754_pow+0x12e>
 80129ec:	4b2f      	ldr	r3, [pc, #188]	; (8012aac <__ieee754_pow+0xa0c>)
 80129ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80129f2:	429e      	cmp	r6, r3
 80129f4:	f77f af0c 	ble.w	8012810 <__ieee754_pow+0x770>
 80129f8:	4b2d      	ldr	r3, [pc, #180]	; (8012ab0 <__ieee754_pow+0xa10>)
 80129fa:	440b      	add	r3, r1
 80129fc:	4303      	orrs	r3, r0
 80129fe:	d00b      	beq.n	8012a18 <__ieee754_pow+0x978>
 8012a00:	a325      	add	r3, pc, #148	; (adr r3, 8012a98 <__ieee754_pow+0x9f8>)
 8012a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a0a:	f7ed fe1d 	bl	8000648 <__aeabi_dmul>
 8012a0e:	a322      	add	r3, pc, #136	; (adr r3, 8012a98 <__ieee754_pow+0x9f8>)
 8012a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a14:	f7ff bbdb 	b.w	80121ce <__ieee754_pow+0x12e>
 8012a18:	4622      	mov	r2, r4
 8012a1a:	462b      	mov	r3, r5
 8012a1c:	f7ed fc5c 	bl	80002d8 <__aeabi_dsub>
 8012a20:	4642      	mov	r2, r8
 8012a22:	464b      	mov	r3, r9
 8012a24:	f7ee f896 	bl	8000b54 <__aeabi_dcmpge>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	f43f aef1 	beq.w	8012810 <__ieee754_pow+0x770>
 8012a2e:	e7e7      	b.n	8012a00 <__ieee754_pow+0x960>
 8012a30:	f04f 0a00 	mov.w	sl, #0
 8012a34:	e718      	b.n	8012868 <__ieee754_pow+0x7c8>
 8012a36:	4621      	mov	r1, r4
 8012a38:	e7d4      	b.n	80129e4 <__ieee754_pow+0x944>
 8012a3a:	2000      	movs	r0, #0
 8012a3c:	491a      	ldr	r1, [pc, #104]	; (8012aa8 <__ieee754_pow+0xa08>)
 8012a3e:	f7ff bb8f 	b.w	8012160 <__ieee754_pow+0xc0>
 8012a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a46:	f7ff bb8b 	b.w	8012160 <__ieee754_pow+0xc0>
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	4639      	mov	r1, r7
 8012a4e:	f7ff bb87 	b.w	8012160 <__ieee754_pow+0xc0>
 8012a52:	4693      	mov	fp, r2
 8012a54:	f7ff bb98 	b.w	8012188 <__ieee754_pow+0xe8>
 8012a58:	00000000 	.word	0x00000000
 8012a5c:	3fe62e43 	.word	0x3fe62e43
 8012a60:	fefa39ef 	.word	0xfefa39ef
 8012a64:	3fe62e42 	.word	0x3fe62e42
 8012a68:	0ca86c39 	.word	0x0ca86c39
 8012a6c:	be205c61 	.word	0xbe205c61
 8012a70:	72bea4d0 	.word	0x72bea4d0
 8012a74:	3e663769 	.word	0x3e663769
 8012a78:	c5d26bf1 	.word	0xc5d26bf1
 8012a7c:	3ebbbd41 	.word	0x3ebbbd41
 8012a80:	af25de2c 	.word	0xaf25de2c
 8012a84:	3f11566a 	.word	0x3f11566a
 8012a88:	16bebd93 	.word	0x16bebd93
 8012a8c:	3f66c16c 	.word	0x3f66c16c
 8012a90:	5555553e 	.word	0x5555553e
 8012a94:	3fc55555 	.word	0x3fc55555
 8012a98:	c2f8f359 	.word	0xc2f8f359
 8012a9c:	01a56e1f 	.word	0x01a56e1f
 8012aa0:	3fe00000 	.word	0x3fe00000
 8012aa4:	000fffff 	.word	0x000fffff
 8012aa8:	3ff00000 	.word	0x3ff00000
 8012aac:	4090cbff 	.word	0x4090cbff
 8012ab0:	3f6f3400 	.word	0x3f6f3400
 8012ab4:	652b82fe 	.word	0x652b82fe
 8012ab8:	3c971547 	.word	0x3c971547

08012abc <__ieee754_sqrt>:
 8012abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac0:	4955      	ldr	r1, [pc, #340]	; (8012c18 <__ieee754_sqrt+0x15c>)
 8012ac2:	ec55 4b10 	vmov	r4, r5, d0
 8012ac6:	43a9      	bics	r1, r5
 8012ac8:	462b      	mov	r3, r5
 8012aca:	462a      	mov	r2, r5
 8012acc:	d112      	bne.n	8012af4 <__ieee754_sqrt+0x38>
 8012ace:	ee10 2a10 	vmov	r2, s0
 8012ad2:	ee10 0a10 	vmov	r0, s0
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	f7ed fdb6 	bl	8000648 <__aeabi_dmul>
 8012adc:	4602      	mov	r2, r0
 8012ade:	460b      	mov	r3, r1
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	f7ed fbfa 	bl	80002dc <__adddf3>
 8012ae8:	4604      	mov	r4, r0
 8012aea:	460d      	mov	r5, r1
 8012aec:	ec45 4b10 	vmov	d0, r4, r5
 8012af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af4:	2d00      	cmp	r5, #0
 8012af6:	ee10 0a10 	vmov	r0, s0
 8012afa:	4621      	mov	r1, r4
 8012afc:	dc0f      	bgt.n	8012b1e <__ieee754_sqrt+0x62>
 8012afe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012b02:	4330      	orrs	r0, r6
 8012b04:	d0f2      	beq.n	8012aec <__ieee754_sqrt+0x30>
 8012b06:	b155      	cbz	r5, 8012b1e <__ieee754_sqrt+0x62>
 8012b08:	ee10 2a10 	vmov	r2, s0
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	4629      	mov	r1, r5
 8012b10:	f7ed fbe2 	bl	80002d8 <__aeabi_dsub>
 8012b14:	4602      	mov	r2, r0
 8012b16:	460b      	mov	r3, r1
 8012b18:	f7ed fec0 	bl	800089c <__aeabi_ddiv>
 8012b1c:	e7e4      	b.n	8012ae8 <__ieee754_sqrt+0x2c>
 8012b1e:	151b      	asrs	r3, r3, #20
 8012b20:	d073      	beq.n	8012c0a <__ieee754_sqrt+0x14e>
 8012b22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012b26:	07dd      	lsls	r5, r3, #31
 8012b28:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012b2c:	bf48      	it	mi
 8012b2e:	0fc8      	lsrmi	r0, r1, #31
 8012b30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012b34:	bf44      	itt	mi
 8012b36:	0049      	lslmi	r1, r1, #1
 8012b38:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012b3c:	2500      	movs	r5, #0
 8012b3e:	1058      	asrs	r0, r3, #1
 8012b40:	0fcb      	lsrs	r3, r1, #31
 8012b42:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012b46:	0049      	lsls	r1, r1, #1
 8012b48:	2316      	movs	r3, #22
 8012b4a:	462c      	mov	r4, r5
 8012b4c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012b50:	19a7      	adds	r7, r4, r6
 8012b52:	4297      	cmp	r7, r2
 8012b54:	bfde      	ittt	le
 8012b56:	19bc      	addle	r4, r7, r6
 8012b58:	1bd2      	suble	r2, r2, r7
 8012b5a:	19ad      	addle	r5, r5, r6
 8012b5c:	0fcf      	lsrs	r7, r1, #31
 8012b5e:	3b01      	subs	r3, #1
 8012b60:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012b64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012b68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012b6c:	d1f0      	bne.n	8012b50 <__ieee754_sqrt+0x94>
 8012b6e:	f04f 0c20 	mov.w	ip, #32
 8012b72:	469e      	mov	lr, r3
 8012b74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012b78:	42a2      	cmp	r2, r4
 8012b7a:	eb06 070e 	add.w	r7, r6, lr
 8012b7e:	dc02      	bgt.n	8012b86 <__ieee754_sqrt+0xca>
 8012b80:	d112      	bne.n	8012ba8 <__ieee754_sqrt+0xec>
 8012b82:	428f      	cmp	r7, r1
 8012b84:	d810      	bhi.n	8012ba8 <__ieee754_sqrt+0xec>
 8012b86:	2f00      	cmp	r7, #0
 8012b88:	eb07 0e06 	add.w	lr, r7, r6
 8012b8c:	da42      	bge.n	8012c14 <__ieee754_sqrt+0x158>
 8012b8e:	f1be 0f00 	cmp.w	lr, #0
 8012b92:	db3f      	blt.n	8012c14 <__ieee754_sqrt+0x158>
 8012b94:	f104 0801 	add.w	r8, r4, #1
 8012b98:	1b12      	subs	r2, r2, r4
 8012b9a:	428f      	cmp	r7, r1
 8012b9c:	bf88      	it	hi
 8012b9e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012ba2:	1bc9      	subs	r1, r1, r7
 8012ba4:	4433      	add	r3, r6
 8012ba6:	4644      	mov	r4, r8
 8012ba8:	0052      	lsls	r2, r2, #1
 8012baa:	f1bc 0c01 	subs.w	ip, ip, #1
 8012bae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012bb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012bb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012bba:	d1dd      	bne.n	8012b78 <__ieee754_sqrt+0xbc>
 8012bbc:	430a      	orrs	r2, r1
 8012bbe:	d006      	beq.n	8012bce <__ieee754_sqrt+0x112>
 8012bc0:	1c5c      	adds	r4, r3, #1
 8012bc2:	bf13      	iteet	ne
 8012bc4:	3301      	addne	r3, #1
 8012bc6:	3501      	addeq	r5, #1
 8012bc8:	4663      	moveq	r3, ip
 8012bca:	f023 0301 	bicne.w	r3, r3, #1
 8012bce:	106a      	asrs	r2, r5, #1
 8012bd0:	085b      	lsrs	r3, r3, #1
 8012bd2:	07e9      	lsls	r1, r5, #31
 8012bd4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012bd8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012bdc:	bf48      	it	mi
 8012bde:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012be2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012be6:	461c      	mov	r4, r3
 8012be8:	e780      	b.n	8012aec <__ieee754_sqrt+0x30>
 8012bea:	0aca      	lsrs	r2, r1, #11
 8012bec:	3815      	subs	r0, #21
 8012bee:	0549      	lsls	r1, r1, #21
 8012bf0:	2a00      	cmp	r2, #0
 8012bf2:	d0fa      	beq.n	8012bea <__ieee754_sqrt+0x12e>
 8012bf4:	02d6      	lsls	r6, r2, #11
 8012bf6:	d50a      	bpl.n	8012c0e <__ieee754_sqrt+0x152>
 8012bf8:	f1c3 0420 	rsb	r4, r3, #32
 8012bfc:	fa21 f404 	lsr.w	r4, r1, r4
 8012c00:	1e5d      	subs	r5, r3, #1
 8012c02:	4099      	lsls	r1, r3
 8012c04:	4322      	orrs	r2, r4
 8012c06:	1b43      	subs	r3, r0, r5
 8012c08:	e78b      	b.n	8012b22 <__ieee754_sqrt+0x66>
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	e7f0      	b.n	8012bf0 <__ieee754_sqrt+0x134>
 8012c0e:	0052      	lsls	r2, r2, #1
 8012c10:	3301      	adds	r3, #1
 8012c12:	e7ef      	b.n	8012bf4 <__ieee754_sqrt+0x138>
 8012c14:	46a0      	mov	r8, r4
 8012c16:	e7bf      	b.n	8012b98 <__ieee754_sqrt+0xdc>
 8012c18:	7ff00000 	.word	0x7ff00000

08012c1c <fabs>:
 8012c1c:	ec51 0b10 	vmov	r0, r1, d0
 8012c20:	ee10 2a10 	vmov	r2, s0
 8012c24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c28:	ec43 2b10 	vmov	d0, r2, r3
 8012c2c:	4770      	bx	lr

08012c2e <finite>:
 8012c2e:	ee10 3a90 	vmov	r3, s1
 8012c32:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012c36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012c3a:	0fc0      	lsrs	r0, r0, #31
 8012c3c:	4770      	bx	lr

08012c3e <matherr>:
 8012c3e:	2000      	movs	r0, #0
 8012c40:	4770      	bx	lr
 8012c42:	0000      	movs	r0, r0
 8012c44:	0000      	movs	r0, r0
	...

08012c48 <nan>:
 8012c48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012c50 <nan+0x8>
 8012c4c:	4770      	bx	lr
 8012c4e:	bf00      	nop
 8012c50:	00000000 	.word	0x00000000
 8012c54:	7ff80000 	.word	0x7ff80000

08012c58 <rint>:
 8012c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c5a:	ec51 0b10 	vmov	r0, r1, d0
 8012c5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c62:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012c66:	2e13      	cmp	r6, #19
 8012c68:	460b      	mov	r3, r1
 8012c6a:	ee10 4a10 	vmov	r4, s0
 8012c6e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012c72:	dc56      	bgt.n	8012d22 <rint+0xca>
 8012c74:	2e00      	cmp	r6, #0
 8012c76:	da2b      	bge.n	8012cd0 <rint+0x78>
 8012c78:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012c7c:	4302      	orrs	r2, r0
 8012c7e:	d023      	beq.n	8012cc8 <rint+0x70>
 8012c80:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012c84:	4302      	orrs	r2, r0
 8012c86:	4254      	negs	r4, r2
 8012c88:	4314      	orrs	r4, r2
 8012c8a:	0c4b      	lsrs	r3, r1, #17
 8012c8c:	0b24      	lsrs	r4, r4, #12
 8012c8e:	045b      	lsls	r3, r3, #17
 8012c90:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012c94:	ea44 0103 	orr.w	r1, r4, r3
 8012c98:	460b      	mov	r3, r1
 8012c9a:	492f      	ldr	r1, [pc, #188]	; (8012d58 <rint+0x100>)
 8012c9c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012ca0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	4639      	mov	r1, r7
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ed fb17 	bl	80002dc <__adddf3>
 8012cae:	e9cd 0100 	strd	r0, r1, [sp]
 8012cb2:	463b      	mov	r3, r7
 8012cb4:	4632      	mov	r2, r6
 8012cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cba:	f7ed fb0d 	bl	80002d8 <__aeabi_dsub>
 8012cbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012cc2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	ec41 0b10 	vmov	d0, r0, r1
 8012ccc:	b003      	add	sp, #12
 8012cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cd0:	4a22      	ldr	r2, [pc, #136]	; (8012d5c <rint+0x104>)
 8012cd2:	4132      	asrs	r2, r6
 8012cd4:	ea01 0702 	and.w	r7, r1, r2
 8012cd8:	4307      	orrs	r7, r0
 8012cda:	d0f5      	beq.n	8012cc8 <rint+0x70>
 8012cdc:	0852      	lsrs	r2, r2, #1
 8012cde:	4011      	ands	r1, r2
 8012ce0:	430c      	orrs	r4, r1
 8012ce2:	d00b      	beq.n	8012cfc <rint+0xa4>
 8012ce4:	ea23 0202 	bic.w	r2, r3, r2
 8012ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012cec:	2e13      	cmp	r6, #19
 8012cee:	fa43 f306 	asr.w	r3, r3, r6
 8012cf2:	bf0c      	ite	eq
 8012cf4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012cf8:	2400      	movne	r4, #0
 8012cfa:	4313      	orrs	r3, r2
 8012cfc:	4916      	ldr	r1, [pc, #88]	; (8012d58 <rint+0x100>)
 8012cfe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012d02:	4622      	mov	r2, r4
 8012d04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012d08:	4620      	mov	r0, r4
 8012d0a:	4629      	mov	r1, r5
 8012d0c:	f7ed fae6 	bl	80002dc <__adddf3>
 8012d10:	e9cd 0100 	strd	r0, r1, [sp]
 8012d14:	4622      	mov	r2, r4
 8012d16:	462b      	mov	r3, r5
 8012d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d1c:	f7ed fadc 	bl	80002d8 <__aeabi_dsub>
 8012d20:	e7d2      	b.n	8012cc8 <rint+0x70>
 8012d22:	2e33      	cmp	r6, #51	; 0x33
 8012d24:	dd07      	ble.n	8012d36 <rint+0xde>
 8012d26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012d2a:	d1cd      	bne.n	8012cc8 <rint+0x70>
 8012d2c:	ee10 2a10 	vmov	r2, s0
 8012d30:	f7ed fad4 	bl	80002dc <__adddf3>
 8012d34:	e7c8      	b.n	8012cc8 <rint+0x70>
 8012d36:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d3e:	40f2      	lsrs	r2, r6
 8012d40:	4210      	tst	r0, r2
 8012d42:	d0c1      	beq.n	8012cc8 <rint+0x70>
 8012d44:	0852      	lsrs	r2, r2, #1
 8012d46:	4210      	tst	r0, r2
 8012d48:	bf1f      	itttt	ne
 8012d4a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012d4e:	ea20 0202 	bicne.w	r2, r0, r2
 8012d52:	4134      	asrne	r4, r6
 8012d54:	4314      	orrne	r4, r2
 8012d56:	e7d1      	b.n	8012cfc <rint+0xa4>
 8012d58:	08014698 	.word	0x08014698
 8012d5c:	000fffff 	.word	0x000fffff

08012d60 <scalbn>:
 8012d60:	b570      	push	{r4, r5, r6, lr}
 8012d62:	ec55 4b10 	vmov	r4, r5, d0
 8012d66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	462b      	mov	r3, r5
 8012d6e:	b9aa      	cbnz	r2, 8012d9c <scalbn+0x3c>
 8012d70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012d74:	4323      	orrs	r3, r4
 8012d76:	d03b      	beq.n	8012df0 <scalbn+0x90>
 8012d78:	4b31      	ldr	r3, [pc, #196]	; (8012e40 <scalbn+0xe0>)
 8012d7a:	4629      	mov	r1, r5
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	ee10 0a10 	vmov	r0, s0
 8012d82:	f7ed fc61 	bl	8000648 <__aeabi_dmul>
 8012d86:	4b2f      	ldr	r3, [pc, #188]	; (8012e44 <scalbn+0xe4>)
 8012d88:	429e      	cmp	r6, r3
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	460d      	mov	r5, r1
 8012d8e:	da12      	bge.n	8012db6 <scalbn+0x56>
 8012d90:	a327      	add	r3, pc, #156	; (adr r3, 8012e30 <scalbn+0xd0>)
 8012d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d96:	f7ed fc57 	bl	8000648 <__aeabi_dmul>
 8012d9a:	e009      	b.n	8012db0 <scalbn+0x50>
 8012d9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012da0:	428a      	cmp	r2, r1
 8012da2:	d10c      	bne.n	8012dbe <scalbn+0x5e>
 8012da4:	ee10 2a10 	vmov	r2, s0
 8012da8:	4620      	mov	r0, r4
 8012daa:	4629      	mov	r1, r5
 8012dac:	f7ed fa96 	bl	80002dc <__adddf3>
 8012db0:	4604      	mov	r4, r0
 8012db2:	460d      	mov	r5, r1
 8012db4:	e01c      	b.n	8012df0 <scalbn+0x90>
 8012db6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012dba:	460b      	mov	r3, r1
 8012dbc:	3a36      	subs	r2, #54	; 0x36
 8012dbe:	4432      	add	r2, r6
 8012dc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012dc4:	428a      	cmp	r2, r1
 8012dc6:	dd0b      	ble.n	8012de0 <scalbn+0x80>
 8012dc8:	ec45 4b11 	vmov	d1, r4, r5
 8012dcc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012e38 <scalbn+0xd8>
 8012dd0:	f000 f9f0 	bl	80131b4 <copysign>
 8012dd4:	a318      	add	r3, pc, #96	; (adr r3, 8012e38 <scalbn+0xd8>)
 8012dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dda:	ec51 0b10 	vmov	r0, r1, d0
 8012dde:	e7da      	b.n	8012d96 <scalbn+0x36>
 8012de0:	2a00      	cmp	r2, #0
 8012de2:	dd08      	ble.n	8012df6 <scalbn+0x96>
 8012de4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012de8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012dec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012df0:	ec45 4b10 	vmov	d0, r4, r5
 8012df4:	bd70      	pop	{r4, r5, r6, pc}
 8012df6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012dfa:	da0d      	bge.n	8012e18 <scalbn+0xb8>
 8012dfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012e00:	429e      	cmp	r6, r3
 8012e02:	ec45 4b11 	vmov	d1, r4, r5
 8012e06:	dce1      	bgt.n	8012dcc <scalbn+0x6c>
 8012e08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012e30 <scalbn+0xd0>
 8012e0c:	f000 f9d2 	bl	80131b4 <copysign>
 8012e10:	a307      	add	r3, pc, #28	; (adr r3, 8012e30 <scalbn+0xd0>)
 8012e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e16:	e7e0      	b.n	8012dda <scalbn+0x7a>
 8012e18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012e1c:	3236      	adds	r2, #54	; 0x36
 8012e1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012e22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012e26:	4620      	mov	r0, r4
 8012e28:	4629      	mov	r1, r5
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	4b06      	ldr	r3, [pc, #24]	; (8012e48 <scalbn+0xe8>)
 8012e2e:	e7b2      	b.n	8012d96 <scalbn+0x36>
 8012e30:	c2f8f359 	.word	0xc2f8f359
 8012e34:	01a56e1f 	.word	0x01a56e1f
 8012e38:	8800759c 	.word	0x8800759c
 8012e3c:	7e37e43c 	.word	0x7e37e43c
 8012e40:	43500000 	.word	0x43500000
 8012e44:	ffff3cb0 	.word	0xffff3cb0
 8012e48:	3c900000 	.word	0x3c900000
 8012e4c:	00000000 	.word	0x00000000

08012e50 <__ieee754_log>:
 8012e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e54:	ec51 0b10 	vmov	r0, r1, d0
 8012e58:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012e5c:	b087      	sub	sp, #28
 8012e5e:	460d      	mov	r5, r1
 8012e60:	da27      	bge.n	8012eb2 <__ieee754_log+0x62>
 8012e62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e66:	4303      	orrs	r3, r0
 8012e68:	ee10 2a10 	vmov	r2, s0
 8012e6c:	d10a      	bne.n	8012e84 <__ieee754_log+0x34>
 8012e6e:	49cc      	ldr	r1, [pc, #816]	; (80131a0 <__ieee754_log+0x350>)
 8012e70:	2200      	movs	r2, #0
 8012e72:	2300      	movs	r3, #0
 8012e74:	2000      	movs	r0, #0
 8012e76:	f7ed fd11 	bl	800089c <__aeabi_ddiv>
 8012e7a:	ec41 0b10 	vmov	d0, r0, r1
 8012e7e:	b007      	add	sp, #28
 8012e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e84:	2900      	cmp	r1, #0
 8012e86:	da05      	bge.n	8012e94 <__ieee754_log+0x44>
 8012e88:	460b      	mov	r3, r1
 8012e8a:	f7ed fa25 	bl	80002d8 <__aeabi_dsub>
 8012e8e:	2200      	movs	r2, #0
 8012e90:	2300      	movs	r3, #0
 8012e92:	e7f0      	b.n	8012e76 <__ieee754_log+0x26>
 8012e94:	4bc3      	ldr	r3, [pc, #780]	; (80131a4 <__ieee754_log+0x354>)
 8012e96:	2200      	movs	r2, #0
 8012e98:	f7ed fbd6 	bl	8000648 <__aeabi_dmul>
 8012e9c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012ea0:	460d      	mov	r5, r1
 8012ea2:	4ac1      	ldr	r2, [pc, #772]	; (80131a8 <__ieee754_log+0x358>)
 8012ea4:	4295      	cmp	r5, r2
 8012ea6:	dd06      	ble.n	8012eb6 <__ieee754_log+0x66>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	f7ed fa16 	bl	80002dc <__adddf3>
 8012eb0:	e7e3      	b.n	8012e7a <__ieee754_log+0x2a>
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	e7f5      	b.n	8012ea2 <__ieee754_log+0x52>
 8012eb6:	152c      	asrs	r4, r5, #20
 8012eb8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012ebc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012ec0:	441c      	add	r4, r3
 8012ec2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012ec6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012ece:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012ed2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012ed6:	ea42 0105 	orr.w	r1, r2, r5
 8012eda:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012ede:	2200      	movs	r2, #0
 8012ee0:	4bb2      	ldr	r3, [pc, #712]	; (80131ac <__ieee754_log+0x35c>)
 8012ee2:	f7ed f9f9 	bl	80002d8 <__aeabi_dsub>
 8012ee6:	1cab      	adds	r3, r5, #2
 8012ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012eec:	2b02      	cmp	r3, #2
 8012eee:	4682      	mov	sl, r0
 8012ef0:	468b      	mov	fp, r1
 8012ef2:	f04f 0200 	mov.w	r2, #0
 8012ef6:	dc53      	bgt.n	8012fa0 <__ieee754_log+0x150>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	f7ed fe0d 	bl	8000b18 <__aeabi_dcmpeq>
 8012efe:	b1d0      	cbz	r0, 8012f36 <__ieee754_log+0xe6>
 8012f00:	2c00      	cmp	r4, #0
 8012f02:	f000 8120 	beq.w	8013146 <__ieee754_log+0x2f6>
 8012f06:	4620      	mov	r0, r4
 8012f08:	f7ed fb34 	bl	8000574 <__aeabi_i2d>
 8012f0c:	a390      	add	r3, pc, #576	; (adr r3, 8013150 <__ieee754_log+0x300>)
 8012f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f12:	4606      	mov	r6, r0
 8012f14:	460f      	mov	r7, r1
 8012f16:	f7ed fb97 	bl	8000648 <__aeabi_dmul>
 8012f1a:	a38f      	add	r3, pc, #572	; (adr r3, 8013158 <__ieee754_log+0x308>)
 8012f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f20:	4604      	mov	r4, r0
 8012f22:	460d      	mov	r5, r1
 8012f24:	4630      	mov	r0, r6
 8012f26:	4639      	mov	r1, r7
 8012f28:	f7ed fb8e 	bl	8000648 <__aeabi_dmul>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	4620      	mov	r0, r4
 8012f32:	4629      	mov	r1, r5
 8012f34:	e7ba      	b.n	8012eac <__ieee754_log+0x5c>
 8012f36:	a38a      	add	r3, pc, #552	; (adr r3, 8013160 <__ieee754_log+0x310>)
 8012f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3c:	4650      	mov	r0, sl
 8012f3e:	4659      	mov	r1, fp
 8012f40:	f7ed fb82 	bl	8000648 <__aeabi_dmul>
 8012f44:	4602      	mov	r2, r0
 8012f46:	460b      	mov	r3, r1
 8012f48:	2000      	movs	r0, #0
 8012f4a:	4999      	ldr	r1, [pc, #612]	; (80131b0 <__ieee754_log+0x360>)
 8012f4c:	f7ed f9c4 	bl	80002d8 <__aeabi_dsub>
 8012f50:	4652      	mov	r2, sl
 8012f52:	4606      	mov	r6, r0
 8012f54:	460f      	mov	r7, r1
 8012f56:	465b      	mov	r3, fp
 8012f58:	4650      	mov	r0, sl
 8012f5a:	4659      	mov	r1, fp
 8012f5c:	f7ed fb74 	bl	8000648 <__aeabi_dmul>
 8012f60:	4602      	mov	r2, r0
 8012f62:	460b      	mov	r3, r1
 8012f64:	4630      	mov	r0, r6
 8012f66:	4639      	mov	r1, r7
 8012f68:	f7ed fb6e 	bl	8000648 <__aeabi_dmul>
 8012f6c:	4606      	mov	r6, r0
 8012f6e:	460f      	mov	r7, r1
 8012f70:	b914      	cbnz	r4, 8012f78 <__ieee754_log+0x128>
 8012f72:	4632      	mov	r2, r6
 8012f74:	463b      	mov	r3, r7
 8012f76:	e0a0      	b.n	80130ba <__ieee754_log+0x26a>
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f7ed fafb 	bl	8000574 <__aeabi_i2d>
 8012f7e:	a374      	add	r3, pc, #464	; (adr r3, 8013150 <__ieee754_log+0x300>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	4680      	mov	r8, r0
 8012f86:	4689      	mov	r9, r1
 8012f88:	f7ed fb5e 	bl	8000648 <__aeabi_dmul>
 8012f8c:	a372      	add	r3, pc, #456	; (adr r3, 8013158 <__ieee754_log+0x308>)
 8012f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f92:	4604      	mov	r4, r0
 8012f94:	460d      	mov	r5, r1
 8012f96:	4640      	mov	r0, r8
 8012f98:	4649      	mov	r1, r9
 8012f9a:	f7ed fb55 	bl	8000648 <__aeabi_dmul>
 8012f9e:	e0a5      	b.n	80130ec <__ieee754_log+0x29c>
 8012fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012fa4:	f7ed f99a 	bl	80002dc <__adddf3>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	460b      	mov	r3, r1
 8012fac:	4650      	mov	r0, sl
 8012fae:	4659      	mov	r1, fp
 8012fb0:	f7ed fc74 	bl	800089c <__aeabi_ddiv>
 8012fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f7ed fadb 	bl	8000574 <__aeabi_i2d>
 8012fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fc6:	4610      	mov	r0, r2
 8012fc8:	4619      	mov	r1, r3
 8012fca:	f7ed fb3d 	bl	8000648 <__aeabi_dmul>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	460b      	mov	r3, r1
 8012fd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fd6:	f7ed fb37 	bl	8000648 <__aeabi_dmul>
 8012fda:	a363      	add	r3, pc, #396	; (adr r3, 8013168 <__ieee754_log+0x318>)
 8012fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe0:	4680      	mov	r8, r0
 8012fe2:	4689      	mov	r9, r1
 8012fe4:	f7ed fb30 	bl	8000648 <__aeabi_dmul>
 8012fe8:	a361      	add	r3, pc, #388	; (adr r3, 8013170 <__ieee754_log+0x320>)
 8012fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fee:	f7ed f975 	bl	80002dc <__adddf3>
 8012ff2:	4642      	mov	r2, r8
 8012ff4:	464b      	mov	r3, r9
 8012ff6:	f7ed fb27 	bl	8000648 <__aeabi_dmul>
 8012ffa:	a35f      	add	r3, pc, #380	; (adr r3, 8013178 <__ieee754_log+0x328>)
 8012ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013000:	f7ed f96c 	bl	80002dc <__adddf3>
 8013004:	4642      	mov	r2, r8
 8013006:	464b      	mov	r3, r9
 8013008:	f7ed fb1e 	bl	8000648 <__aeabi_dmul>
 801300c:	a35c      	add	r3, pc, #368	; (adr r3, 8013180 <__ieee754_log+0x330>)
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	f7ed f963 	bl	80002dc <__adddf3>
 8013016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801301a:	f7ed fb15 	bl	8000648 <__aeabi_dmul>
 801301e:	a35a      	add	r3, pc, #360	; (adr r3, 8013188 <__ieee754_log+0x338>)
 8013020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013028:	4640      	mov	r0, r8
 801302a:	4649      	mov	r1, r9
 801302c:	f7ed fb0c 	bl	8000648 <__aeabi_dmul>
 8013030:	a357      	add	r3, pc, #348	; (adr r3, 8013190 <__ieee754_log+0x340>)
 8013032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013036:	f7ed f951 	bl	80002dc <__adddf3>
 801303a:	4642      	mov	r2, r8
 801303c:	464b      	mov	r3, r9
 801303e:	f7ed fb03 	bl	8000648 <__aeabi_dmul>
 8013042:	a355      	add	r3, pc, #340	; (adr r3, 8013198 <__ieee754_log+0x348>)
 8013044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013048:	f7ed f948 	bl	80002dc <__adddf3>
 801304c:	4642      	mov	r2, r8
 801304e:	464b      	mov	r3, r9
 8013050:	f7ed fafa 	bl	8000648 <__aeabi_dmul>
 8013054:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8013058:	4602      	mov	r2, r0
 801305a:	460b      	mov	r3, r1
 801305c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8013060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013064:	f7ed f93a 	bl	80002dc <__adddf3>
 8013068:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801306c:	3551      	adds	r5, #81	; 0x51
 801306e:	4335      	orrs	r5, r6
 8013070:	2d00      	cmp	r5, #0
 8013072:	4680      	mov	r8, r0
 8013074:	4689      	mov	r9, r1
 8013076:	dd48      	ble.n	801310a <__ieee754_log+0x2ba>
 8013078:	2200      	movs	r2, #0
 801307a:	4b4d      	ldr	r3, [pc, #308]	; (80131b0 <__ieee754_log+0x360>)
 801307c:	4650      	mov	r0, sl
 801307e:	4659      	mov	r1, fp
 8013080:	f7ed fae2 	bl	8000648 <__aeabi_dmul>
 8013084:	4652      	mov	r2, sl
 8013086:	465b      	mov	r3, fp
 8013088:	f7ed fade 	bl	8000648 <__aeabi_dmul>
 801308c:	4602      	mov	r2, r0
 801308e:	460b      	mov	r3, r1
 8013090:	4606      	mov	r6, r0
 8013092:	460f      	mov	r7, r1
 8013094:	4640      	mov	r0, r8
 8013096:	4649      	mov	r1, r9
 8013098:	f7ed f920 	bl	80002dc <__adddf3>
 801309c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130a0:	f7ed fad2 	bl	8000648 <__aeabi_dmul>
 80130a4:	4680      	mov	r8, r0
 80130a6:	4689      	mov	r9, r1
 80130a8:	b964      	cbnz	r4, 80130c4 <__ieee754_log+0x274>
 80130aa:	4602      	mov	r2, r0
 80130ac:	460b      	mov	r3, r1
 80130ae:	4630      	mov	r0, r6
 80130b0:	4639      	mov	r1, r7
 80130b2:	f7ed f911 	bl	80002d8 <__aeabi_dsub>
 80130b6:	4602      	mov	r2, r0
 80130b8:	460b      	mov	r3, r1
 80130ba:	4650      	mov	r0, sl
 80130bc:	4659      	mov	r1, fp
 80130be:	f7ed f90b 	bl	80002d8 <__aeabi_dsub>
 80130c2:	e6da      	b.n	8012e7a <__ieee754_log+0x2a>
 80130c4:	a322      	add	r3, pc, #136	; (adr r3, 8013150 <__ieee754_log+0x300>)
 80130c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130ce:	f7ed fabb 	bl	8000648 <__aeabi_dmul>
 80130d2:	a321      	add	r3, pc, #132	; (adr r3, 8013158 <__ieee754_log+0x308>)
 80130d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d8:	4604      	mov	r4, r0
 80130da:	460d      	mov	r5, r1
 80130dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130e0:	f7ed fab2 	bl	8000648 <__aeabi_dmul>
 80130e4:	4642      	mov	r2, r8
 80130e6:	464b      	mov	r3, r9
 80130e8:	f7ed f8f8 	bl	80002dc <__adddf3>
 80130ec:	4602      	mov	r2, r0
 80130ee:	460b      	mov	r3, r1
 80130f0:	4630      	mov	r0, r6
 80130f2:	4639      	mov	r1, r7
 80130f4:	f7ed f8f0 	bl	80002d8 <__aeabi_dsub>
 80130f8:	4652      	mov	r2, sl
 80130fa:	465b      	mov	r3, fp
 80130fc:	f7ed f8ec 	bl	80002d8 <__aeabi_dsub>
 8013100:	4602      	mov	r2, r0
 8013102:	460b      	mov	r3, r1
 8013104:	4620      	mov	r0, r4
 8013106:	4629      	mov	r1, r5
 8013108:	e7d9      	b.n	80130be <__ieee754_log+0x26e>
 801310a:	4602      	mov	r2, r0
 801310c:	460b      	mov	r3, r1
 801310e:	4650      	mov	r0, sl
 8013110:	4659      	mov	r1, fp
 8013112:	f7ed f8e1 	bl	80002d8 <__aeabi_dsub>
 8013116:	e9dd 2300 	ldrd	r2, r3, [sp]
 801311a:	f7ed fa95 	bl	8000648 <__aeabi_dmul>
 801311e:	4606      	mov	r6, r0
 8013120:	460f      	mov	r7, r1
 8013122:	2c00      	cmp	r4, #0
 8013124:	f43f af25 	beq.w	8012f72 <__ieee754_log+0x122>
 8013128:	a309      	add	r3, pc, #36	; (adr r3, 8013150 <__ieee754_log+0x300>)
 801312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013132:	f7ed fa89 	bl	8000648 <__aeabi_dmul>
 8013136:	a308      	add	r3, pc, #32	; (adr r3, 8013158 <__ieee754_log+0x308>)
 8013138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313c:	4604      	mov	r4, r0
 801313e:	460d      	mov	r5, r1
 8013140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013144:	e729      	b.n	8012f9a <__ieee754_log+0x14a>
 8013146:	2000      	movs	r0, #0
 8013148:	2100      	movs	r1, #0
 801314a:	e696      	b.n	8012e7a <__ieee754_log+0x2a>
 801314c:	f3af 8000 	nop.w
 8013150:	fee00000 	.word	0xfee00000
 8013154:	3fe62e42 	.word	0x3fe62e42
 8013158:	35793c76 	.word	0x35793c76
 801315c:	3dea39ef 	.word	0x3dea39ef
 8013160:	55555555 	.word	0x55555555
 8013164:	3fd55555 	.word	0x3fd55555
 8013168:	df3e5244 	.word	0xdf3e5244
 801316c:	3fc2f112 	.word	0x3fc2f112
 8013170:	96cb03de 	.word	0x96cb03de
 8013174:	3fc74664 	.word	0x3fc74664
 8013178:	94229359 	.word	0x94229359
 801317c:	3fd24924 	.word	0x3fd24924
 8013180:	55555593 	.word	0x55555593
 8013184:	3fe55555 	.word	0x3fe55555
 8013188:	d078c69f 	.word	0xd078c69f
 801318c:	3fc39a09 	.word	0x3fc39a09
 8013190:	1d8e78af 	.word	0x1d8e78af
 8013194:	3fcc71c5 	.word	0x3fcc71c5
 8013198:	9997fa04 	.word	0x9997fa04
 801319c:	3fd99999 	.word	0x3fd99999
 80131a0:	c3500000 	.word	0xc3500000
 80131a4:	43500000 	.word	0x43500000
 80131a8:	7fefffff 	.word	0x7fefffff
 80131ac:	3ff00000 	.word	0x3ff00000
 80131b0:	3fe00000 	.word	0x3fe00000

080131b4 <copysign>:
 80131b4:	ec51 0b10 	vmov	r0, r1, d0
 80131b8:	ee11 0a90 	vmov	r0, s3
 80131bc:	ee10 2a10 	vmov	r2, s0
 80131c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80131c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80131c8:	ea41 0300 	orr.w	r3, r1, r0
 80131cc:	ec43 2b10 	vmov	d0, r2, r3
 80131d0:	4770      	bx	lr
	...

080131d4 <_init>:
 80131d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131d6:	bf00      	nop
 80131d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131da:	bc08      	pop	{r3}
 80131dc:	469e      	mov	lr, r3
 80131de:	4770      	bx	lr

080131e0 <_fini>:
 80131e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131e2:	bf00      	nop
 80131e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131e6:	bc08      	pop	{r3}
 80131e8:	469e      	mov	lr, r3
 80131ea:	4770      	bx	lr
