
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a60c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad5c  0800ad5c  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad5c  0800ad5c  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad5c  0800ad5c  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad5c  0800ad5c  0001ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad60  0800ad60  0001ad60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800ad64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000bc8  0800b92c  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  0800b92c  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028556  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005470  00000000  00000000  0004914e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d60  00000000  00000000  0004e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a38  00000000  00000000  00050320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ff63  00000000  00000000  00051d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fc56  00000000  00000000  00081cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001243a7  00000000  00000000  000a1911  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5cb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007de0  00000000  00000000  001c5d34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7d4 	.word	0x0800a7d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	0800a7d4 	.word	0x0800a7d4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fcce 	bl	8008c64 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f009 f8bb 	bl	8009444 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fecf 	bl	8009074 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fc44 	bl	8008b80 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 ff32 	bl	8003164 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb96 	bl	8000a30 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 fae9 	bl	80098dc <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a7ec 	.word	0x0800a7ec
 8000314:	0800a7fc 	.word	0x0800a7fc

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8



	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 800031e:	4b4a      	ldr	r3, [pc, #296]	; (8000448 <DM_UpdateDisplay+0x130>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d002      	beq.n	800032c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000326:	f000 f8b9 	bl	800049c <_DrawFuncSelectMenu>
 800032a:	e06d      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 800032c:	4b47      	ldr	r3, [pc, #284]	; (800044c <DM_UpdateDisplay+0x134>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <DM_UpdateDisplay+0x22>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawGainSelectMenu();
 8000334:	f000 fa7c 	bl	8000830 <_DrawGainSelectMenu>
 8000338:	e066      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 800033a:	4b45      	ldr	r3, [pc, #276]	; (8000450 <DM_UpdateDisplay+0x138>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d02e      	beq.n	80003a0 <DM_UpdateDisplay+0x88>
	{
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
 8000342:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	2302      	movs	r3, #2
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	22d2      	movs	r2, #210	; 0xd2
 8000350:	2118      	movs	r1, #24
 8000352:	4840      	ldr	r0, [pc, #256]	; (8000454 <DM_UpdateDisplay+0x13c>)
 8000354:	f008 fc14 	bl	8008b80 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
 8000358:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2302      	movs	r3, #2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	22d2      	movs	r2, #210	; 0xd2
 8000366:	215d      	movs	r1, #93	; 0x5d
 8000368:	483b      	ldr	r0, [pc, #236]	; (8000458 <DM_UpdateDisplay+0x140>)
 800036a:	f008 fc09 	bl	8008b80 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
 800036e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	2302      	movs	r3, #2
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2300      	movs	r3, #0
 800037a:	22d2      	movs	r2, #210	; 0xd2
 800037c:	21af      	movs	r1, #175	; 0xaf
 800037e:	4837      	ldr	r0, [pc, #220]	; (800045c <DM_UpdateDisplay+0x144>)
 8000380:	f008 fbfe 	bl	8008b80 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
 8000384:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2302      	movs	r3, #2
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	22d2      	movs	r2, #210	; 0xd2
 8000392:	21f7      	movs	r1, #247	; 0xf7
 8000394:	4832      	ldr	r0, [pc, #200]	; (8000460 <DM_UpdateDisplay+0x148>)
 8000396:	f008 fbf3 	bl	8008b80 <ILI9341_Draw_Text>

		_DrawFreqSelectMenu();
 800039a:	f000 fa87 	bl	80008ac <_DrawFreqSelectMenu>
 800039e:	e033      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 80003a0:	4b30      	ldr	r3, [pc, #192]	; (8000464 <DM_UpdateDisplay+0x14c>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawBiasSelectMenu();
 80003a8:	f000 fac0 	bl	800092c <_DrawBiasSelectMenu>
 80003ac:	e02c      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else
	{
		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 80003ae:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	2302      	movs	r3, #2
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2300      	movs	r3, #0
 80003ba:	22d2      	movs	r2, #210	; 0xd2
 80003bc:	210a      	movs	r1, #10
 80003be:	482a      	ldr	r0, [pc, #168]	; (8000468 <DM_UpdateDisplay+0x150>)
 80003c0:	f008 fbde 	bl	8008b80 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 80003c4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	2302      	movs	r3, #2
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	2300      	movs	r3, #0
 80003d0:	22d2      	movs	r2, #210	; 0xd2
 80003d2:	2164      	movs	r1, #100	; 0x64
 80003d4:	4825      	ldr	r0, [pc, #148]	; (800046c <DM_UpdateDisplay+0x154>)
 80003d6:	f008 fbd3 	bl	8008b80 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 80003da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	2302      	movs	r3, #2
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2300      	movs	r3, #0
 80003e6:	22d2      	movs	r2, #210	; 0xd2
 80003e8:	21af      	movs	r1, #175	; 0xaf
 80003ea:	4821      	ldr	r0, [pc, #132]	; (8000470 <DM_UpdateDisplay+0x158>)
 80003ec:	f008 fbc8 	bl	8008b80 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 80003f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2302      	movs	r3, #2
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2300      	movs	r3, #0
 80003fc:	22d2      	movs	r2, #210	; 0xd2
 80003fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000402:	481c      	ldr	r0, [pc, #112]	; (8000474 <DM_UpdateDisplay+0x15c>)
 8000404:	f008 fbbc 	bl	8008b80 <ILI9341_Draw_Text>
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 8000408:	2300      	movs	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	2300      	movs	r3, #0
 800040e:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <DM_UpdateDisplay+0x160>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	b29b      	uxth	r3, r3
 8000416:	4639      	mov	r1, r7
 8000418:	2205      	movs	r2, #5
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fb4a 	bl	8000ab4 <DM_AddDigitPadding>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d10b      	bne.n	800043e <DM_UpdateDisplay+0x126>
		ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 8000426:	4638      	mov	r0, r7
 8000428:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2302      	movs	r3, #2
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	2232      	movs	r2, #50	; 0x32
 8000436:	f44f 7182 	mov.w	r1, #260	; 0x104
 800043a:	f008 fba1 	bl	8008b80 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000be4 	.word	0x20000be4
 800044c:	20000be5 	.word	0x20000be5
 8000450:	20000be6 	.word	0x20000be6
 8000454:	0800a80c 	.word	0x0800a80c
 8000458:	0800a810 	.word	0x0800a810
 800045c:	0800a818 	.word	0x0800a818
 8000460:	0800a820 	.word	0x0800a820
 8000464:	20000be7 	.word	0x20000be7
 8000468:	0800a828 	.word	0x0800a828
 800046c:	0800a830 	.word	0x0800a830
 8000470:	0800a838 	.word	0x0800a838
 8000474:	0800a840 	.word	0x0800a840
 8000478:	40012c00 	.word	0x40012c00

0800047c <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000486:	4a04      	ldr	r2, [pc, #16]	; (8000498 <DM_ShowFuncSelectMenu+0x1c>)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	7013      	strb	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	20000be4 	.word	0x20000be4

0800049c <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 80004a2:	f000 ff15 	bl	80012d0 <FuncO_GetOutputMode>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	f200 81a1 	bhi.w	80007f0 <_DrawFuncSelectMenu+0x354>
 80004ae:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <_DrawFuncSelectMenu+0x18>)
 80004b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b4:	080004cd 	.word	0x080004cd
 80004b8:	08000553 	.word	0x08000553
 80004bc:	080005d9 	.word	0x080005d9
 80004c0:	0800065f 	.word	0x0800065f
 80004c4:	080006e5 	.word	0x080006e5
 80004c8:	0800076b 	.word	0x0800076b
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 80004cc:	2300      	movs	r3, #0
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	2302      	movs	r3, #2
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d8:	221e      	movs	r2, #30
 80004da:	210a      	movs	r1, #10
 80004dc:	48c6      	ldr	r0, [pc, #792]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80004de:	f008 fb4f 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80004e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	2302      	movs	r3, #2
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	2232      	movs	r2, #50	; 0x32
 80004f0:	210a      	movs	r1, #10
 80004f2:	48c2      	ldr	r0, [pc, #776]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 80004f4:	f008 fb44 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80004f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2302      	movs	r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2246      	movs	r2, #70	; 0x46
 8000506:	210a      	movs	r1, #10
 8000508:	48bd      	ldr	r0, [pc, #756]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 800050a:	f008 fb39 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800050e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	225a      	movs	r2, #90	; 0x5a
 800051c:	210a      	movs	r1, #10
 800051e:	48b9      	ldr	r0, [pc, #740]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 8000520:	f008 fb2e 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2302      	movs	r3, #2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	226e      	movs	r2, #110	; 0x6e
 8000532:	210a      	movs	r1, #10
 8000534:	48b4      	ldr	r0, [pc, #720]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 8000536:	f008 fb23 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800053a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	2302      	movs	r3, #2
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2282      	movs	r2, #130	; 0x82
 8000548:	210a      	movs	r1, #10
 800054a:	48b0      	ldr	r0, [pc, #704]	; (800080c <_DrawFuncSelectMenu+0x370>)
 800054c:	f008 fb18 	bl	8008b80 <ILI9341_Draw_Text>
			break;
 8000550:	e14e      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2302      	movs	r3, #2
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	221e      	movs	r2, #30
 8000560:	210a      	movs	r1, #10
 8000562:	48a5      	ldr	r0, [pc, #660]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 8000564:	f008 fb0c 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 8000568:	2300      	movs	r3, #0
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2302      	movs	r3, #2
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000574:	2232      	movs	r2, #50	; 0x32
 8000576:	210a      	movs	r1, #10
 8000578:	48a0      	ldr	r0, [pc, #640]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 800057a:	f008 fb01 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2246      	movs	r2, #70	; 0x46
 800058c:	210a      	movs	r1, #10
 800058e:	489c      	ldr	r0, [pc, #624]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000590:	f008 faf6 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2302      	movs	r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	225a      	movs	r2, #90	; 0x5a
 80005a2:	210a      	movs	r1, #10
 80005a4:	4897      	ldr	r0, [pc, #604]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80005a6:	f008 faeb 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	226e      	movs	r2, #110	; 0x6e
 80005b8:	210a      	movs	r1, #10
 80005ba:	4893      	ldr	r0, [pc, #588]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80005bc:	f008 fae0 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	210a      	movs	r1, #10
 80005d0:	488e      	ldr	r0, [pc, #568]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80005d2:	f008 fad5 	bl	8008b80 <ILI9341_Draw_Text>
			break;
 80005d6:	e10b      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	221e      	movs	r2, #30
 80005e6:	210a      	movs	r1, #10
 80005e8:	4883      	ldr	r0, [pc, #524]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80005ea:	f008 fac9 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80005ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	2232      	movs	r2, #50	; 0x32
 80005fc:	210a      	movs	r1, #10
 80005fe:	487f      	ldr	r0, [pc, #508]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000600:	f008 fabe 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	2246      	movs	r2, #70	; 0x46
 8000612:	210a      	movs	r1, #10
 8000614:	487a      	ldr	r0, [pc, #488]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000616:	f008 fab3 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	225a      	movs	r2, #90	; 0x5a
 8000628:	210a      	movs	r1, #10
 800062a:	4876      	ldr	r0, [pc, #472]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 800062c:	f008 faa8 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	226e      	movs	r2, #110	; 0x6e
 800063e:	210a      	movs	r1, #10
 8000640:	4871      	ldr	r0, [pc, #452]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 8000642:	f008 fa9d 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2302      	movs	r3, #2
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	2282      	movs	r2, #130	; 0x82
 8000654:	210a      	movs	r1, #10
 8000656:	486d      	ldr	r0, [pc, #436]	; (800080c <_DrawFuncSelectMenu+0x370>)
 8000658:	f008 fa92 	bl	8008b80 <ILI9341_Draw_Text>
			break;
 800065c:	e0c8      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800065e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2302      	movs	r3, #2
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	221e      	movs	r2, #30
 800066c:	210a      	movs	r1, #10
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 8000670:	f008 fa86 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2232      	movs	r2, #50	; 0x32
 8000682:	210a      	movs	r1, #10
 8000684:	485d      	ldr	r0, [pc, #372]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000686:	f008 fa7b 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800068a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	2302      	movs	r3, #2
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	2246      	movs	r2, #70	; 0x46
 8000698:	210a      	movs	r1, #10
 800069a:	4859      	ldr	r0, [pc, #356]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 800069c:	f008 fa70 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 80006a0:	2300      	movs	r3, #0
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ac:	225a      	movs	r2, #90	; 0x5a
 80006ae:	210a      	movs	r1, #10
 80006b0:	4854      	ldr	r0, [pc, #336]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80006b2:	f008 fa65 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80006b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	226e      	movs	r2, #110	; 0x6e
 80006c4:	210a      	movs	r1, #10
 80006c6:	4850      	ldr	r0, [pc, #320]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80006c8:	f008 fa5a 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2302      	movs	r3, #2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	2282      	movs	r2, #130	; 0x82
 80006da:	210a      	movs	r1, #10
 80006dc:	484b      	ldr	r0, [pc, #300]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80006de:	f008 fa4f 	bl	8008b80 <ILI9341_Draw_Text>
			break;
 80006e2:	e085      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2302      	movs	r3, #2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	221e      	movs	r2, #30
 80006f2:	210a      	movs	r1, #10
 80006f4:	4840      	ldr	r0, [pc, #256]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80006f6:	f008 fa43 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2302      	movs	r3, #2
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	2232      	movs	r2, #50	; 0x32
 8000708:	210a      	movs	r1, #10
 800070a:	483c      	ldr	r0, [pc, #240]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 800070c:	f008 fa38 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2302      	movs	r3, #2
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	2246      	movs	r2, #70	; 0x46
 800071e:	210a      	movs	r1, #10
 8000720:	4837      	ldr	r0, [pc, #220]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000722:	f008 fa2d 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2302      	movs	r3, #2
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	225a      	movs	r2, #90	; 0x5a
 8000734:	210a      	movs	r1, #10
 8000736:	4833      	ldr	r0, [pc, #204]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 8000738:	f008 fa22 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 800073c:	2300      	movs	r3, #0
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2302      	movs	r3, #2
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000748:	226e      	movs	r2, #110	; 0x6e
 800074a:	210a      	movs	r1, #10
 800074c:	482e      	ldr	r0, [pc, #184]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 800074e:	f008 fa17 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2302      	movs	r3, #2
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	2282      	movs	r2, #130	; 0x82
 8000760:	210a      	movs	r1, #10
 8000762:	482a      	ldr	r0, [pc, #168]	; (800080c <_DrawFuncSelectMenu+0x370>)
 8000764:	f008 fa0c 	bl	8008b80 <ILI9341_Draw_Text>
			break;
 8000768:	e042      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	221e      	movs	r2, #30
 8000778:	210a      	movs	r1, #10
 800077a:	481f      	ldr	r0, [pc, #124]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 800077c:	f008 fa00 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2302      	movs	r3, #2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2232      	movs	r2, #50	; 0x32
 800078e:	210a      	movs	r1, #10
 8000790:	481a      	ldr	r0, [pc, #104]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000792:	f008 f9f5 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2302      	movs	r3, #2
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2246      	movs	r2, #70	; 0x46
 80007a4:	210a      	movs	r1, #10
 80007a6:	4816      	ldr	r0, [pc, #88]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 80007a8:	f008 f9ea 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80007ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2302      	movs	r3, #2
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	225a      	movs	r2, #90	; 0x5a
 80007ba:	210a      	movs	r1, #10
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80007be:	f008 f9df 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	2302      	movs	r3, #2
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	226e      	movs	r2, #110	; 0x6e
 80007d0:	210a      	movs	r1, #10
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80007d4:	f008 f9d4 	bl	8008b80 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 80007d8:	2300      	movs	r3, #0
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2302      	movs	r3, #2
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e4:	2282      	movs	r2, #130	; 0x82
 80007e6:	210a      	movs	r1, #10
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80007ea:	f008 f9c9 	bl	8008b80 <ILI9341_Draw_Text>
			break;
 80007ee:	bf00      	nop

	}

}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	0800a848 	.word	0x0800a848
 80007fc:	0800a850 	.word	0x0800a850
 8000800:	0800a85c 	.word	0x0800a85c
 8000804:	0800a864 	.word	0x0800a864
 8000808:	0800a870 	.word	0x0800a870
 800080c:	0800a87c 	.word	0x0800a87c

08000810 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <DM_ShowGainSelectMenu+0x1c>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	7013      	strb	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	20000be5 	.word	0x20000be5

08000830 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	2302      	movs	r3, #2
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	2278      	movs	r2, #120	; 0x78
 8000844:	210a      	movs	r1, #10
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <_DrawGainSelectMenu+0x58>)
 8000848:	f008 f99a 	bl	8008b80 <ILI9341_Draw_Text>

	char gain[4] = "";
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
 8000850:	f000 fe36 	bl	80014c0 <GO_GetOutputGain>
 8000854:	4603      	mov	r3, r0
 8000856:	b29b      	uxth	r3, r3
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	2204      	movs	r2, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f929 	bl	8000ab4 <DM_AddDigitPadding>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10a      	bne.n	800087e <_DrawGainSelectMenu+0x4e>
		ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000868:	1d38      	adds	r0, r7, #4
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2302      	movs	r3, #2
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000876:	2278      	movs	r2, #120	; 0x78
 8000878:	21fa      	movs	r1, #250	; 0xfa
 800087a:	f008 f981 	bl	8008b80 <ILI9341_Draw_Text>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800a884 	.word	0x0800a884

0800088c <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <DM_ShowFreqSelectMenu+0x1c>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	7013      	strb	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	20000be6 	.word	0x20000be6

080008ac <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 80008b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	2278      	movs	r2, #120	; 0x78
 80008c0:	210a      	movs	r1, #10
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <_DrawFreqSelectMenu+0x5c>)
 80008c4:	f008 f95c 	bl	8008b80 <ILI9341_Draw_Text>

	char freq[6] = "";
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 80008d0:	f000 fbf2 	bl	80010b8 <FreqO_GetOutputFreq>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4639      	mov	r1, r7
 80008da:	2206      	movs	r2, #6
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f8e9 	bl	8000ab4 <DM_AddDigitPadding>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10a      	bne.n	80008fe <_DrawFreqSelectMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 80008e8:	4638      	mov	r0, r7
 80008ea:	2300      	movs	r3, #0
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	2302      	movs	r3, #2
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	2278      	movs	r2, #120	; 0x78
 80008f8:	21fa      	movs	r1, #250	; 0xfa
 80008fa:	f008 f941 	bl	8008b80 <ILI9341_Draw_Text>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0800a89c 	.word	0x0800a89c

0800090c <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <DM_ShowBiasSelectMenu+0x1c>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	7013      	strb	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	20000be7 	.word	0x20000be7

0800092c <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	2302      	movs	r3, #2
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2278      	movs	r2, #120	; 0x78
 8000940:	210a      	movs	r1, #10
 8000942:	4823      	ldr	r0, [pc, #140]	; (80009d0 <_DrawBiasSelectMenu+0xa4>)
 8000944:	f008 f91c 	bl	8008b80 <ILI9341_Draw_Text>

	char bias[5] = "";
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	2300      	movs	r3, #0
 800094e:	733b      	strb	r3, [r7, #12]
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	if(DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)) == 0)
 8000950:	f000 fb98 	bl	8001084 <BO_GetOutputBias>
 8000954:	4603      	mov	r3, r0
 8000956:	b29b      	uxth	r3, r3
 8000958:	f107 0108 	add.w	r1, r7, #8
 800095c:	2205      	movs	r2, #5
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f8a8 	bl	8000ab4 <DM_AddDigitPadding>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d12d      	bne.n	80009c6 <_DrawBiasSelectMenu+0x9a>
	{
		if(BO_GetBiasPolarity())
 800096a:	f000 fb39 	bl	8000fe0 <BO_GetBiasPolarity>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d014      	beq.n	800099e <_DrawBiasSelectMenu+0x72>
		{
			char symbol[2] = "+\0";
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <_DrawBiasSelectMenu+0xa8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	80bb      	strh	r3, [r7, #4]
			//char test[10] = strcat(symbol, "10");
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 800097a:	f107 0208 	add.w	r2, r7, #8
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f008 ffe6 	bl	8009954 <strcat>
 8000988:	2300      	movs	r3, #0
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	2302      	movs	r3, #2
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000994:	2278      	movs	r2, #120	; 0x78
 8000996:	21fa      	movs	r1, #250	; 0xfa
 8000998:	f008 f8f2 	bl	8008b80 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
		}
	}

}
 800099c:	e013      	b.n	80009c6 <_DrawBiasSelectMenu+0x9a>
			char symbol[2] = "-\0";
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <_DrawBiasSelectMenu+0xac>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 80009a4:	f107 0208 	add.w	r2, r7, #8
 80009a8:	463b      	mov	r3, r7
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f008 ffd1 	bl	8009954 <strcat>
 80009b2:	2300      	movs	r3, #0
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	2302      	movs	r3, #2
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009be:	2278      	movs	r2, #120	; 0x78
 80009c0:	21fa      	movs	r1, #250	; 0xfa
 80009c2:	f008 f8dd 	bl	8008b80 <ILI9341_Draw_Text>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800a8b4 	.word	0x0800a8b4
 80009d4:	0800a8cc 	.word	0x0800a8cc
 80009d8:	0800a8d0 	.word	0x0800a8d0

080009dc <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	dc01      	bgt.n	80009ee <DM_DigitCount+0x12>
		return 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e018      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 100)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b63      	cmp	r3, #99	; 0x63
 80009f2:	dc01      	bgt.n	80009f8 <DM_DigitCount+0x1c>
		return 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	e013      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 1000)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009fe:	da01      	bge.n	8000a04 <DM_DigitCount+0x28>
		return 3;
 8000a00:	2303      	movs	r3, #3
 8000a02:	e00d      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 10000)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	dc01      	bgt.n	8000a12 <DM_DigitCount+0x36>
		return 4;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 100000)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <DM_DigitCount+0x50>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	dc01      	bgt.n	8000a1e <DM_DigitCount+0x42>
		return 5;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e000      	b.n	8000a20 <DM_DigitCount+0x44>
	else
		return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	0001869f 	.word	0x0001869f

08000a30 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 8000a36:	f008 f8d1 	bl	8008bdc <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a3c:	8818      	ldrh	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2302      	movs	r3, #2
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2332      	movs	r3, #50	; 0x32
 8000a4e:	2250      	movs	r2, #80	; 0x50
 8000a50:	21c8      	movs	r1, #200	; 0xc8
 8000a52:	f007 ff2b 	bl	80088ac <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a58:	8858      	ldrh	r0, [r3, #2]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2302      	movs	r3, #2
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2332      	movs	r3, #50	; 0x32
 8000a6a:	2250      	movs	r2, #80	; 0x50
 8000a6c:	21c8      	movs	r1, #200	; 0xc8
 8000a6e:	f007 ff1d 	bl	80088ac <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a74:	8898      	ldrh	r0, [r3, #4]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2332      	movs	r3, #50	; 0x32
 8000a86:	2250      	movs	r2, #80	; 0x50
 8000a88:	21c8      	movs	r1, #200	; 0xc8
 8000a8a:	f007 ff0f 	bl	80088ac <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a90:	88d8      	ldrh	r0, [r3, #6]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2302      	movs	r3, #2
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2332      	movs	r3, #50	; 0x32
 8000aa2:	2250      	movs	r2, #80	; 0x50
 8000aa4:	21c8      	movs	r1, #200	; 0xc8
 8000aa6:	f007 ff01 	bl	80088ac <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <DM_AddDigitPadding+0x1c>
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d901      	bls.n	8000ad4 <DM_AddDigitPadding+0x20>
		return 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e048      	b.n	8000b66 <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff7e 	bl	80009dc <DM_DigitCount>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b05      	cmp	r3, #5
 8000ae4:	d83e      	bhi.n	8000b64 <DM_AddDigitPadding+0xb0>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <DM_AddDigitPadding+0x38>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b15 	.word	0x08000b15
 8000af4:	08000b25 	.word	0x08000b25
 8000af8:	08000b35 	.word	0x08000b35
 8000afc:	08000b45 	.word	0x08000b45
 8000b00:	08000b55 	.word	0x08000b55
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8000b04:	88bb      	ldrh	r3, [r7, #4]
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <DM_AddDigitPadding+0xbc>)
 8000b08:	4619      	mov	r1, r3
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f008 feee 	bl	80098ec <sniprintf>
			return 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e028      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8000b14:	88b9      	ldrh	r1, [r7, #4]
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <DM_AddDigitPadding+0xc0>)
 8000b1a:	6838      	ldr	r0, [r7, #0]
 8000b1c:	f008 fee6 	bl	80098ec <sniprintf>
			return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e020      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8000b24:	88b9      	ldrh	r1, [r7, #4]
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <DM_AddDigitPadding+0xc4>)
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f008 fede 	bl	80098ec <sniprintf>
			return 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e018      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8000b34:	88b9      	ldrh	r1, [r7, #4]
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <DM_AddDigitPadding+0xc8>)
 8000b3a:	6838      	ldr	r0, [r7, #0]
 8000b3c:	f008 fed6 	bl	80098ec <sniprintf>
			return 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e010      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8000b44:	88b9      	ldrh	r1, [r7, #4]
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <DM_AddDigitPadding+0xcc>)
 8000b4a:	6838      	ldr	r0, [r7, #0]
 8000b4c:	f008 fece 	bl	80098ec <sniprintf>
			return 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	e008      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8000b54:	88b9      	ldrh	r1, [r7, #4]
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <DM_AddDigitPadding+0xd0>)
 8000b5a:	6838      	ldr	r0, [r7, #0]
 8000b5c:	f008 fec6 	bl	80098ec <sniprintf>
			return 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e000      	b.n	8000b66 <DM_AddDigitPadding+0xb2>

	}

	return 2;
 8000b64:	2302      	movs	r3, #2


}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	0800a90c 	.word	0x0800a90c
 8000b74:	0800a914 	.word	0x0800a914
 8000b78:	0800a91c 	.word	0x0800a91c
 8000b7c:	0800a924 	.word	0x0800a924
 8000b80:	0800a92c 	.word	0x0800a92c
 8000b84:	0800a930 	.word	0x0800a930

08000b88 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

	switch(eNextState)
 8000b8c:	4b62      	ldr	r3, [pc, #392]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	f200 80b3 	bhi.w	8000cfc <EM_ProcessEvent+0x174>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <EM_ProcessEvent+0x14>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bb1 	.word	0x08000bb1
 8000ba0:	08000c05 	.word	0x08000c05
 8000ba4:	08000c2f 	.word	0x08000c2f
 8000ba8:	08000c59 	.word	0x08000c59
 8000bac:	08000cd3 	.word	0x08000cd3
	{
		case Idle_State:
			if(eNewEvent == evBlueBtn)
 8000bb0:	4b5a      	ldr	r3, [pc, #360]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d105      	bne.n	8000bc4 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 8000bb8:	f000 f8b2 	bl	8000d20 <_FuncMenuHandler>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000bc2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8000bc4:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d105      	bne.n	8000bd8 <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 8000bcc:	f000 f9a6 	bl	8000f1c <_FreqMenuHandler>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000bd6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8000bd8:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d105      	bne.n	8000bec <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000be0:	f000 f8f2 	bl	8000dc8 <_GainMenuHandler>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000bea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	f040 8085 	bne.w	8000d00 <EM_ProcessEvent+0x178>
			{
				eNextState = _BiasMenuHandler();
 8000bf6:	f000 f93b 	bl	8000e70 <_BiasMenuHandler>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c00:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000c02:	e07d      	b.n	8000d00 <EM_ProcessEvent+0x178>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c04:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b05      	cmp	r3, #5
 8000c0a:	d105      	bne.n	8000c18 <EM_ProcessEvent+0x90>
			{
				eNextState = _FuncSetHandler();
 8000c0c:	f000 f8a8 	bl	8000d60 <_FuncSetHandler>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c16:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c18:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b06      	cmp	r3, #6
 8000c1e:	d171      	bne.n	8000d04 <EM_ProcessEvent+0x17c>
			{
				eNextState = _ExitFuncMenuHandler();
 8000c20:	f000 f8b0 	bl	8000d84 <_ExitFuncMenuHandler>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c2a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c2c:	e06a      	b.n	8000d04 <EM_ProcessEvent+0x17c>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d105      	bne.n	8000c42 <EM_ProcessEvent+0xba>
			{
				eNextState = _GainSetHandler();
 8000c36:	f000 f8e7 	bl	8000e08 <_GainSetHandler>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c40:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d15e      	bne.n	8000d08 <EM_ProcessEvent+0x180>
			{
				eNextState = _ExitGainMenuHandler();
 8000c4a:	f000 f8ef 	bl	8000e2c <_ExitGainMenuHandler>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c56:	e057      	b.n	8000d08 <EM_ProcessEvent+0x180>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d105      	bne.n	8000c6c <EM_ProcessEvent+0xe4>
			{
				eNextState = _FreqSetHandler();
 8000c60:	f000 f980 	bl	8000f64 <_FreqSetHandler>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c6a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d105      	bne.n	8000c80 <EM_ProcessEvent+0xf8>
			{
				eNextState = _ExitFreqMenuHandler();
 8000c74:	f000 f982 	bl	8000f7c <_ExitFreqMenuHandler>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c7e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d105      	bne.n	8000c94 <EM_ProcessEvent+0x10c>
			{
				FreqO_ApplyPreset(FPRESET_1HZ);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 fa21 	bl	80010d0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c90:	2203      	movs	r2, #3
 8000c92:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d105      	bne.n	8000ca8 <EM_ProcessEvent+0x120>
			{
				FreqO_ApplyPreset(FPRESET_100HZ);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 fa17 	bl	80010d0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d105      	bne.n	8000cbc <EM_ProcessEvent+0x134>
			{
				FreqO_ApplyPreset(FPRESET_1KHZ);
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f000 fa0d 	bl	80010d0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000cb8:	2203      	movs	r2, #3
 8000cba:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d123      	bne.n	8000d0c <EM_ProcessEvent+0x184>
			{
				FreqO_ApplyPreset(FPRESET_100KHZ);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 fa03 	bl	80010d0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000ccc:	2203      	movs	r2, #3
 8000cce:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cd0:	e01c      	b.n	8000d0c <EM_ProcessEvent+0x184>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d105      	bne.n	8000ce6 <EM_ProcessEvent+0x15e>
			{
				eNextState = _BiasSetHandler();
 8000cda:	f000 f8eb 	bl	8000eb4 <_BiasSetHandler>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000ce4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d110      	bne.n	8000d10 <EM_ProcessEvent+0x188>
			{
				eNextState = _ExitBiasMenuHandler();
 8000cee:	f000 f8f3 	bl	8000ed8 <_ExitBiasMenuHandler>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000cf8:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000cfa:	e009      	b.n	8000d10 <EM_ProcessEvent+0x188>

		default:
			break;
 8000cfc:	bf00      	nop
 8000cfe:	e008      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d00:	bf00      	nop
 8000d02:	e006      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d04:	bf00      	nop
 8000d06:	e004      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d08:	bf00      	nop
 8000d0a:	e002      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d0c:	bf00      	nop
 8000d0e:	e000      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d10:	bf00      	nop
	}

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000be8 	.word	0x20000be8
 8000d1c:	20000be9 	.word	0x20000be9

08000d20 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <_FuncMenuHandler+0x34>)
 8000d26:	f008 fdd9 	bl	80098dc <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <_FuncMenuHandler+0x38>)
 8000d2c:	f006 fae6 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d30:	f7ff fe7e 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <_FuncMenuHandler+0x38>)
 8000d36:	f006 faab 	bl	8007290 <HAL_TIM_Base_Start_IT>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fb9e 	bl	800047c <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 20;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <_FuncMenuHandler+0x3c>)
 8000d42:	2214      	movs	r2, #20
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <_FuncMenuHandler+0x3c>)
 8000d48:	2214      	movs	r2, #20
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0800a934 	.word	0x0800a934
 8000d58:	20000e98 	.word	0x20000e98
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <_FuncSetHandler+0x1c>)
 8000d66:	f008 fdb9 	bl	80098dc <puts>
#endif


	FuncO_ModifyOutput();
 8000d6a:	f000 f9ff 	bl	800116c <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <_FuncSetHandler+0x20>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	0800a950 	.word	0x0800a950
 8000d80:	20000be9 	.word	0x20000be9

08000d84 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <_ExitFuncMenuHandler+0x34>)
 8000d8a:	f008 fda7 	bl	80098dc <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fb74 	bl	800047c <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <_ExitFuncMenuHandler+0x38>)
 8000d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <_ExitFuncMenuHandler+0x3c>)
 8000d9e:	f006 faad 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000da2:	f7ff fe45 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <_ExitFuncMenuHandler+0x3c>)
 8000da8:	f006 fa72 	bl	8007290 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <_ExitFuncMenuHandler+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	0800a970 	.word	0x0800a970
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	20000e98 	.word	0x20000e98
 8000dc4:	20000be9 	.word	0x20000be9

08000dc8 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <_GainMenuHandler+0x34>)
 8000dce:	f008 fd85 	bl	80098dc <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <_GainMenuHandler+0x38>)
 8000dd4:	f006 fa92 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000dd8:	f7ff fe2a 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000ddc:	4808      	ldr	r0, [pc, #32]	; (8000e00 <_GainMenuHandler+0x38>)
 8000dde:	f006 fa57 	bl	8007290 <HAL_TIM_Base_Start_IT>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff fd14 	bl	8000810 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 7;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <_GainMenuHandler+0x3c>)
 8000dea:	2207      	movs	r2, #7
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <_GainMenuHandler+0x3c>)
 8000df0:	2220      	movs	r2, #32
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000df4:	2302      	movs	r3, #2
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800a98c 	.word	0x0800a98c
 8000e00:	20000e98 	.word	0x20000e98
 8000e04:	40012c00 	.word	0x40012c00

08000e08 <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <_GainSetHandler+0x1c>)
 8000e0e:	f008 fd65 	bl	80098dc <puts>
#endif

	GO_ModifyOutput();
 8000e12:	f000 fa69 	bl	80012e8 <GO_ModifyOutput>

	eNewEvent = evYellowBtn;
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <_GainSetHandler+0x20>)
 8000e18:	2203      	movs	r2, #3
 8000e1a:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000e1c:	2302      	movs	r3, #2
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	0800a9a4 	.word	0x0800a9a4
 8000e28:	20000be9 	.word	0x20000be9

08000e2c <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <_ExitGainMenuHandler+0x34>)
 8000e32:	f008 fd53 	bl	80098dc <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fcea 	bl	8000810 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <_ExitGainMenuHandler+0x38>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <_ExitGainMenuHandler+0x3c>)
 8000e46:	f006 fa59 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000e4a:	f7ff fdf1 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <_ExitGainMenuHandler+0x3c>)
 8000e50:	f006 fa1e 	bl	8007290 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <_ExitGainMenuHandler+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	0800a9bc 	.word	0x0800a9bc
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	20000e98 	.word	0x20000e98
 8000e6c:	20000be9 	.word	0x20000be9

08000e70 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <_BiasMenuHandler+0x38>)
 8000e76:	f008 fd31 	bl	80098dc <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <_BiasMenuHandler+0x3c>)
 8000e7c:	f006 fa3e 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000e80:	f7ff fdd6 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <_BiasMenuHandler+0x3c>)
 8000e86:	f006 fa03 	bl	8007290 <HAL_TIM_Base_Start_IT>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fd3e 	bl	800090c <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <_BiasMenuHandler+0x40>)
 8000e92:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <_BiasMenuHandler+0x40>)
 8000e9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000ea0:	2304      	movs	r3, #4
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	0800a9d8 	.word	0x0800a9d8
 8000eac:	20000e98 	.word	0x20000e98
 8000eb0:	40012c00 	.word	0x40012c00

08000eb4 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <_BiasSetHandler+0x1c>)
 8000eba:	f008 fd0f 	bl	80098dc <puts>
#endif

	BO_ModifyOutput();
 8000ebe:	f000 f89b 	bl	8000ff8 <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <_BiasSetHandler+0x20>)
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000ec8:	2304      	movs	r3, #4
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800a9f0 	.word	0x0800a9f0
 8000ed4:	20000be9 	.word	0x20000be9

08000ed8 <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <_ExitBiasMenuHandler+0x34>)
 8000ede:	f008 fcfd 	bl	80098dc <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fd12 	bl	800090c <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <_ExitBiasMenuHandler+0x38>)
 8000eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <_ExitBiasMenuHandler+0x3c>)
 8000ef2:	f006 fa03 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000ef6:	f7ff fd9b 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <_ExitBiasMenuHandler+0x3c>)
 8000efc:	f006 f9c8 	bl	8007290 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <_ExitBiasMenuHandler+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	0800aa08 	.word	0x0800aa08
 8000f10:	40012c00 	.word	0x40012c00
 8000f14:	20000e98 	.word	0x20000e98
 8000f18:	20000be9 	.word	0x20000be9

08000f1c <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <_FreqMenuHandler+0x38>)
 8000f22:	f008 fcdb 	bl	80098dc <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <_FreqMenuHandler+0x3c>)
 8000f28:	f006 f9e8 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000f2c:	f7ff fd80 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <_FreqMenuHandler+0x3c>)
 8000f32:	f006 f9ad 	bl	8007290 <HAL_TIM_Base_Start_IT>

	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fca8 	bl	800088c <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_FreqMenuHandler+0x40>)
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <_FreqMenuHandler+0x44>)
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = FREQ_ENCODER_MAX;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <_FreqMenuHandler+0x44>)
 8000f46:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8000f4c:	2303      	movs	r3, #3
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	0800aa24 	.word	0x0800aa24
 8000f58:	20000e98 	.word	0x20000e98
 8000f5c:	40013400 	.word	0x40013400
 8000f60:	40012c00 	.word	0x40012c00

08000f64 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <_FreqSetHandler+0x14>)
 8000f6a:	f008 fcb7 	bl	80098dc <puts>
#endif

	FreqO_ModifyOutput();
 8000f6e:	f000 f895 	bl	800109c <FreqO_ModifyOutput>

	//eNewEvent = evGreenBtn;
	return Freq_Menu_State;
 8000f72:	2303      	movs	r3, #3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	0800aa3c 	.word	0x0800aa3c

08000f7c <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <_ExitFreqMenuHandler+0x34>)
 8000f82:	f008 fcab 	bl	80098dc <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fc80 	bl	800088c <DM_ShowFreqSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <_ExitFreqMenuHandler+0x38>)
 8000f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <_ExitFreqMenuHandler+0x3c>)
 8000f96:	f006 f9b1 	bl	80072fc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000f9a:	f7ff fd49 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <_ExitFreqMenuHandler+0x3c>)
 8000fa0:	f006 f976 	bl	8007290 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <_ExitFreqMenuHandler+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800aa54 	.word	0x0800aa54
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	20000e98 	.word	0x20000e98
 8000fbc:	20000be9 	.word	0x20000be9

08000fc0 <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <EM_SetNewEvent+0x1c>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	7013      	strb	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000be9 	.word	0x20000be9

08000fe0 <BO_GetBiasPolarity>:
 *
 *
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <BO_GetBiasPolarity+0x14>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fa6b 	bl	80014d8 <SM_GetEncoderValue>
 8001002:	4603      	mov	r3, r0
 8001004:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001008:	d217      	bcs.n	800103a <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <BO_ModifyOutput+0x84>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 8001010:	2001      	movs	r0, #1
 8001012:	f000 fa61 	bl	80014d8 <SM_GetEncoderValue>
 8001016:	4603      	mov	r3, r0
 8001018:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4815      	ldr	r0, [pc, #84]	; (8001080 <BO_ModifyOutput+0x88>)
 800102a:	f003 fe99 	bl	8004d60 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800102e:	2201      	movs	r2, #1
 8001030:	2108      	movs	r1, #8
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f004 fd81 	bl	8005b3c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 800103a:	2001      	movs	r0, #1
 800103c:	f000 fa4c 	bl	80014d8 <SM_GetEncoderValue>
 8001040:	4603      	mov	r3, r0
 8001042:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001046:	d317      	bcc.n	8001078 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <BO_ModifyOutput+0x84>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fa42 	bl	80014d8 <SM_GetEncoderValue>
 8001054:	4603      	mov	r3, r0
 8001056:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8001062:	2200      	movs	r2, #0
 8001064:	2110      	movs	r1, #16
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <BO_ModifyOutput+0x88>)
 8001068:	f003 fe7a 	bl	8004d60 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f004 fd62 	bl	8005b3c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008
 8001080:	20000d14 	.word	0x20000d14

08001084 <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8001088:	2110      	movs	r1, #16
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <BO_GetOutputBias+0x14>)
 800108c:	f003 fea4 	bl	8004dd8 <HAL_DAC_GetValue>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000d14 	.word	0x20000d14

0800109c <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_MAG;
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fa19 	bl	80014d8 <SM_GetEncoderValue>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <FreqO_ModifyOutput+0x18>)
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40013400 	.word	0x40013400

080010b8 <FreqO_GetOutputFreq>:
 *
 *
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <FreqO_GetOutputFreq+0x14>)
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40013400 	.word	0x40013400

080010d0 <FreqO_ApplyPreset>:
 *
 *
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPreset)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	switch(pPreset)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d83a      	bhi.n	8001156 <FreqO_ApplyPreset+0x86>
 80010e0:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <FreqO_ApplyPreset+0x18>)
 80010e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e6:	bf00      	nop
 80010e8:	080010f9 	.word	0x080010f9
 80010ec:	08001111 	.word	0x08001111
 80010f0:	08001129 	.word	0x08001129
 80010f4:	08001141 	.word	0x08001141
	{
		case FPRESET_1HZ:
			TIM8->PSC = 0x0002;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <FreqO_ApplyPreset+0x94>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0xb5ff;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001100:	f24b 52ff 	movw	r2, #46591	; 0xb5ff
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <FreqO_ApplyPreset+0x98>)
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800110e:	e022      	b.n	8001156 <FreqO_ApplyPreset+0x86>
		case FPRESET_100HZ:
			TIM8->PSC = 0x0000;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001112:	2200      	movs	r2, #0
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x36bf;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001118:	f243 62bf 	movw	r2, #14015	; 0x36bf
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001120:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FreqO_ApplyPreset+0x98>)
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001126:	e016      	b.n	8001156 <FreqO_ApplyPreset+0x86>
		case FPRESET_1KHZ:
			TIM8->PSC = 0x0000;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <FreqO_ApplyPreset+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0570;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001130:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <FreqO_ApplyPreset+0x98>)
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800113e:	e00a      	b.n	8001156 <FreqO_ApplyPreset+0x86>
		case FPRESET_100KHZ:
			TIM8->PSC = 0x0000;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0008;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <FreqO_ApplyPreset+0x94>)
 8001148:	2208      	movs	r2, #8
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <FreqO_ApplyPreset+0x94>)
 800114e:	4a06      	ldr	r2, [pc, #24]	; (8001168 <FreqO_ApplyPreset+0x98>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001154:	bf00      	nop
	}
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40013400 	.word	0x40013400
 8001168:	40012c00 	.word	0x40012c00

0800116c <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8001172:	2001      	movs	r0, #1
 8001174:	f000 f9b0 	bl	80014d8 <SM_GetEncoderValue>
 8001178:	4603      	mov	r3, r0
 800117a:	2b17      	cmp	r3, #23
 800117c:	f200 8094 	bhi.w	80012a8 <FuncO_ModifyOutput+0x13c>
 8001180:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <FuncO_ModifyOutput+0x1c>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	080011e9 	.word	0x080011e9
 800118c:	080011e9 	.word	0x080011e9
 8001190:	080011e9 	.word	0x080011e9
 8001194:	08001209 	.word	0x08001209
 8001198:	08001209 	.word	0x08001209
 800119c:	08001209 	.word	0x08001209
 80011a0:	08001209 	.word	0x08001209
 80011a4:	08001229 	.word	0x08001229
 80011a8:	08001229 	.word	0x08001229
 80011ac:	08001229 	.word	0x08001229
 80011b0:	08001229 	.word	0x08001229
 80011b4:	08001249 	.word	0x08001249
 80011b8:	08001249 	.word	0x08001249
 80011bc:	08001249 	.word	0x08001249
 80011c0:	08001249 	.word	0x08001249
 80011c4:	08001269 	.word	0x08001269
 80011c8:	08001269 	.word	0x08001269
 80011cc:	08001269 	.word	0x08001269
 80011d0:	08001269 	.word	0x08001269
 80011d4:	08001289 	.word	0x08001289
 80011d8:	08001289 	.word	0x08001289
 80011dc:	08001289 	.word	0x08001289
 80011e0:	08001289 	.word	0x08001289
 80011e4:	08001289 	.word	0x08001289
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <FuncO_ModifyOutput+0x144>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80011ee:	2100      	movs	r1, #0
 80011f0:	4830      	ldr	r0, [pc, #192]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 80011f2:	f003 fd5f 	bl	8004cb4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80011f6:	2300      	movs	r3, #0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2378      	movs	r3, #120	; 0x78
 80011fc:	4a2e      	ldr	r2, [pc, #184]	; (80012b8 <FuncO_ModifyOutput+0x14c>)
 80011fe:	2100      	movs	r1, #0
 8001200:	482c      	ldr	r0, [pc, #176]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001202:	f003 fc95 	bl	8004b30 <HAL_DAC_Start_DMA>
			break;
 8001206:	e04f      	b.n	80012a8 <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <FuncO_ModifyOutput+0x144>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800120e:	2100      	movs	r1, #0
 8001210:	4828      	ldr	r0, [pc, #160]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001212:	f003 fd4f 	bl	8004cb4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001216:	2300      	movs	r3, #0
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2378      	movs	r3, #120	; 0x78
 800121c:	4a27      	ldr	r2, [pc, #156]	; (80012bc <FuncO_ModifyOutput+0x150>)
 800121e:	2100      	movs	r1, #0
 8001220:	4824      	ldr	r0, [pc, #144]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001222:	f003 fc85 	bl	8004b30 <HAL_DAC_Start_DMA>

			break;
 8001226:	e03f      	b.n	80012a8 <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <FuncO_ModifyOutput+0x144>)
 800122a:	2202      	movs	r2, #2
 800122c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800122e:	2100      	movs	r1, #0
 8001230:	4820      	ldr	r0, [pc, #128]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001232:	f003 fd3f 	bl	8004cb4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2378      	movs	r3, #120	; 0x78
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <FuncO_ModifyOutput+0x154>)
 800123e:	2100      	movs	r1, #0
 8001240:	481c      	ldr	r0, [pc, #112]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001242:	f003 fc75 	bl	8004b30 <HAL_DAC_Start_DMA>
			break;
 8001246:	e02f      	b.n	80012a8 <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <FuncO_ModifyOutput+0x144>)
 800124a:	2203      	movs	r2, #3
 800124c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800124e:	2100      	movs	r1, #0
 8001250:	4818      	ldr	r0, [pc, #96]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001252:	f003 fd2f 	bl	8004cb4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2378      	movs	r3, #120	; 0x78
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <FuncO_ModifyOutput+0x158>)
 800125e:	2100      	movs	r1, #0
 8001260:	4814      	ldr	r0, [pc, #80]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001262:	f003 fc65 	bl	8004b30 <HAL_DAC_Start_DMA>
			break;
 8001266:	e01f      	b.n	80012a8 <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <FuncO_ModifyOutput+0x144>)
 800126a:	2204      	movs	r2, #4
 800126c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001272:	f003 fd1f 	bl	8004cb4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2378      	movs	r3, #120	; 0x78
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <FuncO_ModifyOutput+0x15c>)
 800127e:	2100      	movs	r1, #0
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001282:	f003 fc55 	bl	8004b30 <HAL_DAC_Start_DMA>
			break;
 8001286:	e00f      	b.n	80012a8 <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <FuncO_ModifyOutput+0x144>)
 800128a:	2205      	movs	r2, #5
 800128c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800128e:	2100      	movs	r1, #0
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 8001292:	f003 fd0f 	bl	8004cb4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2378      	movs	r3, #120	; 0x78
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <FuncO_ModifyOutput+0x160>)
 800129e:	2100      	movs	r1, #0
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <FuncO_ModifyOutput+0x148>)
 80012a2:	f003 fc45 	bl	8004b30 <HAL_DAC_Start_DMA>
			break;
 80012a6:	bf00      	nop
	}
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000bea 	.word	0x20000bea
 80012b4:	20000d14 	.word	0x20000d14
 80012b8:	200003e4 	.word	0x200003e4
 80012bc:	200005c4 	.word	0x200005c4
 80012c0:	20000024 	.word	0x20000024
 80012c4:	20000204 	.word	0x20000204
 80012c8:	200007a4 	.word	0x200007a4
 80012cc:	20000984 	.word	0x20000984

080012d0 <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <FuncO_GetOutputMode+0x14>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000bea 	.word	0x20000bea

080012e8 <GO_ModifyOutput>:
 *
 *
 *
 */
void GO_ModifyOutput()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 80012ec:	2001      	movs	r0, #1
 80012ee:	f000 f8f3 	bl	80014d8 <SM_GetEncoderValue>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b1f      	cmp	r3, #31
 80012f6:	f200 80db 	bhi.w	80014b0 <GO_ModifyOutput+0x1c8>
 80012fa:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <GO_ModifyOutput+0x18>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	08001381 	.word	0x08001381
 8001304:	08001381 	.word	0x08001381
 8001308:	08001381 	.word	0x08001381
 800130c:	08001381 	.word	0x08001381
 8001310:	080013a7 	.word	0x080013a7
 8001314:	080013a7 	.word	0x080013a7
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a7 	.word	0x080013a7
 8001320:	080013cd 	.word	0x080013cd
 8001324:	080013cd 	.word	0x080013cd
 8001328:	080013cd 	.word	0x080013cd
 800132c:	080013cd 	.word	0x080013cd
 8001330:	080013f3 	.word	0x080013f3
 8001334:	080013f3 	.word	0x080013f3
 8001338:	080013f3 	.word	0x080013f3
 800133c:	080013f3 	.word	0x080013f3
 8001340:	08001419 	.word	0x08001419
 8001344:	08001419 	.word	0x08001419
 8001348:	08001419 	.word	0x08001419
 800134c:	08001419 	.word	0x08001419
 8001350:	0800143f 	.word	0x0800143f
 8001354:	0800143f 	.word	0x0800143f
 8001358:	0800143f 	.word	0x0800143f
 800135c:	0800143f 	.word	0x0800143f
 8001360:	08001465 	.word	0x08001465
 8001364:	08001465 	.word	0x08001465
 8001368:	08001465 	.word	0x08001465
 800136c:	08001465 	.word	0x08001465
 8001370:	0800148b 	.word	0x0800148b
 8001374:	0800148b 	.word	0x0800148b
 8001378:	0800148b 	.word	0x0800148b
 800137c:	0800148b 	.word	0x0800148b
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	484b      	ldr	r0, [pc, #300]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 8001386:	f004 fbd9 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2120      	movs	r1, #32
 800138e:	484a      	ldr	r0, [pc, #296]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 8001390:	f004 fbd4 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2110      	movs	r1, #16
 8001398:	4847      	ldr	r0, [pc, #284]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 800139a:	f004 fbcf 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 800139e:	4b47      	ldr	r3, [pc, #284]	; (80014bc <GO_ModifyOutput+0x1d4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
			break;
 80013a4:	e084      	b.n	80014b0 <GO_ModifyOutput+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2101      	movs	r1, #1
 80013aa:	4842      	ldr	r0, [pc, #264]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 80013ac:	f004 fbc6 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2120      	movs	r1, #32
 80013b4:	4840      	ldr	r0, [pc, #256]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 80013b6:	f004 fbc1 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2110      	movs	r1, #16
 80013be:	483e      	ldr	r0, [pc, #248]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 80013c0:	f004 fbbc 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 80013c4:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <GO_ModifyOutput+0x1d4>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
			break;
 80013ca:	e071      	b.n	80014b0 <GO_ModifyOutput+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2101      	movs	r1, #1
 80013d0:	4838      	ldr	r0, [pc, #224]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 80013d2:	f004 fbb3 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2120      	movs	r1, #32
 80013da:	4837      	ldr	r0, [pc, #220]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 80013dc:	f004 fbae 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4834      	ldr	r0, [pc, #208]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 80013e6:	f004 fba9 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 80013ea:	4b34      	ldr	r3, [pc, #208]	; (80014bc <GO_ModifyOutput+0x1d4>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	701a      	strb	r2, [r3, #0]
			break;
 80013f0:	e05e      	b.n	80014b0 <GO_ModifyOutput+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2101      	movs	r1, #1
 80013f6:	482f      	ldr	r0, [pc, #188]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 80013f8:	f004 fba0 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2120      	movs	r1, #32
 8001400:	482d      	ldr	r0, [pc, #180]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 8001402:	f004 fb9b 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2110      	movs	r1, #16
 800140a:	482b      	ldr	r0, [pc, #172]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 800140c:	f004 fb96 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <GO_ModifyOutput+0x1d4>)
 8001412:	2203      	movs	r2, #3
 8001414:	701a      	strb	r2, [r3, #0]
			break;
 8001416:	e04b      	b.n	80014b0 <GO_ModifyOutput+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2101      	movs	r1, #1
 800141c:	4825      	ldr	r0, [pc, #148]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 800141e:	f004 fb8d 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2120      	movs	r1, #32
 8001426:	4824      	ldr	r0, [pc, #144]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 8001428:	f004 fb88 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2110      	movs	r1, #16
 8001430:	4821      	ldr	r0, [pc, #132]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 8001432:	f004 fb83 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <GO_ModifyOutput+0x1d4>)
 8001438:	2204      	movs	r2, #4
 800143a:	701a      	strb	r2, [r3, #0]
			break;
 800143c:	e038      	b.n	80014b0 <GO_ModifyOutput+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2101      	movs	r1, #1
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 8001444:	f004 fb7a 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2120      	movs	r1, #32
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 800144e:	f004 fb75 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2110      	movs	r1, #16
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 8001458:	f004 fb70 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <GO_ModifyOutput+0x1d4>)
 800145e:	2205      	movs	r2, #5
 8001460:	701a      	strb	r2, [r3, #0]
			break;
 8001462:	e025      	b.n	80014b0 <GO_ModifyOutput+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2101      	movs	r1, #1
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 800146a:	f004 fb67 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2120      	movs	r1, #32
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 8001474:	f004 fb62 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2110      	movs	r1, #16
 800147c:	480e      	ldr	r0, [pc, #56]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 800147e:	f004 fb5d 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <GO_ModifyOutput+0x1d4>)
 8001484:	2206      	movs	r2, #6
 8001486:	701a      	strb	r2, [r3, #0]
			break;
 8001488:	e012      	b.n	80014b0 <GO_ModifyOutput+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2101      	movs	r1, #1
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <GO_ModifyOutput+0x1cc>)
 8001490:	f004 fb54 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2120      	movs	r1, #32
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 800149a:	f004 fb4f 	bl	8005b3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	2110      	movs	r1, #16
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <GO_ModifyOutput+0x1d0>)
 80014a4:	f004 fb4a 	bl	8005b3c <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <GO_ModifyOutput+0x1d4>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	701a      	strb	r2, [r3, #0]
			break;
 80014ae:	bf00      	nop
	}

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48000400 	.word	0x48000400
 80014b8:	48000800 	.word	0x48000800
 80014bc:	20000009 	.word	0x20000009

080014c0 <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <GO_GetOutputGain+0x14>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000009 	.word	0x20000009

080014d8 <SM_GetEncoderValue>:

#include "SignalManager.h"


uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <SM_GetEncoderValue+0x34>)
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <SM_GetEncoderValue+0x34>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	e002      	b.n	8001500 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SM_GetEncoderValue+0x34>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	b29b      	uxth	r3, r3
	}
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40012c00 	.word	0x40012c00

08001510 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f008 f973 	bl	8009814 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001530:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001534:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001556:	2204      	movs	r2, #4
 8001558:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001562:	2201      	movs	r2, #1
 8001564:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001568:	2201      	movs	r2, #1
 800156a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800158a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_ADC1_Init+0xe8>)
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <MX_ADC1_Init+0xe8>)
 800159a:	f001 ffc7 	bl	800352c <HAL_ADC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80015a4:	f000 ff40 	bl	8002428 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <MX_ADC1_Init+0xe8>)
 80015b4:	f002 fd50 	bl	8004058 <HAL_ADCEx_MultiModeConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015be:	f000 ff33 	bl	8002428 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_ADC1_Init+0xec>)
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c6:	2306      	movs	r3, #6
 80015c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ce:	237f      	movs	r3, #127	; 0x7f
 80015d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d2:	2304      	movs	r3, #4
 80015d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_ADC1_Init+0xe8>)
 80015e0:	f002 f964 	bl	80038ac <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80015ea:	f000 ff1d 	bl	8002428 <Error_Handler>
  }

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000c10 	.word	0x20000c10
 80015fc:	0c900008 	.word	0x0c900008

08001600 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d14f      	bne.n	80016c2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_ADC_MspInit+0xcc>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a29      	ldr	r2, [pc, #164]	; (80016cc <HAL_ADC_MspInit+0xcc>)
 8001628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_ADC_MspInit+0xcc>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_ADC_MspInit+0xcc>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a23      	ldr	r2, [pc, #140]	; (80016cc <HAL_ADC_MspInit+0xcc>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_ADC_MspInit+0xcc>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001652:	2304      	movs	r3, #4
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001656:	2303      	movs	r3, #3
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f004 f8ce 	bl	8005808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_ADC_MspInit+0xd4>)
 8001670:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 8001674:	2205      	movs	r2, #5
 8001676:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 8001694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001698:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 800169c:	2220      	movs	r2, #32
 800169e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016a6:	480a      	ldr	r0, [pc, #40]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 80016a8:	f003 fde2 	bl	8005270 <HAL_DMA_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80016b2:	f000 feb9 	bl	8002428 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_ADC_MspInit+0xd0>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	20000c7c 	.word	0x20000c7c
 80016d4:	40020008 	.word	0x40020008

080016d8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_COMP1_Init+0x44>)
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <MX_COMP1_Init+0x48>)
 80016e0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_COMP1_Init+0x44>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_COMP1_Init+0x44>)
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <MX_COMP1_Init+0x4c>)
 80016ec:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_COMP1_Init+0x44>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_COMP1_Init+0x44>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_COMP1_Init+0x44>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_COMP1_Init+0x44>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_COMP1_Init+0x44>)
 8001708:	f002 fefa 	bl	8004500 <HAL_COMP_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8001712:	f000 fe89 	bl	8002428 <Error_Handler>
  }

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000cdc 	.word	0x20000cdc
 8001720:	40010200 	.word	0x40010200
 8001724:	00800030 	.word	0x00800030

08001728 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_COMP_MspInit+0x5c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d118      	bne.n	800177c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_COMP_MspInit+0x60>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_COMP_MspInit+0x60>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_COMP_MspInit+0x60>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001762:	2302      	movs	r3, #2
 8001764:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001766:	2303      	movs	r3, #3
 8001768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f004 f846 	bl	8005808 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010200 	.word	0x40010200
 8001788:	40021000 	.word	0x40021000

0800178c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001792:	463b      	mov	r3, r7
 8001794:	2230      	movs	r2, #48	; 0x30
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f008 f83b 	bl	8009814 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_DAC1_Init+0x8c>)
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <MX_DAC1_Init+0x90>)
 80017a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017a4:	481c      	ldr	r0, [pc, #112]	; (8001818 <MX_DAC1_Init+0x8c>)
 80017a6:	f003 f94e 	bl	8004a46 <HAL_DAC_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017b0:	f000 fe3a 	bl	8002428 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80017b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80017c6:	2306      	movs	r3, #6
 80017c8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <MX_DAC1_Init+0x8c>)
 80017e2:	f003 fb0f 	bl	8004e04 <HAL_DAC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80017ec:	f000 fe1c 	bl	8002428 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	2210      	movs	r2, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_DAC1_Init+0x8c>)
 8001800:	f003 fb00 	bl	8004e04 <HAL_DAC_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800180a:	f000 fe0d 	bl	8002428 <Error_Handler>
  }

}
 800180e:	bf00      	nop
 8001810:	3730      	adds	r7, #48	; 0x30
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000d14 	.word	0x20000d14
 800181c:	50000800 	.word	0x50000800

08001820 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2230      	movs	r2, #48	; 0x30
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f007 fff1 	bl	8009814 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_DAC2_Init+0x6c>)
 8001834:	4a16      	ldr	r2, [pc, #88]	; (8001890 <MX_DAC2_Init+0x70>)
 8001836:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001838:	4814      	ldr	r0, [pc, #80]	; (800188c <MX_DAC2_Init+0x6c>)
 800183a:	f003 f904 	bl	8004a46 <HAL_DAC_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001844:	f000 fdf0 	bl	8002428 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800184c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800185a:	2306      	movs	r3, #6
 800185c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_DAC2_Init+0x6c>)
 8001876:	f003 fac5 	bl	8004e04 <HAL_DAC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8001880:	f000 fdd2 	bl	8002428 <Error_Handler>
  }

}
 8001884:	bf00      	nop
 8001886:	3730      	adds	r7, #48	; 0x30
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000d00 	.word	0x20000d00
 8001890:	50000c00 	.word	0x50000c00

08001894 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_DAC_MspInit+0x178>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d150      	bne.n	8001958 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80018b6:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a55      	ldr	r2, [pc, #340]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c2:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a4f      	ldr	r2, [pc, #316]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018e6:	2330      	movs	r3, #48	; 0x30
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f003 ff84 	bl	8005808 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001900:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001902:	4a45      	ldr	r2, [pc, #276]	; (8001a18 <HAL_DAC_MspInit+0x184>)
 8001904:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001908:	2206      	movs	r2, #6
 800190a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 800190e:	2210      	movs	r2, #16
 8001910:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001918:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800192c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001930:	2220      	movs	r2, #32
 8001932:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001934:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800193a:	4836      	ldr	r0, [pc, #216]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 800193c:	f003 fc98 	bl	8005270 <HAL_DMA_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001946:	f000 fd6f 	bl	8002428 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a31      	ldr	r2, [pc, #196]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	4a30      	ldr	r2, [pc, #192]	; (8001a14 <HAL_DAC_MspInit+0x180>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001956:	e054      	b.n	8001a02 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2f      	ldr	r2, [pc, #188]	; (8001a1c <HAL_DAC_MspInit+0x188>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d14f      	bne.n	8001a02 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_DAC_MspInit+0x17c>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001992:	2340      	movs	r3, #64	; 0x40
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f003 ff2e 	bl	8005808 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_DAC_MspInit+0x190>)
 80019b0:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019b4:	2229      	movs	r2, #41	; 0x29
 80019b6:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019ba:	2210      	movs	r2, #16
 80019bc:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019dc:	2220      	movs	r2, #32
 80019de:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019e8:	f003 fc42 	bl	8005270 <HAL_DMA_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80019f2:	f000 fd19 	bl	8002428 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_DAC_MspInit+0x18c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001a02:	bf00      	nop
 8001a04:	3730      	adds	r7, #48	; 0x30
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	50000800 	.word	0x50000800
 8001a10:	40021000 	.word	0x40021000
 8001a14:	20000d28 	.word	0x20000d28
 8001a18:	4002001c 	.word	0x4002001c
 8001a1c:	50000c00 	.word	0x50000c00
 8001a20:	20000d88 	.word	0x20000d88
 8001a24:	40020030 	.word	0x40020030

08001a28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_DMA_Init+0x70>)
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <MX_DMA_Init+0x70>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6493      	str	r3, [r2, #72]	; 0x48
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_DMA_Init+0x70>)
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_DMA_Init+0x70>)
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <MX_DMA_Init+0x70>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6493      	str	r3, [r2, #72]	; 0x48
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_DMA_Init+0x70>)
 8001a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2101      	movs	r1, #1
 8001a62:	200b      	movs	r0, #11
 8001a64:	f002 ffbb 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a68:	200b      	movs	r0, #11
 8001a6a:	f002 ffd2 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	200c      	movs	r0, #12
 8001a74:	f002 ffb3 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a78:	200c      	movs	r0, #12
 8001a7a:	f002 ffca 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	200d      	movs	r0, #13
 8001a84:	f002 ffab 	bl	80049de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a88:	200d      	movs	r0, #13
 8001a8a:	f002 ffc2 	bl	8004a12 <HAL_NVIC_EnableIRQ>

}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <update_dc_bias_sweep+0x88>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <update_dc_bias_sweep+0x1a>
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001ab2:	801a      	strh	r2, [r3, #0]
 8001ab4:	e005      	b.n	8001ac2 <update_dc_bias_sweep+0x26>
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001ac0:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <update_dc_bias_sweep+0x90>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <update_dc_bias_sweep+0x3e>
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <update_dc_bias_sweep+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e002      	b.n	8001ae0 <update_dc_bias_sweep+0x44>
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <update_dc_bias_sweep+0x90>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <update_dc_bias_sweep+0x52>
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <update_dc_bias_sweep+0x88>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af6:	d302      	bcc.n	8001afe <update_dc_bias_sweep+0x62>
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <update_dc_bias_sweep+0x88>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <update_dc_bias_sweep+0x90>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	2108      	movs	r1, #8
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0c:	f004 f816 	bl	8005b3c <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <update_dc_bias_sweep+0x8c>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2110      	movs	r1, #16
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <update_dc_bias_sweep+0x94>)
 8001b1a:	f003 f921 	bl	8004d60 <HAL_DAC_SetValue>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000000c 	.word	0x2000000c
 8001b28:	20000bec 	.word	0x20000bec
 8001b2c:	20000bf0 	.word	0x20000bf0
 8001b30:	20000d14 	.word	0x20000d14

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	; (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	43db      	mvns	r3, r3
 8001c66:	ea02 0103 	and.w	r1, r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	409a      	lsls	r2, r3
 8001c88:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	430a      	orrs	r2, r1
 8001c92:	3302      	adds	r3, #2
 8001c94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	613b      	str	r3, [r7, #16]
  return result;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2103      	movs	r1, #3
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	61bb      	str	r3, [r7, #24]
  return result;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	601a      	str	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b089      	sub	sp, #36	; 0x24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	613b      	str	r3, [r7, #16]
  return result;
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	401a      	ands	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	61bb      	str	r3, [r7, #24]
  return result;
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	431a      	orrs	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	60da      	str	r2, [r3, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3724      	adds	r7, #36	; 0x24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000

08001db0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001dd2:	2004      	movs	r0, #4
 8001dd4:	f7ff ffd4 	bl	8001d80 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001dd8:	2020      	movs	r0, #32
 8001dda:	f7ff ffd1 	bl	8001d80 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff ffce 	bl	8001d80 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001de4:	2002      	movs	r0, #2
 8001de6:	f7ff ffcb 	bl	8001d80 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001dea:	2108      	movs	r1, #8
 8001dec:	48d3      	ldr	r0, [pc, #844]	; (800213c <MX_GPIO_Init+0x38c>)
 8001dee:	f7ff ffb9 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001df2:	2108      	movs	r1, #8
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f7ff ffb4 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	48cf      	ldr	r0, [pc, #828]	; (800213c <MX_GPIO_Init+0x38c>)
 8001e00:	f7ff ffb0 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001e04:	2120      	movs	r1, #32
 8001e06:	48cd      	ldr	r0, [pc, #820]	; (800213c <MX_GPIO_Init+0x38c>)
 8001e08:	f7ff ffac 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	48cc      	ldr	r0, [pc, #816]	; (8002140 <MX_GPIO_Init+0x390>)
 8001e10:	f7ff ffa8 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e18:	48c8      	ldr	r0, [pc, #800]	; (800213c <MX_GPIO_Init+0x38c>)
 8001e1a:	f7ff ffa3 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e22:	48c6      	ldr	r0, [pc, #792]	; (800213c <MX_GPIO_Init+0x38c>)
 8001e24:	f7ff ff9e 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001e28:	2140      	movs	r1, #64	; 0x40
 8001e2a:	48c5      	ldr	r0, [pc, #788]	; (8002140 <MX_GPIO_Init+0x390>)
 8001e2c:	f7ff ff9a 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	48c3      	ldr	r0, [pc, #780]	; (8002140 <MX_GPIO_Init+0x390>)
 8001e34:	f7ff ff96 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3c:	48c0      	ldr	r0, [pc, #768]	; (8002140 <MX_GPIO_Init+0x390>)
 8001e3e:	f7ff ff91 	bl	8001d64 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001e42:	49c0      	ldr	r1, [pc, #768]	; (8002144 <MX_GPIO_Init+0x394>)
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7ff feff 	bl	8001c48 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001e4a:	49bf      	ldr	r1, [pc, #764]	; (8002148 <MX_GPIO_Init+0x398>)
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f7ff fefb 	bl	8001c48 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001e52:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001e56:	2005      	movs	r0, #5
 8001e58:	f7ff fef6 	bl	8001c48 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001e5c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001e60:	2005      	movs	r0, #5
 8001e62:	f7ff fef1 	bl	8001c48 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001e66:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f7ff feec 	bl	8001c48 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e74:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e82:	2302      	movs	r3, #2
 8001e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f006 faab 	bl	80083e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e96:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f006 fa9a 	bl	80083e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f006 fa8a 	bl	80083e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 fa7a 	bl	80083e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001f04:	2302      	movs	r3, #2
 8001f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f006 fa6a 	bl	80083e8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f1a:	4888      	ldr	r0, [pc, #544]	; (800213c <MX_GPIO_Init+0x38c>)
 8001f1c:	f7ff fef3 	bl	8001d06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f26:	4885      	ldr	r0, [pc, #532]	; (800213c <MX_GPIO_Init+0x38c>)
 8001f28:	f7ff feed 	bl	8001d06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4886      	ldr	r0, [pc, #536]	; (800214c <MX_GPIO_Init+0x39c>)
 8001f32:	f7ff fee8 	bl	8001d06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001f36:	2201      	movs	r2, #1
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4884      	ldr	r0, [pc, #528]	; (800214c <MX_GPIO_Init+0x39c>)
 8001f3c:	f7ff fee3 	bl	8001d06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2104      	movs	r1, #4
 8001f44:	487d      	ldr	r0, [pc, #500]	; (800213c <MX_GPIO_Init+0x38c>)
 8001f46:	f7ff fede 	bl	8001d06 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f50:	487a      	ldr	r0, [pc, #488]	; (800213c <MX_GPIO_Init+0x38c>)
 8001f52:	f7ff fea9 	bl	8001ca8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5c:	4877      	ldr	r0, [pc, #476]	; (800213c <MX_GPIO_Init+0x38c>)
 8001f5e:	f7ff fea3 	bl	8001ca8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2101      	movs	r1, #1
 8001f66:	4879      	ldr	r0, [pc, #484]	; (800214c <MX_GPIO_Init+0x39c>)
 8001f68:	f7ff fe9e 	bl	8001ca8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4876      	ldr	r0, [pc, #472]	; (800214c <MX_GPIO_Init+0x39c>)
 8001f72:	f7ff fe99 	bl	8001ca8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4870      	ldr	r0, [pc, #448]	; (800213c <MX_GPIO_Init+0x38c>)
 8001f7c:	f7ff fe94 	bl	8001ca8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001f80:	2308      	movs	r3, #8
 8001f82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f84:	2301      	movs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f90:	2302      	movs	r3, #2
 8001f92:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4868      	ldr	r0, [pc, #416]	; (800213c <MX_GPIO_Init+0x38c>)
 8001f9a:	f006 fc18 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f006 fc08 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4859      	ldr	r0, [pc, #356]	; (800213c <MX_GPIO_Init+0x38c>)
 8001fd8:	f006 fbf9 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4851      	ldr	r0, [pc, #324]	; (800213c <MX_GPIO_Init+0x38c>)
 8001ff6:	f006 fbea 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ffe:	2301      	movs	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	4619      	mov	r1, r3
 8002012:	484b      	ldr	r0, [pc, #300]	; (8002140 <MX_GPIO_Init+0x390>)
 8002014:	f006 fbdb 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8002018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800201e:	2301      	movs	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4842      	ldr	r0, [pc, #264]	; (800213c <MX_GPIO_Init+0x38c>)
 8002034:	f006 fbcb 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8002038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800203e:	2301      	movs	r3, #1
 8002040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4619      	mov	r1, r3
 8002052:	483a      	ldr	r0, [pc, #232]	; (800213c <MX_GPIO_Init+0x38c>)
 8002054:	f006 fbbb 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800205c:	2301      	movs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4833      	ldr	r0, [pc, #204]	; (8002140 <MX_GPIO_Init+0x390>)
 8002072:	f006 fbac 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800207a:	2301      	movs	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	482c      	ldr	r0, [pc, #176]	; (8002140 <MX_GPIO_Init+0x390>)
 8002090:	f006 fb9d 	bl	80087ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8002094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002098:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800209a:	2301      	movs	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4824      	ldr	r0, [pc, #144]	; (8002140 <MX_GPIO_Init+0x390>)
 80020b0:	f006 fb8d 	bl	80087ce <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020b4:	f7ff fd3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fd8e 	bl	8001be0 <NVIC_EncodePriority>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4619      	mov	r1, r3
 80020c8:	2006      	movs	r0, #6
 80020ca:	f7ff fd5f 	bl	8001b8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80020ce:	2006      	movs	r0, #6
 80020d0:	f7ff fd3e 	bl	8001b50 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020d4:	f7ff fd2e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 80020d8:	4603      	mov	r3, r0
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fd7e 	bl	8001be0 <NVIC_EncodePriority>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4619      	mov	r1, r3
 80020e8:	2007      	movs	r0, #7
 80020ea:	f7ff fd4f 	bl	8001b8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80020ee:	2007      	movs	r0, #7
 80020f0:	f7ff fd2e 	bl	8001b50 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020f4:	f7ff fd1e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fd6e 	bl	8001be0 <NVIC_EncodePriority>
 8002104:	4603      	mov	r3, r0
 8002106:	4619      	mov	r1, r3
 8002108:	2008      	movs	r0, #8
 800210a:	f7ff fd3f 	bl	8001b8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800210e:	2008      	movs	r0, #8
 8002110:	f7ff fd1e 	bl	8001b50 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002114:	f7ff fd0e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8002118:	4603      	mov	r3, r0
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fd5e 	bl	8001be0 <NVIC_EncodePriority>
 8002124:	4603      	mov	r3, r0
 8002126:	4619      	mov	r1, r3
 8002128:	2028      	movs	r0, #40	; 0x28
 800212a:	f7ff fd2f 	bl	8001b8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800212e:	2028      	movs	r0, #40	; 0x28
 8002130:	f7ff fd0e 	bl	8001b50 <__NVIC_EnableIRQ>

}
 8002134:	bf00      	nop
 8002136:	3728      	adds	r7, #40	; 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	e009      	b.n	8002150 <MX_GPIO_Init+0x3a0>
 800213c:	48000800 	.word	0x48000800
 8002140:	48000400 	.word	0x48000400
 8002144:	0f000003 	.word	0x0f000003
 8002148:	f0000003 	.word	0xf0000003
 800214c:	48001400 	.word	0x48001400
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop

08002154 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800215c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002160:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800216c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002170:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002174:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800217c:	e000      	b.n	8002180 <ITM_SendChar+0x2c>
    {
      __NOP();
 800217e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002180:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f9      	beq.n	800217e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800218a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e009      	b.n	80021cc <_write+0x2a>
    ITM_SendChar((*ptr++));
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ffc7 	bl	8002154 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf1      	blt.n	80021b8 <_write+0x16>
  return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	// do something
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021fa:	f000 ff42 	bl	8003082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021fe:	f000 f8a5 	bl	800234c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002202:	f7ff fdd5 	bl	8001db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002206:	f7ff fc0f 	bl	8001a28 <MX_DMA_Init>
  MX_DAC1_Init();
 800220a:	f7ff fabf 	bl	800178c <MX_DAC1_Init>
  MX_DAC2_Init();
 800220e:	f7ff fb07 	bl	8001820 <MX_DAC2_Init>
  MX_ADC1_Init();
 8002212:	f7ff f97d 	bl	8001510 <MX_ADC1_Init>
  MX_COMP1_Init();
 8002216:	f7ff fa5f 	bl	80016d8 <MX_COMP1_Init>
  MX_TIM2_Init();
 800221a:	f000 fc29 	bl	8002a70 <MX_TIM2_Init>
  MX_TIM17_Init();
 800221e:	f000 fdc1 	bl	8002da4 <MX_TIM17_Init>
  MX_SPI3_Init();
 8002222:	f000 f93f 	bl	80024a4 <MX_SPI3_Init>
  MX_RNG_Init();
 8002226:	f000 f92f 	bl	8002488 <MX_RNG_Init>
  MX_TIM1_Init();
 800222a:	f000 fbb1 	bl	8002990 <MX_TIM1_Init>
  MX_TIM8_Init();
 800222e:	f000 fcd9 	bl	8002be4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8002232:	f000 fd91 	bl	8002d58 <MX_TIM16_Init>
  MX_TIM15_Init();
 8002236:	f000 fd3d 	bl	8002cb4 <MX_TIM15_Init>
  MX_TIM5_Init();
 800223a:	f000 fc83 	bl	8002b44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800223e:	2300      	movs	r3, #0
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2378      	movs	r3, #120	; 0x78
 8002244:	4a34      	ldr	r2, [pc, #208]	; (8002318 <main+0x124>)
 8002246:	2100      	movs	r1, #0
 8002248:	4834      	ldr	r0, [pc, #208]	; (800231c <main+0x128>)
 800224a:	f002 fc71 	bl	8004b30 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800224e:	2110      	movs	r1, #16
 8002250:	4832      	ldr	r0, [pc, #200]	; (800231c <main+0x128>)
 8002252:	f002 fc1a 	bl	8004a8a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8002256:	2300      	movs	r3, #0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2378      	movs	r3, #120	; 0x78
 800225c:	4a30      	ldr	r2, [pc, #192]	; (8002320 <main+0x12c>)
 800225e:	2100      	movs	r1, #0
 8002260:	4830      	ldr	r0, [pc, #192]	; (8002324 <main+0x130>)
 8002262:	f002 fc65 	bl	8004b30 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8002266:	4830      	ldr	r0, [pc, #192]	; (8002328 <main+0x134>)
 8002268:	f004 ffe4 	bl	8007234 <HAL_TIM_Base_Start>
  TIM8->ARR = 14015;			// 100Hz
 800226c:	4b2f      	ldr	r3, [pc, #188]	; (800232c <main+0x138>)
 800226e:	f243 62bf 	movw	r2, #14015	; 0x36bf
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM8->ARR = 65535;
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	2108      	movs	r1, #8
 8002278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227c:	f003 fc5e 	bl	8005b3c <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	2101      	movs	r1, #1
 8002284:	482a      	ldr	r0, [pc, #168]	; (8002330 <main+0x13c>)
 8002286:	f003 fc59 	bl	8005b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	2120      	movs	r1, #32
 800228e:	4829      	ldr	r0, [pc, #164]	; (8002334 <main+0x140>)
 8002290:	f003 fc54 	bl	8005b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	2110      	movs	r1, #16
 8002298:	4826      	ldr	r0, [pc, #152]	; (8002334 <main+0x140>)
 800229a:	f003 fc4f 	bl	8005b3c <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a4:	4823      	ldr	r0, [pc, #140]	; (8002334 <main+0x140>)
 80022a6:	f003 fc49 	bl	8005b3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b0:	4820      	ldr	r0, [pc, #128]	; (8002334 <main+0x140>)
 80022b2:	f003 fc43 	bl	8005b3c <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	2108      	movs	r1, #8
 80022ba:	481e      	ldr	r0, [pc, #120]	; (8002334 <main+0x140>)
 80022bc:	f003 fc3e 	bl	8005b3c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80022c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ca:	f023 0307 	bic.w	r3, r3, #7
 80022ce:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80022d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022da:	f043 0305 	orr.w	r3, r3, #5
 80022de:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80022e0:	4815      	ldr	r0, [pc, #84]	; (8002338 <main+0x144>)
 80022e2:	f004 ffd5 	bl	8007290 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80022e6:	4815      	ldr	r0, [pc, #84]	; (800233c <main+0x148>)
 80022e8:	f004 ffa4 	bl	8007234 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <main+0x14c>)
 80022ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <main+0x14c>)
 80022f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80022fc:	f7fd ffe0 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8002300:	f7fd ffec 	bl	80002dc <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 8002304:	480f      	ldr	r0, [pc, #60]	; (8002344 <main+0x150>)
 8002306:	f004 ffc3 	bl	8007290 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 800230a:	480f      	ldr	r0, [pc, #60]	; (8002348 <main+0x154>)
 800230c:	f004 ff92 	bl	8007234 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8002310:	f7fe fc3a 	bl	8000b88 <EM_ProcessEvent>
 8002314:	e7fc      	b.n	8002310 <main+0x11c>
 8002316:	bf00      	nop
 8002318:	200003e4 	.word	0x200003e4
 800231c:	20000d14 	.word	0x20000d14
 8002320:	200007a4 	.word	0x200007a4
 8002324:	20000d00 	.word	0x20000d00
 8002328:	20000e4c 	.word	0x20000e4c
 800232c:	40013400 	.word	0x40013400
 8002330:	48000400 	.word	0x48000400
 8002334:	48000800 	.word	0x48000800
 8002338:	20000fc8 	.word	0x20000fc8
 800233c:	20000f7c 	.word	0x20000f7c
 8002340:	40001000 	.word	0x40001000
 8002344:	20000e98 	.word	0x20000e98
 8002348:	20000f30 	.word	0x20000f30

0800234c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0a8      	sub	sp, #160	; 0xa0
 8002350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002356:	2238      	movs	r2, #56	; 0x38
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f007 fa5a 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002370:	463b      	mov	r3, r7
 8002372:	2254      	movs	r2, #84	; 0x54
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f007 fa4c 	bl	8009814 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800237c:	2000      	movs	r0, #0
 800237e:	f003 fbf5 	bl	8005b6c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002382:	2322      	movs	r3, #34	; 0x22
 8002384:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800238c:	2340      	movs	r3, #64	; 0x40
 800238e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002390:	2301      	movs	r3, #1
 8002392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002396:	2302      	movs	r3, #2
 8002398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80023a2:	2302      	movs	r3, #2
 80023a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80023a8:	232a      	movs	r3, #42	; 0x2a
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80023b4:	2304      	movs	r3, #4
 80023b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023ba:	2302      	movs	r3, #2
 80023bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fc75 	bl	8005cb4 <HAL_RCC_OscConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80023d0:	f000 f82a 	bl	8002428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d4:	230f      	movs	r3, #15
 80023d6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d8:	2303      	movs	r3, #3
 80023da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e4:	2300      	movs	r3, #0
 80023e6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80023e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023ec:	2108      	movs	r1, #8
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 ff78 	bl	80062e4 <HAL_RCC_ClockConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80023fa:	f000 f815 	bl	8002428 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80023fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002402:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002404:	2300      	movs	r3, #0
 8002406:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002408:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800240c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240e:	463b      	mov	r3, r7
 8002410:	4618      	mov	r0, r3
 8002412:	f004 f957 	bl	80066c4 <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800241c:	f000 f804 	bl	8002428 <Error_Handler>
  }
}
 8002420:	bf00      	nop
 8002422:	37a0      	adds	r7, #160	; 0xa0
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f043 0204 	orr.w	r2, r3, #4
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <LL_AHB2_GRP1_EnableClock>:
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800246e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4013      	ands	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000

08002488 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800248c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002490:	f7ff ffe2 	bl	8002458 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <MX_RNG_Init+0x18>)
 8002496:	f7ff ffce 	bl	8002436 <LL_RNG_Enable>

}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	50060800 	.word	0x50060800

080024a4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_SPI3_Init+0x74>)
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <MX_SPI3_Init+0x78>)
 80024ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_SPI3_Init+0x74>)
 80024b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <MX_SPI3_Init+0x74>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <MX_SPI3_Init+0x74>)
 80024be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_SPI3_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MX_SPI3_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_SPI3_Init+0x74>)
 80024d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_SPI3_Init+0x74>)
 80024da:	2210      	movs	r2, #16
 80024dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_SPI3_Init+0x74>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_SPI3_Init+0x74>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_SPI3_Init+0x74>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_SPI3_Init+0x74>)
 80024f2:	2207      	movs	r2, #7
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <MX_SPI3_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_SPI3_Init+0x74>)
 80024fe:	2208      	movs	r2, #8
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_SPI3_Init+0x74>)
 8002504:	f004 fb2a 	bl	8006b5c <HAL_SPI_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800250e:	f7ff ff8b 	bl	8002428 <Error_Handler>
  }

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000de8 	.word	0x20000de8
 800251c:	40003c00 	.word	0x40003c00

08002520 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_SPI_MspInit+0x7c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d128      	bne.n	8002594 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_SPI_MspInit+0x80>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_SPI_MspInit+0x80>)
 8002548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_SPI_MspInit+0x80>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_SPI_MspInit+0x80>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_SPI_MspInit+0x80>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_SPI_MspInit+0x80>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002572:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002584:	2306      	movs	r3, #6
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <HAL_SPI_MspInit+0x84>)
 8002590:	f003 f93a 	bl	8005808 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40003c00 	.word	0x40003c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	48000800 	.word	0x48000800

080025a8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80025b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b6:	6093      	str	r3, [r2, #8]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40007000 	.word	0x40007000

080025c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_MspInit+0x44>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_MspInit+0x44>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6613      	str	r3, [r2, #96]	; 0x60
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_MspInit+0x44>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_MspInit+0x44>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_MspInit+0x44>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_MspInit+0x44>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80025fe:	f7ff ffd3 	bl	80025a8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4013      	ands	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d101      	bne.n	800262a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40010400 	.word	0x40010400

0800263c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6153      	str	r3, [r2, #20]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40010400 	.word	0x40010400

0800265c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b0:	f000 fd3a 	bl	8003128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evRedBtn);
 80026bc:	2004      	movs	r0, #4
 80026be:	f7fe fc7f 	bl	8000fc0 <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7ff ffa4 	bl	8002610 <LL_EXTI_IsActiveFlag_0_31>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff ffb4 	bl	800263c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evGreenBtn);
 80026dc:	2002      	movs	r0, #2
 80026de:	f7fe fc6f 	bl	8000fc0 <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80026e2:	2002      	movs	r0, #2
 80026e4:	f7ff ff94 	bl	8002610 <LL_EXTI_IsActiveFlag_0_31>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7ff ffa4 	bl	800263c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 80026fc:	2006      	movs	r0, #6
 80026fe:	f7fe fc5f 	bl	8000fc0 <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8002702:	2004      	movs	r0, #4
 8002704:	f7ff ff84 	bl	8002610 <LL_EXTI_IsActiveFlag_0_31>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800270e:	2004      	movs	r0, #4
 8002710:	f7ff ff94 	bl	800263c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}

08002718 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <DMA1_Channel1_IRQHandler+0x10>)
 800271e:	f002 ff23 	bl	8005568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000c7c 	.word	0x20000c7c

0800272c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <DMA1_Channel2_IRQHandler+0x10>)
 8002732:	f002 ff19 	bl	8005568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000d28 	.word	0x20000d28

08002740 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <DMA1_Channel3_IRQHandler+0x10>)
 8002746:	f002 ff0f 	bl	8005568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000d88 	.word	0x20000d88

08002754 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8002758:	f7fd fdde 	bl	8000318 <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 800275c:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002762:	8812      	ldrh	r2, [r2, #0]
 8002764:	4293      	cmp	r3, r2
 8002766:	d305      	bcc.n	8002774 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800276e:	8812      	ldrh	r2, [r2, #0]
 8002770:	4293      	cmp	r3, r2
 8002772:	d902      	bls.n	800277a <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8002774:	2005      	movs	r0, #5
 8002776:	f7fe fc23 	bl	8000fc0 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002782:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8002786:	f004 fe8e 	bl	80074a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 800278c:	f004 fe8b 	bl	80074a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40012c00 	.word	0x40012c00
 8002798:	20000bf4 	.word	0x20000bf4
 800279c:	20000f7c 	.word	0x20000f7c
 80027a0:	20000e98 	.word	0x20000e98

080027a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80027a8:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80027b2:	f004 fe78 	bl	80074a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <TIM1_UP_TIM16_IRQHandler+0x28>)
 80027b8:	f004 fe75 	bl	80074a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000c04 	.word	0x20000c04
 80027c4:	0800aa70 	.word	0x0800aa70
 80027c8:	20000f7c 	.word	0x20000f7c
 80027cc:	20001014 	.word	0x20001014

080027d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80027d4:	f7ff f962 	bl	8001a9c <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80027da:	f004 fe64 	bl	80074a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80027de:	4803      	ldr	r0, [pc, #12]	; (80027ec <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80027e0:	f004 fe61 	bl	80074a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000f7c 	.word	0x20000f7c
 80027ec:	20000ee4 	.word	0x20000ee4

080027f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <TIM2_IRQHandler+0x10>)
 80027f6:	f004 fe56 	bl	80074a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000fc8 	.word	0x20000fc8

08002804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8002808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800280c:	4815      	ldr	r0, [pc, #84]	; (8002864 <EXTI15_10_IRQHandler+0x60>)
 800280e:	f003 f97d 	bl	8005b0c <HAL_GPIO_ReadPin>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evYellowBtn);
 8002818:	2003      	movs	r0, #3
 800281a:	f7fe fbd1 	bl	8000fc0 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800281e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002822:	4810      	ldr	r0, [pc, #64]	; (8002864 <EXTI15_10_IRQHandler+0x60>)
 8002824:	f003 f972 	bl	8005b0c <HAL_GPIO_ReadPin>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evBlueBtn);
 800282e:	2001      	movs	r0, #1
 8002830:	f7fe fbc6 	bl	8000fc0 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002834:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002838:	f7ff feea 	bl	8002610 <LL_EXTI_IsActiveFlag_0_31>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8002842:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002846:	f7ff fef9 	bl	800263c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800284a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800284e:	f7ff fedf 	bl	8002610 <LL_EXTI_IsActiveFlag_0_31>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002858:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800285c:	f7ff feee 	bl	800263c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	48000800 	.word	0x48000800

08002868 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e00a      	b.n	8002890 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800287a:	f3af 8000 	nop.w
 800287e:	4601      	mov	r1, r0
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	60ba      	str	r2, [r7, #8]
 8002886:	b2ca      	uxtb	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	dbf0      	blt.n	800287a <_read+0x12>
	}

return len;
 8002898:	687b      	ldr	r3, [r7, #4]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	return -1;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ca:	605a      	str	r2, [r3, #4]
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_isatty>:

int _isatty(int file)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
	return 1;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
	return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x50>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <_sbrk+0x16>
		heap_end = &end;
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <_sbrk+0x50>)
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <_sbrk+0x54>)
 8002920:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <_sbrk+0x50>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <_sbrk+0x50>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	466a      	mov	r2, sp
 8002932:	4293      	cmp	r3, r2
 8002934:	d907      	bls.n	8002946 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002936:	f006 ff43 	bl	80097c0 <__errno>
 800293a:	4602      	mov	r2, r0
 800293c:	230c      	movs	r3, #12
 800293e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002944:	e006      	b.n	8002954 <_sbrk+0x48>
	}

	heap_end += incr;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <_sbrk+0x50>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	4a03      	ldr	r2, [pc, #12]	; (800295c <_sbrk+0x50>)
 8002950:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000bf8 	.word	0x20000bf8
 8002960:	20001068 	.word	0x20001068

08002964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <SystemInit+0x28>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <SystemInit+0x28>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <SystemInit+0x28>)
 800297a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297e:	609a      	str	r2, [r3, #8]
#endif
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b09a      	sub	sp, #104	; 0x68
 8002994:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002996:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800299a:	2224      	movs	r2, #36	; 0x24
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f006 ff38 	bl	8009814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2234      	movs	r2, #52	; 0x34
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 ff2c 	bl	8009814 <memset>

  htim1.Instance = TIM1;
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <MX_TIM1_Init+0xd8>)
 80029be:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <MX_TIM1_Init+0xdc>)
 80029c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <MX_TIM1_Init+0xd8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <MX_TIM1_Init+0xd8>)
 80029ca:	2240      	movs	r2, #64	; 0x40
 80029cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <MX_TIM1_Init+0xd8>)
 80029d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <MX_TIM1_Init+0xd8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029dc:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <MX_TIM1_Init+0xd8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <MX_TIM1_Init+0xd8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029e8:	2303      	movs	r3, #3
 80029ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ec:	2300      	movs	r3, #0
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029f0:	2301      	movs	r3, #1
 80029f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f4:	2300      	movs	r3, #0
 80029f6:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029fc:	2300      	movs	r3, #0
 80029fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a00:	2301      	movs	r3, #1
 8002a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a04:	2300      	movs	r3, #0
 8002a06:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a10:	4619      	mov	r1, r3
 8002a12:	4815      	ldr	r0, [pc, #84]	; (8002a68 <MX_TIM1_Init+0xd8>)
 8002a14:	f004 fca1 	bl	800735a <HAL_TIM_Encoder_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002a1e:	f7ff fd03 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a32:	4619      	mov	r1, r3
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <MX_TIM1_Init+0xd8>)
 8002a36:	f005 fa19 	bl	8007e6c <HAL_TIMEx_MasterConfigSynchronization>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002a40:	f7ff fcf2 	bl	8002428 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_TIM1_Init+0xd8>)
 8002a52:	f005 faa1 	bl	8007f98 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002a5c:	f7ff fce4 	bl	8002428 <Error_Handler>
  }

}
 8002a60:	bf00      	nop
 8002a62:	3768      	adds	r7, #104	; 0x68
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000f7c 	.word	0x20000f7c
 8002a6c:	40012c00 	.word	0x40012c00

08002a70 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a76:	f107 0320 	add.w	r3, r7, #32
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a94:	463b      	mov	r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002aa8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ac8:	481d      	ldr	r0, [pc, #116]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002aca:	f004 fb5c 	bl	8007186 <HAL_TIM_Base_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002ad4:	f7ff fca8 	bl	8002428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002adc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ade:	f107 0320 	add.w	r3, r7, #32
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4816      	ldr	r0, [pc, #88]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002ae6:	f004 fe5d 	bl	80077a4 <HAL_TIM_ConfigClockSource>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002af0:	f7ff fc9a 	bl	8002428 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002af4:	2305      	movs	r3, #5
 8002af6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002af8:	2350      	movs	r3, #80	; 0x50
 8002afa:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	4619      	mov	r1, r3
 8002b0a:	480d      	ldr	r0, [pc, #52]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002b0c:	f004 ff3a 	bl	8007984 <HAL_TIM_SlaveConfigSynchro>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002b16:	f7ff fc87 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b22:	463b      	mov	r3, r7
 8002b24:	4619      	mov	r1, r3
 8002b26:	4806      	ldr	r0, [pc, #24]	; (8002b40 <MX_TIM2_Init+0xd0>)
 8002b28:	f005 f9a0 	bl	8007e6c <HAL_TIMEx_MasterConfigSynchronization>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002b32:	f7ff fc79 	bl	8002428 <Error_Handler>
  }

}
 8002b36:	bf00      	nop
 8002b38:	3730      	adds	r7, #48	; 0x30
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000fc8 	.word	0x20000fc8

08002b44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <MX_TIM5_Init+0x9c>)
 8002b66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b8c:	4813      	ldr	r0, [pc, #76]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002b8e:	f004 fafa 	bl	8007186 <HAL_TIM_Base_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002b98:	f7ff fc46 	bl	8002428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480c      	ldr	r0, [pc, #48]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002baa:	f004 fdfb 	bl	80077a4 <HAL_TIM_ConfigClockSource>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002bb4:	f7ff fc38 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	; (8002bdc <MX_TIM5_Init+0x98>)
 8002bc6:	f005 f951 	bl	8007e6c <HAL_TIMEx_MasterConfigSynchronization>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002bd0:	f7ff fc2a 	bl	8002428 <Error_Handler>
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000f30 	.word	0x20000f30
 8002be0:	40000c00 	.word	0x40000c00

08002be4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b094      	sub	sp, #80	; 0x50
 8002be8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c04:	463b      	mov	r3, r7
 8002c06:	2234      	movs	r2, #52	; 0x34
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f006 fe02 	bl	8009814 <memset>

  htim8.Instance = TIM8;
 8002c10:	4b26      	ldr	r3, [pc, #152]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c12:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <MX_TIM8_Init+0xcc>)
 8002c14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b23      	ldr	r3, [pc, #140]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c28:	4b20      	ldr	r3, [pc, #128]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c3a:	481c      	ldr	r0, [pc, #112]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c3c:	f004 faa3 	bl	8007186 <HAL_TIM_Base_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002c46:	f7ff fbef 	bl	8002428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c4e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c54:	4619      	mov	r1, r3
 8002c56:	4815      	ldr	r0, [pc, #84]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c58:	f004 fda4 	bl	80077a4 <HAL_TIM_ConfigClockSource>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002c62:	f7ff fbe1 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c66:	2320      	movs	r3, #32
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c76:	4619      	mov	r1, r3
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c7a:	f005 f8f7 	bl	8007e6c <HAL_TIMEx_MasterConfigSynchronization>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002c84:	f7ff fbd0 	bl	8002428 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c90:	463b      	mov	r3, r7
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <MX_TIM8_Init+0xc8>)
 8002c96:	f005 f97f 	bl	8007f98 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002ca0:	f7ff fbc2 	bl	8002428 <Error_Handler>
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3750      	adds	r7, #80	; 0x50
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000e4c 	.word	0x20000e4c
 8002cb0:	40013400 	.word	0x40013400

08002cb4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cba:	f107 0310 	add.w	r3, r7, #16
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002cd4:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <MX_TIM15_Init+0xa0>)
 8002cd6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cde:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cec:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cee:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002cf4:	4b16      	ldr	r3, [pc, #88]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002d00:	4813      	ldr	r0, [pc, #76]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002d02:	f004 fa40 	bl	8007186 <HAL_TIM_Base_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002d0c:	f7ff fb8c 	bl	8002428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480c      	ldr	r0, [pc, #48]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002d1e:	f004 fd41 	bl	80077a4 <HAL_TIM_ConfigClockSource>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002d28:	f7ff fb7e 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	4619      	mov	r1, r3
 8002d38:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_TIM15_Init+0x9c>)
 8002d3a:	f005 f897 	bl	8007e6c <HAL_TIMEx_MasterConfigSynchronization>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002d44:	f7ff fb70 	bl	8002428 <Error_Handler>
  }

}
 8002d48:	bf00      	nop
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000e98 	.word	0x20000e98
 8002d54:	40014000 	.word	0x40014000

08002d58 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <MX_TIM16_Init+0x48>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d70:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002d74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d88:	4804      	ldr	r0, [pc, #16]	; (8002d9c <MX_TIM16_Init+0x44>)
 8002d8a:	f004 f9fc 	bl	8007186 <HAL_TIM_Base_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002d94:	f7ff fb48 	bl	8002428 <Error_Handler>
  }

}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20001014 	.word	0x20001014
 8002da0:	40014400 	.word	0x40014400

08002da4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <MX_TIM17_Init+0x48>)
 8002dac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002db0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002db4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002dd4:	4804      	ldr	r0, [pc, #16]	; (8002de8 <MX_TIM17_Init+0x44>)
 8002dd6:	f004 f9d6 	bl	8007186 <HAL_TIM_Base_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002de0:	f7ff fb22 	bl	8002428 <Error_Handler>
  }

}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000ee4 	.word	0x20000ee4
 8002dec:	40014800 	.word	0x40014800

08002df0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a23      	ldr	r2, [pc, #140]	; (8002e9c <HAL_TIM_Encoder_MspInit+0xac>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d13f      	bne.n	8002e92 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e12:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e42:	2303      	movs	r3, #3
 8002e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e52:	2302      	movs	r3, #2
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4811      	ldr	r0, [pc, #68]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xb4>)
 8002e5e:	f002 fcd3 	bl	8005808 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	2018      	movs	r0, #24
 8002e68:	f001 fdb9 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002e6c:	2018      	movs	r0, #24
 8002e6e:	f001 fdd0 	bl	8004a12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2101      	movs	r1, #1
 8002e76:	2019      	movs	r0, #25
 8002e78:	f001 fdb1 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e7c:	2019      	movs	r0, #25
 8002e7e:	f001 fdc8 	bl	8004a12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2101      	movs	r1, #1
 8002e86:	201a      	movs	r0, #26
 8002e88:	f001 fda9 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002e8c:	201a      	movs	r0, #26
 8002e8e:	f001 fdc0 	bl	8004a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	48000800 	.word	0x48000800

08002ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d131      	bne.n	8002f2e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eca:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed6:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	4a4c      	ldr	r2, [pc, #304]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eee:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002efa:	2301      	movs	r3, #1
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f06:	2300      	movs	r3, #0
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f12:	4619      	mov	r1, r3
 8002f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f18:	f002 fc76 	bl	8005808 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2101      	movs	r1, #1
 8002f20:	201c      	movs	r0, #28
 8002f22:	f001 fd5c 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f26:	201c      	movs	r0, #28
 8002f28:	f001 fd73 	bl	8004a12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002f2c:	e070      	b.n	8003010 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a3a      	ldr	r2, [pc, #232]	; (800301c <HAL_TIM_Base_MspInit+0x174>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10c      	bne.n	8002f52 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f38:	4b37      	ldr	r3, [pc, #220]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	4a36      	ldr	r2, [pc, #216]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	6593      	str	r3, [r2, #88]	; 0x58
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
}
 8002f50:	e05e      	b.n	8003010 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a32      	ldr	r2, [pc, #200]	; (8003020 <HAL_TIM_Base_MspInit+0x178>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d10c      	bne.n	8002f76 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f60:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f66:	6613      	str	r3, [r2, #96]	; 0x60
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	697b      	ldr	r3, [r7, #20]
}
 8002f74:	e04c      	b.n	8003010 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <HAL_TIM_Base_MspInit+0x17c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d114      	bne.n	8002faa <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f84:	4a24      	ldr	r2, [pc, #144]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2018      	movs	r0, #24
 8002f9e:	f001 fd1e 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002fa2:	2018      	movs	r0, #24
 8002fa4:	f001 fd35 	bl	8004a12 <HAL_NVIC_EnableIRQ>
}
 8002fa8:	e032      	b.n	8003010 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <HAL_TIM_Base_MspInit+0x180>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d114      	bne.n	8002fde <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb8:	4a17      	ldr	r2, [pc, #92]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbe:	6613      	str	r3, [r2, #96]	; 0x60
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2019      	movs	r0, #25
 8002fd2:	f001 fd04 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002fd6:	2019      	movs	r0, #25
 8002fd8:	f001 fd1b 	bl	8004a12 <HAL_NVIC_EnableIRQ>
}
 8002fdc:	e018      	b.n	8003010 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <HAL_TIM_Base_MspInit+0x184>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d113      	bne.n	8003010 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fec:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_TIM_Base_MspInit+0x170>)
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	2101      	movs	r1, #1
 8003004:	201a      	movs	r0, #26
 8003006:	f001 fcea 	bl	80049de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800300a:	201a      	movs	r0, #26
 800300c:	f001 fd01 	bl	8004a12 <HAL_NVIC_EnableIRQ>
}
 8003010:	bf00      	nop
 8003012:	3738      	adds	r7, #56	; 0x38
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40013400 	.word	0x40013400
 8003024:	40014000 	.word	0x40014000
 8003028:	40014400 	.word	0x40014400
 800302c:	40014800 	.word	0x40014800

08003030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003034:	480d      	ldr	r0, [pc, #52]	; (800306c <LoopForever+0x6>)
  ldr r1, =_edata
 8003036:	490e      	ldr	r1, [pc, #56]	; (8003070 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003038:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <LoopForever+0xe>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800303c:	e002      	b.n	8003044 <LoopCopyDataInit>

0800303e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003042:	3304      	adds	r3, #4

08003044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003048:	d3f9      	bcc.n	800303e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <LoopForever+0x12>)
  ldr r4, =_ebss
 800304c:	4c0b      	ldr	r4, [pc, #44]	; (800307c <LoopForever+0x16>)
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003050:	e001      	b.n	8003056 <LoopFillZerobss>

08003052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003054:	3204      	adds	r2, #4

08003056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003058:	d3fb      	bcc.n	8003052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800305a:	f7ff fc83 	bl	8002964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305e:	f006 fbb5 	bl	80097cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003062:	f7ff f8c7 	bl	80021f4 <main>

08003066 <LoopForever>:

LoopForever:
    b LoopForever
 8003066:	e7fe      	b.n	8003066 <LoopForever>
  ldr   r0, =_estack
 8003068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800306c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003070:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8003074:	0800ad64 	.word	0x0800ad64
  ldr r2, =_sbss
 8003078:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 800307c:	20001068 	.word	0x20001068

08003080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003080:	e7fe      	b.n	8003080 <ADC1_2_IRQHandler>

08003082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800308c:	2003      	movs	r0, #3
 800308e:	f001 fc9b 	bl	80049c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003092:	2000      	movs	r0, #0
 8003094:	f000 f80e 	bl	80030b4 <HAL_InitTick>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	71fb      	strb	r3, [r7, #7]
 80030a2:	e001      	b.n	80030a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030a4:	f7ff fa90 	bl	80025c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030a8:	79fb      	ldrb	r3, [r7, #7]

}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_InitTick+0x68>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d022      	beq.n	800310e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_InitTick+0x6c>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_InitTick+0x68>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 fca6 	bl	8004a2e <HAL_SYSTICK_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	d809      	bhi.n	8003102 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ee:	2200      	movs	r2, #0
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f6:	f001 fc72 	bl	80049de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_InitTick+0x70>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	e007      	b.n	8003112 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	e004      	b.n	8003112 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e001      	b.n	8003112 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000018 	.word	0x20000018
 8003120:	20000010 	.word	0x20000010
 8003124:	20000014 	.word	0x20000014

08003128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_IncTick+0x1c>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_IncTick+0x20>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4413      	add	r3, r2
 8003136:	4a03      	ldr	r2, [pc, #12]	; (8003144 <HAL_IncTick+0x1c>)
 8003138:	6013      	str	r3, [r2, #0]
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	20001060 	.word	0x20001060
 8003148:	20000018 	.word	0x20000018

0800314c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_GetTick+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20001060 	.word	0x20001060

08003164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7ff ffee 	bl	800314c <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d004      	beq.n	8003188 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_Delay+0x40>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4413      	add	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003188:	bf00      	nop
 800318a:	f7ff ffdf 	bl	800314c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	429a      	cmp	r2, r3
 8003198:	d8f7      	bhi.n	800318a <HAL_Delay+0x26>
  {
  }
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000018 	.word	0x20000018

080031a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	609a      	str	r2, [r3, #8]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003210:	b490      	push	{r4, r7}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3360      	adds	r3, #96	; 0x60
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <LL_ADC_SetOffset+0x40>)
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	4313      	orrs	r3, r2
 800323e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003242:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bc90      	pop	{r4, r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	03fff000 	.word	0x03fff000

08003254 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003254:	b490      	push	{r4, r7}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3360      	adds	r3, #96	; 0x60
 8003262:	461a      	mov	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bc90      	pop	{r4, r7}
 800327a:	4770      	bx	lr

0800327c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800327c:	b490      	push	{r4, r7}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3360      	adds	r3, #96	; 0x60
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4313      	orrs	r3, r2
 80032a0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc90      	pop	{r4, r7}
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032ac:	b490      	push	{r4, r7}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3360      	adds	r3, #96	; 0x60
 80032bc:	461a      	mov	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc90      	pop	{r4, r7}
 80032da:	4770      	bx	lr

080032dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80032dc:	b490      	push	{r4, r7}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3360      	adds	r3, #96	; 0x60
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4313      	orrs	r3, r2
 8003300:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bc90      	pop	{r4, r7}
 800330a:	4770      	bx	lr

0800330c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	615a      	str	r2, [r3, #20]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003332:	b490      	push	{r4, r7}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3330      	adds	r3, #48	; 0x30
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	4413      	add	r3, r2
 8003350:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	211f      	movs	r1, #31
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	401a      	ands	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0e9b      	lsrs	r3, r3, #26
 8003368:	f003 011f 	and.w	r1, r3, #31
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	4313      	orrs	r3, r2
 8003378:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bc90      	pop	{r4, r7}
 8003382:	4770      	bx	lr

08003384 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003384:	b490      	push	{r4, r7}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3314      	adds	r3, #20
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	0e5b      	lsrs	r3, r3, #25
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	4413      	add	r3, r2
 80033a2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2107      	movs	r1, #7
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	401a      	ands	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	0d1b      	lsrs	r3, r3, #20
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	4313      	orrs	r3, r2
 80033c8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc90      	pop	{r4, r7}
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0318 	and.w	r3, r3, #24
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033f8:	40d9      	lsrs	r1, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	400b      	ands	r3, r1
 80033fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	0007ffff 	.word	0x0007ffff

0800341c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800342c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6093      	str	r3, [r2, #8]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003454:	d101      	bne.n	800345a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800347c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a4:	d101      	bne.n	80034aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <LL_ADC_IsEnabled+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_ADC_IsEnabled+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d101      	bne.n	800351c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1ad      	b.n	80038a2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fe f853 	bl	8001600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff67 	bl	8003440 <LL_ADC_IsDeepPowerDownEnabled>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff4d 	bl	800341c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff82 	bl	8003490 <LL_ADC_IsInternalRegulatorEnabled>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d113      	bne.n	80035ba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff66 	bl	8003468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800359c:	4b9e      	ldr	r3, [pc, #632]	; (8003818 <HAL_ADC_Init+0x2ec>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	4a9e      	ldr	r2, [pc, #632]	; (800381c <HAL_ADC_Init+0x2f0>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035ac:	e002      	b.n	80035b4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f9      	bne.n	80035ae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff ff66 	bl	8003490 <LL_ADC_IsInternalRegulatorEnabled>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10d      	bne.n	80035e6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	f043 0210 	orr.w	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff77 	bl	80034de <LL_ADC_REG_IsConversionOngoing>
 80035f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 8148 	bne.w	8003890 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 8144 	bne.w	8003890 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003610:	f043 0202 	orr.w	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff4b 	bl	80034b8 <LL_ADC_IsEnabled>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d141      	bne.n	80036ac <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003630:	d004      	beq.n	800363c <HAL_ADC_Init+0x110>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7a      	ldr	r2, [pc, #488]	; (8003820 <HAL_ADC_Init+0x2f4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d10f      	bne.n	800365c <HAL_ADC_Init+0x130>
 800363c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003640:	f7ff ff3a 	bl	80034b8 <LL_ADC_IsEnabled>
 8003644:	4604      	mov	r4, r0
 8003646:	4876      	ldr	r0, [pc, #472]	; (8003820 <HAL_ADC_Init+0x2f4>)
 8003648:	f7ff ff36 	bl	80034b8 <LL_ADC_IsEnabled>
 800364c:	4603      	mov	r3, r0
 800364e:	4323      	orrs	r3, r4
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e012      	b.n	8003682 <HAL_ADC_Init+0x156>
 800365c:	4871      	ldr	r0, [pc, #452]	; (8003824 <HAL_ADC_Init+0x2f8>)
 800365e:	f7ff ff2b 	bl	80034b8 <LL_ADC_IsEnabled>
 8003662:	4604      	mov	r4, r0
 8003664:	4870      	ldr	r0, [pc, #448]	; (8003828 <HAL_ADC_Init+0x2fc>)
 8003666:	f7ff ff27 	bl	80034b8 <LL_ADC_IsEnabled>
 800366a:	4603      	mov	r3, r0
 800366c:	431c      	orrs	r4, r3
 800366e:	486f      	ldr	r0, [pc, #444]	; (800382c <HAL_ADC_Init+0x300>)
 8003670:	f7ff ff22 	bl	80034b8 <LL_ADC_IsEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	4323      	orrs	r3, r4
 8003678:	2b00      	cmp	r3, #0
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d012      	beq.n	80036ac <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800368e:	d004      	beq.n	800369a <HAL_ADC_Init+0x16e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a62      	ldr	r2, [pc, #392]	; (8003820 <HAL_ADC_Init+0x2f4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_ADC_Init+0x172>
 800369a:	4a65      	ldr	r2, [pc, #404]	; (8003830 <HAL_ADC_Init+0x304>)
 800369c:	e000      	b.n	80036a0 <HAL_ADC_Init+0x174>
 800369e:	4a65      	ldr	r2, [pc, #404]	; (8003834 <HAL_ADC_Init+0x308>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f7ff fd7e 	bl	80031a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	7f5b      	ldrb	r3, [r3, #29]
 80036b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d106      	bne.n	80036e8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	3b01      	subs	r3, #1
 80036e0:	045b      	lsls	r3, r3, #17
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <HAL_ADC_Init+0x30c>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	430b      	orrs	r3, r1
 8003716:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fed3 	bl	80034de <LL_ADC_REG_IsConversionOngoing>
 8003738:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fee0 	bl	8003504 <LL_ADC_INJ_IsConversionOngoing>
 8003744:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d17f      	bne.n	800384c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d17c      	bne.n	800384c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003756:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800375e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376e:	f023 0302 	bic.w	r3, r3, #2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	430b      	orrs	r3, r1
 800377a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003792:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800379c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6911      	ldr	r1, [r2, #16]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80037b2:	e013      	b.n	80037dc <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037d8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d12a      	bne.n	800383c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003802:	4311      	orrs	r1, r2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003808:	430a      	orrs	r2, r1
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	e019      	b.n	800384c <HAL_ADC_Init+0x320>
 8003818:	20000010 	.word	0x20000010
 800381c:	053e2d63 	.word	0x053e2d63
 8003820:	50000100 	.word	0x50000100
 8003824:	50000400 	.word	0x50000400
 8003828:	50000500 	.word	0x50000500
 800382c:	50000600 	.word	0x50000600
 8003830:	50000300 	.word	0x50000300
 8003834:	50000700 	.word	0x50000700
 8003838:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d10c      	bne.n	800386e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f023 010f 	bic.w	r1, r3, #15
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	1e5a      	subs	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
 800386c:	e007      	b.n	800387e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 020f 	bic.w	r2, r2, #15
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	f023 0303 	bic.w	r3, r3, #3
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	65da      	str	r2, [r3, #92]	; 0x5c
 800388e:	e007      	b.n	80038a0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}
 80038aa:	bf00      	nop

080038ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b0a6      	sub	sp, #152	; 0x98
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x22>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e38e      	b.n	8003fec <HAL_ADC_ConfigChannel+0x740>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fdff 	bl	80034de <LL_ADC_REG_IsConversionOngoing>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 836f 	bne.w	8003fc6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	f7ff fd1c 	bl	8003332 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fded 	bl	80034de <LL_ADC_REG_IsConversionOngoing>
 8003904:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fdf9 	bl	8003504 <LL_ADC_INJ_IsConversionOngoing>
 8003912:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 817b 	bne.w	8003c16 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 8176 	bne.w	8003c16 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003932:	d10f      	bne.n	8003954 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2200      	movs	r2, #0
 800393e:	4619      	mov	r1, r3
 8003940:	f7ff fd20 	bl	8003384 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fcdd 	bl	800330c <LL_ADC_SetSamplingTimeCommonConfig>
 8003952:	e00e      	b.n	8003972 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	461a      	mov	r2, r3
 8003962:	f7ff fd0f 	bl	8003384 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fccd 	bl	800330c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d022      	beq.n	80039da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6919      	ldr	r1, [r3, #16]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039a4:	f7ff fc34 	bl	8003210 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6919      	ldr	r1, [r3, #16]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f7ff fc79 	bl	80032ac <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6919      	ldr	r1, [r3, #16]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	7f1b      	ldrb	r3, [r3, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d102      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x124>
 80039ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ce:	e000      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x126>
 80039d0:	2300      	movs	r3, #0
 80039d2:	461a      	mov	r2, r3
 80039d4:	f7ff fc82 	bl	80032dc <LL_ADC_SetOffsetSaturation>
 80039d8:	e11d      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fc37 	bl	8003254 <LL_ADC_GetOffsetChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x15a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fc2c 	bl	8003254 <LL_ADC_GetOffsetChannel>
 80039fc:	4603      	mov	r3, r0
 80039fe:	0e9b      	lsrs	r3, r3, #26
 8003a00:	f003 021f 	and.w	r2, r3, #31
 8003a04:	e012      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x180>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fc21 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x198>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	e00a      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x1ae>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8003a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d106      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fc08 	bl	800327c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fbee 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x1ec>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fbe3 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	0e9b      	lsrs	r3, r3, #26
 8003a92:	f003 021f 	and.w	r2, r3, #31
 8003a96:	e010      	b.n	8003aba <HAL_ADC_ConfigChannel+0x20e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fbd8 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x226>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	0e9b      	lsrs	r3, r3, #26
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	e00a      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x23c>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d106      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fbc1 	bl	800327c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2102      	movs	r1, #2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fba7 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x27a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2102      	movs	r1, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fb9c 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	0e9b      	lsrs	r3, r3, #26
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	e010      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x29c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fb91 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x2b4>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	e00a      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x2ca>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d106      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2102      	movs	r1, #2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fb7a 	bl	800327c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2103      	movs	r1, #3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fb60 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x308>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fb55 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003baa:	4603      	mov	r3, r0
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	f003 021f 	and.w	r2, r3, #31
 8003bb2:	e010      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x32a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2103      	movs	r1, #3
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fb4a 	bl	8003254 <LL_ADC_GetOffsetChannel>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x342>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0e9b      	lsrs	r3, r3, #26
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	e00a      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x358>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2103      	movs	r1, #3
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fb33 	bl	800327c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fc4c 	bl	80034b8 <LL_ADC_IsEnabled>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 810c 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f7ff fbcd 	bl	80033d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4aaf      	ldr	r2, [pc, #700]	; (8003efc <HAL_ADC_ConfigChannel+0x650>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	f040 80fd 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x3c2>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	0e9b      	lsrs	r3, r3, #26
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	2b09      	cmp	r3, #9
 8003c64:	bf94      	ite	ls
 8003c66:	2301      	movls	r3, #1
 8003c68:	2300      	movhi	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e012      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x3e8>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	bf94      	ite	ls
 8003c8e:	2301      	movls	r3, #1
 8003c90:	2300      	movhi	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d064      	beq.n	8003d62 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x408>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	0e9b      	lsrs	r3, r3, #26
 8003caa:	3301      	adds	r3, #1
 8003cac:	069b      	lsls	r3, r3, #26
 8003cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb2:	e00e      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x426>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	069b      	lsls	r3, r3, #26
 8003cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x446>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	0e9b      	lsrs	r3, r3, #26
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf0:	e010      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x468>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	ea42 0103 	orr.w	r1, r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x48e>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	051b      	lsls	r3, r3, #20
 8003d38:	e011      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x4b2>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	f003 021f 	and.w	r2, r3, #31
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	e069      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x4d2>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	3301      	adds	r3, #1
 8003d76:	069b      	lsls	r3, r3, #26
 8003d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d7c:	e00e      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x4f0>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	61fb      	str	r3, [r7, #28]
  return result;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	069b      	lsls	r3, r3, #26
 8003d98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x510>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2101      	movs	r1, #1
 8003db6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dba:	e010      	b.n	8003dde <HAL_ADC_ConfigChannel+0x532>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	617b      	str	r3, [r7, #20]
  return result;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10d      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x55e>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	3301      	adds	r3, #1
 8003df6:	f003 021f 	and.w	r2, r3, #31
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b1e      	subs	r3, #30
 8003e02:	051b      	lsls	r3, r3, #20
 8003e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e08:	e014      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x588>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	60fb      	str	r3, [r7, #12]
  return result;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f003 021f 	and.w	r2, r3, #31
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b1e      	subs	r3, #30
 8003e2e:	051b      	lsls	r3, r3, #20
 8003e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e34:	430b      	orrs	r3, r1
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	6892      	ldr	r2, [r2, #8]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f7ff faa2 	bl	8003384 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_ADC_ConfigChannel+0x654>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80c9 	beq.w	8003fe0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e56:	d004      	beq.n	8003e62 <HAL_ADC_ConfigChannel+0x5b6>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <HAL_ADC_ConfigChannel+0x658>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x5ba>
 8003e62:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_ADC_ConfigChannel+0x65c>)
 8003e64:	e000      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x5bc>
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_ADC_ConfigChannel+0x660>)
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff f9c3 	bl	80031f4 <LL_ADC_GetCommonPathInternalCh>
 8003e6e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_ADC_ConfigChannel+0x664>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d004      	beq.n	8003e86 <HAL_ADC_ConfigChannel+0x5da>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a24      	ldr	r2, [pc, #144]	; (8003f14 <HAL_ADC_ConfigChannel+0x668>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d14e      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d148      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e9a:	d005      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x5fc>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_ADC_ConfigChannel+0x66c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	f040 8099 	bne.w	8003fda <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb0:	d004      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x610>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <HAL_ADC_ConfigChannel+0x658>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x614>
 8003ebc:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <HAL_ADC_ConfigChannel+0x65c>)
 8003ebe:	e000      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x616>
 8003ec0:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <HAL_ADC_ConfigChannel+0x660>)
 8003ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7ff f97e 	bl	80031ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_ADC_ConfigChannel+0x670>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	099b      	lsrs	r3, r3, #6
 8003ed8:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <HAL_ADC_ConfigChannel+0x674>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	099a      	lsrs	r2, r3, #6
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003eea:	e002      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f9      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef8:	e06f      	b.n	8003fda <HAL_ADC_ConfigChannel+0x72e>
 8003efa:	bf00      	nop
 8003efc:	407f0000 	.word	0x407f0000
 8003f00:	80080000 	.word	0x80080000
 8003f04:	50000100 	.word	0x50000100
 8003f08:	50000300 	.word	0x50000300
 8003f0c:	50000700 	.word	0x50000700
 8003f10:	c3210000 	.word	0xc3210000
 8003f14:	90c00010 	.word	0x90c00010
 8003f18:	50000600 	.word	0x50000600
 8003f1c:	20000010 	.word	0x20000010
 8003f20:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a32      	ldr	r2, [pc, #200]	; (8003ff4 <HAL_ADC_ConfigChannel+0x748>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d125      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x6ce>
 8003f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11f      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <HAL_ADC_ConfigChannel+0x74c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d104      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x6a2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <HAL_ADC_ConfigChannel+0x750>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d047      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f56:	d004      	beq.n	8003f62 <HAL_ADC_ConfigChannel+0x6b6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <HAL_ADC_ConfigChannel+0x74c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x6ba>
 8003f62:	4a27      	ldr	r2, [pc, #156]	; (8004000 <HAL_ADC_ConfigChannel+0x754>)
 8003f64:	e000      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x6bc>
 8003f66:	4a27      	ldr	r2, [pc, #156]	; (8004004 <HAL_ADC_ConfigChannel+0x758>)
 8003f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f7ff f92b 	bl	80031ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f78:	e031      	b.n	8003fde <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a22      	ldr	r2, [pc, #136]	; (8004008 <HAL_ADC_ConfigChannel+0x75c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d12d      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d127      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_ADC_ConfigChannel+0x74c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d022      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fa2:	d004      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x702>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <HAL_ADC_ConfigChannel+0x74c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x706>
 8003fae:	4a14      	ldr	r2, [pc, #80]	; (8004000 <HAL_ADC_ConfigChannel+0x754>)
 8003fb0:	e000      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x708>
 8003fb2:	4a14      	ldr	r2, [pc, #80]	; (8004004 <HAL_ADC_ConfigChannel+0x758>)
 8003fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7ff f905 	bl	80031ce <LL_ADC_SetCommonPathInternalCh>
 8003fc4:	e00c      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003fd8:	e002      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fe8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3798      	adds	r7, #152	; 0x98
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	c7520000 	.word	0xc7520000
 8003ff8:	50000100 	.word	0x50000100
 8003ffc:	50000500 	.word	0x50000500
 8004000:	50000300 	.word	0x50000300
 8004004:	50000700 	.word	0x50000700
 8004008:	cb840000 	.word	0xcb840000

0800400c <LL_ADC_IsEnabled>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <LL_ADC_IsEnabled+0x18>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <LL_ADC_IsEnabled+0x1a>
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_ADC_REG_IsConversionOngoing>:
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b04      	cmp	r3, #4
 8004044:	d101      	bne.n	800404a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b0a1      	sub	sp, #132	; 0x84
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004072:	2302      	movs	r3, #2
 8004074:	e0e3      	b.n	800423e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004086:	d102      	bne.n	800408e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004088:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	e009      	b.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a6e      	ldr	r2, [pc, #440]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d102      	bne.n	800409e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8004098:	4b6d      	ldr	r3, [pc, #436]	; (8004250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	e001      	b.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0be      	b.n	800423e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ffb5 	bl	8004032 <LL_ADC_REG_IsConversionOngoing>
 80040c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ffaf 	bl	8004032 <LL_ADC_REG_IsConversionOngoing>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 80a0 	bne.w	800421c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 809c 	bne.w	800421c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ec:	d004      	beq.n	80040f8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a55      	ldr	r2, [pc, #340]	; (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80040f8:	4b56      	ldr	r3, [pc, #344]	; (8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040fa:	e000      	b.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80040fc:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d04b      	beq.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800411a:	035b      	lsls	r3, r3, #13
 800411c:	430b      	orrs	r3, r1
 800411e:	431a      	orrs	r2, r3
 8004120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004122:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800412c:	d004      	beq.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a45      	ldr	r2, [pc, #276]	; (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10f      	bne.n	8004158 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004138:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800413c:	f7ff ff66 	bl	800400c <LL_ADC_IsEnabled>
 8004140:	4604      	mov	r4, r0
 8004142:	4841      	ldr	r0, [pc, #260]	; (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004144:	f7ff ff62 	bl	800400c <LL_ADC_IsEnabled>
 8004148:	4603      	mov	r3, r0
 800414a:	4323      	orrs	r3, r4
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e012      	b.n	800417e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8004158:	483c      	ldr	r0, [pc, #240]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800415a:	f7ff ff57 	bl	800400c <LL_ADC_IsEnabled>
 800415e:	4604      	mov	r4, r0
 8004160:	483b      	ldr	r0, [pc, #236]	; (8004250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004162:	f7ff ff53 	bl	800400c <LL_ADC_IsEnabled>
 8004166:	4603      	mov	r3, r0
 8004168:	431c      	orrs	r4, r3
 800416a:	483c      	ldr	r0, [pc, #240]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800416c:	f7ff ff4e 	bl	800400c <LL_ADC_IsEnabled>
 8004170:	4603      	mov	r3, r0
 8004172:	4323      	orrs	r3, r4
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d056      	beq.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800418a:	f023 030f 	bic.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	6811      	ldr	r1, [r2, #0]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	6892      	ldr	r2, [r2, #8]
 8004196:	430a      	orrs	r2, r1
 8004198:	431a      	orrs	r2, r3
 800419a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800419e:	e047      	b.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041b4:	d004      	beq.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a23      	ldr	r2, [pc, #140]	; (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10f      	bne.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80041c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041c4:	f7ff ff22 	bl	800400c <LL_ADC_IsEnabled>
 80041c8:	4604      	mov	r4, r0
 80041ca:	481f      	ldr	r0, [pc, #124]	; (8004248 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80041cc:	f7ff ff1e 	bl	800400c <LL_ADC_IsEnabled>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4323      	orrs	r3, r4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e012      	b.n	8004206 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80041e0:	481a      	ldr	r0, [pc, #104]	; (800424c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80041e2:	f7ff ff13 	bl	800400c <LL_ADC_IsEnabled>
 80041e6:	4604      	mov	r4, r0
 80041e8:	4819      	ldr	r0, [pc, #100]	; (8004250 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041ea:	f7ff ff0f 	bl	800400c <LL_ADC_IsEnabled>
 80041ee:	4603      	mov	r3, r0
 80041f0:	431c      	orrs	r4, r3
 80041f2:	481a      	ldr	r0, [pc, #104]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80041f4:	f7ff ff0a 	bl	800400c <LL_ADC_IsEnabled>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4323      	orrs	r3, r4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800420a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004212:	f023 030f 	bic.w	r3, r3, #15
 8004216:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004218:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800421a:	e009      	b.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800422e:	e000      	b.n	8004232 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004230:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800423a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800423e:	4618      	mov	r0, r3
 8004240:	3784      	adds	r7, #132	; 0x84
 8004242:	46bd      	mov	sp, r7
 8004244:	bd90      	pop	{r4, r7, pc}
 8004246:	bf00      	nop
 8004248:	50000100 	.word	0x50000100
 800424c:	50000400 	.word	0x50000400
 8004250:	50000500 	.word	0x50000500
 8004254:	50000300 	.word	0x50000300
 8004258:	50000700 	.word	0x50000700
 800425c:	50000600 	.word	0x50000600

08004260 <LL_EXTI_EnableIT_0_31>:
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <LL_EXTI_EnableIT_0_31+0x20>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4904      	ldr	r1, [pc, #16]	; (8004280 <LL_EXTI_EnableIT_0_31+0x20>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40010400 	.word	0x40010400

08004284 <LL_EXTI_EnableIT_32_63>:
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <LL_EXTI_EnableIT_32_63+0x20>)
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	4904      	ldr	r1, [pc, #16]	; (80042a4 <LL_EXTI_EnableIT_32_63+0x20>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4313      	orrs	r3, r2
 8004296:	620b      	str	r3, [r1, #32]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40010400 	.word	0x40010400

080042a8 <LL_EXTI_DisableIT_0_31>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <LL_EXTI_DisableIT_0_31+0x24>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	4904      	ldr	r1, [pc, #16]	; (80042cc <LL_EXTI_DisableIT_0_31+0x24>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40010400 	.word	0x40010400

080042d0 <LL_EXTI_DisableIT_32_63>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <LL_EXTI_DisableIT_32_63+0x24>)
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	43db      	mvns	r3, r3
 80042e0:	4904      	ldr	r1, [pc, #16]	; (80042f4 <LL_EXTI_DisableIT_32_63+0x24>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	620b      	str	r3, [r1, #32]
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40010400 	.word	0x40010400

080042f8 <LL_EXTI_EnableEvent_0_31>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	4904      	ldr	r1, [pc, #16]	; (8004318 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010400 	.word	0x40010400

0800431c <LL_EXTI_EnableEvent_32_63>:
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <LL_EXTI_EnableEvent_32_63+0x20>)
 8004326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004328:	4904      	ldr	r1, [pc, #16]	; (800433c <LL_EXTI_EnableEvent_32_63+0x20>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4313      	orrs	r3, r2
 800432e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40010400 	.word	0x40010400

08004340 <LL_EXTI_DisableEvent_0_31>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <LL_EXTI_DisableEvent_0_31+0x24>)
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	43db      	mvns	r3, r3
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004352:	4013      	ands	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010400 	.word	0x40010400

08004368 <LL_EXTI_DisableEvent_32_63>:
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <LL_EXTI_DisableEvent_32_63+0x24>)
 8004372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	43db      	mvns	r3, r3
 8004378:	4904      	ldr	r1, [pc, #16]	; (800438c <LL_EXTI_DisableEvent_32_63+0x24>)
 800437a:	4013      	ands	r3, r2
 800437c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010400 	.word	0x40010400

08004390 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4904      	ldr	r1, [pc, #16]	; (80043b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	608b      	str	r3, [r1, #8]
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40010400 	.word	0x40010400

080043b4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80043be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043c0:	4904      	ldr	r1, [pc, #16]	; (80043d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40010400 	.word	0x40010400

080043d8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	4904      	ldr	r1, [pc, #16]	; (80043fc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010400 	.word	0x40010400

08004400 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800440a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	43db      	mvns	r3, r3
 8004410:	4904      	ldr	r1, [pc, #16]	; (8004424 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004412:	4013      	ands	r3, r2
 8004414:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010400 	.word	0x40010400

08004428 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	4904      	ldr	r1, [pc, #16]	; (8004448 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4313      	orrs	r3, r2
 800443a:	60cb      	str	r3, [r1, #12]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40010400 	.word	0x40010400

0800444c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4904      	ldr	r1, [pc, #16]	; (800446c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4313      	orrs	r3, r2
 800445e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40010400 	.word	0x40010400

08004470 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	43db      	mvns	r3, r3
 8004480:	4904      	ldr	r1, [pc, #16]	; (8004494 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004482:	4013      	ands	r3, r2
 8004484:	60cb      	str	r3, [r1, #12]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010400 	.word	0x40010400

08004498 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	4904      	ldr	r1, [pc, #16]	; (80044bc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010400 	.word	0x40010400

080044c0 <LL_EXTI_ClearFlag_0_31>:
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80044c8:	4a04      	ldr	r2, [pc, #16]	; (80044dc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6153      	str	r3, [r2, #20]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010400 	.word	0x40010400

080044e0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <LL_EXTI_ClearFlag_32_63+0x1c>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6353      	str	r3, [r2, #52]	; 0x34
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010400 	.word	0x40010400

08004500 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e180      	b.n	800481e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800452a:	d102      	bne.n	8004532 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e175      	b.n	800481e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	7f5b      	ldrb	r3, [r3, #29]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fd f8ed 	bl	8001728 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004558:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b98      	ldr	r3, [pc, #608]	; (80047e0 <HAL_COMP_Init+0x2e0>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	430b      	orrs	r3, r1
 800458a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d015      	beq.n	80045c6 <HAL_COMP_Init+0xc6>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d112      	bne.n	80045c6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80045a0:	4b90      	ldr	r3, [pc, #576]	; (80047e4 <HAL_COMP_Init+0x2e4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	099b      	lsrs	r3, r3, #6
 80045a6:	4a90      	ldr	r2, [pc, #576]	; (80047e8 <HAL_COMP_Init+0x2e8>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	099a      	lsrs	r2, r3, #6
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80045b8:	e002      	b.n	80045c0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3b01      	subs	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f9      	bne.n	80045ba <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a88      	ldr	r2, [pc, #544]	; (80047ec <HAL_COMP_Init+0x2ec>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d028      	beq.n	8004622 <HAL_COMP_Init+0x122>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a86      	ldr	r2, [pc, #536]	; (80047f0 <HAL_COMP_Init+0x2f0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d020      	beq.n	800461c <HAL_COMP_Init+0x11c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a85      	ldr	r2, [pc, #532]	; (80047f4 <HAL_COMP_Init+0x2f4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_COMP_Init+0x116>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a83      	ldr	r2, [pc, #524]	; (80047f8 <HAL_COMP_Init+0x2f8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d010      	beq.n	8004610 <HAL_COMP_Init+0x110>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a82      	ldr	r2, [pc, #520]	; (80047fc <HAL_COMP_Init+0x2fc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d008      	beq.n	800460a <HAL_COMP_Init+0x10a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a80      	ldr	r2, [pc, #512]	; (8004800 <HAL_COMP_Init+0x300>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_COMP_Init+0x106>
 8004602:	2301      	movs	r3, #1
 8004604:	e00f      	b.n	8004626 <HAL_COMP_Init+0x126>
 8004606:	2302      	movs	r3, #2
 8004608:	e00d      	b.n	8004626 <HAL_COMP_Init+0x126>
 800460a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800460e:	e00a      	b.n	8004626 <HAL_COMP_Init+0x126>
 8004610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004614:	e007      	b.n	8004626 <HAL_COMP_Init+0x126>
 8004616:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800461a:	e004      	b.n	8004626 <HAL_COMP_Init+0x126>
 800461c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004620:	e001      	b.n	8004626 <HAL_COMP_Init+0x126>
 8004622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004626:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80b6 	beq.w	80047a2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d011      	beq.n	8004666 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6e      	ldr	r2, [pc, #440]	; (8004800 <HAL_COMP_Init+0x300>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_COMP_Init+0x156>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a6c      	ldr	r2, [pc, #432]	; (8004804 <HAL_COMP_Init+0x304>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d103      	bne.n	800465e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8004656:	6938      	ldr	r0, [r7, #16]
 8004658:	f7ff feac 	bl	80043b4 <LL_EXTI_EnableRisingTrig_32_63>
 800465c:	e014      	b.n	8004688 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f7ff fe96 	bl	8004390 <LL_EXTI_EnableRisingTrig_0_31>
 8004664:	e010      	b.n	8004688 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a65      	ldr	r2, [pc, #404]	; (8004800 <HAL_COMP_Init+0x300>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_COMP_Init+0x17a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a63      	ldr	r2, [pc, #396]	; (8004804 <HAL_COMP_Init+0x304>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d103      	bne.n	8004682 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800467a:	6938      	ldr	r0, [r7, #16]
 800467c:	f7ff fec0 	bl	8004400 <LL_EXTI_DisableRisingTrig_32_63>
 8004680:	e002      	b.n	8004688 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004682:	6938      	ldr	r0, [r7, #16]
 8004684:	f7ff fea8 	bl	80043d8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d011      	beq.n	80046b8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a59      	ldr	r2, [pc, #356]	; (8004800 <HAL_COMP_Init+0x300>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_COMP_Init+0x1a8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_COMP_Init+0x304>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80046a8:	6938      	ldr	r0, [r7, #16]
 80046aa:	f7ff fecf 	bl	800444c <LL_EXTI_EnableFallingTrig_32_63>
 80046ae:	e014      	b.n	80046da <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80046b0:	6938      	ldr	r0, [r7, #16]
 80046b2:	f7ff feb9 	bl	8004428 <LL_EXTI_EnableFallingTrig_0_31>
 80046b6:	e010      	b.n	80046da <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a50      	ldr	r2, [pc, #320]	; (8004800 <HAL_COMP_Init+0x300>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_COMP_Init+0x1cc>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a4f      	ldr	r2, [pc, #316]	; (8004804 <HAL_COMP_Init+0x304>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d103      	bne.n	80046d4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80046cc:	6938      	ldr	r0, [r7, #16]
 80046ce:	f7ff fee3 	bl	8004498 <LL_EXTI_DisableFallingTrig_32_63>
 80046d2:	e002      	b.n	80046da <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80046d4:	6938      	ldr	r0, [r7, #16]
 80046d6:	f7ff fecb 	bl	8004470 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a48      	ldr	r2, [pc, #288]	; (8004800 <HAL_COMP_Init+0x300>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_COMP_Init+0x1ee>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a46      	ldr	r2, [pc, #280]	; (8004804 <HAL_COMP_Init+0x304>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d103      	bne.n	80046f6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f7ff fef6 	bl	80044e0 <LL_EXTI_ClearFlag_32_63>
 80046f4:	e002      	b.n	80046fc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80046f6:	6938      	ldr	r0, [r7, #16]
 80046f8:	f7ff fee2 	bl	80044c0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d011      	beq.n	800472c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <HAL_COMP_Init+0x300>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_COMP_Init+0x21c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <HAL_COMP_Init+0x304>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d103      	bne.n	8004724 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800471c:	6938      	ldr	r0, [r7, #16]
 800471e:	f7ff fdfd 	bl	800431c <LL_EXTI_EnableEvent_32_63>
 8004722:	e014      	b.n	800474e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004724:	6938      	ldr	r0, [r7, #16]
 8004726:	f7ff fde7 	bl	80042f8 <LL_EXTI_EnableEvent_0_31>
 800472a:	e010      	b.n	800474e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a33      	ldr	r2, [pc, #204]	; (8004800 <HAL_COMP_Init+0x300>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_COMP_Init+0x240>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a32      	ldr	r2, [pc, #200]	; (8004804 <HAL_COMP_Init+0x304>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d103      	bne.n	8004748 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8004740:	6938      	ldr	r0, [r7, #16]
 8004742:	f7ff fe11 	bl	8004368 <LL_EXTI_DisableEvent_32_63>
 8004746:	e002      	b.n	800474e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8004748:	6938      	ldr	r0, [r7, #16]
 800474a:	f7ff fdf9 	bl	8004340 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d011      	beq.n	800477e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a28      	ldr	r2, [pc, #160]	; (8004800 <HAL_COMP_Init+0x300>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_COMP_Init+0x26e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a26      	ldr	r2, [pc, #152]	; (8004804 <HAL_COMP_Init+0x304>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d103      	bne.n	8004776 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800476e:	6938      	ldr	r0, [r7, #16]
 8004770:	f7ff fd88 	bl	8004284 <LL_EXTI_EnableIT_32_63>
 8004774:	e04b      	b.n	800480e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8004776:	6938      	ldr	r0, [r7, #16]
 8004778:	f7ff fd72 	bl	8004260 <LL_EXTI_EnableIT_0_31>
 800477c:	e047      	b.n	800480e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <HAL_COMP_Init+0x300>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_COMP_Init+0x292>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <HAL_COMP_Init+0x304>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d103      	bne.n	800479a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8004792:	6938      	ldr	r0, [r7, #16]
 8004794:	f7ff fd9c 	bl	80042d0 <LL_EXTI_DisableIT_32_63>
 8004798:	e039      	b.n	800480e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800479a:	6938      	ldr	r0, [r7, #16]
 800479c:	f7ff fd84 	bl	80042a8 <LL_EXTI_DisableIT_0_31>
 80047a0:	e035      	b.n	800480e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a16      	ldr	r2, [pc, #88]	; (8004800 <HAL_COMP_Init+0x300>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_COMP_Init+0x2b6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a14      	ldr	r2, [pc, #80]	; (8004804 <HAL_COMP_Init+0x304>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d103      	bne.n	80047be <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	f7ff fdd6 	bl	8004368 <LL_EXTI_DisableEvent_32_63>
 80047bc:	e002      	b.n	80047c4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80047be:	6938      	ldr	r0, [r7, #16]
 80047c0:	f7ff fdbe 	bl	8004340 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <HAL_COMP_Init+0x300>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_COMP_Init+0x2d8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <HAL_COMP_Init+0x304>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d117      	bne.n	8004808 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80047d8:	6938      	ldr	r0, [r7, #16]
 80047da:	f7ff fd79 	bl	80042d0 <LL_EXTI_DisableIT_32_63>
 80047de:	e016      	b.n	800480e <HAL_COMP_Init+0x30e>
 80047e0:	ff007e0f 	.word	0xff007e0f
 80047e4:	20000010 	.word	0x20000010
 80047e8:	053e2d63 	.word	0x053e2d63
 80047ec:	40010200 	.word	0x40010200
 80047f0:	40010204 	.word	0x40010204
 80047f4:	40010208 	.word	0x40010208
 80047f8:	4001020c 	.word	0x4001020c
 80047fc:	40010210 	.word	0x40010210
 8004800:	40010214 	.word	0x40010214
 8004804:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004808:	6938      	ldr	r0, [r7, #16]
 800480a:	f7ff fd4d 	bl	80042a8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7f5b      	ldrb	r3, [r3, #29]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800481e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <__NVIC_SetPriorityGrouping>:
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <__NVIC_SetPriorityGrouping+0x44>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004844:	4013      	ands	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800485a:	4a04      	ldr	r2, [pc, #16]	; (800486c <__NVIC_SetPriorityGrouping+0x44>)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	60d3      	str	r3, [r2, #12]
}
 8004860:	bf00      	nop
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000ed00 	.word	0xe000ed00

08004870 <__NVIC_GetPriorityGrouping>:
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <__NVIC_GetPriorityGrouping+0x18>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	0a1b      	lsrs	r3, r3, #8
 800487a:	f003 0307 	and.w	r3, r3, #7
}
 800487e:	4618      	mov	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_EnableIRQ>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489a:	2b00      	cmp	r3, #0
 800489c:	db0b      	blt.n	80048b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	f003 021f 	and.w	r2, r3, #31
 80048a4:	4907      	ldr	r1, [pc, #28]	; (80048c4 <__NVIC_EnableIRQ+0x38>)
 80048a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2001      	movs	r0, #1
 80048ae:	fa00 f202 	lsl.w	r2, r0, r2
 80048b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000e100 	.word	0xe000e100

080048c8 <__NVIC_SetPriority>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	db0a      	blt.n	80048f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	490c      	ldr	r1, [pc, #48]	; (8004914 <__NVIC_SetPriority+0x4c>)
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	0112      	lsls	r2, r2, #4
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	440b      	add	r3, r1
 80048ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048f0:	e00a      	b.n	8004908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	4908      	ldr	r1, [pc, #32]	; (8004918 <__NVIC_SetPriority+0x50>)
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	3b04      	subs	r3, #4
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	440b      	add	r3, r1
 8004906:	761a      	strb	r2, [r3, #24]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000e100 	.word	0xe000e100
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <NVIC_EncodePriority>:
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	; 0x24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f1c3 0307 	rsb	r3, r3, #7
 8004936:	2b04      	cmp	r3, #4
 8004938:	bf28      	it	cs
 800493a:	2304      	movcs	r3, #4
 800493c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3304      	adds	r3, #4
 8004942:	2b06      	cmp	r3, #6
 8004944:	d902      	bls.n	800494c <NVIC_EncodePriority+0x30>
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3b03      	subs	r3, #3
 800494a:	e000      	b.n	800494e <NVIC_EncodePriority+0x32>
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43da      	mvns	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	401a      	ands	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	43d9      	mvns	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	4313      	orrs	r3, r2
}
 8004976:	4618      	mov	r0, r3
 8004978:	3724      	adds	r7, #36	; 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <SysTick_Config>:
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3b01      	subs	r3, #1
 8004990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004994:	d301      	bcc.n	800499a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004996:	2301      	movs	r3, #1
 8004998:	e00f      	b.n	80049ba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <SysTick_Config+0x40>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3b01      	subs	r3, #1
 80049a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049a2:	210f      	movs	r1, #15
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a8:	f7ff ff8e 	bl	80048c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <SysTick_Config+0x40>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049b2:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <SysTick_Config+0x40>)
 80049b4:	2207      	movs	r2, #7
 80049b6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	e000e010 	.word	0xe000e010

080049c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ff29 	bl	8004828 <__NVIC_SetPriorityGrouping>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	4603      	mov	r3, r0
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ec:	f7ff ff40 	bl	8004870 <__NVIC_GetPriorityGrouping>
 80049f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	6978      	ldr	r0, [r7, #20]
 80049f8:	f7ff ff90 	bl	800491c <NVIC_EncodePriority>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ff5f 	bl	80048c8 <__NVIC_SetPriority>
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	4603      	mov	r3, r0
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff33 	bl	800488c <__NVIC_EnableIRQ>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff ffa4 	bl	8004984 <SysTick_Config>
 8004a3c:	4603      	mov	r3, r0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e014      	b.n	8004a82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	791b      	ldrb	r3, [r3, #4]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d105      	bne.n	8004a6e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc ff13 	bl	8001894 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	795b      	ldrb	r3, [r3, #5]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_DAC_Start+0x16>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e043      	b.n	8004b28 <HAL_DAC_Start+0x9e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	f7fe fb4d 	bl	8003164 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10f      	bne.n	8004af0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d11d      	bne.n	8004b1a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	e014      	b.n	8004b1a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2102      	movs	r1, #2
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d107      	bne.n	8004b1a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0202 	orr.w	r2, r2, #2
 8004b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	795b      	ldrb	r3, [r3, #5]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_DAC_Start_DMA+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0a1      	b.n	8004c92 <HAL_DAC_Start_DMA+0x162>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2202      	movs	r2, #2
 8004b58:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d12a      	bne.n	8004bb6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a4d      	ldr	r2, [pc, #308]	; (8004c9c <HAL_DAC_Start_DMA+0x16c>)
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a4c      	ldr	r2, [pc, #304]	; (8004ca0 <HAL_DAC_Start_DMA+0x170>)
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <HAL_DAC_Start_DMA+0x174>)
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b86:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d009      	beq.n	8004ba2 <HAL_DAC_Start_DMA+0x72>
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d00c      	beq.n	8004bac <HAL_DAC_Start_DMA+0x7c>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d000      	beq.n	8004b98 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004b96:	e039      	b.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	613b      	str	r3, [r7, #16]
        break;
 8004ba0:	e034      	b.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	613b      	str	r3, [r7, #16]
        break;
 8004baa:	e02f      	b.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	613b      	str	r3, [r7, #16]
        break;
 8004bb4:	e02a      	b.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <HAL_DAC_Start_DMA+0x178>)
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a3a      	ldr	r2, [pc, #232]	; (8004cac <HAL_DAC_Start_DMA+0x17c>)
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	4a39      	ldr	r2, [pc, #228]	; (8004cb0 <HAL_DAC_Start_DMA+0x180>)
 8004bcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bdc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d009      	beq.n	8004bf8 <HAL_DAC_Start_DMA+0xc8>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d00c      	beq.n	8004c02 <HAL_DAC_Start_DMA+0xd2>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d000      	beq.n	8004bee <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004bec:	e00e      	b.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	613b      	str	r3, [r7, #16]
        break;
 8004bf6:	e009      	b.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3318      	adds	r3, #24
 8004bfe:	613b      	str	r3, [r7, #16]
        break;
 8004c00:	e004      	b.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	331c      	adds	r3, #28
 8004c08:	613b      	str	r3, [r7, #16]
        break;
 8004c0a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d111      	bne.n	8004c36 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c20:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6898      	ldr	r0, [r3, #8]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	f000 fbc8 	bl	80053c0 <HAL_DMA_Start_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]
 8004c34:	e010      	b.n	8004c58 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004c44:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68d8      	ldr	r0, [r3, #12]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	f000 fbb6 	bl	80053c0 <HAL_DMA_Start_IT>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10f      	bne.n	8004c84 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6819      	ldr	r1, [r3, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2201      	movs	r2, #1
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f7fe fa71 	bl	8003164 <HAL_Delay>
 8004c82:	e005      	b.n	8004c90 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f043 0204 	orr.w	r2, r3, #4
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	0800515d 	.word	0x0800515d
 8004ca0:	0800517f 	.word	0x0800517f
 8004ca4:	0800519b 	.word	0x0800519b
 8004ca8:	08005205 	.word	0x08005205
 8004cac:	08005227 	.word	0x08005227
 8004cb0:	08005243 	.word	0x08005243

08004cb4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	400a      	ands	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2201      	movs	r2, #1
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f7fe fa33 	bl	8003164 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10f      	bne.n	8004d24 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fbd4 	bl	80054b6 <HAL_DMA_Abort>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e00e      	b.n	8004d42 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fbc4 	bl	80054b6 <HAL_DMA_Abort>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004d40:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	711a      	strb	r2, [r3, #4]
 8004d4e:	e002      	b.n	8004d56 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e004      	b.n	8004d9a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	3314      	adds	r3, #20
 8004d98:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	e002      	b.n	8004df6 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	795b      	ldrb	r3, [r3, #5]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_DAC_ConfigChannel+0x1c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e194      	b.n	800514a <HAL_DAC_ConfigChannel+0x346>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d174      	bne.n	8004f1e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d137      	bne.n	8004eaa <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004e3a:	f7fe f987 	bl	800314c <HAL_GetTick>
 8004e3e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e40:	e011      	b.n	8004e66 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e42:	f7fe f983 	bl	800314c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d90a      	bls.n	8004e66 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f043 0208 	orr.w	r2, r3, #8
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e171      	b.n	800514a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7fe f975 	bl	8003164 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40
 8004e84:	e01e      	b.n	8004ec4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e86:	f7fe f961 	bl	800314c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d90a      	bls.n	8004eaa <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f043 0208 	orr.w	r2, r3, #8
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e14f      	b.n	800514a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	dbe8      	blt.n	8004e86 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f7fe f955 	bl	8003164 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ec2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	ea02 0103 	and.w	r1, r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	21ff      	movs	r1, #255	; 0xff
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	ea02 0103 	and.w	r1, r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	409a      	lsls	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d11d      	bne.n	8004f62 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	221f      	movs	r2, #31
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	4013      	ands	r3, r2
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f56:	4313      	orrs	r3, r2
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2207      	movs	r2, #7
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	e011      	b.n	8004fb4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	e008      	b.n	8004fb4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004faa:	2301      	movs	r3, #1
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	e001      	b.n	8004fb4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	6a3a      	ldr	r2, [r7, #32]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	791b      	ldrb	r3, [r3, #4]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d102      	bne.n	8004fe8 <HAL_DAC_ConfigChannel+0x1e4>
 8004fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fe6:	e000      	b.n	8004fea <HAL_DAC_ConfigChannel+0x1e6>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	4013      	ands	r3, r2
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	795b      	ldrb	r3, [r3, #5]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d102      	bne.n	8005014 <HAL_DAC_ConfigChannel+0x210>
 800500e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005012:	e000      	b.n	8005016 <HAL_DAC_ConfigChannel+0x212>
 8005014:	2300      	movs	r3, #0
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d114      	bne.n	8005056 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800502c:	f001 faf8 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8005030:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	4a47      	ldr	r2, [pc, #284]	; (8005154 <HAL_DAC_ConfigChannel+0x350>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d904      	bls.n	8005044 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
 8005042:	e00d      	b.n	8005060 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4a44      	ldr	r2, [pc, #272]	; (8005158 <HAL_DAC_ConfigChannel+0x354>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d909      	bls.n	8005060 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
 8005054:	e004      	b.n	8005060 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	4313      	orrs	r3, r2
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	4313      	orrs	r3, r2
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43da      	mvns	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	400a      	ands	r2, r1
 8005096:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b2:	4013      	ands	r3, r2
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	4313      	orrs	r3, r2
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	22c0      	movs	r2, #192	; 0xc0
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43da      	mvns	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	400a      	ands	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	ea02 0103 	and.w	r1, r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	409a      	lsls	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3728      	adds	r7, #40	; 0x28
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	09896800 	.word	0x09896800
 8005158:	04c4b400 	.word	0x04c4b400

0800515c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fe20 	bl	8004db0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	711a      	strb	r2, [r3, #4]
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fe19 	bl	8004dc4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f043 0204 	orr.w	r2, r3, #4
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7fd f812 	bl	80021de <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	711a      	strb	r2, [r3, #4]
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff ffd8 	bl	80051c8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	711a      	strb	r2, [r3, #4]
}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7ff ffd1 	bl	80051dc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f043 0204 	orr.w	r2, r3, #4
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ffc7 	bl	80051f0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	711a      	strb	r2, [r3, #4]
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e08d      	b.n	800539e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_DMA_Init+0x138>)
 800528a:	429a      	cmp	r2, r3
 800528c:	d80f      	bhi.n	80052ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	4b45      	ldr	r3, [pc, #276]	; (80053ac <HAL_DMA_Init+0x13c>)
 8005296:	4413      	add	r3, r2
 8005298:	4a45      	ldr	r2, [pc, #276]	; (80053b0 <HAL_DMA_Init+0x140>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	009a      	lsls	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a42      	ldr	r2, [pc, #264]	; (80053b4 <HAL_DMA_Init+0x144>)
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
 80052ac:	e00e      	b.n	80052cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b40      	ldr	r3, [pc, #256]	; (80053b8 <HAL_DMA_Init+0x148>)
 80052b6:	4413      	add	r3, r2
 80052b8:	4a3d      	ldr	r2, [pc, #244]	; (80053b0 <HAL_DMA_Init+0x140>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	009a      	lsls	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a3c      	ldr	r2, [pc, #240]	; (80053bc <HAL_DMA_Init+0x14c>)
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa10 	bl	8005744 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532c:	d102      	bne.n	8005334 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005348:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d010      	beq.n	8005374 <HAL_DMA_Init+0x104>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d80c      	bhi.n	8005374 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa30 	bl	80057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	e008      	b.n	8005386 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40020407 	.word	0x40020407
 80053ac:	bffdfff8 	.word	0xbffdfff8
 80053b0:	cccccccd 	.word	0xcccccccd
 80053b4:	40020000 	.word	0x40020000
 80053b8:	bffdfbf8 	.word	0xbffdfbf8
 80053bc:	40020400 	.word	0x40020400

080053c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_DMA_Start_IT+0x20>
 80053dc:	2302      	movs	r3, #2
 80053de:	e066      	b.n	80054ae <HAL_DMA_Start_IT+0xee>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d155      	bne.n	80054a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f954 	bl	80056c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 020e 	orr.w	r2, r2, #14
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e00f      	b.n	8005458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 020a 	orr.w	r2, r2, #10
 8005456:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005474:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e005      	b.n	80054ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
 80054aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d005      	beq.n	80054da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
 80054d8:	e037      	b.n	800554a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 020e 	bic.w	r2, r2, #14
 80054e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	f003 021f 	and.w	r2, r3, #31
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2101      	movs	r1, #1
 8005518:	fa01 f202 	lsl.w	r2, r1, r2
 800551c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005526:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00c      	beq.n	800554a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800553e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005548:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2204      	movs	r2, #4
 800558a:	409a      	lsls	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d026      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x7a>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d021      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0204 	bic.w	r2, r2, #4
 80055ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	f003 021f 	and.w	r2, r3, #31
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	2104      	movs	r1, #4
 80055ca:	fa01 f202 	lsl.w	r2, r1, r2
 80055ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d071      	beq.n	80056bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055e0:	e06c      	b.n	80056bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	2202      	movs	r2, #2
 80055ec:	409a      	lsls	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02e      	beq.n	8005654 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d029      	beq.n	8005654 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 020a 	bic.w	r2, r2, #10
 800561c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562a:	f003 021f 	and.w	r2, r3, #31
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2102      	movs	r1, #2
 8005634:	fa01 f202 	lsl.w	r2, r1, r2
 8005638:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d038      	beq.n	80056bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005652:	e033      	b.n	80056bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2208      	movs	r2, #8
 800565e:	409a      	lsls	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4013      	ands	r3, r2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02a      	beq.n	80056be <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d025      	beq.n	80056be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 020e 	bic.w	r2, r2, #14
 8005680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	f003 021f 	and.w	r2, r3, #31
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2101      	movs	r1, #1
 8005690:	fa01 f202 	lsl.w	r2, r1, r2
 8005694:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
}
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056dc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f003 021f 	and.w	r2, r3, #31
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005702:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b10      	cmp	r3, #16
 8005712:	d108      	bne.n	8005726 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005724:	e007      	b.n	8005736 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	4b16      	ldr	r3, [pc, #88]	; (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d802      	bhi.n	800575e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e001      	b.n	8005762 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800575e:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005760:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	3b08      	subs	r3, #8
 800576e:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577c:	089b      	lsrs	r3, r3, #2
 800577e:	009a      	lsls	r2, r3, #2
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800578e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	2201      	movs	r2, #1
 8005798:	409a      	lsls	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40020407 	.word	0x40020407
 80057b0:	40020800 	.word	0x40020800
 80057b4:	40020820 	.word	0x40020820
 80057b8:	cccccccd 	.word	0xcccccccd
 80057bc:	40020880 	.word	0x40020880

080057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a08      	ldr	r2, [pc, #32]	; (8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	1000823f 	.word	0x1000823f
 8005804:	40020940 	.word	0x40020940

08005808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005816:	e15a      	b.n	8005ace <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	2101      	movs	r1, #1
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 814c 	beq.w	8005ac8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d00b      	beq.n	8005850 <HAL_GPIO_Init+0x48>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d007      	beq.n	8005850 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005844:	2b11      	cmp	r3, #17
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b12      	cmp	r3, #18
 800584e:	d130      	bne.n	80058b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2203      	movs	r2, #3
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005886:	2201      	movs	r2, #1
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	f003 0201 	and.w	r2, r3, #1
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	2203      	movs	r2, #3
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4013      	ands	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_Init+0xea>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b12      	cmp	r3, #18
 80058f0:	d123      	bne.n	800593a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	08da      	lsrs	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3208      	adds	r2, #8
 80058fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	220f      	movs	r2, #15
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43db      	mvns	r3, r3
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4013      	ands	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	08da      	lsrs	r2, r3, #3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3208      	adds	r2, #8
 8005934:	6939      	ldr	r1, [r7, #16]
 8005936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2203      	movs	r2, #3
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 0203 	and.w	r2, r3, #3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80a6 	beq.w	8005ac8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800597c:	4b5b      	ldr	r3, [pc, #364]	; (8005aec <HAL_GPIO_Init+0x2e4>)
 800597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005980:	4a5a      	ldr	r2, [pc, #360]	; (8005aec <HAL_GPIO_Init+0x2e4>)
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	6613      	str	r3, [r2, #96]	; 0x60
 8005988:	4b58      	ldr	r3, [pc, #352]	; (8005aec <HAL_GPIO_Init+0x2e4>)
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005994:	4a56      	ldr	r2, [pc, #344]	; (8005af0 <HAL_GPIO_Init+0x2e8>)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	3302      	adds	r3, #2
 800599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	220f      	movs	r2, #15
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059be:	d01f      	beq.n	8005a00 <HAL_GPIO_Init+0x1f8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a4c      	ldr	r2, [pc, #304]	; (8005af4 <HAL_GPIO_Init+0x2ec>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d019      	beq.n	80059fc <HAL_GPIO_Init+0x1f4>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a4b      	ldr	r2, [pc, #300]	; (8005af8 <HAL_GPIO_Init+0x2f0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d013      	beq.n	80059f8 <HAL_GPIO_Init+0x1f0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a4a      	ldr	r2, [pc, #296]	; (8005afc <HAL_GPIO_Init+0x2f4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00d      	beq.n	80059f4 <HAL_GPIO_Init+0x1ec>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a49      	ldr	r2, [pc, #292]	; (8005b00 <HAL_GPIO_Init+0x2f8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <HAL_GPIO_Init+0x1e8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a48      	ldr	r2, [pc, #288]	; (8005b04 <HAL_GPIO_Init+0x2fc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_GPIO_Init+0x1e4>
 80059e8:	2305      	movs	r3, #5
 80059ea:	e00a      	b.n	8005a02 <HAL_GPIO_Init+0x1fa>
 80059ec:	2306      	movs	r3, #6
 80059ee:	e008      	b.n	8005a02 <HAL_GPIO_Init+0x1fa>
 80059f0:	2304      	movs	r3, #4
 80059f2:	e006      	b.n	8005a02 <HAL_GPIO_Init+0x1fa>
 80059f4:	2303      	movs	r3, #3
 80059f6:	e004      	b.n	8005a02 <HAL_GPIO_Init+0x1fa>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e002      	b.n	8005a02 <HAL_GPIO_Init+0x1fa>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_GPIO_Init+0x1fa>
 8005a00:	2300      	movs	r3, #0
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	f002 0203 	and.w	r2, r2, #3
 8005a08:	0092      	lsls	r2, r2, #2
 8005a0a:	4093      	lsls	r3, r2
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a12:	4937      	ldr	r1, [pc, #220]	; (8005af0 <HAL_GPIO_Init+0x2e8>)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	089b      	lsrs	r3, r3, #2
 8005a18:	3302      	adds	r3, #2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005a20:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a44:	4a30      	ldr	r2, [pc, #192]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	43db      	mvns	r3, r3
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4013      	ands	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a6e:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a74:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4013      	ands	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ac2:	4a11      	ldr	r2, [pc, #68]	; (8005b08 <HAL_GPIO_Init+0x300>)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	3301      	adds	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f ae9d 	bne.w	8005818 <HAL_GPIO_Init+0x10>
  }
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40010000 	.word	0x40010000
 8005af4:	48000400 	.word	0x48000400
 8005af8:	48000800 	.word	0x48000800
 8005afc:	48000c00 	.word	0x48000c00
 8005b00:	48001000 	.word	0x48001000
 8005b04:	48001400 	.word	0x48001400
 8005b08:	40010400 	.word	0x40010400

08005b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	887b      	ldrh	r3, [r7, #2]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
 8005b28:	e001      	b.n	8005b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b4c:	787b      	ldrb	r3, [r7, #1]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b52:	887a      	ldrh	r2, [r7, #2]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b58:	e002      	b.n	8005b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b5a:	887a      	ldrh	r2, [r7, #2]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d141      	bne.n	8005bfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b7a:	4b4b      	ldr	r3, [pc, #300]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b86:	d131      	bne.n	8005bec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b88:	4b47      	ldr	r3, [pc, #284]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b8e:	4a46      	ldr	r2, [pc, #280]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ba0:	4a41      	ldr	r2, [pc, #260]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ba6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ba8:	4b40      	ldr	r3, [pc, #256]	; (8005cac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2232      	movs	r2, #50	; 0x32
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	4a3f      	ldr	r2, [pc, #252]	; (8005cb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	0c9b      	lsrs	r3, r3, #18
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bbe:	e002      	b.n	8005bc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bc6:	4b38      	ldr	r3, [pc, #224]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd2:	d102      	bne.n	8005bda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f2      	bne.n	8005bc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bda:	4b33      	ldr	r3, [pc, #204]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be6:	d158      	bne.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e057      	b.n	8005c9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bec:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bf2:	4a2d      	ldr	r2, [pc, #180]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005bfc:	e04d      	b.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c04:	d141      	bne.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c06:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c12:	d131      	bne.n	8005c78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c14:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c1a:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c24:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2232      	movs	r2, #50	; 0x32
 8005c3a:	fb02 f303 	mul.w	r3, r2, r3
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	0c9b      	lsrs	r3, r3, #18
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c4a:	e002      	b.n	8005c52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5e:	d102      	bne.n	8005c66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f2      	bne.n	8005c4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c72:	d112      	bne.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e011      	b.n	8005c9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c78:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c88:	e007      	b.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40007000 	.word	0x40007000
 8005cac:	20000010 	.word	0x20000010
 8005cb0:	431bde83 	.word	0x431bde83

08005cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e308      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d075      	beq.n	8005dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cd2:	4ba3      	ldr	r3, [pc, #652]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
 8005cda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cdc:	4ba0      	ldr	r3, [pc, #640]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b0c      	cmp	r3, #12
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x3e>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d002      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x44>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d10b      	bne.n	8005d10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf8:	4b99      	ldr	r3, [pc, #612]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d05b      	beq.n	8005dbc <HAL_RCC_OscConfig+0x108>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d157      	bne.n	8005dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e2e3      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d18:	d106      	bne.n	8005d28 <HAL_RCC_OscConfig+0x74>
 8005d1a:	4b91      	ldr	r3, [pc, #580]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a90      	ldr	r2, [pc, #576]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e01d      	b.n	8005d64 <HAL_RCC_OscConfig+0xb0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0x98>
 8005d32:	4b8b      	ldr	r3, [pc, #556]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a8a      	ldr	r2, [pc, #552]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4b88      	ldr	r3, [pc, #544]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a87      	ldr	r2, [pc, #540]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCC_OscConfig+0xb0>
 8005d4c:	4b84      	ldr	r3, [pc, #528]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a83      	ldr	r2, [pc, #524]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b81      	ldr	r3, [pc, #516]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a80      	ldr	r2, [pc, #512]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d013      	beq.n	8005d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fd f9ee 	bl	800314c <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fd f9ea 	bl	800314c <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e2a8      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d86:	4b76      	ldr	r3, [pc, #472]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0xc0>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fd f9da 	bl	800314c <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fd f9d6 	bl	800314c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	; 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e294      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dae:	4b6c      	ldr	r3, [pc, #432]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0xe8>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d075      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dca:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dd4:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b0c      	cmp	r3, #12
 8005de2:	d102      	bne.n	8005dea <HAL_RCC_OscConfig+0x136>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d002      	beq.n	8005df0 <HAL_RCC_OscConfig+0x13c>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d11f      	bne.n	8005e30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005df0:	4b5b      	ldr	r3, [pc, #364]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_OscConfig+0x154>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e267      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e08:	4b55      	ldr	r3, [pc, #340]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	4952      	ldr	r1, [pc, #328]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e1c:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <HAL_RCC_OscConfig+0x2b0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fd f947 	bl	80030b4 <HAL_InitTick>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d043      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e253      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d023      	beq.n	8005e80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e38:	4b49      	ldr	r3, [pc, #292]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a48      	ldr	r2, [pc, #288]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fd f982 	bl	800314c <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e4c:	f7fd f97e 	bl	800314c <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e23c      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5e:	4b40      	ldr	r3, [pc, #256]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6a:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	061b      	lsls	r3, r3, #24
 8005e78:	4939      	ldr	r1, [pc, #228]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	604b      	str	r3, [r1, #4]
 8005e7e:	e01a      	b.n	8005eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e80:	4b37      	ldr	r3, [pc, #220]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a36      	ldr	r2, [pc, #216]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8c:	f7fd f95e 	bl	800314c <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e94:	f7fd f95a 	bl	800314c <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e218      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea6:	4b2e      	ldr	r3, [pc, #184]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x1e0>
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d03c      	beq.n	8005f3c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01c      	beq.n	8005f04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eca:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed0:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eda:	f7fd f937 	bl	800314c <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee2:	f7fd f933 	bl	800314c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e1f1      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0ef      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x22e>
 8005f02:	e01b      	b.n	8005f3c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f04:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f0a:	4a15      	ldr	r2, [pc, #84]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fd f91a 	bl	800314c <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f1c:	f7fd f916 	bl	800314c <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e1d4      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1ef      	bne.n	8005f1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80ab 	beq.w	80060a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f4e:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_RCC_OscConfig+0x2b4>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e005      	b.n	8005f6a <HAL_RCC_OscConfig+0x2b6>
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000
 8005f64:	20000014 	.word	0x20000014
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f6e:	4baf      	ldr	r3, [pc, #700]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f72:	4aae      	ldr	r2, [pc, #696]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f78:	6593      	str	r3, [r2, #88]	; 0x58
 8005f7a:	4bac      	ldr	r3, [pc, #688]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f86:	2301      	movs	r3, #1
 8005f88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f8a:	4ba9      	ldr	r3, [pc, #676]	; (8006230 <HAL_RCC_OscConfig+0x57c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d118      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f96:	4ba6      	ldr	r3, [pc, #664]	; (8006230 <HAL_RCC_OscConfig+0x57c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4aa5      	ldr	r2, [pc, #660]	; (8006230 <HAL_RCC_OscConfig+0x57c>)
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fa2:	f7fd f8d3 	bl	800314c <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005faa:	f7fd f8cf 	bl	800314c <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e18d      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fbc:	4b9c      	ldr	r3, [pc, #624]	; (8006230 <HAL_RCC_OscConfig+0x57c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d108      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x32e>
 8005fd0:	4b96      	ldr	r3, [pc, #600]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd6:	4a95      	ldr	r2, [pc, #596]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fe0:	e024      	b.n	800602c <HAL_RCC_OscConfig+0x378>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d110      	bne.n	800600c <HAL_RCC_OscConfig+0x358>
 8005fea:	4b90      	ldr	r3, [pc, #576]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff0:	4a8e      	ldr	r2, [pc, #568]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ffa:	4b8c      	ldr	r3, [pc, #560]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006000:	4a8a      	ldr	r2, [pc, #552]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800600a:	e00f      	b.n	800602c <HAL_RCC_OscConfig+0x378>
 800600c:	4b87      	ldr	r3, [pc, #540]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006012:	4a86      	ldr	r2, [pc, #536]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800601c:	4b83      	ldr	r3, [pc, #524]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	4a82      	ldr	r2, [pc, #520]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7fd f88a 	bl	800314c <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7fd f886 	bl	800314c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e142      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006052:	4b76      	ldr	r3, [pc, #472]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0ed      	beq.n	800603c <HAL_RCC_OscConfig+0x388>
 8006060:	e015      	b.n	800608e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006062:	f7fd f873 	bl	800314c <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006068:	e00a      	b.n	8006080 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606a:	f7fd f86f 	bl	800314c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f241 3288 	movw	r2, #5000	; 0x1388
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e12b      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006080:	4b6a      	ldr	r3, [pc, #424]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1ed      	bne.n	800606a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d105      	bne.n	80060a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006094:	4b65      	ldr	r3, [pc, #404]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	4a64      	ldr	r2, [pc, #400]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800609a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d03c      	beq.n	8006126 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01c      	beq.n	80060ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060b4:	4b5d      	ldr	r3, [pc, #372]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80060b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ba:	4a5c      	ldr	r2, [pc, #368]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fd f842 	bl	800314c <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060cc:	f7fd f83e 	bl	800314c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e0fc      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060de:	4b53      	ldr	r3, [pc, #332]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80060e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0ef      	beq.n	80060cc <HAL_RCC_OscConfig+0x418>
 80060ec:	e01b      	b.n	8006126 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060ee:	4b4f      	ldr	r3, [pc, #316]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80060f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060f4:	4a4d      	ldr	r2, [pc, #308]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fe:	f7fd f825 	bl	800314c <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006106:	f7fd f821 	bl	800314c <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e0df      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006118:	4b44      	ldr	r3, [pc, #272]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800611a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ef      	bne.n	8006106 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80d3 	beq.w	80062d6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006130:	4b3e      	ldr	r3, [pc, #248]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 030c 	and.w	r3, r3, #12
 8006138:	2b0c      	cmp	r3, #12
 800613a:	f000 808d 	beq.w	8006258 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d15a      	bne.n	80061fc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006146:	4b39      	ldr	r3, [pc, #228]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a38      	ldr	r2, [pc, #224]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800614c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006152:	f7fc fffb 	bl	800314c <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615a:	f7fc fff7 	bl	800314c <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e0b5      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800616c:	4b2f      	ldr	r3, [pc, #188]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1f0      	bne.n	800615a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006178:	4b2c      	ldr	r3, [pc, #176]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <HAL_RCC_OscConfig+0x580>)
 800617e:	4013      	ands	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6a11      	ldr	r1, [r2, #32]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006188:	3a01      	subs	r2, #1
 800618a:	0112      	lsls	r2, r2, #4
 800618c:	4311      	orrs	r1, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006192:	0212      	lsls	r2, r2, #8
 8006194:	4311      	orrs	r1, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800619a:	0852      	lsrs	r2, r2, #1
 800619c:	3a01      	subs	r2, #1
 800619e:	0552      	lsls	r2, r2, #21
 80061a0:	4311      	orrs	r1, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061a6:	0852      	lsrs	r2, r2, #1
 80061a8:	3a01      	subs	r2, #1
 80061aa:	0652      	lsls	r2, r2, #25
 80061ac:	4311      	orrs	r1, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061b2:	06d2      	lsls	r2, r2, #27
 80061b4:	430a      	orrs	r2, r1
 80061b6:	491d      	ldr	r1, [pc, #116]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80061c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061c8:	4b18      	ldr	r3, [pc, #96]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a17      	ldr	r2, [pc, #92]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80061ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fc ffba 	bl	800314c <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fc ffb6 	bl	800314c <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e074      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0x528>
 80061fa:	e06c      	b.n	80062d6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061fc:	4b0b      	ldr	r3, [pc, #44]	; (800622c <HAL_RCC_OscConfig+0x578>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006206:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006208:	4b08      	ldr	r3, [pc, #32]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a07      	ldr	r2, [pc, #28]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_RCC_OscConfig+0x578>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4a04      	ldr	r2, [pc, #16]	; (800622c <HAL_RCC_OscConfig+0x578>)
 800621a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800621e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006222:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fc ff92 	bl	800314c <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800622a:	e00e      	b.n	800624a <HAL_RCC_OscConfig+0x596>
 800622c:	40021000 	.word	0x40021000
 8006230:	40007000 	.word	0x40007000
 8006234:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fc ff88 	bl	800314c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e046      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800624a:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <HAL_RCC_OscConfig+0x62c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x584>
 8006256:	e03e      	b.n	80062d6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e039      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006264:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <HAL_RCC_OscConfig+0x62c>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0203 	and.w	r2, r3, #3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	429a      	cmp	r2, r3
 8006276:	d12c      	bne.n	80062d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	3b01      	subs	r3, #1
 8006284:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006286:	429a      	cmp	r2, r3
 8006288:	d123      	bne.n	80062d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d11b      	bne.n	80062d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d113      	bne.n	80062d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	3b01      	subs	r3, #1
 80062b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d109      	bne.n	80062d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	3b01      	subs	r3, #1
 80062cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40021000 	.word	0x40021000

080062e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e11e      	b.n	800653a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062fc:	4b91      	ldr	r3, [pc, #580]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d910      	bls.n	800632c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630a:	4b8e      	ldr	r3, [pc, #568]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f023 020f 	bic.w	r2, r3, #15
 8006312:	498c      	ldr	r1, [pc, #560]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	4313      	orrs	r3, r2
 8006318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800631a:	4b8a      	ldr	r3, [pc, #552]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e106      	b.n	800653a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d073      	beq.n	8006420 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d129      	bne.n	8006394 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006340:	4b81      	ldr	r3, [pc, #516]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0f4      	b.n	800653a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006350:	f000 f972 	bl	8006638 <RCC_GetSysClockFreqFromPLLSource>
 8006354:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4a7c      	ldr	r2, [pc, #496]	; (800654c <HAL_RCC_ClockConfig+0x268>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d93f      	bls.n	80063de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800635e:	4b7a      	ldr	r3, [pc, #488]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006372:	2b00      	cmp	r3, #0
 8006374:	d033      	beq.n	80063de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800637a:	2b00      	cmp	r3, #0
 800637c:	d12f      	bne.n	80063de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800637e:	4b72      	ldr	r3, [pc, #456]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006386:	4a70      	ldr	r2, [pc, #448]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e024      	b.n	80063de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d107      	bne.n	80063ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800639c:	4b6a      	ldr	r3, [pc, #424]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0c6      	b.n	800653a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063ac:	4b66      	ldr	r3, [pc, #408]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0be      	b.n	800653a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80063bc:	f000 f8ce 	bl	800655c <HAL_RCC_GetSysClockFreq>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4a61      	ldr	r2, [pc, #388]	; (800654c <HAL_RCC_ClockConfig+0x268>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d909      	bls.n	80063de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d2:	4a5d      	ldr	r2, [pc, #372]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063de:	4b5a      	ldr	r3, [pc, #360]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f023 0203 	bic.w	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4957      	ldr	r1, [pc, #348]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f0:	f7fc feac 	bl	800314c <HAL_GetTick>
 80063f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f6:	e00a      	b.n	800640e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f8:	f7fc fea8 	bl	800314c <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	; 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e095      	b.n	800653a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640e:	4b4e      	ldr	r3, [pc, #312]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 020c 	and.w	r2, r3, #12
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	429a      	cmp	r2, r3
 800641e:	d1eb      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d023      	beq.n	8006474 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006438:	4b43      	ldr	r3, [pc, #268]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4a42      	ldr	r2, [pc, #264]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 800643e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006442:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0308 	and.w	r3, r3, #8
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006450:	4b3d      	ldr	r3, [pc, #244]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006458:	4a3b      	ldr	r2, [pc, #236]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 800645a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800645e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006460:	4b39      	ldr	r3, [pc, #228]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	4936      	ldr	r1, [pc, #216]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
 8006472:	e008      	b.n	8006486 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b80      	cmp	r3, #128	; 0x80
 8006478:	d105      	bne.n	8006486 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800647a:	4b33      	ldr	r3, [pc, #204]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	4a32      	ldr	r2, [pc, #200]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006484:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006486:	4b2f      	ldr	r3, [pc, #188]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d21d      	bcs.n	80064d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006494:	4b2b      	ldr	r3, [pc, #172]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 020f 	bic.w	r2, r3, #15
 800649c:	4929      	ldr	r1, [pc, #164]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064a4:	f7fc fe52 	bl	800314c <HAL_GetTick>
 80064a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064aa:	e00a      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ac:	f7fc fe4e 	bl	800314c <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e03b      	b.n	800653a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <HAL_RCC_ClockConfig+0x260>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d1ed      	bne.n	80064ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064dc:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4917      	ldr	r1, [pc, #92]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	490f      	ldr	r1, [pc, #60]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 800650a:	4313      	orrs	r3, r2
 800650c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800650e:	f000 f825 	bl	800655c <HAL_RCC_GetSysClockFreq>
 8006512:	4601      	mov	r1, r0
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <HAL_RCC_ClockConfig+0x264>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <HAL_RCC_ClockConfig+0x26c>)
 8006520:	5cd3      	ldrb	r3, [r2, r3]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	fa21 f303 	lsr.w	r3, r1, r3
 800652a:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <HAL_RCC_ClockConfig+0x270>)
 800652c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <HAL_RCC_ClockConfig+0x274>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fc fdbe 	bl	80030b4 <HAL_InitTick>
 8006538:	4603      	mov	r3, r0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40022000 	.word	0x40022000
 8006548:	40021000 	.word	0x40021000
 800654c:	04c4b400 	.word	0x04c4b400
 8006550:	0800aa74 	.word	0x0800aa74
 8006554:	20000010 	.word	0x20000010
 8006558:	20000014 	.word	0x20000014

0800655c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006562:	4b2c      	ldr	r3, [pc, #176]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b04      	cmp	r3, #4
 800656c:	d102      	bne.n	8006574 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	e047      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006574:	4b27      	ldr	r3, [pc, #156]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 030c 	and.w	r3, r3, #12
 800657c:	2b08      	cmp	r3, #8
 800657e:	d102      	bne.n	8006586 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006580:	4b26      	ldr	r3, [pc, #152]	; (800661c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e03e      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006586:	4b23      	ldr	r3, [pc, #140]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 030c 	and.w	r3, r3, #12
 800658e:	2b0c      	cmp	r3, #12
 8006590:	d136      	bne.n	8006600 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006592:	4b20      	ldr	r3, [pc, #128]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800659c:	4b1d      	ldr	r3, [pc, #116]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	091b      	lsrs	r3, r3, #4
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	3301      	adds	r3, #1
 80065a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d10c      	bne.n	80065ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065b0:	4a1a      	ldr	r2, [pc, #104]	; (800661c <HAL_RCC_GetSysClockFreq+0xc0>)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b8:	4a16      	ldr	r2, [pc, #88]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ba:	68d2      	ldr	r2, [r2, #12]
 80065bc:	0a12      	lsrs	r2, r2, #8
 80065be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	617b      	str	r3, [r7, #20]
      break;
 80065c8:	e00c      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065ca:	4a13      	ldr	r2, [pc, #76]	; (8006618 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	4a10      	ldr	r2, [pc, #64]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d4:	68d2      	ldr	r2, [r2, #12]
 80065d6:	0a12      	lsrs	r2, r2, #8
 80065d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	617b      	str	r3, [r7, #20]
      break;
 80065e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	0e5b      	lsrs	r3, r3, #25
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	3301      	adds	r3, #1
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	e001      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006604:	693b      	ldr	r3, [r7, #16]
}
 8006606:	4618      	mov	r0, r3
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000
 8006618:	00f42400 	.word	0x00f42400
 800661c:	007a1200 	.word	0x007a1200

08006620 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <HAL_RCC_GetHCLKFreq+0x14>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000010 	.word	0x20000010

08006638 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800663e:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006648:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	3301      	adds	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b03      	cmp	r3, #3
 800665a:	d10c      	bne.n	8006676 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800665c:	4a17      	ldr	r2, [pc, #92]	; (80066bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006666:	68d2      	ldr	r2, [r2, #12]
 8006668:	0a12      	lsrs	r2, r2, #8
 800666a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	617b      	str	r3, [r7, #20]
    break;
 8006674:	e00c      	b.n	8006690 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006676:	4a12      	ldr	r2, [pc, #72]	; (80066c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	fbb2 f3f3 	udiv	r3, r2, r3
 800667e:	4a0e      	ldr	r2, [pc, #56]	; (80066b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006680:	68d2      	ldr	r2, [r2, #12]
 8006682:	0a12      	lsrs	r2, r2, #8
 8006684:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	617b      	str	r3, [r7, #20]
    break;
 800668e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	0e5b      	lsrs	r3, r3, #25
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	3301      	adds	r3, #1
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80066aa:	687b      	ldr	r3, [r7, #4]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	40021000 	.word	0x40021000
 80066bc:	007a1200 	.word	0x007a1200
 80066c0:	00f42400 	.word	0x00f42400

080066c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066cc:	2300      	movs	r3, #0
 80066ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066d0:	2300      	movs	r3, #0
 80066d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8098 	beq.w	8006812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066e2:	2300      	movs	r3, #0
 80066e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e6:	4b43      	ldr	r3, [pc, #268]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10d      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f2:	4b40      	ldr	r3, [pc, #256]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f6:	4a3f      	ldr	r2, [pc, #252]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fc:	6593      	str	r3, [r2, #88]	; 0x58
 80066fe:	4b3d      	ldr	r3, [pc, #244]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800670a:	2301      	movs	r3, #1
 800670c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800670e:	4b3a      	ldr	r3, [pc, #232]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a39      	ldr	r2, [pc, #228]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006718:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800671a:	f7fc fd17 	bl	800314c <HAL_GetTick>
 800671e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006720:	e009      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006722:	f7fc fd13 	bl	800314c <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d902      	bls.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	74fb      	strb	r3, [r7, #19]
        break;
 8006734:	e005      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006736:	4b30      	ldr	r3, [pc, #192]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0ef      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006742:	7cfb      	ldrb	r3, [r7, #19]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d159      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006748:	4b2a      	ldr	r3, [pc, #168]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01e      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	429a      	cmp	r2, r3
 8006762:	d019      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006764:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006770:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a1f      	ldr	r2, [pc, #124]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006780:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006790:	4a18      	ldr	r2, [pc, #96]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fc fcd3 	bl	800314c <HAL_GetTick>
 80067a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a8:	e00b      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f7fc fccf 	bl	800314c <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d902      	bls.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	74fb      	strb	r3, [r7, #19]
            break;
 80067c0:	e006      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ec      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067d0:	7cfb      	ldrb	r3, [r7, #19]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d6:	4b07      	ldr	r3, [pc, #28]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e4:	4903      	ldr	r1, [pc, #12]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067ec:	e008      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ee:	7cfb      	ldrb	r3, [r7, #19]
 80067f0:	74bb      	strb	r3, [r7, #18]
 80067f2:	e005      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006800:	7c7b      	ldrb	r3, [r7, #17]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d105      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006806:	4baf      	ldr	r3, [pc, #700]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	4aae      	ldr	r2, [pc, #696]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800680c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006810:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800681e:	4ba9      	ldr	r3, [pc, #676]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	f023 0203 	bic.w	r2, r3, #3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	49a5      	ldr	r1, [pc, #660]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006840:	4ba0      	ldr	r3, [pc, #640]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	f023 020c 	bic.w	r2, r3, #12
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	499d      	ldr	r1, [pc, #628]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006862:	4b98      	ldr	r3, [pc, #608]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4994      	ldr	r1, [pc, #592]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006884:	4b8f      	ldr	r3, [pc, #572]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	498c      	ldr	r1, [pc, #560]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068a6:	4b87      	ldr	r3, [pc, #540]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	4983      	ldr	r1, [pc, #524]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068c8:	4b7e      	ldr	r3, [pc, #504]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	497b      	ldr	r1, [pc, #492]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068ea:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	4972      	ldr	r1, [pc, #456]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800690c:	4b6d      	ldr	r3, [pc, #436]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006912:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	496a      	ldr	r1, [pc, #424]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800692e:	4b65      	ldr	r3, [pc, #404]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	4961      	ldr	r1, [pc, #388]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006950:	4b5c      	ldr	r3, [pc, #368]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006956:	f023 0203 	bic.w	r2, r3, #3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	4959      	ldr	r1, [pc, #356]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006960:	4313      	orrs	r3, r2
 8006962:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006972:	4b54      	ldr	r3, [pc, #336]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006978:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	4950      	ldr	r1, [pc, #320]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006994:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	4948      	ldr	r1, [pc, #288]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b2:	d105      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b4:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a42      	ldr	r2, [pc, #264]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d015      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069cc:	4b3d      	ldr	r3, [pc, #244]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	493a      	ldr	r1, [pc, #232]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ea:	d105      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ec:	4b35      	ldr	r3, [pc, #212]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a04:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	492c      	ldr	r1, [pc, #176]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a22:	d105      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a3c:	4b21      	ldr	r3, [pc, #132]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	491e      	ldr	r1, [pc, #120]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4a18      	ldr	r2, [pc, #96]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d015      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a74:	4b13      	ldr	r3, [pc, #76]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	4910      	ldr	r1, [pc, #64]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d018      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	4902      	ldr	r1, [pc, #8]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006ac2:	e001      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006ac4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad0:	d105      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ad2:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006adc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d015      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006aea:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af8:	4917      	ldr	r1, [pc, #92]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d105      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b0a:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b14:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d015      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b22:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b30:	4909      	ldr	r1, [pc, #36]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b40:	d105      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	4a04      	ldr	r2, [pc, #16]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b4c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40021000 	.word	0x40021000

08006b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e084      	b.n	8006c78 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7fb fcc9 	bl	8002520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bae:	d902      	bls.n	8006bb6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e002      	b.n	8006bbc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bc4:	d007      	beq.n	8006bd6 <HAL_SPI_Init+0x7a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bce:	d002      	beq.n	8006bd6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10b      	bne.n	8006bf6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006be6:	d903      	bls.n	8006bf0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
 8006bee:	e002      	b.n	8006bf6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	ea42 0103 	orr.w	r1, r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	0c1b      	lsrs	r3, r3, #16
 8006c36:	f003 0204 	and.w	r2, r3, #4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	ea42 0103 	orr.w	r1, r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69da      	ldr	r2, [r3, #28]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_SPI_Transmit+0x22>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e150      	b.n	8006f44 <HAL_SPI_Transmit+0x2c4>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006caa:	f7fc fa4f 	bl	800314c <HAL_GetTick>
 8006cae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d002      	beq.n	8006cc6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cc4:	e135      	b.n	8006f32 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <HAL_SPI_Transmit+0x52>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd6:	e12c      	b.n	8006f32 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2203      	movs	r2, #3
 8006cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d22:	d107      	bne.n	8006d34 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d007      	beq.n	8006d52 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d5a:	d94b      	bls.n	8006df4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <HAL_SPI_Transmit+0xea>
 8006d64:	8afb      	ldrh	r3, [r7, #22]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d13e      	bne.n	8006de8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	881a      	ldrh	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	1c9a      	adds	r2, r3, #2
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d8e:	e02b      	b.n	8006de8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d112      	bne.n	8006dc4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	881a      	ldrh	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	1c9a      	adds	r2, r3, #2
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dc2:	e011      	b.n	8006de8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc4:	f7fc f9c2 	bl	800314c <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d803      	bhi.n	8006ddc <HAL_SPI_Transmit+0x15c>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dda:	d102      	bne.n	8006de2 <HAL_SPI_Transmit+0x162>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006de6:	e0a4      	b.n	8006f32 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1ce      	bne.n	8006d90 <HAL_SPI_Transmit+0x110>
 8006df2:	e07c      	b.n	8006eee <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_SPI_Transmit+0x182>
 8006dfc:	8afb      	ldrh	r3, [r7, #22]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d170      	bne.n	8006ee4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d912      	bls.n	8006e32 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	881a      	ldrh	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	1c9a      	adds	r2, r3, #2
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b02      	subs	r3, #2
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e30:	e058      	b.n	8006ee4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e58:	e044      	b.n	8006ee4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d12b      	bne.n	8006ec0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d912      	bls.n	8006e98 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b02      	subs	r3, #2
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e96:	e025      	b.n	8006ee4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ebe:	e011      	b.n	8006ee4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec0:	f7fc f944 	bl	800314c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d803      	bhi.n	8006ed8 <HAL_SPI_Transmit+0x258>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_Transmit+0x25e>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ee2:	e026      	b.n	8006f32 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1b5      	bne.n	8006e5a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 f901 	bl	80070fa <SPI_EndRxTxTransaction>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e000      	b.n	8006f32 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006f30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f42:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3720      	adds	r7, #32
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f5c:	e04c      	b.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f64:	d048      	beq.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f66:	f7fc f8f1 	bl	800314c <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d902      	bls.n	8006f7c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d13d      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f94:	d111      	bne.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f9e:	d004      	beq.n	8006faa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa8:	d107      	bne.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc2:	d10f      	bne.n	8006fe4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e00f      	b.n	8007018 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4013      	ands	r3, r2
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	429a      	cmp	r2, r3
 8007006:	bf0c      	ite	eq
 8007008:	2301      	moveq	r3, #1
 800700a:	2300      	movne	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	429a      	cmp	r2, r3
 8007014:	d1a3      	bne.n	8006f5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800702e:	e057      	b.n	80070e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007036:	d106      	bne.n	8007046 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704c:	d048      	beq.n	80070e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800704e:	f7fc f87d 	bl	800314c <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d902      	bls.n	8007064 <SPI_WaitFifoStateUntilTimeout+0x44>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d13d      	bne.n	80070e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707c:	d111      	bne.n	80070a2 <SPI_WaitFifoStateUntilTimeout+0x82>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007086:	d004      	beq.n	8007092 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007090:	d107      	bne.n	80070a2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070aa:	d10f      	bne.n	80070cc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e008      	b.n	80070f2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4013      	ands	r3, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d19f      	bne.n	8007030 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af02      	add	r7, sp, #8
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2200      	movs	r2, #0
 800710e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff ff84 	bl	8007020 <SPI_WaitFifoStateUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007122:	f043 0220 	orr.w	r2, r3, #32
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e027      	b.n	800717e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2200      	movs	r2, #0
 8007136:	2180      	movs	r1, #128	; 0x80
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff ff07 	bl	8006f4c <SPI_WaitFlagStateUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007148:	f043 0220 	orr.w	r2, r3, #32
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e014      	b.n	800717e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff ff5d 	bl	8007020 <SPI_WaitFifoStateUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007170:	f043 0220 	orr.w	r2, r3, #32
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e000      	b.n	800717e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e049      	b.n	800722c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fb fe7b 	bl	8002ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2202      	movs	r2, #2
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f000 fc51 	bl	8007a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b01      	cmp	r3, #1
 8007246:	d001      	beq.n	800724c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e019      	b.n	8007280 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	4b0c      	ldr	r3, [pc, #48]	; (800728c <HAL_TIM_Base_Start+0x58>)
 800725c:	4013      	ands	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b06      	cmp	r3, #6
 8007264:	d00b      	beq.n	800727e <HAL_TIM_Base_Start+0x4a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726c:	d007      	beq.n	800727e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	00010007 	.word	0x00010007

08007290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d001      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e021      	b.n	80072ec <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <HAL_TIM_Base_Start_IT+0x68>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b06      	cmp	r3, #6
 80072d0:	d00b      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x5a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d8:	d007      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0201 	orr.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	00010007 	.word	0x00010007

080072fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0201 	bic.w	r2, r2, #1
 8007312:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6a1a      	ldr	r2, [r3, #32]
 800731a:	f241 1311 	movw	r3, #4369	; 0x1111
 800731e:	4013      	ands	r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10f      	bne.n	8007344 <HAL_TIM_Base_Stop_IT+0x48>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6a1a      	ldr	r2, [r3, #32]
 800732a:	f244 4344 	movw	r3, #17476	; 0x4444
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d107      	bne.n	8007344 <HAL_TIM_Base_Stop_IT+0x48>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0201 	bic.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b086      	sub	sp, #24
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e097      	b.n	800749e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fb fd34 	bl	8002df0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6812      	ldr	r2, [r2, #0]
 800739a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800739e:	f023 0307 	bic.w	r3, r3, #7
 80073a2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f000 fb5c 	bl	8007a6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073dc:	f023 0303 	bic.w	r3, r3, #3
 80073e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	4313      	orrs	r3, r2
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80073fa:	f023 030c 	bic.w	r3, r3, #12
 80073fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800740a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	4313      	orrs	r3, r2
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	011a      	lsls	r2, r3, #4
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	031b      	lsls	r3, r3, #12
 800742a:	4313      	orrs	r3, r2
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007438:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007440:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	4313      	orrs	r3, r2
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d122      	bne.n	8007502 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d11b      	bne.n	8007502 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f06f 0202 	mvn.w	r2, #2
 80074d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 faa1 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 80074ee:	e005      	b.n	80074fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa93 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 faa4 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b04      	cmp	r3, #4
 800750e:	d122      	bne.n	8007556 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b04      	cmp	r3, #4
 800751c:	d11b      	bne.n	8007556 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f06f 0204 	mvn.w	r2, #4
 8007526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fa77 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 8007542:	e005      	b.n	8007550 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fa69 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa7a 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b08      	cmp	r3, #8
 8007562:	d122      	bne.n	80075aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b08      	cmp	r3, #8
 8007570:	d11b      	bne.n	80075aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f06f 0208 	mvn.w	r2, #8
 800757a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2204      	movs	r2, #4
 8007580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fa4d 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 8007596:	e005      	b.n	80075a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fa3f 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa50 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	d122      	bne.n	80075fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d11b      	bne.n	80075fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f06f 0210 	mvn.w	r2, #16
 80075ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2208      	movs	r2, #8
 80075d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fa23 	bl	8007a30 <HAL_TIM_IC_CaptureCallback>
 80075ea:	e005      	b.n	80075f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fa15 	bl	8007a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa26 	bl	8007a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10e      	bne.n	800762a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b01      	cmp	r3, #1
 8007618:	d107      	bne.n	800762a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f06f 0201 	mvn.w	r2, #1
 8007622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f9ef 	bl	8007a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007634:	2b80      	cmp	r3, #128	; 0x80
 8007636:	d10e      	bne.n	8007656 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d107      	bne.n	8007656 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800764e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fd5d 	bl	8008110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d10e      	bne.n	8007684 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	2b80      	cmp	r3, #128	; 0x80
 8007672:	d107      	bne.n	8007684 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800767c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fd50 	bl	8008124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d10e      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769c:	2b40      	cmp	r3, #64	; 0x40
 800769e:	d107      	bne.n	80076b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f9d4 	bl	8007a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d10e      	bne.n	80076dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f06f 0220 	mvn.w	r2, #32
 80076d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fd10 	bl	80080fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ea:	d10f      	bne.n	800770c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076fa:	d107      	bne.n	800770c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fd16 	bl	8008138 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800771a:	d10f      	bne.n	800773c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800772a:	d107      	bne.n	800773c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fd08 	bl	800814c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800774a:	d10f      	bne.n	800776c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800775a:	d107      	bne.n	800776c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fcfa 	bl	8008160 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800777a:	d10f      	bne.n	800779c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007786:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800778a:	d107      	bne.n	800779c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fcec 	bl	8008174 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIM_ConfigClockSource+0x18>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e0d2      	b.n	8007962 <HAL_TIM_ConfigClockSource+0x1be>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80077da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f8:	f000 80a9 	beq.w	800794e <HAL_TIM_ConfigClockSource+0x1aa>
 80077fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007800:	d81a      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x94>
 8007802:	2b30      	cmp	r3, #48	; 0x30
 8007804:	f000 809a 	beq.w	800793c <HAL_TIM_ConfigClockSource+0x198>
 8007808:	2b30      	cmp	r3, #48	; 0x30
 800780a:	d809      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x7c>
 800780c:	2b10      	cmp	r3, #16
 800780e:	f000 8095 	beq.w	800793c <HAL_TIM_ConfigClockSource+0x198>
 8007812:	2b20      	cmp	r3, #32
 8007814:	f000 8092 	beq.w	800793c <HAL_TIM_ConfigClockSource+0x198>
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 808f 	beq.w	800793c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800781e:	e097      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007820:	2b50      	cmp	r3, #80	; 0x50
 8007822:	d05b      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x138>
 8007824:	2b50      	cmp	r3, #80	; 0x50
 8007826:	d802      	bhi.n	800782e <HAL_TIM_ConfigClockSource+0x8a>
 8007828:	2b40      	cmp	r3, #64	; 0x40
 800782a:	d077      	beq.n	800791c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800782c:	e090      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800782e:	2b60      	cmp	r3, #96	; 0x60
 8007830:	d064      	beq.n	80078fc <HAL_TIM_ConfigClockSource+0x158>
 8007832:	2b70      	cmp	r3, #112	; 0x70
 8007834:	d028      	beq.n	8007888 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8007836:	e08b      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007838:	4a4c      	ldr	r2, [pc, #304]	; (800796c <HAL_TIM_ConfigClockSource+0x1c8>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d07e      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
 800783e:	4a4b      	ldr	r2, [pc, #300]	; (800796c <HAL_TIM_ConfigClockSource+0x1c8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d810      	bhi.n	8007866 <HAL_TIM_ConfigClockSource+0xc2>
 8007844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007848:	d078      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784e:	d803      	bhi.n	8007858 <HAL_TIM_ConfigClockSource+0xb4>
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007854:	d02f      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8007856:	e07b      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007858:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800785c:	d06e      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
 800785e:	4a44      	ldr	r2, [pc, #272]	; (8007970 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d06b      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007864:	e074      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007866:	4a43      	ldr	r2, [pc, #268]	; (8007974 <HAL_TIM_ConfigClockSource+0x1d0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d067      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
 800786c:	4a41      	ldr	r2, [pc, #260]	; (8007974 <HAL_TIM_ConfigClockSource+0x1d0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d803      	bhi.n	800787a <HAL_TIM_ConfigClockSource+0xd6>
 8007872:	4a41      	ldr	r2, [pc, #260]	; (8007978 <HAL_TIM_ConfigClockSource+0x1d4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d061      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007878:	e06a      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800787a:	4a40      	ldr	r2, [pc, #256]	; (800797c <HAL_TIM_ConfigClockSource+0x1d8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d05d      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
 8007880:	4a3f      	ldr	r2, [pc, #252]	; (8007980 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d05a      	beq.n	800793c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007886:	e063      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	6899      	ldr	r1, [r3, #8]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f000 fac8 	bl	8007e2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	609a      	str	r2, [r3, #8]
      break;
 80078b4:	e04c      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6899      	ldr	r1, [r3, #8]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f000 fab1 	bl	8007e2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078d8:	609a      	str	r2, [r3, #8]
      break;
 80078da:	e039      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6859      	ldr	r1, [r3, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f000 fa23 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2150      	movs	r1, #80	; 0x50
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fa7c 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 80078fa:	e029      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	6859      	ldr	r1, [r3, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	461a      	mov	r2, r3
 800790a:	f000 fa42 	bl	8007d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2160      	movs	r1, #96	; 0x60
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fa6c 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 800791a:	e019      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	6859      	ldr	r1, [r3, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	461a      	mov	r2, r3
 800792a:	f000 fa03 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2140      	movs	r1, #64	; 0x40
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fa5c 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 800793a:	e009      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f000 fa53 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 800794c:	e000      	b.n	8007950 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800794e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	00100030 	.word	0x00100030
 8007970:	00100020 	.word	0x00100020
 8007974:	00100050 	.word	0x00100050
 8007978:	00100040 	.word	0x00100040
 800797c:	00100060 	.word	0x00100060
 8007980:	00100070 	.word	0x00100070

08007984 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007998:	2302      	movs	r3, #2
 800799a:	e031      	b.n	8007a00 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f904 	bl	8007bbc <TIM_SlaveTimer_SetConfig>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e018      	b.n	8007a00 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079dc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079ec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a46      	ldr	r2, [pc, #280]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d017      	beq.n	8007ab4 <TIM_Base_SetConfig+0x48>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8a:	d013      	beq.n	8007ab4 <TIM_Base_SetConfig+0x48>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a43      	ldr	r2, [pc, #268]	; (8007b9c <TIM_Base_SetConfig+0x130>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00f      	beq.n	8007ab4 <TIM_Base_SetConfig+0x48>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a42      	ldr	r2, [pc, #264]	; (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00b      	beq.n	8007ab4 <TIM_Base_SetConfig+0x48>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a41      	ldr	r2, [pc, #260]	; (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d007      	beq.n	8007ab4 <TIM_Base_SetConfig+0x48>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a40      	ldr	r2, [pc, #256]	; (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d003      	beq.n	8007ab4 <TIM_Base_SetConfig+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a3f      	ldr	r2, [pc, #252]	; (8007bac <TIM_Base_SetConfig+0x140>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d108      	bne.n	8007ac6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a33      	ldr	r2, [pc, #204]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d023      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d01f      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a30      	ldr	r2, [pc, #192]	; (8007b9c <TIM_Base_SetConfig+0x130>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d01b      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2f      	ldr	r2, [pc, #188]	; (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d017      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2e      	ldr	r2, [pc, #184]	; (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d013      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2d      	ldr	r2, [pc, #180]	; (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00f      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a2d      	ldr	r2, [pc, #180]	; (8007bb0 <TIM_Base_SetConfig+0x144>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00b      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2c      	ldr	r2, [pc, #176]	; (8007bb4 <TIM_Base_SetConfig+0x148>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d007      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a2b      	ldr	r2, [pc, #172]	; (8007bb8 <TIM_Base_SetConfig+0x14c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_Base_SetConfig+0xaa>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a26      	ldr	r2, [pc, #152]	; (8007bac <TIM_Base_SetConfig+0x140>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d108      	bne.n	8007b28 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a12      	ldr	r2, [pc, #72]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d013      	beq.n	8007b7c <TIM_Base_SetConfig+0x110>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a14      	ldr	r2, [pc, #80]	; (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00f      	beq.n	8007b7c <TIM_Base_SetConfig+0x110>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a14      	ldr	r2, [pc, #80]	; (8007bb0 <TIM_Base_SetConfig+0x144>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00b      	beq.n	8007b7c <TIM_Base_SetConfig+0x110>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a13      	ldr	r2, [pc, #76]	; (8007bb4 <TIM_Base_SetConfig+0x148>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d007      	beq.n	8007b7c <TIM_Base_SetConfig+0x110>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a12      	ldr	r2, [pc, #72]	; (8007bb8 <TIM_Base_SetConfig+0x14c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_Base_SetConfig+0x110>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a0d      	ldr	r2, [pc, #52]	; (8007bac <TIM_Base_SetConfig+0x140>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d103      	bne.n	8007b84 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	615a      	str	r2, [r3, #20]
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40012c00 	.word	0x40012c00
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40013400 	.word	0x40013400
 8007bac:	40015000 	.word	0x40015000
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800

08007bbc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bea:	f023 0307 	bic.w	r3, r3, #7
 8007bee:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b70      	cmp	r3, #112	; 0x70
 8007c08:	d034      	beq.n	8007c74 <TIM_SlaveTimer_SetConfig+0xb8>
 8007c0a:	2b70      	cmp	r3, #112	; 0x70
 8007c0c:	d811      	bhi.n	8007c32 <TIM_SlaveTimer_SetConfig+0x76>
 8007c0e:	2b30      	cmp	r3, #48	; 0x30
 8007c10:	d07d      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c12:	2b30      	cmp	r3, #48	; 0x30
 8007c14:	d806      	bhi.n	8007c24 <TIM_SlaveTimer_SetConfig+0x68>
 8007c16:	2b10      	cmp	r3, #16
 8007c18:	d079      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c1a:	2b20      	cmp	r3, #32
 8007c1c:	d077      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d075      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8007c22:	e075      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c24:	2b50      	cmp	r3, #80	; 0x50
 8007c26:	d05e      	beq.n	8007ce6 <TIM_SlaveTimer_SetConfig+0x12a>
 8007c28:	2b60      	cmp	r3, #96	; 0x60
 8007c2a:	d066      	beq.n	8007cfa <TIM_SlaveTimer_SetConfig+0x13e>
 8007c2c:	2b40      	cmp	r3, #64	; 0x40
 8007c2e:	d02c      	beq.n	8007c8a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8007c30:	e06e      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c32:	4a3a      	ldr	r2, [pc, #232]	; (8007d1c <TIM_SlaveTimer_SetConfig+0x160>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d06a      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c38:	4a38      	ldr	r2, [pc, #224]	; (8007d1c <TIM_SlaveTimer_SetConfig+0x160>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d809      	bhi.n	8007c52 <TIM_SlaveTimer_SetConfig+0x96>
 8007c3e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c42:	d064      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c44:	4a36      	ldr	r2, [pc, #216]	; (8007d20 <TIM_SlaveTimer_SetConfig+0x164>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d061      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c4e:	d05e      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007c50:	e05e      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c52:	4a34      	ldr	r2, [pc, #208]	; (8007d24 <TIM_SlaveTimer_SetConfig+0x168>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d05a      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c58:	4a32      	ldr	r2, [pc, #200]	; (8007d24 <TIM_SlaveTimer_SetConfig+0x168>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d803      	bhi.n	8007c66 <TIM_SlaveTimer_SetConfig+0xaa>
 8007c5e:	4a32      	ldr	r2, [pc, #200]	; (8007d28 <TIM_SlaveTimer_SetConfig+0x16c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d054      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007c64:	e054      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c66:	4a31      	ldr	r2, [pc, #196]	; (8007d2c <TIM_SlaveTimer_SetConfig+0x170>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d050      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
 8007c6c:	4a30      	ldr	r2, [pc, #192]	; (8007d30 <TIM_SlaveTimer_SetConfig+0x174>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d04d      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007c72:	e04d      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68d9      	ldr	r1, [r3, #12]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f000 f8d2 	bl	8007e2c <TIM_ETR_SetConfig>
      break;
 8007c88:	e042      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d004      	beq.n	8007c9c <TIM_SlaveTimer_SetConfig+0xe0>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007c9a:	d101      	bne.n	8007ca0 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e038      	b.n	8007d12 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0201 	bic.w	r2, r2, #1
 8007cb6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	621a      	str	r2, [r3, #32]
      break;
 8007ce4:	e014      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6899      	ldr	r1, [r3, #8]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f000 f81e 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      break;
 8007cf8:	e00a      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6899      	ldr	r1, [r3, #8]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f000 f843 	bl	8007d92 <TIM_TI2_ConfigInputStage>
      break;
 8007d0c:	e000      	b.n	8007d10 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8007d0e:	bf00      	nop
  }
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	00100030 	.word	0x00100030
 8007d20:	00100020 	.word	0x00100020
 8007d24:	00100050 	.word	0x00100050
 8007d28:	00100040 	.word	0x00100040
 8007d2c:	00100060 	.word	0x00100060
 8007d30:	00100070 	.word	0x00100070

08007d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 030a 	bic.w	r3, r3, #10
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	f023 0210 	bic.w	r2, r3, #16
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f043 0307 	orr.w	r3, r3, #7
 8007e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	609a      	str	r2, [r3, #8]
}
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	021a      	lsls	r2, r3, #8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	609a      	str	r2, [r3, #8]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e074      	b.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a34      	ldr	r2, [pc, #208]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d009      	beq.n	8007ec2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a33      	ldr	r2, [pc, #204]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d004      	beq.n	8007ec2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a31      	ldr	r2, [pc, #196]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d108      	bne.n	8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ec8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a21      	ldr	r2, [pc, #132]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d022      	beq.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f04:	d01d      	beq.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1f      	ldr	r2, [pc, #124]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d018      	beq.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1d      	ldr	r2, [pc, #116]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d013      	beq.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00e      	beq.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a15      	ldr	r2, [pc, #84]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d009      	beq.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a18      	ldr	r2, [pc, #96]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d004      	beq.n	8007f42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a11      	ldr	r2, [pc, #68]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d10c      	bne.n	8007f5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40013400 	.word	0x40013400
 8007f84:	40015000 	.word	0x40015000
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40000800 	.word	0x40000800
 8007f90:	40000c00 	.word	0x40000c00
 8007f94:	40014000 	.word	0x40014000

08007f98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e096      	b.n	80080e2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a2f      	ldr	r2, [pc, #188]	; (80080f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d009      	beq.n	800804c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a2d      	ldr	r2, [pc, #180]	; (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d004      	beq.n	800804c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a2c      	ldr	r2, [pc, #176]	; (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d106      	bne.n	800805a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a24      	ldr	r2, [pc, #144]	; (80080f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d009      	beq.n	8008078 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a22      	ldr	r2, [pc, #136]	; (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a21      	ldr	r2, [pc, #132]	; (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d12b      	bne.n	80080d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	051b      	lsls	r3, r3, #20
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a11      	ldr	r2, [pc, #68]	; (80080f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d009      	beq.n	80080c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a10      	ldr	r2, [pc, #64]	; (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d004      	beq.n	80080c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a0e      	ldr	r2, [pc, #56]	; (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d106      	bne.n	80080d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40013400 	.word	0x40013400
 80080f8:	40015000 	.word	0x40015000

080080fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <LL_EXTI_EnableIT_0_31>:
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	4904      	ldr	r1, [pc, #16]	; (80081a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4313      	orrs	r3, r2
 800819a:	600b      	str	r3, [r1, #0]
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	40010400 	.word	0x40010400

080081ac <LL_EXTI_EnableIT_32_63>:
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <LL_EXTI_EnableIT_32_63+0x20>)
 80081b6:	6a1a      	ldr	r2, [r3, #32]
 80081b8:	4904      	ldr	r1, [pc, #16]	; (80081cc <LL_EXTI_EnableIT_32_63+0x20>)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4313      	orrs	r3, r2
 80081be:	620b      	str	r3, [r1, #32]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	40010400 	.word	0x40010400

080081d0 <LL_EXTI_DisableIT_0_31>:
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	43db      	mvns	r3, r3
 80081e0:	4904      	ldr	r1, [pc, #16]	; (80081f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	600b      	str	r3, [r1, #0]
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	40010400 	.word	0x40010400

080081f8 <LL_EXTI_DisableIT_32_63>:
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <LL_EXTI_DisableIT_32_63+0x24>)
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	43db      	mvns	r3, r3
 8008208:	4904      	ldr	r1, [pc, #16]	; (800821c <LL_EXTI_DisableIT_32_63+0x24>)
 800820a:	4013      	ands	r3, r2
 800820c:	620b      	str	r3, [r1, #32]
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	40010400 	.word	0x40010400

08008220 <LL_EXTI_EnableEvent_0_31>:
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008228:	4b05      	ldr	r3, [pc, #20]	; (8008240 <LL_EXTI_EnableEvent_0_31+0x20>)
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <LL_EXTI_EnableEvent_0_31+0x20>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4313      	orrs	r3, r2
 8008232:	604b      	str	r3, [r1, #4]
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	40010400 	.word	0x40010400

08008244 <LL_EXTI_EnableEvent_32_63>:
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <LL_EXTI_EnableEvent_32_63+0x20>)
 800824e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008250:	4904      	ldr	r1, [pc, #16]	; (8008264 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4313      	orrs	r3, r2
 8008256:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40010400 	.word	0x40010400

08008268 <LL_EXTI_DisableEvent_0_31>:
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008270:	4b06      	ldr	r3, [pc, #24]	; (800828c <LL_EXTI_DisableEvent_0_31+0x24>)
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	43db      	mvns	r3, r3
 8008278:	4904      	ldr	r1, [pc, #16]	; (800828c <LL_EXTI_DisableEvent_0_31+0x24>)
 800827a:	4013      	ands	r3, r2
 800827c:	604b      	str	r3, [r1, #4]
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40010400 	.word	0x40010400

08008290 <LL_EXTI_DisableEvent_32_63>:
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008298:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800829a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	43db      	mvns	r3, r3
 80082a0:	4904      	ldr	r1, [pc, #16]	; (80082b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40010400 	.word	0x40010400

080082b8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	4904      	ldr	r1, [pc, #16]	; (80082d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	608b      	str	r3, [r1, #8]
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	40010400 	.word	0x40010400

080082dc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80082e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082e8:	4904      	ldr	r1, [pc, #16]	; (80082fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	628b      	str	r3, [r1, #40]	; 0x28
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	40010400 	.word	0x40010400

08008300 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	43db      	mvns	r3, r3
 8008310:	4904      	ldr	r1, [pc, #16]	; (8008324 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008312:	4013      	ands	r3, r2
 8008314:	608b      	str	r3, [r1, #8]
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40010400 	.word	0x40010400

08008328 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008330:	4b06      	ldr	r3, [pc, #24]	; (800834c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	43db      	mvns	r3, r3
 8008338:	4904      	ldr	r1, [pc, #16]	; (800834c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800833a:	4013      	ands	r3, r2
 800833c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40010400 	.word	0x40010400

08008350 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	4904      	ldr	r1, [pc, #16]	; (8008370 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4313      	orrs	r3, r2
 8008362:	60cb      	str	r3, [r1, #12]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	40010400 	.word	0x40010400

08008374 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800837e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008380:	4904      	ldr	r1, [pc, #16]	; (8008394 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4313      	orrs	r3, r2
 8008386:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40010400 	.word	0x40010400

08008398 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	43db      	mvns	r3, r3
 80083a8:	4904      	ldr	r1, [pc, #16]	; (80083bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	60cb      	str	r3, [r1, #12]
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40010400 	.word	0x40010400

080083c0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80083c8:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80083ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	43db      	mvns	r3, r3
 80083d0:	4904      	ldr	r1, [pc, #16]	; (80083e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40010400 	.word	0x40010400

080083e8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7a1b      	ldrb	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80c8 	beq.w	800858e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d05d      	beq.n	80084c2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7a5b      	ldrb	r3, [r3, #9]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d00e      	beq.n	800842c <LL_EXTI_Init+0x44>
 800840e:	2b02      	cmp	r3, #2
 8008410:	d017      	beq.n	8008442 <LL_EXTI_Init+0x5a>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d120      	bne.n	8008458 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff ff24 	bl	8008268 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff feaf 	bl	8008188 <LL_EXTI_EnableIT_0_31>
          break;
 800842a:	e018      	b.n	800845e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fecd 	bl	80081d0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fef0 	bl	8008220 <LL_EXTI_EnableEvent_0_31>
          break;
 8008440:	e00d      	b.n	800845e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fe9e 	bl	8008188 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fee5 	bl	8008220 <LL_EXTI_EnableEvent_0_31>
          break;
 8008456:	e002      	b.n	800845e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8008458:	2301      	movs	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
          break;
 800845c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	7a9b      	ldrb	r3, [r3, #10]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d02d      	beq.n	80084c2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	7a9b      	ldrb	r3, [r3, #10]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d00e      	beq.n	800848c <LL_EXTI_Init+0xa4>
 800846e:	2b03      	cmp	r3, #3
 8008470:	d017      	beq.n	80084a2 <LL_EXTI_Init+0xba>
 8008472:	2b01      	cmp	r3, #1
 8008474:	d120      	bne.n	80084b8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff ff8c 	bl	8008398 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ff17 	bl	80082b8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800848a:	e01b      	b.n	80084c4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff ff35 	bl	8008300 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff ff58 	bl	8008350 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80084a0:	e010      	b.n	80084c4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff ff06 	bl	80082b8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff ff4d 	bl	8008350 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80084b6:	e005      	b.n	80084c4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	60fb      	str	r3, [r7, #12]
            break;
 80084c0:	e000      	b.n	80084c4 <LL_EXTI_Init+0xdc>
        }
      }
 80084c2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d075      	beq.n	80085b8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7a5b      	ldrb	r3, [r3, #9]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d00e      	beq.n	80084f2 <LL_EXTI_Init+0x10a>
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d017      	beq.n	8008508 <LL_EXTI_Init+0x120>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d120      	bne.n	800851e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fed5 	bl	8008290 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fe5e 	bl	80081ac <LL_EXTI_EnableIT_32_63>
          break;
 80084f0:	e01a      	b.n	8008528 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fe7e 	bl	80081f8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff fe9f 	bl	8008244 <LL_EXTI_EnableEvent_32_63>
          break;
 8008506:	e00f      	b.n	8008528 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff fe4d 	bl	80081ac <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fe94 	bl	8008244 <LL_EXTI_EnableEvent_32_63>
          break;
 800851c:	e004      	b.n	8008528 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f043 0304 	orr.w	r3, r3, #4
 8008524:	60fb      	str	r3, [r7, #12]
          break;
 8008526:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7a9b      	ldrb	r3, [r3, #10]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d043      	beq.n	80085b8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	7a9b      	ldrb	r3, [r3, #10]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d00e      	beq.n	8008556 <LL_EXTI_Init+0x16e>
 8008538:	2b03      	cmp	r3, #3
 800853a:	d017      	beq.n	800856c <LL_EXTI_Init+0x184>
 800853c:	2b01      	cmp	r3, #1
 800853e:	d120      	bne.n	8008582 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff ff3b 	bl	80083c0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fec4 	bl	80082dc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8008554:	e031      	b.n	80085ba <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fee4 	bl	8008328 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff ff05 	bl	8008374 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800856a:	e026      	b.n	80085ba <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff feb3 	bl	80082dc <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff fefa 	bl	8008374 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8008580:	e01b      	b.n	80085ba <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f043 0305 	orr.w	r3, r3, #5
 8008588:	60fb      	str	r3, [r7, #12]
            break;
 800858a:	bf00      	nop
 800858c:	e015      	b.n	80085ba <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fe1c 	bl	80081d0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fe63 	bl	8008268 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fe26 	bl	80081f8 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff fe6d 	bl	8008290 <LL_EXTI_DisableEvent_32_63>
 80085b6:	e000      	b.n	80085ba <LL_EXTI_Init+0x1d2>
      }
 80085b8:	bf00      	nop
  }

  return status;
 80085ba:	68fb      	ldr	r3, [r7, #12]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <LL_GPIO_SetPinMode>:
{
 80085c4:	b480      	push	{r7}
 80085c6:	b089      	sub	sp, #36	; 0x24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	fa93 f3a3 	rbit	r3, r3
 80085de:	613b      	str	r3, [r7, #16]
  return result;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	fab3 f383 	clz	r3, r3
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	2103      	movs	r1, #3
 80085ec:	fa01 f303 	lsl.w	r3, r1, r3
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	fa93 f3a3 	rbit	r3, r3
 80085fe:	61bb      	str	r3, [r7, #24]
  return result;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	fab3 f383 	clz	r3, r3
 8008606:	b2db      	uxtb	r3, r3
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	fa01 f303 	lsl.w	r3, r1, r3
 8008610:	431a      	orrs	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	601a      	str	r2, [r3, #0]
}
 8008616:	bf00      	nop
 8008618:	3724      	adds	r7, #36	; 0x24
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <LL_GPIO_SetPinOutputType>:
{
 8008622:	b480      	push	{r7}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	43db      	mvns	r3, r3
 8008636:	401a      	ands	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	431a      	orrs	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <LL_GPIO_SetPinSpeed>:
{
 8008652:	b480      	push	{r7}
 8008654:	b089      	sub	sp, #36	; 0x24
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	fa93 f3a3 	rbit	r3, r3
 800866c:	613b      	str	r3, [r7, #16]
  return result;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	fab3 f383 	clz	r3, r3
 8008674:	b2db      	uxtb	r3, r3
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	2103      	movs	r1, #3
 800867a:	fa01 f303 	lsl.w	r3, r1, r3
 800867e:	43db      	mvns	r3, r3
 8008680:	401a      	ands	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	fa93 f3a3 	rbit	r3, r3
 800868c:	61bb      	str	r3, [r7, #24]
  return result;
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	fab3 f383 	clz	r3, r3
 8008694:	b2db      	uxtb	r3, r3
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	fa01 f303 	lsl.w	r3, r1, r3
 800869e:	431a      	orrs	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	609a      	str	r2, [r3, #8]
}
 80086a4:	bf00      	nop
 80086a6:	3724      	adds	r7, #36	; 0x24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <LL_GPIO_SetPinPull>:
{
 80086b0:	b480      	push	{r7}
 80086b2:	b089      	sub	sp, #36	; 0x24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68da      	ldr	r2, [r3, #12]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	fa93 f3a3 	rbit	r3, r3
 80086ca:	613b      	str	r3, [r7, #16]
  return result;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	fab3 f383 	clz	r3, r3
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	2103      	movs	r1, #3
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	43db      	mvns	r3, r3
 80086de:	401a      	ands	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	fa93 f3a3 	rbit	r3, r3
 80086ea:	61bb      	str	r3, [r7, #24]
  return result;
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	fab3 f383 	clz	r3, r3
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	60da      	str	r2, [r3, #12]
}
 8008702:	bf00      	nop
 8008704:	3724      	adds	r7, #36	; 0x24
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <LL_GPIO_SetAFPin_0_7>:
{
 800870e:	b480      	push	{r7}
 8008710:	b089      	sub	sp, #36	; 0x24
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1a      	ldr	r2, [r3, #32]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	fa93 f3a3 	rbit	r3, r3
 8008728:	613b      	str	r3, [r7, #16]
  return result;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	fab3 f383 	clz	r3, r3
 8008730:	b2db      	uxtb	r3, r3
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	210f      	movs	r1, #15
 8008736:	fa01 f303 	lsl.w	r3, r1, r3
 800873a:	43db      	mvns	r3, r3
 800873c:	401a      	ands	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	fa93 f3a3 	rbit	r3, r3
 8008748:	61bb      	str	r3, [r7, #24]
  return result;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	fab3 f383 	clz	r3, r3
 8008750:	b2db      	uxtb	r3, r3
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	fa01 f303 	lsl.w	r3, r1, r3
 800875a:	431a      	orrs	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	bf00      	nop
 8008762:	3724      	adds	r7, #36	; 0x24
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <LL_GPIO_SetAFPin_8_15>:
{
 800876c:	b480      	push	{r7}
 800876e:	b089      	sub	sp, #36	; 0x24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	0a1b      	lsrs	r3, r3, #8
 8008780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	fa93 f3a3 	rbit	r3, r3
 8008788:	613b      	str	r3, [r7, #16]
  return result;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	fab3 f383 	clz	r3, r3
 8008790:	b2db      	uxtb	r3, r3
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	210f      	movs	r1, #15
 8008796:	fa01 f303 	lsl.w	r3, r1, r3
 800879a:	43db      	mvns	r3, r3
 800879c:	401a      	ands	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	0a1b      	lsrs	r3, r3, #8
 80087a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	fa93 f3a3 	rbit	r3, r3
 80087aa:	61bb      	str	r3, [r7, #24]
  return result;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	fab3 f383 	clz	r3, r3
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	fa01 f303 	lsl.w	r3, r1, r3
 80087bc:	431a      	orrs	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80087c2:	bf00      	nop
 80087c4:	3724      	adds	r7, #36	; 0x24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b086      	sub	sp, #24
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	fa93 f3a3 	rbit	r3, r3
 80087e4:	60bb      	str	r3, [r7, #8]
  return result;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	fab3 f383 	clz	r3, r3
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80087f0:	e040      	b.n	8008874 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	2101      	movs	r1, #1
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	fa01 f303 	lsl.w	r3, r1, r3
 80087fe:	4013      	ands	r3, r2
 8008800:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d032      	beq.n	800886e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	461a      	mov	r2, r3
 800880e:	6939      	ldr	r1, [r7, #16]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff fed7 	bl	80085c4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d003      	beq.n	8008826 <LL_GPIO_Init+0x58>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d106      	bne.n	8008834 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	461a      	mov	r2, r3
 800882c:	6939      	ldr	r1, [r7, #16]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff ff0f 	bl	8008652 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	461a      	mov	r2, r3
 800883a:	6939      	ldr	r1, [r7, #16]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff37 	bl	80086b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d111      	bne.n	800886e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2bff      	cmp	r3, #255	; 0xff
 800884e:	d807      	bhi.n	8008860 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	461a      	mov	r2, r3
 8008856:	6939      	ldr	r1, [r7, #16]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff ff58 	bl	800870e <LL_GPIO_SetAFPin_0_7>
 800885e:	e006      	b.n	800886e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	461a      	mov	r2, r3
 8008866:	6939      	ldr	r1, [r7, #16]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff ff7f 	bl	800876c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	3301      	adds	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	fa22 f303 	lsr.w	r3, r2, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1b7      	bne.n	80087f2 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d003      	beq.n	8008892 <LL_GPIO_Init+0xc4>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d107      	bne.n	80088a2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6819      	ldr	r1, [r3, #0]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	461a      	mov	r2, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff fec0 	bl	8008622 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	4611      	mov	r1, r2
 80088b8:	461a      	mov	r2, r3
 80088ba:	4623      	mov	r3, r4
 80088bc:	80fb      	strh	r3, [r7, #6]
 80088be:	4603      	mov	r3, r0
 80088c0:	80bb      	strh	r3, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	807b      	strh	r3, [r7, #2]
 80088c6:	4613      	mov	r3, r2
 80088c8:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80088ce:	7bfa      	ldrb	r2, [r7, #15]
 80088d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d93a      	bls.n	800894e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80088d8:	88ba      	ldrh	r2, [r7, #4]
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	441a      	add	r2, r3
 80088de:	88b9      	ldrh	r1, [r7, #4]
 80088e0:	883b      	ldrh	r3, [r7, #0]
 80088e2:	4419      	add	r1, r3
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	1acb      	subs	r3, r1, r3
 80088e8:	429a      	cmp	r2, r3
 80088ea:	f000 8090 	beq.w	8008a0e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 80088ee:	88fa      	ldrh	r2, [r7, #6]
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	441a      	add	r2, r3
 80088f4:	88f9      	ldrh	r1, [r7, #6]
 80088f6:	887b      	ldrh	r3, [r7, #2]
 80088f8:	4419      	add	r1, r3
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	1acb      	subs	r3, r1, r3
 80088fe:	429a      	cmp	r2, r3
 8008900:	f000 8085 	beq.w	8008a0e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	b29a      	uxth	r2, r3
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	4413      	add	r3, r2
 800890c:	b298      	uxth	r0, r3
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	b29a      	uxth	r2, r3
 8008912:	88bb      	ldrh	r3, [r7, #4]
 8008914:	4413      	add	r3, r2
 8008916:	b299      	uxth	r1, r3
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	b29b      	uxth	r3, r3
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b29b      	uxth	r3, r3
 8008920:	887a      	ldrh	r2, [r7, #2]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	b29b      	uxth	r3, r3
 8008926:	3301      	adds	r3, #1
 8008928:	b29c      	uxth	r4, r3
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	b29b      	uxth	r3, r3
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	b29b      	uxth	r3, r3
 8008932:	883a      	ldrh	r2, [r7, #0]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	b29b      	uxth	r3, r3
 8008938:	3301      	adds	r3, #1
 800893a:	b29a      	uxth	r2, r3
 800893c:	2304      	movs	r3, #4
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	8c3b      	ldrh	r3, [r7, #32]
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	4622      	mov	r2, r4
 8008948:	f000 fcf6 	bl	8009338 <ILI9341_Draw_Rectangle>
				goto finish;
 800894c:	e060      	b.n	8008a10 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	b29a      	uxth	r2, r3
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	4413      	add	r3, r2
 8008956:	b298      	uxth	r0, r3
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	b29a      	uxth	r2, r3
 800895c:	88bb      	ldrh	r3, [r7, #4]
 800895e:	4413      	add	r3, r2
 8008960:	b299      	uxth	r1, r3
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	b29b      	uxth	r3, r3
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	b29b      	uxth	r3, r3
 800896a:	887a      	ldrh	r2, [r7, #2]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	b29a      	uxth	r2, r3
 8008970:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008974:	b29b      	uxth	r3, r3
 8008976:	f000 faa1 	bl	8008ebc <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	b29a      	uxth	r2, r3
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	4413      	add	r3, r2
 8008982:	b298      	uxth	r0, r3
										(y + h) - b,
 8008984:	88ba      	ldrh	r2, [r7, #4]
 8008986:	883b      	ldrh	r3, [r7, #0]
 8008988:	4413      	add	r3, r2
 800898a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	b29b      	uxth	r3, r3
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	b299      	uxth	r1, r3
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	b29b      	uxth	r3, r3
 8008998:	887a      	ldrh	r2, [r7, #2]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	b29a      	uxth	r2, r3
 800899e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	f000 fa8a 	bl	8008ebc <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	4413      	add	r3, r2
 80089b0:	b298      	uxth	r0, r3
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	88bb      	ldrh	r3, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	b299      	uxth	r1, r3
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	883a      	ldrh	r2, [r7, #0]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f000 fabc 	bl	8008f4c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	887b      	ldrh	r3, [r7, #2]
 80089d8:	4413      	add	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	b298      	uxth	r0, r3
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	88bb      	ldrh	r3, [r7, #4]
 80089ea:	4413      	add	r3, r2
 80089ec:	b299      	uxth	r1, r3
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	883a      	ldrh	r2, [r7, #0]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	f000 faa3 	bl	8008f4c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8008a0c:	e75f      	b.n	80088ce <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8008a0e:	bf00      	nop
	// done
	return;
 8008a10:	bf00      	nop
}
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd90      	pop	{r4, r7, pc}

08008a18 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b089      	sub	sp, #36	; 0x24
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	4623      	mov	r3, r4
 8008a28:	71fb      	strb	r3, [r7, #7]
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	80bb      	strh	r3, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	807b      	strh	r3, [r7, #2]
 8008a32:	4613      	mov	r3, r2
 8008a34:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
 8008a3c:	2b1f      	cmp	r3, #31
 8008a3e:	d802      	bhi.n	8008a46 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	71fb      	strb	r3, [r7, #7]
 8008a44:	e002      	b.n	8008a4c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	3b20      	subs	r3, #32
 8008a4a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	753b      	strb	r3, [r7, #20]
 8008a50:	e012      	b.n	8008a78 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8008a52:	7dfa      	ldrb	r2, [r7, #23]
 8008a54:	7d38      	ldrb	r0, [r7, #20]
 8008a56:	7d39      	ldrb	r1, [r7, #20]
 8008a58:	4c48      	ldr	r4, [pc, #288]	; (8008b7c <ILI9341_Draw_Char+0x164>)
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	4413      	add	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4423      	add	r3, r4
 8008a64:	4403      	add	r3, r0
 8008a66:	781a      	ldrb	r2, [r3, #0]
 8008a68:	f107 0318 	add.w	r3, r7, #24
 8008a6c:	440b      	add	r3, r1
 8008a6e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008a72:	7d3b      	ldrb	r3, [r7, #20]
 8008a74:	3301      	adds	r3, #1
 8008a76:	753b      	strb	r3, [r7, #20]
 8008a78:	7d3b      	ldrb	r3, [r7, #20]
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	d9e9      	bls.n	8008a52 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8008a7e:	2300      	movs	r3, #0
 8008a80:	757b      	strb	r3, [r7, #21]
 8008a82:	e074      	b.n	8008b6e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8008a84:	2300      	movs	r3, #0
 8008a86:	75bb      	strb	r3, [r7, #22]
 8008a88:	e06b      	b.n	8008b62 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8008a8a:	7d7b      	ldrb	r3, [r7, #21]
 8008a8c:	f107 0218 	add.w	r2, r7, #24
 8008a90:	4413      	add	r3, r2
 8008a92:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008a96:	461a      	mov	r2, r3
 8008a98:	7dbb      	ldrb	r3, [r7, #22]
 8008a9a:	fa42 f303 	asr.w	r3, r2, r3
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d02d      	beq.n	8008b02 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8008aa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d10e      	bne.n	8008aca <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8008aac:	7d7b      	ldrb	r3, [r7, #21]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	88bb      	ldrh	r3, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	b298      	uxth	r0, r3
 8008ab6:	7dbb      	ldrb	r3, [r7, #22]
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	887b      	ldrh	r3, [r7, #2]
 8008abc:	4413      	add	r3, r2
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	883a      	ldrh	r2, [r7, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f000 fb00 	bl	80090c8 <ILI9341_Draw_Pixel>
 8008ac8:	e048      	b.n	8008b5c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8008aca:	7d7b      	ldrb	r3, [r7, #21]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ad0:	fb12 f303 	smulbb	r3, r2, r3
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	88bb      	ldrh	r3, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	b298      	uxth	r0, r3
 8008adc:	7dbb      	ldrb	r3, [r7, #22]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ae2:	fb12 f303 	smulbb	r3, r2, r3
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	887b      	ldrh	r3, [r7, #2]
 8008aea:	4413      	add	r3, r2
 8008aec:	b299      	uxth	r1, r3
 8008aee:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008af0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008af2:	2301      	movs	r3, #1
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	883b      	ldrh	r3, [r7, #0]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	4623      	mov	r3, r4
 8008afc:	f000 fc1c 	bl	8009338 <ILI9341_Draw_Rectangle>
 8008b00:	e02c      	b.n	8008b5c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8008b02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d10e      	bne.n	8008b26 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8008b08:	7d7b      	ldrb	r3, [r7, #21]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	88bb      	ldrh	r3, [r7, #4]
 8008b0e:	4413      	add	r3, r2
 8008b10:	b298      	uxth	r0, r3
 8008b12:	7dbb      	ldrb	r3, [r7, #22]
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	4413      	add	r3, r2
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f000 fad2 	bl	80090c8 <ILI9341_Draw_Pixel>
 8008b24:	e01a      	b.n	8008b5c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008b26:	7d7b      	ldrb	r3, [r7, #21]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b2c:	fb12 f303 	smulbb	r3, r2, r3
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	88bb      	ldrh	r3, [r7, #4]
 8008b34:	4413      	add	r3, r2
 8008b36:	b298      	uxth	r0, r3
 8008b38:	7dbb      	ldrb	r3, [r7, #22]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b3e:	fb12 f303 	smulbb	r3, r2, r3
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	887b      	ldrh	r3, [r7, #2]
 8008b46:	4413      	add	r3, r2
 8008b48:	b299      	uxth	r1, r3
 8008b4a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008b4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b4e:	2301      	movs	r3, #1
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	4623      	mov	r3, r4
 8008b58:	f000 fbee 	bl	8009338 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8008b5c:	7dbb      	ldrb	r3, [r7, #22]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	75bb      	strb	r3, [r7, #22]
 8008b62:	7dbb      	ldrb	r3, [r7, #22]
 8008b64:	2b07      	cmp	r3, #7
 8008b66:	d990      	bls.n	8008a8a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8008b68:	7d7b      	ldrb	r3, [r7, #21]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	757b      	strb	r3, [r7, #21]
 8008b6e:	7d7b      	ldrb	r3, [r7, #21]
 8008b70:	2b05      	cmp	r3, #5
 8008b72:	d987      	bls.n	8008a84 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8008b74:	bf00      	nop
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd90      	pop	{r4, r7, pc}
 8008b7c:	0800aa84 	.word	0x0800aa84

08008b80 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008b80:	b590      	push	{r4, r7, lr}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	817b      	strh	r3, [r7, #10]
 8008b92:	460b      	mov	r3, r1
 8008b94:	813b      	strh	r3, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8008b9a:	e016      	b.n	8008bca <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	60fa      	str	r2, [r7, #12]
 8008ba2:	7818      	ldrb	r0, [r3, #0]
 8008ba4:	88fc      	ldrh	r4, [r7, #6]
 8008ba6:	893a      	ldrh	r2, [r7, #8]
 8008ba8:	8979      	ldrh	r1, [r7, #10]
 8008baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	8c3b      	ldrh	r3, [r7, #32]
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	f7ff ff30 	bl	8008a18 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008bb8:	8c3b      	ldrh	r3, [r7, #32]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	0052      	lsls	r2, r2, #1
 8008bbe:	4413      	add	r3, r2
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	897b      	ldrh	r3, [r7, #10]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e4      	bne.n	8008b9c <ILI9341_Draw_Text+0x1c>
    }


}
 8008bd2:	bf00      	nop
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd90      	pop	{r4, r7, pc}
	...

08008bdc <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	81bb      	strh	r3, [r7, #12]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	81fb      	strh	r3, [r7, #14]
 8008bea:	e031      	b.n	8008c50 <ILI9341_FillScreenGradient+0x74>
	{
		uint16_t Red = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	817b      	strh	r3, [r7, #10]
		uint16_t Green = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	813b      	strh	r3, [r7, #8]
		uint16_t Blue = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	80fb      	strh	r3, [r7, #6]

		Red = i/(10);
 8008bf8:	89fb      	ldrh	r3, [r7, #14]
 8008bfa:	4a19      	ldr	r2, [pc, #100]	; (8008c60 <ILI9341_FillScreenGradient+0x84>)
 8008bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008c00:	08db      	lsrs	r3, r3, #3
 8008c02:	817b      	strh	r3, [r7, #10]
		Red <<= 11;
 8008c04:	897b      	ldrh	r3, [r7, #10]
 8008c06:	02db      	lsls	r3, r3, #11
 8008c08:	817b      	strh	r3, [r7, #10]
		Green = i/(5);
 8008c0a:	89fb      	ldrh	r3, [r7, #14]
 8008c0c:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <ILI9341_FillScreenGradient+0x84>)
 8008c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c12:	089b      	lsrs	r3, r3, #2
 8008c14:	813b      	strh	r3, [r7, #8]
		Green <<= 5;
 8008c16:	893b      	ldrh	r3, [r7, #8]
 8008c18:	015b      	lsls	r3, r3, #5
 8008c1a:	813b      	strh	r3, [r7, #8]
		Blue = i/(10);
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
 8008c1e:	4a10      	ldr	r2, [pc, #64]	; (8008c60 <ILI9341_FillScreenGradient+0x84>)
 8008c20:	fba2 2303 	umull	r2, r3, r2, r3
 8008c24:	08db      	lsrs	r3, r3, #3
 8008c26:	80fb      	strh	r3, [r7, #6]



		uint16_t RGB_color = Red + Green + Blue;
 8008c28:	897a      	ldrh	r2, [r7, #10]
 8008c2a:	893b      	ldrh	r3, [r7, #8]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	4413      	add	r3, r2
 8008c34:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
 8008c36:	89b9      	ldrh	r1, [r7, #12]
 8008c38:	89f8      	ldrh	r0, [r7, #14]
 8008c3a:	2304      	movs	r3, #4
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	88bb      	ldrh	r3, [r7, #4]
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	23f0      	movs	r3, #240	; 0xf0
 8008c44:	2201      	movs	r2, #1
 8008c46:	f000 fb77 	bl	8009338 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 8008c4a:	89fb      	ldrh	r3, [r7, #14]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	81fb      	strh	r3, [r7, #14]
 8008c50:	89fb      	ldrh	r3, [r7, #14]
 8008c52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008c56:	d9c9      	bls.n	8008bec <ILI9341_FillScreenGradient+0x10>


//	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_lin_seq_data_table[i], AREA_CHUNK);

	}
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	cccccccd 	.word	0xcccccccd

08008c64 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8008c68:	f000 fc3a 	bl	80094e0 <_LCD_Enable>
	ILI9341_SPI_Init();
 8008c6c:	f000 f908 	bl	8008e80 <ILI9341_SPI_Init>
	_LCD_Reset();
 8008c70:	f000 fc46 	bl	8009500 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8008c74:	2001      	movs	r0, #1
 8008c76:	f000 fd11 	bl	800969c <_LCD_SendCommand>
	HAL_Delay(2000);
 8008c7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c7e:	f7fa fa71 	bl	8003164 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8008c82:	20cb      	movs	r0, #203	; 0xcb
 8008c84:	f000 fd0a 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8008c88:	2039      	movs	r0, #57	; 0x39
 8008c8a:	f000 fd39 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x2C);
 8008c8e:	202c      	movs	r0, #44	; 0x2c
 8008c90:	f000 fd36 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008c94:	2000      	movs	r0, #0
 8008c96:	f000 fd33 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x34);
 8008c9a:	2034      	movs	r0, #52	; 0x34
 8008c9c:	f000 fd30 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x02);
 8008ca0:	2002      	movs	r0, #2
 8008ca2:	f000 fd2d 	bl	8009700 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8008ca6:	20cf      	movs	r0, #207	; 0xcf
 8008ca8:	f000 fcf8 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008cac:	2000      	movs	r0, #0
 8008cae:	f000 fd27 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8008cb2:	20c1      	movs	r0, #193	; 0xc1
 8008cb4:	f000 fd24 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x30);
 8008cb8:	2030      	movs	r0, #48	; 0x30
 8008cba:	f000 fd21 	bl	8009700 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8008cbe:	20e8      	movs	r0, #232	; 0xe8
 8008cc0:	f000 fcec 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8008cc4:	2085      	movs	r0, #133	; 0x85
 8008cc6:	f000 fd1b 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008cca:	2000      	movs	r0, #0
 8008ccc:	f000 fd18 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x78);
 8008cd0:	2078      	movs	r0, #120	; 0x78
 8008cd2:	f000 fd15 	bl	8009700 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8008cd6:	20ea      	movs	r0, #234	; 0xea
 8008cd8:	f000 fce0 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008cdc:	2000      	movs	r0, #0
 8008cde:	f000 fd0f 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f000 fd0c 	bl	8009700 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8008ce8:	20ed      	movs	r0, #237	; 0xed
 8008cea:	f000 fcd7 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8008cee:	2064      	movs	r0, #100	; 0x64
 8008cf0:	f000 fd06 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x03);
 8008cf4:	2003      	movs	r0, #3
 8008cf6:	f000 fd03 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x12);
 8008cfa:	2012      	movs	r0, #18
 8008cfc:	f000 fd00 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x81);
 8008d00:	2081      	movs	r0, #129	; 0x81
 8008d02:	f000 fcfd 	bl	8009700 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8008d06:	20f7      	movs	r0, #247	; 0xf7
 8008d08:	f000 fcc8 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8008d0c:	2020      	movs	r0, #32
 8008d0e:	f000 fcf7 	bl	8009700 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8008d12:	20c0      	movs	r0, #192	; 0xc0
 8008d14:	f000 fcc2 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8008d18:	2023      	movs	r0, #35	; 0x23
 8008d1a:	f000 fcf1 	bl	8009700 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8008d1e:	20c1      	movs	r0, #193	; 0xc1
 8008d20:	f000 fcbc 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8008d24:	2010      	movs	r0, #16
 8008d26:	f000 fceb 	bl	8009700 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8008d2a:	20c5      	movs	r0, #197	; 0xc5
 8008d2c:	f000 fcb6 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8008d30:	203e      	movs	r0, #62	; 0x3e
 8008d32:	f000 fce5 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x28);
 8008d36:	2028      	movs	r0, #40	; 0x28
 8008d38:	f000 fce2 	bl	8009700 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8008d3c:	20c7      	movs	r0, #199	; 0xc7
 8008d3e:	f000 fcad 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8008d42:	2086      	movs	r0, #134	; 0x86
 8008d44:	f000 fcdc 	bl	8009700 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8008d48:	2036      	movs	r0, #54	; 0x36
 8008d4a:	f000 fca7 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8008d4e:	2048      	movs	r0, #72	; 0x48
 8008d50:	f000 fcd6 	bl	8009700 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8008d54:	203a      	movs	r0, #58	; 0x3a
 8008d56:	f000 fca1 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8008d5a:	2055      	movs	r0, #85	; 0x55
 8008d5c:	f000 fcd0 	bl	8009700 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8008d60:	20b1      	movs	r0, #177	; 0xb1
 8008d62:	f000 fc9b 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008d66:	2000      	movs	r0, #0
 8008d68:	f000 fcca 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x18);
 8008d6c:	2018      	movs	r0, #24
 8008d6e:	f000 fcc7 	bl	8009700 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8008d72:	20b6      	movs	r0, #182	; 0xb6
 8008d74:	f000 fc92 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8008d78:	2008      	movs	r0, #8
 8008d7a:	f000 fcc1 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x82);
 8008d7e:	2082      	movs	r0, #130	; 0x82
 8008d80:	f000 fcbe 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x27);
 8008d84:	2027      	movs	r0, #39	; 0x27
 8008d86:	f000 fcbb 	bl	8009700 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8008d8a:	20f2      	movs	r0, #242	; 0xf2
 8008d8c:	f000 fc86 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008d90:	2000      	movs	r0, #0
 8008d92:	f000 fcb5 	bl	8009700 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8008d96:	2026      	movs	r0, #38	; 0x26
 8008d98:	f000 fc80 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	f000 fcaf 	bl	8009700 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8008da2:	20e0      	movs	r0, #224	; 0xe0
 8008da4:	f000 fc7a 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8008da8:	200f      	movs	r0, #15
 8008daa:	f000 fca9 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x31);
 8008dae:	2031      	movs	r0, #49	; 0x31
 8008db0:	f000 fca6 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8008db4:	202b      	movs	r0, #43	; 0x2b
 8008db6:	f000 fca3 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8008dba:	200c      	movs	r0, #12
 8008dbc:	f000 fca0 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008dc0:	200e      	movs	r0, #14
 8008dc2:	f000 fc9d 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x08);
 8008dc6:	2008      	movs	r0, #8
 8008dc8:	f000 fc9a 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8008dcc:	204e      	movs	r0, #78	; 0x4e
 8008dce:	f000 fc97 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8008dd2:	20f1      	movs	r0, #241	; 0xf1
 8008dd4:	f000 fc94 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x37);
 8008dd8:	2037      	movs	r0, #55	; 0x37
 8008dda:	f000 fc91 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x07);
 8008dde:	2007      	movs	r0, #7
 8008de0:	f000 fc8e 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x10);
 8008de4:	2010      	movs	r0, #16
 8008de6:	f000 fc8b 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x03);
 8008dea:	2003      	movs	r0, #3
 8008dec:	f000 fc88 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008df0:	200e      	movs	r0, #14
 8008df2:	f000 fc85 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x09);
 8008df6:	2009      	movs	r0, #9
 8008df8:	f000 fc82 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f000 fc7f 	bl	8009700 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8008e02:	20e1      	movs	r0, #225	; 0xe1
 8008e04:	f000 fc4a 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f000 fc79 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008e0e:	200e      	movs	r0, #14
 8008e10:	f000 fc76 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x14);
 8008e14:	2014      	movs	r0, #20
 8008e16:	f000 fc73 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x03);
 8008e1a:	2003      	movs	r0, #3
 8008e1c:	f000 fc70 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x11);
 8008e20:	2011      	movs	r0, #17
 8008e22:	f000 fc6d 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x07);
 8008e26:	2007      	movs	r0, #7
 8008e28:	f000 fc6a 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x31);
 8008e2c:	2031      	movs	r0, #49	; 0x31
 8008e2e:	f000 fc67 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8008e32:	20c1      	movs	r0, #193	; 0xc1
 8008e34:	f000 fc64 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x48);
 8008e38:	2048      	movs	r0, #72	; 0x48
 8008e3a:	f000 fc61 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x08);
 8008e3e:	2008      	movs	r0, #8
 8008e40:	f000 fc5e 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8008e44:	200f      	movs	r0, #15
 8008e46:	f000 fc5b 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8008e4a:	200c      	movs	r0, #12
 8008e4c:	f000 fc58 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x31);
 8008e50:	2031      	movs	r0, #49	; 0x31
 8008e52:	f000 fc55 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x36);
 8008e56:	2036      	movs	r0, #54	; 0x36
 8008e58:	f000 fc52 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8008e5c:	200f      	movs	r0, #15
 8008e5e:	f000 fc4f 	bl	8009700 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8008e62:	2011      	movs	r0, #17
 8008e64:	f000 fc1a 	bl	800969c <_LCD_SendCommand>
	HAL_Delay(240);
 8008e68:	20f0      	movs	r0, #240	; 0xf0
 8008e6a:	f7fa f97b 	bl	8003164 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8008e6e:	2029      	movs	r0, #41	; 0x29
 8008e70:	f000 fc14 	bl	800969c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008e74:	2000      	movs	r0, #0
 8008e76:	f000 fae5 	bl	8009444 <ILI9341_Set_Rotation>
}
 8008e7a:	bf00      	nop
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8008e80:	b480      	push	{r7}
 8008e82:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <ILI9341_SPI_Init+0x34>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	d005      	beq.n	8008e9c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8008e90:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <ILI9341_SPI_Init+0x34>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a07      	ldr	r2, [pc, #28]	; (8008eb4 <ILI9341_SPI_Init+0x34>)
 8008e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e9a:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <ILI9341_SPI_Init+0x38>)
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	4a05      	ldr	r2, [pc, #20]	; (8008eb8 <ILI9341_SPI_Init+0x38>)
 8008ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ea6:	6153      	str	r3, [r2, #20]
}
 8008ea8:	bf00      	nop
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	40003c00 	.word	0x40003c00
 8008eb8:	48000400 	.word	0x48000400

08008ebc <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8008ebc:	b590      	push	{r4, r7, lr}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4623      	mov	r3, r4
 8008ecc:	80fb      	strh	r3, [r7, #6]
 8008ece:	4603      	mov	r3, r0
 8008ed0:	80bb      	strh	r3, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	807b      	strh	r3, [r7, #2]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008eda:	4b1a      	ldr	r3, [pc, #104]	; (8008f44 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	88fa      	ldrh	r2, [r7, #6]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d229      	bcs.n	8008f3a <ILI9341_Draw_Horizontal_Line+0x7e>
 8008ee6:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	88ba      	ldrh	r2, [r7, #4]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d223      	bcs.n	8008f3a <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8008ef2:	88fa      	ldrh	r2, [r7, #6]
 8008ef4:	887b      	ldrh	r3, [r7, #2]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	4a12      	ldr	r2, [pc, #72]	; (8008f44 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008efc:	8812      	ldrh	r2, [r2, #0]
 8008efe:	b292      	uxth	r2, r2
 8008f00:	4293      	cmp	r3, r2
 8008f02:	db05      	blt.n	8008f10 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8008f04:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8008f10:	88fa      	ldrh	r2, [r7, #6]
 8008f12:	887b      	ldrh	r3, [r7, #2]
 8008f14:	4413      	add	r3, r2
 8008f16:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	88bb      	ldrh	r3, [r7, #4]
 8008f1e:	88b9      	ldrh	r1, [r7, #4]
 8008f20:	88f8      	ldrh	r0, [r7, #6]
 8008f22:	f000 f85b 	bl	8008fdc <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8008f26:	887c      	ldrh	r4, [r7, #2]
 8008f28:	883a      	ldrh	r2, [r7, #0]
 8008f2a:	88b9      	ldrh	r1, [r7, #4]
 8008f2c:	88f8      	ldrh	r0, [r7, #6]
 8008f2e:	2303      	movs	r3, #3
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	4623      	mov	r3, r4
 8008f34:	f000 fb02 	bl	800953c <_LCD_Write_Frame>
 8008f38:	e000      	b.n	8008f3c <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008f3a:	bf00      	nop
}
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd90      	pop	{r4, r7, pc}
 8008f42:	bf00      	nop
 8008f44:	2000001e 	.word	0x2000001e
 8008f48:	2000001c 	.word	0x2000001c

08008f4c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af02      	add	r7, sp, #8
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4623      	mov	r3, r4
 8008f5c:	80fb      	strh	r3, [r7, #6]
 8008f5e:	4603      	mov	r3, r0
 8008f60:	80bb      	strh	r3, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	807b      	strh	r3, [r7, #2]
 8008f66:	4613      	mov	r3, r2
 8008f68:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008f6a:	4b1a      	ldr	r3, [pc, #104]	; (8008fd4 <ILI9341_Draw_Vertical_Line+0x88>)
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d229      	bcs.n	8008fca <ILI9341_Draw_Vertical_Line+0x7e>
 8008f76:	4b18      	ldr	r3, [pc, #96]	; (8008fd8 <ILI9341_Draw_Vertical_Line+0x8c>)
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	88ba      	ldrh	r2, [r7, #4]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d223      	bcs.n	8008fca <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8008f82:	88ba      	ldrh	r2, [r7, #4]
 8008f84:	887b      	ldrh	r3, [r7, #2]
 8008f86:	4413      	add	r3, r2
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <ILI9341_Draw_Vertical_Line+0x8c>)
 8008f8c:	8812      	ldrh	r2, [r2, #0]
 8008f8e:	b292      	uxth	r2, r2
 8008f90:	4293      	cmp	r3, r2
 8008f92:	db05      	blt.n	8008fa0 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 8008f94:	4b10      	ldr	r3, [pc, #64]	; (8008fd8 <ILI9341_Draw_Vertical_Line+0x8c>)
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	88bb      	ldrh	r3, [r7, #4]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8008fa0:	88ba      	ldrh	r2, [r7, #4]
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	88fa      	ldrh	r2, [r7, #6]
 8008fae:	88b9      	ldrh	r1, [r7, #4]
 8008fb0:	88f8      	ldrh	r0, [r7, #6]
 8008fb2:	f000 f813 	bl	8008fdc <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8008fb6:	887c      	ldrh	r4, [r7, #2]
 8008fb8:	883a      	ldrh	r2, [r7, #0]
 8008fba:	88b9      	ldrh	r1, [r7, #4]
 8008fbc:	88f8      	ldrh	r0, [r7, #6]
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	f000 faba 	bl	800953c <_LCD_Write_Frame>
 8008fc8:	e000      	b.n	8008fcc <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008fca:	bf00      	nop
}
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd90      	pop	{r4, r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	2000001e 	.word	0x2000001e
 8008fd8:	2000001c 	.word	0x2000001c

08008fdc <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8008fdc:	b590      	push	{r4, r7, lr}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4623      	mov	r3, r4
 8008fec:	80fb      	strh	r3, [r7, #6]
 8008fee:	4603      	mov	r3, r0
 8008ff0:	80bb      	strh	r3, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	807b      	strh	r3, [r7, #2]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8008ffa:	202a      	movs	r0, #42	; 0x2a
 8008ffc:	f000 fb4e 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	0a1b      	lsrs	r3, r3, #8
 8009004:	b29b      	uxth	r3, r3
 8009006:	b2db      	uxtb	r3, r3
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fb79 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(sc);
 800900e:	88fb      	ldrh	r3, [r7, #6]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fb74 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8009018:	887b      	ldrh	r3, [r7, #2]
 800901a:	0a1b      	lsrs	r3, r3, #8
 800901c:	b29b      	uxth	r3, r3
 800901e:	b2db      	uxtb	r3, r3
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fb6d 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(ec);
 8009026:	887b      	ldrh	r3, [r7, #2]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fb68 	bl	8009700 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8009030:	202b      	movs	r0, #43	; 0x2b
 8009032:	f000 fb33 	bl	800969c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8009036:	88bb      	ldrh	r3, [r7, #4]
 8009038:	0a1b      	lsrs	r3, r3, #8
 800903a:	b29b      	uxth	r3, r3
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4618      	mov	r0, r3
 8009040:	f000 fb5e 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(sp);
 8009044:	88bb      	ldrh	r3, [r7, #4]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fb59 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800904e:	883b      	ldrh	r3, [r7, #0]
 8009050:	0a1b      	lsrs	r3, r3, #8
 8009052:	b29b      	uxth	r3, r3
 8009054:	b2db      	uxtb	r3, r3
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fb52 	bl	8009700 <_LCD_SendData>
	_LCD_SendData(ep);
 800905c:	883b      	ldrh	r3, [r7, #0]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fb4d 	bl	8009700 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8009066:	202c      	movs	r0, #44	; 0x2c
 8009068:	f000 fb18 	bl	800969c <_LCD_SendCommand>
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	bd90      	pop	{r4, r7, pc}

08009074 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af02      	add	r7, sp, #8
 800907a:	4603      	mov	r3, r0
 800907c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800907e:	4b10      	ldr	r3, [pc, #64]	; (80090c0 <ILI9341_Fill_Screen+0x4c>)
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	b29a      	uxth	r2, r3
 8009084:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <ILI9341_Fill_Screen+0x50>)
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	2100      	movs	r1, #0
 800908c:	2000      	movs	r0, #0
 800908e:	f7ff ffa5 	bl	8008fdc <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8009092:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <ILI9341_Fill_Screen+0x4c>)
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	461a      	mov	r2, r3
 800909a:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <ILI9341_Fill_Screen+0x50>)
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	fb03 f302 	mul.w	r3, r3, r2
 80090a4:	4619      	mov	r1, r3
 80090a6:	88fa      	ldrh	r2, [r7, #6]
 80090a8:	2304      	movs	r3, #4
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	460b      	mov	r3, r1
 80090ae:	2100      	movs	r1, #0
 80090b0:	2000      	movs	r0, #0
 80090b2:	f000 fa43 	bl	800953c <_LCD_Write_Frame>
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	2000001e 	.word	0x2000001e
 80090c4:	2000001c 	.word	0x2000001c

080090c8 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	80fb      	strh	r3, [r7, #6]
 80090d2:	460b      	mov	r3, r1
 80090d4:	80bb      	strh	r3, [r7, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80090da:	4b94      	ldr	r3, [pc, #592]	; (800932c <ILI9341_Draw_Pixel+0x264>)
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	88fa      	ldrh	r2, [r7, #6]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	f080 811e 	bcs.w	8009324 <ILI9341_Draw_Pixel+0x25c>
 80090e8:	4b91      	ldr	r3, [pc, #580]	; (8009330 <ILI9341_Draw_Pixel+0x268>)
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	88ba      	ldrh	r2, [r7, #4]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	f080 8117 	bcs.w	8009324 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80090f6:	4b8f      	ldr	r3, [pc, #572]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	4a8e      	ldr	r2, [pc, #568]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80090fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009100:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009102:	4b8c      	ldr	r3, [pc, #560]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	4a8b      	ldr	r2, [pc, #556]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800910c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	202a      	movs	r0, #42	; 0x2a
 8009114:	f000 fb26 	bl	8009764 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 8009118:	2300      	movs	r3, #0
 800911a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800911c:	e008      	b.n	8009130 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800911e:	4b85      	ldr	r3, [pc, #532]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	4a84      	ldr	r2, [pc, #528]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009128:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	3301      	adds	r3, #1
 800912e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	2b02      	cmp	r3, #2
 8009134:	ddf3      	ble.n	800911e <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009136:	4b7f      	ldr	r3, [pc, #508]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	4a7e      	ldr	r2, [pc, #504]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 800913c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009140:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009142:	4b7c      	ldr	r3, [pc, #496]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	4a7b      	ldr	r2, [pc, #492]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800914e:	4b79      	ldr	r3, [pc, #484]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	4a78      	ldr	r2, [pc, #480]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009158:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800915a:	88fb      	ldrh	r3, [r7, #6]
 800915c:	0a1b      	lsrs	r3, r3, #8
 800915e:	b29b      	uxth	r3, r3
 8009160:	b2db      	uxtb	r3, r3
 8009162:	753b      	strb	r3, [r7, #20]
 8009164:	88fb      	ldrh	r3, [r7, #6]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	3301      	adds	r3, #1
 800916e:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 8009170:	b2db      	uxtb	r3, r3
 8009172:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	b2db      	uxtb	r3, r3
 8009178:	3301      	adds	r3, #1
 800917a:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800917c:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800917e:	f107 0014 	add.w	r0, r7, #20
 8009182:	2309      	movs	r3, #9
 8009184:	2200      	movs	r2, #0
 8009186:	2104      	movs	r1, #4
 8009188:	f000 fb02 	bl	8009790 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800918c:	2300      	movs	r3, #0
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009190:	e008      	b.n	80091a4 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009192:	4b68      	ldr	r3, [pc, #416]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	4a67      	ldr	r2, [pc, #412]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800919c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	3301      	adds	r3, #1
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	ddf3      	ble.n	8009192 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80091aa:	4b62      	ldr	r3, [pc, #392]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	4a61      	ldr	r2, [pc, #388]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80091b6:	4b5f      	ldr	r3, [pc, #380]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	4a5e      	ldr	r2, [pc, #376]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80091c2:	4b5c      	ldr	r3, [pc, #368]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	4a5b      	ldr	r2, [pc, #364]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091cc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 80091ce:	2200      	movs	r2, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	202b      	movs	r0, #43	; 0x2b
 80091d4:	f000 fac6 	bl	8009764 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80091d8:	2300      	movs	r3, #0
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
 80091dc:	e008      	b.n	80091f0 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80091de:	4b55      	ldr	r3, [pc, #340]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	4a54      	ldr	r2, [pc, #336]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091e8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	3301      	adds	r3, #1
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	ddf3      	ble.n	80091de <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80091f6:	4b4f      	ldr	r3, [pc, #316]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	4a4e      	ldr	r2, [pc, #312]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80091fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009200:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009202:	4b4c      	ldr	r3, [pc, #304]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	4a4b      	ldr	r2, [pc, #300]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800920e:	4b49      	ldr	r3, [pc, #292]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	4a48      	ldr	r2, [pc, #288]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009218:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800921a:	88bb      	ldrh	r3, [r7, #4]
 800921c:	0a1b      	lsrs	r3, r3, #8
 800921e:	b29b      	uxth	r3, r3
 8009220:	b2db      	uxtb	r3, r3
 8009222:	743b      	strb	r3, [r7, #16]
 8009224:	88bb      	ldrh	r3, [r7, #4]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800922a:	88bb      	ldrh	r3, [r7, #4]
 800922c:	3301      	adds	r3, #1
 800922e:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 8009230:	b2db      	uxtb	r3, r3
 8009232:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 8009234:	88bb      	ldrh	r3, [r7, #4]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	3301      	adds	r3, #1
 800923a:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800923c:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800923e:	f107 0010 	add.w	r0, r7, #16
 8009242:	2309      	movs	r3, #9
 8009244:	2200      	movs	r2, #0
 8009246:	2104      	movs	r1, #4
 8009248:	f000 faa2 	bl	8009790 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800924c:	2300      	movs	r3, #0
 800924e:	623b      	str	r3, [r7, #32]
 8009250:	e008      	b.n	8009264 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009252:	4b38      	ldr	r3, [pc, #224]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	4a37      	ldr	r2, [pc, #220]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800925c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	3301      	adds	r3, #1
 8009262:	623b      	str	r3, [r7, #32]
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	2b02      	cmp	r3, #2
 8009268:	ddf3      	ble.n	8009252 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800926a:	4b32      	ldr	r3, [pc, #200]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	4a31      	ldr	r2, [pc, #196]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009274:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8009276:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	4a2e      	ldr	r2, [pc, #184]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 800927c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009280:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009282:	4b2c      	ldr	r3, [pc, #176]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	4a2b      	ldr	r2, [pc, #172]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800928e:	2200      	movs	r2, #0
 8009290:	2100      	movs	r1, #0
 8009292:	202c      	movs	r0, #44	; 0x2c
 8009294:	f000 fa66 	bl	8009764 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 8009298:	2300      	movs	r3, #0
 800929a:	61fb      	str	r3, [r7, #28]
 800929c:	e008      	b.n	80092b0 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800929e:	4b25      	ldr	r3, [pc, #148]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	4a24      	ldr	r2, [pc, #144]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092a8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	3301      	adds	r3, #1
 80092ae:	61fb      	str	r3, [r7, #28]
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	ddf3      	ble.n	800929e <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80092b6:	4b1f      	ldr	r3, [pc, #124]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	4a1e      	ldr	r2, [pc, #120]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80092c2:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	4a1b      	ldr	r2, [pc, #108]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092cc:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80092ce:	4b19      	ldr	r3, [pc, #100]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	4a18      	ldr	r2, [pc, #96]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 80092d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092d8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80092da:	887b      	ldrh	r3, [r7, #2]
 80092dc:	0a1b      	lsrs	r3, r3, #8
 80092de:	b29b      	uxth	r3, r3
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	733b      	strb	r3, [r7, #12]
 80092e4:	887b      	ldrh	r3, [r7, #2]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 80092ea:	f107 000c 	add.w	r0, r7, #12
 80092ee:	2309      	movs	r3, #9
 80092f0:	2200      	movs	r2, #0
 80092f2:	2104      	movs	r1, #4
 80092f4:	f000 fa4c 	bl	8009790 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80092f8:	2300      	movs	r3, #0
 80092fa:	61bb      	str	r3, [r7, #24]
 80092fc:	e008      	b.n	8009310 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80092fe:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	4a0c      	ldr	r2, [pc, #48]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009308:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	3301      	adds	r3, #1
 800930e:	61bb      	str	r3, [r7, #24]
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	2b02      	cmp	r3, #2
 8009314:	ddf3      	ble.n	80092fe <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009316:	4b07      	ldr	r3, [pc, #28]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	4a06      	ldr	r2, [pc, #24]	; (8009334 <ILI9341_Draw_Pixel+0x26c>)
 800931c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009320:	6153      	str	r3, [r2, #20]
 8009322:	e000      	b.n	8009326 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8009324:	bf00      	nop


}
 8009326:	3730      	adds	r7, #48	; 0x30
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	2000001e 	.word	0x2000001e
 8009330:	2000001c 	.word	0x2000001c
 8009334:	48000400 	.word	0x48000400

08009338 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8009338:	b590      	push	{r4, r7, lr}
 800933a:	b087      	sub	sp, #28
 800933c:	af02      	add	r7, sp, #8
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4623      	mov	r3, r4
 8009348:	80fb      	strh	r3, [r7, #6]
 800934a:	4603      	mov	r3, r0
 800934c:	80bb      	strh	r3, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	807b      	strh	r3, [r7, #2]
 8009352:	4613      	mov	r3, r2
 8009354:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009356:	4b39      	ldr	r3, [pc, #228]	; (800943c <ILI9341_Draw_Rectangle+0x104>)
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	88fa      	ldrh	r2, [r7, #6]
 800935e:	429a      	cmp	r2, r3
 8009360:	d268      	bcs.n	8009434 <ILI9341_Draw_Rectangle+0xfc>
 8009362:	4b37      	ldr	r3, [pc, #220]	; (8009440 <ILI9341_Draw_Rectangle+0x108>)
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	88ba      	ldrh	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d262      	bcs.n	8009434 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800936e:	88fa      	ldrh	r2, [r7, #6]
 8009370:	887b      	ldrh	r3, [r7, #2]
 8009372:	4413      	add	r3, r2
 8009374:	3b01      	subs	r3, #1
 8009376:	4a31      	ldr	r2, [pc, #196]	; (800943c <ILI9341_Draw_Rectangle+0x104>)
 8009378:	8812      	ldrh	r2, [r2, #0]
 800937a:	b292      	uxth	r2, r2
 800937c:	4293      	cmp	r3, r2
 800937e:	db05      	blt.n	800938c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8009380:	4b2e      	ldr	r3, [pc, #184]	; (800943c <ILI9341_Draw_Rectangle+0x104>)
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29a      	uxth	r2, r3
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800938c:	88ba      	ldrh	r2, [r7, #4]
 800938e:	883b      	ldrh	r3, [r7, #0]
 8009390:	4413      	add	r3, r2
 8009392:	3b01      	subs	r3, #1
 8009394:	4a2a      	ldr	r2, [pc, #168]	; (8009440 <ILI9341_Draw_Rectangle+0x108>)
 8009396:	8812      	ldrh	r2, [r2, #0]
 8009398:	b292      	uxth	r2, r2
 800939a:	4293      	cmp	r3, r2
 800939c:	db05      	blt.n	80093aa <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800939e:	4b28      	ldr	r3, [pc, #160]	; (8009440 <ILI9341_Draw_Rectangle+0x108>)
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	88bb      	ldrh	r3, [r7, #4]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(xpos,
						ypos,
						(xpos + width) - 1,
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	887b      	ldrh	r3, [r7, #2]
 80093ae:	4413      	add	r3, r2
 80093b0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(xpos,
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80093b6:	88ba      	ldrh	r2, [r7, #4]
 80093b8:	883b      	ldrh	r3, [r7, #0]
 80093ba:	4413      	add	r3, r2
 80093bc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(xpos,
 80093be:	3b01      	subs	r3, #1
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	88b9      	ldrh	r1, [r7, #4]
 80093c4:	88f8      	ldrh	r0, [r7, #6]
 80093c6:	4622      	mov	r2, r4
 80093c8:	f7ff fe08 	bl	8008fdc <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80093cc:	883a      	ldrh	r2, [r7, #0]
 80093ce:	887b      	ldrh	r3, [r7, #2]
 80093d0:	fb12 f303 	smulbb	r3, r2, r3
 80093d4:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80093da:	89fb      	ldrh	r3, [r7, #14]
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d009      	beq.n	80093f8 <ILI9341_Draw_Rectangle+0xc0>
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d906      	bls.n	80093f8 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80093ea:	2301      	movs	r3, #1
 80093ec:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80093ee:	89fb      	ldrh	r3, [r7, #14]
 80093f0:	085b      	lsrs	r3, r3, #1
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 80093f8:	89fc      	ldrh	r4, [r7, #14]
 80093fa:	8c3a      	ldrh	r2, [r7, #32]
 80093fc:	88b9      	ldrh	r1, [r7, #4]
 80093fe:	88f8      	ldrh	r0, [r7, #6]
 8009400:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	4623      	mov	r3, r4
 8009408:	f000 f898 	bl	800953c <_LCD_Write_Frame>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 800940c:	7b7b      	ldrb	r3, [r7, #13]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d011      	beq.n	8009436 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	887b      	ldrh	r3, [r7, #2]
 8009416:	4413      	add	r3, r2
 8009418:	b29b      	uxth	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800941e:	88ba      	ldrh	r2, [r7, #4]
 8009420:	883b      	ldrh	r3, [r7, #0]
 8009422:	4413      	add	r3, r2
 8009424:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8009426:	3b01      	subs	r3, #1
 8009428:	b29b      	uxth	r3, r3
 800942a:	8c3a      	ldrh	r2, [r7, #32]
 800942c:	4619      	mov	r1, r3
 800942e:	f7ff fe4b 	bl	80090c8 <ILI9341_Draw_Pixel>
 8009432:	e000      	b.n	8009436 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009434:	bf00      	nop
							colour);
	}
}
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	bd90      	pop	{r4, r7, pc}
 800943c:	2000001e 	.word	0x2000001e
 8009440:	2000001c 	.word	0x2000001c

08009444 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 8009452:	2036      	movs	r0, #54	; 0x36
 8009454:	f000 f922 	bl	800969c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	2b03      	cmp	r3, #3
 800945c:	d836      	bhi.n	80094cc <ILI9341_Set_Rotation+0x88>
 800945e:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <ILI9341_Set_Rotation+0x20>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	08009475 	.word	0x08009475
 8009468:	0800948b 	.word	0x0800948b
 800946c:	080094a1 	.word	0x080094a1
 8009470:	080094b7 	.word	0x080094b7
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 8009474:	2048      	movs	r0, #72	; 0x48
 8009476:	f000 f943 	bl	8009700 <_LCD_SendData>
			LCD_WIDTH = 240;
 800947a:	4b17      	ldr	r3, [pc, #92]	; (80094d8 <ILI9341_Set_Rotation+0x94>)
 800947c:	22f0      	movs	r2, #240	; 0xf0
 800947e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8009480:	4b16      	ldr	r3, [pc, #88]	; (80094dc <ILI9341_Set_Rotation+0x98>)
 8009482:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009486:	801a      	strh	r2, [r3, #0]
			break;
 8009488:	e021      	b.n	80094ce <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800948a:	2028      	movs	r0, #40	; 0x28
 800948c:	f000 f938 	bl	8009700 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8009490:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <ILI9341_Set_Rotation+0x94>)
 8009492:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009496:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8009498:	4b10      	ldr	r3, [pc, #64]	; (80094dc <ILI9341_Set_Rotation+0x98>)
 800949a:	22f0      	movs	r2, #240	; 0xf0
 800949c:	801a      	strh	r2, [r3, #0]
			break;
 800949e:	e016      	b.n	80094ce <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 80094a0:	2088      	movs	r0, #136	; 0x88
 80094a2:	f000 f92d 	bl	8009700 <_LCD_SendData>
			LCD_WIDTH  = 240;
 80094a6:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <ILI9341_Set_Rotation+0x94>)
 80094a8:	22f0      	movs	r2, #240	; 0xf0
 80094aa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80094ac:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <ILI9341_Set_Rotation+0x98>)
 80094ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80094b2:	801a      	strh	r2, [r3, #0]
			break;
 80094b4:	e00b      	b.n	80094ce <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 80094b6:	20e8      	movs	r0, #232	; 0xe8
 80094b8:	f000 f922 	bl	8009700 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80094bc:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <ILI9341_Set_Rotation+0x94>)
 80094be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80094c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80094c4:	4b05      	ldr	r3, [pc, #20]	; (80094dc <ILI9341_Set_Rotation+0x98>)
 80094c6:	22f0      	movs	r2, #240	; 0xf0
 80094c8:	801a      	strh	r2, [r3, #0]
			break;
 80094ca:	e000      	b.n	80094ce <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80094cc:	bf00      	nop
	}
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	2000001e 	.word	0x2000001e
 80094dc:	2000001c 	.word	0x2000001c

080094e0 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80094e4:	4b05      	ldr	r3, [pc, #20]	; (80094fc <_LCD_Enable+0x1c>)
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	4a04      	ldr	r2, [pc, #16]	; (80094fc <_LCD_Enable+0x1c>)
 80094ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094ee:	6153      	str	r3, [r2, #20]
}
 80094f0:	bf00      	nop
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	48000400 	.word	0x48000400

08009500 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8009504:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <_LCD_Reset+0x38>)
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	4a0b      	ldr	r2, [pc, #44]	; (8009538 <_LCD_Reset+0x38>)
 800950a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800950e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8009510:	20c8      	movs	r0, #200	; 0xc8
 8009512:	f7f9 fe27 	bl	8003164 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009516:	4b08      	ldr	r3, [pc, #32]	; (8009538 <_LCD_Reset+0x38>)
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	4a07      	ldr	r2, [pc, #28]	; (8009538 <_LCD_Reset+0x38>)
 800951c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009520:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8009522:	20c8      	movs	r0, #200	; 0xc8
 8009524:	f7f9 fe1e 	bl	8003164 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8009528:	4b03      	ldr	r3, [pc, #12]	; (8009538 <_LCD_Reset+0x38>)
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	4a02      	ldr	r2, [pc, #8]	; (8009538 <_LCD_Reset+0x38>)
 800952e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009532:	6153      	str	r3, [r2, #20]
}
 8009534:	bf00      	nop
 8009536:	bd80      	pop	{r7, pc}
 8009538:	48000400 	.word	0x48000400

0800953c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800953c:	b5b0      	push	{r4, r5, r7, lr}
 800953e:	b08e      	sub	sp, #56	; 0x38
 8009540:	af00      	add	r7, sp, #0
 8009542:	607b      	str	r3, [r7, #4]
 8009544:	4603      	mov	r3, r0
 8009546:	81fb      	strh	r3, [r7, #14]
 8009548:	460b      	mov	r3, r1
 800954a:	81bb      	strh	r3, [r7, #12]
 800954c:	4613      	mov	r3, r2
 800954e:	817b      	strh	r3, [r7, #10]
 8009550:	466b      	mov	r3, sp
 8009552:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	005b      	lsls	r3, r3, #1
 800955c:	4a4d      	ldr	r2, [pc, #308]	; (8009694 <_LCD_Write_Frame+0x158>)
 800955e:	8812      	ldrh	r2, [r2, #0]
 8009560:	4293      	cmp	r3, r2
 8009562:	d202      	bcs.n	800956a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009568:	e002      	b.n	8009570 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800956a:	4b4a      	ldr	r3, [pc, #296]	; (8009694 <_LCD_Write_Frame+0x158>)
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 8009570:	897b      	ldrh	r3, [r7, #10]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	b29b      	uxth	r3, r3
 8009576:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 8009578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800957a:	4603      	mov	r3, r0
 800957c:	3b01      	subs	r3, #1
 800957e:	61bb      	str	r3, [r7, #24]
 8009580:	4601      	mov	r1, r0
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	f04f 0300 	mov.w	r3, #0
 800958a:	f04f 0400 	mov.w	r4, #0
 800958e:	00d4      	lsls	r4, r2, #3
 8009590:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009594:	00cb      	lsls	r3, r1, #3
 8009596:	4601      	mov	r1, r0
 8009598:	f04f 0200 	mov.w	r2, #0
 800959c:	f04f 0300 	mov.w	r3, #0
 80095a0:	f04f 0400 	mov.w	r4, #0
 80095a4:	00d4      	lsls	r4, r2, #3
 80095a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80095aa:	00cb      	lsls	r3, r1, #3
 80095ac:	1dc3      	adds	r3, r0, #7
 80095ae:	08db      	lsrs	r3, r3, #3
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	ebad 0d03 	sub.w	sp, sp, r3
 80095b6:	466b      	mov	r3, sp
 80095b8:	3300      	adds	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80095bc:	2300      	movs	r3, #0
 80095be:	633b      	str	r3, [r7, #48]	; 0x30
 80095c0:	e00d      	b.n	80095de <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	4413      	add	r3, r2
 80095c8:	7ffa      	ldrb	r2, [r7, #31]
 80095ca:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	3301      	adds	r3, #1
 80095d0:	897a      	ldrh	r2, [r7, #10]
 80095d2:	b2d1      	uxtb	r1, r2
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	3302      	adds	r3, #2
 80095dc:	633b      	str	r3, [r7, #48]	; 0x30
 80095de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d3ed      	bcc.n	80095c2 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80095ec:	2301      	movs	r3, #1
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00d      	beq.n	8009616 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009602:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009608:	fbb3 f2f2 	udiv	r2, r3, r2
 800960c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800960e:	fb01 f202 	mul.w	r2, r1, r2
 8009612:	1a9b      	subs	r3, r3, r2
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8009616:	4b20      	ldr	r3, [pc, #128]	; (8009698 <_LCD_Write_Frame+0x15c>)
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	4a1f      	ldr	r2, [pc, #124]	; (8009698 <_LCD_Write_Frame+0x15c>)
 800961c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009620:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009622:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <_LCD_Write_Frame+0x15c>)
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	4a1c      	ldr	r2, [pc, #112]	; (8009698 <_LCD_Write_Frame+0x15c>)
 8009628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800962c:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800962e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00f      	beq.n	8009654 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8009634:	2300      	movs	r3, #0
 8009636:	627b      	str	r3, [r7, #36]	; 0x24
 8009638:	e008      	b.n	800964c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800963a:	6978      	ldr	r0, [r7, #20]
 800963c:	2309      	movs	r3, #9
 800963e:	2200      	movs	r2, #0
 8009640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009642:	f000 f8a5 	bl	8009790 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	3301      	adds	r3, #1
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
 800964c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	429a      	cmp	r2, r3
 8009652:	d3f2      	bcc.n	800963a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 8009654:	6978      	ldr	r0, [r7, #20]
 8009656:	2309      	movs	r3, #9
 8009658:	2200      	movs	r2, #0
 800965a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800965c:	f000 f898 	bl	8009790 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8009660:	2300      	movs	r3, #0
 8009662:	623b      	str	r3, [r7, #32]
 8009664:	e008      	b.n	8009678 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <_LCD_Write_Frame+0x15c>)
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	4a0b      	ldr	r2, [pc, #44]	; (8009698 <_LCD_Write_Frame+0x15c>)
 800966c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009670:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	3301      	adds	r3, #1
 8009676:	623b      	str	r3, [r7, #32]
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	2b02      	cmp	r3, #2
 800967c:	ddf3      	ble.n	8009666 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <_LCD_Write_Frame+0x15c>)
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	4a05      	ldr	r2, [pc, #20]	; (8009698 <_LCD_Write_Frame+0x15c>)
 8009684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009688:	6153      	str	r3, [r2, #20]
 800968a:	46ad      	mov	sp, r5

}
 800968c:	bf00      	nop
 800968e:	3738      	adds	r7, #56	; 0x38
 8009690:	46bd      	mov	sp, r7
 8009692:	bdb0      	pop	{r4, r5, r7, pc}
 8009694:	20000020 	.word	0x20000020
 8009698:	48000400 	.word	0x48000400

0800969c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80096a6:	4b15      	ldr	r3, [pc, #84]	; (80096fc <_LCD_SendCommand+0x60>)
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	4a14      	ldr	r2, [pc, #80]	; (80096fc <_LCD_SendCommand+0x60>)
 80096ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b0:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <_LCD_SendCommand+0x60>)
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	4a11      	ldr	r2, [pc, #68]	; (80096fc <_LCD_SendCommand+0x60>)
 80096b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096bc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f84d 	bl	8009764 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	e008      	b.n	80096e2 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <_LCD_SendCommand+0x60>)
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	4a09      	ldr	r2, [pc, #36]	; (80096fc <_LCD_SendCommand+0x60>)
 80096d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096da:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	ddf3      	ble.n	80096d0 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80096e8:	4b04      	ldr	r3, [pc, #16]	; (80096fc <_LCD_SendCommand+0x60>)
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	4a03      	ldr	r2, [pc, #12]	; (80096fc <_LCD_SendCommand+0x60>)
 80096ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f2:	6153      	str	r3, [r2, #20]
}
 80096f4:	bf00      	nop
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	48000400 	.word	0x48000400

08009700 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800970a:	4b15      	ldr	r3, [pc, #84]	; (8009760 <_LCD_SendData+0x60>)
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	4a14      	ldr	r2, [pc, #80]	; (8009760 <_LCD_SendData+0x60>)
 8009710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009714:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <_LCD_SendData+0x60>)
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	4a11      	ldr	r2, [pc, #68]	; (8009760 <_LCD_SendData+0x60>)
 800971c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009720:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	4618      	mov	r0, r3
 800972a:	f000 f81b 	bl	8009764 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	e008      	b.n	8009746 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009734:	4b0a      	ldr	r3, [pc, #40]	; (8009760 <_LCD_SendData+0x60>)
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	4a09      	ldr	r2, [pc, #36]	; (8009760 <_LCD_SendData+0x60>)
 800973a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800973e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3301      	adds	r3, #1
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2b02      	cmp	r3, #2
 800974a:	ddf3      	ble.n	8009734 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800974c:	4b04      	ldr	r3, [pc, #16]	; (8009760 <_LCD_SendData+0x60>)
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	4a03      	ldr	r2, [pc, #12]	; (8009760 <_LCD_SendData+0x60>)
 8009752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009756:	6153      	str	r3, [r2, #20]
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	48000400 	.word	0x48000400

08009764 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	71fb      	strb	r3, [r7, #7]
 800976e:	460b      	mov	r3, r1
 8009770:	71bb      	strb	r3, [r7, #6]
 8009772:	4613      	mov	r3, r2
 8009774:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 8009776:	1df9      	adds	r1, r7, #7
 8009778:	2301      	movs	r3, #1
 800977a:	2201      	movs	r2, #1
 800977c:	4803      	ldr	r0, [pc, #12]	; (800978c <_SPI_SendByte+0x28>)
 800977e:	f7fd fa7f 	bl	8006c80 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000de8 	.word	0x20000de8

08009790 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4611      	mov	r1, r2
 800979c:	461a      	mov	r2, r3
 800979e:	460b      	mov	r3, r1
 80097a0:	71fb      	strb	r3, [r7, #7]
 80097a2:	4613      	mov	r3, r2
 80097a4:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	2302      	movs	r3, #2
 80097ac:	68f9      	ldr	r1, [r7, #12]
 80097ae:	4803      	ldr	r0, [pc, #12]	; (80097bc <_SPI_SendByteMultiByte+0x2c>)
 80097b0:	f7fd fa66 	bl	8006c80 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20000de8 	.word	0x20000de8

080097c0 <__errno>:
 80097c0:	4b01      	ldr	r3, [pc, #4]	; (80097c8 <__errno+0x8>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000b64 	.word	0x20000b64

080097cc <__libc_init_array>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	4e0d      	ldr	r6, [pc, #52]	; (8009804 <__libc_init_array+0x38>)
 80097d0:	4c0d      	ldr	r4, [pc, #52]	; (8009808 <__libc_init_array+0x3c>)
 80097d2:	1ba4      	subs	r4, r4, r6
 80097d4:	10a4      	asrs	r4, r4, #2
 80097d6:	2500      	movs	r5, #0
 80097d8:	42a5      	cmp	r5, r4
 80097da:	d109      	bne.n	80097f0 <__libc_init_array+0x24>
 80097dc:	4e0b      	ldr	r6, [pc, #44]	; (800980c <__libc_init_array+0x40>)
 80097de:	4c0c      	ldr	r4, [pc, #48]	; (8009810 <__libc_init_array+0x44>)
 80097e0:	f000 fff8 	bl	800a7d4 <_init>
 80097e4:	1ba4      	subs	r4, r4, r6
 80097e6:	10a4      	asrs	r4, r4, #2
 80097e8:	2500      	movs	r5, #0
 80097ea:	42a5      	cmp	r5, r4
 80097ec:	d105      	bne.n	80097fa <__libc_init_array+0x2e>
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097f4:	4798      	blx	r3
 80097f6:	3501      	adds	r5, #1
 80097f8:	e7ee      	b.n	80097d8 <__libc_init_array+0xc>
 80097fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097fe:	4798      	blx	r3
 8009800:	3501      	adds	r5, #1
 8009802:	e7f2      	b.n	80097ea <__libc_init_array+0x1e>
 8009804:	0800ad5c 	.word	0x0800ad5c
 8009808:	0800ad5c 	.word	0x0800ad5c
 800980c:	0800ad5c 	.word	0x0800ad5c
 8009810:	0800ad60 	.word	0x0800ad60

08009814 <memset>:
 8009814:	4402      	add	r2, r0
 8009816:	4603      	mov	r3, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>

08009824 <_puts_r>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	460e      	mov	r6, r1
 8009828:	4605      	mov	r5, r0
 800982a:	b118      	cbz	r0, 8009834 <_puts_r+0x10>
 800982c:	6983      	ldr	r3, [r0, #24]
 800982e:	b90b      	cbnz	r3, 8009834 <_puts_r+0x10>
 8009830:	f000 fa50 	bl	8009cd4 <__sinit>
 8009834:	69ab      	ldr	r3, [r5, #24]
 8009836:	68ac      	ldr	r4, [r5, #8]
 8009838:	b913      	cbnz	r3, 8009840 <_puts_r+0x1c>
 800983a:	4628      	mov	r0, r5
 800983c:	f000 fa4a 	bl	8009cd4 <__sinit>
 8009840:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <_puts_r+0xac>)
 8009842:	429c      	cmp	r4, r3
 8009844:	d117      	bne.n	8009876 <_puts_r+0x52>
 8009846:	686c      	ldr	r4, [r5, #4]
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	071b      	lsls	r3, r3, #28
 800984c:	d51d      	bpl.n	800988a <_puts_r+0x66>
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	b1db      	cbz	r3, 800988a <_puts_r+0x66>
 8009852:	3e01      	subs	r6, #1
 8009854:	68a3      	ldr	r3, [r4, #8]
 8009856:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800985a:	3b01      	subs	r3, #1
 800985c:	60a3      	str	r3, [r4, #8]
 800985e:	b9e9      	cbnz	r1, 800989c <_puts_r+0x78>
 8009860:	2b00      	cmp	r3, #0
 8009862:	da2e      	bge.n	80098c2 <_puts_r+0x9e>
 8009864:	4622      	mov	r2, r4
 8009866:	210a      	movs	r1, #10
 8009868:	4628      	mov	r0, r5
 800986a:	f000 f883 	bl	8009974 <__swbuf_r>
 800986e:	3001      	adds	r0, #1
 8009870:	d011      	beq.n	8009896 <_puts_r+0x72>
 8009872:	200a      	movs	r0, #10
 8009874:	e011      	b.n	800989a <_puts_r+0x76>
 8009876:	4b17      	ldr	r3, [pc, #92]	; (80098d4 <_puts_r+0xb0>)
 8009878:	429c      	cmp	r4, r3
 800987a:	d101      	bne.n	8009880 <_puts_r+0x5c>
 800987c:	68ac      	ldr	r4, [r5, #8]
 800987e:	e7e3      	b.n	8009848 <_puts_r+0x24>
 8009880:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <_puts_r+0xb4>)
 8009882:	429c      	cmp	r4, r3
 8009884:	bf08      	it	eq
 8009886:	68ec      	ldreq	r4, [r5, #12]
 8009888:	e7de      	b.n	8009848 <_puts_r+0x24>
 800988a:	4621      	mov	r1, r4
 800988c:	4628      	mov	r0, r5
 800988e:	f000 f8c3 	bl	8009a18 <__swsetup_r>
 8009892:	2800      	cmp	r0, #0
 8009894:	d0dd      	beq.n	8009852 <_puts_r+0x2e>
 8009896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	2b00      	cmp	r3, #0
 800989e:	da04      	bge.n	80098aa <_puts_r+0x86>
 80098a0:	69a2      	ldr	r2, [r4, #24]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	dc06      	bgt.n	80098b4 <_puts_r+0x90>
 80098a6:	290a      	cmp	r1, #10
 80098a8:	d004      	beq.n	80098b4 <_puts_r+0x90>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	7019      	strb	r1, [r3, #0]
 80098b2:	e7cf      	b.n	8009854 <_puts_r+0x30>
 80098b4:	4622      	mov	r2, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f85c 	bl	8009974 <__swbuf_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d1c9      	bne.n	8009854 <_puts_r+0x30>
 80098c0:	e7e9      	b.n	8009896 <_puts_r+0x72>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	200a      	movs	r0, #10
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	6022      	str	r2, [r4, #0]
 80098ca:	7018      	strb	r0, [r3, #0]
 80098cc:	e7e5      	b.n	800989a <_puts_r+0x76>
 80098ce:	bf00      	nop
 80098d0:	0800ace8 	.word	0x0800ace8
 80098d4:	0800ad08 	.word	0x0800ad08
 80098d8:	0800acc8 	.word	0x0800acc8

080098dc <puts>:
 80098dc:	4b02      	ldr	r3, [pc, #8]	; (80098e8 <puts+0xc>)
 80098de:	4601      	mov	r1, r0
 80098e0:	6818      	ldr	r0, [r3, #0]
 80098e2:	f7ff bf9f 	b.w	8009824 <_puts_r>
 80098e6:	bf00      	nop
 80098e8:	20000b64 	.word	0x20000b64

080098ec <sniprintf>:
 80098ec:	b40c      	push	{r2, r3}
 80098ee:	b530      	push	{r4, r5, lr}
 80098f0:	4b17      	ldr	r3, [pc, #92]	; (8009950 <sniprintf+0x64>)
 80098f2:	1e0c      	subs	r4, r1, #0
 80098f4:	b09d      	sub	sp, #116	; 0x74
 80098f6:	681d      	ldr	r5, [r3, #0]
 80098f8:	da08      	bge.n	800990c <sniprintf+0x20>
 80098fa:	238b      	movs	r3, #139	; 0x8b
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009902:	b01d      	add	sp, #116	; 0x74
 8009904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009908:	b002      	add	sp, #8
 800990a:	4770      	bx	lr
 800990c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009910:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009914:	bf14      	ite	ne
 8009916:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800991a:	4623      	moveq	r3, r4
 800991c:	9304      	str	r3, [sp, #16]
 800991e:	9307      	str	r3, [sp, #28]
 8009920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009924:	9002      	str	r0, [sp, #8]
 8009926:	9006      	str	r0, [sp, #24]
 8009928:	f8ad 3016 	strh.w	r3, [sp, #22]
 800992c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800992e:	ab21      	add	r3, sp, #132	; 0x84
 8009930:	a902      	add	r1, sp, #8
 8009932:	4628      	mov	r0, r5
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	f000 fbbd 	bl	800a0b4 <_svfiprintf_r>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	bfbc      	itt	lt
 800993e:	238b      	movlt	r3, #139	; 0x8b
 8009940:	602b      	strlt	r3, [r5, #0]
 8009942:	2c00      	cmp	r4, #0
 8009944:	d0dd      	beq.n	8009902 <sniprintf+0x16>
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	2200      	movs	r2, #0
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	e7d9      	b.n	8009902 <sniprintf+0x16>
 800994e:	bf00      	nop
 8009950:	20000b64 	.word	0x20000b64

08009954 <strcat>:
 8009954:	b510      	push	{r4, lr}
 8009956:	4603      	mov	r3, r0
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	1c5c      	adds	r4, r3, #1
 800995c:	b93a      	cbnz	r2, 800996e <strcat+0x1a>
 800995e:	3b01      	subs	r3, #1
 8009960:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009964:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009968:	2a00      	cmp	r2, #0
 800996a:	d1f9      	bne.n	8009960 <strcat+0xc>
 800996c:	bd10      	pop	{r4, pc}
 800996e:	4623      	mov	r3, r4
 8009970:	e7f2      	b.n	8009958 <strcat+0x4>
	...

08009974 <__swbuf_r>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	460e      	mov	r6, r1
 8009978:	4614      	mov	r4, r2
 800997a:	4605      	mov	r5, r0
 800997c:	b118      	cbz	r0, 8009986 <__swbuf_r+0x12>
 800997e:	6983      	ldr	r3, [r0, #24]
 8009980:	b90b      	cbnz	r3, 8009986 <__swbuf_r+0x12>
 8009982:	f000 f9a7 	bl	8009cd4 <__sinit>
 8009986:	4b21      	ldr	r3, [pc, #132]	; (8009a0c <__swbuf_r+0x98>)
 8009988:	429c      	cmp	r4, r3
 800998a:	d12a      	bne.n	80099e2 <__swbuf_r+0x6e>
 800998c:	686c      	ldr	r4, [r5, #4]
 800998e:	69a3      	ldr	r3, [r4, #24]
 8009990:	60a3      	str	r3, [r4, #8]
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	071a      	lsls	r2, r3, #28
 8009996:	d52e      	bpl.n	80099f6 <__swbuf_r+0x82>
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	b363      	cbz	r3, 80099f6 <__swbuf_r+0x82>
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	6820      	ldr	r0, [r4, #0]
 80099a0:	1ac0      	subs	r0, r0, r3
 80099a2:	6963      	ldr	r3, [r4, #20]
 80099a4:	b2f6      	uxtb	r6, r6
 80099a6:	4283      	cmp	r3, r0
 80099a8:	4637      	mov	r7, r6
 80099aa:	dc04      	bgt.n	80099b6 <__swbuf_r+0x42>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	f000 f926 	bl	8009c00 <_fflush_r>
 80099b4:	bb28      	cbnz	r0, 8009a02 <__swbuf_r+0x8e>
 80099b6:	68a3      	ldr	r3, [r4, #8]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	60a3      	str	r3, [r4, #8]
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	701e      	strb	r6, [r3, #0]
 80099c4:	6963      	ldr	r3, [r4, #20]
 80099c6:	3001      	adds	r0, #1
 80099c8:	4283      	cmp	r3, r0
 80099ca:	d004      	beq.n	80099d6 <__swbuf_r+0x62>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	07db      	lsls	r3, r3, #31
 80099d0:	d519      	bpl.n	8009a06 <__swbuf_r+0x92>
 80099d2:	2e0a      	cmp	r6, #10
 80099d4:	d117      	bne.n	8009a06 <__swbuf_r+0x92>
 80099d6:	4621      	mov	r1, r4
 80099d8:	4628      	mov	r0, r5
 80099da:	f000 f911 	bl	8009c00 <_fflush_r>
 80099de:	b190      	cbz	r0, 8009a06 <__swbuf_r+0x92>
 80099e0:	e00f      	b.n	8009a02 <__swbuf_r+0x8e>
 80099e2:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <__swbuf_r+0x9c>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d101      	bne.n	80099ec <__swbuf_r+0x78>
 80099e8:	68ac      	ldr	r4, [r5, #8]
 80099ea:	e7d0      	b.n	800998e <__swbuf_r+0x1a>
 80099ec:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <__swbuf_r+0xa0>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	bf08      	it	eq
 80099f2:	68ec      	ldreq	r4, [r5, #12]
 80099f4:	e7cb      	b.n	800998e <__swbuf_r+0x1a>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f000 f80d 	bl	8009a18 <__swsetup_r>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d0cc      	beq.n	800999c <__swbuf_r+0x28>
 8009a02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009a06:	4638      	mov	r0, r7
 8009a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800ace8 	.word	0x0800ace8
 8009a10:	0800ad08 	.word	0x0800ad08
 8009a14:	0800acc8 	.word	0x0800acc8

08009a18 <__swsetup_r>:
 8009a18:	4b32      	ldr	r3, [pc, #200]	; (8009ae4 <__swsetup_r+0xcc>)
 8009a1a:	b570      	push	{r4, r5, r6, lr}
 8009a1c:	681d      	ldr	r5, [r3, #0]
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460c      	mov	r4, r1
 8009a22:	b125      	cbz	r5, 8009a2e <__swsetup_r+0x16>
 8009a24:	69ab      	ldr	r3, [r5, #24]
 8009a26:	b913      	cbnz	r3, 8009a2e <__swsetup_r+0x16>
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 f953 	bl	8009cd4 <__sinit>
 8009a2e:	4b2e      	ldr	r3, [pc, #184]	; (8009ae8 <__swsetup_r+0xd0>)
 8009a30:	429c      	cmp	r4, r3
 8009a32:	d10f      	bne.n	8009a54 <__swsetup_r+0x3c>
 8009a34:	686c      	ldr	r4, [r5, #4]
 8009a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	0715      	lsls	r5, r2, #28
 8009a3e:	d42c      	bmi.n	8009a9a <__swsetup_r+0x82>
 8009a40:	06d0      	lsls	r0, r2, #27
 8009a42:	d411      	bmi.n	8009a68 <__swsetup_r+0x50>
 8009a44:	2209      	movs	r2, #9
 8009a46:	6032      	str	r2, [r6, #0]
 8009a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a4c:	81a3      	strh	r3, [r4, #12]
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a52:	e03e      	b.n	8009ad2 <__swsetup_r+0xba>
 8009a54:	4b25      	ldr	r3, [pc, #148]	; (8009aec <__swsetup_r+0xd4>)
 8009a56:	429c      	cmp	r4, r3
 8009a58:	d101      	bne.n	8009a5e <__swsetup_r+0x46>
 8009a5a:	68ac      	ldr	r4, [r5, #8]
 8009a5c:	e7eb      	b.n	8009a36 <__swsetup_r+0x1e>
 8009a5e:	4b24      	ldr	r3, [pc, #144]	; (8009af0 <__swsetup_r+0xd8>)
 8009a60:	429c      	cmp	r4, r3
 8009a62:	bf08      	it	eq
 8009a64:	68ec      	ldreq	r4, [r5, #12]
 8009a66:	e7e6      	b.n	8009a36 <__swsetup_r+0x1e>
 8009a68:	0751      	lsls	r1, r2, #29
 8009a6a:	d512      	bpl.n	8009a92 <__swsetup_r+0x7a>
 8009a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a6e:	b141      	cbz	r1, 8009a82 <__swsetup_r+0x6a>
 8009a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a74:	4299      	cmp	r1, r3
 8009a76:	d002      	beq.n	8009a7e <__swsetup_r+0x66>
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 fa19 	bl	8009eb0 <_free_r>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6363      	str	r3, [r4, #52]	; 0x34
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6063      	str	r3, [r4, #4]
 8009a8e:	6923      	ldr	r3, [r4, #16]
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	f043 0308 	orr.w	r3, r3, #8
 8009a98:	81a3      	strh	r3, [r4, #12]
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	b94b      	cbnz	r3, 8009ab2 <__swsetup_r+0x9a>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aa8:	d003      	beq.n	8009ab2 <__swsetup_r+0x9a>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4630      	mov	r0, r6
 8009aae:	f000 f9bf 	bl	8009e30 <__smakebuf_r>
 8009ab2:	89a2      	ldrh	r2, [r4, #12]
 8009ab4:	f012 0301 	ands.w	r3, r2, #1
 8009ab8:	d00c      	beq.n	8009ad4 <__swsetup_r+0xbc>
 8009aba:	2300      	movs	r3, #0
 8009abc:	60a3      	str	r3, [r4, #8]
 8009abe:	6963      	ldr	r3, [r4, #20]
 8009ac0:	425b      	negs	r3, r3
 8009ac2:	61a3      	str	r3, [r4, #24]
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	b953      	cbnz	r3, 8009ade <__swsetup_r+0xc6>
 8009ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009acc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009ad0:	d1ba      	bne.n	8009a48 <__swsetup_r+0x30>
 8009ad2:	bd70      	pop	{r4, r5, r6, pc}
 8009ad4:	0792      	lsls	r2, r2, #30
 8009ad6:	bf58      	it	pl
 8009ad8:	6963      	ldrpl	r3, [r4, #20]
 8009ada:	60a3      	str	r3, [r4, #8]
 8009adc:	e7f2      	b.n	8009ac4 <__swsetup_r+0xac>
 8009ade:	2000      	movs	r0, #0
 8009ae0:	e7f7      	b.n	8009ad2 <__swsetup_r+0xba>
 8009ae2:	bf00      	nop
 8009ae4:	20000b64 	.word	0x20000b64
 8009ae8:	0800ace8 	.word	0x0800ace8
 8009aec:	0800ad08 	.word	0x0800ad08
 8009af0:	0800acc8 	.word	0x0800acc8

08009af4 <__sflush_r>:
 8009af4:	898a      	ldrh	r2, [r1, #12]
 8009af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afa:	4605      	mov	r5, r0
 8009afc:	0710      	lsls	r0, r2, #28
 8009afe:	460c      	mov	r4, r1
 8009b00:	d458      	bmi.n	8009bb4 <__sflush_r+0xc0>
 8009b02:	684b      	ldr	r3, [r1, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	dc05      	bgt.n	8009b14 <__sflush_r+0x20>
 8009b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dc02      	bgt.n	8009b14 <__sflush_r+0x20>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	d0f9      	beq.n	8009b0e <__sflush_r+0x1a>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b20:	682f      	ldr	r7, [r5, #0]
 8009b22:	6a21      	ldr	r1, [r4, #32]
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	d032      	beq.n	8009b8e <__sflush_r+0x9a>
 8009b28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	075a      	lsls	r2, r3, #29
 8009b2e:	d505      	bpl.n	8009b3c <__sflush_r+0x48>
 8009b30:	6863      	ldr	r3, [r4, #4]
 8009b32:	1ac0      	subs	r0, r0, r3
 8009b34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b36:	b10b      	cbz	r3, 8009b3c <__sflush_r+0x48>
 8009b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b3a:	1ac0      	subs	r0, r0, r3
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4602      	mov	r2, r0
 8009b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b42:	6a21      	ldr	r1, [r4, #32]
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b0      	blx	r6
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	d106      	bne.n	8009b5c <__sflush_r+0x68>
 8009b4e:	6829      	ldr	r1, [r5, #0]
 8009b50:	291d      	cmp	r1, #29
 8009b52:	d848      	bhi.n	8009be6 <__sflush_r+0xf2>
 8009b54:	4a29      	ldr	r2, [pc, #164]	; (8009bfc <__sflush_r+0x108>)
 8009b56:	40ca      	lsrs	r2, r1
 8009b58:	07d6      	lsls	r6, r2, #31
 8009b5a:	d544      	bpl.n	8009be6 <__sflush_r+0xf2>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	6062      	str	r2, [r4, #4]
 8009b60:	04d9      	lsls	r1, r3, #19
 8009b62:	6922      	ldr	r2, [r4, #16]
 8009b64:	6022      	str	r2, [r4, #0]
 8009b66:	d504      	bpl.n	8009b72 <__sflush_r+0x7e>
 8009b68:	1c42      	adds	r2, r0, #1
 8009b6a:	d101      	bne.n	8009b70 <__sflush_r+0x7c>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b903      	cbnz	r3, 8009b72 <__sflush_r+0x7e>
 8009b70:	6560      	str	r0, [r4, #84]	; 0x54
 8009b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b74:	602f      	str	r7, [r5, #0]
 8009b76:	2900      	cmp	r1, #0
 8009b78:	d0c9      	beq.n	8009b0e <__sflush_r+0x1a>
 8009b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	d002      	beq.n	8009b88 <__sflush_r+0x94>
 8009b82:	4628      	mov	r0, r5
 8009b84:	f000 f994 	bl	8009eb0 <_free_r>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	6360      	str	r0, [r4, #52]	; 0x34
 8009b8c:	e7c0      	b.n	8009b10 <__sflush_r+0x1c>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	4628      	mov	r0, r5
 8009b92:	47b0      	blx	r6
 8009b94:	1c41      	adds	r1, r0, #1
 8009b96:	d1c8      	bne.n	8009b2a <__sflush_r+0x36>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0c5      	beq.n	8009b2a <__sflush_r+0x36>
 8009b9e:	2b1d      	cmp	r3, #29
 8009ba0:	d001      	beq.n	8009ba6 <__sflush_r+0xb2>
 8009ba2:	2b16      	cmp	r3, #22
 8009ba4:	d101      	bne.n	8009baa <__sflush_r+0xb6>
 8009ba6:	602f      	str	r7, [r5, #0]
 8009ba8:	e7b1      	b.n	8009b0e <__sflush_r+0x1a>
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	e7ad      	b.n	8009b10 <__sflush_r+0x1c>
 8009bb4:	690f      	ldr	r7, [r1, #16]
 8009bb6:	2f00      	cmp	r7, #0
 8009bb8:	d0a9      	beq.n	8009b0e <__sflush_r+0x1a>
 8009bba:	0793      	lsls	r3, r2, #30
 8009bbc:	680e      	ldr	r6, [r1, #0]
 8009bbe:	bf08      	it	eq
 8009bc0:	694b      	ldreq	r3, [r1, #20]
 8009bc2:	600f      	str	r7, [r1, #0]
 8009bc4:	bf18      	it	ne
 8009bc6:	2300      	movne	r3, #0
 8009bc8:	eba6 0807 	sub.w	r8, r6, r7
 8009bcc:	608b      	str	r3, [r1, #8]
 8009bce:	f1b8 0f00 	cmp.w	r8, #0
 8009bd2:	dd9c      	ble.n	8009b0e <__sflush_r+0x1a>
 8009bd4:	4643      	mov	r3, r8
 8009bd6:	463a      	mov	r2, r7
 8009bd8:	6a21      	ldr	r1, [r4, #32]
 8009bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b0      	blx	r6
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dc06      	bgt.n	8009bf2 <__sflush_r+0xfe>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bf0:	e78e      	b.n	8009b10 <__sflush_r+0x1c>
 8009bf2:	4407      	add	r7, r0
 8009bf4:	eba8 0800 	sub.w	r8, r8, r0
 8009bf8:	e7e9      	b.n	8009bce <__sflush_r+0xda>
 8009bfa:	bf00      	nop
 8009bfc:	20400001 	.word	0x20400001

08009c00 <_fflush_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	690b      	ldr	r3, [r1, #16]
 8009c04:	4605      	mov	r5, r0
 8009c06:	460c      	mov	r4, r1
 8009c08:	b1db      	cbz	r3, 8009c42 <_fflush_r+0x42>
 8009c0a:	b118      	cbz	r0, 8009c14 <_fflush_r+0x14>
 8009c0c:	6983      	ldr	r3, [r0, #24]
 8009c0e:	b90b      	cbnz	r3, 8009c14 <_fflush_r+0x14>
 8009c10:	f000 f860 	bl	8009cd4 <__sinit>
 8009c14:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <_fflush_r+0x48>)
 8009c16:	429c      	cmp	r4, r3
 8009c18:	d109      	bne.n	8009c2e <_fflush_r+0x2e>
 8009c1a:	686c      	ldr	r4, [r5, #4]
 8009c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c20:	b17b      	cbz	r3, 8009c42 <_fflush_r+0x42>
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c2a:	f7ff bf63 	b.w	8009af4 <__sflush_r>
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <_fflush_r+0x4c>)
 8009c30:	429c      	cmp	r4, r3
 8009c32:	d101      	bne.n	8009c38 <_fflush_r+0x38>
 8009c34:	68ac      	ldr	r4, [r5, #8]
 8009c36:	e7f1      	b.n	8009c1c <_fflush_r+0x1c>
 8009c38:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <_fflush_r+0x50>)
 8009c3a:	429c      	cmp	r4, r3
 8009c3c:	bf08      	it	eq
 8009c3e:	68ec      	ldreq	r4, [r5, #12]
 8009c40:	e7ec      	b.n	8009c1c <_fflush_r+0x1c>
 8009c42:	2000      	movs	r0, #0
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	0800ace8 	.word	0x0800ace8
 8009c4c:	0800ad08 	.word	0x0800ad08
 8009c50:	0800acc8 	.word	0x0800acc8

08009c54 <std>:
 8009c54:	2300      	movs	r3, #0
 8009c56:	b510      	push	{r4, lr}
 8009c58:	4604      	mov	r4, r0
 8009c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c5e:	6083      	str	r3, [r0, #8]
 8009c60:	8181      	strh	r1, [r0, #12]
 8009c62:	6643      	str	r3, [r0, #100]	; 0x64
 8009c64:	81c2      	strh	r2, [r0, #14]
 8009c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c6a:	6183      	str	r3, [r0, #24]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	2208      	movs	r2, #8
 8009c70:	305c      	adds	r0, #92	; 0x5c
 8009c72:	f7ff fdcf 	bl	8009814 <memset>
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <std+0x38>)
 8009c78:	6263      	str	r3, [r4, #36]	; 0x24
 8009c7a:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <std+0x3c>)
 8009c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c7e:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <std+0x40>)
 8009c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c82:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <std+0x44>)
 8009c84:	6224      	str	r4, [r4, #32]
 8009c86:	6323      	str	r3, [r4, #48]	; 0x30
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	bf00      	nop
 8009c8c:	0800a5d5 	.word	0x0800a5d5
 8009c90:	0800a5f7 	.word	0x0800a5f7
 8009c94:	0800a62f 	.word	0x0800a62f
 8009c98:	0800a653 	.word	0x0800a653

08009c9c <_cleanup_r>:
 8009c9c:	4901      	ldr	r1, [pc, #4]	; (8009ca4 <_cleanup_r+0x8>)
 8009c9e:	f000 b885 	b.w	8009dac <_fwalk_reent>
 8009ca2:	bf00      	nop
 8009ca4:	08009c01 	.word	0x08009c01

08009ca8 <__sfmoreglue>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	1e4a      	subs	r2, r1, #1
 8009cac:	2568      	movs	r5, #104	; 0x68
 8009cae:	4355      	muls	r5, r2
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cb6:	f000 f949 	bl	8009f4c <_malloc_r>
 8009cba:	4604      	mov	r4, r0
 8009cbc:	b140      	cbz	r0, 8009cd0 <__sfmoreglue+0x28>
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8009cc4:	300c      	adds	r0, #12
 8009cc6:	60a0      	str	r0, [r4, #8]
 8009cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ccc:	f7ff fda2 	bl	8009814 <memset>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}

08009cd4 <__sinit>:
 8009cd4:	6983      	ldr	r3, [r0, #24]
 8009cd6:	b510      	push	{r4, lr}
 8009cd8:	4604      	mov	r4, r0
 8009cda:	bb33      	cbnz	r3, 8009d2a <__sinit+0x56>
 8009cdc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009ce0:	6503      	str	r3, [r0, #80]	; 0x50
 8009ce2:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <__sinit+0x58>)
 8009ce4:	4a12      	ldr	r2, [pc, #72]	; (8009d30 <__sinit+0x5c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6282      	str	r2, [r0, #40]	; 0x28
 8009cea:	4298      	cmp	r0, r3
 8009cec:	bf04      	itt	eq
 8009cee:	2301      	moveq	r3, #1
 8009cf0:	6183      	streq	r3, [r0, #24]
 8009cf2:	f000 f81f 	bl	8009d34 <__sfp>
 8009cf6:	6060      	str	r0, [r4, #4]
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 f81b 	bl	8009d34 <__sfp>
 8009cfe:	60a0      	str	r0, [r4, #8]
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 f817 	bl	8009d34 <__sfp>
 8009d06:	2200      	movs	r2, #0
 8009d08:	60e0      	str	r0, [r4, #12]
 8009d0a:	2104      	movs	r1, #4
 8009d0c:	6860      	ldr	r0, [r4, #4]
 8009d0e:	f7ff ffa1 	bl	8009c54 <std>
 8009d12:	2201      	movs	r2, #1
 8009d14:	2109      	movs	r1, #9
 8009d16:	68a0      	ldr	r0, [r4, #8]
 8009d18:	f7ff ff9c 	bl	8009c54 <std>
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	2112      	movs	r1, #18
 8009d20:	68e0      	ldr	r0, [r4, #12]
 8009d22:	f7ff ff97 	bl	8009c54 <std>
 8009d26:	2301      	movs	r3, #1
 8009d28:	61a3      	str	r3, [r4, #24]
 8009d2a:	bd10      	pop	{r4, pc}
 8009d2c:	0800acc4 	.word	0x0800acc4
 8009d30:	08009c9d 	.word	0x08009c9d

08009d34 <__sfp>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	4b1b      	ldr	r3, [pc, #108]	; (8009da4 <__sfp+0x70>)
 8009d38:	681e      	ldr	r6, [r3, #0]
 8009d3a:	69b3      	ldr	r3, [r6, #24]
 8009d3c:	4607      	mov	r7, r0
 8009d3e:	b913      	cbnz	r3, 8009d46 <__sfp+0x12>
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7ff ffc7 	bl	8009cd4 <__sinit>
 8009d46:	3648      	adds	r6, #72	; 0x48
 8009d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	d503      	bpl.n	8009d58 <__sfp+0x24>
 8009d50:	6833      	ldr	r3, [r6, #0]
 8009d52:	b133      	cbz	r3, 8009d62 <__sfp+0x2e>
 8009d54:	6836      	ldr	r6, [r6, #0]
 8009d56:	e7f7      	b.n	8009d48 <__sfp+0x14>
 8009d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d5c:	b16d      	cbz	r5, 8009d7a <__sfp+0x46>
 8009d5e:	3468      	adds	r4, #104	; 0x68
 8009d60:	e7f4      	b.n	8009d4c <__sfp+0x18>
 8009d62:	2104      	movs	r1, #4
 8009d64:	4638      	mov	r0, r7
 8009d66:	f7ff ff9f 	bl	8009ca8 <__sfmoreglue>
 8009d6a:	6030      	str	r0, [r6, #0]
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d1f1      	bne.n	8009d54 <__sfp+0x20>
 8009d70:	230c      	movs	r3, #12
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	4604      	mov	r4, r0
 8009d76:	4620      	mov	r0, r4
 8009d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <__sfp+0x74>)
 8009d7c:	6665      	str	r5, [r4, #100]	; 0x64
 8009d7e:	e9c4 5500 	strd	r5, r5, [r4]
 8009d82:	60a5      	str	r5, [r4, #8]
 8009d84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009d88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009d8c:	2208      	movs	r2, #8
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d94:	f7ff fd3e 	bl	8009814 <memset>
 8009d98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009da0:	e7e9      	b.n	8009d76 <__sfp+0x42>
 8009da2:	bf00      	nop
 8009da4:	0800acc4 	.word	0x0800acc4
 8009da8:	ffff0001 	.word	0xffff0001

08009dac <_fwalk_reent>:
 8009dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db0:	4680      	mov	r8, r0
 8009db2:	4689      	mov	r9, r1
 8009db4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009db8:	2600      	movs	r6, #0
 8009dba:	b914      	cbnz	r4, 8009dc2 <_fwalk_reent+0x16>
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009dc6:	3f01      	subs	r7, #1
 8009dc8:	d501      	bpl.n	8009dce <_fwalk_reent+0x22>
 8009dca:	6824      	ldr	r4, [r4, #0]
 8009dcc:	e7f5      	b.n	8009dba <_fwalk_reent+0xe>
 8009dce:	89ab      	ldrh	r3, [r5, #12]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d907      	bls.n	8009de4 <_fwalk_reent+0x38>
 8009dd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	d003      	beq.n	8009de4 <_fwalk_reent+0x38>
 8009ddc:	4629      	mov	r1, r5
 8009dde:	4640      	mov	r0, r8
 8009de0:	47c8      	blx	r9
 8009de2:	4306      	orrs	r6, r0
 8009de4:	3568      	adds	r5, #104	; 0x68
 8009de6:	e7ee      	b.n	8009dc6 <_fwalk_reent+0x1a>

08009de8 <__swhatbuf_r>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	460e      	mov	r6, r1
 8009dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df0:	2900      	cmp	r1, #0
 8009df2:	b096      	sub	sp, #88	; 0x58
 8009df4:	4614      	mov	r4, r2
 8009df6:	461d      	mov	r5, r3
 8009df8:	da07      	bge.n	8009e0a <__swhatbuf_r+0x22>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	89b3      	ldrh	r3, [r6, #12]
 8009e00:	061a      	lsls	r2, r3, #24
 8009e02:	d410      	bmi.n	8009e26 <__swhatbuf_r+0x3e>
 8009e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e08:	e00e      	b.n	8009e28 <__swhatbuf_r+0x40>
 8009e0a:	466a      	mov	r2, sp
 8009e0c:	f000 fc48 	bl	800a6a0 <_fstat_r>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	dbf2      	blt.n	8009dfa <__swhatbuf_r+0x12>
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e1e:	425a      	negs	r2, r3
 8009e20:	415a      	adcs	r2, r3
 8009e22:	602a      	str	r2, [r5, #0]
 8009e24:	e7ee      	b.n	8009e04 <__swhatbuf_r+0x1c>
 8009e26:	2340      	movs	r3, #64	; 0x40
 8009e28:	2000      	movs	r0, #0
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	b016      	add	sp, #88	; 0x58
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}

08009e30 <__smakebuf_r>:
 8009e30:	898b      	ldrh	r3, [r1, #12]
 8009e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e34:	079d      	lsls	r5, r3, #30
 8009e36:	4606      	mov	r6, r0
 8009e38:	460c      	mov	r4, r1
 8009e3a:	d507      	bpl.n	8009e4c <__smakebuf_r+0x1c>
 8009e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	6123      	str	r3, [r4, #16]
 8009e44:	2301      	movs	r3, #1
 8009e46:	6163      	str	r3, [r4, #20]
 8009e48:	b002      	add	sp, #8
 8009e4a:	bd70      	pop	{r4, r5, r6, pc}
 8009e4c:	ab01      	add	r3, sp, #4
 8009e4e:	466a      	mov	r2, sp
 8009e50:	f7ff ffca 	bl	8009de8 <__swhatbuf_r>
 8009e54:	9900      	ldr	r1, [sp, #0]
 8009e56:	4605      	mov	r5, r0
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f000 f877 	bl	8009f4c <_malloc_r>
 8009e5e:	b948      	cbnz	r0, 8009e74 <__smakebuf_r+0x44>
 8009e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e64:	059a      	lsls	r2, r3, #22
 8009e66:	d4ef      	bmi.n	8009e48 <__smakebuf_r+0x18>
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	f043 0302 	orr.w	r3, r3, #2
 8009e70:	81a3      	strh	r3, [r4, #12]
 8009e72:	e7e3      	b.n	8009e3c <__smakebuf_r+0xc>
 8009e74:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <__smakebuf_r+0x7c>)
 8009e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	6020      	str	r0, [r4, #0]
 8009e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	9b00      	ldr	r3, [sp, #0]
 8009e84:	6163      	str	r3, [r4, #20]
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	6120      	str	r0, [r4, #16]
 8009e8a:	b15b      	cbz	r3, 8009ea4 <__smakebuf_r+0x74>
 8009e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e90:	4630      	mov	r0, r6
 8009e92:	f000 fc17 	bl	800a6c4 <_isatty_r>
 8009e96:	b128      	cbz	r0, 8009ea4 <__smakebuf_r+0x74>
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f023 0303 	bic.w	r3, r3, #3
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	431d      	orrs	r5, r3
 8009ea8:	81a5      	strh	r5, [r4, #12]
 8009eaa:	e7cd      	b.n	8009e48 <__smakebuf_r+0x18>
 8009eac:	08009c9d 	.word	0x08009c9d

08009eb0 <_free_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	d045      	beq.n	8009f44 <_free_r+0x94>
 8009eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebc:	1f0c      	subs	r4, r1, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfb8      	it	lt
 8009ec2:	18e4      	addlt	r4, r4, r3
 8009ec4:	f000 fc44 	bl	800a750 <__malloc_lock>
 8009ec8:	4a1f      	ldr	r2, [pc, #124]	; (8009f48 <_free_r+0x98>)
 8009eca:	6813      	ldr	r3, [r2, #0]
 8009ecc:	4610      	mov	r0, r2
 8009ece:	b933      	cbnz	r3, 8009ede <_free_r+0x2e>
 8009ed0:	6063      	str	r3, [r4, #4]
 8009ed2:	6014      	str	r4, [r2, #0]
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eda:	f000 bc3a 	b.w	800a752 <__malloc_unlock>
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	d90c      	bls.n	8009efc <_free_r+0x4c>
 8009ee2:	6821      	ldr	r1, [r4, #0]
 8009ee4:	1862      	adds	r2, r4, r1
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	bf04      	itt	eq
 8009eea:	681a      	ldreq	r2, [r3, #0]
 8009eec:	685b      	ldreq	r3, [r3, #4]
 8009eee:	6063      	str	r3, [r4, #4]
 8009ef0:	bf04      	itt	eq
 8009ef2:	1852      	addeq	r2, r2, r1
 8009ef4:	6022      	streq	r2, [r4, #0]
 8009ef6:	6004      	str	r4, [r0, #0]
 8009ef8:	e7ec      	b.n	8009ed4 <_free_r+0x24>
 8009efa:	4613      	mov	r3, r2
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	b10a      	cbz	r2, 8009f04 <_free_r+0x54>
 8009f00:	42a2      	cmp	r2, r4
 8009f02:	d9fa      	bls.n	8009efa <_free_r+0x4a>
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	1858      	adds	r0, r3, r1
 8009f08:	42a0      	cmp	r0, r4
 8009f0a:	d10b      	bne.n	8009f24 <_free_r+0x74>
 8009f0c:	6820      	ldr	r0, [r4, #0]
 8009f0e:	4401      	add	r1, r0
 8009f10:	1858      	adds	r0, r3, r1
 8009f12:	4282      	cmp	r2, r0
 8009f14:	6019      	str	r1, [r3, #0]
 8009f16:	d1dd      	bne.n	8009ed4 <_free_r+0x24>
 8009f18:	6810      	ldr	r0, [r2, #0]
 8009f1a:	6852      	ldr	r2, [r2, #4]
 8009f1c:	605a      	str	r2, [r3, #4]
 8009f1e:	4401      	add	r1, r0
 8009f20:	6019      	str	r1, [r3, #0]
 8009f22:	e7d7      	b.n	8009ed4 <_free_r+0x24>
 8009f24:	d902      	bls.n	8009f2c <_free_r+0x7c>
 8009f26:	230c      	movs	r3, #12
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	e7d3      	b.n	8009ed4 <_free_r+0x24>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	1821      	adds	r1, r4, r0
 8009f30:	428a      	cmp	r2, r1
 8009f32:	bf04      	itt	eq
 8009f34:	6811      	ldreq	r1, [r2, #0]
 8009f36:	6852      	ldreq	r2, [r2, #4]
 8009f38:	6062      	str	r2, [r4, #4]
 8009f3a:	bf04      	itt	eq
 8009f3c:	1809      	addeq	r1, r1, r0
 8009f3e:	6021      	streq	r1, [r4, #0]
 8009f40:	605c      	str	r4, [r3, #4]
 8009f42:	e7c7      	b.n	8009ed4 <_free_r+0x24>
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	20000bfc 	.word	0x20000bfc

08009f4c <_malloc_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	1ccd      	adds	r5, r1, #3
 8009f50:	f025 0503 	bic.w	r5, r5, #3
 8009f54:	3508      	adds	r5, #8
 8009f56:	2d0c      	cmp	r5, #12
 8009f58:	bf38      	it	cc
 8009f5a:	250c      	movcc	r5, #12
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	4606      	mov	r6, r0
 8009f60:	db01      	blt.n	8009f66 <_malloc_r+0x1a>
 8009f62:	42a9      	cmp	r1, r5
 8009f64:	d903      	bls.n	8009f6e <_malloc_r+0x22>
 8009f66:	230c      	movs	r3, #12
 8009f68:	6033      	str	r3, [r6, #0]
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
 8009f6e:	f000 fbef 	bl	800a750 <__malloc_lock>
 8009f72:	4a21      	ldr	r2, [pc, #132]	; (8009ff8 <_malloc_r+0xac>)
 8009f74:	6814      	ldr	r4, [r2, #0]
 8009f76:	4621      	mov	r1, r4
 8009f78:	b991      	cbnz	r1, 8009fa0 <_malloc_r+0x54>
 8009f7a:	4c20      	ldr	r4, [pc, #128]	; (8009ffc <_malloc_r+0xb0>)
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	b91b      	cbnz	r3, 8009f88 <_malloc_r+0x3c>
 8009f80:	4630      	mov	r0, r6
 8009f82:	f000 fb17 	bl	800a5b4 <_sbrk_r>
 8009f86:	6020      	str	r0, [r4, #0]
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 fb12 	bl	800a5b4 <_sbrk_r>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d124      	bne.n	8009fde <_malloc_r+0x92>
 8009f94:	230c      	movs	r3, #12
 8009f96:	6033      	str	r3, [r6, #0]
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 fbda 	bl	800a752 <__malloc_unlock>
 8009f9e:	e7e4      	b.n	8009f6a <_malloc_r+0x1e>
 8009fa0:	680b      	ldr	r3, [r1, #0]
 8009fa2:	1b5b      	subs	r3, r3, r5
 8009fa4:	d418      	bmi.n	8009fd8 <_malloc_r+0x8c>
 8009fa6:	2b0b      	cmp	r3, #11
 8009fa8:	d90f      	bls.n	8009fca <_malloc_r+0x7e>
 8009faa:	600b      	str	r3, [r1, #0]
 8009fac:	50cd      	str	r5, [r1, r3]
 8009fae:	18cc      	adds	r4, r1, r3
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f000 fbce 	bl	800a752 <__malloc_unlock>
 8009fb6:	f104 000b 	add.w	r0, r4, #11
 8009fba:	1d23      	adds	r3, r4, #4
 8009fbc:	f020 0007 	bic.w	r0, r0, #7
 8009fc0:	1ac3      	subs	r3, r0, r3
 8009fc2:	d0d3      	beq.n	8009f6c <_malloc_r+0x20>
 8009fc4:	425a      	negs	r2, r3
 8009fc6:	50e2      	str	r2, [r4, r3]
 8009fc8:	e7d0      	b.n	8009f6c <_malloc_r+0x20>
 8009fca:	428c      	cmp	r4, r1
 8009fcc:	684b      	ldr	r3, [r1, #4]
 8009fce:	bf16      	itet	ne
 8009fd0:	6063      	strne	r3, [r4, #4]
 8009fd2:	6013      	streq	r3, [r2, #0]
 8009fd4:	460c      	movne	r4, r1
 8009fd6:	e7eb      	b.n	8009fb0 <_malloc_r+0x64>
 8009fd8:	460c      	mov	r4, r1
 8009fda:	6849      	ldr	r1, [r1, #4]
 8009fdc:	e7cc      	b.n	8009f78 <_malloc_r+0x2c>
 8009fde:	1cc4      	adds	r4, r0, #3
 8009fe0:	f024 0403 	bic.w	r4, r4, #3
 8009fe4:	42a0      	cmp	r0, r4
 8009fe6:	d005      	beq.n	8009ff4 <_malloc_r+0xa8>
 8009fe8:	1a21      	subs	r1, r4, r0
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 fae2 	bl	800a5b4 <_sbrk_r>
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	d0cf      	beq.n	8009f94 <_malloc_r+0x48>
 8009ff4:	6025      	str	r5, [r4, #0]
 8009ff6:	e7db      	b.n	8009fb0 <_malloc_r+0x64>
 8009ff8:	20000bfc 	.word	0x20000bfc
 8009ffc:	20000c00 	.word	0x20000c00

0800a000 <__ssputs_r>:
 800a000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a004:	688e      	ldr	r6, [r1, #8]
 800a006:	429e      	cmp	r6, r3
 800a008:	4682      	mov	sl, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	4690      	mov	r8, r2
 800a00e:	4699      	mov	r9, r3
 800a010:	d837      	bhi.n	800a082 <__ssputs_r+0x82>
 800a012:	898a      	ldrh	r2, [r1, #12]
 800a014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a018:	d031      	beq.n	800a07e <__ssputs_r+0x7e>
 800a01a:	6825      	ldr	r5, [r4, #0]
 800a01c:	6909      	ldr	r1, [r1, #16]
 800a01e:	1a6f      	subs	r7, r5, r1
 800a020:	6965      	ldr	r5, [r4, #20]
 800a022:	2302      	movs	r3, #2
 800a024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a028:	fb95 f5f3 	sdiv	r5, r5, r3
 800a02c:	f109 0301 	add.w	r3, r9, #1
 800a030:	443b      	add	r3, r7
 800a032:	429d      	cmp	r5, r3
 800a034:	bf38      	it	cc
 800a036:	461d      	movcc	r5, r3
 800a038:	0553      	lsls	r3, r2, #21
 800a03a:	d530      	bpl.n	800a09e <__ssputs_r+0x9e>
 800a03c:	4629      	mov	r1, r5
 800a03e:	f7ff ff85 	bl	8009f4c <_malloc_r>
 800a042:	4606      	mov	r6, r0
 800a044:	b950      	cbnz	r0, 800a05c <__ssputs_r+0x5c>
 800a046:	230c      	movs	r3, #12
 800a048:	f8ca 3000 	str.w	r3, [sl]
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05c:	463a      	mov	r2, r7
 800a05e:	6921      	ldr	r1, [r4, #16]
 800a060:	f000 fb52 	bl	800a708 <memcpy>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	6126      	str	r6, [r4, #16]
 800a072:	6165      	str	r5, [r4, #20]
 800a074:	443e      	add	r6, r7
 800a076:	1bed      	subs	r5, r5, r7
 800a078:	6026      	str	r6, [r4, #0]
 800a07a:	60a5      	str	r5, [r4, #8]
 800a07c:	464e      	mov	r6, r9
 800a07e:	454e      	cmp	r6, r9
 800a080:	d900      	bls.n	800a084 <__ssputs_r+0x84>
 800a082:	464e      	mov	r6, r9
 800a084:	4632      	mov	r2, r6
 800a086:	4641      	mov	r1, r8
 800a088:	6820      	ldr	r0, [r4, #0]
 800a08a:	f000 fb48 	bl	800a71e <memmove>
 800a08e:	68a3      	ldr	r3, [r4, #8]
 800a090:	1b9b      	subs	r3, r3, r6
 800a092:	60a3      	str	r3, [r4, #8]
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	441e      	add	r6, r3
 800a098:	6026      	str	r6, [r4, #0]
 800a09a:	2000      	movs	r0, #0
 800a09c:	e7dc      	b.n	800a058 <__ssputs_r+0x58>
 800a09e:	462a      	mov	r2, r5
 800a0a0:	f000 fb58 	bl	800a754 <_realloc_r>
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d1e2      	bne.n	800a070 <__ssputs_r+0x70>
 800a0aa:	6921      	ldr	r1, [r4, #16]
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	f7ff feff 	bl	8009eb0 <_free_r>
 800a0b2:	e7c8      	b.n	800a046 <__ssputs_r+0x46>

0800a0b4 <_svfiprintf_r>:
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	461d      	mov	r5, r3
 800a0ba:	898b      	ldrh	r3, [r1, #12]
 800a0bc:	061f      	lsls	r7, r3, #24
 800a0be:	b09d      	sub	sp, #116	; 0x74
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	d50f      	bpl.n	800a0e8 <_svfiprintf_r+0x34>
 800a0c8:	690b      	ldr	r3, [r1, #16]
 800a0ca:	b96b      	cbnz	r3, 800a0e8 <_svfiprintf_r+0x34>
 800a0cc:	2140      	movs	r1, #64	; 0x40
 800a0ce:	f7ff ff3d 	bl	8009f4c <_malloc_r>
 800a0d2:	6020      	str	r0, [r4, #0]
 800a0d4:	6120      	str	r0, [r4, #16]
 800a0d6:	b928      	cbnz	r0, 800a0e4 <_svfiprintf_r+0x30>
 800a0d8:	230c      	movs	r3, #12
 800a0da:	f8c8 3000 	str.w	r3, [r8]
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0e2:	e0c8      	b.n	800a276 <_svfiprintf_r+0x1c2>
 800a0e4:	2340      	movs	r3, #64	; 0x40
 800a0e6:	6163      	str	r3, [r4, #20]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ec:	2320      	movs	r3, #32
 800a0ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0f2:	2330      	movs	r3, #48	; 0x30
 800a0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0f8:	9503      	str	r5, [sp, #12]
 800a0fa:	f04f 0b01 	mov.w	fp, #1
 800a0fe:	4637      	mov	r7, r6
 800a100:	463d      	mov	r5, r7
 800a102:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a106:	b10b      	cbz	r3, 800a10c <_svfiprintf_r+0x58>
 800a108:	2b25      	cmp	r3, #37	; 0x25
 800a10a:	d13e      	bne.n	800a18a <_svfiprintf_r+0xd6>
 800a10c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a110:	d00b      	beq.n	800a12a <_svfiprintf_r+0x76>
 800a112:	4653      	mov	r3, sl
 800a114:	4632      	mov	r2, r6
 800a116:	4621      	mov	r1, r4
 800a118:	4640      	mov	r0, r8
 800a11a:	f7ff ff71 	bl	800a000 <__ssputs_r>
 800a11e:	3001      	adds	r0, #1
 800a120:	f000 80a4 	beq.w	800a26c <_svfiprintf_r+0x1b8>
 800a124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a126:	4453      	add	r3, sl
 800a128:	9309      	str	r3, [sp, #36]	; 0x24
 800a12a:	783b      	ldrb	r3, [r7, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 809d 	beq.w	800a26c <_svfiprintf_r+0x1b8>
 800a132:	2300      	movs	r3, #0
 800a134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a144:	931a      	str	r3, [sp, #104]	; 0x68
 800a146:	462f      	mov	r7, r5
 800a148:	2205      	movs	r2, #5
 800a14a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a14e:	4850      	ldr	r0, [pc, #320]	; (800a290 <_svfiprintf_r+0x1dc>)
 800a150:	f7f6 f866 	bl	8000220 <memchr>
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	b9d0      	cbnz	r0, 800a18e <_svfiprintf_r+0xda>
 800a158:	06d9      	lsls	r1, r3, #27
 800a15a:	bf44      	itt	mi
 800a15c:	2220      	movmi	r2, #32
 800a15e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a162:	071a      	lsls	r2, r3, #28
 800a164:	bf44      	itt	mi
 800a166:	222b      	movmi	r2, #43	; 0x2b
 800a168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a16c:	782a      	ldrb	r2, [r5, #0]
 800a16e:	2a2a      	cmp	r2, #42	; 0x2a
 800a170:	d015      	beq.n	800a19e <_svfiprintf_r+0xea>
 800a172:	9a07      	ldr	r2, [sp, #28]
 800a174:	462f      	mov	r7, r5
 800a176:	2000      	movs	r0, #0
 800a178:	250a      	movs	r5, #10
 800a17a:	4639      	mov	r1, r7
 800a17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a180:	3b30      	subs	r3, #48	; 0x30
 800a182:	2b09      	cmp	r3, #9
 800a184:	d94d      	bls.n	800a222 <_svfiprintf_r+0x16e>
 800a186:	b1b8      	cbz	r0, 800a1b8 <_svfiprintf_r+0x104>
 800a188:	e00f      	b.n	800a1aa <_svfiprintf_r+0xf6>
 800a18a:	462f      	mov	r7, r5
 800a18c:	e7b8      	b.n	800a100 <_svfiprintf_r+0x4c>
 800a18e:	4a40      	ldr	r2, [pc, #256]	; (800a290 <_svfiprintf_r+0x1dc>)
 800a190:	1a80      	subs	r0, r0, r2
 800a192:	fa0b f000 	lsl.w	r0, fp, r0
 800a196:	4318      	orrs	r0, r3
 800a198:	9004      	str	r0, [sp, #16]
 800a19a:	463d      	mov	r5, r7
 800a19c:	e7d3      	b.n	800a146 <_svfiprintf_r+0x92>
 800a19e:	9a03      	ldr	r2, [sp, #12]
 800a1a0:	1d11      	adds	r1, r2, #4
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	9103      	str	r1, [sp, #12]
 800a1a6:	2a00      	cmp	r2, #0
 800a1a8:	db01      	blt.n	800a1ae <_svfiprintf_r+0xfa>
 800a1aa:	9207      	str	r2, [sp, #28]
 800a1ac:	e004      	b.n	800a1b8 <_svfiprintf_r+0x104>
 800a1ae:	4252      	negs	r2, r2
 800a1b0:	f043 0302 	orr.w	r3, r3, #2
 800a1b4:	9207      	str	r2, [sp, #28]
 800a1b6:	9304      	str	r3, [sp, #16]
 800a1b8:	783b      	ldrb	r3, [r7, #0]
 800a1ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a1bc:	d10c      	bne.n	800a1d8 <_svfiprintf_r+0x124>
 800a1be:	787b      	ldrb	r3, [r7, #1]
 800a1c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c2:	d133      	bne.n	800a22c <_svfiprintf_r+0x178>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	1d1a      	adds	r2, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	9203      	str	r2, [sp, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bfb8      	it	lt
 800a1d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1d4:	3702      	adds	r7, #2
 800a1d6:	9305      	str	r3, [sp, #20]
 800a1d8:	4d2e      	ldr	r5, [pc, #184]	; (800a294 <_svfiprintf_r+0x1e0>)
 800a1da:	7839      	ldrb	r1, [r7, #0]
 800a1dc:	2203      	movs	r2, #3
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f7f6 f81e 	bl	8000220 <memchr>
 800a1e4:	b138      	cbz	r0, 800a1f6 <_svfiprintf_r+0x142>
 800a1e6:	2340      	movs	r3, #64	; 0x40
 800a1e8:	1b40      	subs	r0, r0, r5
 800a1ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	4303      	orrs	r3, r0
 800a1f2:	3701      	adds	r7, #1
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	7839      	ldrb	r1, [r7, #0]
 800a1f8:	4827      	ldr	r0, [pc, #156]	; (800a298 <_svfiprintf_r+0x1e4>)
 800a1fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1fe:	2206      	movs	r2, #6
 800a200:	1c7e      	adds	r6, r7, #1
 800a202:	f7f6 f80d 	bl	8000220 <memchr>
 800a206:	2800      	cmp	r0, #0
 800a208:	d038      	beq.n	800a27c <_svfiprintf_r+0x1c8>
 800a20a:	4b24      	ldr	r3, [pc, #144]	; (800a29c <_svfiprintf_r+0x1e8>)
 800a20c:	bb13      	cbnz	r3, 800a254 <_svfiprintf_r+0x1a0>
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	3307      	adds	r3, #7
 800a212:	f023 0307 	bic.w	r3, r3, #7
 800a216:	3308      	adds	r3, #8
 800a218:	9303      	str	r3, [sp, #12]
 800a21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21c:	444b      	add	r3, r9
 800a21e:	9309      	str	r3, [sp, #36]	; 0x24
 800a220:	e76d      	b.n	800a0fe <_svfiprintf_r+0x4a>
 800a222:	fb05 3202 	mla	r2, r5, r2, r3
 800a226:	2001      	movs	r0, #1
 800a228:	460f      	mov	r7, r1
 800a22a:	e7a6      	b.n	800a17a <_svfiprintf_r+0xc6>
 800a22c:	2300      	movs	r3, #0
 800a22e:	3701      	adds	r7, #1
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	4619      	mov	r1, r3
 800a234:	250a      	movs	r5, #10
 800a236:	4638      	mov	r0, r7
 800a238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23c:	3a30      	subs	r2, #48	; 0x30
 800a23e:	2a09      	cmp	r2, #9
 800a240:	d903      	bls.n	800a24a <_svfiprintf_r+0x196>
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0c8      	beq.n	800a1d8 <_svfiprintf_r+0x124>
 800a246:	9105      	str	r1, [sp, #20]
 800a248:	e7c6      	b.n	800a1d8 <_svfiprintf_r+0x124>
 800a24a:	fb05 2101 	mla	r1, r5, r1, r2
 800a24e:	2301      	movs	r3, #1
 800a250:	4607      	mov	r7, r0
 800a252:	e7f0      	b.n	800a236 <_svfiprintf_r+0x182>
 800a254:	ab03      	add	r3, sp, #12
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	4622      	mov	r2, r4
 800a25a:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <_svfiprintf_r+0x1ec>)
 800a25c:	a904      	add	r1, sp, #16
 800a25e:	4640      	mov	r0, r8
 800a260:	f3af 8000 	nop.w
 800a264:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a268:	4681      	mov	r9, r0
 800a26a:	d1d6      	bne.n	800a21a <_svfiprintf_r+0x166>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	065b      	lsls	r3, r3, #25
 800a270:	f53f af35 	bmi.w	800a0de <_svfiprintf_r+0x2a>
 800a274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a276:	b01d      	add	sp, #116	; 0x74
 800a278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27c:	ab03      	add	r3, sp, #12
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	4622      	mov	r2, r4
 800a282:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <_svfiprintf_r+0x1ec>)
 800a284:	a904      	add	r1, sp, #16
 800a286:	4640      	mov	r0, r8
 800a288:	f000 f882 	bl	800a390 <_printf_i>
 800a28c:	e7ea      	b.n	800a264 <_svfiprintf_r+0x1b0>
 800a28e:	bf00      	nop
 800a290:	0800ad28 	.word	0x0800ad28
 800a294:	0800ad2e 	.word	0x0800ad2e
 800a298:	0800ad32 	.word	0x0800ad32
 800a29c:	00000000 	.word	0x00000000
 800a2a0:	0800a001 	.word	0x0800a001

0800a2a4 <_printf_common>:
 800a2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	4691      	mov	r9, r2
 800a2aa:	461f      	mov	r7, r3
 800a2ac:	688a      	ldr	r2, [r1, #8]
 800a2ae:	690b      	ldr	r3, [r1, #16]
 800a2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	bfb8      	it	lt
 800a2b8:	4613      	movlt	r3, r2
 800a2ba:	f8c9 3000 	str.w	r3, [r9]
 800a2be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	b112      	cbz	r2, 800a2ce <_printf_common+0x2a>
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	f8c9 3000 	str.w	r3, [r9]
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	0699      	lsls	r1, r3, #26
 800a2d2:	bf42      	ittt	mi
 800a2d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2d8:	3302      	addmi	r3, #2
 800a2da:	f8c9 3000 	strmi.w	r3, [r9]
 800a2de:	6825      	ldr	r5, [r4, #0]
 800a2e0:	f015 0506 	ands.w	r5, r5, #6
 800a2e4:	d107      	bne.n	800a2f6 <_printf_common+0x52>
 800a2e6:	f104 0a19 	add.w	sl, r4, #25
 800a2ea:	68e3      	ldr	r3, [r4, #12]
 800a2ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a2f0:	1a9b      	subs	r3, r3, r2
 800a2f2:	42ab      	cmp	r3, r5
 800a2f4:	dc28      	bgt.n	800a348 <_printf_common+0xa4>
 800a2f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	3300      	adds	r3, #0
 800a2fe:	bf18      	it	ne
 800a300:	2301      	movne	r3, #1
 800a302:	0692      	lsls	r2, r2, #26
 800a304:	d42d      	bmi.n	800a362 <_printf_common+0xbe>
 800a306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a30a:	4639      	mov	r1, r7
 800a30c:	4630      	mov	r0, r6
 800a30e:	47c0      	blx	r8
 800a310:	3001      	adds	r0, #1
 800a312:	d020      	beq.n	800a356 <_printf_common+0xb2>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	68e5      	ldr	r5, [r4, #12]
 800a318:	f8d9 2000 	ldr.w	r2, [r9]
 800a31c:	f003 0306 	and.w	r3, r3, #6
 800a320:	2b04      	cmp	r3, #4
 800a322:	bf08      	it	eq
 800a324:	1aad      	subeq	r5, r5, r2
 800a326:	68a3      	ldr	r3, [r4, #8]
 800a328:	6922      	ldr	r2, [r4, #16]
 800a32a:	bf0c      	ite	eq
 800a32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a330:	2500      	movne	r5, #0
 800a332:	4293      	cmp	r3, r2
 800a334:	bfc4      	itt	gt
 800a336:	1a9b      	subgt	r3, r3, r2
 800a338:	18ed      	addgt	r5, r5, r3
 800a33a:	f04f 0900 	mov.w	r9, #0
 800a33e:	341a      	adds	r4, #26
 800a340:	454d      	cmp	r5, r9
 800a342:	d11a      	bne.n	800a37a <_printf_common+0xd6>
 800a344:	2000      	movs	r0, #0
 800a346:	e008      	b.n	800a35a <_printf_common+0xb6>
 800a348:	2301      	movs	r3, #1
 800a34a:	4652      	mov	r2, sl
 800a34c:	4639      	mov	r1, r7
 800a34e:	4630      	mov	r0, r6
 800a350:	47c0      	blx	r8
 800a352:	3001      	adds	r0, #1
 800a354:	d103      	bne.n	800a35e <_printf_common+0xba>
 800a356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35e:	3501      	adds	r5, #1
 800a360:	e7c3      	b.n	800a2ea <_printf_common+0x46>
 800a362:	18e1      	adds	r1, r4, r3
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	2030      	movs	r0, #48	; 0x30
 800a368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a36c:	4422      	add	r2, r4
 800a36e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a372:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a376:	3302      	adds	r3, #2
 800a378:	e7c5      	b.n	800a306 <_printf_common+0x62>
 800a37a:	2301      	movs	r3, #1
 800a37c:	4622      	mov	r2, r4
 800a37e:	4639      	mov	r1, r7
 800a380:	4630      	mov	r0, r6
 800a382:	47c0      	blx	r8
 800a384:	3001      	adds	r0, #1
 800a386:	d0e6      	beq.n	800a356 <_printf_common+0xb2>
 800a388:	f109 0901 	add.w	r9, r9, #1
 800a38c:	e7d8      	b.n	800a340 <_printf_common+0x9c>
	...

0800a390 <_printf_i>:
 800a390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a394:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a398:	460c      	mov	r4, r1
 800a39a:	7e09      	ldrb	r1, [r1, #24]
 800a39c:	b085      	sub	sp, #20
 800a39e:	296e      	cmp	r1, #110	; 0x6e
 800a3a0:	4617      	mov	r7, r2
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	4698      	mov	r8, r3
 800a3a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3a8:	f000 80b3 	beq.w	800a512 <_printf_i+0x182>
 800a3ac:	d822      	bhi.n	800a3f4 <_printf_i+0x64>
 800a3ae:	2963      	cmp	r1, #99	; 0x63
 800a3b0:	d036      	beq.n	800a420 <_printf_i+0x90>
 800a3b2:	d80a      	bhi.n	800a3ca <_printf_i+0x3a>
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	f000 80b9 	beq.w	800a52c <_printf_i+0x19c>
 800a3ba:	2958      	cmp	r1, #88	; 0x58
 800a3bc:	f000 8083 	beq.w	800a4c6 <_printf_i+0x136>
 800a3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3c8:	e032      	b.n	800a430 <_printf_i+0xa0>
 800a3ca:	2964      	cmp	r1, #100	; 0x64
 800a3cc:	d001      	beq.n	800a3d2 <_printf_i+0x42>
 800a3ce:	2969      	cmp	r1, #105	; 0x69
 800a3d0:	d1f6      	bne.n	800a3c0 <_printf_i+0x30>
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	6813      	ldr	r3, [r2, #0]
 800a3d6:	0605      	lsls	r5, r0, #24
 800a3d8:	f103 0104 	add.w	r1, r3, #4
 800a3dc:	d52a      	bpl.n	800a434 <_printf_i+0xa4>
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6011      	str	r1, [r2, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da03      	bge.n	800a3ee <_printf_i+0x5e>
 800a3e6:	222d      	movs	r2, #45	; 0x2d
 800a3e8:	425b      	negs	r3, r3
 800a3ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3ee:	486f      	ldr	r0, [pc, #444]	; (800a5ac <_printf_i+0x21c>)
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	e039      	b.n	800a468 <_printf_i+0xd8>
 800a3f4:	2973      	cmp	r1, #115	; 0x73
 800a3f6:	f000 809d 	beq.w	800a534 <_printf_i+0x1a4>
 800a3fa:	d808      	bhi.n	800a40e <_printf_i+0x7e>
 800a3fc:	296f      	cmp	r1, #111	; 0x6f
 800a3fe:	d020      	beq.n	800a442 <_printf_i+0xb2>
 800a400:	2970      	cmp	r1, #112	; 0x70
 800a402:	d1dd      	bne.n	800a3c0 <_printf_i+0x30>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	f043 0320 	orr.w	r3, r3, #32
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	e003      	b.n	800a416 <_printf_i+0x86>
 800a40e:	2975      	cmp	r1, #117	; 0x75
 800a410:	d017      	beq.n	800a442 <_printf_i+0xb2>
 800a412:	2978      	cmp	r1, #120	; 0x78
 800a414:	d1d4      	bne.n	800a3c0 <_printf_i+0x30>
 800a416:	2378      	movs	r3, #120	; 0x78
 800a418:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a41c:	4864      	ldr	r0, [pc, #400]	; (800a5b0 <_printf_i+0x220>)
 800a41e:	e055      	b.n	800a4cc <_printf_i+0x13c>
 800a420:	6813      	ldr	r3, [r2, #0]
 800a422:	1d19      	adds	r1, r3, #4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6011      	str	r1, [r2, #0]
 800a428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a42c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a430:	2301      	movs	r3, #1
 800a432:	e08c      	b.n	800a54e <_printf_i+0x1be>
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6011      	str	r1, [r2, #0]
 800a438:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a43c:	bf18      	it	ne
 800a43e:	b21b      	sxthne	r3, r3
 800a440:	e7cf      	b.n	800a3e2 <_printf_i+0x52>
 800a442:	6813      	ldr	r3, [r2, #0]
 800a444:	6825      	ldr	r5, [r4, #0]
 800a446:	1d18      	adds	r0, r3, #4
 800a448:	6010      	str	r0, [r2, #0]
 800a44a:	0628      	lsls	r0, r5, #24
 800a44c:	d501      	bpl.n	800a452 <_printf_i+0xc2>
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	e002      	b.n	800a458 <_printf_i+0xc8>
 800a452:	0668      	lsls	r0, r5, #25
 800a454:	d5fb      	bpl.n	800a44e <_printf_i+0xbe>
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	4854      	ldr	r0, [pc, #336]	; (800a5ac <_printf_i+0x21c>)
 800a45a:	296f      	cmp	r1, #111	; 0x6f
 800a45c:	bf14      	ite	ne
 800a45e:	220a      	movne	r2, #10
 800a460:	2208      	moveq	r2, #8
 800a462:	2100      	movs	r1, #0
 800a464:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a468:	6865      	ldr	r5, [r4, #4]
 800a46a:	60a5      	str	r5, [r4, #8]
 800a46c:	2d00      	cmp	r5, #0
 800a46e:	f2c0 8095 	blt.w	800a59c <_printf_i+0x20c>
 800a472:	6821      	ldr	r1, [r4, #0]
 800a474:	f021 0104 	bic.w	r1, r1, #4
 800a478:	6021      	str	r1, [r4, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d13d      	bne.n	800a4fa <_printf_i+0x16a>
 800a47e:	2d00      	cmp	r5, #0
 800a480:	f040 808e 	bne.w	800a5a0 <_printf_i+0x210>
 800a484:	4665      	mov	r5, ip
 800a486:	2a08      	cmp	r2, #8
 800a488:	d10b      	bne.n	800a4a2 <_printf_i+0x112>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	07db      	lsls	r3, r3, #31
 800a48e:	d508      	bpl.n	800a4a2 <_printf_i+0x112>
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	bfde      	ittt	le
 800a498:	2330      	movle	r3, #48	; 0x30
 800a49a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a49e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4a2:	ebac 0305 	sub.w	r3, ip, r5
 800a4a6:	6123      	str	r3, [r4, #16]
 800a4a8:	f8cd 8000 	str.w	r8, [sp]
 800a4ac:	463b      	mov	r3, r7
 800a4ae:	aa03      	add	r2, sp, #12
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7ff fef6 	bl	800a2a4 <_printf_common>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d14d      	bne.n	800a558 <_printf_i+0x1c8>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c0:	b005      	add	sp, #20
 800a4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4c6:	4839      	ldr	r0, [pc, #228]	; (800a5ac <_printf_i+0x21c>)
 800a4c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4cc:	6813      	ldr	r3, [r2, #0]
 800a4ce:	6821      	ldr	r1, [r4, #0]
 800a4d0:	1d1d      	adds	r5, r3, #4
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6015      	str	r5, [r2, #0]
 800a4d6:	060a      	lsls	r2, r1, #24
 800a4d8:	d50b      	bpl.n	800a4f2 <_printf_i+0x162>
 800a4da:	07ca      	lsls	r2, r1, #31
 800a4dc:	bf44      	itt	mi
 800a4de:	f041 0120 	orrmi.w	r1, r1, #32
 800a4e2:	6021      	strmi	r1, [r4, #0]
 800a4e4:	b91b      	cbnz	r3, 800a4ee <_printf_i+0x15e>
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	f022 0220 	bic.w	r2, r2, #32
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	e7b7      	b.n	800a462 <_printf_i+0xd2>
 800a4f2:	064d      	lsls	r5, r1, #25
 800a4f4:	bf48      	it	mi
 800a4f6:	b29b      	uxthmi	r3, r3
 800a4f8:	e7ef      	b.n	800a4da <_printf_i+0x14a>
 800a4fa:	4665      	mov	r5, ip
 800a4fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a500:	fb02 3311 	mls	r3, r2, r1, r3
 800a504:	5cc3      	ldrb	r3, [r0, r3]
 800a506:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a50a:	460b      	mov	r3, r1
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d1f5      	bne.n	800a4fc <_printf_i+0x16c>
 800a510:	e7b9      	b.n	800a486 <_printf_i+0xf6>
 800a512:	6813      	ldr	r3, [r2, #0]
 800a514:	6825      	ldr	r5, [r4, #0]
 800a516:	6961      	ldr	r1, [r4, #20]
 800a518:	1d18      	adds	r0, r3, #4
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	0628      	lsls	r0, r5, #24
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	d501      	bpl.n	800a526 <_printf_i+0x196>
 800a522:	6019      	str	r1, [r3, #0]
 800a524:	e002      	b.n	800a52c <_printf_i+0x19c>
 800a526:	066a      	lsls	r2, r5, #25
 800a528:	d5fb      	bpl.n	800a522 <_printf_i+0x192>
 800a52a:	8019      	strh	r1, [r3, #0]
 800a52c:	2300      	movs	r3, #0
 800a52e:	6123      	str	r3, [r4, #16]
 800a530:	4665      	mov	r5, ip
 800a532:	e7b9      	b.n	800a4a8 <_printf_i+0x118>
 800a534:	6813      	ldr	r3, [r2, #0]
 800a536:	1d19      	adds	r1, r3, #4
 800a538:	6011      	str	r1, [r2, #0]
 800a53a:	681d      	ldr	r5, [r3, #0]
 800a53c:	6862      	ldr	r2, [r4, #4]
 800a53e:	2100      	movs	r1, #0
 800a540:	4628      	mov	r0, r5
 800a542:	f7f5 fe6d 	bl	8000220 <memchr>
 800a546:	b108      	cbz	r0, 800a54c <_printf_i+0x1bc>
 800a548:	1b40      	subs	r0, r0, r5
 800a54a:	6060      	str	r0, [r4, #4]
 800a54c:	6863      	ldr	r3, [r4, #4]
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	2300      	movs	r3, #0
 800a552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a556:	e7a7      	b.n	800a4a8 <_printf_i+0x118>
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4639      	mov	r1, r7
 800a55e:	4630      	mov	r0, r6
 800a560:	47c0      	blx	r8
 800a562:	3001      	adds	r0, #1
 800a564:	d0aa      	beq.n	800a4bc <_printf_i+0x12c>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	079b      	lsls	r3, r3, #30
 800a56a:	d413      	bmi.n	800a594 <_printf_i+0x204>
 800a56c:	68e0      	ldr	r0, [r4, #12]
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	4298      	cmp	r0, r3
 800a572:	bfb8      	it	lt
 800a574:	4618      	movlt	r0, r3
 800a576:	e7a3      	b.n	800a4c0 <_printf_i+0x130>
 800a578:	2301      	movs	r3, #1
 800a57a:	464a      	mov	r2, r9
 800a57c:	4639      	mov	r1, r7
 800a57e:	4630      	mov	r0, r6
 800a580:	47c0      	blx	r8
 800a582:	3001      	adds	r0, #1
 800a584:	d09a      	beq.n	800a4bc <_printf_i+0x12c>
 800a586:	3501      	adds	r5, #1
 800a588:	68e3      	ldr	r3, [r4, #12]
 800a58a:	9a03      	ldr	r2, [sp, #12]
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	42ab      	cmp	r3, r5
 800a590:	dcf2      	bgt.n	800a578 <_printf_i+0x1e8>
 800a592:	e7eb      	b.n	800a56c <_printf_i+0x1dc>
 800a594:	2500      	movs	r5, #0
 800a596:	f104 0919 	add.w	r9, r4, #25
 800a59a:	e7f5      	b.n	800a588 <_printf_i+0x1f8>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1ac      	bne.n	800a4fa <_printf_i+0x16a>
 800a5a0:	7803      	ldrb	r3, [r0, #0]
 800a5a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5aa:	e76c      	b.n	800a486 <_printf_i+0xf6>
 800a5ac:	0800ad39 	.word	0x0800ad39
 800a5b0:	0800ad4a 	.word	0x0800ad4a

0800a5b4 <_sbrk_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4c06      	ldr	r4, [pc, #24]	; (800a5d0 <_sbrk_r+0x1c>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	f7f8 f9a4 	bl	800290c <_sbrk>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_sbrk_r+0x1a>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_sbrk_r+0x1a>
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	20001064 	.word	0x20001064

0800a5d4 <__sread>:
 800a5d4:	b510      	push	{r4, lr}
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5dc:	f000 f8e0 	bl	800a7a0 <_read_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	bfab      	itete	ge
 800a5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5e8:	181b      	addge	r3, r3, r0
 800a5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5ee:	bfac      	ite	ge
 800a5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5f2:	81a3      	strhlt	r3, [r4, #12]
 800a5f4:	bd10      	pop	{r4, pc}

0800a5f6 <__swrite>:
 800a5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fa:	461f      	mov	r7, r3
 800a5fc:	898b      	ldrh	r3, [r1, #12]
 800a5fe:	05db      	lsls	r3, r3, #23
 800a600:	4605      	mov	r5, r0
 800a602:	460c      	mov	r4, r1
 800a604:	4616      	mov	r6, r2
 800a606:	d505      	bpl.n	800a614 <__swrite+0x1e>
 800a608:	2302      	movs	r3, #2
 800a60a:	2200      	movs	r2, #0
 800a60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a610:	f000 f868 	bl	800a6e4 <_lseek_r>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	4632      	mov	r2, r6
 800a622:	463b      	mov	r3, r7
 800a624:	4628      	mov	r0, r5
 800a626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a62a:	f000 b817 	b.w	800a65c <_write_r>

0800a62e <__sseek>:
 800a62e:	b510      	push	{r4, lr}
 800a630:	460c      	mov	r4, r1
 800a632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a636:	f000 f855 	bl	800a6e4 <_lseek_r>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	bf15      	itete	ne
 800a640:	6560      	strne	r0, [r4, #84]	; 0x54
 800a642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a64a:	81a3      	strheq	r3, [r4, #12]
 800a64c:	bf18      	it	ne
 800a64e:	81a3      	strhne	r3, [r4, #12]
 800a650:	bd10      	pop	{r4, pc}

0800a652 <__sclose>:
 800a652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a656:	f000 b813 	b.w	800a680 <_close_r>
	...

0800a65c <_write_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4c07      	ldr	r4, [pc, #28]	; (800a67c <_write_r+0x20>)
 800a660:	4605      	mov	r5, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	6022      	str	r2, [r4, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7f7 fd99 	bl	80021a2 <_write>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_write_r+0x1e>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	b103      	cbz	r3, 800a67a <_write_r+0x1e>
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20001064 	.word	0x20001064

0800a680 <_close_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4c06      	ldr	r4, [pc, #24]	; (800a69c <_close_r+0x1c>)
 800a684:	2300      	movs	r3, #0
 800a686:	4605      	mov	r5, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	6023      	str	r3, [r4, #0]
 800a68c:	f7f8 f909 	bl	80028a2 <_close>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_close_r+0x1a>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	b103      	cbz	r3, 800a69a <_close_r+0x1a>
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20001064 	.word	0x20001064

0800a6a0 <_fstat_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4c07      	ldr	r4, [pc, #28]	; (800a6c0 <_fstat_r+0x20>)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	4608      	mov	r0, r1
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	f7f8 f904 	bl	80028ba <_fstat>
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	d102      	bne.n	800a6bc <_fstat_r+0x1c>
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	b103      	cbz	r3, 800a6bc <_fstat_r+0x1c>
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
 800a6be:	bf00      	nop
 800a6c0:	20001064 	.word	0x20001064

0800a6c4 <_isatty_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4c06      	ldr	r4, [pc, #24]	; (800a6e0 <_isatty_r+0x1c>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	f7f8 f903 	bl	80028da <_isatty>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_isatty_r+0x1a>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_isatty_r+0x1a>
 800a6dc:	602b      	str	r3, [r5, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	20001064 	.word	0x20001064

0800a6e4 <_lseek_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4c07      	ldr	r4, [pc, #28]	; (800a704 <_lseek_r+0x20>)
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	4608      	mov	r0, r1
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f7f8 f8fc 	bl	80028f0 <_lseek>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_lseek_r+0x1e>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_lseek_r+0x1e>
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	20001064 	.word	0x20001064

0800a708 <memcpy>:
 800a708:	b510      	push	{r4, lr}
 800a70a:	1e43      	subs	r3, r0, #1
 800a70c:	440a      	add	r2, r1
 800a70e:	4291      	cmp	r1, r2
 800a710:	d100      	bne.n	800a714 <memcpy+0xc>
 800a712:	bd10      	pop	{r4, pc}
 800a714:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a71c:	e7f7      	b.n	800a70e <memcpy+0x6>

0800a71e <memmove>:
 800a71e:	4288      	cmp	r0, r1
 800a720:	b510      	push	{r4, lr}
 800a722:	eb01 0302 	add.w	r3, r1, r2
 800a726:	d807      	bhi.n	800a738 <memmove+0x1a>
 800a728:	1e42      	subs	r2, r0, #1
 800a72a:	4299      	cmp	r1, r3
 800a72c:	d00a      	beq.n	800a744 <memmove+0x26>
 800a72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a732:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a736:	e7f8      	b.n	800a72a <memmove+0xc>
 800a738:	4283      	cmp	r3, r0
 800a73a:	d9f5      	bls.n	800a728 <memmove+0xa>
 800a73c:	1881      	adds	r1, r0, r2
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	42d3      	cmn	r3, r2
 800a742:	d100      	bne.n	800a746 <memmove+0x28>
 800a744:	bd10      	pop	{r4, pc}
 800a746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a74a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a74e:	e7f7      	b.n	800a740 <memmove+0x22>

0800a750 <__malloc_lock>:
 800a750:	4770      	bx	lr

0800a752 <__malloc_unlock>:
 800a752:	4770      	bx	lr

0800a754 <_realloc_r>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	4607      	mov	r7, r0
 800a758:	4614      	mov	r4, r2
 800a75a:	460e      	mov	r6, r1
 800a75c:	b921      	cbnz	r1, 800a768 <_realloc_r+0x14>
 800a75e:	4611      	mov	r1, r2
 800a760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a764:	f7ff bbf2 	b.w	8009f4c <_malloc_r>
 800a768:	b922      	cbnz	r2, 800a774 <_realloc_r+0x20>
 800a76a:	f7ff fba1 	bl	8009eb0 <_free_r>
 800a76e:	4625      	mov	r5, r4
 800a770:	4628      	mov	r0, r5
 800a772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a774:	f000 f826 	bl	800a7c4 <_malloc_usable_size_r>
 800a778:	42a0      	cmp	r0, r4
 800a77a:	d20f      	bcs.n	800a79c <_realloc_r+0x48>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4638      	mov	r0, r7
 800a780:	f7ff fbe4 	bl	8009f4c <_malloc_r>
 800a784:	4605      	mov	r5, r0
 800a786:	2800      	cmp	r0, #0
 800a788:	d0f2      	beq.n	800a770 <_realloc_r+0x1c>
 800a78a:	4631      	mov	r1, r6
 800a78c:	4622      	mov	r2, r4
 800a78e:	f7ff ffbb 	bl	800a708 <memcpy>
 800a792:	4631      	mov	r1, r6
 800a794:	4638      	mov	r0, r7
 800a796:	f7ff fb8b 	bl	8009eb0 <_free_r>
 800a79a:	e7e9      	b.n	800a770 <_realloc_r+0x1c>
 800a79c:	4635      	mov	r5, r6
 800a79e:	e7e7      	b.n	800a770 <_realloc_r+0x1c>

0800a7a0 <_read_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4c07      	ldr	r4, [pc, #28]	; (800a7c0 <_read_r+0x20>)
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	6022      	str	r2, [r4, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7f8 f85a 	bl	8002868 <_read>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_read_r+0x1e>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_read_r+0x1e>
 800a7bc:	602b      	str	r3, [r5, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20001064 	.word	0x20001064

0800a7c4 <_malloc_usable_size_r>:
 800a7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7c8:	1f18      	subs	r0, r3, #4
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfbc      	itt	lt
 800a7ce:	580b      	ldrlt	r3, [r1, r0]
 800a7d0:	18c0      	addlt	r0, r0, r3
 800a7d2:	4770      	bx	lr

0800a7d4 <_init>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr

0800a7e0 <_fini>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	bf00      	nop
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr
