
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014464  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001410  08014648  08014648  00024648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a58  08015a58  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08015a58  08015a58  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015a58  08015a58  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a58  08015a58  00025a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a5c  08015a5c  00025a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08015a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  20001e0c  0801786c  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cf4  0801786c  00032cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049701  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e83  00000000  00000000  0007b53d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002368  00000000  00000000  000833c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ef8  00000000  00000000  00085728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c02  00000000  00000000  00087620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000302fb  00000000  00000000  000bd222  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126c80  00000000  00000000  000ed51d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021419d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bf4  00000000  00000000  00214218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801462c 	.word	0x0801462c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	0801462c 	.word	0x0801462c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00e fd2a 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f92e 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00e fd1d 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00e fd12 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00e fd07 	bl	800f768 <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08014648 	.word	0x08014648
 8000d64:	08014654 	.word	0x08014654
 8000d68:	08014658 	.word	0x08014658
 8000d6c:	0801465c 	.word	0x0801465c

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00e fd39 	bl	800f7ea <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f00f f98f 	bl	801009c <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f00e ff71 	bl	800fc68 <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00e fce0 	bl	800f768 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f007 fef8 	bl	8008ba0 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fba0 	bl	80014f4 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08014660 	.word	0x08014660

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b09c      	sub	sp, #112	; 0x70
 8000dc4:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000dc6:	f004 f907 	bl	8004fd8 <ToplevelMenu_getStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000dd0:	f004 f902 	bl	8004fd8 <ToplevelMenu_getStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d008      	beq.n	8000dec <DM_UpdateDisplay+0x2c>
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d00a      	beq.n	8000df4 <DM_UpdateDisplay+0x34>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000de2:	e083      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f002 ff13 	bl	8003c10 <ToplevelMenu_DrawMenu>
				break;
 8000dea:	e07f      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f002 ff0f 	bl	8003c10 <ToplevelMenu_DrawMenu>
				break;
 8000df2:	e07b      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f002 ff0b 	bl	8003c10 <ToplevelMenu_DrawMenu>
				break;
 8000dfa:	e077      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dfc:	f003 feda 	bl	8004bb4 <FuncMenu_getStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000e06:	f003 fed5 	bl	8004bb4 <FuncMenu_getStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <DM_UpdateDisplay+0x62>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d00a      	beq.n	8000e2a <DM_UpdateDisplay+0x6a>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d000      	beq.n	8000e1a <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000e18:	e068      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f002 f94a 	bl	80030b4 <FuncMenu_DrawMenu>
				break;
 8000e20:	e064      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f002 f946 	bl	80030b4 <FuncMenu_DrawMenu>
				break;
 8000e28:	e060      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f002 f942 	bl	80030b4 <FuncMenu_DrawMenu>
				break;
 8000e30:	e05c      	b.n	8000eec <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000e32:	f003 ffb7 	bl	8004da4 <GainMenu_getStatus>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000e3c:	f003 ffb2 	bl	8004da4 <GainMenu_getStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <DM_UpdateDisplay+0x98>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d00a      	beq.n	8000e60 <DM_UpdateDisplay+0xa0>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e4e:	e04d      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 fe03 	bl	8003a5c <GainMenu_DrawMenu>
				break;
 8000e56:	e049      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 fdff 	bl	8003a5c <GainMenu_DrawMenu>
				break;
 8000e5e:	e045      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f002 fdfb 	bl	8003a5c <GainMenu_DrawMenu>
				break;
 8000e66:	e041      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e68:	f003 fe98 	bl	8004b9c <FreqMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e72:	f003 fe93 	bl	8004b9c <FreqMenu_getStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d835      	bhi.n	8000eea <DM_UpdateDisplay+0x12a>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <DM_UpdateDisplay+0xc4>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000ea9 	.word	0x08000ea9
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb9 	.word	0x08000eb9
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fb8f 	bl	80015bc <FreqMenu_DrawMenu>

				break;
 8000e9e:	e025      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fb8b 	bl	80015bc <FreqMenu_DrawMenu>
				break;
 8000ea6:	e021      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fb87 	bl	80015bc <FreqMenu_DrawMenu>

				break;
 8000eae:	e01d      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fb83 	bl	80015bc <FreqMenu_DrawMenu>
				break;
 8000eb6:	e019      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 fb7f 	bl	80015bc <FreqMenu_DrawMenu>
				break;
 8000ebe:	e015      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000ec0:	f003 f894 	bl	8003fec <BiasMenu_getStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000ed0:	e00c      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ed2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <DM_UpdateDisplay+0x1a4>)
 8000ee4:	f00e fc40 	bl	800f768 <ILI9341_Draw_Text>
 8000ee8:	e000      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				break;
 8000eea:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
 8000ef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef4:	222e      	movs	r2, #46	; 0x2e
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00f fb11 	bl	8010520 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000efe:	f004 fac5 	bl	800548c <BO_GetOutputBias>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <DM_UpdateDisplay+0x1a8>)
 8000f0a:	2132      	movs	r1, #50	; 0x32
 8000f0c:	f00f ffe8 	bl	8010ee0 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f10:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f14:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	220a      	movs	r2, #10
 8000f22:	21dc      	movs	r1, #220	; 0xdc
 8000f24:	f00e fc20 	bl	800f768 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000f28:	2300      	movs	r3, #0
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	222e      	movs	r2, #46	; 0x2e
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f00f faf4 	bl	8010520 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <DM_UpdateDisplay+0x1ac>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <DM_UpdateDisplay+0x1b0>)
 8000f40:	2132      	movs	r1, #50	; 0x32
 8000f42:	f00f ffcd 	bl	8010ee0 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000f46:	4638      	mov	r0, r7
 8000f48:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2300      	movs	r3, #0
 8000f54:	2214      	movs	r2, #20
 8000f56:	21dc      	movs	r1, #220	; 0xdc
 8000f58:	f00e fc06 	bl	800f768 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG



}
 8000f5c:	bf00      	nop
 8000f5e:	3768      	adds	r7, #104	; 0x68
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	08014670 	.word	0x08014670
 8000f68:	08014694 	.word	0x08014694
 8000f6c:	40012c00 	.word	0x40012c00
 8000f70:	080146a4 	.word	0x080146a4

08000f74 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b09f      	sub	sp, #124	; 0x7c
 8000f78:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f92:	238c      	movs	r3, #140	; 0x8c
 8000f94:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f98:	2328      	movs	r3, #40	; 0x28
 8000f9a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000fb0:	23af      	movs	r3, #175	; 0xaf
 8000fb2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000fb6:	2346      	movs	r3, #70	; 0x46
 8000fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000fce:	238a      	movs	r3, #138	; 0x8a
 8000fd0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000fda:	4bc4      	ldr	r3, [pc, #784]	; (80012ec <DM_DisplayFormattedOutput+0x378>)
 8000fdc:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000fec:	23a1      	movs	r3, #161	; 0xa1
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000ff2:	2382      	movs	r3, #130	; 0x82
 8000ff4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000ff8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001002:	b29b      	uxth	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800100e:	460a      	mov	r2, r1
 8001010:	2103      	movs	r1, #3
 8001012:	48b7      	ldr	r0, [pc, #732]	; (80012f0 <DM_DisplayFormattedOutput+0x37c>)
 8001014:	f00e fba8 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800101c:	b299      	uxth	r1, r3
 800101e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001022:	b29b      	uxth	r3, r3
 8001024:	2200      	movs	r2, #0
 8001026:	9201      	str	r2, [sp, #4]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800102e:	460a      	mov	r2, r1
 8001030:	2103      	movs	r1, #3
 8001032:	48b0      	ldr	r0, [pc, #704]	; (80012f4 <DM_DisplayFormattedOutput+0x380>)
 8001034:	f00e fb98 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001038:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800103c:	b299      	uxth	r1, r3
 800103e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001042:	b29b      	uxth	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800104e:	460a      	mov	r2, r1
 8001050:	2103      	movs	r1, #3
 8001052:	48a9      	ldr	r0, [pc, #676]	; (80012f8 <DM_DisplayFormattedOutput+0x384>)
 8001054:	f00e fb88 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001058:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800105c:	b299      	uxth	r1, r3
 800105e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001062:	b29b      	uxth	r3, r3
 8001064:	2200      	movs	r2, #0
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800106e:	460a      	mov	r2, r1
 8001070:	2103      	movs	r1, #3
 8001072:	48a2      	ldr	r0, [pc, #648]	; (80012fc <DM_DisplayFormattedOutput+0x388>)
 8001074:	f00e fb78 	bl	800f768 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001078:	f005 fd94 	bl	8006ba4 <SM_GetOutputInHertz>
 800107c:	ee10 3a10 	vmov	r3, s0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a9b      	ldr	r2, [pc, #620]	; (8001300 <DM_DisplayFormattedOutput+0x38c>)
 8001094:	210f      	movs	r1, #15
 8001096:	f00f ff23 	bl	8010ee0 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800109a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800109e:	b299      	uxth	r1, r3
 80010a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80010a4:	b29c      	uxth	r4, r3
 80010a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80010b0:	2200      	movs	r2, #0
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010ba:	4622      	mov	r2, r4
 80010bc:	f00e fb54 	bl	800f768 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80010c0:	2000      	movs	r0, #0
 80010c2:	f005 fad7 	bl	8006674 <SM_GetOutputChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 80010ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01d      	beq.n	8001110 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 80010d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa5d 	bl	8000598 <__aeabi_f2d>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010e6:	e9cd 3400 	strd	r3, r4, [sp]
 80010ea:	4a86      	ldr	r2, [pc, #536]	; (8001304 <DM_DisplayFormattedOutput+0x390>)
 80010ec:	2112      	movs	r1, #18
 80010ee:	f00f fef7 	bl	8010ee0 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80010f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa4e 	bl	8000598 <__aeabi_f2d>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	f107 0014 	add.w	r0, r7, #20
 8001104:	e9cd 3400 	strd	r3, r4, [sp]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <DM_DisplayFormattedOutput+0x394>)
 800110a:	2114      	movs	r1, #20
 800110c:	f00f fee8 	bl	8010ee0 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001110:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001114:	b299      	uxth	r1, r3
 8001116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800111a:	b29c      	uxth	r4, r3
 800111c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001120:	b29b      	uxth	r3, r3
 8001122:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001130:	4622      	mov	r2, r4
 8001132:	f00e fb19 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001136:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800113a:	b299      	uxth	r1, r3
 800113c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001140:	b29c      	uxth	r4, r3
 8001142:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001146:	b29b      	uxth	r3, r3
 8001148:	f107 0014 	add.w	r0, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001156:	4622      	mov	r2, r4
 8001158:	f00e fb06 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800115c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001160:	b29b      	uxth	r3, r3
 8001162:	3380      	adds	r3, #128	; 0x80
 8001164:	b299      	uxth	r1, r3
 8001166:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800116a:	b298      	uxth	r0, r3
 800116c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001170:	b29b      	uxth	r3, r3
 8001172:	2200      	movs	r2, #0
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800117c:	4602      	mov	r2, r0
 800117e:	4863      	ldr	r0, [pc, #396]	; (800130c <DM_DisplayFormattedOutput+0x398>)
 8001180:	f00e faf2 	bl	800f768 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001184:	f004 f982 	bl	800548c <BO_GetOutputBias>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <DM_DisplayFormattedOutput+0x222>
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
 8001194:	e00b      	b.n	80011ae <DM_DisplayFormattedOutput+0x23a>
 8001196:	f004 f979 	bl	800548c <BO_GetOutputBias>
 800119a:	ee07 0a90 	vmov	s15, r0
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80011ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011b0:	f7ff f9f2 	bl	8000598 <__aeabi_f2d>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	f107 0008 	add.w	r0, r7, #8
 80011bc:	e9cd 3400 	strd	r3, r4, [sp]
 80011c0:	4a53      	ldr	r2, [pc, #332]	; (8001310 <DM_DisplayFormattedOutput+0x39c>)
 80011c2:	210c      	movs	r1, #12
 80011c4:	f00f fe8c 	bl	8010ee0 <sniprintf>
	if(BO_GetBiasPolarity())
 80011c8:	f004 f900 	bl	80053cc <BO_GetBiasPolarity>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d022      	beq.n	8001218 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <DM_DisplayFormattedOutput+0x3a0>)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4611      	mov	r1, r2
 80011da:	8019      	strh	r1, [r3, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	0c12      	lsrs	r2, r2, #16
 80011e0:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e2:	f107 0208 	add.w	r2, r7, #8
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00f feac 	bl	8010f48 <strcat>
 80011f0:	4604      	mov	r4, r0
 80011f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011f6:	b299      	uxth	r1, r3
 80011f8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011fc:	b298      	uxth	r0, r3
 80011fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001202:	b29b      	uxth	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	9201      	str	r2, [sp, #4]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800120e:	4602      	mov	r2, r0
 8001210:	4620      	mov	r0, r4
 8001212:	f00e faa9 	bl	800f768 <ILI9341_Draw_Text>
 8001216:	e021      	b.n	800125c <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 8001218:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <DM_DisplayFormattedOutput+0x3a4>)
 800121a:	463b      	mov	r3, r7
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	4611      	mov	r1, r2
 8001220:	8019      	strh	r1, [r3, #0]
 8001222:	3302      	adds	r3, #2
 8001224:	0c12      	lsrs	r2, r2, #16
 8001226:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001228:	f107 0208 	add.w	r2, r7, #8
 800122c:	463b      	mov	r3, r7
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f00f fe89 	bl	8010f48 <strcat>
 8001236:	4604      	mov	r4, r0
 8001238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800123c:	b299      	uxth	r1, r3
 800123e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001242:	b298      	uxth	r0, r3
 8001244:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001248:	b29b      	uxth	r3, r3
 800124a:	2200      	movs	r2, #0
 800124c:	9201      	str	r2, [sp, #4]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001254:	4602      	mov	r2, r0
 8001256:	4620      	mov	r0, r4
 8001258:	f00e fa86 	bl	800f768 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800125c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001260:	b29b      	uxth	r3, r3
 8001262:	2200      	movs	r2, #0
 8001264:	9201      	str	r2, [sp, #4]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800126c:	22aa      	movs	r2, #170	; 0xaa
 800126e:	2103      	movs	r1, #3
 8001270:	482a      	ldr	r0, [pc, #168]	; (800131c <DM_DisplayFormattedOutput+0x3a8>)
 8001272:	f00e fa79 	bl	800f768 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001276:	2000      	movs	r0, #0
 8001278:	f005 f9fc 	bl	8006674 <SM_GetOutputChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800128c:	2b06      	cmp	r3, #6
 800128e:	f200 8091 	bhi.w	80013b4 <DM_DisplayFormattedOutput+0x440>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <DM_DisplayFormattedOutput+0x324>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012b5 	.word	0x080012b5
 800129c:	080012d1 	.word	0x080012d1
 80012a0:	08001329 	.word	0x08001329
 80012a4:	08001345 	.word	0x08001345
 80012a8:	08001361 	.word	0x08001361
 80012ac:	0800137d 	.word	0x0800137d
 80012b0:	08001399 	.word	0x08001399
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80012b4:	233c      	movs	r3, #60	; 0x3c
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <DM_DisplayFormattedOutput+0x3ac>)
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012c4:	2203      	movs	r2, #3
 80012c6:	218c      	movs	r1, #140	; 0x8c
 80012c8:	2050      	movs	r0, #80	; 0x50
 80012ca:	f00e f8a9 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 80012ce:	e071      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <DM_DisplayFormattedOutput+0x3b0>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00e f89b 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 80012ea:	e063      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
 80012ec:	3a449ba6 	.word	0x3a449ba6
 80012f0:	080146b4 	.word	0x080146b4
 80012f4:	080146c4 	.word	0x080146c4
 80012f8:	080146d4 	.word	0x080146d4
 80012fc:	080146e4 	.word	0x080146e4
 8001300:	080146f4 	.word	0x080146f4
 8001304:	08014704 	.word	0x08014704
 8001308:	08014710 	.word	0x08014710
 800130c:	0801471c 	.word	0x0801471c
 8001310:	08014724 	.word	0x08014724
 8001314:	08014744 	.word	0x08014744
 8001318:	08014748 	.word	0x08014748
 800131c:	08014730 	.word	0x08014730
 8001320:	20000e28 	.word	0x20000e28
 8001324:	20000f18 	.word	0x20000f18
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001328:	233c      	movs	r3, #60	; 0x3c
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	23c8      	movs	r3, #200	; 0xc8
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001338:	2203      	movs	r2, #3
 800133a:	21a0      	movs	r1, #160	; 0xa0
 800133c:	2050      	movs	r0, #80	; 0x50
 800133e:	f00e f86f 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 8001342:	e037      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001344:	233c      	movs	r3, #60	; 0x3c
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	23c8      	movs	r3, #200	; 0xc8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001354:	2203      	movs	r2, #3
 8001356:	21a0      	movs	r1, #160	; 0xa0
 8001358:	2050      	movs	r0, #80	; 0x50
 800135a:	f00e f861 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 800135e:	e029      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001360:	233c      	movs	r3, #60	; 0x3c
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	23c8      	movs	r3, #200	; 0xc8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001370:	2203      	movs	r2, #3
 8001372:	21a0      	movs	r1, #160	; 0xa0
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f00e f853 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 800137a:	e01b      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800137c:	233c      	movs	r3, #60	; 0x3c
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	23c8      	movs	r3, #200	; 0xc8
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f240 23fd 	movw	r3, #765	; 0x2fd
 800138c:	2203      	movs	r2, #3
 800138e:	21a0      	movs	r1, #160	; 0xa0
 8001390:	2050      	movs	r0, #80	; 0x50
 8001392:	f00e f845 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 8001396:	e00d      	b.n	80013b4 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001398:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800139c:	b29b      	uxth	r3, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	9201      	str	r2, [sp, #4]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80013a8:	22aa      	movs	r2, #170	; 0xaa
 80013aa:	2150      	movs	r1, #80	; 0x50
 80013ac:	484d      	ldr	r0, [pc, #308]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80013ae:	f00e f9db 	bl	800f768 <ILI9341_Draw_Text>
			break;
 80013b2:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	9201      	str	r2, [sp, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013c4:	22aa      	movs	r2, #170	; 0xaa
 80013c6:	21b4      	movs	r1, #180	; 0xb4
 80013c8:	4847      	ldr	r0, [pc, #284]	; (80014e8 <DM_DisplayFormattedOutput+0x574>)
 80013ca:	f00e f9cd 	bl	800f768 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80013ce:	2001      	movs	r0, #1
 80013d0:	f005 f950 	bl	8006674 <SM_GetOutputChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 80013e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d873      	bhi.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <DM_DisplayFormattedOutput+0x47c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	0800140d 	.word	0x0800140d
 80013f4:	08001429 	.word	0x08001429
 80013f8:	08001445 	.word	0x08001445
 80013fc:	08001461 	.word	0x08001461
 8001400:	0800147d 	.word	0x0800147d
 8001404:	08001499 	.word	0x08001499
 8001408:	080014b5 	.word	0x080014b5
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800140c:	233c      	movs	r3, #60	; 0x3c
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <DM_DisplayFormattedOutput+0x578>)
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800141c:	2203      	movs	r2, #3
 800141e:	218c      	movs	r1, #140	; 0x8c
 8001420:	20f5      	movs	r0, #245	; 0xf5
 8001422:	f00d fffd 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 8001426:	e053      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001428:	233c      	movs	r3, #60	; 0x3c
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <DM_DisplayFormattedOutput+0x57c>)
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	23c8      	movs	r3, #200	; 0xc8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001438:	2203      	movs	r2, #3
 800143a:	21a0      	movs	r1, #160	; 0xa0
 800143c:	20f5      	movs	r0, #245	; 0xf5
 800143e:	f00d ffef 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 8001442:	e045      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001444:	233c      	movs	r3, #60	; 0x3c
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <DM_DisplayFormattedOutput+0x564>)
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	23c8      	movs	r3, #200	; 0xc8
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001454:	2203      	movs	r2, #3
 8001456:	21a0      	movs	r1, #160	; 0xa0
 8001458:	20f5      	movs	r0, #245	; 0xf5
 800145a:	f00d ffe1 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 800145e:	e037      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001460:	233c      	movs	r3, #60	; 0x3c
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <DM_DisplayFormattedOutput+0x568>)
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	23c8      	movs	r3, #200	; 0xc8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001470:	2203      	movs	r2, #3
 8001472:	21a0      	movs	r1, #160	; 0xa0
 8001474:	20f5      	movs	r0, #245	; 0xf5
 8001476:	f00d ffd3 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 800147a:	e029      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800147c:	233c      	movs	r3, #60	; 0x3c
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	23c8      	movs	r3, #200	; 0xc8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800148c:	2203      	movs	r2, #3
 800148e:	21a0      	movs	r1, #160	; 0xa0
 8001490:	20f5      	movs	r0, #245	; 0xf5
 8001492:	f00d ffc5 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 8001496:	e01b      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001498:	233c      	movs	r3, #60	; 0x3c
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <DM_DisplayFormattedOutput+0x56c>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	23c8      	movs	r3, #200	; 0xc8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014a8:	2203      	movs	r2, #3
 80014aa:	21a0      	movs	r1, #160	; 0xa0
 80014ac:	20f5      	movs	r0, #245	; 0xf5
 80014ae:	f00d ffb7 	bl	800f420 <ILI9341_Draw_Wave>
			break;
 80014b2:	e00d      	b.n	80014d0 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80014b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	9201      	str	r2, [sp, #4]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014c4:	22aa      	movs	r2, #170	; 0xaa
 80014c6:	21f5      	movs	r1, #245	; 0xf5
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <DM_DisplayFormattedOutput+0x570>)
 80014ca:	f00e f94d 	bl	800f768 <ILI9341_Draw_Text>
			break;
 80014ce:	bf00      	nop
	}



}
 80014d0:	bf00      	nop
 80014d2:	376c      	adds	r7, #108	; 0x6c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	20000c48 	.word	0x20000c48
 80014dc:	20000d38 	.word	0x20000d38
 80014e0:	20001008 	.word	0x20001008
 80014e4:	08014738 	.word	0x08014738
 80014e8:	0801473c 	.word	0x0801473c
 80014ec:	20000e28 	.word	0x20000e28
 80014f0:	20000f18 	.word	0x20000f18

080014f4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <DM_RefreshScreen+0x88>)
 80014fc:	f00b ff7e 	bl	800d3fc <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001500:	2000      	movs	r0, #0
 8001502:	f00e fbb1 	bl	800fc68 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001506:	2300      	movs	r3, #0
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2302      	movs	r3, #2
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2328      	movs	r3, #40	; 0x28
 8001516:	2250      	movs	r2, #80	; 0x50
 8001518:	21c8      	movs	r1, #200	; 0xc8
 800151a:	2000      	movs	r0, #0
 800151c:	f00d ffc1 	bl	800f4a2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001520:	2300      	movs	r3, #0
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2302      	movs	r3, #2
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2328      	movs	r3, #40	; 0x28
 8001530:	2250      	movs	r2, #80	; 0x50
 8001532:	21c8      	movs	r1, #200	; 0xc8
 8001534:	2050      	movs	r0, #80	; 0x50
 8001536:	f00d ffb4 	bl	800f4a2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800153a:	2300      	movs	r3, #0
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2302      	movs	r3, #2
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2328      	movs	r3, #40	; 0x28
 800154a:	2250      	movs	r2, #80	; 0x50
 800154c:	21c8      	movs	r1, #200	; 0xc8
 800154e:	20a0      	movs	r0, #160	; 0xa0
 8001550:	f00d ffa7 	bl	800f4a2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001554:	2300      	movs	r3, #0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2302      	movs	r3, #2
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	2250      	movs	r2, #80	; 0x50
 8001566:	21c8      	movs	r1, #200	; 0xc8
 8001568:	20f0      	movs	r0, #240	; 0xf0
 800156a:	f00d ff9a 	bl	800f4a2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <DM_RefreshScreen+0x88>)
 8001570:	f00b ff0e 	bl	800d390 <HAL_TIM_Base_Start_IT>


}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20002b24 	.word	0x20002b24

08001580 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <DM_SetErrorDebugMsg+0x34>)
 800158c:	212d      	movs	r1, #45	; 0x2d
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <DM_SetErrorDebugMsg+0x38>)
 8001590:	f00f fca6 	bl	8010ee0 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8001594:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2301      	movs	r3, #1
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	22be      	movs	r2, #190	; 0xbe
 80015a2:	210a      	movs	r1, #10
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <DM_SetErrorDebugMsg+0x38>)
 80015a6:	f00e f8df 	bl	800f768 <ILI9341_Draw_Text>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	080147c8 	.word	0x080147c8
 80015b8:	20001e28 	.word	0x20001e28

080015bc <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d81b      	bhi.n	8001606 <FreqMenu_DrawMenu+0x4a>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <FreqMenu_DrawMenu+0x18>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	080015e9 	.word	0x080015e9
 80015d8:	080015ef 	.word	0x080015ef
 80015dc:	080015f5 	.word	0x080015f5
 80015e0:	080015fb 	.word	0x080015fb
 80015e4:	08001601 	.word	0x08001601
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80015e8:	f000 f812 	bl	8001610 <FreqMenu_DrawMainMenu>
			break;
 80015ec:	e00c      	b.n	8001608 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80015ee:	f000 f859 	bl	80016a4 <FreqMenu_DrawPresetMenu>
			break;
 80015f2:	e009      	b.n	8001608 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80015f4:	f001 fb04 	bl	8002c00 <FreqMenu_DrawAdjustMenu>
			break;
 80015f8:	e006      	b.n	8001608 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80015fa:	f001 fb17 	bl	8002c2c <FreqMenu_DrawSweepMenu>
			break;
 80015fe:	e003      	b.n	8001608 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 8001600:	f001 fd42 	bl	8003088 <FreqMenu_DrawPrescalerMenu>
			break;
 8001604:	e000      	b.n	8001608 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 8001606:	bf00      	nop

	}
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	2302      	movs	r3, #2
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	220a      	movs	r2, #10
 8001624:	2105      	movs	r1, #5
 8001626:	481a      	ldr	r0, [pc, #104]	; (8001690 <FreqMenu_DrawMainMenu+0x80>)
 8001628:	f00e f89e 	bl	800f768 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800162c:	f7ff fca2 	bl	8000f74 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001630:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	2302      	movs	r3, #2
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	22d2      	movs	r2, #210	; 0xd2
 800163e:	2105      	movs	r1, #5
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <FreqMenu_DrawMainMenu+0x84>)
 8001642:	f00e f891 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001646:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2302      	movs	r3, #2
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	22d2      	movs	r2, #210	; 0xd2
 8001654:	2161      	movs	r1, #97	; 0x61
 8001656:	4810      	ldr	r0, [pc, #64]	; (8001698 <FreqMenu_DrawMainMenu+0x88>)
 8001658:	f00e f886 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800165c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	2302      	movs	r3, #2
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	22d2      	movs	r2, #210	; 0xd2
 800166a:	21ac      	movs	r1, #172	; 0xac
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <FreqMenu_DrawMainMenu+0x8c>)
 800166e:	f00e f87b 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8001672:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2302      	movs	r3, #2
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	22d2      	movs	r2, #210	; 0xd2
 8001680:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <FreqMenu_DrawMainMenu+0x90>)
 8001686:	f00e f86f 	bl	800f768 <ILI9341_Draw_Text>
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	080147cc 	.word	0x080147cc
 8001694:	080147d8 	.word	0x080147d8
 8001698:	080147e0 	.word	0x080147e0
 800169c:	080147e8 	.word	0x080147e8
 80016a0:	080147f0 	.word	0x080147f0

080016a4 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2302      	movs	r3, #2
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	220a      	movs	r2, #10
 80016b8:	2105      	movs	r1, #5
 80016ba:	4886      	ldr	r0, [pc, #536]	; (80018d4 <FreqMenu_DrawPresetMenu+0x230>)
 80016bc:	f00e f854 	bl	800f768 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 80016c0:	2328      	movs	r3, #40	; 0x28
 80016c2:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 80016c4:	233c      	movs	r3, #60	; 0x3c
 80016c6:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 80016c8:	2350      	movs	r3, #80	; 0x50
 80016ca:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 80016d0:	2378      	movs	r3, #120	; 0x78
 80016d2:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 80016d4:	238c      	movs	r3, #140	; 0x8c
 80016d6:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 80016d8:	23a0      	movs	r3, #160	; 0xa0
 80016da:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80016dc:	f004 f886 	bl	80057ec <FreqO_GetFPresetObject>
 80016e0:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f001 825d 	beq.w	8002ba4 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016f2:	4293      	cmp	r3, r2
 80016f4:	f000 849a 	beq.w	800202c <FreqMenu_DrawPresetMenu+0x988>
 80016f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d817      	bhi.n	8001730 <FreqMenu_DrawPresetMenu+0x8c>
 8001700:	2b32      	cmp	r3, #50	; 0x32
 8001702:	f000 81b3 	beq.w	8001a6c <FreqMenu_DrawPresetMenu+0x3c8>
 8001706:	2b32      	cmp	r3, #50	; 0x32
 8001708:	d806      	bhi.n	8001718 <FreqMenu_DrawPresetMenu+0x74>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d038      	beq.n	8001780 <FreqMenu_DrawPresetMenu+0xdc>
 800170e:	2b0a      	cmp	r3, #10
 8001710:	f000 8102 	beq.w	8001918 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001714:	f001 ba52 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001718:	2bfa      	cmp	r3, #250	; 0xfa
 800171a:	f000 8317 	beq.w	8001d4c <FreqMenu_DrawPresetMenu+0x6a8>
 800171e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001722:	f000 83d9 	beq.w	8001ed8 <FreqMenu_DrawPresetMenu+0x834>
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	f000 8266 	beq.w	8001bf8 <FreqMenu_DrawPresetMenu+0x554>
}
 800172c:	f001 ba46 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001730:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001734:	4293      	cmp	r3, r2
 8001736:	f000 8758 	beq.w	80025ea <FreqMenu_DrawPresetMenu+0xf46>
 800173a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800173e:	4293      	cmp	r3, r2
 8001740:	d80f      	bhi.n	8001762 <FreqMenu_DrawPresetMenu+0xbe>
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	f000 85e0 	beq.w	800230c <FreqMenu_DrawPresetMenu+0xc68>
 800174c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001750:	4293      	cmp	r3, r2
 8001752:	f000 86a1 	beq.w	8002498 <FreqMenu_DrawPresetMenu+0xdf4>
 8001756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175a:	f000 852d 	beq.w	80021b8 <FreqMenu_DrawPresetMenu+0xb14>
}
 800175e:	f001 ba2d 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001762:	4a5d      	ldr	r2, [pc, #372]	; (80018d8 <FreqMenu_DrawPresetMenu+0x234>)
 8001764:	4293      	cmp	r3, r2
 8001766:	f001 80ae 	beq.w	80028c6 <FreqMenu_DrawPresetMenu+0x1222>
 800176a:	4a5c      	ldr	r2, [pc, #368]	; (80018dc <FreqMenu_DrawPresetMenu+0x238>)
 800176c:	4293      	cmp	r3, r2
 800176e:	f001 816f 	beq.w	8002a50 <FreqMenu_DrawPresetMenu+0x13ac>
 8001772:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001776:	4293      	cmp	r3, r2
 8001778:	f000 87fc 	beq.w	8002774 <FreqMenu_DrawPresetMenu+0x10d0>
}
 800177c:	f001 ba1e 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	b29a      	uxth	r2, r3
 8001784:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2302      	movs	r3, #2
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	2105      	movs	r1, #5
 8001792:	4853      	ldr	r0, [pc, #332]	; (80018e0 <FreqMenu_DrawPresetMenu+0x23c>)
 8001794:	f00d ffe8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	b29a      	uxth	r2, r3
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	2302      	movs	r3, #2
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a8:	2105      	movs	r1, #5
 80017aa:	484e      	ldr	r0, [pc, #312]	; (80018e4 <FreqMenu_DrawPresetMenu+0x240>)
 80017ac:	f00d ffdc 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017b0:	7b7b      	ldrb	r3, [r7, #13]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	2300      	movs	r3, #0
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	2302      	movs	r3, #2
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017c0:	2105      	movs	r1, #5
 80017c2:	4849      	ldr	r0, [pc, #292]	; (80018e8 <FreqMenu_DrawPresetMenu+0x244>)
 80017c4:	f00d ffd0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c8:	7b3b      	ldrb	r3, [r7, #12]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	2300      	movs	r3, #0
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	2302      	movs	r3, #2
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d8:	2105      	movs	r1, #5
 80017da:	4844      	ldr	r0, [pc, #272]	; (80018ec <FreqMenu_DrawPresetMenu+0x248>)
 80017dc:	f00d ffc4 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017e0:	7afb      	ldrb	r3, [r7, #11]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	2300      	movs	r3, #0
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	2302      	movs	r3, #2
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017f0:	2105      	movs	r1, #5
 80017f2:	483f      	ldr	r0, [pc, #252]	; (80018f0 <FreqMenu_DrawPresetMenu+0x24c>)
 80017f4:	f00d ffb8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f8:	7abb      	ldrb	r3, [r7, #10]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	2300      	movs	r3, #0
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	2302      	movs	r3, #2
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001808:	2105      	movs	r1, #5
 800180a:	483a      	ldr	r0, [pc, #232]	; (80018f4 <FreqMenu_DrawPresetMenu+0x250>)
 800180c:	f00d ffac 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001810:	7a7b      	ldrb	r3, [r7, #9]
 8001812:	b29a      	uxth	r2, r3
 8001814:	2300      	movs	r3, #0
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	2302      	movs	r3, #2
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001820:	2105      	movs	r1, #5
 8001822:	4835      	ldr	r0, [pc, #212]	; (80018f8 <FreqMenu_DrawPresetMenu+0x254>)
 8001824:	f00d ffa0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	b29a      	uxth	r2, r3
 800182c:	2300      	movs	r3, #0
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2302      	movs	r3, #2
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001838:	2178      	movs	r1, #120	; 0x78
 800183a:	4830      	ldr	r0, [pc, #192]	; (80018fc <FreqMenu_DrawPresetMenu+0x258>)
 800183c:	f00d ff94 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	b29a      	uxth	r2, r3
 8001844:	2300      	movs	r3, #0
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	2302      	movs	r3, #2
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001850:	2178      	movs	r1, #120	; 0x78
 8001852:	482b      	ldr	r0, [pc, #172]	; (8001900 <FreqMenu_DrawPresetMenu+0x25c>)
 8001854:	f00d ff88 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	b29a      	uxth	r2, r3
 800185c:	2300      	movs	r3, #0
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	2302      	movs	r3, #2
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001868:	2178      	movs	r1, #120	; 0x78
 800186a:	4826      	ldr	r0, [pc, #152]	; (8001904 <FreqMenu_DrawPresetMenu+0x260>)
 800186c:	f00d ff7c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001870:	7b3b      	ldrb	r3, [r7, #12]
 8001872:	b29a      	uxth	r2, r3
 8001874:	2300      	movs	r3, #0
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	2302      	movs	r3, #2
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001880:	2178      	movs	r1, #120	; 0x78
 8001882:	4821      	ldr	r0, [pc, #132]	; (8001908 <FreqMenu_DrawPresetMenu+0x264>)
 8001884:	f00d ff70 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	b29a      	uxth	r2, r3
 800188c:	2300      	movs	r3, #0
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2302      	movs	r3, #2
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001898:	2178      	movs	r1, #120	; 0x78
 800189a:	481c      	ldr	r0, [pc, #112]	; (800190c <FreqMenu_DrawPresetMenu+0x268>)
 800189c:	f00d ff64 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a0:	7abb      	ldrb	r3, [r7, #10]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	2302      	movs	r3, #2
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b0:	2178      	movs	r1, #120	; 0x78
 80018b2:	4817      	ldr	r0, [pc, #92]	; (8001910 <FreqMenu_DrawPresetMenu+0x26c>)
 80018b4:	f00d ff58 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018b8:	7a7b      	ldrb	r3, [r7, #9]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	2300      	movs	r3, #0
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	2302      	movs	r3, #2
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018c8:	2178      	movs	r1, #120	; 0x78
 80018ca:	4812      	ldr	r0, [pc, #72]	; (8001914 <FreqMenu_DrawPresetMenu+0x270>)
 80018cc:	f00d ff4c 	bl	800f768 <ILI9341_Draw_Text>
				break;
 80018d0:	f001 b974 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 80018d4:	080147f4 	.word	0x080147f4
 80018d8:	000124f8 	.word	0x000124f8
 80018dc:	000186a0 	.word	0x000186a0
 80018e0:	08014808 	.word	0x08014808
 80018e4:	08014810 	.word	0x08014810
 80018e8:	08014818 	.word	0x08014818
 80018ec:	08014820 	.word	0x08014820
 80018f0:	08014828 	.word	0x08014828
 80018f4:	08014830 	.word	0x08014830
 80018f8:	08014838 	.word	0x08014838
 80018fc:	08014840 	.word	0x08014840
 8001900:	08014848 	.word	0x08014848
 8001904:	08014850 	.word	0x08014850
 8001908:	08014858 	.word	0x08014858
 800190c:	08014860 	.word	0x08014860
 8001910:	08014868 	.word	0x08014868
 8001914:	08014870 	.word	0x08014870
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	b29a      	uxth	r2, r3
 800191c:	2300      	movs	r3, #0
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2302      	movs	r3, #2
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001928:	2105      	movs	r1, #5
 800192a:	48a5      	ldr	r0, [pc, #660]	; (8001bc0 <FreqMenu_DrawPresetMenu+0x51c>)
 800192c:	f00d ff1c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	b29a      	uxth	r2, r3
 8001934:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	2302      	movs	r3, #2
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	2105      	movs	r1, #5
 8001942:	48a0      	ldr	r0, [pc, #640]	; (8001bc4 <FreqMenu_DrawPresetMenu+0x520>)
 8001944:	f00d ff10 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001948:	7b7b      	ldrb	r3, [r7, #13]
 800194a:	b29a      	uxth	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	2302      	movs	r3, #2
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001958:	2105      	movs	r1, #5
 800195a:	489b      	ldr	r0, [pc, #620]	; (8001bc8 <FreqMenu_DrawPresetMenu+0x524>)
 800195c:	f00d ff04 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001960:	7b3b      	ldrb	r3, [r7, #12]
 8001962:	b29a      	uxth	r2, r3
 8001964:	2300      	movs	r3, #0
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2302      	movs	r3, #2
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001970:	2105      	movs	r1, #5
 8001972:	4896      	ldr	r0, [pc, #600]	; (8001bcc <FreqMenu_DrawPresetMenu+0x528>)
 8001974:	f00d fef8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	b29a      	uxth	r2, r3
 800197c:	2300      	movs	r3, #0
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2302      	movs	r3, #2
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001988:	2105      	movs	r1, #5
 800198a:	4891      	ldr	r0, [pc, #580]	; (8001bd0 <FreqMenu_DrawPresetMenu+0x52c>)
 800198c:	f00d feec 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001990:	7abb      	ldrb	r3, [r7, #10]
 8001992:	b29a      	uxth	r2, r3
 8001994:	2300      	movs	r3, #0
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2302      	movs	r3, #2
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a0:	2105      	movs	r1, #5
 80019a2:	488c      	ldr	r0, [pc, #560]	; (8001bd4 <FreqMenu_DrawPresetMenu+0x530>)
 80019a4:	f00d fee0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019a8:	7a7b      	ldrb	r3, [r7, #9]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	2302      	movs	r3, #2
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019b8:	2105      	movs	r1, #5
 80019ba:	4887      	ldr	r0, [pc, #540]	; (8001bd8 <FreqMenu_DrawPresetMenu+0x534>)
 80019bc:	f00d fed4 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2302      	movs	r3, #2
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019d0:	2178      	movs	r1, #120	; 0x78
 80019d2:	4882      	ldr	r0, [pc, #520]	; (8001bdc <FreqMenu_DrawPresetMenu+0x538>)
 80019d4:	f00d fec8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	2300      	movs	r3, #0
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2302      	movs	r3, #2
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e8:	2178      	movs	r1, #120	; 0x78
 80019ea:	487d      	ldr	r0, [pc, #500]	; (8001be0 <FreqMenu_DrawPresetMenu+0x53c>)
 80019ec:	f00d febc 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f0:	7b7b      	ldrb	r3, [r7, #13]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a00:	2178      	movs	r1, #120	; 0x78
 8001a02:	4878      	ldr	r0, [pc, #480]	; (8001be4 <FreqMenu_DrawPresetMenu+0x540>)
 8001a04:	f00d feb0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a08:	7b3b      	ldrb	r3, [r7, #12]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a18:	2178      	movs	r1, #120	; 0x78
 8001a1a:	4873      	ldr	r0, [pc, #460]	; (8001be8 <FreqMenu_DrawPresetMenu+0x544>)
 8001a1c:	f00d fea4 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a20:	7afb      	ldrb	r3, [r7, #11]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	2300      	movs	r3, #0
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	2302      	movs	r3, #2
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a30:	2178      	movs	r1, #120	; 0x78
 8001a32:	486e      	ldr	r0, [pc, #440]	; (8001bec <FreqMenu_DrawPresetMenu+0x548>)
 8001a34:	f00d fe98 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a38:	7abb      	ldrb	r3, [r7, #10]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a48:	2178      	movs	r1, #120	; 0x78
 8001a4a:	4869      	ldr	r0, [pc, #420]	; (8001bf0 <FreqMenu_DrawPresetMenu+0x54c>)
 8001a4c:	f00d fe8c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a50:	7a7b      	ldrb	r3, [r7, #9]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a60:	2178      	movs	r1, #120	; 0x78
 8001a62:	4864      	ldr	r0, [pc, #400]	; (8001bf4 <FreqMenu_DrawPresetMenu+0x550>)
 8001a64:	f00d fe80 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8001a68:	f001 b8a8 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2302      	movs	r3, #2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	4850      	ldr	r0, [pc, #320]	; (8001bc0 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a80:	f00d fe72 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a94:	2105      	movs	r1, #5
 8001a96:	484b      	ldr	r0, [pc, #300]	; (8001bc4 <FreqMenu_DrawPresetMenu+0x520>)
 8001a98:	f00d fe66 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a9c:	7b7b      	ldrb	r3, [r7, #13]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	4846      	ldr	r0, [pc, #280]	; (8001bc8 <FreqMenu_DrawPresetMenu+0x524>)
 8001ab0:	f00d fe5a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab4:	7b3b      	ldrb	r3, [r7, #12]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2302      	movs	r3, #2
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	4841      	ldr	r0, [pc, #260]	; (8001bcc <FreqMenu_DrawPresetMenu+0x528>)
 8001ac8:	f00d fe4e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001adc:	2105      	movs	r1, #5
 8001ade:	483c      	ldr	r0, [pc, #240]	; (8001bd0 <FreqMenu_DrawPresetMenu+0x52c>)
 8001ae0:	f00d fe42 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae4:	7abb      	ldrb	r3, [r7, #10]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2302      	movs	r3, #2
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af4:	2105      	movs	r1, #5
 8001af6:	4837      	ldr	r0, [pc, #220]	; (8001bd4 <FreqMenu_DrawPresetMenu+0x530>)
 8001af8:	f00d fe36 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001afc:	7a7b      	ldrb	r3, [r7, #9]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	2302      	movs	r3, #2
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	4832      	ldr	r0, [pc, #200]	; (8001bd8 <FreqMenu_DrawPresetMenu+0x534>)
 8001b10:	f00d fe2a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b24:	2178      	movs	r1, #120	; 0x78
 8001b26:	482d      	ldr	r0, [pc, #180]	; (8001bdc <FreqMenu_DrawPresetMenu+0x538>)
 8001b28:	f00d fe1e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	2300      	movs	r3, #0
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	2302      	movs	r3, #2
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b3c:	2178      	movs	r1, #120	; 0x78
 8001b3e:	4828      	ldr	r0, [pc, #160]	; (8001be0 <FreqMenu_DrawPresetMenu+0x53c>)
 8001b40:	f00d fe12 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b54:	2178      	movs	r1, #120	; 0x78
 8001b56:	4823      	ldr	r0, [pc, #140]	; (8001be4 <FreqMenu_DrawPresetMenu+0x540>)
 8001b58:	f00d fe06 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b5c:	7b3b      	ldrb	r3, [r7, #12]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	2302      	movs	r3, #2
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b6c:	2178      	movs	r1, #120	; 0x78
 8001b6e:	481e      	ldr	r0, [pc, #120]	; (8001be8 <FreqMenu_DrawPresetMenu+0x544>)
 8001b70:	f00d fdfa 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b84:	2178      	movs	r1, #120	; 0x78
 8001b86:	4819      	ldr	r0, [pc, #100]	; (8001bec <FreqMenu_DrawPresetMenu+0x548>)
 8001b88:	f00d fdee 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b8c:	7abb      	ldrb	r3, [r7, #10]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2302      	movs	r3, #2
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b9c:	2178      	movs	r1, #120	; 0x78
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ba0:	f00d fde2 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba4:	7a7b      	ldrb	r3, [r7, #9]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2302      	movs	r3, #2
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb4:	2178      	movs	r1, #120	; 0x78
 8001bb6:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <FreqMenu_DrawPresetMenu+0x550>)
 8001bb8:	f00d fdd6 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8001bbc:	f000 bffe 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 8001bc0:	08014808 	.word	0x08014808
 8001bc4:	08014810 	.word	0x08014810
 8001bc8:	08014818 	.word	0x08014818
 8001bcc:	08014820 	.word	0x08014820
 8001bd0:	08014828 	.word	0x08014828
 8001bd4:	08014830 	.word	0x08014830
 8001bd8:	08014838 	.word	0x08014838
 8001bdc:	08014840 	.word	0x08014840
 8001be0:	08014848 	.word	0x08014848
 8001be4:	08014850 	.word	0x08014850
 8001be8:	08014858 	.word	0x08014858
 8001bec:	08014860 	.word	0x08014860
 8001bf0:	08014868 	.word	0x08014868
 8001bf4:	08014870 	.word	0x08014870
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2302      	movs	r3, #2
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	48a5      	ldr	r0, [pc, #660]	; (8001ea0 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001c0c:	f00d fdac 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c20:	2105      	movs	r1, #5
 8001c22:	48a0      	ldr	r0, [pc, #640]	; (8001ea4 <FreqMenu_DrawPresetMenu+0x800>)
 8001c24:	f00d fda0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c28:	7b7b      	ldrb	r3, [r7, #13]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2302      	movs	r3, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	489b      	ldr	r0, [pc, #620]	; (8001ea8 <FreqMenu_DrawPresetMenu+0x804>)
 8001c3c:	f00d fd94 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c40:	7b3b      	ldrb	r3, [r7, #12]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2105      	movs	r1, #5
 8001c52:	4896      	ldr	r0, [pc, #600]	; (8001eac <FreqMenu_DrawPresetMenu+0x808>)
 8001c54:	f00d fd88 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	2302      	movs	r3, #2
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c68:	2105      	movs	r1, #5
 8001c6a:	4891      	ldr	r0, [pc, #580]	; (8001eb0 <FreqMenu_DrawPresetMenu+0x80c>)
 8001c6c:	f00d fd7c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c70:	7abb      	ldrb	r3, [r7, #10]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c80:	2105      	movs	r1, #5
 8001c82:	488c      	ldr	r0, [pc, #560]	; (8001eb4 <FreqMenu_DrawPresetMenu+0x810>)
 8001c84:	f00d fd70 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c88:	7a7b      	ldrb	r3, [r7, #9]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2302      	movs	r3, #2
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	4887      	ldr	r0, [pc, #540]	; (8001eb8 <FreqMenu_DrawPresetMenu+0x814>)
 8001c9c:	f00d fd64 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	2302      	movs	r3, #2
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb0:	2178      	movs	r1, #120	; 0x78
 8001cb2:	4882      	ldr	r0, [pc, #520]	; (8001ebc <FreqMenu_DrawPresetMenu+0x818>)
 8001cb4:	f00d fd58 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc8:	2178      	movs	r1, #120	; 0x78
 8001cca:	487d      	ldr	r0, [pc, #500]	; (8001ec0 <FreqMenu_DrawPresetMenu+0x81c>)
 8001ccc:	f00d fd4c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7b7b      	ldrb	r3, [r7, #13]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2178      	movs	r1, #120	; 0x78
 8001ce2:	4878      	ldr	r0, [pc, #480]	; (8001ec4 <FreqMenu_DrawPresetMenu+0x820>)
 8001ce4:	f00d fd40 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7b3b      	ldrb	r3, [r7, #12]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2178      	movs	r1, #120	; 0x78
 8001cfa:	4873      	ldr	r0, [pc, #460]	; (8001ec8 <FreqMenu_DrawPresetMenu+0x824>)
 8001cfc:	f00d fd34 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2178      	movs	r1, #120	; 0x78
 8001d12:	486e      	ldr	r0, [pc, #440]	; (8001ecc <FreqMenu_DrawPresetMenu+0x828>)
 8001d14:	f00d fd28 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7abb      	ldrb	r3, [r7, #10]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2178      	movs	r1, #120	; 0x78
 8001d2a:	4869      	ldr	r0, [pc, #420]	; (8001ed0 <FreqMenu_DrawPresetMenu+0x82c>)
 8001d2c:	f00d fd1c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d30:	7a7b      	ldrb	r3, [r7, #9]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d40:	2178      	movs	r1, #120	; 0x78
 8001d42:	4864      	ldr	r0, [pc, #400]	; (8001ed4 <FreqMenu_DrawPresetMenu+0x830>)
 8001d44:	f00d fd10 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8001d48:	f000 bf38 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2302      	movs	r3, #2
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d5c:	2105      	movs	r1, #5
 8001d5e:	4850      	ldr	r0, [pc, #320]	; (8001ea0 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001d60:	f00d fd02 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d74:	2105      	movs	r1, #5
 8001d76:	484b      	ldr	r0, [pc, #300]	; (8001ea4 <FreqMenu_DrawPresetMenu+0x800>)
 8001d78:	f00d fcf6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2302      	movs	r3, #2
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d8c:	2105      	movs	r1, #5
 8001d8e:	4846      	ldr	r0, [pc, #280]	; (8001ea8 <FreqMenu_DrawPresetMenu+0x804>)
 8001d90:	f00d fcea 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d94:	7b3b      	ldrb	r3, [r7, #12]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da4:	2105      	movs	r1, #5
 8001da6:	4841      	ldr	r0, [pc, #260]	; (8001eac <FreqMenu_DrawPresetMenu+0x808>)
 8001da8:	f00d fcde 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001dac:	7afb      	ldrb	r3, [r7, #11]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2302      	movs	r3, #2
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2105      	movs	r1, #5
 8001dbe:	483c      	ldr	r0, [pc, #240]	; (8001eb0 <FreqMenu_DrawPresetMenu+0x80c>)
 8001dc0:	f00d fcd2 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc4:	7abb      	ldrb	r3, [r7, #10]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd4:	2105      	movs	r1, #5
 8001dd6:	4837      	ldr	r0, [pc, #220]	; (8001eb4 <FreqMenu_DrawPresetMenu+0x810>)
 8001dd8:	f00d fcc6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ddc:	7a7b      	ldrb	r3, [r7, #9]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2302      	movs	r3, #2
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dec:	2105      	movs	r1, #5
 8001dee:	4832      	ldr	r0, [pc, #200]	; (8001eb8 <FreqMenu_DrawPresetMenu+0x814>)
 8001df0:	f00d fcba 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e04:	2178      	movs	r1, #120	; 0x78
 8001e06:	482d      	ldr	r0, [pc, #180]	; (8001ebc <FreqMenu_DrawPresetMenu+0x818>)
 8001e08:	f00d fcae 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e0c:	7bbb      	ldrb	r3, [r7, #14]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	2300      	movs	r3, #0
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	2302      	movs	r3, #2
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e1c:	2178      	movs	r1, #120	; 0x78
 8001e1e:	4828      	ldr	r0, [pc, #160]	; (8001ec0 <FreqMenu_DrawPresetMenu+0x81c>)
 8001e20:	f00d fca2 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e24:	7b7b      	ldrb	r3, [r7, #13]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e34:	2178      	movs	r1, #120	; 0x78
 8001e36:	4823      	ldr	r0, [pc, #140]	; (8001ec4 <FreqMenu_DrawPresetMenu+0x820>)
 8001e38:	f00d fc96 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e3c:	7b3b      	ldrb	r3, [r7, #12]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2302      	movs	r3, #2
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e4c:	2178      	movs	r1, #120	; 0x78
 8001e4e:	481e      	ldr	r0, [pc, #120]	; (8001ec8 <FreqMenu_DrawPresetMenu+0x824>)
 8001e50:	f00d fc8a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e64:	2178      	movs	r1, #120	; 0x78
 8001e66:	4819      	ldr	r0, [pc, #100]	; (8001ecc <FreqMenu_DrawPresetMenu+0x828>)
 8001e68:	f00d fc7e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e6c:	7abb      	ldrb	r3, [r7, #10]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	2302      	movs	r3, #2
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e7c:	2178      	movs	r1, #120	; 0x78
 8001e7e:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e80:	f00d fc72 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e94:	2178      	movs	r1, #120	; 0x78
 8001e96:	480f      	ldr	r0, [pc, #60]	; (8001ed4 <FreqMenu_DrawPresetMenu+0x830>)
 8001e98:	f00d fc66 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8001e9c:	f000 be8e 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 8001ea0:	08014808 	.word	0x08014808
 8001ea4:	08014810 	.word	0x08014810
 8001ea8:	08014818 	.word	0x08014818
 8001eac:	08014820 	.word	0x08014820
 8001eb0:	08014828 	.word	0x08014828
 8001eb4:	08014830 	.word	0x08014830
 8001eb8:	08014838 	.word	0x08014838
 8001ebc:	08014840 	.word	0x08014840
 8001ec0:	08014848 	.word	0x08014848
 8001ec4:	08014850 	.word	0x08014850
 8001ec8:	08014858 	.word	0x08014858
 8001ecc:	08014860 	.word	0x08014860
 8001ed0:	08014868 	.word	0x08014868
 8001ed4:	08014870 	.word	0x08014870
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	2300      	movs	r3, #0
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee8:	2105      	movs	r1, #5
 8001eea:	48a5      	ldr	r0, [pc, #660]	; (8002180 <FreqMenu_DrawPresetMenu+0xadc>)
 8001eec:	f00d fc3c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f00:	2105      	movs	r1, #5
 8001f02:	48a0      	ldr	r0, [pc, #640]	; (8002184 <FreqMenu_DrawPresetMenu+0xae0>)
 8001f04:	f00d fc30 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f08:	7b7b      	ldrb	r3, [r7, #13]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	2302      	movs	r3, #2
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f18:	2105      	movs	r1, #5
 8001f1a:	489b      	ldr	r0, [pc, #620]	; (8002188 <FreqMenu_DrawPresetMenu+0xae4>)
 8001f1c:	f00d fc24 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f20:	7b3b      	ldrb	r3, [r7, #12]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	2300      	movs	r3, #0
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	2302      	movs	r3, #2
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f30:	2105      	movs	r1, #5
 8001f32:	4896      	ldr	r0, [pc, #600]	; (800218c <FreqMenu_DrawPresetMenu+0xae8>)
 8001f34:	f00d fc18 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f38:	7afb      	ldrb	r3, [r7, #11]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	2302      	movs	r3, #2
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f48:	2105      	movs	r1, #5
 8001f4a:	4891      	ldr	r0, [pc, #580]	; (8002190 <FreqMenu_DrawPresetMenu+0xaec>)
 8001f4c:	f00d fc0c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f50:	7abb      	ldrb	r3, [r7, #10]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	488c      	ldr	r0, [pc, #560]	; (8002194 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001f64:	f00d fc00 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f68:	7a7b      	ldrb	r3, [r7, #9]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	2302      	movs	r3, #2
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	4887      	ldr	r0, [pc, #540]	; (8002198 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f7c:	f00d fbf4 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f90:	2178      	movs	r1, #120	; 0x78
 8001f92:	4882      	ldr	r0, [pc, #520]	; (800219c <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f94:	f00d fbe8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f98:	7bbb      	ldrb	r3, [r7, #14]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa8:	2178      	movs	r1, #120	; 0x78
 8001faa:	487d      	ldr	r0, [pc, #500]	; (80021a0 <FreqMenu_DrawPresetMenu+0xafc>)
 8001fac:	f00d fbdc 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb0:	7b7b      	ldrb	r3, [r7, #13]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc0:	2178      	movs	r1, #120	; 0x78
 8001fc2:	4878      	ldr	r0, [pc, #480]	; (80021a4 <FreqMenu_DrawPresetMenu+0xb00>)
 8001fc4:	f00d fbd0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2178      	movs	r1, #120	; 0x78
 8001fda:	4873      	ldr	r0, [pc, #460]	; (80021a8 <FreqMenu_DrawPresetMenu+0xb04>)
 8001fdc:	f00d fbc4 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2178      	movs	r1, #120	; 0x78
 8001ff2:	486e      	ldr	r0, [pc, #440]	; (80021ac <FreqMenu_DrawPresetMenu+0xb08>)
 8001ff4:	f00d fbb8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7abb      	ldrb	r3, [r7, #10]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2178      	movs	r1, #120	; 0x78
 800200a:	4869      	ldr	r0, [pc, #420]	; (80021b0 <FreqMenu_DrawPresetMenu+0xb0c>)
 800200c:	f00d fbac 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7a7b      	ldrb	r3, [r7, #9]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2178      	movs	r1, #120	; 0x78
 8002022:	4864      	ldr	r0, [pc, #400]	; (80021b4 <FreqMenu_DrawPresetMenu+0xb10>)
 8002024:	f00d fba0 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8002028:	f000 bdc8 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	b29a      	uxth	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2302      	movs	r3, #2
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800203c:	2105      	movs	r1, #5
 800203e:	4850      	ldr	r0, [pc, #320]	; (8002180 <FreqMenu_DrawPresetMenu+0xadc>)
 8002040:	f00d fb92 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	b29a      	uxth	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002054:	2105      	movs	r1, #5
 8002056:	484b      	ldr	r0, [pc, #300]	; (8002184 <FreqMenu_DrawPresetMenu+0xae0>)
 8002058:	f00d fb86 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800205c:	7b7b      	ldrb	r3, [r7, #13]
 800205e:	b29a      	uxth	r2, r3
 8002060:	2300      	movs	r3, #0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2302      	movs	r3, #2
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800206c:	2105      	movs	r1, #5
 800206e:	4846      	ldr	r0, [pc, #280]	; (8002188 <FreqMenu_DrawPresetMenu+0xae4>)
 8002070:	f00d fb7a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002074:	7b3b      	ldrb	r3, [r7, #12]
 8002076:	b29a      	uxth	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	2302      	movs	r3, #2
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002084:	2105      	movs	r1, #5
 8002086:	4841      	ldr	r0, [pc, #260]	; (800218c <FreqMenu_DrawPresetMenu+0xae8>)
 8002088:	f00d fb6e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800208c:	7afb      	ldrb	r3, [r7, #11]
 800208e:	b29a      	uxth	r2, r3
 8002090:	2300      	movs	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	2302      	movs	r3, #2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800209c:	2105      	movs	r1, #5
 800209e:	483c      	ldr	r0, [pc, #240]	; (8002190 <FreqMenu_DrawPresetMenu+0xaec>)
 80020a0:	f00d fb62 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a4:	7abb      	ldrb	r3, [r7, #10]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	2302      	movs	r3, #2
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b4:	2105      	movs	r1, #5
 80020b6:	4837      	ldr	r0, [pc, #220]	; (8002194 <FreqMenu_DrawPresetMenu+0xaf0>)
 80020b8:	f00d fb56 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80020bc:	7a7b      	ldrb	r3, [r7, #9]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	2302      	movs	r3, #2
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2300      	movs	r3, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	4832      	ldr	r0, [pc, #200]	; (8002198 <FreqMenu_DrawPresetMenu+0xaf4>)
 80020d0:	f00d fb4a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2302      	movs	r3, #2
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e4:	2178      	movs	r1, #120	; 0x78
 80020e6:	482d      	ldr	r0, [pc, #180]	; (800219c <FreqMenu_DrawPresetMenu+0xaf8>)
 80020e8:	f00d fb3e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2302      	movs	r3, #2
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020fc:	2178      	movs	r1, #120	; 0x78
 80020fe:	4828      	ldr	r0, [pc, #160]	; (80021a0 <FreqMenu_DrawPresetMenu+0xafc>)
 8002100:	f00d fb32 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002104:	7b7b      	ldrb	r3, [r7, #13]
 8002106:	b29a      	uxth	r2, r3
 8002108:	2300      	movs	r3, #0
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	2302      	movs	r3, #2
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002114:	2178      	movs	r1, #120	; 0x78
 8002116:	4823      	ldr	r0, [pc, #140]	; (80021a4 <FreqMenu_DrawPresetMenu+0xb00>)
 8002118:	f00d fb26 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800211c:	7b3b      	ldrb	r3, [r7, #12]
 800211e:	b29a      	uxth	r2, r3
 8002120:	2300      	movs	r3, #0
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	2302      	movs	r3, #2
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800212c:	2178      	movs	r1, #120	; 0x78
 800212e:	481e      	ldr	r0, [pc, #120]	; (80021a8 <FreqMenu_DrawPresetMenu+0xb04>)
 8002130:	f00d fb1a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002134:	7afb      	ldrb	r3, [r7, #11]
 8002136:	b29a      	uxth	r2, r3
 8002138:	2300      	movs	r3, #0
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2302      	movs	r3, #2
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002144:	2178      	movs	r1, #120	; 0x78
 8002146:	4819      	ldr	r0, [pc, #100]	; (80021ac <FreqMenu_DrawPresetMenu+0xb08>)
 8002148:	f00d fb0e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800214c:	7abb      	ldrb	r3, [r7, #10]
 800214e:	b29a      	uxth	r2, r3
 8002150:	2300      	movs	r3, #0
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2302      	movs	r3, #2
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800215c:	2178      	movs	r1, #120	; 0x78
 800215e:	4814      	ldr	r0, [pc, #80]	; (80021b0 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002160:	f00d fb02 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002164:	7a7b      	ldrb	r3, [r7, #9]
 8002166:	b29a      	uxth	r2, r3
 8002168:	2300      	movs	r3, #0
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	2302      	movs	r3, #2
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002174:	2178      	movs	r1, #120	; 0x78
 8002176:	480f      	ldr	r0, [pc, #60]	; (80021b4 <FreqMenu_DrawPresetMenu+0xb10>)
 8002178:	f00d faf6 	bl	800f768 <ILI9341_Draw_Text>
				break;
 800217c:	f000 bd1e 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 8002180:	08014808 	.word	0x08014808
 8002184:	08014810 	.word	0x08014810
 8002188:	08014818 	.word	0x08014818
 800218c:	08014820 	.word	0x08014820
 8002190:	08014828 	.word	0x08014828
 8002194:	08014830 	.word	0x08014830
 8002198:	08014838 	.word	0x08014838
 800219c:	08014840 	.word	0x08014840
 80021a0:	08014848 	.word	0x08014848
 80021a4:	08014850 	.word	0x08014850
 80021a8:	08014858 	.word	0x08014858
 80021ac:	08014860 	.word	0x08014860
 80021b0:	08014868 	.word	0x08014868
 80021b4:	08014870 	.word	0x08014870
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	2302      	movs	r3, #2
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c8:	2105      	movs	r1, #5
 80021ca:	48a5      	ldr	r0, [pc, #660]	; (8002460 <FreqMenu_DrawPresetMenu+0xdbc>)
 80021cc:	f00d facc 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d0:	7bbb      	ldrb	r3, [r7, #14]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	2302      	movs	r3, #2
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e0:	2105      	movs	r1, #5
 80021e2:	48a0      	ldr	r0, [pc, #640]	; (8002464 <FreqMenu_DrawPresetMenu+0xdc0>)
 80021e4:	f00d fac0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021e8:	7b7b      	ldrb	r3, [r7, #13]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	2300      	movs	r3, #0
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2302      	movs	r3, #2
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021f8:	2105      	movs	r1, #5
 80021fa:	489b      	ldr	r0, [pc, #620]	; (8002468 <FreqMenu_DrawPresetMenu+0xdc4>)
 80021fc:	f00d fab4 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002200:	7b3b      	ldrb	r3, [r7, #12]
 8002202:	b29a      	uxth	r2, r3
 8002204:	2300      	movs	r3, #0
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	2302      	movs	r3, #2
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002210:	2105      	movs	r1, #5
 8002212:	4896      	ldr	r0, [pc, #600]	; (800246c <FreqMenu_DrawPresetMenu+0xdc8>)
 8002214:	f00d faa8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	b29a      	uxth	r2, r3
 800221c:	2300      	movs	r3, #0
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	2302      	movs	r3, #2
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002228:	2105      	movs	r1, #5
 800222a:	4891      	ldr	r0, [pc, #580]	; (8002470 <FreqMenu_DrawPresetMenu+0xdcc>)
 800222c:	f00d fa9c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002230:	7abb      	ldrb	r3, [r7, #10]
 8002232:	b29a      	uxth	r2, r3
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2302      	movs	r3, #2
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002240:	2105      	movs	r1, #5
 8002242:	488c      	ldr	r0, [pc, #560]	; (8002474 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002244:	f00d fa90 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002248:	7a7b      	ldrb	r3, [r7, #9]
 800224a:	b29a      	uxth	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2302      	movs	r3, #2
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002258:	2105      	movs	r1, #5
 800225a:	4887      	ldr	r0, [pc, #540]	; (8002478 <FreqMenu_DrawPresetMenu+0xdd4>)
 800225c:	f00d fa84 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	2302      	movs	r3, #2
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2300      	movs	r3, #0
 8002270:	2178      	movs	r1, #120	; 0x78
 8002272:	4882      	ldr	r0, [pc, #520]	; (800247c <FreqMenu_DrawPresetMenu+0xdd8>)
 8002274:	f00d fa78 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	b29a      	uxth	r2, r3
 800227c:	2300      	movs	r3, #0
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2302      	movs	r3, #2
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002288:	2178      	movs	r1, #120	; 0x78
 800228a:	487d      	ldr	r0, [pc, #500]	; (8002480 <FreqMenu_DrawPresetMenu+0xddc>)
 800228c:	f00d fa6c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7b7b      	ldrb	r3, [r7, #13]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2178      	movs	r1, #120	; 0x78
 80022a2:	4878      	ldr	r0, [pc, #480]	; (8002484 <FreqMenu_DrawPresetMenu+0xde0>)
 80022a4:	f00d fa60 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7b3b      	ldrb	r3, [r7, #12]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2178      	movs	r1, #120	; 0x78
 80022ba:	4873      	ldr	r0, [pc, #460]	; (8002488 <FreqMenu_DrawPresetMenu+0xde4>)
 80022bc:	f00d fa54 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d0:	2178      	movs	r1, #120	; 0x78
 80022d2:	486e      	ldr	r0, [pc, #440]	; (800248c <FreqMenu_DrawPresetMenu+0xde8>)
 80022d4:	f00d fa48 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7abb      	ldrb	r3, [r7, #10]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2178      	movs	r1, #120	; 0x78
 80022ea:	4869      	ldr	r0, [pc, #420]	; (8002490 <FreqMenu_DrawPresetMenu+0xdec>)
 80022ec:	f00d fa3c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7a7b      	ldrb	r3, [r7, #9]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2178      	movs	r1, #120	; 0x78
 8002302:	4864      	ldr	r0, [pc, #400]	; (8002494 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002304:	f00d fa30 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8002308:	f000 bc58 	b.w	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	b29a      	uxth	r2, r3
 8002310:	2300      	movs	r3, #0
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800231c:	2105      	movs	r1, #5
 800231e:	4850      	ldr	r0, [pc, #320]	; (8002460 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002320:	f00d fa22 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	b29a      	uxth	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2302      	movs	r3, #2
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002334:	2105      	movs	r1, #5
 8002336:	484b      	ldr	r0, [pc, #300]	; (8002464 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002338:	f00d fa16 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800233c:	7b7b      	ldrb	r3, [r7, #13]
 800233e:	b29a      	uxth	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2302      	movs	r3, #2
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800234c:	2105      	movs	r1, #5
 800234e:	4846      	ldr	r0, [pc, #280]	; (8002468 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002350:	f00d fa0a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002354:	7b3b      	ldrb	r3, [r7, #12]
 8002356:	b29a      	uxth	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002364:	2105      	movs	r1, #5
 8002366:	4841      	ldr	r0, [pc, #260]	; (800246c <FreqMenu_DrawPresetMenu+0xdc8>)
 8002368:	f00d f9fe 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	b29a      	uxth	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2302      	movs	r3, #2
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800237c:	2105      	movs	r1, #5
 800237e:	483c      	ldr	r0, [pc, #240]	; (8002470 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002380:	f00d f9f2 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002384:	7abb      	ldrb	r3, [r7, #10]
 8002386:	b29a      	uxth	r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	2302      	movs	r3, #2
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002394:	2105      	movs	r1, #5
 8002396:	4837      	ldr	r0, [pc, #220]	; (8002474 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002398:	f00d f9e6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800239c:	7a7b      	ldrb	r3, [r7, #9]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2302      	movs	r3, #2
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ac:	2105      	movs	r1, #5
 80023ae:	4832      	ldr	r0, [pc, #200]	; (8002478 <FreqMenu_DrawPresetMenu+0xdd4>)
 80023b0:	f00d f9da 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	2302      	movs	r3, #2
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c4:	2178      	movs	r1, #120	; 0x78
 80023c6:	482d      	ldr	r0, [pc, #180]	; (800247c <FreqMenu_DrawPresetMenu+0xdd8>)
 80023c8:	f00d f9ce 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80023cc:	7bbb      	ldrb	r3, [r7, #14]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	2178      	movs	r1, #120	; 0x78
 80023de:	4828      	ldr	r0, [pc, #160]	; (8002480 <FreqMenu_DrawPresetMenu+0xddc>)
 80023e0:	f00d f9c2 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e4:	7b7b      	ldrb	r3, [r7, #13]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	2300      	movs	r3, #0
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2302      	movs	r3, #2
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f4:	2178      	movs	r1, #120	; 0x78
 80023f6:	4823      	ldr	r0, [pc, #140]	; (8002484 <FreqMenu_DrawPresetMenu+0xde0>)
 80023f8:	f00d f9b6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023fc:	7b3b      	ldrb	r3, [r7, #12]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2302      	movs	r3, #2
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800240c:	2178      	movs	r1, #120	; 0x78
 800240e:	481e      	ldr	r0, [pc, #120]	; (8002488 <FreqMenu_DrawPresetMenu+0xde4>)
 8002410:	f00d f9aa 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	b29a      	uxth	r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2302      	movs	r3, #2
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002424:	2178      	movs	r1, #120	; 0x78
 8002426:	4819      	ldr	r0, [pc, #100]	; (800248c <FreqMenu_DrawPresetMenu+0xde8>)
 8002428:	f00d f99e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800242c:	7abb      	ldrb	r3, [r7, #10]
 800242e:	b29a      	uxth	r2, r3
 8002430:	2300      	movs	r3, #0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2302      	movs	r3, #2
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800243c:	2178      	movs	r1, #120	; 0x78
 800243e:	4814      	ldr	r0, [pc, #80]	; (8002490 <FreqMenu_DrawPresetMenu+0xdec>)
 8002440:	f00d f992 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002444:	7a7b      	ldrb	r3, [r7, #9]
 8002446:	b29a      	uxth	r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2302      	movs	r3, #2
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002454:	2178      	movs	r1, #120	; 0x78
 8002456:	480f      	ldr	r0, [pc, #60]	; (8002494 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002458:	f00d f986 	bl	800f768 <ILI9341_Draw_Text>
				break;
 800245c:	e3ae      	b.n	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 800245e:	bf00      	nop
 8002460:	08014808 	.word	0x08014808
 8002464:	08014810 	.word	0x08014810
 8002468:	08014818 	.word	0x08014818
 800246c:	08014820 	.word	0x08014820
 8002470:	08014828 	.word	0x08014828
 8002474:	08014830 	.word	0x08014830
 8002478:	08014838 	.word	0x08014838
 800247c:	08014840 	.word	0x08014840
 8002480:	08014848 	.word	0x08014848
 8002484:	08014850 	.word	0x08014850
 8002488:	08014858 	.word	0x08014858
 800248c:	08014860 	.word	0x08014860
 8002490:	08014868 	.word	0x08014868
 8002494:	08014870 	.word	0x08014870
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	b29a      	uxth	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a8:	2105      	movs	r1, #5
 80024aa:	48a4      	ldr	r0, [pc, #656]	; (800273c <FreqMenu_DrawPresetMenu+0x1098>)
 80024ac:	f00d f95c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024c0:	2105      	movs	r1, #5
 80024c2:	489f      	ldr	r0, [pc, #636]	; (8002740 <FreqMenu_DrawPresetMenu+0x109c>)
 80024c4:	f00d f950 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c8:	7b7b      	ldrb	r3, [r7, #13]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d8:	2105      	movs	r1, #5
 80024da:	489a      	ldr	r0, [pc, #616]	; (8002744 <FreqMenu_DrawPresetMenu+0x10a0>)
 80024dc:	f00d f944 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e0:	7b3b      	ldrb	r3, [r7, #12]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f0:	2105      	movs	r1, #5
 80024f2:	4895      	ldr	r0, [pc, #596]	; (8002748 <FreqMenu_DrawPresetMenu+0x10a4>)
 80024f4:	f00d f938 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002508:	2105      	movs	r1, #5
 800250a:	4890      	ldr	r0, [pc, #576]	; (800274c <FreqMenu_DrawPresetMenu+0x10a8>)
 800250c:	f00d f92c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002510:	7abb      	ldrb	r3, [r7, #10]
 8002512:	b29a      	uxth	r2, r3
 8002514:	2300      	movs	r3, #0
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002520:	2105      	movs	r1, #5
 8002522:	488b      	ldr	r0, [pc, #556]	; (8002750 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002524:	f00d f920 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002528:	7a7b      	ldrb	r3, [r7, #9]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002538:	2105      	movs	r1, #5
 800253a:	4886      	ldr	r0, [pc, #536]	; (8002754 <FreqMenu_DrawPresetMenu+0x10b0>)
 800253c:	f00d f914 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	b29a      	uxth	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002550:	2178      	movs	r1, #120	; 0x78
 8002552:	4881      	ldr	r0, [pc, #516]	; (8002758 <FreqMenu_DrawPresetMenu+0x10b4>)
 8002554:	f00d f908 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002558:	7bbb      	ldrb	r3, [r7, #14]
 800255a:	b29a      	uxth	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002568:	2178      	movs	r1, #120	; 0x78
 800256a:	487c      	ldr	r0, [pc, #496]	; (800275c <FreqMenu_DrawPresetMenu+0x10b8>)
 800256c:	f00d f8fc 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002570:	7b7b      	ldrb	r3, [r7, #13]
 8002572:	b29a      	uxth	r2, r3
 8002574:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2302      	movs	r3, #2
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	2178      	movs	r1, #120	; 0x78
 8002582:	4877      	ldr	r0, [pc, #476]	; (8002760 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002584:	f00d f8f0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002588:	7b3b      	ldrb	r3, [r7, #12]
 800258a:	b29a      	uxth	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002598:	2178      	movs	r1, #120	; 0x78
 800259a:	4872      	ldr	r0, [pc, #456]	; (8002764 <FreqMenu_DrawPresetMenu+0x10c0>)
 800259c:	f00d f8e4 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a0:	7afb      	ldrb	r3, [r7, #11]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2302      	movs	r3, #2
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b0:	2178      	movs	r1, #120	; 0x78
 80025b2:	486d      	ldr	r0, [pc, #436]	; (8002768 <FreqMenu_DrawPresetMenu+0x10c4>)
 80025b4:	f00d f8d8 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b8:	7abb      	ldrb	r3, [r7, #10]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	2300      	movs	r3, #0
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c8:	2178      	movs	r1, #120	; 0x78
 80025ca:	4868      	ldr	r0, [pc, #416]	; (800276c <FreqMenu_DrawPresetMenu+0x10c8>)
 80025cc:	f00d f8cc 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d0:	7a7b      	ldrb	r3, [r7, #9]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	2300      	movs	r3, #0
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2302      	movs	r3, #2
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e0:	2178      	movs	r1, #120	; 0x78
 80025e2:	4863      	ldr	r0, [pc, #396]	; (8002770 <FreqMenu_DrawPresetMenu+0x10cc>)
 80025e4:	f00d f8c0 	bl	800f768 <ILI9341_Draw_Text>
				break;
 80025e8:	e2e8      	b.n	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	2300      	movs	r3, #0
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	2302      	movs	r3, #2
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025fa:	2105      	movs	r1, #5
 80025fc:	484f      	ldr	r0, [pc, #316]	; (800273c <FreqMenu_DrawPresetMenu+0x1098>)
 80025fe:	f00d f8b3 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	b29a      	uxth	r2, r3
 8002606:	2300      	movs	r3, #0
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2302      	movs	r3, #2
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002612:	2105      	movs	r1, #5
 8002614:	484a      	ldr	r0, [pc, #296]	; (8002740 <FreqMenu_DrawPresetMenu+0x109c>)
 8002616:	f00d f8a7 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800261a:	7b7b      	ldrb	r3, [r7, #13]
 800261c:	b29a      	uxth	r2, r3
 800261e:	2300      	movs	r3, #0
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2302      	movs	r3, #2
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800262a:	2105      	movs	r1, #5
 800262c:	4845      	ldr	r0, [pc, #276]	; (8002744 <FreqMenu_DrawPresetMenu+0x10a0>)
 800262e:	f00d f89b 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002632:	7b3b      	ldrb	r3, [r7, #12]
 8002634:	b29a      	uxth	r2, r3
 8002636:	2300      	movs	r3, #0
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2302      	movs	r3, #2
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002642:	2105      	movs	r1, #5
 8002644:	4840      	ldr	r0, [pc, #256]	; (8002748 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002646:	f00d f88f 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	b29a      	uxth	r2, r3
 800264e:	2300      	movs	r3, #0
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2302      	movs	r3, #2
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800265a:	2105      	movs	r1, #5
 800265c:	483b      	ldr	r0, [pc, #236]	; (800274c <FreqMenu_DrawPresetMenu+0x10a8>)
 800265e:	f00d f883 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002662:	7abb      	ldrb	r3, [r7, #10]
 8002664:	b29a      	uxth	r2, r3
 8002666:	2300      	movs	r3, #0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2302      	movs	r3, #2
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002672:	2105      	movs	r1, #5
 8002674:	4836      	ldr	r0, [pc, #216]	; (8002750 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002676:	f00d f877 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267a:	7a7b      	ldrb	r3, [r7, #9]
 800267c:	b29a      	uxth	r2, r3
 800267e:	2300      	movs	r3, #0
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2302      	movs	r3, #2
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268a:	2105      	movs	r1, #5
 800268c:	4831      	ldr	r0, [pc, #196]	; (8002754 <FreqMenu_DrawPresetMenu+0x10b0>)
 800268e:	f00d f86b 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	b29a      	uxth	r2, r3
 8002696:	2300      	movs	r3, #0
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2302      	movs	r3, #2
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a2:	2178      	movs	r1, #120	; 0x78
 80026a4:	482c      	ldr	r0, [pc, #176]	; (8002758 <FreqMenu_DrawPresetMenu+0x10b4>)
 80026a6:	f00d f85f 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026aa:	7bbb      	ldrb	r3, [r7, #14]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	2300      	movs	r3, #0
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	2302      	movs	r3, #2
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ba:	2178      	movs	r1, #120	; 0x78
 80026bc:	4827      	ldr	r0, [pc, #156]	; (800275c <FreqMenu_DrawPresetMenu+0x10b8>)
 80026be:	f00d f853 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	2302      	movs	r3, #2
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d2:	2178      	movs	r1, #120	; 0x78
 80026d4:	4822      	ldr	r0, [pc, #136]	; (8002760 <FreqMenu_DrawPresetMenu+0x10bc>)
 80026d6:	f00d f847 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80026da:	7b3b      	ldrb	r3, [r7, #12]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	2302      	movs	r3, #2
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2300      	movs	r3, #0
 80026ea:	2178      	movs	r1, #120	; 0x78
 80026ec:	481d      	ldr	r0, [pc, #116]	; (8002764 <FreqMenu_DrawPresetMenu+0x10c0>)
 80026ee:	f00d f83b 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	2300      	movs	r3, #0
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2302      	movs	r3, #2
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002702:	2178      	movs	r1, #120	; 0x78
 8002704:	4818      	ldr	r0, [pc, #96]	; (8002768 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002706:	f00d f82f 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270a:	7abb      	ldrb	r3, [r7, #10]
 800270c:	b29a      	uxth	r2, r3
 800270e:	2300      	movs	r3, #0
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	2302      	movs	r3, #2
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271a:	2178      	movs	r1, #120	; 0x78
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <FreqMenu_DrawPresetMenu+0x10c8>)
 800271e:	f00d f823 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002722:	7a7b      	ldrb	r3, [r7, #9]
 8002724:	b29a      	uxth	r2, r3
 8002726:	2300      	movs	r3, #0
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	2302      	movs	r3, #2
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002732:	2178      	movs	r1, #120	; 0x78
 8002734:	480e      	ldr	r0, [pc, #56]	; (8002770 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002736:	f00d f817 	bl	800f768 <ILI9341_Draw_Text>
				break;
 800273a:	e23f      	b.n	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 800273c:	08014808 	.word	0x08014808
 8002740:	08014810 	.word	0x08014810
 8002744:	08014818 	.word	0x08014818
 8002748:	08014820 	.word	0x08014820
 800274c:	08014828 	.word	0x08014828
 8002750:	08014830 	.word	0x08014830
 8002754:	08014838 	.word	0x08014838
 8002758:	08014840 	.word	0x08014840
 800275c:	08014848 	.word	0x08014848
 8002760:	08014850 	.word	0x08014850
 8002764:	08014858 	.word	0x08014858
 8002768:	08014860 	.word	0x08014860
 800276c:	08014868 	.word	0x08014868
 8002770:	08014870 	.word	0x08014870
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	b29a      	uxth	r2, r3
 8002778:	2300      	movs	r3, #0
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002784:	2105      	movs	r1, #5
 8002786:	48a4      	ldr	r0, [pc, #656]	; (8002a18 <FreqMenu_DrawPresetMenu+0x1374>)
 8002788:	f00c ffee 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800278c:	7bbb      	ldrb	r3, [r7, #14]
 800278e:	b29a      	uxth	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800279c:	2105      	movs	r1, #5
 800279e:	489f      	ldr	r0, [pc, #636]	; (8002a1c <FreqMenu_DrawPresetMenu+0x1378>)
 80027a0:	f00c ffe2 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a4:	7b7b      	ldrb	r3, [r7, #13]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b4:	2105      	movs	r1, #5
 80027b6:	489a      	ldr	r0, [pc, #616]	; (8002a20 <FreqMenu_DrawPresetMenu+0x137c>)
 80027b8:	f00c ffd6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027bc:	7b3b      	ldrb	r3, [r7, #12]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027cc:	2105      	movs	r1, #5
 80027ce:	4895      	ldr	r0, [pc, #596]	; (8002a24 <FreqMenu_DrawPresetMenu+0x1380>)
 80027d0:	f00c ffca 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d4:	7afb      	ldrb	r3, [r7, #11]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e4:	2105      	movs	r1, #5
 80027e6:	4890      	ldr	r0, [pc, #576]	; (8002a28 <FreqMenu_DrawPresetMenu+0x1384>)
 80027e8:	f00c ffbe 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ec:	7abb      	ldrb	r3, [r7, #10]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027fc:	2105      	movs	r1, #5
 80027fe:	488b      	ldr	r0, [pc, #556]	; (8002a2c <FreqMenu_DrawPresetMenu+0x1388>)
 8002800:	f00c ffb2 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002804:	7a7b      	ldrb	r3, [r7, #9]
 8002806:	b29a      	uxth	r2, r3
 8002808:	2300      	movs	r3, #0
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002814:	2105      	movs	r1, #5
 8002816:	4886      	ldr	r0, [pc, #536]	; (8002a30 <FreqMenu_DrawPresetMenu+0x138c>)
 8002818:	f00c ffa6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	b29a      	uxth	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800282c:	2178      	movs	r1, #120	; 0x78
 800282e:	4881      	ldr	r0, [pc, #516]	; (8002a34 <FreqMenu_DrawPresetMenu+0x1390>)
 8002830:	f00c ff9a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	b29a      	uxth	r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002844:	2178      	movs	r1, #120	; 0x78
 8002846:	487c      	ldr	r0, [pc, #496]	; (8002a38 <FreqMenu_DrawPresetMenu+0x1394>)
 8002848:	f00c ff8e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800284c:	7b7b      	ldrb	r3, [r7, #13]
 800284e:	b29a      	uxth	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	2302      	movs	r3, #2
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800285c:	2178      	movs	r1, #120	; 0x78
 800285e:	4877      	ldr	r0, [pc, #476]	; (8002a3c <FreqMenu_DrawPresetMenu+0x1398>)
 8002860:	f00c ff82 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002864:	7b3b      	ldrb	r3, [r7, #12]
 8002866:	b29a      	uxth	r2, r3
 8002868:	2300      	movs	r3, #0
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2302      	movs	r3, #2
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002874:	2178      	movs	r1, #120	; 0x78
 8002876:	4872      	ldr	r0, [pc, #456]	; (8002a40 <FreqMenu_DrawPresetMenu+0x139c>)
 8002878:	f00c ff76 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800287c:	7afb      	ldrb	r3, [r7, #11]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2302      	movs	r3, #2
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	2178      	movs	r1, #120	; 0x78
 800288e:	486d      	ldr	r0, [pc, #436]	; (8002a44 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002890:	f00c ff6a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002894:	7abb      	ldrb	r3, [r7, #10]
 8002896:	b29a      	uxth	r2, r3
 8002898:	2300      	movs	r3, #0
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	2302      	movs	r3, #2
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a4:	2178      	movs	r1, #120	; 0x78
 80028a6:	4868      	ldr	r0, [pc, #416]	; (8002a48 <FreqMenu_DrawPresetMenu+0x13a4>)
 80028a8:	f00c ff5e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ac:	7a7b      	ldrb	r3, [r7, #9]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	2300      	movs	r3, #0
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	2302      	movs	r3, #2
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028bc:	2178      	movs	r1, #120	; 0x78
 80028be:	4863      	ldr	r0, [pc, #396]	; (8002a4c <FreqMenu_DrawPresetMenu+0x13a8>)
 80028c0:	f00c ff52 	bl	800f768 <ILI9341_Draw_Text>
			break;
 80028c4:	e17a      	b.n	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	2300      	movs	r3, #0
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2302      	movs	r3, #2
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d6:	2105      	movs	r1, #5
 80028d8:	484f      	ldr	r0, [pc, #316]	; (8002a18 <FreqMenu_DrawPresetMenu+0x1374>)
 80028da:	f00c ff45 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028de:	7bbb      	ldrb	r3, [r7, #14]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	2300      	movs	r3, #0
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2302      	movs	r3, #2
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ee:	2105      	movs	r1, #5
 80028f0:	484a      	ldr	r0, [pc, #296]	; (8002a1c <FreqMenu_DrawPresetMenu+0x1378>)
 80028f2:	f00c ff39 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f6:	7b7b      	ldrb	r3, [r7, #13]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	2300      	movs	r3, #0
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2302      	movs	r3, #2
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002906:	2105      	movs	r1, #5
 8002908:	4845      	ldr	r0, [pc, #276]	; (8002a20 <FreqMenu_DrawPresetMenu+0x137c>)
 800290a:	f00c ff2d 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800290e:	7b3b      	ldrb	r3, [r7, #12]
 8002910:	b29a      	uxth	r2, r3
 8002912:	2300      	movs	r3, #0
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	2302      	movs	r3, #2
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800291e:	2105      	movs	r1, #5
 8002920:	4840      	ldr	r0, [pc, #256]	; (8002a24 <FreqMenu_DrawPresetMenu+0x1380>)
 8002922:	f00c ff21 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	b29a      	uxth	r2, r3
 800292a:	2300      	movs	r3, #0
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2302      	movs	r3, #2
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002936:	2105      	movs	r1, #5
 8002938:	483b      	ldr	r0, [pc, #236]	; (8002a28 <FreqMenu_DrawPresetMenu+0x1384>)
 800293a:	f00c ff15 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800293e:	7abb      	ldrb	r3, [r7, #10]
 8002940:	b29a      	uxth	r2, r3
 8002942:	2300      	movs	r3, #0
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	2302      	movs	r3, #2
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800294e:	2105      	movs	r1, #5
 8002950:	4836      	ldr	r0, [pc, #216]	; (8002a2c <FreqMenu_DrawPresetMenu+0x1388>)
 8002952:	f00c ff09 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002956:	7a7b      	ldrb	r3, [r7, #9]
 8002958:	b29a      	uxth	r2, r3
 800295a:	2300      	movs	r3, #0
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2302      	movs	r3, #2
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002966:	2105      	movs	r1, #5
 8002968:	4831      	ldr	r0, [pc, #196]	; (8002a30 <FreqMenu_DrawPresetMenu+0x138c>)
 800296a:	f00c fefd 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	b29a      	uxth	r2, r3
 8002972:	2300      	movs	r3, #0
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2302      	movs	r3, #2
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800297e:	2178      	movs	r1, #120	; 0x78
 8002980:	482c      	ldr	r0, [pc, #176]	; (8002a34 <FreqMenu_DrawPresetMenu+0x1390>)
 8002982:	f00c fef1 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002986:	7bbb      	ldrb	r3, [r7, #14]
 8002988:	b29a      	uxth	r2, r3
 800298a:	2300      	movs	r3, #0
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	2302      	movs	r3, #2
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002996:	2178      	movs	r1, #120	; 0x78
 8002998:	4827      	ldr	r0, [pc, #156]	; (8002a38 <FreqMenu_DrawPresetMenu+0x1394>)
 800299a:	f00c fee5 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800299e:	7b7b      	ldrb	r3, [r7, #13]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	2300      	movs	r3, #0
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	2302      	movs	r3, #2
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ae:	2178      	movs	r1, #120	; 0x78
 80029b0:	4822      	ldr	r0, [pc, #136]	; (8002a3c <FreqMenu_DrawPresetMenu+0x1398>)
 80029b2:	f00c fed9 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b6:	7b3b      	ldrb	r3, [r7, #12]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	2300      	movs	r3, #0
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	2302      	movs	r3, #2
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c6:	2178      	movs	r1, #120	; 0x78
 80029c8:	481d      	ldr	r0, [pc, #116]	; (8002a40 <FreqMenu_DrawPresetMenu+0x139c>)
 80029ca:	f00c fecd 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ce:	7afb      	ldrb	r3, [r7, #11]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	2300      	movs	r3, #0
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	2302      	movs	r3, #2
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029de:	2178      	movs	r1, #120	; 0x78
 80029e0:	4818      	ldr	r0, [pc, #96]	; (8002a44 <FreqMenu_DrawPresetMenu+0x13a0>)
 80029e2:	f00c fec1 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80029e6:	7abb      	ldrb	r3, [r7, #10]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	2302      	movs	r3, #2
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	2178      	movs	r1, #120	; 0x78
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <FreqMenu_DrawPresetMenu+0x13a4>)
 80029fa:	f00c feb5 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029fe:	7a7b      	ldrb	r3, [r7, #9]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	2300      	movs	r3, #0
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	2302      	movs	r3, #2
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a0e:	2178      	movs	r1, #120	; 0x78
 8002a10:	480e      	ldr	r0, [pc, #56]	; (8002a4c <FreqMenu_DrawPresetMenu+0x13a8>)
 8002a12:	f00c fea9 	bl	800f768 <ILI9341_Draw_Text>
			break;
 8002a16:	e0d1      	b.n	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 8002a18:	08014808 	.word	0x08014808
 8002a1c:	08014810 	.word	0x08014810
 8002a20:	08014818 	.word	0x08014818
 8002a24:	08014820 	.word	0x08014820
 8002a28:	08014828 	.word	0x08014828
 8002a2c:	08014830 	.word	0x08014830
 8002a30:	08014838 	.word	0x08014838
 8002a34:	08014840 	.word	0x08014840
 8002a38:	08014848 	.word	0x08014848
 8002a3c:	08014850 	.word	0x08014850
 8002a40:	08014858 	.word	0x08014858
 8002a44:	08014860 	.word	0x08014860
 8002a48:	08014868 	.word	0x08014868
 8002a4c:	08014870 	.word	0x08014870
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	2300      	movs	r3, #0
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	2302      	movs	r3, #2
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a60:	2105      	movs	r1, #5
 8002a62:	4858      	ldr	r0, [pc, #352]	; (8002bc4 <FreqMenu_DrawPresetMenu+0x1520>)
 8002a64:	f00c fe80 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	2302      	movs	r3, #2
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a78:	2105      	movs	r1, #5
 8002a7a:	4853      	ldr	r0, [pc, #332]	; (8002bc8 <FreqMenu_DrawPresetMenu+0x1524>)
 8002a7c:	f00c fe74 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a80:	7b7b      	ldrb	r3, [r7, #13]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	2300      	movs	r3, #0
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	2302      	movs	r3, #2
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a90:	2105      	movs	r1, #5
 8002a92:	484e      	ldr	r0, [pc, #312]	; (8002bcc <FreqMenu_DrawPresetMenu+0x1528>)
 8002a94:	f00c fe68 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a98:	7b3b      	ldrb	r3, [r7, #12]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa8:	2105      	movs	r1, #5
 8002aaa:	4849      	ldr	r0, [pc, #292]	; (8002bd0 <FreqMenu_DrawPresetMenu+0x152c>)
 8002aac:	f00c fe5c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	2302      	movs	r3, #2
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ac0:	2105      	movs	r1, #5
 8002ac2:	4844      	ldr	r0, [pc, #272]	; (8002bd4 <FreqMenu_DrawPresetMenu+0x1530>)
 8002ac4:	f00c fe50 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac8:	7abb      	ldrb	r3, [r7, #10]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	2300      	movs	r3, #0
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad8:	2105      	movs	r1, #5
 8002ada:	483f      	ldr	r0, [pc, #252]	; (8002bd8 <FreqMenu_DrawPresetMenu+0x1534>)
 8002adc:	f00c fe44 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae0:	7a7b      	ldrb	r3, [r7, #9]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2302      	movs	r3, #2
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002af0:	2105      	movs	r1, #5
 8002af2:	483a      	ldr	r0, [pc, #232]	; (8002bdc <FreqMenu_DrawPresetMenu+0x1538>)
 8002af4:	f00c fe38 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	2300      	movs	r3, #0
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	2302      	movs	r3, #2
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b08:	2178      	movs	r1, #120	; 0x78
 8002b0a:	4835      	ldr	r0, [pc, #212]	; (8002be0 <FreqMenu_DrawPresetMenu+0x153c>)
 8002b0c:	f00c fe2c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b10:	7bbb      	ldrb	r3, [r7, #14]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	2300      	movs	r3, #0
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	2302      	movs	r3, #2
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b20:	2178      	movs	r1, #120	; 0x78
 8002b22:	4830      	ldr	r0, [pc, #192]	; (8002be4 <FreqMenu_DrawPresetMenu+0x1540>)
 8002b24:	f00c fe20 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b28:	7b7b      	ldrb	r3, [r7, #13]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	2302      	movs	r3, #2
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b38:	2178      	movs	r1, #120	; 0x78
 8002b3a:	482b      	ldr	r0, [pc, #172]	; (8002be8 <FreqMenu_DrawPresetMenu+0x1544>)
 8002b3c:	f00c fe14 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b40:	7b3b      	ldrb	r3, [r7, #12]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	2300      	movs	r3, #0
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	2302      	movs	r3, #2
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b50:	2178      	movs	r1, #120	; 0x78
 8002b52:	4826      	ldr	r0, [pc, #152]	; (8002bec <FreqMenu_DrawPresetMenu+0x1548>)
 8002b54:	f00c fe08 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	2302      	movs	r3, #2
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b68:	2178      	movs	r1, #120	; 0x78
 8002b6a:	4821      	ldr	r0, [pc, #132]	; (8002bf0 <FreqMenu_DrawPresetMenu+0x154c>)
 8002b6c:	f00c fdfc 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b70:	7abb      	ldrb	r3, [r7, #10]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	2300      	movs	r3, #0
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2302      	movs	r3, #2
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b80:	2178      	movs	r1, #120	; 0x78
 8002b82:	481c      	ldr	r0, [pc, #112]	; (8002bf4 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b84:	f00c fdf0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b88:	7a7b      	ldrb	r3, [r7, #9]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	2302      	movs	r3, #2
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	2178      	movs	r1, #120	; 0x78
 8002b9a:	4817      	ldr	r0, [pc, #92]	; (8002bf8 <FreqMenu_DrawPresetMenu+0x1554>)
 8002b9c:	f00c fde4 	bl	800f768 <ILI9341_Draw_Text>
			break;
 8002ba0:	bf00      	nop
 8002ba2:	e00b      	b.n	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002ba4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	2301      	movs	r3, #1
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	22b4      	movs	r2, #180	; 0xb4
 8002bb2:	2105      	movs	r1, #5
 8002bb4:	4811      	ldr	r0, [pc, #68]	; (8002bfc <FreqMenu_DrawPresetMenu+0x1558>)
 8002bb6:	f00c fdd7 	bl	800f768 <ILI9341_Draw_Text>
}
 8002bba:	e7ff      	b.n	8002bbc <FreqMenu_DrawPresetMenu+0x1518>
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	08014808 	.word	0x08014808
 8002bc8:	08014810 	.word	0x08014810
 8002bcc:	08014818 	.word	0x08014818
 8002bd0:	08014820 	.word	0x08014820
 8002bd4:	08014828 	.word	0x08014828
 8002bd8:	08014830 	.word	0x08014830
 8002bdc:	08014838 	.word	0x08014838
 8002be0:	08014840 	.word	0x08014840
 8002be4:	08014848 	.word	0x08014848
 8002be8:	08014850 	.word	0x08014850
 8002bec:	08014858 	.word	0x08014858
 8002bf0:	08014860 	.word	0x08014860
 8002bf4:	08014868 	.word	0x08014868
 8002bf8:	08014870 	.word	0x08014870
 8002bfc:	0801487c 	.word	0x0801487c

08002c00 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2300      	movs	r3, #0
 8002c12:	220a      	movs	r2, #10
 8002c14:	2105      	movs	r1, #5
 8002c16:	4804      	ldr	r0, [pc, #16]	; (8002c28 <FreqMenu_DrawAdjustMenu+0x28>)
 8002c18:	f00c fda6 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002c1c:	f7fe f9aa 	bl	8000f74 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	080148ac 	.word	0x080148ac

08002c2c <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002c2c:	b5b0      	push	{r4, r5, r7, lr}
 8002c2e:	b0a0      	sub	sp, #128	; 0x80
 8002c30:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	2302      	movs	r3, #2
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	220a      	movs	r2, #10
 8002c40:	2105      	movs	r1, #5
 8002c42:	48a2      	ldr	r0, [pc, #648]	; (8002ecc <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c44:	f00c fd90 	bl	800f768 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002c48:	2300      	movs	r3, #0
 8002c4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c5a:	4b9d      	ldr	r3, [pc, #628]	; (8002ed0 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d109      	bne.n	8002c7a <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002c66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c6a:	4a9a      	ldr	r2, [pc, #616]	; (8002ed4 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002c6c:	461c      	mov	r4, r3
 8002c6e:	4615      	mov	r5, r2
 8002c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	7023      	strb	r3, [r4, #0]
 8002c78:	e008      	b.n	8002c8c <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002c7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c7e:	4a96      	ldr	r2, [pc, #600]	; (8002ed8 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c80:	461c      	mov	r4, r3
 8002c82:	4615      	mov	r5, r2
 8002c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c8c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c90:	2300      	movs	r3, #0
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	2302      	movs	r3, #2
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c9c:	2228      	movs	r2, #40	; 0x28
 8002c9e:	2105      	movs	r1, #5
 8002ca0:	f00c fd62 	bl	800f768 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
 8002cb8:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002cba:	f003 ff73 	bl	8006ba4 <SM_GetOutputInHertz>
 8002cbe:	ee10 3a10 	vmov	r3, s0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc68 	bl	8000598 <__aeabi_f2d>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	460c      	mov	r4, r1
 8002ccc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002cd0:	e9cd 3400 	strd	r3, r4, [sp]
 8002cd4:	4a81      	ldr	r2, [pc, #516]	; (8002edc <FreqMenu_DrawSweepMenu+0x2b0>)
 8002cd6:	2119      	movs	r1, #25
 8002cd8:	f00e f902 	bl	8010ee0 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cdc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cec:	223c      	movs	r2, #60	; 0x3c
 8002cee:	2105      	movs	r1, #5
 8002cf0:	f00c fd3a 	bl	800f768 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d00:	2264      	movs	r2, #100	; 0x64
 8002d02:	2105      	movs	r1, #5
 8002d04:	4876      	ldr	r0, [pc, #472]	; (8002ee0 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002d06:	f00c fd2f 	bl	800f768 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002d0a:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d117      	bne.n	8002d46 <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d16:	2300      	movs	r3, #0
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d22:	2264      	movs	r2, #100	; 0x64
 8002d24:	21eb      	movs	r1, #235	; 0xeb
 8002d26:	486f      	ldr	r0, [pc, #444]	; (8002ee4 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d28:	f00c fd1e 	bl	800f768 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d2c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2302      	movs	r3, #2
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	2264      	movs	r2, #100	; 0x64
 8002d3a:	f240 1109 	movw	r1, #265	; 0x109
 8002d3e:	486a      	ldr	r0, [pc, #424]	; (8002ee8 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d40:	f00c fd12 	bl	800f768 <ILI9341_Draw_Text>
 8002d44:	e016      	b.n	8002d74 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d46:	2300      	movs	r3, #0
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d52:	2264      	movs	r2, #100	; 0x64
 8002d54:	f240 1109 	movw	r1, #265	; 0x109
 8002d58:	4863      	ldr	r0, [pc, #396]	; (8002ee8 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d5a:	f00c fd05 	bl	800f768 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d5e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	2302      	movs	r3, #2
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2264      	movs	r2, #100	; 0x64
 8002d6c:	21eb      	movs	r1, #235	; 0xeb
 8002d6e:	485d      	ldr	r0, [pc, #372]	; (8002ee4 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d70:	f00c fcfa 	bl	800f768 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002d74:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d7c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2302      	movs	r3, #2
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2300      	movs	r3, #0
 8002d88:	2278      	movs	r2, #120	; 0x78
 8002d8a:	2105      	movs	r1, #5
 8002d8c:	4858      	ldr	r0, [pc, #352]	; (8002ef0 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d8e:	f00c fceb 	bl	800f768 <ILI9341_Draw_Text>
 8002d92:	e00a      	b.n	8002daa <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d94:	2300      	movs	r3, #0
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002da0:	2278      	movs	r2, #120	; 0x78
 8002da2:	2105      	movs	r1, #5
 8002da4:	4852      	ldr	r0, [pc, #328]	; (8002ef0 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002da6:	f00c fcdf 	bl	800f768 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	611a      	str	r2, [r3, #16]
 8002dbe:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002dc0:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fbe7 	bl	8000598 <__aeabi_f2d>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002dd2:	e9cd 3400 	strd	r3, r4, [sp]
 8002dd6:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002dd8:	2119      	movs	r1, #25
 8002dda:	f00e f881 	bl	8010ee0 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dde:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002de2:	2300      	movs	r3, #0
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2302      	movs	r3, #2
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dee:	2278      	movs	r2, #120	; 0x78
 8002df0:	21b6      	movs	r1, #182	; 0xb6
 8002df2:	f00c fcb9 	bl	800f768 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <FreqMenu_DrawSweepMenu+0x2c0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10f      	bne.n	8002e1e <FreqMenu_DrawSweepMenu+0x1f2>
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002e06:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2300      	movs	r3, #0
 8002e12:	228c      	movs	r2, #140	; 0x8c
 8002e14:	2105      	movs	r1, #5
 8002e16:	483a      	ldr	r0, [pc, #232]	; (8002f00 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e18:	f00c fca6 	bl	800f768 <ILI9341_Draw_Text>
 8002e1c:	e00a      	b.n	8002e34 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	2302      	movs	r3, #2
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e2a:	228c      	movs	r2, #140	; 0x8c
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	4834      	ldr	r0, [pc, #208]	; (8002f00 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e30:	f00c fc9a 	bl	800f768 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002e46:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	ee17 0a90 	vmov	r0, s15
 8002e5e:	f003 fee7 	bl	8006c30 <SM_ConvertPeriodToHertz>
 8002e62:	eeb0 7a40 	vmov.f32	s14, s0
 8002e66:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002f08 <FreqMenu_DrawSweepMenu+0x2dc>
 8002e6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e6e:	ee16 0a90 	vmov	r0, s13
 8002e72:	f7fd fb91 	bl	8000598 <__aeabi_f2d>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	f107 0018 	add.w	r0, r7, #24
 8002e7e:	e9cd 3400 	strd	r3, r4, [sp]
 8002e82:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e84:	2114      	movs	r1, #20
 8002e86:	f00e f82b 	bl	8010ee0 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e8a:	f107 0018 	add.w	r0, r7, #24
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2302      	movs	r3, #2
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e9a:	228c      	movs	r2, #140	; 0x8c
 8002e9c:	219e      	movs	r1, #158	; 0x9e
 8002e9e:	f00c fc63 	bl	800f768 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <FreqMenu_DrawSweepMenu+0x2c0>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d134      	bne.n	8002f14 <FreqMenu_DrawSweepMenu+0x2e8>
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <FreqMenu_DrawSweepMenu+0x2d0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d130      	bne.n	8002f14 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002eb2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2302      	movs	r3, #2
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	22a0      	movs	r2, #160	; 0xa0
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	4813      	ldr	r0, [pc, #76]	; (8002f10 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002ec4:	f00c fc50 	bl	800f768 <ILI9341_Draw_Text>
 8002ec8:	e02f      	b.n	8002f2a <FreqMenu_DrawSweepMenu+0x2fe>
 8002eca:	bf00      	nop
 8002ecc:	080148c0 	.word	0x080148c0
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	080148d4 	.word	0x080148d4
 8002ed8:	080148e8 	.word	0x080148e8
 8002edc:	080148fc 	.word	0x080148fc
 8002ee0:	08014910 	.word	0x08014910
 8002ee4:	0801491c 	.word	0x0801491c
 8002ee8:	08014920 	.word	0x08014920
 8002eec:	20001e59 	.word	0x20001e59
 8002ef0:	08014928 	.word	0x08014928
 8002ef4:	2000226c 	.word	0x2000226c
 8002ef8:	08014938 	.word	0x08014938
 8002efc:	20001e58 	.word	0x20001e58
 8002f00:	08014944 	.word	0x08014944
 8002f04:	20000120 	.word	0x20000120
 8002f08:	42f00000 	.word	0x42f00000
 8002f0c:	08014954 	.word	0x08014954
 8002f10:	08014960 	.word	0x08014960
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f14:	2300      	movs	r3, #0
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	2302      	movs	r3, #2
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f20:	22a0      	movs	r2, #160	; 0xa0
 8002f22:	2105      	movs	r1, #5
 8002f24:	484d      	ldr	r0, [pc, #308]	; (800305c <FreqMenu_DrawSweepMenu+0x430>)
 8002f26:	f00c fc1f 	bl	800f768 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	f107 0308 	add.w	r3, r7, #8
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002f3c:	4b48      	ldr	r3, [pc, #288]	; (8003060 <FreqMenu_DrawSweepMenu+0x434>)
 8002f3e:	edd3 7a00 	vldr	s15, [r3]
 8002f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4619      	mov	r1, r3
 8002f50:	ee17 0a90 	vmov	r0, s15
 8002f54:	f003 fe6c 	bl	8006c30 <SM_ConvertPeriodToHertz>
 8002f58:	eeb0 7a40 	vmov.f32	s14, s0
 8002f5c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8003064 <FreqMenu_DrawSweepMenu+0x438>
 8002f60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f64:	ee16 0a90 	vmov	r0, s13
 8002f68:	f7fd fb16 	bl	8000598 <__aeabi_f2d>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	1d38      	adds	r0, r7, #4
 8002f72:	e9cd 3400 	strd	r3, r4, [sp]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <FreqMenu_DrawSweepMenu+0x43c>)
 8002f78:	2114      	movs	r1, #20
 8002f7a:	f00d ffb1 	bl	8010ee0 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f7e:	1d38      	adds	r0, r7, #4
 8002f80:	2300      	movs	r3, #0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f8c:	22a0      	movs	r2, #160	; 0xa0
 8002f8e:	21aa      	movs	r1, #170	; 0xaa
 8002f90:	f00c fbea 	bl	800f768 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f94:	4b35      	ldr	r3, [pc, #212]	; (800306c <FreqMenu_DrawSweepMenu+0x440>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10b      	bne.n	8002fb8 <FreqMenu_DrawSweepMenu+0x38c>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002fa0:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2300      	movs	r3, #0
 8002fac:	22d5      	movs	r2, #213	; 0xd5
 8002fae:	2106      	movs	r1, #6
 8002fb0:	482f      	ldr	r0, [pc, #188]	; (8003070 <FreqMenu_DrawSweepMenu+0x444>)
 8002fb2:	f00c fbd9 	bl	800f768 <ILI9341_Draw_Text>
 8002fb6:	e00a      	b.n	8002fce <FreqMenu_DrawSweepMenu+0x3a2>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002fb8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	22d5      	movs	r2, #213	; 0xd5
 8002fc6:	2105      	movs	r1, #5
 8002fc8:	482a      	ldr	r0, [pc, #168]	; (8003074 <FreqMenu_DrawSweepMenu+0x448>)
 8002fca:	f00c fbcd 	bl	800f768 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002fce:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	22cc      	movs	r2, #204	; 0xcc
 8002fdc:	2168      	movs	r1, #104	; 0x68
 8002fde:	4826      	ldr	r0, [pc, #152]	; (8003078 <FreqMenu_DrawSweepMenu+0x44c>)
 8002fe0:	f00c fbc2 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002fe4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	2302      	movs	r3, #2
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	22de      	movs	r2, #222	; 0xde
 8002ff2:	2161      	movs	r1, #97	; 0x61
 8002ff4:	4821      	ldr	r0, [pc, #132]	; (800307c <FreqMenu_DrawSweepMenu+0x450>)
 8002ff6:	f00c fbb7 	bl	800f768 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002ffa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	2302      	movs	r3, #2
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2300      	movs	r3, #0
 8003006:	22cc      	movs	r2, #204	; 0xcc
 8003008:	21b7      	movs	r1, #183	; 0xb7
 800300a:	481b      	ldr	r0, [pc, #108]	; (8003078 <FreqMenu_DrawSweepMenu+0x44c>)
 800300c:	f00c fbac 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003010:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	2302      	movs	r3, #2
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2300      	movs	r3, #0
 800301c:	22de      	movs	r2, #222	; 0xde
 800301e:	21ad      	movs	r1, #173	; 0xad
 8003020:	4817      	ldr	r0, [pc, #92]	; (8003080 <FreqMenu_DrawSweepMenu+0x454>)
 8003022:	f00c fba1 	bl	800f768 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003026:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	2302      	movs	r3, #2
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2300      	movs	r3, #0
 8003032:	22cc      	movs	r2, #204	; 0xcc
 8003034:	f240 1107 	movw	r1, #263	; 0x107
 8003038:	480f      	ldr	r0, [pc, #60]	; (8003078 <FreqMenu_DrawSweepMenu+0x44c>)
 800303a:	f00c fb95 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800303e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	2302      	movs	r3, #2
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	22de      	movs	r2, #222	; 0xde
 800304c:	21fc      	movs	r1, #252	; 0xfc
 800304e:	480d      	ldr	r0, [pc, #52]	; (8003084 <FreqMenu_DrawSweepMenu+0x458>)
 8003050:	f00c fb8a 	bl	800f768 <ILI9341_Draw_Text>
}
 8003054:	bf00      	nop
 8003056:	3778      	adds	r7, #120	; 0x78
 8003058:	46bd      	mov	sp, r7
 800305a:	bdb0      	pop	{r4, r5, r7, pc}
 800305c:	08014960 	.word	0x08014960
 8003060:	20000124 	.word	0x20000124
 8003064:	42f00000 	.word	0x42f00000
 8003068:	08014970 	.word	0x08014970
 800306c:	40000c00 	.word	0x40000c00
 8003070:	0801497c 	.word	0x0801497c
 8003074:	08014984 	.word	0x08014984
 8003078:	0801498c 	.word	0x0801498c
 800307c:	08014990 	.word	0x08014990
 8003080:	08014998 	.word	0x08014998
 8003084:	080149a0 	.word	0x080149a0

08003088 <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800308e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	220a      	movs	r2, #10
 800309c:	2105      	movs	r1, #5
 800309e:	4804      	ldr	r0, [pc, #16]	; (80030b0 <FreqMenu_DrawPrescalerMenu+0x28>)
 80030a0:	f00c fb62 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80030a4:	f7fd ff66 	bl	8000f74 <DM_DisplayFormattedOutput>

}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	080149a8 	.word	0x080149a8

080030b4 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d007      	beq.n	80030d4 <FuncMenu_DrawMenu+0x20>
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d009      	beq.n	80030dc <FuncMenu_DrawMenu+0x28>
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d000      	beq.n	80030ce <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 80030cc:	e00a      	b.n	80030e4 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 80030ce:	f000 f80d 	bl	80030ec <FuncMenu_DrawMainMenu>
			break;
 80030d2:	e007      	b.n	80030e4 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 f851 	bl	800317c <FuncMenu_DrawOutputMenu>
			break;
 80030da:	e003      	b.n	80030e4 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 80030dc:	2001      	movs	r0, #1
 80030de:	f000 f84d 	bl	800317c <FuncMenu_DrawOutputMenu>
			break;
 80030e2:	bf00      	nop

	}
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	2302      	movs	r3, #2
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2300      	movs	r3, #0
 80030fe:	220a      	movs	r2, #10
 8003100:	210a      	movs	r1, #10
 8003102:	481a      	ldr	r0, [pc, #104]	; (800316c <FuncMenu_DrawMainMenu+0x80>)
 8003104:	f00c fb30 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003108:	f7fd ff34 	bl	8000f74 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800310c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2302      	movs	r3, #2
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2300      	movs	r3, #0
 8003118:	22d2      	movs	r2, #210	; 0xd2
 800311a:	2105      	movs	r1, #5
 800311c:	4814      	ldr	r0, [pc, #80]	; (8003170 <FuncMenu_DrawMainMenu+0x84>)
 800311e:	f00c fb23 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003122:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	2302      	movs	r3, #2
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2300      	movs	r3, #0
 800312e:	22d2      	movs	r2, #210	; 0xd2
 8003130:	2164      	movs	r1, #100	; 0x64
 8003132:	4810      	ldr	r0, [pc, #64]	; (8003174 <FuncMenu_DrawMainMenu+0x88>)
 8003134:	f00c fb18 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003138:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	2302      	movs	r3, #2
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	22d2      	movs	r2, #210	; 0xd2
 8003146:	21af      	movs	r1, #175	; 0xaf
 8003148:	480b      	ldr	r0, [pc, #44]	; (8003178 <FuncMenu_DrawMainMenu+0x8c>)
 800314a:	f00c fb0d 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800314e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	2302      	movs	r3, #2
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2300      	movs	r3, #0
 800315a:	22d2      	movs	r2, #210	; 0xd2
 800315c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <FuncMenu_DrawMainMenu+0x8c>)
 8003162:	f00c fb01 	bl	800f768 <ILI9341_Draw_Text>
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	080149b8 	.word	0x080149b8
 8003170:	080149c4 	.word	0x080149c4
 8003174:	080149cc 	.word	0x080149cc
 8003178:	080149d0 	.word	0x080149d0

0800317c <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af02      	add	r7, sp, #8
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800318c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	2302      	movs	r3, #2
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2300      	movs	r3, #0
 8003198:	220a      	movs	r2, #10
 800319a:	210a      	movs	r1, #10
 800319c:	4896      	ldr	r0, [pc, #600]	; (80033f8 <FuncMenu_DrawOutputMenu+0x27c>)
 800319e:	f00c fae3 	bl	800f768 <ILI9341_Draw_Text>
 80031a2:	e00a      	b.n	80031ba <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80031a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	2302      	movs	r3, #2
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2300      	movs	r3, #0
 80031b0:	220a      	movs	r2, #10
 80031b2:	210a      	movs	r1, #10
 80031b4:	4891      	ldr	r0, [pc, #580]	; (80033fc <FuncMenu_DrawOutputMenu+0x280>)
 80031b6:	f00c fad7 	bl	800f768 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fa59 	bl	8006674 <SM_GetOutputChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80031c8:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8424 	beq.w	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	f200 841f 	bhi.w	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <FuncMenu_DrawOutputMenu+0x68>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003201 	.word	0x08003201
 80031e8:	080032fd 	.word	0x080032fd
 80031ec:	08003421 	.word	0x08003421
 80031f0:	0800351d 	.word	0x0800351d
 80031f4:	08003619 	.word	0x08003619
 80031f8:	08003751 	.word	0x08003751
 80031fc:	08003863 	.word	0x08003863
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003200:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	2302      	movs	r3, #2
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2300      	movs	r3, #0
 800320c:	2232      	movs	r2, #50	; 0x32
 800320e:	210a      	movs	r1, #10
 8003210:	487b      	ldr	r0, [pc, #492]	; (8003400 <FuncMenu_DrawOutputMenu+0x284>)
 8003212:	f00c faa9 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003216:	2300      	movs	r3, #0
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	2302      	movs	r3, #2
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003222:	2246      	movs	r2, #70	; 0x46
 8003224:	210a      	movs	r1, #10
 8003226:	4877      	ldr	r0, [pc, #476]	; (8003404 <FuncMenu_DrawOutputMenu+0x288>)
 8003228:	f00c fa9e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800322c:	2300      	movs	r3, #0
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	2302      	movs	r3, #2
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003238:	225a      	movs	r2, #90	; 0x5a
 800323a:	210a      	movs	r1, #10
 800323c:	4872      	ldr	r0, [pc, #456]	; (8003408 <FuncMenu_DrawOutputMenu+0x28c>)
 800323e:	f00c fa93 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003242:	2300      	movs	r3, #0
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2302      	movs	r3, #2
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800324e:	226e      	movs	r2, #110	; 0x6e
 8003250:	210a      	movs	r1, #10
 8003252:	486e      	ldr	r0, [pc, #440]	; (800340c <FuncMenu_DrawOutputMenu+0x290>)
 8003254:	f00c fa88 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003258:	2300      	movs	r3, #0
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2302      	movs	r3, #2
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003264:	2282      	movs	r2, #130	; 0x82
 8003266:	210a      	movs	r1, #10
 8003268:	4869      	ldr	r0, [pc, #420]	; (8003410 <FuncMenu_DrawOutputMenu+0x294>)
 800326a:	f00c fa7d 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800326e:	2300      	movs	r3, #0
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2302      	movs	r3, #2
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800327a:	2296      	movs	r2, #150	; 0x96
 800327c:	210a      	movs	r1, #10
 800327e:	4865      	ldr	r0, [pc, #404]	; (8003414 <FuncMenu_DrawOutputMenu+0x298>)
 8003280:	f00c fa72 	bl	800f768 <ILI9341_Draw_Text>

				if(pOutChan)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800328a:	2300      	movs	r3, #0
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	2302      	movs	r3, #2
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003296:	22aa      	movs	r2, #170	; 0xaa
 8003298:	210a      	movs	r1, #10
 800329a:	485f      	ldr	r0, [pc, #380]	; (8003418 <FuncMenu_DrawOutputMenu+0x29c>)
 800329c:	f00c fa64 	bl	800f768 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032a0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2302      	movs	r3, #2
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	22d2      	movs	r2, #210	; 0xd2
 80032ae:	2105      	movs	r1, #5
 80032b0:	485a      	ldr	r0, [pc, #360]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80032b2:	f00c fa59 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032b6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2302      	movs	r3, #2
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	22d2      	movs	r2, #210	; 0xd2
 80032c4:	2161      	movs	r1, #97	; 0x61
 80032c6:	4855      	ldr	r0, [pc, #340]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80032c8:	f00c fa4e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2302      	movs	r3, #2
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	22d2      	movs	r2, #210	; 0xd2
 80032da:	21af      	movs	r1, #175	; 0xaf
 80032dc:	484f      	ldr	r0, [pc, #316]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80032de:	f00c fa43 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032e2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2302      	movs	r3, #2
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	22d2      	movs	r2, #210	; 0xd2
 80032f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032f4:	4849      	ldr	r0, [pc, #292]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80032f6:	f00c fa37 	bl	800f768 <ILI9341_Draw_Text>
				break;
 80032fa:	e38e      	b.n	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032fc:	2300      	movs	r3, #0
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	2302      	movs	r3, #2
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003308:	2232      	movs	r2, #50	; 0x32
 800330a:	210a      	movs	r1, #10
 800330c:	483c      	ldr	r0, [pc, #240]	; (8003400 <FuncMenu_DrawOutputMenu+0x284>)
 800330e:	f00c fa2b 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003312:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2302      	movs	r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	2246      	movs	r2, #70	; 0x46
 8003320:	210a      	movs	r1, #10
 8003322:	4838      	ldr	r0, [pc, #224]	; (8003404 <FuncMenu_DrawOutputMenu+0x288>)
 8003324:	f00c fa20 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003328:	2300      	movs	r3, #0
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	2302      	movs	r3, #2
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003334:	225a      	movs	r2, #90	; 0x5a
 8003336:	210a      	movs	r1, #10
 8003338:	4833      	ldr	r0, [pc, #204]	; (8003408 <FuncMenu_DrawOutputMenu+0x28c>)
 800333a:	f00c fa15 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800333e:	2300      	movs	r3, #0
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2302      	movs	r3, #2
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800334a:	226e      	movs	r2, #110	; 0x6e
 800334c:	210a      	movs	r1, #10
 800334e:	482f      	ldr	r0, [pc, #188]	; (800340c <FuncMenu_DrawOutputMenu+0x290>)
 8003350:	f00c fa0a 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003354:	2300      	movs	r3, #0
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	2302      	movs	r3, #2
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003360:	2282      	movs	r2, #130	; 0x82
 8003362:	210a      	movs	r1, #10
 8003364:	482a      	ldr	r0, [pc, #168]	; (8003410 <FuncMenu_DrawOutputMenu+0x294>)
 8003366:	f00c f9ff 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800336a:	2300      	movs	r3, #0
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	2302      	movs	r3, #2
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003376:	2296      	movs	r2, #150	; 0x96
 8003378:	210a      	movs	r1, #10
 800337a:	4826      	ldr	r0, [pc, #152]	; (8003414 <FuncMenu_DrawOutputMenu+0x298>)
 800337c:	f00c f9f4 	bl	800f768 <ILI9341_Draw_Text>

				if(pOutChan)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003386:	2300      	movs	r3, #0
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	2302      	movs	r3, #2
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003392:	22aa      	movs	r2, #170	; 0xaa
 8003394:	210a      	movs	r1, #10
 8003396:	4820      	ldr	r0, [pc, #128]	; (8003418 <FuncMenu_DrawOutputMenu+0x29c>)
 8003398:	f00c f9e6 	bl	800f768 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800339c:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2302      	movs	r3, #2
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2300      	movs	r3, #0
 80033a8:	22d2      	movs	r2, #210	; 0xd2
 80033aa:	2105      	movs	r1, #5
 80033ac:	481b      	ldr	r0, [pc, #108]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80033ae:	f00c f9db 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033b2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	2302      	movs	r3, #2
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2300      	movs	r3, #0
 80033be:	22d2      	movs	r2, #210	; 0xd2
 80033c0:	2161      	movs	r1, #97	; 0x61
 80033c2:	4816      	ldr	r0, [pc, #88]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80033c4:	f00c f9d0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	2302      	movs	r3, #2
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2300      	movs	r3, #0
 80033d4:	22d2      	movs	r2, #210	; 0xd2
 80033d6:	21af      	movs	r1, #175	; 0xaf
 80033d8:	4810      	ldr	r0, [pc, #64]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80033da:	f00c f9c5 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033de:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	2302      	movs	r3, #2
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2300      	movs	r3, #0
 80033ea:	22d2      	movs	r2, #210	; 0xd2
 80033ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033f0:	480a      	ldr	r0, [pc, #40]	; (800341c <FuncMenu_DrawOutputMenu+0x2a0>)
 80033f2:	f00c f9b9 	bl	800f768 <ILI9341_Draw_Text>
				break;
 80033f6:	e310      	b.n	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
 80033f8:	080149d8 	.word	0x080149d8
 80033fc:	080149e8 	.word	0x080149e8
 8003400:	080149f8 	.word	0x080149f8
 8003404:	08014a00 	.word	0x08014a00
 8003408:	08014a0c 	.word	0x08014a0c
 800340c:	08014a14 	.word	0x08014a14
 8003410:	08014a20 	.word	0x08014a20
 8003414:	08014a2c 	.word	0x08014a2c
 8003418:	08014a34 	.word	0x08014a34
 800341c:	080149d0 	.word	0x080149d0
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003420:	2300      	movs	r3, #0
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	2302      	movs	r3, #2
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800342c:	2232      	movs	r2, #50	; 0x32
 800342e:	210a      	movs	r1, #10
 8003430:	48be      	ldr	r0, [pc, #760]	; (800372c <FuncMenu_DrawOutputMenu+0x5b0>)
 8003432:	f00c f999 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003436:	2300      	movs	r3, #0
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	2302      	movs	r3, #2
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003442:	2246      	movs	r2, #70	; 0x46
 8003444:	210a      	movs	r1, #10
 8003446:	48ba      	ldr	r0, [pc, #744]	; (8003730 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003448:	f00c f98e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800344c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2302      	movs	r3, #2
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	225a      	movs	r2, #90	; 0x5a
 800345a:	210a      	movs	r1, #10
 800345c:	48b5      	ldr	r0, [pc, #724]	; (8003734 <FuncMenu_DrawOutputMenu+0x5b8>)
 800345e:	f00c f983 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003462:	2300      	movs	r3, #0
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	2302      	movs	r3, #2
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800346e:	226e      	movs	r2, #110	; 0x6e
 8003470:	210a      	movs	r1, #10
 8003472:	48b1      	ldr	r0, [pc, #708]	; (8003738 <FuncMenu_DrawOutputMenu+0x5bc>)
 8003474:	f00c f978 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003478:	2300      	movs	r3, #0
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2302      	movs	r3, #2
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003484:	2282      	movs	r2, #130	; 0x82
 8003486:	210a      	movs	r1, #10
 8003488:	48ac      	ldr	r0, [pc, #688]	; (800373c <FuncMenu_DrawOutputMenu+0x5c0>)
 800348a:	f00c f96d 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348e:	2300      	movs	r3, #0
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2302      	movs	r3, #2
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800349a:	2296      	movs	r2, #150	; 0x96
 800349c:	210a      	movs	r1, #10
 800349e:	48a8      	ldr	r0, [pc, #672]	; (8003740 <FuncMenu_DrawOutputMenu+0x5c4>)
 80034a0:	f00c f962 	bl	800f768 <ILI9341_Draw_Text>
				if(pOutChan)
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034aa:	2300      	movs	r3, #0
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2302      	movs	r3, #2
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034b6:	22aa      	movs	r2, #170	; 0xaa
 80034b8:	210a      	movs	r1, #10
 80034ba:	48a2      	ldr	r0, [pc, #648]	; (8003744 <FuncMenu_DrawOutputMenu+0x5c8>)
 80034bc:	f00c f954 	bl	800f768 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80034c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2302      	movs	r3, #2
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2300      	movs	r3, #0
 80034cc:	22d2      	movs	r2, #210	; 0xd2
 80034ce:	2105      	movs	r1, #5
 80034d0:	489d      	ldr	r0, [pc, #628]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80034d2:	f00c f949 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80034d6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	2302      	movs	r3, #2
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2300      	movs	r3, #0
 80034e2:	22d2      	movs	r2, #210	; 0xd2
 80034e4:	2161      	movs	r1, #97	; 0x61
 80034e6:	4898      	ldr	r0, [pc, #608]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80034e8:	f00c f93e 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2302      	movs	r3, #2
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	22d2      	movs	r2, #210	; 0xd2
 80034fa:	21af      	movs	r1, #175	; 0xaf
 80034fc:	4892      	ldr	r0, [pc, #584]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80034fe:	f00c f933 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003502:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	2302      	movs	r3, #2
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2300      	movs	r3, #0
 800350e:	22d2      	movs	r2, #210	; 0xd2
 8003510:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003514:	488c      	ldr	r0, [pc, #560]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003516:	f00c f927 	bl	800f768 <ILI9341_Draw_Text>
				break;
 800351a:	e27e      	b.n	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800351c:	2300      	movs	r3, #0
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	2302      	movs	r3, #2
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003528:	2232      	movs	r2, #50	; 0x32
 800352a:	210a      	movs	r1, #10
 800352c:	487f      	ldr	r0, [pc, #508]	; (800372c <FuncMenu_DrawOutputMenu+0x5b0>)
 800352e:	f00c f91b 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003532:	2300      	movs	r3, #0
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2302      	movs	r3, #2
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800353e:	2246      	movs	r2, #70	; 0x46
 8003540:	210a      	movs	r1, #10
 8003542:	487b      	ldr	r0, [pc, #492]	; (8003730 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003544:	f00c f910 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003548:	2300      	movs	r3, #0
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	2302      	movs	r3, #2
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003554:	225a      	movs	r2, #90	; 0x5a
 8003556:	210a      	movs	r1, #10
 8003558:	4876      	ldr	r0, [pc, #472]	; (8003734 <FuncMenu_DrawOutputMenu+0x5b8>)
 800355a:	f00c f905 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800355e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	2302      	movs	r3, #2
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	226e      	movs	r2, #110	; 0x6e
 800356c:	210a      	movs	r1, #10
 800356e:	4872      	ldr	r0, [pc, #456]	; (8003738 <FuncMenu_DrawOutputMenu+0x5bc>)
 8003570:	f00c f8fa 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003574:	2300      	movs	r3, #0
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	2302      	movs	r3, #2
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003580:	2282      	movs	r2, #130	; 0x82
 8003582:	210a      	movs	r1, #10
 8003584:	486d      	ldr	r0, [pc, #436]	; (800373c <FuncMenu_DrawOutputMenu+0x5c0>)
 8003586:	f00c f8ef 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800358a:	2300      	movs	r3, #0
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2302      	movs	r3, #2
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003596:	2296      	movs	r2, #150	; 0x96
 8003598:	210a      	movs	r1, #10
 800359a:	4869      	ldr	r0, [pc, #420]	; (8003740 <FuncMenu_DrawOutputMenu+0x5c4>)
 800359c:	f00c f8e4 	bl	800f768 <ILI9341_Draw_Text>

				if(pOutChan)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a6:	2300      	movs	r3, #0
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2302      	movs	r3, #2
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035b2:	22aa      	movs	r2, #170	; 0xaa
 80035b4:	210a      	movs	r1, #10
 80035b6:	4863      	ldr	r0, [pc, #396]	; (8003744 <FuncMenu_DrawOutputMenu+0x5c8>)
 80035b8:	f00c f8d6 	bl	800f768 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80035bc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	2302      	movs	r3, #2
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	22d2      	movs	r2, #210	; 0xd2
 80035ca:	2105      	movs	r1, #5
 80035cc:	485e      	ldr	r0, [pc, #376]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80035ce:	f00c f8cb 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80035d2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	2302      	movs	r3, #2
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2300      	movs	r3, #0
 80035de:	22d2      	movs	r2, #210	; 0xd2
 80035e0:	2161      	movs	r1, #97	; 0x61
 80035e2:	4859      	ldr	r0, [pc, #356]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80035e4:	f00c f8c0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2302      	movs	r3, #2
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	22d2      	movs	r2, #210	; 0xd2
 80035f6:	21af      	movs	r1, #175	; 0xaf
 80035f8:	4853      	ldr	r0, [pc, #332]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80035fa:	f00c f8b5 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035fe:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2302      	movs	r3, #2
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2300      	movs	r3, #0
 800360a:	22d2      	movs	r2, #210	; 0xd2
 800360c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003610:	484d      	ldr	r0, [pc, #308]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003612:	f00c f8a9 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8003616:	e200      	b.n	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003618:	2300      	movs	r3, #0
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	2302      	movs	r3, #2
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003624:	2232      	movs	r2, #50	; 0x32
 8003626:	210a      	movs	r1, #10
 8003628:	4840      	ldr	r0, [pc, #256]	; (800372c <FuncMenu_DrawOutputMenu+0x5b0>)
 800362a:	f00c f89d 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800362e:	2300      	movs	r3, #0
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	2302      	movs	r3, #2
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800363a:	2246      	movs	r2, #70	; 0x46
 800363c:	210a      	movs	r1, #10
 800363e:	483c      	ldr	r0, [pc, #240]	; (8003730 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003640:	f00c f892 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003644:	2300      	movs	r3, #0
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	2302      	movs	r3, #2
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003650:	225a      	movs	r2, #90	; 0x5a
 8003652:	210a      	movs	r1, #10
 8003654:	4837      	ldr	r0, [pc, #220]	; (8003734 <FuncMenu_DrawOutputMenu+0x5b8>)
 8003656:	f00c f887 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800365a:	2300      	movs	r3, #0
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	2302      	movs	r3, #2
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003666:	226e      	movs	r2, #110	; 0x6e
 8003668:	210a      	movs	r1, #10
 800366a:	4833      	ldr	r0, [pc, #204]	; (8003738 <FuncMenu_DrawOutputMenu+0x5bc>)
 800366c:	f00c f87c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003670:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	2302      	movs	r3, #2
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2300      	movs	r3, #0
 800367c:	2282      	movs	r2, #130	; 0x82
 800367e:	210a      	movs	r1, #10
 8003680:	482e      	ldr	r0, [pc, #184]	; (800373c <FuncMenu_DrawOutputMenu+0x5c0>)
 8003682:	f00c f871 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003686:	2300      	movs	r3, #0
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2302      	movs	r3, #2
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003692:	2296      	movs	r2, #150	; 0x96
 8003694:	210a      	movs	r1, #10
 8003696:	482a      	ldr	r0, [pc, #168]	; (8003740 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003698:	f00c f866 	bl	800f768 <ILI9341_Draw_Text>

				if(pOutChan)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a2:	2300      	movs	r3, #0
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	2302      	movs	r3, #2
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ae:	22aa      	movs	r2, #170	; 0xaa
 80036b0:	210a      	movs	r1, #10
 80036b2:	4824      	ldr	r0, [pc, #144]	; (8003744 <FuncMenu_DrawOutputMenu+0x5c8>)
 80036b4:	f00c f858 	bl	800f768 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80036b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	2302      	movs	r3, #2
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2300      	movs	r3, #0
 80036c4:	22d2      	movs	r2, #210	; 0xd2
 80036c6:	2105      	movs	r1, #5
 80036c8:	481f      	ldr	r0, [pc, #124]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80036ca:	f00c f84d 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80036ce:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	2302      	movs	r3, #2
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	22d2      	movs	r2, #210	; 0xd2
 80036dc:	2161      	movs	r1, #97	; 0x61
 80036de:	481a      	ldr	r0, [pc, #104]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80036e0:	f00c f842 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80036e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2302      	movs	r3, #2
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	22d2      	movs	r2, #210	; 0xd2
 80036f2:	21af      	movs	r1, #175	; 0xaf
 80036f4:	4814      	ldr	r0, [pc, #80]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 80036f6:	f00c f837 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80036fa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	2302      	movs	r3, #2
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2300      	movs	r3, #0
 8003706:	22d2      	movs	r2, #210	; 0xd2
 8003708:	f44f 7182 	mov.w	r1, #260	; 0x104
 800370c:	480e      	ldr	r0, [pc, #56]	; (8003748 <FuncMenu_DrawOutputMenu+0x5cc>)
 800370e:	f00c f82b 	bl	800f768 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003712:	2300      	movs	r3, #0
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	2302      	movs	r3, #2
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800371e:	2232      	movs	r2, #50	; 0x32
 8003720:	2196      	movs	r1, #150	; 0x96
 8003722:	480a      	ldr	r0, [pc, #40]	; (800374c <FuncMenu_DrawOutputMenu+0x5d0>)
 8003724:	f00c f820 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8003728:	e177      	b.n	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
 800372a:	bf00      	nop
 800372c:	080149f8 	.word	0x080149f8
 8003730:	08014a00 	.word	0x08014a00
 8003734:	08014a0c 	.word	0x08014a0c
 8003738:	08014a14 	.word	0x08014a14
 800373c:	08014a20 	.word	0x08014a20
 8003740:	08014a2c 	.word	0x08014a2c
 8003744:	08014a34 	.word	0x08014a34
 8003748:	080149d0 	.word	0x080149d0
 800374c:	08014a3c 	.word	0x08014a3c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003750:	2300      	movs	r3, #0
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2302      	movs	r3, #2
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800375c:	2232      	movs	r2, #50	; 0x32
 800375e:	210a      	movs	r1, #10
 8003760:	48b0      	ldr	r0, [pc, #704]	; (8003a24 <FuncMenu_DrawOutputMenu+0x8a8>)
 8003762:	f00c f801 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003766:	2300      	movs	r3, #0
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	2302      	movs	r3, #2
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003772:	2246      	movs	r2, #70	; 0x46
 8003774:	210a      	movs	r1, #10
 8003776:	48ac      	ldr	r0, [pc, #688]	; (8003a28 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003778:	f00b fff6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800377c:	2300      	movs	r3, #0
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	2302      	movs	r3, #2
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003788:	225a      	movs	r2, #90	; 0x5a
 800378a:	210a      	movs	r1, #10
 800378c:	48a7      	ldr	r0, [pc, #668]	; (8003a2c <FuncMenu_DrawOutputMenu+0x8b0>)
 800378e:	f00b ffeb 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003792:	2300      	movs	r3, #0
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2302      	movs	r3, #2
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800379e:	226e      	movs	r2, #110	; 0x6e
 80037a0:	210a      	movs	r1, #10
 80037a2:	48a3      	ldr	r0, [pc, #652]	; (8003a30 <FuncMenu_DrawOutputMenu+0x8b4>)
 80037a4:	f00b ffe0 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037a8:	2300      	movs	r3, #0
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	2302      	movs	r3, #2
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037b4:	2282      	movs	r2, #130	; 0x82
 80037b6:	210a      	movs	r1, #10
 80037b8:	489e      	ldr	r0, [pc, #632]	; (8003a34 <FuncMenu_DrawOutputMenu+0x8b8>)
 80037ba:	f00b ffd5 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80037be:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	2302      	movs	r3, #2
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2300      	movs	r3, #0
 80037ca:	2296      	movs	r2, #150	; 0x96
 80037cc:	210a      	movs	r1, #10
 80037ce:	489a      	ldr	r0, [pc, #616]	; (8003a38 <FuncMenu_DrawOutputMenu+0x8bc>)
 80037d0:	f00b ffca 	bl	800f768 <ILI9341_Draw_Text>

				if(pOutChan)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037da:	2300      	movs	r3, #0
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2302      	movs	r3, #2
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e6:	22aa      	movs	r2, #170	; 0xaa
 80037e8:	210a      	movs	r1, #10
 80037ea:	4894      	ldr	r0, [pc, #592]	; (8003a3c <FuncMenu_DrawOutputMenu+0x8c0>)
 80037ec:	f00b ffbc 	bl	800f768 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80037f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	2302      	movs	r3, #2
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2300      	movs	r3, #0
 80037fc:	22d2      	movs	r2, #210	; 0xd2
 80037fe:	2105      	movs	r1, #5
 8003800:	488f      	ldr	r0, [pc, #572]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003802:	f00b ffb1 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003806:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2302      	movs	r3, #2
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	22d2      	movs	r2, #210	; 0xd2
 8003814:	2161      	movs	r1, #97	; 0x61
 8003816:	488a      	ldr	r0, [pc, #552]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003818:	f00b ffa6 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800381c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	2302      	movs	r3, #2
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	2300      	movs	r3, #0
 8003828:	22d2      	movs	r2, #210	; 0xd2
 800382a:	21af      	movs	r1, #175	; 0xaf
 800382c:	4884      	ldr	r0, [pc, #528]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 800382e:	f00b ff9b 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003832:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2302      	movs	r3, #2
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2300      	movs	r3, #0
 800383e:	22d2      	movs	r2, #210	; 0xd2
 8003840:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003844:	487e      	ldr	r0, [pc, #504]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003846:	f00b ff8f 	bl	800f768 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800384a:	2300      	movs	r3, #0
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	2302      	movs	r3, #2
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003856:	2232      	movs	r2, #50	; 0x32
 8003858:	2196      	movs	r1, #150	; 0x96
 800385a:	487a      	ldr	r0, [pc, #488]	; (8003a44 <FuncMenu_DrawOutputMenu+0x8c8>)
 800385c:	f00b ff84 	bl	800f768 <ILI9341_Draw_Text>
				break;
 8003860:	e0db      	b.n	8003a1a <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003862:	2300      	movs	r3, #0
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	2302      	movs	r3, #2
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800386e:	2232      	movs	r2, #50	; 0x32
 8003870:	210a      	movs	r1, #10
 8003872:	486c      	ldr	r0, [pc, #432]	; (8003a24 <FuncMenu_DrawOutputMenu+0x8a8>)
 8003874:	f00b ff78 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003878:	2300      	movs	r3, #0
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	2302      	movs	r3, #2
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003884:	2246      	movs	r2, #70	; 0x46
 8003886:	210a      	movs	r1, #10
 8003888:	4867      	ldr	r0, [pc, #412]	; (8003a28 <FuncMenu_DrawOutputMenu+0x8ac>)
 800388a:	f00b ff6d 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800388e:	2300      	movs	r3, #0
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2302      	movs	r3, #2
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800389a:	225a      	movs	r2, #90	; 0x5a
 800389c:	210a      	movs	r1, #10
 800389e:	4863      	ldr	r0, [pc, #396]	; (8003a2c <FuncMenu_DrawOutputMenu+0x8b0>)
 80038a0:	f00b ff62 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038a4:	2300      	movs	r3, #0
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	2302      	movs	r3, #2
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038b0:	226e      	movs	r2, #110	; 0x6e
 80038b2:	210a      	movs	r1, #10
 80038b4:	485e      	ldr	r0, [pc, #376]	; (8003a30 <FuncMenu_DrawOutputMenu+0x8b4>)
 80038b6:	f00b ff57 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ba:	2300      	movs	r3, #0
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	2302      	movs	r3, #2
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038c6:	2282      	movs	r2, #130	; 0x82
 80038c8:	210a      	movs	r1, #10
 80038ca:	485a      	ldr	r0, [pc, #360]	; (8003a34 <FuncMenu_DrawOutputMenu+0x8b8>)
 80038cc:	f00b ff4c 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038d0:	2300      	movs	r3, #0
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	2302      	movs	r3, #2
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038dc:	2296      	movs	r2, #150	; 0x96
 80038de:	210a      	movs	r1, #10
 80038e0:	4855      	ldr	r0, [pc, #340]	; (8003a38 <FuncMenu_DrawOutputMenu+0x8bc>)
 80038e2:	f00b ff41 	bl	800f768 <ILI9341_Draw_Text>

				if(pOutChan)
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038ec:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	2302      	movs	r3, #2
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2300      	movs	r3, #0
 80038f8:	22aa      	movs	r2, #170	; 0xaa
 80038fa:	210a      	movs	r1, #10
 80038fc:	484f      	ldr	r0, [pc, #316]	; (8003a3c <FuncMenu_DrawOutputMenu+0x8c0>)
 80038fe:	f00b ff33 	bl	800f768 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003902:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	2302      	movs	r3, #2
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2300      	movs	r3, #0
 800390e:	22d2      	movs	r2, #210	; 0xd2
 8003910:	2105      	movs	r1, #5
 8003912:	484b      	ldr	r0, [pc, #300]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003914:	f00b ff28 	bl	800f768 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003918:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	2302      	movs	r3, #2
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	22d2      	movs	r2, #210	; 0xd2
 8003926:	2161      	movs	r1, #97	; 0x61
 8003928:	4845      	ldr	r0, [pc, #276]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 800392a:	f00b ff1d 	bl	800f768 <ILI9341_Draw_Text>

				if(pOutChan)
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05a      	beq.n	80039ea <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003934:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	2302      	movs	r3, #2
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	2300      	movs	r3, #0
 8003940:	22d2      	movs	r2, #210	; 0xd2
 8003942:	21af      	movs	r1, #175	; 0xaf
 8003944:	4840      	ldr	r0, [pc, #256]	; (8003a48 <FuncMenu_DrawOutputMenu+0x8cc>)
 8003946:	f00b ff0f 	bl	800f768 <ILI9341_Draw_Text>
					char duty[10] = "";
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 8003958:	4b3c      	ldr	r3, [pc, #240]	; (8003a4c <FuncMenu_DrawOutputMenu+0x8d0>)
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003964:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <FuncMenu_DrawOutputMenu+0x8d0>)
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003974:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003a50 <FuncMenu_DrawOutputMenu+0x8d4>
 8003978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800397c:	ee17 0a90 	vmov	r0, s15
 8003980:	f7fc fe0a 	bl	8000598 <__aeabi_f2d>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	f107 0008 	add.w	r0, r7, #8
 800398c:	e9cd 3400 	strd	r3, r4, [sp]
 8003990:	4a30      	ldr	r2, [pc, #192]	; (8003a54 <FuncMenu_DrawOutputMenu+0x8d8>)
 8003992:	210a      	movs	r1, #10
 8003994:	f00d faa4 	bl	8010ee0 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003998:	f107 0008 	add.w	r0, r7, #8
 800399c:	2300      	movs	r3, #0
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	2302      	movs	r3, #2
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039a8:	2232      	movs	r2, #50	; 0x32
 80039aa:	21dc      	movs	r1, #220	; 0xdc
 80039ac:	f00b fedc 	bl	800f768 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 80039b0:	f003 f964 	bl	8006c7c <SM_IsFuncPwmDutyMode>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80039ba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2302      	movs	r3, #2
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	2232      	movs	r2, #50	; 0x32
 80039c8:	2196      	movs	r1, #150	; 0x96
 80039ca:	4823      	ldr	r0, [pc, #140]	; (8003a58 <FuncMenu_DrawOutputMenu+0x8dc>)
 80039cc:	f00b fecc 	bl	800f768 <ILI9341_Draw_Text>
 80039d0:	e016      	b.n	8003a00 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039d2:	2300      	movs	r3, #0
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	2302      	movs	r3, #2
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039de:	2232      	movs	r2, #50	; 0x32
 80039e0:	2196      	movs	r1, #150	; 0x96
 80039e2:	481d      	ldr	r0, [pc, #116]	; (8003a58 <FuncMenu_DrawOutputMenu+0x8dc>)
 80039e4:	f00b fec0 	bl	800f768 <ILI9341_Draw_Text>
 80039e8:	e00a      	b.n	8003a00 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	2302      	movs	r3, #2
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	22d2      	movs	r2, #210	; 0xd2
 80039f8:	21af      	movs	r1, #175	; 0xaf
 80039fa:	4811      	ldr	r0, [pc, #68]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 80039fc:	f00b feb4 	bl	800f768 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a00:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2302      	movs	r3, #2
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	22d2      	movs	r2, #210	; 0xd2
 8003a0e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a12:	480b      	ldr	r0, [pc, #44]	; (8003a40 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a14:	f00b fea8 	bl	800f768 <ILI9341_Draw_Text>

				break;
 8003a18:	bf00      	nop
				//
		}
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	bf00      	nop
 8003a24:	080149f8 	.word	0x080149f8
 8003a28:	08014a00 	.word	0x08014a00
 8003a2c:	08014a0c 	.word	0x08014a0c
 8003a30:	08014a14 	.word	0x08014a14
 8003a34:	08014a20 	.word	0x08014a20
 8003a38:	08014a2c 	.word	0x08014a2c
 8003a3c:	08014a34 	.word	0x08014a34
 8003a40:	080149d0 	.word	0x080149d0
 8003a44:	08014a3c 	.word	0x08014a3c
 8003a48:	08014a4c 	.word	0x08014a4c
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	42c80000 	.word	0x42c80000
 8003a54:	08014a54 	.word	0x08014a54
 8003a58:	08014a5c 	.word	0x08014a5c

08003a5c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d007      	beq.n	8003a7c <GainMenu_DrawMenu+0x20>
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d008      	beq.n	8003a82 <GainMenu_DrawMenu+0x26>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d000      	beq.n	8003a76 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003a74:	e008      	b.n	8003a88 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003a76:	f000 f80b 	bl	8003a90 <GainMenu_DrawMainMenu>
			break;
 8003a7a:	e005      	b.n	8003a88 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003a7c:	f000 f868 	bl	8003b50 <GainMenu_DrawSignalMenu>
			break;
 8003a80:	e002      	b.n	8003a88 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003a82:	f000 f8af 	bl	8003be4 <GainMenu_DrawAuxMenu>
			break;
 8003a86:	bf00      	nop

	}
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	220a      	movs	r2, #10
 8003aa4:	210a      	movs	r1, #10
 8003aa6:	4826      	ldr	r0, [pc, #152]	; (8003b40 <GainMenu_DrawMainMenu+0xb0>)
 8003aa8:	f00b fe5e 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003aac:	f7fd fa62 	bl	8000f74 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003ab0:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	22d2      	movs	r2, #210	; 0xd2
 8003abe:	2105      	movs	r1, #5
 8003ac0:	4820      	ldr	r0, [pc, #128]	; (8003b44 <GainMenu_DrawMainMenu+0xb4>)
 8003ac2:	f00b fe51 	bl	800f768 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f002 fdd4 	bl	8006674 <SM_GetOutputChannel>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b06      	cmp	r3, #6
 8003ada:	d10b      	bne.n	8003af4 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003adc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	22d2      	movs	r2, #210	; 0xd2
 8003aea:	2164      	movs	r1, #100	; 0x64
 8003aec:	4816      	ldr	r0, [pc, #88]	; (8003b48 <GainMenu_DrawMainMenu+0xb8>)
 8003aee:	f00b fe3b 	bl	800f768 <ILI9341_Draw_Text>
 8003af2:	e00a      	b.n	8003b0a <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003af4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2302      	movs	r3, #2
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	22d2      	movs	r2, #210	; 0xd2
 8003b02:	2164      	movs	r1, #100	; 0x64
 8003b04:	4811      	ldr	r0, [pc, #68]	; (8003b4c <GainMenu_DrawMainMenu+0xbc>)
 8003b06:	f00b fe2f 	bl	800f768 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	2302      	movs	r3, #2
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	22d2      	movs	r2, #210	; 0xd2
 8003b18:	21af      	movs	r1, #175	; 0xaf
 8003b1a:	480b      	ldr	r0, [pc, #44]	; (8003b48 <GainMenu_DrawMainMenu+0xb8>)
 8003b1c:	f00b fe24 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b20:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2302      	movs	r3, #2
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	22d2      	movs	r2, #210	; 0xd2
 8003b2e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b32:	4805      	ldr	r0, [pc, #20]	; (8003b48 <GainMenu_DrawMainMenu+0xb8>)
 8003b34:	f00b fe18 	bl	800f768 <ILI9341_Draw_Text>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	08014a64 	.word	0x08014a64
 8003b44:	08014a70 	.word	0x08014a70
 8003b48:	08014a78 	.word	0x08014a78
 8003b4c:	08014a80 	.word	0x08014a80

08003b50 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	220a      	movs	r2, #10
 8003b64:	210a      	movs	r1, #10
 8003b66:	481a      	ldr	r0, [pc, #104]	; (8003bd0 <GainMenu_DrawSignalMenu+0x80>)
 8003b68:	f00b fdfe 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b6c:	f7fd fa02 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b70:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2302      	movs	r3, #2
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	22d2      	movs	r2, #210	; 0xd2
 8003b7e:	210f      	movs	r1, #15
 8003b80:	4814      	ldr	r0, [pc, #80]	; (8003bd4 <GainMenu_DrawSignalMenu+0x84>)
 8003b82:	f00b fdf1 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b86:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2300      	movs	r3, #0
 8003b92:	22d2      	movs	r2, #210	; 0xd2
 8003b94:	2161      	movs	r1, #97	; 0x61
 8003b96:	4810      	ldr	r0, [pc, #64]	; (8003bd8 <GainMenu_DrawSignalMenu+0x88>)
 8003b98:	f00b fde6 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	22d2      	movs	r2, #210	; 0xd2
 8003baa:	21be      	movs	r1, #190	; 0xbe
 8003bac:	480b      	ldr	r0, [pc, #44]	; (8003bdc <GainMenu_DrawSignalMenu+0x8c>)
 8003bae:	f00b fddb 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003bb2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	22d2      	movs	r2, #210	; 0xd2
 8003bc0:	f240 1109 	movw	r1, #265	; 0x109
 8003bc4:	4806      	ldr	r0, [pc, #24]	; (8003be0 <GainMenu_DrawSignalMenu+0x90>)
 8003bc6:	f00b fdcf 	bl	800f768 <ILI9341_Draw_Text>
}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08014a84 	.word	0x08014a84
 8003bd4:	08014a94 	.word	0x08014a94
 8003bd8:	08014a9c 	.word	0x08014a9c
 8003bdc:	08014aa4 	.word	0x08014aa4
 8003be0:	08014aa8 	.word	0x08014aa8

08003be4 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	210a      	movs	r1, #10
 8003bfa:	4804      	ldr	r0, [pc, #16]	; (8003c0c <GainMenu_DrawAuxMenu+0x28>)
 8003bfc:	f00b fdb4 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c00:	f7fd f9b8 	bl	8000f74 <DM_DisplayFormattedOutput>
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08014aac 	.word	0x08014aac

08003c10 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d007      	beq.n	8003c30 <ToplevelMenu_DrawMenu+0x20>
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d008      	beq.n	8003c36 <ToplevelMenu_DrawMenu+0x26>
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d000      	beq.n	8003c2a <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003c28:	e008      	b.n	8003c3c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003c2a:	f000 f80b 	bl	8003c44 <ToplevelMenu_DrawMainMenu>
			break;
 8003c2e:	e005      	b.n	8003c3c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003c30:	f000 f844 	bl	8003cbc <ToplevelMenu_DrawOutputMenu>
			break;
 8003c34:	e002      	b.n	8003c3c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003c36:	f000 f88b 	bl	8003d50 <ToplevelMenu_DrawInputMenu>
			break;
 8003c3a:	bf00      	nop

	}
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003c4a:	f7fd f993 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003c4e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	2302      	movs	r3, #2
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	22d2      	movs	r2, #210	; 0xd2
 8003c5c:	2106      	movs	r1, #6
 8003c5e:	4814      	ldr	r0, [pc, #80]	; (8003cb0 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003c60:	f00b fd82 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c64:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	22d2      	movs	r2, #210	; 0xd2
 8003c72:	215d      	movs	r1, #93	; 0x5d
 8003c74:	480f      	ldr	r0, [pc, #60]	; (8003cb4 <ToplevelMenu_DrawMainMenu+0x70>)
 8003c76:	f00b fd77 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	22d2      	movs	r2, #210	; 0xd2
 8003c88:	21af      	movs	r1, #175	; 0xaf
 8003c8a:	480b      	ldr	r0, [pc, #44]	; (8003cb8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003c8c:	f00b fd6c 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c90:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	22d2      	movs	r2, #210	; 0xd2
 8003c9e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003ca2:	4805      	ldr	r0, [pc, #20]	; (8003cb8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003ca4:	f00b fd60 	bl	800f768 <ILI9341_Draw_Text>


}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	08014abc 	.word	0x08014abc
 8003cb4:	08014ac4 	.word	0x08014ac4
 8003cb8:	08014acc 	.word	0x08014acc

08003cbc <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2302      	movs	r3, #2
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	220a      	movs	r2, #10
 8003cd0:	210a      	movs	r1, #10
 8003cd2:	481a      	ldr	r0, [pc, #104]	; (8003d3c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003cd4:	f00b fd48 	bl	800f768 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003cd8:	f7fd f94c 	bl	8000f74 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003cdc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	22d2      	movs	r2, #210	; 0xd2
 8003cea:	210f      	movs	r1, #15
 8003cec:	4814      	ldr	r0, [pc, #80]	; (8003d40 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003cee:	f00b fd3b 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003cf2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	22d2      	movs	r2, #210	; 0xd2
 8003d00:	2162      	movs	r1, #98	; 0x62
 8003d02:	4810      	ldr	r0, [pc, #64]	; (8003d44 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003d04:	f00b fd30 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	2302      	movs	r3, #2
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	22d2      	movs	r2, #210	; 0xd2
 8003d16:	21b0      	movs	r1, #176	; 0xb0
 8003d18:	480b      	ldr	r0, [pc, #44]	; (8003d48 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003d1a:	f00b fd25 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d1e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	2302      	movs	r3, #2
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	22d2      	movs	r2, #210	; 0xd2
 8003d2c:	21f5      	movs	r1, #245	; 0xf5
 8003d2e:	4807      	ldr	r0, [pc, #28]	; (8003d4c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003d30:	f00b fd1a 	bl	800f768 <ILI9341_Draw_Text>
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	08014ad4 	.word	0x08014ad4
 8003d40:	08014adc 	.word	0x08014adc
 8003d44:	08014ae4 	.word	0x08014ae4
 8003d48:	08014aec 	.word	0x08014aec
 8003d4c:	08014af4 	.word	0x08014af4

08003d50 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2300      	movs	r3, #0
 8003d62:	220a      	movs	r2, #10
 8003d64:	210a      	movs	r1, #10
 8003d66:	4892      	ldr	r0, [pc, #584]	; (8003fb0 <ToplevelMenu_DrawInputMenu+0x260>)
 8003d68:	f00b fcfe 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2302      	movs	r3, #2
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d78:	2232      	movs	r2, #50	; 0x32
 8003d7a:	210a      	movs	r1, #10
 8003d7c:	488d      	ldr	r0, [pc, #564]	; (8003fb4 <ToplevelMenu_DrawInputMenu+0x264>)
 8003d7e:	f00b fcf3 	bl	800f768 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 8003d82:	f002 fb0d 	bl	80063a0 <IT_GetTriggerStatus>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d016      	beq.n	8003dba <ToplevelMenu_DrawInputMenu+0x6a>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d8c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2302      	movs	r3, #2
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2300      	movs	r3, #0
 8003d98:	2232      	movs	r2, #50	; 0x32
 8003d9a:	2196      	movs	r1, #150	; 0x96
 8003d9c:	4886      	ldr	r0, [pc, #536]	; (8003fb8 <ToplevelMenu_DrawInputMenu+0x268>)
 8003d9e:	f00b fce3 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003da2:	2300      	movs	r3, #0
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	2302      	movs	r3, #2
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003dae:	2232      	movs	r2, #50	; 0x32
 8003db0:	21c8      	movs	r1, #200	; 0xc8
 8003db2:	4882      	ldr	r0, [pc, #520]	; (8003fbc <ToplevelMenu_DrawInputMenu+0x26c>)
 8003db4:	f00b fcd8 	bl	800f768 <ILI9341_Draw_Text>
 8003db8:	e015      	b.n	8003de6 <ToplevelMenu_DrawInputMenu+0x96>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003dc6:	2232      	movs	r2, #50	; 0x32
 8003dc8:	2196      	movs	r1, #150	; 0x96
 8003dca:	487b      	ldr	r0, [pc, #492]	; (8003fb8 <ToplevelMenu_DrawInputMenu+0x268>)
 8003dcc:	f00b fccc 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003dd0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2232      	movs	r2, #50	; 0x32
 8003dde:	21c8      	movs	r1, #200	; 0xc8
 8003de0:	4876      	ldr	r0, [pc, #472]	; (8003fbc <ToplevelMenu_DrawInputMenu+0x26c>)
 8003de2:	f00b fcc1 	bl	800f768 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003de6:	2300      	movs	r3, #0
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	2302      	movs	r3, #2
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003df2:	2246      	movs	r2, #70	; 0x46
 8003df4:	210a      	movs	r1, #10
 8003df6:	4872      	ldr	r0, [pc, #456]	; (8003fc0 <ToplevelMenu_DrawInputMenu+0x270>)
 8003df8:	f00b fcb6 	bl	800f768 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_TIM)
 8003dfc:	f002 fab4 	bl	8006368 <IT_GetActiveTriggerMode>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12d      	bne.n	8003e62 <ToplevelMenu_DrawInputMenu+0x112>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e06:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	2246      	movs	r2, #70	; 0x46
 8003e14:	2196      	movs	r1, #150	; 0x96
 8003e16:	486b      	ldr	r0, [pc, #428]	; (8003fc4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003e18:	f00b fca6 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	2302      	movs	r3, #2
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e28:	2246      	movs	r2, #70	; 0x46
 8003e2a:	21c8      	movs	r1, #200	; 0xc8
 8003e2c:	4866      	ldr	r0, [pc, #408]	; (8003fc8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003e2e:	f00b fc9b 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e32:	2300      	movs	r3, #0
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	2302      	movs	r3, #2
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e3e:	2246      	movs	r2, #70	; 0x46
 8003e40:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003e44:	4861      	ldr	r0, [pc, #388]	; (8003fcc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003e46:	f00b fc8f 	bl	800f768 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	2302      	movs	r3, #2
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e56:	2264      	movs	r2, #100	; 0x64
 8003e58:	2196      	movs	r1, #150	; 0x96
 8003e5a:	485d      	ldr	r0, [pc, #372]	; (8003fd0 <ToplevelMenu_DrawInputMenu+0x280>)
 8003e5c:	f00b fc84 	bl	800f768 <ILI9341_Draw_Text>
 8003e60:	e076      	b.n	8003f50 <ToplevelMenu_DrawInputMenu+0x200>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_COMP)
 8003e62:	f002 fa81 	bl	8006368 <IT_GetActiveTriggerMode>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d13f      	bne.n	8003eec <ToplevelMenu_DrawInputMenu+0x19c>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	2302      	movs	r3, #2
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e78:	2246      	movs	r2, #70	; 0x46
 8003e7a:	2196      	movs	r1, #150	; 0x96
 8003e7c:	4851      	ldr	r0, [pc, #324]	; (8003fc4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003e7e:	f00b fc73 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e82:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2246      	movs	r2, #70	; 0x46
 8003e90:	21c8      	movs	r1, #200	; 0xc8
 8003e92:	484d      	ldr	r0, [pc, #308]	; (8003fc8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003e94:	f00b fc68 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ea4:	2246      	movs	r2, #70	; 0x46
 8003ea6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003eaa:	4848      	ldr	r0, [pc, #288]	; (8003fcc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003eac:	f00b fc5c 	bl	800f768 <ILI9341_Draw_Text>

		char comp_text[20] = "";
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	f107 0308 	add.w	r3, r7, #8
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8003ec2:	4844      	ldr	r0, [pc, #272]	; (8003fd4 <ToplevelMenu_DrawInputMenu+0x284>)
 8003ec4:	f006 fe76 	bl	800abb4 <HAL_COMP_GetOutputLevel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	1d38      	adds	r0, r7, #4
 8003ecc:	4a42      	ldr	r2, [pc, #264]	; (8003fd8 <ToplevelMenu_DrawInputMenu+0x288>)
 8003ece:	2114      	movs	r1, #20
 8003ed0:	f00d f806 	bl	8010ee0 <sniprintf>


		ILI9341_Draw_Text(comp_text, 150, 100,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003ed4:	1d38      	adds	r0, r7, #4
 8003ed6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2302      	movs	r3, #2
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2264      	movs	r2, #100	; 0x64
 8003ee4:	2196      	movs	r1, #150	; 0x96
 8003ee6:	f00b fc3f 	bl	800f768 <ILI9341_Draw_Text>
 8003eea:	e031      	b.n	8003f50 <ToplevelMenu_DrawInputMenu+0x200>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_ADC)
 8003eec:	f002 fa3c 	bl	8006368 <IT_GetActiveTriggerMode>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d12c      	bne.n	8003f50 <ToplevelMenu_DrawInputMenu+0x200>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2302      	movs	r3, #2
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f02:	2246      	movs	r2, #70	; 0x46
 8003f04:	2196      	movs	r1, #150	; 0x96
 8003f06:	482f      	ldr	r0, [pc, #188]	; (8003fc4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003f08:	f00b fc2e 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	2302      	movs	r3, #2
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f18:	2246      	movs	r2, #70	; 0x46
 8003f1a:	21c8      	movs	r1, #200	; 0xc8
 8003f1c:	482a      	ldr	r0, [pc, #168]	; (8003fc8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003f1e:	f00b fc23 	bl	800f768 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003f22:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	2302      	movs	r3, #2
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2246      	movs	r2, #70	; 0x46
 8003f30:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003f34:	4825      	ldr	r0, [pc, #148]	; (8003fcc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003f36:	f00b fc17 	bl	800f768 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	2302      	movs	r3, #2
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f46:	2264      	movs	r2, #100	; 0x64
 8003f48:	2196      	movs	r1, #150	; 0x96
 8003f4a:	4821      	ldr	r0, [pc, #132]	; (8003fd0 <ToplevelMenu_DrawInputMenu+0x280>)
 8003f4c:	f00b fc0c 	bl	800f768 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003f50:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	2302      	movs	r3, #2
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	22cc      	movs	r2, #204	; 0xcc
 8003f5e:	2114      	movs	r1, #20
 8003f60:	481e      	ldr	r0, [pc, #120]	; (8003fdc <ToplevelMenu_DrawInputMenu+0x28c>)
 8003f62:	f00b fc01 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003f66:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	22de      	movs	r2, #222	; 0xde
 8003f74:	2114      	movs	r1, #20
 8003f76:	481a      	ldr	r0, [pc, #104]	; (8003fe0 <ToplevelMenu_DrawInputMenu+0x290>)
 8003f78:	f00b fbf6 	bl	800f768 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003f7c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2302      	movs	r3, #2
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	22cc      	movs	r2, #204	; 0xcc
 8003f8a:	2168      	movs	r1, #104	; 0x68
 8003f8c:	4815      	ldr	r0, [pc, #84]	; (8003fe4 <ToplevelMenu_DrawInputMenu+0x294>)
 8003f8e:	f00b fbeb 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003f92:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	2302      	movs	r3, #2
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	22de      	movs	r2, #222	; 0xde
 8003fa0:	2161      	movs	r1, #97	; 0x61
 8003fa2:	4811      	ldr	r0, [pc, #68]	; (8003fe8 <ToplevelMenu_DrawInputMenu+0x298>)
 8003fa4:	f00b fbe0 	bl	800f768 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08014afc 	.word	0x08014afc
 8003fb4:	08014b04 	.word	0x08014b04
 8003fb8:	08014b10 	.word	0x08014b10
 8003fbc:	08014b14 	.word	0x08014b14
 8003fc0:	08014b18 	.word	0x08014b18
 8003fc4:	08014b20 	.word	0x08014b20
 8003fc8:	08014b24 	.word	0x08014b24
 8003fcc:	08014b2c 	.word	0x08014b2c
 8003fd0:	08014b30 	.word	0x08014b30
 8003fd4:	200029c8 	.word	0x200029c8
 8003fd8:	08014b38 	.word	0x08014b38
 8003fdc:	08014b40 	.word	0x08014b40
 8003fe0:	08014b44 	.word	0x08014b44
 8003fe4:	08014b4c 	.word	0x08014b4c
 8003fe8:	08014b50 	.word	0x08014b50

08003fec <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <BiasMenu_getStatus+0x14>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20001e55 	.word	0x20001e55

08004004 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004008:	f7fd fa74 	bl	80014f4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <BiasMenuEntryHandler+0x30>)
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <BiasMenuEntryHandler+0x34>)
 8004014:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 800401a:	f001 f9e3 	bl	80053e4 <BO_GetDcBiasEncoderValue>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <BiasMenuEntryHandler+0x34>)
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <BiasMenuEntryHandler+0x38>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800402c:	230f      	movs	r3, #15
}
 800402e:	4618      	mov	r0, r3
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20001e55 	.word	0x20001e55
 8004038:	40012c00 	.word	0x40012c00
 800403c:	20001e57 	.word	0x20001e57

08004040 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	3b01      	subs	r3, #1
 800404e:	2b04      	cmp	r3, #4
 8004050:	d82d      	bhi.n	80040ae <BiasMenuInputHandler+0x6e>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <BiasMenuInputHandler+0x18>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800407d 	.word	0x0800407d
 800405c:	0800408f 	.word	0x0800408f
 8004060:	0800409d 	.word	0x0800409d
 8004064:	080040af 	.word	0x080040af
 8004068:	0800406d 	.word	0x0800406d
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 800406c:	2000      	movs	r0, #0
 800406e:	f002 fd7d 	bl	8006b6c <SM_GetEncoderValue>
 8004072:	4603      	mov	r3, r0
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f9c1 	bl	80053fc <BO_MapEncoderPositionToSignalOutput>
			break;
 800407a:	e019      	b.n	80040b0 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 800407c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004080:	f001 f9bc 	bl	80053fc <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <BiasMenuInputHandler+0x80>)
 8004086:	f44f 7248 	mov.w	r2, #800	; 0x320
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800408c:	e010      	b.n	80040b0 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 800408e:	200a      	movs	r0, #10
 8004090:	f001 f9b4 	bl	80053fc <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <BiasMenuInputHandler+0x80>)
 8004096:	220a      	movs	r2, #10
 8004098:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800409a:	e009      	b.n	80040b0 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 800409c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80040a0:	f001 f9ac 	bl	80053fc <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <BiasMenuInputHandler+0x80>)
 80040a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80040ac:	e000      	b.n	80040b0 <BiasMenuInputHandler+0x70>

		default:
			break;
 80040ae:	bf00      	nop
	}


	eNewEvent = evIdle;
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <BiasMenuInputHandler+0x84>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80040b6:	230f      	movs	r3, #15
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	20001e57 	.word	0x20001e57

080040c8 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <BiasMenuExitHandler+0x1c>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80040d2:	f7fd fa0f 	bl	80014f4 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <BiasMenuExitHandler+0x20>)
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80040dc:	2301      	movs	r3, #1
}
 80040de:	4618      	mov	r0, r3
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20001e55 	.word	0x20001e55
 80040e8:	20001e57 	.word	0x20001e57

080040ec <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0

	switch(eNextState)
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <EM_ProcessEvent+0xb4>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	d850      	bhi.n	800419a <EM_ProcessEvent+0xae>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <EM_ProcessEvent+0x14>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004141 	.word	0x08004141
 8004104:	08004147 	.word	0x08004147
 8004108:	0800414d 	.word	0x0800414d
 800410c:	08004153 	.word	0x08004153
 8004110:	08004159 	.word	0x08004159
 8004114:	0800415f 	.word	0x0800415f
 8004118:	08004165 	.word	0x08004165
 800411c:	0800416b 	.word	0x0800416b
 8004120:	08004171 	.word	0x08004171
 8004124:	0800419b 	.word	0x0800419b
 8004128:	08004177 	.word	0x08004177
 800412c:	0800417d 	.word	0x0800417d
 8004130:	08004183 	.word	0x08004183
 8004134:	0800418f 	.word	0x0800418f
 8004138:	08004189 	.word	0x08004189
 800413c:	08004195 	.word	0x08004195
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 8004140:	f000 f830 	bl	80041a4 <_ProcessIdleStateEvents>
			break;
 8004144:	e02a      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 8004146:	f000 f849 	bl	80041dc <_ProcessTopLevelOutputMenuStateEvents>
			break;
 800414a:	e027      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 800414c:	f000 f88c 	bl	8004268 <_ProcessTopLevelInputMenuStateEvents>
			break;
 8004150:	e024      	b.n	800419c <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 8004152:	f000 f8b5 	bl	80042c0 <_ProcessFuncMainMenuStateEvents>
			break;
 8004156:	e021      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 8004158:	f000 f8d8 	bl	800430c <_ProcessFuncSignalMenuStateEvents>
			break;
 800415c:	e01e      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 800415e:	f000 f8f1 	bl	8004344 <_ProcessFuncAuxMenuStateEvents>
			break;
 8004162:	e01b      	b.n	800419c <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 8004164:	f000 f914 	bl	8004390 <_ProcessGainMainMenuStateEvents>
			break;
 8004168:	e018      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 800416a:	f000 f949 	bl	8004400 <_ProcessGainSignalMenuStateEvents>
			break;
 800416e:	e015      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 8004170:	f000 f990 	bl	8004494 <_ProcessGainAuxMenuStateEvents>
			break;
 8004174:	e012      	b.n	800419c <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 8004176:	f000 f9a9 	bl	80044cc <_ProcessFreqMainMenuStateEvents>
			break;
 800417a:	e00f      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 800417c:	f000 f9e4 	bl	8004548 <_ProcessFreqPresetMenuStateEvents>
			break;
 8004180:	e00c      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 8004182:	f000 f9fd 	bl	8004580 <_ProcessFreqAdjustMenuState>
			break;
 8004186:	e009      	b.n	800419c <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004188:	f000 fa16 	bl	80045b8 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 800418c:	e006      	b.n	800419c <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 800418e:	f000 fa2f 	bl	80045f0 <_ProcessFreqSweepMenuStateEvents>
			break;
 8004192:	e003      	b.n	800419c <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 8004194:	f000 fa76 	bl	8004684 <_ProcessBiasMainMenuEvents>
			break;
 8004198:	e000      	b.n	800419c <EM_ProcessEvent+0xb0>

		default:
			break;
 800419a:	bf00      	nop
	}

}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20001e56 	.word	0x20001e56

080041a4 <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <_ProcessIdleStateEvents+0x30>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 80041b0:	f000 ff2e 	bl	8005010 <ToplevelOutputMenuEntryHandler>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <_ProcessIdleStateEvents+0x34>)
 80041ba:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <_ProcessIdleStateEvents+0x30>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d105      	bne.n	80041d0 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 80041c4:	f000 ff48 	bl	8005058 <ToplevelInputMenuEntryHandler>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b02      	ldr	r3, [pc, #8]	; (80041d8 <_ProcessIdleStateEvents+0x34>)
 80041ce:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20001e57 	.word	0x20001e57
 80041d8:	20001e56 	.word	0x20001e56

080041dc <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80041e0:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d105      	bne.n	80041f4 <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 80041e8:	f000 ff24 	bl	8005034 <ToplevelOutputMenuExitHandler>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80041f2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d108      	bne.n	800420e <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80041fc:	2000      	movs	r0, #0
 80041fe:	f000 fef7 	bl	8004ff0 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 8004202:	f000 fce3 	bl	8004bcc <FuncMainMenuEntryHandler>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	4b16      	ldr	r3, [pc, #88]	; (8004264 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800420c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d108      	bne.n	8004228 <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004216:	2000      	movs	r0, #0
 8004218:	f000 feea 	bl	8004ff0 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 800421c:	f000 fbd0 	bl	80049c0 <FreqMainMenuEntryHandler>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004226:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d108      	bne.n	8004242 <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004230:	2000      	movs	r0, #0
 8004232:	f000 fedd 	bl	8004ff0 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 8004236:	f000 fdc1 	bl	8004dbc <GainMainMenuEntryHandler>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004240:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b04      	cmp	r3, #4
 8004248:	d108      	bne.n	800425c <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800424a:	2000      	movs	r0, #0
 800424c:	f000 fed0 	bl	8004ff0 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 8004250:	f7ff fed8 	bl	8004004 <BiasMenuEntryHandler>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	4b02      	ldr	r3, [pc, #8]	; (8004264 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800425a:	701a      	strb	r2, [r3, #0]
	}
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20001e57 	.word	0x20001e57
 8004264:	20001e56 	.word	0x20001e56

08004268 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b06      	cmp	r3, #6
 8004272:	d105      	bne.n	8004280 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 8004274:	f000 ff24 	bl	80050c0 <ToplevelInputMenuExitHandler>
 8004278:	4603      	mov	r3, r0
 800427a:	461a      	mov	r2, r3
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800427e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d108      	bne.n	800429a <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fef5 	bl	800507c <ToplevelInputMenuInputHandler>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004298:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800429a:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d108      	bne.n	80042b4 <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fee8 	bl	800507c <ToplevelInputMenuInputHandler>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b02      	ldr	r3, [pc, #8]	; (80042bc <_ProcessTopLevelInputMenuStateEvents+0x54>)
 80042b2:	701a      	strb	r2, [r3, #0]
	}
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20001e57 	.word	0x20001e57
 80042bc:	20001e56 	.word	0x20001e56

080042c0 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <_ProcessFuncMainMenuStateEvents+0x44>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d105      	bne.n	80042d8 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 80042cc:	f000 fc90 	bl	8004bf0 <FuncMainMenuExitHandler>
 80042d0:	4603      	mov	r3, r0
 80042d2:	461a      	mov	r2, r3
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <_ProcessFuncMainMenuStateEvents+0x48>)
 80042d6:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <_ProcessFuncMainMenuStateEvents+0x44>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 80042e0:	f000 fc9a 	bl	8004c18 <FuncSignalMenuEntryHandler>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <_ProcessFuncMainMenuStateEvents+0x48>)
 80042ea:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <_ProcessFuncMainMenuStateEvents+0x44>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d105      	bne.n	8004300 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 80042f4:	f000 fcd4 	bl	8004ca0 <FuncAuxMenuEntryHandler>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b02      	ldr	r3, [pc, #8]	; (8004308 <_ProcessFuncMainMenuStateEvents+0x48>)
 80042fe:	701a      	strb	r2, [r3, #0]
	}
}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20001e57 	.word	0x20001e57
 8004308:	20001e56 	.word	0x20001e56

0800430c <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <_ProcessFuncSignalMenuStateEvents+0x30>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b05      	cmp	r3, #5
 8004316:	d105      	bne.n	8004324 <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 8004318:	f000 fc9c 	bl	8004c54 <FuncSignalMenuInputHandler>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <_ProcessFuncSignalMenuStateEvents+0x34>)
 8004322:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <_ProcessFuncSignalMenuStateEvents+0x30>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d105      	bne.n	8004338 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 800432c:	f000 fca4 	bl	8004c78 <FuncSignalMenuExitHandler>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	4b02      	ldr	r3, [pc, #8]	; (8004340 <_ProcessFuncSignalMenuStateEvents+0x34>)
 8004336:	701a      	strb	r2, [r3, #0]
	}
}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20001e57 	.word	0x20001e57
 8004340:	20001e56 	.word	0x20001e56

08004344 <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <_ProcessFuncAuxMenuStateEvents+0x44>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b05      	cmp	r3, #5
 800434e:	d105      	bne.n	800435c <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 8004350:	f000 fcc6 	bl	8004ce0 <FuncAuxMenuInputHandler>
 8004354:	4603      	mov	r3, r0
 8004356:	461a      	mov	r2, r3
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <_ProcessFuncAuxMenuStateEvents+0x48>)
 800435a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <_ProcessFuncAuxMenuStateEvents+0x44>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b06      	cmp	r3, #6
 8004362:	d105      	bne.n	8004370 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 8004364:	f000 fd0a 	bl	8004d7c <FuncAuxMenuExitHandler>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <_ProcessFuncAuxMenuStateEvents+0x48>)
 800436e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <_ProcessFuncAuxMenuStateEvents+0x44>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d105      	bne.n	8004384 <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 8004378:	f000 fcee 	bl	8004d58 <FuncAuxToggleDutyMode>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	4b02      	ldr	r3, [pc, #8]	; (800438c <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004382:	701a      	strb	r2, [r3, #0]
	}

}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20001e57 	.word	0x20001e57
 800438c:	20001e56 	.word	0x20001e56

08004390 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <_ProcessGainMainMenuStateEvents+0x68>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d108      	bne.n	80043b0 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 800439e:	f000 fd1f 	bl	8004de0 <GainMainMenuExitHandler>
 80043a2:	4603      	mov	r3, r0
 80043a4:	461a      	mov	r2, r3
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <_ProcessGainMainMenuStateEvents+0x6c>)
 80043a8:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80043aa:	2002      	movs	r0, #2
 80043ac:	f000 fe20 	bl	8004ff0 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <_ProcessGainMainMenuStateEvents+0x68>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 80043b8:	f000 fd24 	bl	8004e04 <GainSignalMenuEntryHandler>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <_ProcessGainMainMenuStateEvents+0x6c>)
 80043c2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <_ProcessGainMainMenuStateEvents+0x68>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d110      	bne.n	80043ee <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80043cc:	2001      	movs	r0, #1
 80043ce:	f002 f951 	bl	8006674 <SM_GetOutputChannel>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d005      	beq.n	80043ee <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 80043e2:	f000 fda5 	bl	8004f30 <GainAuxMenuEntryHandler>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b04      	ldr	r3, [pc, #16]	; (80043fc <_ProcessGainMainMenuStateEvents+0x6c>)
 80043ec:	701a      	strb	r2, [r3, #0]
	}
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20001e57 	.word	0x20001e57
 80043fc:	20001e56 	.word	0x20001e56

08004400 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004404:	4b21      	ldr	r3, [pc, #132]	; (800448c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d106      	bne.n	800441a <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 800440c:	2005      	movs	r0, #5
 800440e:	f000 fd2b 	bl	8004e68 <GainSignalMenuInputHandler>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004418:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <_ProcessGainSignalMenuStateEvents+0x8c>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b06      	cmp	r3, #6
 8004420:	d105      	bne.n	800442e <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 8004422:	f000 fd73 	bl	8004f0c <GainSignalMenuExitHandler>
 8004426:	4603      	mov	r3, r0
 8004428:	461a      	mov	r2, r3
 800442a:	4b19      	ldr	r3, [pc, #100]	; (8004490 <_ProcessGainSignalMenuStateEvents+0x90>)
 800442c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d106      	bne.n	8004444 <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 8004436:	2001      	movs	r0, #1
 8004438:	f000 fd16 	bl	8004e68 <GainSignalMenuInputHandler>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	4b13      	ldr	r3, [pc, #76]	; (8004490 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004442:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d106      	bne.n	800445a <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 800444c:	2002      	movs	r0, #2
 800444e:	f000 fd0b 	bl	8004e68 <GainSignalMenuInputHandler>
 8004452:	4603      	mov	r3, r0
 8004454:	461a      	mov	r2, r3
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004458:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <_ProcessGainSignalMenuStateEvents+0x8c>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d106      	bne.n	8004470 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 8004462:	2003      	movs	r0, #3
 8004464:	f000 fd00 	bl	8004e68 <GainSignalMenuInputHandler>
 8004468:	4603      	mov	r3, r0
 800446a:	461a      	mov	r2, r3
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <_ProcessGainSignalMenuStateEvents+0x90>)
 800446e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d106      	bne.n	8004486 <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004478:	2004      	movs	r0, #4
 800447a:	f000 fcf5 	bl	8004e68 <GainSignalMenuInputHandler>
 800447e:	4603      	mov	r3, r0
 8004480:	461a      	mov	r2, r3
 8004482:	4b03      	ldr	r3, [pc, #12]	; (8004490 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004484:	701a      	strb	r2, [r3, #0]
	}

}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20001e57 	.word	0x20001e57
 8004490:	20001e56 	.word	0x20001e56

08004494 <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <_ProcessGainAuxMenuStateEvents+0x30>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d105      	bne.n	80044ac <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 80044a0:	f000 fd76 	bl	8004f90 <GainAuxMenuInputHandler>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <_ProcessGainAuxMenuStateEvents+0x34>)
 80044aa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_ProcessGainAuxMenuStateEvents+0x30>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d105      	bne.n	80044c0 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 80044b4:	f000 fd7e 	bl	8004fb4 <GainAuxMenuExitHandler>
 80044b8:	4603      	mov	r3, r0
 80044ba:	461a      	mov	r2, r3
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <_ProcessGainAuxMenuStateEvents+0x34>)
 80044be:	701a      	strb	r2, [r3, #0]
	}
}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20001e57 	.word	0x20001e57
 80044c8:	20001e56 	.word	0x20001e56

080044cc <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80044d0:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <_ProcessFreqMainMenuStateEvents+0x74>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d108      	bne.n	80044ea <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 80044d8:	f000 fa84 	bl	80049e4 <FreqMainMenuExitHandler>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <_ProcessFreqMainMenuStateEvents+0x78>)
 80044e2:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80044e4:	2002      	movs	r0, #2
 80044e6:	f000 fd83 	bl	8004ff0 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <_ProcessFreqMainMenuStateEvents+0x74>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 80044f2:	f000 fa8f 	bl	8004a14 <FreqPresetMenuEntryHandler>
 80044f6:	4603      	mov	r3, r0
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <_ProcessFreqMainMenuStateEvents+0x78>)
 80044fc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d105      	bne.n	8004512 <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 8004506:	f000 fad5 	bl	8004ab4 <FreqAdjustMenuEntryHandler>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004510:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d105      	bne.n	8004526 <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 800451a:	f000 f905 	bl	8004728 <FreqSweepMenuEntryHandler>
 800451e:	4603      	mov	r3, r0
 8004520:	461a      	mov	r2, r3
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004524:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b04      	cmp	r3, #4
 800452c:	d105      	bne.n	800453a <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 800452e:	f000 fafb 	bl	8004b28 <FreqPrescalerMenuEntryHandler>
 8004532:	4603      	mov	r3, r0
 8004534:	461a      	mov	r2, r3
 8004536:	4b03      	ldr	r3, [pc, #12]	; (8004544 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004538:	701a      	strb	r2, [r3, #0]
	}
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20001e57 	.word	0x20001e57
 8004544:	20001e56 	.word	0x20001e56

08004548 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <_ProcessFreqPresetMenuStateEvents+0x30>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b05      	cmp	r3, #5
 8004552:	d105      	bne.n	8004560 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 8004554:	f000 fa8a 	bl	8004a6c <FreqPresetMenuInputHandler>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	4b07      	ldr	r3, [pc, #28]	; (800457c <_ProcessFreqPresetMenuStateEvents+0x34>)
 800455e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <_ProcessFreqPresetMenuStateEvents+0x30>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b06      	cmp	r3, #6
 8004566:	d105      	bne.n	8004574 <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 8004568:	f000 fa92 	bl	8004a90 <FreqPresetMenuExitHandler>
 800456c:	4603      	mov	r3, r0
 800456e:	461a      	mov	r2, r3
 8004570:	4b02      	ldr	r3, [pc, #8]	; (800457c <_ProcessFreqPresetMenuStateEvents+0x34>)
 8004572:	701a      	strb	r2, [r3, #0]
	}
}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20001e57 	.word	0x20001e57
 800457c:	20001e56 	.word	0x20001e56

08004580 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <_ProcessFreqAdjustMenuState+0x30>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d105      	bne.n	8004598 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 800458c:	f000 faae 	bl	8004aec <FreqAdjustMenuInputHandler>
 8004590:	4603      	mov	r3, r0
 8004592:	461a      	mov	r2, r3
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <_ProcessFreqAdjustMenuState+0x34>)
 8004596:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <_ProcessFreqAdjustMenuState+0x30>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d105      	bne.n	80045ac <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 80045a0:	f000 fab0 	bl	8004b04 <FreqAdjustMenuExitHandler>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4b02      	ldr	r3, [pc, #8]	; (80045b4 <_ProcessFreqAdjustMenuState+0x34>)
 80045aa:	701a      	strb	r2, [r3, #0]
	}
}
 80045ac:	bf00      	nop
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20001e57 	.word	0x20001e57
 80045b4:	20001e56 	.word	0x20001e56

080045b8 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b05      	cmp	r3, #5
 80045c2:	d105      	bne.n	80045d0 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 80045c4:	f000 facc 	bl	8004b60 <FreqPrescalerMenuInputHandler>
 80045c8:	4603      	mov	r3, r0
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b07      	ldr	r3, [pc, #28]	; (80045ec <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 80045ce:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b06      	cmp	r3, #6
 80045d6:	d105      	bne.n	80045e4 <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 80045d8:	f000 face 	bl	8004b78 <FreqPrescalerMenuExitHandler>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 80045e2:	701a      	strb	r2, [r3, #0]
	}
}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20001e57 	.word	0x20001e57
 80045ec:	20001e56 	.word	0x20001e56

080045f0 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 80045fc:	2007      	movs	r0, #7
 80045fe:	f000 f8e9 	bl	80047d4 <FreqSweepMenuInputHandler>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004608:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800460a:	4b1c      	ldr	r3, [pc, #112]	; (800467c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d106      	bne.n	8004620 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8004612:	2008      	movs	r0, #8
 8004614:	f000 f8de 	bl	80047d4 <FreqSweepMenuInputHandler>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	4b18      	ldr	r3, [pc, #96]	; (8004680 <_ProcessFreqSweepMenuStateEvents+0x90>)
 800461e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d106      	bne.n	8004636 <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004628:	2009      	movs	r0, #9
 800462a:	f000 f8d3 	bl	80047d4 <FreqSweepMenuInputHandler>
 800462e:	4603      	mov	r3, r0
 8004630:	461a      	mov	r2, r3
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004634:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004636:	4b11      	ldr	r3, [pc, #68]	; (800467c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d106      	bne.n	800464c <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 800463e:	200a      	movs	r0, #10
 8004640:	f000 f8c8 	bl	80047d4 <FreqSweepMenuInputHandler>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <_ProcessFreqSweepMenuStateEvents+0x90>)
 800464a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b05      	cmp	r3, #5
 8004652:	d106      	bne.n	8004662 <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8004654:	200b      	movs	r0, #11
 8004656:	f000 f8bd 	bl	80047d4 <FreqSweepMenuInputHandler>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004660:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b06      	cmp	r3, #6
 8004668:	d105      	bne.n	8004676 <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 800466a:	f000 f989 	bl	8004980 <FreqSweepMenuExitHandler>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	4b03      	ldr	r3, [pc, #12]	; (8004680 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004674:	701a      	strb	r2, [r3, #0]
	}

}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20001e57 	.word	0x20001e57
 8004680:	20001e56 	.word	0x20001e56

08004684 <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004688:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <_ProcessBiasMainMenuEvents+0x7c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d106      	bne.n	800469e <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004690:	2005      	movs	r0, #5
 8004692:	f7ff fcd5 	bl	8004040 <BiasMenuInputHandler>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <_ProcessBiasMainMenuEvents+0x80>)
 800469c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <_ProcessBiasMainMenuEvents+0x7c>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d108      	bne.n	80046b8 <_ProcessBiasMainMenuEvents+0x34>
	{
		eNextState = BiasMenuExitHandler();
 80046a6:	f7ff fd0f 	bl	80040c8 <BiasMenuExitHandler>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <_ProcessBiasMainMenuEvents+0x80>)
 80046b0:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80046b2:	2002      	movs	r0, #2
 80046b4:	f000 fc9c 	bl	8004ff0 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 80046b8:	4b11      	ldr	r3, [pc, #68]	; (8004700 <_ProcessBiasMainMenuEvents+0x7c>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <_ProcessBiasMainMenuEvents+0x4a>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 80046c0:	2001      	movs	r0, #1
 80046c2:	f7ff fcbd 	bl	8004040 <BiasMenuInputHandler>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <_ProcessBiasMainMenuEvents+0x80>)
 80046cc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <_ProcessBiasMainMenuEvents+0x7c>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d106      	bne.n	80046e4 <_ProcessBiasMainMenuEvents+0x60>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 80046d6:	2002      	movs	r0, #2
 80046d8:	f7ff fcb2 	bl	8004040 <BiasMenuInputHandler>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <_ProcessBiasMainMenuEvents+0x80>)
 80046e2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <_ProcessBiasMainMenuEvents+0x7c>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d106      	bne.n	80046fa <_ProcessBiasMainMenuEvents+0x76>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 80046ec:	2003      	movs	r0, #3
 80046ee:	f7ff fca7 	bl	8004040 <BiasMenuInputHandler>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b03      	ldr	r3, [pc, #12]	; (8004704 <_ProcessBiasMainMenuEvents+0x80>)
 80046f8:	701a      	strb	r2, [r3, #0]
	}
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20001e57 	.word	0x20001e57
 8004704:	20001e56 	.word	0x20001e56

08004708 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004712:	4a04      	ldr	r2, [pc, #16]	; (8004724 <EM_SetNewEvent+0x1c>)
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	7013      	strb	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	20001e57 	.word	0x20001e57

08004728 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 800472c:	f7fc fee2 	bl	80014f4 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <FreqSweepMenuEntryHandler+0x98>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	eeb4 7a67 	vcmp.f32	s14, s15
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	d009      	beq.n	8004762 <FreqSweepMenuEntryHandler+0x3a>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 800474e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <FreqSweepMenuEntryHandler+0x98>)
 800475e:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004762:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <FreqSweepMenuEntryHandler+0x98>)
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800476c:	eef4 7a47 	vcmp.f32	s15, s14
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	d101      	bne.n	800477a <FreqSweepMenuEntryHandler+0x52>
	{
		FS_SetSweepModeDown();
 8004776:	f001 f893 	bl	80058a0 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 800477a:	2000      	movs	r0, #0
 800477c:	f001 f8e6 	bl	800594c <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004780:	2000      	movs	r0, #0
 8004782:	f001 f941 	bl	8005a08 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004786:	f001 f97b 	bl	8005a80 <FS_GetCalculatedSweepFrequencyInHertz>
 800478a:	eef0 7a40 	vmov.f32	s15, s0
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <FreqSweepMenuEntryHandler+0x9c>)
 8004790:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <FreqSweepMenuEntryHandler+0xa0>)
 8004796:	2200      	movs	r2, #0
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800479a:	2009      	movs	r0, #9
 800479c:	f000 f81a 	bl	80047d4 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <FreqSweepMenuEntryHandler+0xa0>)
 80047a2:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 80047a8:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <FreqSweepMenuEntryHandler+0xa0>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <FreqSweepMenuEntryHandler+0xa4>)
 80047b0:	2204      	movs	r2, #4
 80047b2:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <FreqSweepMenuEntryHandler+0xa8>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80047ba:	230d      	movs	r3, #13
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000124 	.word	0x20000124
 80047c4:	2000226c 	.word	0x2000226c
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	20001e5a 	.word	0x20001e5a
 80047d0:	20001e57 	.word	0x20001e57

080047d4 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	3b07      	subs	r3, #7
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	f200 80b2 	bhi.w	800494c <FreqSweepMenuInputHandler+0x178>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <FreqSweepMenuInputHandler+0x1c>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004805 	.word	0x08004805
 80047f4:	0800481f 	.word	0x0800481f
 80047f8:	0800493d 	.word	0x0800493d
 80047fc:	08004945 	.word	0x08004945
 8004800:	08004859 	.word	0x08004859
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004804:	4b56      	ldr	r3, [pc, #344]	; (8004960 <FreqSweepMenuInputHandler+0x18c>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a55      	ldr	r2, [pc, #340]	; (8004960 <FreqSweepMenuInputHandler+0x18c>)
 800480a:	f083 0301 	eor.w	r3, r3, #1
 800480e:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <FreqSweepMenuInputHandler+0x18c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <FreqSweepMenuInputHandler+0x18c>)
 8004816:	f083 0301 	eor.w	r3, r3, #1
 800481a:	6013      	str	r3, [r2, #0]
			break;
 800481c:	e097      	b.n	800494e <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 800481e:	4b51      	ldr	r3, [pc, #324]	; (8004964 <FreqSweepMenuInputHandler+0x190>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	f083 0301 	eor.w	r3, r3, #1
 8004826:	b2da      	uxtb	r2, r3
 8004828:	4b4e      	ldr	r3, [pc, #312]	; (8004964 <FreqSweepMenuInputHandler+0x190>)
 800482a:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 800482c:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <FreqSweepMenuInputHandler+0x190>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d004      	beq.n	800483e <FreqSweepMenuInputHandler+0x6a>
 8004834:	2b02      	cmp	r3, #2
 8004836:	d008      	beq.n	800484a <FreqSweepMenuInputHandler+0x76>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <FreqSweepMenuInputHandler+0x70>
 800483c:	e006      	b.n	800484c <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 800483e:	f001 f82f 	bl	80058a0 <FS_SetSweepModeDown>
					break;
 8004842:	e003      	b.n	800484c <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004844:	f001 f85a 	bl	80058fc <FS_SetSweepModeUp>
					break;
 8004848:	e000      	b.n	800484c <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 800484a:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 800484c:	4b46      	ldr	r3, [pc, #280]	; (8004968 <FreqSweepMenuInputHandler+0x194>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f87b 	bl	800594c <FS_SetEncoderControlMode>

			break;
 8004856:	e07a      	b.n	800494e <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004858:	4b43      	ldr	r3, [pc, #268]	; (8004968 <FreqSweepMenuInputHandler+0x194>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <FreqSweepMenuInputHandler+0x92>
 8004860:	2b01      	cmp	r3, #1
 8004862:	d00b      	beq.n	800487c <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004864:	e073      	b.n	800494e <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004866:	2000      	movs	r0, #0
 8004868:	f001 f8ce 	bl	8005a08 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 800486c:	f001 f908 	bl	8005a80 <FS_GetCalculatedSweepFrequencyInHertz>
 8004870:	eef0 7a40 	vmov.f32	s15, s0
 8004874:	4b3d      	ldr	r3, [pc, #244]	; (800496c <FreqSweepMenuInputHandler+0x198>)
 8004876:	edc3 7a00 	vstr	s15, [r3]
					break;
 800487a:	e05e      	b.n	800493a <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 800487c:	4b39      	ldr	r3, [pc, #228]	; (8004964 <FreqSweepMenuInputHandler+0x190>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <FreqSweepMenuInputHandler+0xb6>
 8004884:	2b01      	cmp	r3, #1
 8004886:	d02a      	beq.n	80048de <FreqSweepMenuInputHandler+0x10a>
							break;
 8004888:	e056      	b.n	8004938 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 800488a:	4b39      	ldr	r3, [pc, #228]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d803      	bhi.n	800489a <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004892:	4b37      	ldr	r3, [pc, #220]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 8004894:	220d      	movs	r2, #13
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004898:	e04e      	b.n	8004938 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800489a:	4b35      	ldr	r3, [pc, #212]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <FreqSweepMenuInputHandler+0x1a0>)
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b4:	dd09      	ble.n	80048ca <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 80048b6:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <FreqSweepMenuInputHandler+0x1a0>)
 80048b8:	edd3 7a00 	vldr	s15, [r3]
 80048bc:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 80048be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c2:	ee17 2a90 	vmov	r2, s15
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80048c8:	e036      	b.n	8004938 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80048ca:	4b29      	ldr	r3, [pc, #164]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	4b28      	ldr	r3, [pc, #160]	; (8004978 <FreqSweepMenuInputHandler+0x1a4>)
 80048d8:	edc3 7a00 	vstr	s15, [r3]
							break;
 80048dc:	e02c      	b.n	8004938 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d904      	bls.n	80048f4 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80048ea:	4b21      	ldr	r3, [pc, #132]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 80048ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80048f2:	e020      	b.n	8004936 <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80048f4:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <FreqSweepMenuInputHandler+0x1a4>)
 8004902:	edd3 7a00 	vldr	s15, [r3]
 8004906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d509      	bpl.n	8004924 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <FreqSweepMenuInputHandler+0x1a4>)
 8004912:	edd3 7a00 	vldr	s15, [r3]
 8004916:	4b16      	ldr	r3, [pc, #88]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 8004918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491c:	ee17 2a90 	vmov	r2, s15
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004922:	e008      	b.n	8004936 <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <FreqSweepMenuInputHandler+0x19c>)
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <FreqSweepMenuInputHandler+0x1a0>)
 8004932:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004936:	bf00      	nop
					break;
 8004938:	bf00      	nop
			break;
 800493a:	e008      	b.n	800494e <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 800493c:	2000      	movs	r0, #0
 800493e:	f001 f805 	bl	800594c <FS_SetEncoderControlMode>

			break;
 8004942:	e004      	b.n	800494e <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004944:	2001      	movs	r0, #1
 8004946:	f001 f801 	bl	800594c <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 800494a:	e000      	b.n	800494e <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 800494c:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <FreqSweepMenuInputHandler+0x1a8>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004954:	230d      	movs	r3, #13
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40000c00 	.word	0x40000c00
 8004964:	20001e58 	.word	0x20001e58
 8004968:	20001e59 	.word	0x20001e59
 800496c:	2000226c 	.word	0x2000226c
 8004970:	40012c00 	.word	0x40012c00
 8004974:	20000124 	.word	0x20000124
 8004978:	20000120 	.word	0x20000120
 800497c:	20001e57 	.word	0x20001e57

08004980 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004984:	f7fc fdb6 	bl	80014f4 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <FreqSweepMenuExitHandler+0x34>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <FreqSweepMenuExitHandler+0x34>)
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <FreqSweepMenuExitHandler+0x34>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <FreqSweepMenuExitHandler+0x34>)
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <FreqSweepMenuExitHandler+0x38>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <FreqSweepMenuExitHandler+0x3c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80049ac:	230a      	movs	r3, #10
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	20001e5a 	.word	0x20001e5a
 80049bc:	20001e57 	.word	0x20001e57

080049c0 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049c4:	f7fc fd96 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <FreqMainMenuEntryHandler+0x1c>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <FreqMainMenuEntryHandler+0x20>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80049d4:	230a      	movs	r3, #10
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20001e5a 	.word	0x20001e5a
 80049e0:	20001e57 	.word	0x20001e57

080049e4 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <FreqMainMenuExitHandler+0x24>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <FreqMainMenuExitHandler+0x28>)
 80049f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049f4:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80049f6:	f7fc fd7d 	bl	80014f4 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <FreqMainMenuExitHandler+0x2c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004a00:	2301      	movs	r3, #1
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20001e5a 	.word	0x20001e5a
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	20001e57 	.word	0x20001e57

08004a14 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a1a:	f7fc fd6b 	bl	80014f4 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004a1e:	f000 ff33 	bl	8005888 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <FreqPresetMenuEntryHandler+0x48>)
 8004a24:	2202      	movs	r2, #2
 8004a26:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004a28:	f000 fee0 	bl	80057ec <FreqO_GetFPresetObject>
 8004a2c:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <FreqPresetMenuEntryHandler+0x4c>)
 8004a36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004a3c:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <FreqPresetMenuEntryHandler+0x4c>)
 8004a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a44:	e002      	b.n	8004a4c <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004a46:	4807      	ldr	r0, [pc, #28]	; (8004a64 <FreqPresetMenuEntryHandler+0x50>)
 8004a48:	f7fc fd9a 	bl	8001580 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <FreqPresetMenuEntryHandler+0x54>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004a52:	230b      	movs	r3, #11
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20001e5a 	.word	0x20001e5a
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	08014b58 	.word	0x08014b58
 8004a68:	20001e57 	.word	0x20001e57

08004a6c <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004a70:	2000      	movs	r0, #0
 8004a72:	f002 f87b 	bl	8006b6c <SM_GetEncoderValue>
 8004a76:	4603      	mov	r3, r0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fd93 	bl	80055a4 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004a7e:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <FreqPresetMenuInputHandler+0x20>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004a84:	230b      	movs	r3, #11
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20001e57 	.word	0x20001e57

08004a90 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a94:	f7fc fd2e 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a98:	4b04      	ldr	r3, [pc, #16]	; (8004aac <FreqPresetMenuExitHandler+0x1c>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004a9e:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <FreqPresetMenuExitHandler+0x20>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004aa4:	230a      	movs	r3, #10
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20001e5a 	.word	0x20001e5a
 8004ab0:	20001e57 	.word	0x20001e57

08004ab4 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ab8:	f7fc fd1c 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <FreqAdjustMenuEntryHandler+0x2c>)
 8004abe:	2203      	movs	r2, #3
 8004ac0:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <FreqAdjustMenuEntryHandler+0x30>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <FreqAdjustMenuEntryHandler+0x30>)
 8004ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <FreqAdjustMenuEntryHandler+0x34>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004ada:	230c      	movs	r3, #12
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20001e5a 	.word	0x20001e5a
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	20001e57 	.word	0x20001e57

08004aec <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004af0:	f000 fe28 	bl	8005744 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004af4:	4b02      	ldr	r3, [pc, #8]	; (8004b00 <FreqAdjustMenuInputHandler+0x14>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004afa:	230c      	movs	r3, #12
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20001e57 	.word	0x20001e57

08004b04 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b08:	f7fc fcf4 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <FreqAdjustMenuExitHandler+0x1c>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b12:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <FreqAdjustMenuExitHandler+0x20>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004b18:	230a      	movs	r3, #10
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20001e5a 	.word	0x20001e5a
 8004b24:	20001e57 	.word	0x20001e57

08004b28 <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b2c:	f7fc fce2 	bl	80014f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESCALER_MENU;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004b32:	2205      	movs	r2, #5
 8004b34:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <FreqPrescalerMenuEntryHandler+0x30>)
 8004b38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <FreqPrescalerMenuEntryHandler+0x30>)
 8004b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <FreqPrescalerMenuEntryHandler+0x34>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004b4c:	230e      	movs	r3, #14
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20001e5a 	.word	0x20001e5a
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	20001e57 	.word	0x20001e57

08004b60 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004b64:	f000 fe1a 	bl	800579c <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <FreqPrescalerMenuInputHandler+0x14>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004b6e:	230e      	movs	r3, #14
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20001e57 	.word	0x20001e57

08004b78 <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b7c:	f7fc fcba 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <FreqPrescalerMenuExitHandler+0x1c>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <FreqPrescalerMenuExitHandler+0x20>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004b8c:	230a      	movs	r3, #10
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20001e5a 	.word	0x20001e5a
 8004b98:	20001e57 	.word	0x20001e57

08004b9c <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <FreqMenu_getStatus+0x14>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20001e5a 	.word	0x20001e5a

08004bb4 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <FuncMenu_getStatus+0x14>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20001e5b 	.word	0x20001e5b

08004bcc <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bd0:	f7fc fc90 	bl	80014f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <FuncMainMenuEntryHandler+0x1c>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004bda:	4b04      	ldr	r3, [pc, #16]	; (8004bec <FuncMainMenuEntryHandler+0x20>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004be0:	2303      	movs	r3, #3
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20001e5b 	.word	0x20001e5b
 8004bec:	20001e57 	.word	0x20001e57

08004bf0 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <FuncMainMenuExitHandler+0x20>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004bfa:	2002      	movs	r0, #2
 8004bfc:	f000 f9f8 	bl	8004ff0 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8004c00:	f7fc fc78 	bl	80014f4 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <FuncMainMenuExitHandler+0x24>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004c0a:	2301      	movs	r3, #1
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20001e5b 	.word	0x20001e5b
 8004c14:	20001e57 	.word	0x20001e57

08004c18 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c1c:	f7fc fc6a 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004c20:	f000 ff5c 	bl	8005adc <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004c24:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <FuncSignalMenuEntryHandler+0x30>)
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <FuncSignalMenuEntryHandler+0x34>)
 8004c2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <FuncSignalMenuEntryHandler+0x34>)
 8004c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c38:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <FuncSignalMenuEntryHandler+0x38>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004c40:	2304      	movs	r3, #4
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20001e5b 	.word	0x20001e5b
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	20001e57 	.word	0x20001e57

08004c54 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f001 ff87 	bl	8006b6c <SM_GetEncoderValue>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 ff47 	bl	8005af4 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 8004c66:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <FuncSignalMenuInputHandler+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004c6c:	2304      	movs	r3, #4
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20001e57 	.word	0x20001e57

08004c78 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <FuncSignalMenuExitHandler+0x20>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004c82:	f7fc fc37 	bl	80014f4 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004c86:	f002 f815 	bl	8006cb4 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <FuncSignalMenuExitHandler+0x24>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004c90:	2303      	movs	r3, #3
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20001e5b 	.word	0x20001e5b
 8004c9c:	20001e57 	.word	0x20001e57

08004ca0 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ca4:	f7fc fc26 	bl	80014f4 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004ca8:	f000 ff18 	bl	8005adc <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <FuncAuxMenuEntryHandler+0x30>)
 8004cae:	2203      	movs	r2, #3
 8004cb0:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004cb2:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <FuncAuxMenuEntryHandler+0x34>)
 8004cb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <FuncAuxMenuEntryHandler+0x34>)
 8004cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cc0:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <FuncAuxMenuEntryHandler+0x38>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004cc8:	2305      	movs	r3, #5
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20001e5b 	.word	0x20001e5b
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	20001e57 	.word	0x20001e57
 8004cdc:	00000000 	.word	0x00000000

08004ce0 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004ce6:	f001 ffc9 	bl	8006c7c <SM_IsFuncPwmDutyMode>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01a      	beq.n	8004d26 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f001 ff3b 	bl	8006b6c <SM_GetEncoderValue>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fb fc29 	bl	8000554 <__aeabi_ui2d>
 8004d02:	4603      	mov	r3, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004d48 <FuncAuxMenuInputHandler+0x68>
 8004d0a:	ec44 3b10 	vmov	d0, r3, r4
 8004d0e:	f00e f9f7 	bl	8013100 <pow>
 8004d12:	ec53 2b10 	vmov	r2, r3, d0
 8004d16:	4c0e      	ldr	r4, [pc, #56]	; (8004d50 <FuncAuxMenuInputHandler+0x70>)
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f7fb ff6c 	bl	8000bf8 <__aeabi_d2uiz>
 8004d20:	4603      	mov	r3, r0
 8004d22:	6363      	str	r3, [r4, #52]	; 0x34
 8004d24:	e006      	b.n	8004d34 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004d26:	2000      	movs	r0, #0
 8004d28:	f001 ff20 	bl	8006b6c <SM_GetEncoderValue>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 ff1a 	bl	8005b68 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <FuncAuxMenuInputHandler+0x74>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004d3a:	2305      	movs	r3, #5
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd90      	pop	{r4, r7, pc}
 8004d44:	f3af 8000 	nop.w
 8004d48:	00000000 	.word	0x00000000
 8004d4c:	40000000 	.word	0x40000000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	20001e57 	.word	0x20001e57

08004d58 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004d5c:	f001 ff9a 	bl	8006c94 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <FuncAuxToggleDutyMode+0x1c>)
 8004d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <FuncAuxToggleDutyMode+0x20>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004d6e:	2305      	movs	r3, #5
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	20001e57 	.word	0x20001e57

08004d7c <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <FuncAuxMenuExitHandler+0x20>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004d86:	f001 ff95 	bl	8006cb4 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004d8a:	f7fc fbb3 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <FuncAuxMenuExitHandler+0x24>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004d94:	2303      	movs	r3, #3
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20001e5b 	.word	0x20001e5b
 8004da0:	20001e57 	.word	0x20001e57

08004da4 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <GainMenu_getStatus+0x14>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20001e5c 	.word	0x20001e5c

08004dbc <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004dc0:	f7fc fb98 	bl	80014f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <GainMainMenuEntryHandler+0x1c>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004dca:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <GainMainMenuEntryHandler+0x20>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004dd0:	2306      	movs	r3, #6
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20001e5c 	.word	0x20001e5c
 8004ddc:	20001e57 	.word	0x20001e57

08004de0 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <GainMainMenuExitHandler+0x1c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004dea:	f7fc fb83 	bl	80014f4 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <GainMainMenuExitHandler+0x20>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004df4:	2301      	movs	r3, #1
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20001e5c 	.word	0x20001e5c
 8004e00:	20001e57 	.word	0x20001e57

08004e04 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e0a:	f7fc fb73 	bl	80014f4 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004e0e:	f001 f8a3 	bl	8005f58 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004e12:	f001 ff5b 	bl	8006ccc <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <GainSignalMenuEntryHandler+0x54>)
 8004e18:	2202      	movs	r2, #2
 8004e1a:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f001 fc29 	bl	8006674 <SM_GetOutputChannel>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004e28:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <GainSignalMenuEntryHandler+0x58>)
 8004e32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <GainSignalMenuEntryHandler+0x58>)
 8004e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e40:	e002      	b.n	8004e48 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004e42:	4807      	ldr	r0, [pc, #28]	; (8004e60 <GainSignalMenuEntryHandler+0x5c>)
 8004e44:	f7fc fb9c 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <GainSignalMenuEntryHandler+0x60>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004e4e:	2307      	movs	r3, #7
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20001e5c 	.word	0x20001e5c
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	08014b94 	.word	0x08014b94
 8004e64:	20001e57 	.word	0x20001e57

08004e68 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004e72:	2000      	movs	r0, #0
 8004e74:	f001 fbfe 	bl	8006674 <SM_GetOutputChannel>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004e7e:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d834      	bhi.n	8004ef2 <GainSignalMenuInputHandler+0x8a>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <GainSignalMenuInputHandler+0x28>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ed3 	.word	0x08004ed3
 8004e94:	08004edb 	.word	0x08004edb
 8004e98:	08004ee3 	.word	0x08004ee3
 8004e9c:	08004eeb 	.word	0x08004eeb
 8004ea0:	08004ea5 	.word	0x08004ea5
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d025      	beq.n	8004ef6 <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d107      	bne.n	8004ec2 <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f001 fe5a 	bl	8006b6c <SM_GetEncoderValue>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 f858 	bl	8005f70 <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8004ec0:	e019      	b.n	8004ef6 <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f001 fe52 	bl	8006b6c <SM_GetEncoderValue>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 f870 	bl	8006fb0 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8004ed0:	e011      	b.n	8004ef6 <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8004ed2:	2011      	movs	r0, #17
 8004ed4:	f001 ff06 	bl	8006ce4 <VPP_ApplyProfileToSignal>
			break;
 8004ed8:	e00e      	b.n	8004ef8 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 8004eda:	2020      	movs	r0, #32
 8004edc:	f001 ff02 	bl	8006ce4 <VPP_ApplyProfileToSignal>
			break;
 8004ee0:	e00a      	b.n	8004ef8 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8004ee2:	2031      	movs	r0, #49	; 0x31
 8004ee4:	f001 fefe 	bl	8006ce4 <VPP_ApplyProfileToSignal>
			break;
 8004ee8:	e006      	b.n	8004ef8 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 8004eea:	2059      	movs	r0, #89	; 0x59
 8004eec:	f001 fefa 	bl	8006ce4 <VPP_ApplyProfileToSignal>
			break;
 8004ef0:	e002      	b.n	8004ef8 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <GainSignalMenuInputHandler+0x90>
			break;
 8004ef6:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <GainSignalMenuInputHandler+0xa0>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004efe:	2307      	movs	r3, #7
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20001e57 	.word	0x20001e57

08004f0c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <GainSignalMenuExitHandler+0x1c>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004f16:	f7fc faed 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <GainSignalMenuExitHandler+0x20>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004f20:	2306      	movs	r3, #6
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20001e5c 	.word	0x20001e5c
 8004f2c:	20001e57 	.word	0x20001e57

08004f30 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f36:	f7fc fadd 	bl	80014f4 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004f3a:	f001 fec7 	bl	8006ccc <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <GainAuxMenuEntryHandler+0x50>)
 8004f40:	2203      	movs	r2, #3
 8004f42:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004f44:	2001      	movs	r0, #1
 8004f46:	f001 fb95 	bl	8006674 <SM_GetOutputChannel>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004f50:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <GainAuxMenuEntryHandler+0x54>)
 8004f5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <GainAuxMenuEntryHandler+0x54>)
 8004f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f68:	e002      	b.n	8004f70 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004f6a:	4807      	ldr	r0, [pc, #28]	; (8004f88 <GainAuxMenuEntryHandler+0x58>)
 8004f6c:	f7fc fb08 	bl	8001580 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <GainAuxMenuEntryHandler+0x5c>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004f76:	2308      	movs	r3, #8
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20001e5c 	.word	0x20001e5c
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	08014b94 	.word	0x08014b94
 8004f8c:	20001e57 	.word	0x20001e57

08004f90 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f94:	2000      	movs	r0, #0
 8004f96:	f001 fde9 	bl	8006b6c <SM_GetEncoderValue>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f002 f841 	bl	8007024 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004fa2:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <GainAuxMenuInputHandler+0x20>)
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004fa8:	2308      	movs	r3, #8
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20001e57 	.word	0x20001e57

08004fb4 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <GainAuxMenuExitHandler+0x1c>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004fbe:	f7fc fa99 	bl	80014f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <GainAuxMenuExitHandler+0x20>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004fc8:	2306      	movs	r3, #6
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20001e5c 	.word	0x20001e5c
 8004fd4:	20001e57 	.word	0x20001e57

08004fd8 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <ToplevelMenu_getStatus+0x14>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000000 	.word	0x20000000

08004ff0 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004ffa:	4a04      	ldr	r2, [pc, #16]	; (800500c <ToplevelMenu_setStatus+0x1c>)
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	7013      	strb	r3, [r2, #0]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000000 	.word	0x20000000

08005010 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005014:	f7fc fa6e 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <ToplevelOutputMenuEntryHandler+0x1c>)
 800501a:	2202      	movs	r2, #2
 800501c:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 800501e:	4b04      	ldr	r3, [pc, #16]	; (8005030 <ToplevelOutputMenuEntryHandler+0x20>)
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8005024:	2301      	movs	r3, #1
}
 8005026:	4618      	mov	r0, r3
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000000 	.word	0x20000000
 8005030:	20001e57 	.word	0x20001e57

08005034 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005038:	f7fc fa5c 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <ToplevelOutputMenuExitHandler+0x1c>)
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <ToplevelOutputMenuExitHandler+0x20>)
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000000 	.word	0x20000000
 8005054:	20001e57 	.word	0x20001e57

08005058 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800505c:	f7fc fa4a 	bl	80014f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <ToplevelInputMenuEntryHandler+0x1c>)
 8005062:	2203      	movs	r2, #3
 8005064:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8005066:	4b04      	ldr	r3, [pc, #16]	; (8005078 <ToplevelInputMenuEntryHandler+0x20>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 800506c:	2302      	movs	r3, #2
}
 800506e:	4618      	mov	r0, r3
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000000 	.word	0x20000000
 8005078:	20001e57 	.word	0x20001e57

0800507c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d002      	beq.n	8005092 <ToplevelInputMenuInputHandler+0x16>
 800508c:	2b02      	cmp	r3, #2
 800508e:	d003      	beq.n	8005098 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005090:	e00b      	b.n	80050aa <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8005092:	f001 f859 	bl	8006148 <IT_ArbitrateInputTrigger>
				break;
 8005096:	e008      	b.n	80050aa <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005098:	f001 f94c 	bl	8006334 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800509c:	2001      	movs	r0, #1
 800509e:	f7ff ffed 	bl	800507c <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 80050a2:	2001      	movs	r0, #1
 80050a4:	f7ff ffea 	bl	800507c <ToplevelInputMenuInputHandler>
				break;
 80050a8:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <ToplevelInputMenuInputHandler+0x40>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80050b0:	2302      	movs	r3, #2
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20001e57 	.word	0x20001e57

080050c0 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050c4:	f7fc fa16 	bl	80014f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80050c8:	4b04      	ldr	r3, [pc, #16]	; (80050dc <ToplevelInputMenuExitHandler+0x1c>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <ToplevelInputMenuExitHandler+0x20>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000000 	.word	0x20000000
 80050e0:	20001e57 	.word	0x20001e57

080050e4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4013      	ands	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d101      	bne.n	80050fe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40010400 	.word	0x40010400

08005110 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <IM_Init+0x1c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a04      	ldr	r2, [pc, #16]	; (800512c <IM_Init+0x1c>)
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	6013      	str	r3, [r2, #0]
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40014400 	.word	0x40014400

08005130 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8005134:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b10      	cmp	r3, #16
 800513e:	d11f      	bne.n	8005180 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x50>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8005140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800514e:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8005150:	edd3 7a00 	vldr	s15, [r3]
 8005154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515c:	db0a      	blt.n	8005174 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x44>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 800515e:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8005160:	edd3 7a00 	vldr	s15, [r3]
 8005164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516c:	ee17 2a90 	vmov	r2, s15
 8005170:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8005172:	e02f      	b.n	80051d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			OUTPUT_TIMER->ARR++;
 8005174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	3201      	adds	r2, #1
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800517e:	e029      	b.n	80051d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8005180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d105      	bne.n	8005196 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x66>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800518a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800518e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005194:	e01e      	b.n	80051d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	ee07 3a90 	vmov	s15, r3
 80051a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051a4:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 80051a6:	edd3 7a00 	vldr	s15, [r3]
 80051aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b2:	d80a      	bhi.n	80051ca <IM_SWEEP_UPDATE_TIM_IRQHandler+0x9a>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 80051b6:	edd3 7a00 	vldr	s15, [r3]
 80051ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c2:	ee17 2a90 	vmov	r2, s15
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051c8:	e004      	b.n	80051d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
				OUTPUT_TIMER->ARR--;
 80051ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	3a01      	subs	r2, #1
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	20000124 	.word	0x20000124
 80051e8:	20000120 	.word	0x20000120

080051ec <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80051f2:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <IM_BTN1_EXTI14_Handler+0x44>)
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <IM_BTN1_EXTI14_Handler+0x48>)
 80051fc:	8812      	ldrh	r2, [r2, #0]
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005204:	dd0c      	ble.n	8005220 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005206:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800520a:	f7ff ff6b 	bl	80050e4 <LL_EXTI_IsActiveFlag_0_31>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005214:	2001      	movs	r0, #1
 8005216:	f7ff fa77 	bl	8004708 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800521a:	4807      	ldr	r0, [pc, #28]	; (8005238 <IM_BTN1_EXTI14_Handler+0x4c>)
 800521c:	f00b fe58 	bl	8010ed0 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8005220:	4a04      	ldr	r2, [pc, #16]	; (8005234 <IM_BTN1_EXTI14_Handler+0x48>)
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	8013      	strh	r3, [r2, #0]


}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40014400 	.word	0x40014400
 8005234:	20001e5e 	.word	0x20001e5e
 8005238:	08014bcc 	.word	0x08014bcc

0800523c <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <IM_BTN2_EXTI15_Handler+0x44>)
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <IM_BTN2_EXTI15_Handler+0x48>)
 800524c:	8812      	ldrh	r2, [r2, #0]
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005254:	dd0c      	ble.n	8005270 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8005256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800525a:	f7ff ff43 	bl	80050e4 <LL_EXTI_IsActiveFlag_0_31>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8005264:	2003      	movs	r0, #3
 8005266:	f7ff fa4f 	bl	8004708 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 800526a:	4807      	ldr	r0, [pc, #28]	; (8005288 <IM_BTN2_EXTI15_Handler+0x4c>)
 800526c:	f00b fe30 	bl	8010ed0 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8005270:	4a04      	ldr	r2, [pc, #16]	; (8005284 <IM_BTN2_EXTI15_Handler+0x48>)
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	8013      	strh	r3, [r2, #0]


}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40014400 	.word	0x40014400
 8005284:	20001e60 	.word	0x20001e60
 8005288:	08014be4 	.word	0x08014be4

0800528c <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005292:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <IM_BTN3_EXTI0_Handler+0x40>)
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <IM_BTN3_EXTI0_Handler+0x44>)
 800529c:	8812      	ldrh	r2, [r2, #0]
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a4:	dd0b      	ble.n	80052be <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7ff ff1c 	bl	80050e4 <LL_EXTI_IsActiveFlag_0_31>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 80052b2:	2004      	movs	r0, #4
 80052b4:	f7ff fa28 	bl	8004708 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 80052b8:	4806      	ldr	r0, [pc, #24]	; (80052d4 <IM_BTN3_EXTI0_Handler+0x48>)
 80052ba:	f00b fe09 	bl	8010ed0 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 80052be:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <IM_BTN3_EXTI0_Handler+0x44>)
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	8013      	strh	r3, [r2, #0]


}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40014400 	.word	0x40014400
 80052d0:	20001e62 	.word	0x20001e62
 80052d4:	08014c00 	.word	0x08014c00

080052d8 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <IM_BTN4_EXTI1_Handler+0x40>)
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	4a0d      	ldr	r2, [pc, #52]	; (800531c <IM_BTN4_EXTI1_Handler+0x44>)
 80052e8:	8812      	ldrh	r2, [r2, #0]
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f0:	dd0b      	ble.n	800530a <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80052f2:	2002      	movs	r0, #2
 80052f4:	f7ff fef6 	bl	80050e4 <LL_EXTI_IsActiveFlag_0_31>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 80052fe:	2002      	movs	r0, #2
 8005300:	f7ff fa02 	bl	8004708 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005304:	4806      	ldr	r0, [pc, #24]	; (8005320 <IM_BTN4_EXTI1_Handler+0x48>)
 8005306:	f00b fde3 	bl	8010ed0 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <IM_BTN4_EXTI1_Handler+0x44>)
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	8013      	strh	r3, [r2, #0]


}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40014400 	.word	0x40014400
 800531c:	20001e64 	.word	0x20001e64
 8005320:	08014c18 	.word	0x08014c18

08005324 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <IM_ENC_EXTI2_Handler+0x40>)
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	4a0d      	ldr	r2, [pc, #52]	; (8005368 <IM_ENC_EXTI2_Handler+0x44>)
 8005334:	8812      	ldrh	r2, [r2, #0]
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533c:	dd0b      	ble.n	8005356 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 800533e:	2004      	movs	r0, #4
 8005340:	f7ff fed0 	bl	80050e4 <LL_EXTI_IsActiveFlag_0_31>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 800534a:	2006      	movs	r0, #6
 800534c:	f7ff f9dc 	bl	8004708 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005350:	4806      	ldr	r0, [pc, #24]	; (800536c <IM_ENC_EXTI2_Handler+0x48>)
 8005352:	f00b fdbd 	bl	8010ed0 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8005356:	4a04      	ldr	r2, [pc, #16]	; (8005368 <IM_ENC_EXTI2_Handler+0x44>)
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	8013      	strh	r3, [r2, #0]


}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40014400 	.word	0x40014400
 8005368:	20001e66 	.word	0x20001e66
 800536c:	08014c30 	.word	0x08014c30

08005370 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <IM_ENC_DIRF_Handler+0x4c>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005382:	d117      	bne.n	80053b4 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005384:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <IM_ENC_DIRF_Handler+0x50>)
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <IM_ENC_DIRF_Handler+0x54>)
 800538e:	8812      	ldrh	r2, [r2, #0]
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	dd0b      	ble.n	80053ae <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8005396:	2005      	movs	r0, #5
 8005398:	f7ff f9b6 	bl	8004708 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 800539c:	480a      	ldr	r0, [pc, #40]	; (80053c8 <IM_ENC_DIRF_Handler+0x58>)
 800539e:	f00b fd97 	bl	8010ed0 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <IM_ENC_DIRF_Handler+0x4c>)
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	4a05      	ldr	r2, [pc, #20]	; (80053bc <IM_ENC_DIRF_Handler+0x4c>)
 80053a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ac:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 80053ae:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <IM_ENC_DIRF_Handler+0x54>)
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	8013      	strh	r3, [r2, #0]


	}


}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40014400 	.word	0x40014400
 80053c4:	20001e68 	.word	0x20001e68
 80053c8:	08014c4c 	.word	0x08014c4c

080053cc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <BO_GetBiasPolarity+0x14>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000001 	.word	0x20000001

080053e4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <BO_GetDcBiasEncoderValue+0x14>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000002 	.word	0x20000002

080053fc <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005406:	2000      	movs	r0, #0
 8005408:	f001 fbb0 	bl	8006b6c <SM_GetEncoderValue>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005412:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800541a:	d214      	bcs.n	8005446 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 800541c:	4b19      	ldr	r3, [pc, #100]	; (8005484 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005430:	2200      	movs	r2, #0
 8005432:	2110      	movs	r1, #16
 8005434:	4814      	ldr	r0, [pc, #80]	; (8005488 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005436:	f005 fe99 	bl	800b16c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800543a:	2201      	movs	r2, #1
 800543c:	2108      	movs	r1, #8
 800543e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005442:	f006 fe55 	bl	800c0f0 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800544c:	d314      	bcc.n	8005478 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005450:	2201      	movs	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005462:	2200      	movs	r2, #0
 8005464:	2110      	movs	r1, #16
 8005466:	4808      	ldr	r0, [pc, #32]	; (8005488 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005468:	f005 fe80 	bl	800b16c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800546c:	2200      	movs	r2, #0
 800546e:	2108      	movs	r1, #8
 8005470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005474:	f006 fe3c 	bl	800c0f0 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000002 	.word	0x20000002
 8005484:	20000001 	.word	0x20000001
 8005488:	20002a00 	.word	0x20002a00

0800548c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005490:	2110      	movs	r1, #16
 8005492:	4803      	ldr	r0, [pc, #12]	; (80054a0 <BO_GetOutputBias+0x14>)
 8005494:	f005 feb0 	bl	800b1f8 <HAL_DAC_GetValue>
 8005498:	4603      	mov	r3, r0
}
 800549a:	4618      	mov	r0, r3
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20002a00 	.word	0x20002a00

080054a4 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	e06b      	b.n	8005588 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80054b0:	493a      	ldr	r1, [pc, #232]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	3308      	adds	r3, #8
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d129      	bne.n	800551a <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 80054c6:	4935      	ldr	r1, [pc, #212]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	3304      	adds	r3, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a31      	ldr	r2, [pc, #196]	; (80055a0 <FreqO_InitFreqProfiles+0xfc>)
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054e6:	492d      	ldr	r1, [pc, #180]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3310      	adds	r3, #16
 80054f6:	edd3 7a00 	vldr	s15, [r3]
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005502:	ee17 0a90 	vmov	r0, s15
 8005506:	4925      	ldr	r1, [pc, #148]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	330c      	adds	r3, #12
 8005516:	6018      	str	r0, [r3, #0]
 8005518:	e033      	b.n	8005582 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800551a:	4920      	ldr	r1, [pc, #128]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	3304      	adds	r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <FreqO_InitFreqProfiles+0xfc>)
 800552e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005532:	481a      	ldr	r0, [pc, #104]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4403      	add	r3, r0
 8005540:	3308      	adds	r3, #8
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	fbb1 f3f3 	udiv	r3, r1, r3
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005550:	4912      	ldr	r1, [pc, #72]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	3310      	adds	r3, #16
 8005560:	edd3 7a00 	vldr	s15, [r3]
 8005564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556c:	ee17 0a90 	vmov	r0, s15
 8005570:	490a      	ldr	r1, [pc, #40]	; (800559c <FreqO_InitFreqProfiles+0xf8>)
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	330c      	adds	r3, #12
 8005580:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3301      	adds	r3, #1
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b0d      	cmp	r3, #13
 800558c:	dd90      	ble.n	80054b0 <FreqO_InitFreqProfiles+0xc>
	}
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20000004 	.word	0x20000004
 80055a0:	00155cc0 	.word	0x00155cc0

080055a4 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 80055ae:	4b1b      	ldr	r3, [pc, #108]	; (800561c <FreqO_MapEncoderPositionCoarse+0x78>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d910      	bls.n	80055e2 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b0d      	cmp	r3, #13
 80055ca:	d901      	bls.n	80055d0 <FreqO_MapEncoderPositionCoarse+0x2c>
 80055cc:	230d      	movs	r3, #13
 80055ce:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f945 	bl	8005860 <FreqO_GetProfileByIndex>
 80055d6:	4603      	mov	r3, r0
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f872 	bl	80056c4 <FreqO_ApplyProfile>
 80055e0:	e014      	b.n	800560c <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 80055e2:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d20f      	bcs.n	800560c <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b0d      	cmp	r3, #13
 80055f6:	d901      	bls.n	80055fc <FreqO_MapEncoderPositionCoarse+0x58>
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f92f 	bl	8005860 <FreqO_GetProfileByIndex>
 8005602:	4603      	mov	r3, r0
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f85c 	bl	80056c4 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 800560c:	4a04      	ldr	r2, [pc, #16]	; (8005620 <FreqO_MapEncoderPositionCoarse+0x7c>)
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	8013      	strh	r3, [r2, #0]

}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	2000011c 	.word	0x2000011c
 8005620:	20001e6a 	.word	0x20001e6a

08005624 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <FreqO_MapEncoderPositionFine+0x48>)
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	429a      	cmp	r2, r3
 8005636:	d905      	bls.n	8005644 <FreqO_MapEncoderPositionFine+0x20>
	{
		OUTPUT_TIMER->ARR++;
 8005638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	3201      	adds	r2, #1
 8005640:	62da      	str	r2, [r3, #44]	; 0x2c
 8005642:	e009      	b.n	8005658 <FreqO_MapEncoderPositionFine+0x34>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005644:	4b09      	ldr	r3, [pc, #36]	; (800566c <FreqO_MapEncoderPositionFine+0x48>)
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	429a      	cmp	r2, r3
 800564c:	d204      	bcs.n	8005658 <FreqO_MapEncoderPositionFine+0x34>
	{
		OUTPUT_TIMER->ARR--;
 800564e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	3a01      	subs	r2, #1
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005658:	4a04      	ldr	r2, [pc, #16]	; (800566c <FreqO_MapEncoderPositionFine+0x48>)
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	8013      	strh	r3, [r2, #0]

}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20001e6a 	.word	0x20001e6a

08005670 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	429a      	cmp	r2, r3
 8005682:	d905      	bls.n	8005690 <FreqO_MapEncoderPositionToPrescaler+0x20>
	{
		OUTPUT_TIMER->PSC++;
 8005684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800568a:	3201      	adds	r2, #1
 800568c:	629a      	str	r2, [r3, #40]	; 0x28
 800568e:	e00e      	b.n	80056ae <FreqO_MapEncoderPositionToPrescaler+0x3e>

	}
	else if (pEncValue < freq_last_encoder_value)
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	429a      	cmp	r2, r3
 8005698:	d209      	bcs.n	80056ae <FreqO_MapEncoderPositionToPrescaler+0x3e>
	{
		if(OUTPUT_TIMER->PSC > 0)
 800569a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <FreqO_MapEncoderPositionToPrescaler+0x3e>
			OUTPUT_TIMER->PSC--;
 80056a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056aa:	3a01      	subs	r2, #1
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 80056ae:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	8013      	strh	r3, [r2, #0]

}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20001e6a 	.word	0x20001e6a

080056c4 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f899 	bl	8005804 <FreqO_FindFPresetObject>
 80056d2:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d026      	beq.n	8005728 <FreqO_ApplyProfile+0x64>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80056da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80056e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80056ee:	2001      	movs	r0, #1
 80056f0:	f000 ffc0 	bl	8006674 <SM_GetOutputChannel>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	2b06      	cmp	r3, #6
 8005702:	d10d      	bne.n	8005720 <FreqO_ApplyProfile+0x5c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <FreqO_ApplyProfile+0x74>)
 8005706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a09      	ldr	r2, [pc, #36]	; (8005738 <FreqO_ApplyProfile+0x74>)
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <FreqO_ApplyProfile+0x74>)
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	4a07      	ldr	r2, [pc, #28]	; (8005738 <FreqO_ApplyProfile+0x74>)
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005720:	4a06      	ldr	r2, [pc, #24]	; (800573c <FreqO_ApplyProfile+0x78>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005726:	e002      	b.n	800572e <FreqO_ApplyProfile+0x6a>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005728:	4805      	ldr	r0, [pc, #20]	; (8005740 <FreqO_ApplyProfile+0x7c>)
 800572a:	f7fb ff29 	bl	8001580 <DM_SetErrorDebugMsg>
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40000400 	.word	0x40000400
 800573c:	2000011c 	.word	0x2000011c
 8005740:	08014c64 	.word	0x08014c64

08005744 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 800574a:	2000      	movs	r0, #0
 800574c:	f001 fa0e 	bl	8006b6c <SM_GetEncoderValue>
 8005750:	4603      	mov	r3, r0
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ff66 	bl	8005624 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005758:	2001      	movs	r0, #1
 800575a:	f000 ff8b 	bl	8006674 <SM_GetOutputChannel>
 800575e:	4603      	mov	r3, r0
 8005760:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	2b06      	cmp	r3, #6
 800576c:	d110      	bne.n	8005790 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <FreqO_AdjustFreq+0x54>)
 8005770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005774:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005776:	2000      	movs	r0, #0
 8005778:	f001 f9f8 	bl	8006b6c <SM_GetEncoderValue>
 800577c:	4603      	mov	r3, r0
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <FreqO_AdjustFreq+0x54>)
 8005784:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005786:	4b04      	ldr	r3, [pc, #16]	; (8005798 <FreqO_AdjustFreq+0x54>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	4a03      	ldr	r2, [pc, #12]	; (8005798 <FreqO_AdjustFreq+0x54>)
 800578c:	085b      	lsrs	r3, r3, #1
 800578e:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40000400 	.word	0x40000400

0800579c <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 80057a2:	2000      	movs	r0, #0
 80057a4:	f001 f9e2 	bl	8006b6c <SM_GetEncoderValue>
 80057a8:	4603      	mov	r3, r0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff ff60 	bl	8005670 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80057b0:	2001      	movs	r0, #1
 80057b2:	f000 ff5f 	bl	8006674 <SM_GetOutputChannel>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	2b06      	cmp	r3, #6
 80057c4:	d10c      	bne.n	80057e0 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80057c6:	2000      	movs	r0, #0
 80057c8:	f001 f9d0 	bl	8006b6c <SM_GetEncoderValue>
 80057cc:	4603      	mov	r3, r0
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <FreqO_AdjustPrescaler+0x4c>)
 80057d4:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <FreqO_AdjustPrescaler+0x4c>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	4a03      	ldr	r2, [pc, #12]	; (80057e8 <FreqO_AdjustPrescaler+0x4c>)
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40000400 	.word	0x40000400

080057ec <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
	return freq_profile;
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <FreqO_GetFPresetObject+0x14>)
 80057f2:	681b      	ldr	r3, [r3, #0]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	2000011c 	.word	0x2000011c

08005804 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	e016      	b.n	8005840 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005812:	4911      	ldr	r1, [pc, #68]	; (8005858 <FreqO_FindFPresetObject+0x54>)
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3304      	adds	r3, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d107      	bne.n	800583a <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4a08      	ldr	r2, [pc, #32]	; (8005858 <FreqO_FindFPresetObject+0x54>)
 8005836:	4413      	add	r3, r2
 8005838:	e009      	b.n	800584e <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b0d      	cmp	r3, #13
 8005844:	dde5      	ble.n	8005812 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005846:	4805      	ldr	r0, [pc, #20]	; (800585c <FreqO_FindFPresetObject+0x58>)
 8005848:	f7fb fe9a 	bl	8001580 <DM_SetErrorDebugMsg>
	return 0;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000004 	.word	0x20000004
 800585c:	08014c8c 	.word	0x08014c8c

08005860 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4a04      	ldr	r2, [pc, #16]	; (8005884 <FreqO_GetProfileByIndex+0x24>)
 8005874:	4413      	add	r3, r2
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000004 	.word	0x20000004

08005888 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <FreqO_ResetLastEncoderValue+0x14>)
 800588e:	2200      	movs	r2, #0
 8005890:	801a      	strh	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20001e6a 	.word	0x20001e6a

080058a0 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <FS_SetSweepModeDown+0x48>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <FS_SetSweepModeDown+0x48>)
 80058aa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80058ae:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80058b0:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <FS_SetSweepModeDown+0x48>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <FS_SetSweepModeDown+0x48>)
 80058b6:	f043 0310 	orr.w	r3, r3, #16
 80058ba:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80058bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <FS_SetSweepModeDown+0x4c>)
 80058cc:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <FS_SetSweepModeDown+0x50>)
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <FS_SetSweepModeDown+0x54>)
 80058d4:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80058d6:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <FS_SetSweepModeDown+0x58>)
 80058d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	20000120 	.word	0x20000120
 80058f0:	20000124 	.word	0x20000124
 80058f4:	477fff00 	.word	0x477fff00
 80058f8:	40012c00 	.word	0x40012c00

080058fc <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <FS_SetSweepModeUp+0x40>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <FS_SetSweepModeUp+0x40>)
 8005906:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800590a:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <FS_SetSweepModeUp+0x40>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0a      	ldr	r2, [pc, #40]	; (800593c <FS_SetSweepModeUp+0x40>)
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005926:	4b06      	ldr	r3, [pc, #24]	; (8005940 <FS_SetSweepModeUp+0x44>)
 8005928:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <FS_SetSweepModeUp+0x48>)
 800592e:	4a06      	ldr	r2, [pc, #24]	; (8005948 <FS_SetSweepModeUp+0x4c>)
 8005930:	601a      	str	r2, [r3, #0]


}
 8005932:	bf00      	nop
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	40000c00 	.word	0x40000c00
 8005940:	20000124 	.word	0x20000124
 8005944:	20000120 	.word	0x20000120
 8005948:	41500000 	.word	0x41500000

0800594c <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d03a      	beq.n	80059d2 <FS_SetEncoderControlMode+0x86>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800595c:	4a25      	ldr	r2, [pc, #148]	; (80059f4 <FS_SetEncoderControlMode+0xa8>)
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005962:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 8005964:	220d      	movs	r2, #13
 8005966:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005968:	4b23      	ldr	r3, [pc, #140]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 800596a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005970:	4b22      	ldr	r3, [pc, #136]	; (80059fc <FS_SetEncoderControlMode+0xb0>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <FS_SetEncoderControlMode+0x32>
 8005978:	2b01      	cmp	r3, #1
 800597a:	d015      	beq.n	80059a8 <FS_SetEncoderControlMode+0x5c>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 800597c:	e033      	b.n	80059e6 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800597e:	4b1e      	ldr	r3, [pc, #120]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800598a:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <FS_SetEncoderControlMode+0xb4>)
 800598c:	edd3 7a00 	vldr	s15, [r3]
 8005990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005998:	dc00      	bgt.n	800599c <FS_SetEncoderControlMode+0x50>
				break;
 800599a:	e024      	b.n	80059e6 <FS_SetEncoderControlMode+0x9a>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800599c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059a0:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80059a6:	e01e      	b.n	80059e6 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059b4:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <FS_SetEncoderControlMode+0xb8>)
 80059b6:	edd3 7a00 	vldr	s15, [r3]
 80059ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c2:	d400      	bmi.n	80059c6 <FS_SetEncoderControlMode+0x7a>
				break;
 80059c4:	e00f      	b.n	80059e6 <FS_SetEncoderControlMode+0x9a>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80059c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059ca:	4a0b      	ldr	r2, [pc, #44]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80059d0:	e009      	b.n	80059e6 <FS_SetEncoderControlMode+0x9a>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80059d2:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <FS_SetEncoderControlMode+0xa8>)
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 80059da:	2201      	movs	r2, #1
 80059dc:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <FS_SetEncoderControlMode+0xac>)
 80059e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80059e4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20001e59 	.word	0x20001e59
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	20001e58 	.word	0x20001e58
 8005a00:	20000124 	.word	0x20000124
 8005a04:	20000120 	.word	0x20000120

08005a08 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005a08:	b590      	push	{r4, r7, lr}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d122      	bne.n	8005a5e <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005a18:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fa fd99 	bl	8000554 <__aeabi_ui2d>
 8005a22:	4603      	mov	r3, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005a68 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005a2a:	ec44 3b10 	vmov	d0, r3, r4
 8005a2e:	f00d fb67 	bl	8013100 <pow>
 8005a32:	ec51 0b10 	vmov	r0, r1, d0
 8005a36:	a30e      	add	r3, pc, #56	; (adr r3, 8005a70 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f7fa fc4e 	bl	80002dc <__adddf3>
 8005a40:	4603      	mov	r3, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	4618      	mov	r0, r3
 8005a46:	4621      	mov	r1, r4
 8005a48:	f7fb f8d6 	bl	8000bf8 <__aeabi_d2uiz>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a56:	d002      	beq.n	8005a5e <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005a58:	4a08      	ldr	r2, [pc, #32]	; (8005a7c <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd90      	pop	{r4, r7, pc}
 8005a66:	bf00      	nop
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	40080000 	.word	0x40080000
 8005a70:	00000000 	.word	0x00000000
 8005a74:	40d06800 	.word	0x40d06800
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	40000c00 	.word	0x40000c00

08005a80 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005a84:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a98:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005ad8 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa0:	e011      	b.n	8005ac6 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005abe:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005ad8 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	4d2037a0 	.word	0x4d2037a0

08005adc <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <FuncO_ResetLastEncoderValue+0x14>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	801a      	strh	r2, [r3, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	20001e96 	.word	0x20001e96

08005af4 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005afe:	2000      	movs	r0, #0
 8005b00:	f000 fdb8 	bl	8006674 <SM_GetOutputChannel>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005b0e:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d90c      	bls.n	8005b32 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	d901      	bls.n	8005b28 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005b24:	2305      	movs	r3, #5
 8005b26:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f856 	bl	8005bdc <FuncO_ApplyProfileToSignal>
 8005b30:	e010      	b.n	8005b54 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d20b      	bcs.n	8005b54 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b06      	cmp	r3, #6
 8005b46:	d901      	bls.n	8005b4c <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f844 	bl	8005bdc <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005b54:	4a03      	ldr	r2, [pc, #12]	; (8005b64 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	8013      	strh	r3, [r2, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20001e96 	.word	0x20001e96

08005b68 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005b72:	2001      	movs	r0, #1
 8005b74:	f000 fd7e 	bl	8006674 <SM_GetOutputChannel>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d90c      	bls.n	8005ba6 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d901      	bls.n	8005b9c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005b98:	2306      	movs	r3, #6
 8005b9a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f882 	bl	8005ca8 <FuncO_ApplyProfileToAux>
 8005ba4:	e010      	b.n	8005bc8 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d20b      	bcs.n	8005bc8 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d901      	bls.n	8005bc0 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f870 	bl	8005ca8 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005bc8:	4a03      	ldr	r2, [pc, #12]	; (8005bd8 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	8013      	strh	r3, [r2, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20001e96 	.word	0x20001e96

08005bdc <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	4603      	mov	r3, r0
 8005be4:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005be6:	79fc      	ldrb	r4, [r7, #7]
 8005be8:	2000      	movs	r0, #0
 8005bea:	f000 fd43 	bl	8006674 <SM_GetOutputChannel>
 8005bee:	4601      	mov	r1, r0
 8005bf0:	00e3      	lsls	r3, r4, #3
 8005bf2:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <FuncO_ApplyProfileToSignal+0xbc>)
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005bfa:	4828      	ldr	r0, [pc, #160]	; (8005c9c <FuncO_ApplyProfileToSignal+0xc0>)
 8005bfc:	f00b f968 	bl	8010ed0 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005c00:	79fc      	ldrb	r4, [r7, #7]
 8005c02:	2000      	movs	r0, #0
 8005c04:	f000 fd36 	bl	8006674 <SM_GetOutputChannel>
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4a23      	ldr	r2, [pc, #140]	; (8005c98 <FuncO_ApplyProfileToSignal+0xbc>)
 8005c0c:	00e3      	lsls	r3, r4, #3
 8005c0e:	4413      	add	r3, r2
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005c14:	2000      	movs	r0, #0
 8005c16:	f000 fd2d 	bl	8006674 <SM_GetOutputChannel>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f85c 	bl	8006ce4 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4818      	ldr	r0, [pc, #96]	; (8005ca0 <FuncO_ApplyProfileToSignal+0xc4>)
 8005c40:	f005 fa3e 	bl	800b0c0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005c44:	2000      	movs	r0, #0
 8005c46:	f000 fd15 	bl	8006674 <SM_GetOutputChannel>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f103 0208 	add.w	r2, r3, #8
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2378      	movs	r3, #120	; 0x78
 8005c56:	2100      	movs	r1, #0
 8005c58:	4811      	ldr	r0, [pc, #68]	; (8005ca0 <FuncO_ApplyProfileToSignal+0xc4>)
 8005c5a:	f005 f96f 	bl	800af3c <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4810      	ldr	r0, [pc, #64]	; (8005ca4 <FuncO_ApplyProfileToSignal+0xc8>)
 8005c62:	f005 fa2d 	bl	800b0c0 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005c66:	2001      	movs	r0, #1
 8005c68:	f000 fd04 	bl	8006674 <SM_GetOutputChannel>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f103 0208 	add.w	r2, r3, #8
 8005c72:	2300      	movs	r3, #0
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	2378      	movs	r3, #120	; 0x78
 8005c78:	2100      	movs	r1, #0
 8005c7a:	480a      	ldr	r0, [pc, #40]	; (8005ca4 <FuncO_ApplyProfileToSignal+0xc8>)
 8005c7c:	f005 f95e 	bl	800af3c <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6013      	str	r3, [r2, #0]



}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd90      	pop	{r4, r7, pc}
 8005c98:	20000128 	.word	0x20000128
 8005c9c:	08014cbc 	.word	0x08014cbc
 8005ca0:	20002a00 	.word	0x20002a00
 8005ca4:	200029ec 	.word	0x200029ec

08005ca8 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005cb2:	79fc      	ldrb	r4, [r7, #7]
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f000 fcdd 	bl	8006674 <SM_GetOutputChannel>
 8005cba:	4601      	mov	r1, r0
 8005cbc:	00e3      	lsls	r3, r4, #3
 8005cbe:	4a96      	ldr	r2, [pc, #600]	; (8005f18 <FuncO_ApplyProfileToAux+0x270>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d10a      	bne.n	8005ce2 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005ccc:	4893      	ldr	r0, [pc, #588]	; (8005f1c <FuncO_ApplyProfileToAux+0x274>)
 8005cce:	f00b f8ff 	bl	8010ed0 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005cd2:	f000 ff37 	bl	8006b44 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005cd6:	f000 fce3 	bl	80066a0 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005cda:	4b91      	ldr	r3, [pc, #580]	; (8005f20 <FuncO_ApplyProfileToAux+0x278>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim2);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005ce0:	e115      	b.n	8005f0e <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005ce2:	4b8f      	ldr	r3, [pc, #572]	; (8005f20 <FuncO_ApplyProfileToAux+0x278>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 808e 	beq.w	8005e08 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005cec:	488d      	ldr	r0, [pc, #564]	; (8005f24 <FuncO_ApplyProfileToAux+0x27c>)
 8005cee:	f00b f8ef 	bl	8010ed0 <puts>
		SM_DisablePwmToAux();
 8005cf2:	f000 fe11 	bl	8006918 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005cf6:	f000 fe4b 	bl	8006990 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005cfa:	488b      	ldr	r0, [pc, #556]	; (8005f28 <FuncO_ApplyProfileToAux+0x280>)
 8005cfc:	f00b f8e8 	bl	8010ed0 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005d00:	79fc      	ldrb	r4, [r7, #7]
 8005d02:	2001      	movs	r0, #1
 8005d04:	f000 fcb6 	bl	8006674 <SM_GetOutputChannel>
 8005d08:	4601      	mov	r1, r0
 8005d0a:	4a83      	ldr	r2, [pc, #524]	; (8005f18 <FuncO_ApplyProfileToAux+0x270>)
 8005d0c:	00e3      	lsls	r3, r4, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d14:	4884      	ldr	r0, [pc, #528]	; (8005f28 <FuncO_ApplyProfileToAux+0x280>)
 8005d16:	f00b f8db 	bl	8010ed0 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	f000 fcaa 	bl	8006674 <SM_GetOutputChannel>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005d2a:	4880      	ldr	r0, [pc, #512]	; (8005f2c <FuncO_ApplyProfileToAux+0x284>)
 8005d2c:	f00b f85c 	bl	8010de8 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005d30:	7b7b      	ldrb	r3, [r7, #13]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 f804 	bl	8006d40 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005d38:	487d      	ldr	r0, [pc, #500]	; (8005f30 <FuncO_ApplyProfileToAux+0x288>)
 8005d3a:	f00b f8c9 	bl	8010ed0 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005d3e:	487d      	ldr	r0, [pc, #500]	; (8005f34 <FuncO_ApplyProfileToAux+0x28c>)
 8005d40:	f007 fafe 	bl	800d340 <HAL_TIM_Base_Stop>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	487a      	ldr	r0, [pc, #488]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005d4e:	f00b f84b 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005d52:	487a      	ldr	r0, [pc, #488]	; (8005f3c <FuncO_ApplyProfileToAux+0x294>)
 8005d54:	f00b f8bc 	bl	8010ed0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4879      	ldr	r0, [pc, #484]	; (8005f40 <FuncO_ApplyProfileToAux+0x298>)
 8005d5c:	f005 f9b0 	bl	800b0c0 <HAL_DAC_Stop_DMA>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	4619      	mov	r1, r3
 8005d68:	4873      	ldr	r0, [pc, #460]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005d6a:	f00b f83d 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005d6e:	4875      	ldr	r0, [pc, #468]	; (8005f44 <FuncO_ApplyProfileToAux+0x29c>)
 8005d70:	f00b f8ae 	bl	8010ed0 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005d74:	2001      	movs	r0, #1
 8005d76:	f000 fc7d 	bl	8006674 <SM_GetOutputChannel>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f103 0208 	add.w	r2, r3, #8
 8005d80:	2300      	movs	r3, #0
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2378      	movs	r3, #120	; 0x78
 8005d86:	2100      	movs	r1, #0
 8005d88:	486d      	ldr	r0, [pc, #436]	; (8005f40 <FuncO_ApplyProfileToAux+0x298>)
 8005d8a:	f005 f8d7 	bl	800af3c <HAL_DAC_Start_DMA>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	4619      	mov	r1, r3
 8005d96:	4868      	ldr	r0, [pc, #416]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005d98:	f00b f826 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005d9c:	486a      	ldr	r0, [pc, #424]	; (8005f48 <FuncO_ApplyProfileToAux+0x2a0>)
 8005d9e:	f00b f897 	bl	8010ed0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005da2:	2100      	movs	r1, #0
 8005da4:	4869      	ldr	r0, [pc, #420]	; (8005f4c <FuncO_ApplyProfileToAux+0x2a4>)
 8005da6:	f005 f98b 	bl	800b0c0 <HAL_DAC_Stop_DMA>
 8005daa:	4603      	mov	r3, r0
 8005dac:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	4619      	mov	r1, r3
 8005db2:	4861      	ldr	r0, [pc, #388]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005db4:	f00b f818 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005db8:	4865      	ldr	r0, [pc, #404]	; (8005f50 <FuncO_ApplyProfileToAux+0x2a8>)
 8005dba:	f00b f889 	bl	8010ed0 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f000 fc58 	bl	8006674 <SM_GetOutputChannel>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f103 0208 	add.w	r2, r3, #8
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	2378      	movs	r3, #120	; 0x78
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	485e      	ldr	r0, [pc, #376]	; (8005f4c <FuncO_ApplyProfileToAux+0x2a4>)
 8005dd4:	f005 f8b2 	bl	800af3c <HAL_DAC_Start_DMA>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	4619      	mov	r1, r3
 8005de0:	4855      	ldr	r0, [pc, #340]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005de2:	f00b f801 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005de6:	485b      	ldr	r0, [pc, #364]	; (8005f54 <FuncO_ApplyProfileToAux+0x2ac>)
 8005de8:	f00b f872 	bl	8010ed0 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005dec:	4851      	ldr	r0, [pc, #324]	; (8005f34 <FuncO_ApplyProfileToAux+0x28c>)
 8005dee:	f007 fa79 	bl	800d2e4 <HAL_TIM_Base_Start>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	484f      	ldr	r0, [pc, #316]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005dfc:	f00a fff4 	bl	8010de8 <iprintf>
		last_output_mode_was_pwm = 0;
 8005e00:	4b47      	ldr	r3, [pc, #284]	; (8005f20 <FuncO_ApplyProfileToAux+0x278>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
}
 8005e06:	e082      	b.n	8005f0e <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005e08:	4847      	ldr	r0, [pc, #284]	; (8005f28 <FuncO_ApplyProfileToAux+0x280>)
 8005e0a:	f00b f861 	bl	8010ed0 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005e0e:	79fc      	ldrb	r4, [r7, #7]
 8005e10:	2001      	movs	r0, #1
 8005e12:	f000 fc2f 	bl	8006674 <SM_GetOutputChannel>
 8005e16:	4601      	mov	r1, r0
 8005e18:	4a3f      	ldr	r2, [pc, #252]	; (8005f18 <FuncO_ApplyProfileToAux+0x270>)
 8005e1a:	00e3      	lsls	r3, r4, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005e22:	4841      	ldr	r0, [pc, #260]	; (8005f28 <FuncO_ApplyProfileToAux+0x280>)
 8005e24:	f00b f854 	bl	8010ed0 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005e28:	2001      	movs	r0, #1
 8005e2a:	f000 fc23 	bl	8006674 <SM_GetOutputChannel>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005e38:	483c      	ldr	r0, [pc, #240]	; (8005f2c <FuncO_ApplyProfileToAux+0x284>)
 8005e3a:	f00a ffd5 	bl	8010de8 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 ff7d 	bl	8006d40 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005e46:	483a      	ldr	r0, [pc, #232]	; (8005f30 <FuncO_ApplyProfileToAux+0x288>)
 8005e48:	f00b f842 	bl	8010ed0 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005e4c:	4839      	ldr	r0, [pc, #228]	; (8005f34 <FuncO_ApplyProfileToAux+0x28c>)
 8005e4e:	f007 fa77 	bl	800d340 <HAL_TIM_Base_Stop>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4837      	ldr	r0, [pc, #220]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005e5c:	f00a ffc4 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005e60:	4836      	ldr	r0, [pc, #216]	; (8005f3c <FuncO_ApplyProfileToAux+0x294>)
 8005e62:	f00b f835 	bl	8010ed0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005e66:	2100      	movs	r1, #0
 8005e68:	4835      	ldr	r0, [pc, #212]	; (8005f40 <FuncO_ApplyProfileToAux+0x298>)
 8005e6a:	f005 f929 	bl	800b0c0 <HAL_DAC_Stop_DMA>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e72:	7bbb      	ldrb	r3, [r7, #14]
 8005e74:	4619      	mov	r1, r3
 8005e76:	4830      	ldr	r0, [pc, #192]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005e78:	f00a ffb6 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005e7c:	4831      	ldr	r0, [pc, #196]	; (8005f44 <FuncO_ApplyProfileToAux+0x29c>)
 8005e7e:	f00b f827 	bl	8010ed0 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e82:	2001      	movs	r0, #1
 8005e84:	f000 fbf6 	bl	8006674 <SM_GetOutputChannel>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f103 0208 	add.w	r2, r3, #8
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	2378      	movs	r3, #120	; 0x78
 8005e94:	2100      	movs	r1, #0
 8005e96:	482a      	ldr	r0, [pc, #168]	; (8005f40 <FuncO_ApplyProfileToAux+0x298>)
 8005e98:	f005 f850 	bl	800af3c <HAL_DAC_Start_DMA>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4824      	ldr	r0, [pc, #144]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005ea6:	f00a ff9f 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005eaa:	4827      	ldr	r0, [pc, #156]	; (8005f48 <FuncO_ApplyProfileToAux+0x2a0>)
 8005eac:	f00b f810 	bl	8010ed0 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4826      	ldr	r0, [pc, #152]	; (8005f4c <FuncO_ApplyProfileToAux+0x2a4>)
 8005eb4:	f005 f904 	bl	800b0c0 <HAL_DAC_Stop_DMA>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	481d      	ldr	r0, [pc, #116]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005ec2:	f00a ff91 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005ec6:	4822      	ldr	r0, [pc, #136]	; (8005f50 <FuncO_ApplyProfileToAux+0x2a8>)
 8005ec8:	f00b f802 	bl	8010ed0 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f000 fbd1 	bl	8006674 <SM_GetOutputChannel>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f103 0208 	add.w	r2, r3, #8
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	2378      	movs	r3, #120	; 0x78
 8005ede:	2100      	movs	r1, #0
 8005ee0:	481a      	ldr	r0, [pc, #104]	; (8005f4c <FuncO_ApplyProfileToAux+0x2a4>)
 8005ee2:	f005 f82b 	bl	800af3c <HAL_DAC_Start_DMA>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	4619      	mov	r1, r3
 8005eee:	4812      	ldr	r0, [pc, #72]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005ef0:	f00a ff7a 	bl	8010de8 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005ef4:	4817      	ldr	r0, [pc, #92]	; (8005f54 <FuncO_ApplyProfileToAux+0x2ac>)
 8005ef6:	f00a ffeb 	bl	8010ed0 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005efa:	480e      	ldr	r0, [pc, #56]	; (8005f34 <FuncO_ApplyProfileToAux+0x28c>)
 8005efc:	f007 f9f2 	bl	800d2e4 <HAL_TIM_Base_Start>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	4619      	mov	r1, r3
 8005f08:	480b      	ldr	r0, [pc, #44]	; (8005f38 <FuncO_ApplyProfileToAux+0x290>)
 8005f0a:	f00a ff6d 	bl	8010de8 <iprintf>
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd90      	pop	{r4, r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000128 	.word	0x20000128
 8005f1c:	08014cd0 	.word	0x08014cd0
 8005f20:	20001e94 	.word	0x20001e94
 8005f24:	08014cf8 	.word	0x08014cf8
 8005f28:	08014d24 	.word	0x08014d24
 8005f2c:	08014d50 	.word	0x08014d50
 8005f30:	08014d68 	.word	0x08014d68
 8005f34:	20002c54 	.word	0x20002c54
 8005f38:	08014d9c 	.word	0x08014d9c
 8005f3c:	08014da8 	.word	0x08014da8
 8005f40:	200029ec 	.word	0x200029ec
 8005f44:	08014dec 	.word	0x08014dec
 8005f48:	08014e30 	.word	0x08014e30
 8005f4c:	20002a00 	.word	0x20002a00
 8005f50:	08014e74 	.word	0x08014e74
 8005f54:	08014eb8 	.word	0x08014eb8

08005f58 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005f5c:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <GO_ResetLastEncoderValue+0x14>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	801a      	strh	r2, [r3, #0]
}
 8005f62:	bf00      	nop
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	20001e98 	.word	0x20001e98

08005f70 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f000 fb7a 	bl	8006674 <SM_GetOutputChannel>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005f8a:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d90c      	bls.n	8005fae <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	3301      	adds	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	2b07      	cmp	r3, #7
 8005f9e:	d901      	bls.n	8005fa4 <GO_MapEncoderPositionToSignalOutput+0x34>
 8005fa0:	2307      	movs	r3, #7
 8005fa2:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f81c 	bl	8005fe4 <GO_ApplyPresetToSignal>
 8005fac:	e010      	b.n	8005fd0 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005fae:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d20b      	bcs.n	8005fd0 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b07      	cmp	r3, #7
 8005fc2:	d901      	bls.n	8005fc8 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f80a 	bl	8005fe4 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005fd0:	4a03      	ldr	r2, [pc, #12]	; (8005fe0 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20001e98 	.word	0x20001e98

08005fe4 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005fee:	79fc      	ldrb	r4, [r7, #7]
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f000 fb3f 	bl	8006674 <SM_GetOutputChannel>
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	4423      	add	r3, r4
 8005ffe:	4a4f      	ldr	r2, [pc, #316]	; (800613c <GO_ApplyPresetToSignal+0x158>)
 8006000:	4413      	add	r3, r2
 8006002:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	2b07      	cmp	r3, #7
 800600a:	f200 8093 	bhi.w	8006134 <GO_ApplyPresetToSignal+0x150>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <GO_ApplyPresetToSignal+0x30>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006035 	.word	0x08006035
 8006018:	08006055 	.word	0x08006055
 800601c:	08006075 	.word	0x08006075
 8006020:	08006095 	.word	0x08006095
 8006024:	080060b5 	.word	0x080060b5
 8006028:	080060d5 	.word	0x080060d5
 800602c:	080060f5 	.word	0x080060f5
 8006030:	08006115 	.word	0x08006115
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006034:	2200      	movs	r2, #0
 8006036:	2101      	movs	r1, #1
 8006038:	4841      	ldr	r0, [pc, #260]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 800603a:	f006 f859 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800603e:	2200      	movs	r2, #0
 8006040:	2120      	movs	r1, #32
 8006042:	4840      	ldr	r0, [pc, #256]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 8006044:	f006 f854 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006048:	2200      	movs	r2, #0
 800604a:	2110      	movs	r1, #16
 800604c:	483d      	ldr	r0, [pc, #244]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 800604e:	f006 f84f 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 8006052:	e06f      	b.n	8006134 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006054:	2201      	movs	r2, #1
 8006056:	2101      	movs	r1, #1
 8006058:	4839      	ldr	r0, [pc, #228]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 800605a:	f006 f849 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800605e:	2200      	movs	r2, #0
 8006060:	2120      	movs	r1, #32
 8006062:	4838      	ldr	r0, [pc, #224]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 8006064:	f006 f844 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006068:	2200      	movs	r2, #0
 800606a:	2110      	movs	r1, #16
 800606c:	4835      	ldr	r0, [pc, #212]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 800606e:	f006 f83f 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 8006072:	e05f      	b.n	8006134 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006074:	2200      	movs	r2, #0
 8006076:	2101      	movs	r1, #1
 8006078:	4831      	ldr	r0, [pc, #196]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 800607a:	f006 f839 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800607e:	2201      	movs	r2, #1
 8006080:	2120      	movs	r1, #32
 8006082:	4830      	ldr	r0, [pc, #192]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 8006084:	f006 f834 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006088:	2200      	movs	r2, #0
 800608a:	2110      	movs	r1, #16
 800608c:	482d      	ldr	r0, [pc, #180]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 800608e:	f006 f82f 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 8006092:	e04f      	b.n	8006134 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006094:	2201      	movs	r2, #1
 8006096:	2101      	movs	r1, #1
 8006098:	4829      	ldr	r0, [pc, #164]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 800609a:	f006 f829 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800609e:	2201      	movs	r2, #1
 80060a0:	2120      	movs	r1, #32
 80060a2:	4828      	ldr	r0, [pc, #160]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 80060a4:	f006 f824 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80060a8:	2200      	movs	r2, #0
 80060aa:	2110      	movs	r1, #16
 80060ac:	4825      	ldr	r0, [pc, #148]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 80060ae:	f006 f81f 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 80060b2:	e03f      	b.n	8006134 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060b4:	2200      	movs	r2, #0
 80060b6:	2101      	movs	r1, #1
 80060b8:	4821      	ldr	r0, [pc, #132]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 80060ba:	f006 f819 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060be:	2200      	movs	r2, #0
 80060c0:	2120      	movs	r1, #32
 80060c2:	4820      	ldr	r0, [pc, #128]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 80060c4:	f006 f814 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80060c8:	2201      	movs	r2, #1
 80060ca:	2110      	movs	r1, #16
 80060cc:	481d      	ldr	r0, [pc, #116]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 80060ce:	f006 f80f 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 80060d2:	e02f      	b.n	8006134 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80060d4:	2201      	movs	r2, #1
 80060d6:	2101      	movs	r1, #1
 80060d8:	4819      	ldr	r0, [pc, #100]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 80060da:	f006 f809 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060de:	2200      	movs	r2, #0
 80060e0:	2120      	movs	r1, #32
 80060e2:	4818      	ldr	r0, [pc, #96]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 80060e4:	f006 f804 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80060e8:	2201      	movs	r2, #1
 80060ea:	2110      	movs	r1, #16
 80060ec:	4815      	ldr	r0, [pc, #84]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 80060ee:	f005 ffff 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 80060f2:	e01f      	b.n	8006134 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060f4:	2200      	movs	r2, #0
 80060f6:	2101      	movs	r1, #1
 80060f8:	4811      	ldr	r0, [pc, #68]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 80060fa:	f005 fff9 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80060fe:	2201      	movs	r2, #1
 8006100:	2120      	movs	r1, #32
 8006102:	4810      	ldr	r0, [pc, #64]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 8006104:	f005 fff4 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006108:	2201      	movs	r2, #1
 800610a:	2110      	movs	r1, #16
 800610c:	480d      	ldr	r0, [pc, #52]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 800610e:	f005 ffef 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 8006112:	e00f      	b.n	8006134 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006114:	2201      	movs	r2, #1
 8006116:	2101      	movs	r1, #1
 8006118:	4809      	ldr	r0, [pc, #36]	; (8006140 <GO_ApplyPresetToSignal+0x15c>)
 800611a:	f005 ffe9 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800611e:	2201      	movs	r2, #1
 8006120:	2120      	movs	r1, #32
 8006122:	4808      	ldr	r0, [pc, #32]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 8006124:	f005 ffe4 	bl	800c0f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006128:	2201      	movs	r2, #1
 800612a:	2110      	movs	r1, #16
 800612c:	4805      	ldr	r0, [pc, #20]	; (8006144 <GO_ApplyPresetToSignal+0x160>)
 800612e:	f005 ffdf 	bl	800c0f0 <HAL_GPIO_WritePin>
			break;
 8006132:	bf00      	nop
	}

}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	bd90      	pop	{r4, r7, pc}
 800613c:	20000160 	.word	0x20000160
 8006140:	48000400 	.word	0x48000400
 8006144:	48000800 	.word	0x48000800

08006148 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 800614e:	f000 f927 	bl	80063a0 <IT_GetTriggerStatus>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d034      	beq.n	80061c2 <IT_ArbitrateInputTrigger+0x7a>
	{
		// disable timer external clock source
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 8006158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006166:	6093      	str	r3, [r2, #8]
		// disable timer enable "Filtered timer input 1" (tim_ti1fp1)
		OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 8006168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006172:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8006176:	6093      	str	r3, [r2, #8]
		// disable timer reset trigger mode
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 8006178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006182:	f023 0304 	bic.w	r3, r3, #4
 8006186:	6093      	str	r3, [r2, #8]
		// set status to disabled

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 8006188:	4863      	ldr	r0, [pc, #396]	; (8006318 <IT_ArbitrateInputTrigger+0x1d0>)
 800618a:	f004 fc6d 	bl	800aa68 <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 800618e:	4863      	ldr	r0, [pc, #396]	; (800631c <IT_ArbitrateInputTrigger+0x1d4>)
 8006190:	f003 fa10 	bl	80095b4 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 8006194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800619e:	f023 0301 	bic.w	r3, r3, #1
 80061a2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 80061a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80061ae:	f023 0308 	bic.w	r3, r3, #8
 80061b2:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 80061b4:	2000      	movs	r0, #0
 80061b6:	f000 f8ff 	bl	80063b8 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80061ba:	2000      	movs	r0, #0
 80061bc:	f7ff fd0e 	bl	8005bdc <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 80061c0:	e0a6      	b.n	8006310 <IT_ArbitrateInputTrigger+0x1c8>
		switch(IT_GetActiveTriggerMode())
 80061c2:	f000 f8d1 	bl	8006368 <IT_GetActiveTriggerMode>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d04a      	beq.n	8006262 <IT_ArbitrateInputTrigger+0x11a>
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	f000 8087 	beq.w	80062e0 <IT_ArbitrateInputTrigger+0x198>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d000      	beq.n	80061d8 <IT_ArbitrateInputTrigger+0x90>
				break;
 80061d6:	e098      	b.n	800630a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80061d8:	2201      	movs	r2, #1
 80061da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061de:	4850      	ldr	r0, [pc, #320]	; (8006320 <IT_ArbitrateInputTrigger+0x1d8>)
 80061e0:	f005 ff86 	bl	800c0f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 80061e4:	2200      	movs	r2, #0
 80061e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ea:	484d      	ldr	r0, [pc, #308]	; (8006320 <IT_ArbitrateInputTrigger+0x1d8>)
 80061ec:	f005 ff80 	bl	800c0f0 <HAL_GPIO_WritePin>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset
 80061f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 8006200:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800620a:	f043 0302 	orr.w	r3, r3, #2
 800620e:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8006210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800621a:	f023 031e 	bic.w	r3, r3, #30
 800621e:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;	// set alt pin function to TIM2 CH1
 8006220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);		// enable timer external clock source
 8006230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800623a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800623e:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);		// enable timer "Filtered timer input 1" (tim_ti1fp1)
 8006240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800624a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800624e:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);		// enable timer reset trigger mode
 8006250:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800625a:	f043 0304 	orr.w	r3, r3, #4
 800625e:	6093      	str	r3, [r2, #8]
				break;
 8006260:	e053      	b.n	800630a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006262:	2200      	movs	r2, #0
 8006264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006268:	482d      	ldr	r0, [pc, #180]	; (8006320 <IT_ArbitrateInputTrigger+0x1d8>)
 800626a:	f005 ff41 	bl	800c0f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 800626e:	2201      	movs	r2, #1
 8006270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006274:	482a      	ldr	r0, [pc, #168]	; (8006320 <IT_ArbitrateInputTrigger+0x1d8>)
 8006276:	f005 ff3b 	bl	800c0f0 <HAL_GPIO_WritePin>
				COMP1->CSR |= COMP_CSR_EN;
 800627a:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <IT_ArbitrateInputTrigger+0x1dc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a29      	ldr	r2, [pc, #164]	; (8006324 <IT_ArbitrateInputTrigger+0x1dc>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8006286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006290:	f023 031e 	bic.w	r3, r3, #30
 8006294:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 8006296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80062a0:	f043 0308 	orr.w	r3, r3, #8
 80062a4:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80062a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80062b6:	2100      	movs	r1, #0
 80062b8:	481b      	ldr	r0, [pc, #108]	; (8006328 <IT_ArbitrateInputTrigger+0x1e0>)
 80062ba:	f004 ff01 	bl	800b0c0 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 80062be:	2300      	movs	r3, #0
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	2301      	movs	r3, #1
 80062c4:	4a19      	ldr	r2, [pc, #100]	; (800632c <IT_ArbitrateInputTrigger+0x1e4>)
 80062c6:	2100      	movs	r1, #0
 80062c8:	4817      	ldr	r0, [pc, #92]	; (8006328 <IT_ArbitrateInputTrigger+0x1e0>)
 80062ca:	f004 fe37 	bl	800af3c <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80062ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6013      	str	r3, [r2, #0]
				break;
 80062de:	e014      	b.n	800630a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80062e0:	2201      	movs	r2, #1
 80062e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062e6:	480e      	ldr	r0, [pc, #56]	; (8006320 <IT_ArbitrateInputTrigger+0x1d8>)
 80062e8:	f005 ff02 	bl	800c0f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 80062ec:	2201      	movs	r2, #1
 80062ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062f2:	480b      	ldr	r0, [pc, #44]	; (8006320 <IT_ArbitrateInputTrigger+0x1d8>)
 80062f4:	f005 fefc 	bl	800c0f0 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 80062f8:	22f0      	movs	r2, #240	; 0xf0
 80062fa:	490d      	ldr	r1, [pc, #52]	; (8006330 <IT_ArbitrateInputTrigger+0x1e8>)
 80062fc:	4807      	ldr	r0, [pc, #28]	; (800631c <IT_ArbitrateInputTrigger+0x1d4>)
 80062fe:	f003 f88b 	bl	8009418 <HAL_ADC_Start_DMA>
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006302:	2000      	movs	r0, #0
 8006304:	f7ff fc6a 	bl	8005bdc <FuncO_ApplyProfileToSignal>
				break;
 8006308:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 800630a:	2001      	movs	r0, #1
 800630c:	f000 f854 	bl	80063b8 <IT_SetTriggerStatus>
}
 8006310:	bf00      	nop
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200029c8 	.word	0x200029c8
 800631c:	200028fc 	.word	0x200028fc
 8006320:	48000800 	.word	0x48000800
 8006324:	40010200 	.word	0x40010200
 8006328:	20002a00 	.word	0x20002a00
 800632c:	2000232c 	.word	0x2000232c
 8006330:	20001e9c 	.word	0x20001e9c

08006334 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 8006338:	f000 f816 	bl	8006368 <IT_GetActiveTriggerMode>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d008      	beq.n	8006354 <IT_CycleInputTriggerMode+0x20>
 8006342:	2b02      	cmp	r3, #2
 8006344:	d00a      	beq.n	800635c <IT_CycleInputTriggerMode+0x28>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d000      	beq.n	800634c <IT_CycleInputTriggerMode+0x18>
		case INPUT_TRIGGER_ADC:
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
			break;

		default:
			break;
 800634a:	e00b      	b.n	8006364 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_COMP);
 800634c:	2001      	movs	r0, #1
 800634e:	f000 f817 	bl	8006380 <IT_SetActiveTriggerMode>
			break;
 8006352:	e007      	b.n	8006364 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_ADC);
 8006354:	2002      	movs	r0, #2
 8006356:	f000 f813 	bl	8006380 <IT_SetActiveTriggerMode>
			break;
 800635a:	e003      	b.n	8006364 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
 800635c:	2000      	movs	r0, #0
 800635e:	f000 f80f 	bl	8006380 <IT_SetActiveTriggerMode>
			break;
 8006362:	bf00      	nop
	}
}
 8006364:	bf00      	nop
 8006366:	bd80      	pop	{r7, pc}

08006368 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <IT_GetActiveTriggerMode+0x14>)
 800636e:	781b      	ldrb	r3, [r3, #0]
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000178 	.word	0x20000178

08006380 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 800638a:	4a04      	ldr	r2, [pc, #16]	; (800639c <IT_SetActiveTriggerMode+0x1c>)
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	7013      	strb	r3, [r2, #0]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20000178 	.word	0x20000178

080063a0 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 80063a4:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <IT_GetTriggerStatus+0x14>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20001e9a 	.word	0x20001e9a

080063b8 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 80063c2:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <IT_SetTriggerStatus+0x1c>)
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	7013      	strb	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20001e9a 	.word	0x20001e9a

080063d8 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 80063e0:	4808      	ldr	r0, [pc, #32]	; (8006404 <HAL_COMP_TriggerCallback+0x2c>)
 80063e2:	f004 fbe7 	bl	800abb4 <HAL_COMP_GetOutputLevel>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_COMP_TriggerCallback+0x30>)
 80063ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 80063f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 80063f4:	e002      	b.n	80063fc <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 80063f6:	4b04      	ldr	r3, [pc, #16]	; (8006408 <HAL_COMP_TriggerCallback+0x30>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	200029c8 	.word	0x200029c8
 8006408:	2000232c 	.word	0x2000232c

0800640c <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
	if(trigger_input[0] == 0)
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_ADC_ConvCpltCallback+0x38>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <HAL_ADC_ConvCpltCallback+0x1a>
		OUTPUT_TIMER->ARR = 1;
 800641c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006420:	2201      	movs	r2, #1
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
 8006424:	e004      	b.n	8006430 <HAL_ADC_ConvCpltCallback+0x24>
	else
		OUTPUT_TIMER->ARR = trigger_input[0];
 8006426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800642a:	4b06      	ldr	r3, [pc, #24]	; (8006444 <HAL_ADC_ConvCpltCallback+0x38>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	62d3      	str	r3, [r2, #44]	; 0x2c
	printf("%lu\n", trigger_input[0]);
 8006430:	4b04      	ldr	r3, [pc, #16]	; (8006444 <HAL_ADC_ConvCpltCallback+0x38>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	4804      	ldr	r0, [pc, #16]	; (8006448 <HAL_ADC_ConvCpltCallback+0x3c>)
 8006438:	f00a fcd6 	bl	8010de8 <iprintf>
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20001e9c 	.word	0x20001e9c
 8006448:	08014f1c 	.word	0x08014f1c

0800644c <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8006450:	f7ff f828 	bl	80054a4 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 8006454:	f000 f8ae 	bl	80065b4 <_InitOutputChannels>
	_InitAmpProfiles();
 8006458:	f000 f824 	bl	80064a4 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800645c:	2110      	movs	r1, #16
 800645e:	4810      	ldr	r0, [pc, #64]	; (80064a0 <SM_Init+0x54>)
 8006460:	f004 fd19 	bl	800ae96 <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 8006464:	2201      	movs	r2, #1
 8006466:	2108      	movs	r1, #8
 8006468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800646c:	f005 fe40 	bl	800c0f0 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006480:	2000      	movs	r0, #0
 8006482:	f7ff fbab 	bl	8005bdc <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8006486:	2059      	movs	r0, #89	; 0x59
 8006488:	f000 fc2c 	bl	8006ce4 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 800648c:	2000      	movs	r0, #0
 800648e:	f7ff fc0b 	bl	8005ca8 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8006492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006496:	f7ff f915 	bl	80056c4 <FreqO_ApplyProfile>

}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20002a00 	.word	0x20002a00

080064a4 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b08b      	sub	sp, #44	; 0x2c
 80064a8:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80064aa:	2300      	movs	r3, #0
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	e033      	b.n	8006518 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 80064b0:	493c      	ldr	r1, [pc, #240]	; (80065a4 <_InitAmpProfiles+0x100>)
 80064b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	3304      	adds	r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80064c4:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <_InitAmpProfiles+0x104>)
 80064c6:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 80064c8:	4936      	ldr	r1, [pc, #216]	; (80065a4 <_InitAmpProfiles+0x100>)
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	3308      	adds	r3, #8
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	ee07 3a90 	vmov	s15, r3
 80064de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e2:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 80064e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80064ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80064ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80064f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064fa:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 80064fe:	4929      	ldr	r1, [pc, #164]	; (80065a4 <_InitAmpProfiles+0x100>)
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	4613      	mov	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	3310      	adds	r3, #16
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	3301      	adds	r3, #1
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	2b61      	cmp	r3, #97	; 0x61
 800651c:	ddc8      	ble.n	80064b0 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800651e:	2300      	movs	r3, #0
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	e037      	b.n	8006594 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8006524:	4b21      	ldr	r3, [pc, #132]	; (80065ac <_InitAmpProfiles+0x108>)
 8006526:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006528:	491e      	ldr	r1, [pc, #120]	; (80065a4 <_InitAmpProfiles+0x100>)
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	4613      	mov	r3, r2
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	3304      	adds	r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 800653c:	ed97 7a06 	vldr	s14, [r7, #24]
 8006540:	edd7 7a07 	vldr	s15, [r7, #28]
 8006544:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006548:	ee16 0a90 	vmov	r0, s13
 800654c:	f7fa f824 	bl	8000598 <__aeabi_f2d>
 8006550:	4603      	mov	r3, r0
 8006552:	460c      	mov	r4, r1
 8006554:	ec44 3b10 	vmov	d0, r3, r4
 8006558:	f00c fd52 	bl	8013000 <log10>
 800655c:	ec51 0b10 	vmov	r0, r1, d0
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <_InitAmpProfiles+0x10c>)
 8006566:	f7fa f86f 	bl	8000648 <__aeabi_dmul>
 800656a:	4603      	mov	r3, r0
 800656c:	460c      	mov	r4, r1
 800656e:	4618      	mov	r0, r3
 8006570:	4621      	mov	r1, r4
 8006572:	f7fa fb61 	bl	8000c38 <__aeabi_d2f>
 8006576:	4603      	mov	r3, r0
 8006578:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 800657a:	490a      	ldr	r1, [pc, #40]	; (80065a4 <_InitAmpProfiles+0x100>)
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	4613      	mov	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	330c      	adds	r3, #12
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	3301      	adds	r3, #1
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2b61      	cmp	r3, #97	; 0x61
 8006598:	ddc4      	ble.n	8006524 <_InitAmpProfiles+0x80>

	}
}
 800659a:	bf00      	nop
 800659c:	372c      	adds	r7, #44	; 0x2c
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd90      	pop	{r4, r7, pc}
 80065a2:	bf00      	nop
 80065a4:	2000017c 	.word	0x2000017c
 80065a8:	402ccccd 	.word	0x402ccccd
 80065ac:	3a83126f 	.word	0x3a83126f
 80065b0:	40340000 	.word	0x40340000

080065b4 <_InitOutputChannels>:

void _InitOutputChannels()
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80065ba:	4b28      	ldr	r3, [pc, #160]	; (800665c <_InitOutputChannels+0xa8>)
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80065c0:	4b27      	ldr	r3, [pc, #156]	; (8006660 <_InitOutputChannels+0xac>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4a25      	ldr	r2, [pc, #148]	; (800665c <_InitOutputChannels+0xa8>)
 80065c6:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80065c8:	4b24      	ldr	r3, [pc, #144]	; (800665c <_InitOutputChannels+0xa8>)
 80065ca:	4a25      	ldr	r2, [pc, #148]	; (8006660 <_InitOutputChannels+0xac>)
 80065cc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80065d0:	2300      	movs	r3, #0
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e00b      	b.n	80065ee <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80065d6:	4a23      	ldr	r2, [pc, #140]	; (8006664 <_InitOutputChannels+0xb0>)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065de:	491f      	ldr	r1, [pc, #124]	; (800665c <_InitOutputChannels+0xa8>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3302      	adds	r3, #2
 80065e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3301      	adds	r3, #1
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b77      	cmp	r3, #119	; 0x77
 80065f2:	ddf0      	ble.n	80065d6 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80065f4:	4b19      	ldr	r3, [pc, #100]	; (800665c <_InitOutputChannels+0xa8>)
 80065f6:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <_InitOutputChannels+0xb4>)
 80065f8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <_InitOutputChannels+0xa8>)
 80065fe:	4a1b      	ldr	r2, [pc, #108]	; (800666c <_InitOutputChannels+0xb8>)
 8006600:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006604:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <_InitOutputChannels+0xbc>)
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800660a:	4b15      	ldr	r3, [pc, #84]	; (8006660 <_InitOutputChannels+0xac>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4a18      	ldr	r2, [pc, #96]	; (8006670 <_InitOutputChannels+0xbc>)
 8006610:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006612:	4b17      	ldr	r3, [pc, #92]	; (8006670 <_InitOutputChannels+0xbc>)
 8006614:	4a12      	ldr	r2, [pc, #72]	; (8006660 <_InitOutputChannels+0xac>)
 8006616:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800661a:	2300      	movs	r3, #0
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	e00b      	b.n	8006638 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006620:	4a10      	ldr	r2, [pc, #64]	; (8006664 <_InitOutputChannels+0xb0>)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006628:	4911      	ldr	r1, [pc, #68]	; (8006670 <_InitOutputChannels+0xbc>)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	3302      	adds	r3, #2
 800662e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b77      	cmp	r3, #119	; 0x77
 800663c:	ddf0      	ble.n	8006620 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 800663e:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <_InitOutputChannels+0xbc>)
 8006640:	4a09      	ldr	r2, [pc, #36]	; (8006668 <_InitOutputChannels+0xb4>)
 8006642:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006646:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <_InitOutputChannels+0xbc>)
 8006648:	4a08      	ldr	r2, [pc, #32]	; (800666c <_InitOutputChannels+0xb8>)
 800664a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20002334 	.word	0x20002334
 8006660:	20000128 	.word	0x20000128
 8006664:	200014b8 	.word	0x200014b8
 8006668:	20000b38 	.word	0x20000b38
 800666c:	20000175 	.word	0x20000175
 8006670:	20002528 	.word	0x20002528

08006674 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <SM_GetOutputChannel+0x24>)
 8006686:	e000      	b.n	800668a <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006688:	4b04      	ldr	r3, [pc, #16]	; (800669c <SM_GetOutputChannel+0x28>)
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20002334 	.word	0x20002334
 800669c:	20002528 	.word	0x20002528

080066a0 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b096      	sub	sp, #88	; 0x58
 80066a4:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 80066a6:	4889      	ldr	r0, [pc, #548]	; (80068cc <SM_EnablePwmToAux+0x22c>)
 80066a8:	f00a fc12 	bl	8010ed0 <puts>

	HAL_StatusTypeDef res = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	609a      	str	r2, [r3, #8]
 80066be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80066cc:	f107 031c 	add.w	r3, r7, #28
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	611a      	str	r2, [r3, #16]
 80066dc:	615a      	str	r2, [r3, #20]
 80066de:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e0:	f107 0308 	add.w	r3, r7, #8
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	609a      	str	r2, [r3, #8]
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 80066f0:	4b77      	ldr	r3, [pc, #476]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 80066f2:	4a78      	ldr	r2, [pc, #480]	; (80068d4 <SM_EnablePwmToAux+0x234>)
 80066f4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80066f6:	4b76      	ldr	r3, [pc, #472]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80066fc:	4b74      	ldr	r3, [pc, #464]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 80066fe:	2210      	movs	r2, #16
 8006700:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006702:	4b73      	ldr	r3, [pc, #460]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 8006704:	2201      	movs	r2, #1
 8006706:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006708:	4b71      	ldr	r3, [pc, #452]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 800670a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006710:	4b6f      	ldr	r3, [pc, #444]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006716:	486e      	ldr	r0, [pc, #440]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 8006718:	f006 fd8c 	bl	800d234 <HAL_TIM_Base_Init>
 800671c:	4603      	mov	r3, r0
 800671e:	461a      	mov	r2, r3
 8006720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006724:	4293      	cmp	r3, r2
 8006726:	d107      	bne.n	8006738 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800672c:	4619      	mov	r1, r3
 800672e:	486a      	ldr	r0, [pc, #424]	; (80068d8 <SM_EnablePwmToAux+0x238>)
 8006730:	f00a fb5a 	bl	8010de8 <iprintf>
		Error_Handler();
 8006734:	f001 fb94 	bl	8007e60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800673c:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 800673e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006742:	4619      	mov	r1, r3
 8006744:	4862      	ldr	r0, [pc, #392]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 8006746:	f007 fb95 	bl	800de74 <HAL_TIM_ConfigClockSource>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006752:	4293      	cmp	r3, r2
 8006754:	d107      	bne.n	8006766 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8006756:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800675a:	4619      	mov	r1, r3
 800675c:	485f      	ldr	r0, [pc, #380]	; (80068dc <SM_EnablePwmToAux+0x23c>)
 800675e:	f00a fb43 	bl	8010de8 <iprintf>
		Error_Handler();
 8006762:	f001 fb7d 	bl	8007e60 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006766:	485a      	ldr	r0, [pc, #360]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 8006768:	f006 fe77 	bl	800d45a <HAL_TIM_PWM_Init>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006774:	4293      	cmp	r3, r2
 8006776:	d107      	bne.n	8006788 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800677c:	4619      	mov	r1, r3
 800677e:	4858      	ldr	r0, [pc, #352]	; (80068e0 <SM_EnablePwmToAux+0x240>)
 8006780:	f00a fb32 	bl	8010de8 <iprintf>
		Error_Handler();
 8006784:	f001 fb6c 	bl	8007e60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006788:	2320      	movs	r3, #32
 800678a:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800678c:	2300      	movs	r3, #0
 800678e:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006790:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006794:	4619      	mov	r1, r3
 8006796:	484e      	ldr	r0, [pc, #312]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 8006798:	f008 f922 	bl	800e9e0 <HAL_TIMEx_MasterConfigSynchronization>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d107      	bne.n	80067b8 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 80067a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ac:	4619      	mov	r1, r3
 80067ae:	484d      	ldr	r0, [pc, #308]	; (80068e4 <SM_EnablePwmToAux+0x244>)
 80067b0:	f00a fb1a 	bl	8010de8 <iprintf>
		Error_Handler();
 80067b4:	f001 fb54 	bl	8007e60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067b8:	2360      	movs	r3, #96	; 0x60
 80067ba:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 80067c8:	f107 031c 	add.w	r3, r7, #28
 80067cc:	2200      	movs	r2, #0
 80067ce:	4619      	mov	r1, r3
 80067d0:	483f      	ldr	r0, [pc, #252]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 80067d2:	f007 fa3f 	bl	800dc54 <HAL_TIM_PWM_ConfigChannel>
 80067d6:	4603      	mov	r3, r0
 80067d8:	461a      	mov	r2, r3
 80067da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067de:	4293      	cmp	r3, r2
 80067e0:	d107      	bne.n	80067f2 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 80067e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067e6:	4619      	mov	r1, r3
 80067e8:	483f      	ldr	r0, [pc, #252]	; (80068e8 <SM_EnablePwmToAux+0x248>)
 80067ea:	f00a fafd 	bl	8010de8 <iprintf>
		Error_Handler();
 80067ee:	f001 fb37 	bl	8007e60 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 80067f2:	483e      	ldr	r0, [pc, #248]	; (80068ec <SM_EnablePwmToAux+0x24c>)
 80067f4:	f00a fb6c 	bl	8010ed0 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80067f8:	4b3d      	ldr	r3, [pc, #244]	; (80068f0 <SM_EnablePwmToAux+0x250>)
 80067fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fc:	4a3c      	ldr	r2, [pc, #240]	; (80068f0 <SM_EnablePwmToAux+0x250>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006804:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <SM_EnablePwmToAux+0x250>)
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006810:	2340      	movs	r3, #64	; 0x40
 8006812:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006814:	2302      	movs	r3, #2
 8006816:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006818:	2300      	movs	r3, #0
 800681a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006820:	2302      	movs	r3, #2
 8006822:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006824:	4833      	ldr	r0, [pc, #204]	; (80068f4 <SM_EnablePwmToAux+0x254>)
 8006826:	f00a fb53 	bl	8010ed0 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800682a:	f107 0308 	add.w	r3, r7, #8
 800682e:	4619      	mov	r1, r3
 8006830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006834:	f005 f9f8 	bl	800bc28 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006838:	482f      	ldr	r0, [pc, #188]	; (80068f8 <SM_EnablePwmToAux+0x258>)
 800683a:	f00a fb49 	bl	8010ed0 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 800683e:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <SM_EnablePwmToAux+0x250>)
 8006840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006842:	4a2b      	ldr	r2, [pc, #172]	; (80068f0 <SM_EnablePwmToAux+0x250>)
 8006844:	f043 0302 	orr.w	r3, r3, #2
 8006848:	6593      	str	r3, [r2, #88]	; 0x58
 800684a:	4b29      	ldr	r3, [pc, #164]	; (80068f0 <SM_EnablePwmToAux+0x250>)
 800684c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8006856:	4829      	ldr	r0, [pc, #164]	; (80068fc <SM_EnablePwmToAux+0x25c>)
 8006858:	f00a fb3a 	bl	8010ed0 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	201d      	movs	r0, #29
 8006862:	f004 fab4 	bl	800adce <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006866:	4826      	ldr	r0, [pc, #152]	; (8006900 <SM_EnablePwmToAux+0x260>)
 8006868:	f00a fb32 	bl	8010ed0 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800686c:	201d      	movs	r0, #29
 800686e:	f004 fac8 	bl	800ae02 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006872:	4824      	ldr	r0, [pc, #144]	; (8006904 <SM_EnablePwmToAux+0x264>)
 8006874:	f00a fb2c 	bl	8010ed0 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006878:	2100      	movs	r1, #0
 800687a:	4815      	ldr	r0, [pc, #84]	; (80068d0 <SM_EnablePwmToAux+0x230>)
 800687c:	f006 fe4e 	bl	800d51c <HAL_TIM_PWM_Start>
 8006880:	4603      	mov	r3, r0
 8006882:	461a      	mov	r2, r3
 8006884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006888:	4293      	cmp	r3, r2
 800688a:	d107      	bne.n	800689c <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 800688c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006890:	4619      	mov	r1, r3
 8006892:	481d      	ldr	r0, [pc, #116]	; (8006908 <SM_EnablePwmToAux+0x268>)
 8006894:	f00a faa8 	bl	8010de8 <iprintf>
		Error_Handler();
 8006898:	f001 fae2 	bl	8007e60 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 800689c:	481b      	ldr	r0, [pc, #108]	; (800690c <SM_EnablePwmToAux+0x26c>)
 800689e:	f00a fb17 	bl	8010ed0 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 80068a2:	2007      	movs	r0, #7
 80068a4:	f7ff fb9e 	bl	8005fe4 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 80068a8:	4819      	ldr	r0, [pc, #100]	; (8006910 <SM_EnablePwmToAux+0x270>)
 80068aa:	f00a fb11 	bl	8010ed0 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <SM_EnablePwmToAux+0x234>)
 80068b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80068b4:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 80068b6:	4817      	ldr	r0, [pc, #92]	; (8006914 <SM_EnablePwmToAux+0x274>)
 80068b8:	f00a fb0a 	bl	8010ed0 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <SM_EnablePwmToAux+0x234>)
 80068be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80068c4:	bf00      	nop
 80068c6:	3758      	adds	r7, #88	; 0x58
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	08014f6c 	.word	0x08014f6c
 80068d0:	200022dc 	.word	0x200022dc
 80068d4:	40000400 	.word	0x40000400
 80068d8:	08014f80 	.word	0x08014f80
 80068dc:	08014fb4 	.word	0x08014fb4
 80068e0:	08014ff0 	.word	0x08014ff0
 80068e4:	08015020 	.word	0x08015020
 80068e8:	08015068 	.word	0x08015068
 80068ec:	080150a4 	.word	0x080150a4
 80068f0:	40021000 	.word	0x40021000
 80068f4:	080150d4 	.word	0x080150d4
 80068f8:	080150f8 	.word	0x080150f8
 80068fc:	08015130 	.word	0x08015130
 8006900:	08015158 	.word	0x08015158
 8006904:	08015180 	.word	0x08015180
 8006908:	080151a8 	.word	0x080151a8
 800690c:	080151dc 	.word	0x080151dc
 8006910:	08015208 	.word	0x08015208
 8006914:	0801523c 	.word	0x0801523c

08006918 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 800691e:	4815      	ldr	r0, [pc, #84]	; (8006974 <SM_DisablePwmToAux+0x5c>)
 8006920:	f00a fa62 	bl	8010de8 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006928:	4813      	ldr	r0, [pc, #76]	; (8006978 <SM_DisablePwmToAux+0x60>)
 800692a:	f00a fad1 	bl	8010ed0 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 800692e:	2100      	movs	r1, #0
 8006930:	4812      	ldr	r0, [pc, #72]	; (800697c <SM_DisablePwmToAux+0x64>)
 8006932:	f006 fecd 	bl	800d6d0 <HAL_TIM_PWM_Stop>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	4293      	cmp	r3, r2
 800693e:	d106      	bne.n	800694e <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	4619      	mov	r1, r3
 8006944:	480e      	ldr	r0, [pc, #56]	; (8006980 <SM_DisablePwmToAux+0x68>)
 8006946:	f00a fa4f 	bl	8010de8 <iprintf>
		Error_Handler();
 800694a:	f001 fa89 	bl	8007e60 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 800694e:	480d      	ldr	r0, [pc, #52]	; (8006984 <SM_DisablePwmToAux+0x6c>)
 8006950:	f00a fabe 	bl	8010ed0 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <SM_DisablePwmToAux+0x70>)
 8006956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006958:	4a0b      	ldr	r2, [pc, #44]	; (8006988 <SM_DisablePwmToAux+0x70>)
 800695a:	f023 0302 	bic.w	r3, r3, #2
 800695e:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006960:	480a      	ldr	r0, [pc, #40]	; (800698c <SM_DisablePwmToAux+0x74>)
 8006962:	f00a fab5 	bl	8010ed0 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006966:	201d      	movs	r0, #29
 8006968:	f004 fa59 	bl	800ae1e <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	0801526c 	.word	0x0801526c
 8006978:	08015280 	.word	0x08015280
 800697c:	200022dc 	.word	0x200022dc
 8006980:	080152a8 	.word	0x080152a8
 8006984:	080152dc 	.word	0x080152dc
 8006988:	40021000 	.word	0x40021000
 800698c:	08015318 	.word	0x08015318

08006990 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b0b2      	sub	sp, #200	; 0xc8
 8006994:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006996:	4860      	ldr	r0, [pc, #384]	; (8006b18 <SM_EnableDacToAux+0x188>)
 8006998:	f00a fa26 	bl	8010de8 <iprintf>

	HAL_StatusTypeDef res = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 80069a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80069a6:	2230      	movs	r2, #48	; 0x30
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f009 fdb8 	bl	8010520 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	609a      	str	r2, [r3, #8]
 80069bc:	60da      	str	r2, [r3, #12]
 80069be:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 80069c0:	4b56      	ldr	r3, [pc, #344]	; (8006b1c <SM_EnableDacToAux+0x18c>)
 80069c2:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 80069c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80069c8:	4618      	mov	r0, r3
 80069ca:	f004 fa42 	bl	800ae52 <HAL_DAC_Init>
 80069ce:	4603      	mov	r3, r0
 80069d0:	461a      	mov	r2, r3
 80069d2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d107      	bne.n	80069ea <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 80069da:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80069de:	4619      	mov	r1, r3
 80069e0:	484f      	ldr	r0, [pc, #316]	; (8006b20 <SM_EnableDacToAux+0x190>)
 80069e2:	f00a fa01 	bl	8010de8 <iprintf>
		Error_Handler();
 80069e6:	f001 fa3b 	bl	8007e60 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80069ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_TRGO;
 8006a04:	2312      	movs	r3, #18
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006a22:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006a26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f004 fbf9 	bl	800b224 <HAL_DAC_ConfigChannel>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d107      	bne.n	8006a4e <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006a3e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a42:	4619      	mov	r1, r3
 8006a44:	4837      	ldr	r0, [pc, #220]	; (8006b24 <SM_EnableDacToAux+0x194>)
 8006a46:	f00a f9cf 	bl	8010de8 <iprintf>
		Error_Handler();
 8006a4a:	f001 fa09 	bl	8007e60 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006a4e:	4836      	ldr	r0, [pc, #216]	; (8006b28 <SM_EnableDacToAux+0x198>)
 8006a50:	f00a fa3e 	bl	8010ed0 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006a54:	4b35      	ldr	r3, [pc, #212]	; (8006b2c <SM_EnableDacToAux+0x19c>)
 8006a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a58:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <SM_EnableDacToAux+0x19c>)
 8006a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a60:	4b32      	ldr	r3, [pc, #200]	; (8006b2c <SM_EnableDacToAux+0x19c>)
 8006a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006a6c:	4830      	ldr	r0, [pc, #192]	; (8006b30 <SM_EnableDacToAux+0x1a0>)
 8006a6e:	f00a fa2f 	bl	8010ed0 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006a72:	4b2e      	ldr	r3, [pc, #184]	; (8006b2c <SM_EnableDacToAux+0x19c>)
 8006a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a76:	4a2d      	ldr	r2, [pc, #180]	; (8006b2c <SM_EnableDacToAux+0x19c>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a7e:	4b2b      	ldr	r3, [pc, #172]	; (8006b2c <SM_EnableDacToAux+0x19c>)
 8006a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	607b      	str	r3, [r7, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a90:	2303      	movs	r3, #3
 8006a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006a9c:	4825      	ldr	r0, [pc, #148]	; (8006b34 <SM_EnableDacToAux+0x1a4>)
 8006a9e:	f00a fa17 	bl	8010ed0 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006aac:	f005 f8bc 	bl	800bc28 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006ab0:	4b21      	ldr	r3, [pc, #132]	; (8006b38 <SM_EnableDacToAux+0x1a8>)
 8006ab2:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006ab4:	2329      	movs	r3, #41	; 0x29
 8006ab6:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ab8:	2310      	movs	r3, #16
 8006aba:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ac8:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006ad8:	f107 030c 	add.w	r3, r7, #12
 8006adc:	4618      	mov	r0, r3
 8006ade:	f004 fdd7 	bl	800b690 <HAL_DMA_Init>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d107      	bne.n	8006afe <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006aee:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006af2:	4619      	mov	r1, r3
 8006af4:	4811      	ldr	r0, [pc, #68]	; (8006b3c <SM_EnableDacToAux+0x1ac>)
 8006af6:	f00a f977 	bl	8010de8 <iprintf>
		Error_Handler();
 8006afa:	f001 f9b1 	bl	8007e60 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006afe:	4810      	ldr	r0, [pc, #64]	; (8006b40 <SM_EnableDacToAux+0x1b0>)
 8006b00:	f00a f9e6 	bl	8010ed0 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006b04:	f107 030c 	add.w	r3, r7, #12
 8006b08:	677b      	str	r3, [r7, #116]	; 0x74
 8006b0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006b10:	bf00      	nop
 8006b12:	37c8      	adds	r7, #200	; 0xc8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	08015340 	.word	0x08015340
 8006b1c:	50000c00 	.word	0x50000c00
 8006b20:	08015354 	.word	0x08015354
 8006b24:	08015380 	.word	0x08015380
 8006b28:	080153b8 	.word	0x080153b8
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	080153e8 	.word	0x080153e8
 8006b34:	08015418 	.word	0x08015418
 8006b38:	40020030 	.word	0x40020030
 8006b3c:	0801543c 	.word	0x0801543c
 8006b40:	08015468 	.word	0x08015468

08006b44 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006b48:	4806      	ldr	r0, [pc, #24]	; (8006b64 <SM_DisableDacToAux+0x20>)
 8006b4a:	f00a f9c1 	bl	8010ed0 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006b4e:	4806      	ldr	r0, [pc, #24]	; (8006b68 <SM_DisableDacToAux+0x24>)
 8006b50:	f00a f9be 	bl	8010ed0 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006b54:	2140      	movs	r1, #64	; 0x40
 8006b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b5a:	f005 f9e7 	bl	800bf2c <HAL_GPIO_DeInit>

}
 8006b5e:	bf00      	nop
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	0801548c 	.word	0x0801548c
 8006b68:	080154a0 	.word	0x080154a0

08006b6c <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006b7c:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <SM_GetEncoderValue+0x34>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <SM_GetEncoderValue+0x34>)
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	e002      	b.n	8006b94 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006b8e:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <SM_GetEncoderValue+0x34>)
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	b29b      	uxth	r3, r3
	}
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40012c00 	.word	0x40012c00

08006ba4 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <SM_GetOutputInHertz+0x18>
 8006bb4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	e008      	b.n	8006bce <SM_GetOutputInHertz+0x2a>
 8006bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <SM_GetOutputInHertz+0x3c>
 8006bd8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	e008      	b.n	8006bf2 <SM_GetOutputInHertz+0x4e>
 8006be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006bf2:	ed97 7a02 	vldr	s14, [r7, #8]
 8006bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bfe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006c28 <SM_GetOutputInHertz+0x84>
 8006c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c06:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c0e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006c2c <SM_GetOutputInHertz+0x88>
 8006c12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c16:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	4d2037a0 	.word	0x4d2037a0
 8006c2c:	42f00000 	.word	0x42f00000

08006c30 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006c3c:	887b      	ldrh	r3, [r7, #2]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <SM_ConvertPeriodToHertz+0x16>
 8006c42:	2301      	movs	r3, #1
 8006c44:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006c78 <SM_ConvertPeriodToHertz+0x48>
 8006c62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006c66:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	4d2037a0 	.word	0x4d2037a0

08006c7c <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006c80:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <SM_IsFuncPwmDutyMode+0x14>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	2000225c 	.word	0x2000225c

08006c94 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f083 0301 	eor.w	r3, r3, #1
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006ca4:	701a      	strb	r2, [r3, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	2000225c 	.word	0x2000225c

08006cb4 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006cb8:	4b03      	ldr	r3, [pc, #12]	; (8006cc8 <SM_ResetFuncPwmDutyMode+0x14>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]

}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	2000225c 	.word	0x2000225c

08006ccc <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006cd0:	4b03      	ldr	r3, [pc, #12]	; (8006ce0 <VPP_ResetLastEncoderValue+0x14>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	801a      	strh	r2, [r3, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	2000225e 	.word	0x2000225e

08006ce4 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <VPP_ApplyProfileToSignal+0x58>)
 8006cfa:	4413      	add	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006cfe:	2000      	movs	r0, #0
 8006d00:	f7ff fcb8 	bl	8006674 <SM_GetOutputChannel>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	7a1b      	ldrb	r3, [r3, #8]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff f967 	bl	8005fe4 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8b1b      	ldrh	r3, [r3, #24]
 8006d26:	4618      	mov	r0, r3
 8006d28:	eef0 0a47 	vmov.f32	s1, s14
 8006d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d30:	f000 f830 	bl	8006d94 <_ProcessSignalDataTable>


}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	2000017c 	.word	0x2000017c

08006d40 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006d4a:	79fa      	ldrb	r2, [r7, #7]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a0e      	ldr	r2, [pc, #56]	; (8006d90 <VPP_ApplyProfileToAux+0x50>)
 8006d56:	4413      	add	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	f7ff fc8a 	bl	8006674 <SM_GetOutputChannel>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	ed93 7a05 	vldr	s14, [r3, #20]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8b1b      	ldrh	r3, [r3, #24]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	eef0 0a47 	vmov.f32	s1, s14
 8006d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d82:	f000 f88d 	bl	8006ea0 <_ProcessAuxDataTable>



}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	2000017c 	.word	0x2000017c

08006d94 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8006d9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006da2:	4603      	mov	r3, r0
 8006da4:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006da6:	2000      	movs	r0, #0
 8006da8:	f7ff fc64 	bl	8006674 <SM_GetOutputChannel>
 8006dac:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b06      	cmp	r3, #6
 8006db8:	d06b      	beq.n	8006e92 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbe:	e00c      	b.n	8006dda <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4933      	ldr	r1, [pc, #204]	; (8006e9c <_ProcessSignalDataTable+0x108>)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	2b77      	cmp	r3, #119	; 0x77
 8006dde:	ddef      	ble.n	8006dc0 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006de0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006de4:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	089b      	lsrs	r3, r3, #2
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dfa:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
 8006e02:	e02e      	b.n	8006e62 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006e04:	4a25      	ldr	r2, [pc, #148]	; (8006e9c <_ProcessSignalDataTable+0x108>)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e20:	ee17 1a90 	vmov	r1, s15
 8006e24:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <_ProcessSignalDataTable+0x108>)
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	; (8006e9c <_ProcessSignalDataTable+0x108>)
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e40:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006e44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e50:	ee17 1a90 	vmov	r1, s15
 8006e54:	4a11      	ldr	r2, [pc, #68]	; (8006e9c <_ProcessSignalDataTable+0x108>)
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b77      	cmp	r3, #119	; 0x77
 8006e66:	ddcd      	ble.n	8006e04 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	e00e      	b.n	8006e8c <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f7ff fc00 	bl	8006674 <SM_GetOutputChannel>
 8006e74:	4601      	mov	r1, r0
 8006e76:	4a09      	ldr	r2, [pc, #36]	; (8006e9c <_ProcessSignalDataTable+0x108>)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	3302      	adds	r3, #2
 8006e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b77      	cmp	r3, #119	; 0x77
 8006e90:	dded      	ble.n	8006e6e <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006e92:	bf00      	nop
 8006e94:	3728      	adds	r7, #40	; 0x28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000271c 	.word	0x2000271c

08006ea0 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	ed87 0a03 	vstr	s0, [r7, #12]
 8006eaa:	edc7 0a02 	vstr	s1, [r7, #8]
 8006eae:	4603      	mov	r3, r0
 8006eb0:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f7ff fbde 	bl	8006674 <SM_GetOutputChannel>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	d059      	beq.n	8006f78 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	e00f      	b.n	8006eea <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006eca:	2001      	movs	r0, #1
 8006ecc:	f7ff fbd2 	bl	8006674 <SM_GetOutputChannel>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	4933      	ldr	r1, [pc, #204]	; (8006fac <_ProcessAuxDataTable+0x10c>)
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b77      	cmp	r3, #119	; 0x77
 8006eee:	ddec      	ble.n	8006eca <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006ef0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006ef4:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d008      	beq.n	8006f0e <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006efc:	88fb      	ldrh	r3, [r7, #6]
 8006efe:	089b      	lsrs	r3, r3, #2
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f0a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	e02e      	b.n	8006f72 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006f14:	4a25      	ldr	r2, [pc, #148]	; (8006fac <_ProcessAuxDataTable+0x10c>)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f30:	ee17 1a90 	vmov	r1, s15
 8006f34:	4a1d      	ldr	r2, [pc, #116]	; (8006fac <_ProcessAuxDataTable+0x10c>)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <_ProcessAuxDataTable+0x10c>)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f50:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f60:	ee17 1a90 	vmov	r1, s15
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <_ProcessAuxDataTable+0x10c>)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b77      	cmp	r3, #119	; 0x77
 8006f76:	ddcd      	ble.n	8006f14 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	e00e      	b.n	8006f9c <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f7ff fb78 	bl	8006674 <SM_GetOutputChannel>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <_ProcessAuxDataTable+0x10c>)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	3302      	adds	r3, #2
 8006f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b77      	cmp	r3, #119	; 0x77
 8006fa0:	dded      	ble.n	8006f7e <_ProcessAuxDataTable+0xde>
	}
}
 8006fa2:	bf00      	nop
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	2000271c 	.word	0x2000271c

08006fb0 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f7ff fb5a 	bl	8006674 <SM_GetOutputChannel>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d90c      	bls.n	8006fee <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b61      	cmp	r3, #97	; 0x61
 8006fde:	d901      	bls.n	8006fe4 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006fe0:	2361      	movs	r3, #97	; 0x61
 8006fe2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff fe7c 	bl	8006ce4 <VPP_ApplyProfileToSignal>
 8006fec:	e010      	b.n	8007010 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d20b      	bcs.n	8007010 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b61      	cmp	r3, #97	; 0x61
 8007002:	d901      	bls.n	8007008 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8007004:	2300      	movs	r3, #0
 8007006:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fe6a 	bl	8006ce4 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8007010:	4a03      	ldr	r2, [pc, #12]	; (8007020 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	8013      	strh	r3, [r2, #0]

}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	2000225e 	.word	0x2000225e

08007024 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800702e:	2001      	movs	r0, #1
 8007030:	f7ff fb20 	bl	8006674 <SM_GetOutputChannel>
 8007034:	4603      	mov	r3, r0
 8007036:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	429a      	cmp	r2, r3
 8007046:	d90c      	bls.n	8007062 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	3301      	adds	r3, #1
 800704c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	2b61      	cmp	r3, #97	; 0x61
 8007052:	d901      	bls.n	8007058 <VPP_MapEncoderPositionToAuxOutput+0x34>
 8007054:	2361      	movs	r3, #97	; 0x61
 8007056:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff fe70 	bl	8006d40 <VPP_ApplyProfileToAux>
 8007060:	e010      	b.n	8007084 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	429a      	cmp	r2, r3
 800706a:	d20b      	bcs.n	8007084 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	3b01      	subs	r3, #1
 8007070:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b61      	cmp	r3, #97	; 0x61
 8007076:	d901      	bls.n	800707c <VPP_MapEncoderPositionToAuxOutput+0x58>
 8007078:	2300      	movs	r3, #0
 800707a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fe5e 	bl	8006d40 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8007084:	4a03      	ldr	r2, [pc, #12]	; (8007094 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007086:	88fb      	ldrh	r3, [r7, #6]
 8007088:	8013      	strh	r3, [r2, #0]

}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	2000225e 	.word	0x2000225e

08007098 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08c      	sub	sp, #48	; 0x30
 800709c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800709e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	2220      	movs	r2, #32
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f009 fa35 	bl	8010520 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80070b6:	4b32      	ldr	r3, [pc, #200]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80070be:	4b30      	ldr	r3, [pc, #192]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80070c4:	4b2e      	ldr	r3, [pc, #184]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070ca:	4b2d      	ldr	r3, [pc, #180]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80070d0:	4b2b      	ldr	r3, [pc, #172]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80070d6:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070d8:	2200      	movs	r2, #0
 80070da:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070dc:	4b28      	ldr	r3, [pc, #160]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070de:	2204      	movs	r2, #4
 80070e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80070e2:	4b27      	ldr	r3, [pc, #156]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80070e8:	4b25      	ldr	r3, [pc, #148]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80070f4:	4b22      	ldr	r3, [pc, #136]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070fc:	4b20      	ldr	r3, [pc, #128]	; (8007180 <MX_ADC1_Init+0xe8>)
 80070fe:	2200      	movs	r2, #0
 8007100:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007102:	4b1f      	ldr	r3, [pc, #124]	; (8007180 <MX_ADC1_Init+0xe8>)
 8007104:	2200      	movs	r2, #0
 8007106:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007108:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <MX_ADC1_Init+0xe8>)
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007110:	4b1b      	ldr	r3, [pc, #108]	; (8007180 <MX_ADC1_Init+0xe8>)
 8007112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007116:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007118:	4b19      	ldr	r3, [pc, #100]	; (8007180 <MX_ADC1_Init+0xe8>)
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007120:	4817      	ldr	r0, [pc, #92]	; (8007180 <MX_ADC1_Init+0xe8>)
 8007122:	f001 ffb9 	bl	8009098 <HAL_ADC_Init>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800712c:	f000 fe98 	bl	8007e60 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007130:	2300      	movs	r3, #0
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007138:	4619      	mov	r1, r3
 800713a:	4811      	ldr	r0, [pc, #68]	; (8007180 <MX_ADC1_Init+0xe8>)
 800713c:	f003 f880 	bl	800a240 <HAL_ADCEx_MultiModeConfigChannel>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8007146:	f000 fe8b 	bl	8007e60 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <MX_ADC1_Init+0xec>)
 800714c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800714e:	2306      	movs	r3, #6
 8007150:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007156:	237f      	movs	r3, #127	; 0x7f
 8007158:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800715a:	2304      	movs	r3, #4
 800715c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007162:	1d3b      	adds	r3, r7, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4806      	ldr	r0, [pc, #24]	; (8007180 <MX_ADC1_Init+0xe8>)
 8007168:	f002 fa9a 	bl	80096a0 <HAL_ADC_ConfigChannel>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8007172:	f000 fe75 	bl	8007e60 <Error_Handler>
  }

}
 8007176:	bf00      	nop
 8007178:	3730      	adds	r7, #48	; 0x30
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	200028fc 	.word	0x200028fc
 8007184:	0c900008 	.word	0x0c900008

08007188 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071a8:	d14f      	bne.n	800724a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80071aa:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <HAL_ADC_MspInit+0xcc>)
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	4a29      	ldr	r2, [pc, #164]	; (8007254 <HAL_ADC_MspInit+0xcc>)
 80071b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071b6:	4b27      	ldr	r3, [pc, #156]	; (8007254 <HAL_ADC_MspInit+0xcc>)
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <HAL_ADC_MspInit+0xcc>)
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	4a23      	ldr	r2, [pc, #140]	; (8007254 <HAL_ADC_MspInit+0xcc>)
 80071c8:	f043 0301 	orr.w	r3, r3, #1
 80071cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071ce:	4b21      	ldr	r3, [pc, #132]	; (8007254 <HAL_ADC_MspInit+0xcc>)
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071da:	2304      	movs	r3, #4
 80071dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071de:	2303      	movs	r3, #3
 80071e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071e6:	f107 0314 	add.w	r3, r7, #20
 80071ea:	4619      	mov	r1, r3
 80071ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071f0:	f004 fd1a 	bl	800bc28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80071f4:	4b18      	ldr	r3, [pc, #96]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <HAL_ADC_MspInit+0xd4>)
 80071f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80071fa:	4b17      	ldr	r3, [pc, #92]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 80071fc:	2205      	movs	r2, #5
 80071fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007200:	4b15      	ldr	r3, [pc, #84]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 8007202:	2200      	movs	r2, #0
 8007204:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 8007208:	2200      	movs	r2, #0
 800720a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800720c:	4b12      	ldr	r3, [pc, #72]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 800720e:	2280      	movs	r2, #128	; 0x80
 8007210:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 8007214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007218:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 800721c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007220:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 8007224:	2220      	movs	r2, #32
 8007226:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 800722a:	2200      	movs	r2, #0
 800722c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800722e:	480a      	ldr	r0, [pc, #40]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 8007230:	f004 fa2e 	bl	800b690 <HAL_DMA_Init>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800723a:	f000 fe11 	bl	8007e60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a05      	ldr	r2, [pc, #20]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
 8007244:	4a04      	ldr	r2, [pc, #16]	; (8007258 <HAL_ADC_MspInit+0xd0>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800724a:	bf00      	nop
 800724c:	3728      	adds	r7, #40	; 0x28
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40021000 	.word	0x40021000
 8007258:	20002968 	.word	0x20002968
 800725c:	40020008 	.word	0x40020008

08007260 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8007264:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <MX_COMP1_Init+0x44>)
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <MX_COMP1_Init+0x48>)
 8007268:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800726a:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <MX_COMP1_Init+0x44>)
 800726c:	2200      	movs	r2, #0
 800726e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8007270:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <MX_COMP1_Init+0x44>)
 8007272:	4a0e      	ldr	r2, [pc, #56]	; (80072ac <MX_COMP1_Init+0x4c>)
 8007274:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <MX_COMP1_Init+0x44>)
 8007278:	2200      	movs	r2, #0
 800727a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 800727c:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <MX_COMP1_Init+0x44>)
 800727e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007282:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8007284:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <MX_COMP1_Init+0x44>)
 8007286:	2200      	movs	r2, #0
 8007288:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800728a:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <MX_COMP1_Init+0x44>)
 800728c:	2231      	movs	r2, #49	; 0x31
 800728e:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007290:	4804      	ldr	r0, [pc, #16]	; (80072a4 <MX_COMP1_Init+0x44>)
 8007292:	f003 fa55 	bl	800a740 <HAL_COMP_Init>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 800729c:	f000 fde0 	bl	8007e60 <Error_Handler>
  }

}
 80072a0:	bf00      	nop
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	200029c8 	.word	0x200029c8
 80072a8:	40010200 	.word	0x40010200
 80072ac:	00800030 	.word	0x00800030

080072b0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b8:	f107 030c 	add.w	r3, r7, #12
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	60da      	str	r2, [r3, #12]
 80072c6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a13      	ldr	r2, [pc, #76]	; (800731c <HAL_COMP_MspInit+0x6c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d120      	bne.n	8007314 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072d2:	4b13      	ldr	r3, [pc, #76]	; (8007320 <HAL_COMP_MspInit+0x70>)
 80072d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d6:	4a12      	ldr	r2, [pc, #72]	; (8007320 <HAL_COMP_MspInit+0x70>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072de:	4b10      	ldr	r3, [pc, #64]	; (8007320 <HAL_COMP_MspInit+0x70>)
 80072e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80072ea:	2302      	movs	r3, #2
 80072ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072ee:	2303      	movs	r3, #3
 80072f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f6:	f107 030c 	add.w	r3, r7, #12
 80072fa:	4619      	mov	r1, r3
 80072fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007300:	f004 fc92 	bl	800bc28 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8007304:	2200      	movs	r2, #0
 8007306:	2100      	movs	r1, #0
 8007308:	2040      	movs	r0, #64	; 0x40
 800730a:	f003 fd60 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800730e:	2040      	movs	r0, #64	; 0x40
 8007310:	f003 fd77 	bl	800ae02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007314:	bf00      	nop
 8007316:	3720      	adds	r7, #32
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40010200 	.word	0x40010200
 8007320:	40021000 	.word	0x40021000

08007324 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08c      	sub	sp, #48	; 0x30
 8007328:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800732a:	463b      	mov	r3, r7
 800732c:	2230      	movs	r2, #48	; 0x30
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f009 f8f5 	bl	8010520 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007336:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <MX_DAC1_Init+0x8c>)
 8007338:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <MX_DAC1_Init+0x90>)
 800733a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800733c:	481c      	ldr	r0, [pc, #112]	; (80073b0 <MX_DAC1_Init+0x8c>)
 800733e:	f003 fd88 	bl	800ae52 <HAL_DAC_Init>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007348:	f000 fd8a 	bl	8007e60 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800734c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007350:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007352:	2300      	movs	r3, #0
 8007354:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8007356:	2300      	movs	r3, #0
 8007358:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800735e:	2312      	movs	r3, #18
 8007360:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800736a:	2301      	movs	r3, #1
 800736c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007372:	463b      	mov	r3, r7
 8007374:	2200      	movs	r2, #0
 8007376:	4619      	mov	r1, r3
 8007378:	480d      	ldr	r0, [pc, #52]	; (80073b0 <MX_DAC1_Init+0x8c>)
 800737a:	f003 ff53 	bl	800b224 <HAL_DAC_ConfigChannel>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8007384:	f000 fd6c 	bl	8007e60 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800738c:	2301      	movs	r3, #1
 800738e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007390:	463b      	mov	r3, r7
 8007392:	2210      	movs	r2, #16
 8007394:	4619      	mov	r1, r3
 8007396:	4806      	ldr	r0, [pc, #24]	; (80073b0 <MX_DAC1_Init+0x8c>)
 8007398:	f003 ff44 	bl	800b224 <HAL_DAC_ConfigChannel>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80073a2:	f000 fd5d 	bl	8007e60 <Error_Handler>
  }

}
 80073a6:	bf00      	nop
 80073a8:	3730      	adds	r7, #48	; 0x30
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20002a00 	.word	0x20002a00
 80073b4:	50000800 	.word	0x50000800

080073b8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08c      	sub	sp, #48	; 0x30
 80073bc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80073be:	463b      	mov	r3, r7
 80073c0:	2230      	movs	r2, #48	; 0x30
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f009 f8ab 	bl	8010520 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80073ca:	4b16      	ldr	r3, [pc, #88]	; (8007424 <MX_DAC2_Init+0x6c>)
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <MX_DAC2_Init+0x70>)
 80073ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80073d0:	4814      	ldr	r0, [pc, #80]	; (8007424 <MX_DAC2_Init+0x6c>)
 80073d2:	f003 fd3e 	bl	800ae52 <HAL_DAC_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80073dc:	f000 fd40 	bl	8007e60 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80073e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073e4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80073f2:	2312      	movs	r3, #18
 80073f4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80073fe:	2301      	movs	r3, #1
 8007400:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007406:	463b      	mov	r3, r7
 8007408:	2200      	movs	r2, #0
 800740a:	4619      	mov	r1, r3
 800740c:	4805      	ldr	r0, [pc, #20]	; (8007424 <MX_DAC2_Init+0x6c>)
 800740e:	f003 ff09 	bl	800b224 <HAL_DAC_ConfigChannel>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007418:	f000 fd22 	bl	8007e60 <Error_Handler>
  }

}
 800741c:	bf00      	nop
 800741e:	3730      	adds	r7, #48	; 0x30
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	200029ec 	.word	0x200029ec
 8007428:	50000c00 	.word	0x50000c00

0800742c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08c      	sub	sp, #48	; 0x30
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007434:	f107 031c 	add.w	r3, r7, #28
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a56      	ldr	r2, [pc, #344]	; (80075a4 <HAL_DAC_MspInit+0x178>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d150      	bne.n	80074f0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800744e:	4b56      	ldr	r3, [pc, #344]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007452:	4a55      	ldr	r2, [pc, #340]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800745a:	4b53      	ldr	r3, [pc, #332]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 800745c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007466:	4b50      	ldr	r3, [pc, #320]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	4a4f      	ldr	r2, [pc, #316]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007472:	4b4d      	ldr	r3, [pc, #308]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800747e:	2330      	movs	r3, #48	; 0x30
 8007480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007482:	2303      	movs	r3, #3
 8007484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800748a:	f107 031c 	add.w	r3, r7, #28
 800748e:	4619      	mov	r1, r3
 8007490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007494:	f004 fbc8 	bl	800bc28 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007498:	4b44      	ldr	r3, [pc, #272]	; (80075ac <HAL_DAC_MspInit+0x180>)
 800749a:	4a45      	ldr	r2, [pc, #276]	; (80075b0 <HAL_DAC_MspInit+0x184>)
 800749c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800749e:	4b43      	ldr	r3, [pc, #268]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074a0:	2206      	movs	r2, #6
 80074a2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80074a4:	4b41      	ldr	r3, [pc, #260]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074a6:	2210      	movs	r2, #16
 80074a8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80074aa:	4b40      	ldr	r3, [pc, #256]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80074b0:	4b3e      	ldr	r3, [pc, #248]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074b2:	2280      	movs	r2, #128	; 0x80
 80074b4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80074b6:	4b3d      	ldr	r3, [pc, #244]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074bc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80074be:	4b3b      	ldr	r3, [pc, #236]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074c4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80074c6:	4b39      	ldr	r3, [pc, #228]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074c8:	2220      	movs	r2, #32
 80074ca:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80074cc:	4b37      	ldr	r3, [pc, #220]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80074d2:	4836      	ldr	r0, [pc, #216]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074d4:	f004 f8dc 	bl	800b690 <HAL_DMA_Init>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80074de:	f000 fcbf 	bl	8007e60 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a31      	ldr	r2, [pc, #196]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074e6:	609a      	str	r2, [r3, #8]
 80074e8:	4a30      	ldr	r2, [pc, #192]	; (80075ac <HAL_DAC_MspInit+0x180>)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80074ee:	e054      	b.n	800759a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a2f      	ldr	r2, [pc, #188]	; (80075b4 <HAL_DAC_MspInit+0x188>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d14f      	bne.n	800759a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80074fa:	4b2b      	ldr	r3, [pc, #172]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 80074fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fe:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007506:	4b28      	ldr	r3, [pc, #160]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007512:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007516:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800751e:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <HAL_DAC_MspInit+0x17c>)
 8007520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800752a:	2340      	movs	r3, #64	; 0x40
 800752c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800752e:	2303      	movs	r3, #3
 8007530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007532:	2300      	movs	r3, #0
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007536:	f107 031c 	add.w	r3, r7, #28
 800753a:	4619      	mov	r1, r3
 800753c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007540:	f004 fb72 	bl	800bc28 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8007544:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007546:	4a1d      	ldr	r2, [pc, #116]	; (80075bc <HAL_DAC_MspInit+0x190>)
 8007548:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800754a:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 800754c:	2229      	movs	r2, #41	; 0x29
 800754e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007552:	2210      	movs	r2, #16
 8007554:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007556:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007558:	2200      	movs	r2, #0
 800755a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800755c:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 800755e:	2280      	movs	r2, #128	; 0x80
 8007560:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007568:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 800756c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007570:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8007572:	4b11      	ldr	r3, [pc, #68]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007574:	2220      	movs	r2, #32
 8007576:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 800757a:	2200      	movs	r2, #0
 800757c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800757e:	480e      	ldr	r0, [pc, #56]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007580:	f004 f886 	bl	800b690 <HAL_DMA_Init>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800758a:	f000 fc69 	bl	8007e60 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <HAL_DAC_MspInit+0x18c>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6293      	str	r3, [r2, #40]	; 0x28
}
 800759a:	bf00      	nop
 800759c:	3730      	adds	r7, #48	; 0x30
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	50000800 	.word	0x50000800
 80075a8:	40021000 	.word	0x40021000
 80075ac:	20002270 	.word	0x20002270
 80075b0:	4002001c 	.word	0x4002001c
 80075b4:	50000c00 	.word	0x50000c00
 80075b8:	20002a14 	.word	0x20002a14
 80075bc:	40020030 	.word	0x40020030

080075c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80075c6:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <MX_DMA_Init+0x70>)
 80075c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ca:	4a19      	ldr	r2, [pc, #100]	; (8007630 <MX_DMA_Init+0x70>)
 80075cc:	f043 0304 	orr.w	r3, r3, #4
 80075d0:	6493      	str	r3, [r2, #72]	; 0x48
 80075d2:	4b17      	ldr	r3, [pc, #92]	; (8007630 <MX_DMA_Init+0x70>)
 80075d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <MX_DMA_Init+0x70>)
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	4a13      	ldr	r2, [pc, #76]	; (8007630 <MX_DMA_Init+0x70>)
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	6493      	str	r3, [r2, #72]	; 0x48
 80075ea:	4b11      	ldr	r3, [pc, #68]	; (8007630 <MX_DMA_Init+0x70>)
 80075ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80075f6:	2200      	movs	r2, #0
 80075f8:	2101      	movs	r1, #1
 80075fa:	200b      	movs	r0, #11
 80075fc:	f003 fbe7 	bl	800adce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007600:	200b      	movs	r0, #11
 8007602:	f003 fbfe 	bl	800ae02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	200c      	movs	r0, #12
 800760c:	f003 fbdf 	bl	800adce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007610:	200c      	movs	r0, #12
 8007612:	f003 fbf6 	bl	800ae02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	200d      	movs	r0, #13
 800761c:	f003 fbd7 	bl	800adce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007620:	200d      	movs	r0, #13
 8007622:	f003 fbee 	bl	800ae02 <HAL_NVIC_EnableIRQ>

}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40021000 	.word	0x40021000

08007634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <__NVIC_GetPriorityGrouping+0x18>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	0a1b      	lsrs	r3, r3, #8
 800763e:	f003 0307 	and.w	r3, r3, #7
}
 8007642:	4618      	mov	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	e000ed00 	.word	0xe000ed00

08007650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800765a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765e:	2b00      	cmp	r3, #0
 8007660:	db0b      	blt.n	800767a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	f003 021f 	and.w	r2, r3, #31
 8007668:	4907      	ldr	r1, [pc, #28]	; (8007688 <__NVIC_EnableIRQ+0x38>)
 800766a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	2001      	movs	r0, #1
 8007672:	fa00 f202 	lsl.w	r2, r0, r2
 8007676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	e000e100 	.word	0xe000e100

0800768c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	6039      	str	r1, [r7, #0]
 8007696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800769c:	2b00      	cmp	r3, #0
 800769e:	db0a      	blt.n	80076b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	490c      	ldr	r1, [pc, #48]	; (80076d8 <__NVIC_SetPriority+0x4c>)
 80076a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076aa:	0112      	lsls	r2, r2, #4
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	440b      	add	r3, r1
 80076b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076b4:	e00a      	b.n	80076cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	4908      	ldr	r1, [pc, #32]	; (80076dc <__NVIC_SetPriority+0x50>)
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	3b04      	subs	r3, #4
 80076c4:	0112      	lsls	r2, r2, #4
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	440b      	add	r3, r1
 80076ca:	761a      	strb	r2, [r3, #24]
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	e000e100 	.word	0xe000e100
 80076dc:	e000ed00 	.word	0xe000ed00

080076e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b089      	sub	sp, #36	; 0x24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f1c3 0307 	rsb	r3, r3, #7
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	bf28      	it	cs
 80076fe:	2304      	movcs	r3, #4
 8007700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	3304      	adds	r3, #4
 8007706:	2b06      	cmp	r3, #6
 8007708:	d902      	bls.n	8007710 <NVIC_EncodePriority+0x30>
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	3b03      	subs	r3, #3
 800770e:	e000      	b.n	8007712 <NVIC_EncodePriority+0x32>
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	43da      	mvns	r2, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	401a      	ands	r2, r3
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	fa01 f303 	lsl.w	r3, r1, r3
 8007732:	43d9      	mvns	r1, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007738:	4313      	orrs	r3, r2
         );
}
 800773a:	4618      	mov	r0, r3
 800773c:	3724      	adds	r7, #36	; 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007752:	4a14      	ldr	r2, [pc, #80]	; (80077a4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	3302      	adds	r3, #2
 800775c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	0c1b      	lsrs	r3, r3, #16
 8007764:	43db      	mvns	r3, r3
 8007766:	ea02 0103 	and.w	r1, r2, r3
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	fa93 f3a3 	rbit	r3, r3
 8007776:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	fab3 f383 	clz	r3, r3
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	409a      	lsls	r2, r3
 8007788:	4806      	ldr	r0, [pc, #24]	; (80077a4 <LL_SYSCFG_SetEXTISource+0x5c>)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	430a      	orrs	r2, r1
 8007792:	3302      	adds	r3, #2
 8007794:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	40010000 	.word	0x40010000

080077a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	fa93 f3a3 	rbit	r3, r3
 80077c2:	613b      	str	r3, [r7, #16]
  return result;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	fab3 f383 	clz	r3, r3
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	2103      	movs	r1, #3
 80077d0:	fa01 f303 	lsl.w	r3, r1, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	401a      	ands	r2, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	fa93 f3a3 	rbit	r3, r3
 80077e2:	61bb      	str	r3, [r7, #24]
  return result;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	fab3 f383 	clz	r3, r3
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	fa01 f303 	lsl.w	r3, r1, r3
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	601a      	str	r2, [r3, #0]
}
 80077fa:	bf00      	nop
 80077fc:	3724      	adds	r7, #36	; 0x24
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007806:	b480      	push	{r7}
 8007808:	b089      	sub	sp, #36	; 0x24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	fa93 f3a3 	rbit	r3, r3
 8007820:	613b      	str	r3, [r7, #16]
  return result;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	fab3 f383 	clz	r3, r3
 8007828:	b2db      	uxtb	r3, r3
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	2103      	movs	r1, #3
 800782e:	fa01 f303 	lsl.w	r3, r1, r3
 8007832:	43db      	mvns	r3, r3
 8007834:	401a      	ands	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	fa93 f3a3 	rbit	r3, r3
 8007840:	61bb      	str	r3, [r7, #24]
  return result;
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	fab3 f383 	clz	r3, r3
 8007848:	b2db      	uxtb	r3, r3
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	fa01 f303 	lsl.w	r3, r1, r3
 8007852:	431a      	orrs	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	60da      	str	r2, [r3, #12]
}
 8007858:	bf00      	nop
 800785a:	3724      	adds	r7, #36	; 0x24
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800788a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800788c:	4907      	ldr	r1, [pc, #28]	; (80078ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4313      	orrs	r3, r2
 8007892:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4013      	ands	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800789e:	68fb      	ldr	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	40021000 	.word	0x40021000

080078b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80078b6:	f107 031c 	add.w	r3, r7, #28
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	605a      	str	r2, [r3, #4]
 80078c0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c2:	1d3b      	adds	r3, r7, #4
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	605a      	str	r2, [r3, #4]
 80078ca:	609a      	str	r2, [r3, #8]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	611a      	str	r2, [r3, #16]
 80078d0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80078d2:	2004      	movs	r0, #4
 80078d4:	f7ff ffd4 	bl	8007880 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80078d8:	2020      	movs	r0, #32
 80078da:	f7ff ffd1 	bl	8007880 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80078de:	2001      	movs	r0, #1
 80078e0:	f7ff ffce 	bl	8007880 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80078e4:	2002      	movs	r0, #2
 80078e6:	f7ff ffcb 	bl	8007880 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80078ea:	2108      	movs	r1, #8
 80078ec:	48d3      	ldr	r0, [pc, #844]	; (8007c3c <MX_GPIO_Init+0x38c>)
 80078ee:	f7ff ffb9 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 80078f2:	2108      	movs	r1, #8
 80078f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078f8:	f7ff ffb4 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 80078fc:	2110      	movs	r1, #16
 80078fe:	48cf      	ldr	r0, [pc, #828]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007900:	f7ff ffb0 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007904:	2120      	movs	r1, #32
 8007906:	48cd      	ldr	r0, [pc, #820]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007908:	f7ff ffac 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 800790c:	2101      	movs	r1, #1
 800790e:	48cc      	ldr	r0, [pc, #816]	; (8007c40 <MX_GPIO_Init+0x390>)
 8007910:	f7ff ffa8 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007918:	48c8      	ldr	r0, [pc, #800]	; (8007c3c <MX_GPIO_Init+0x38c>)
 800791a:	f7ff ffa3 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800791e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007922:	48c6      	ldr	r0, [pc, #792]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007924:	f7ff ff9e 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007928:	2140      	movs	r1, #64	; 0x40
 800792a:	48c5      	ldr	r0, [pc, #788]	; (8007c40 <MX_GPIO_Init+0x390>)
 800792c:	f7ff ff9a 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007930:	2180      	movs	r1, #128	; 0x80
 8007932:	48c3      	ldr	r0, [pc, #780]	; (8007c40 <MX_GPIO_Init+0x390>)
 8007934:	f7ff ff96 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800793c:	48c0      	ldr	r0, [pc, #768]	; (8007c40 <MX_GPIO_Init+0x390>)
 800793e:	f7ff ff91 	bl	8007864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007942:	49c0      	ldr	r1, [pc, #768]	; (8007c44 <MX_GPIO_Init+0x394>)
 8007944:	2002      	movs	r0, #2
 8007946:	f7ff feff 	bl	8007748 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800794a:	49bf      	ldr	r1, [pc, #764]	; (8007c48 <MX_GPIO_Init+0x398>)
 800794c:	2002      	movs	r0, #2
 800794e:	f7ff fefb 	bl	8007748 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007952:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007956:	2005      	movs	r0, #5
 8007958:	f7ff fef6 	bl	8007748 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 800795c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007960:	2005      	movs	r0, #5
 8007962:	f7ff fef1 	bl	8007748 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007966:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800796a:	2002      	movs	r0, #2
 800796c:	f7ff feec 	bl	8007748 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007974:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800797c:	2300      	movs	r3, #0
 800797e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007982:	2302      	movs	r3, #2
 8007984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007988:	f107 031c 	add.w	r3, r7, #28
 800798c:	4618      	mov	r0, r3
 800798e:	f007 fae5 	bl	800ef5c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007996:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800799e:	2300      	movs	r3, #0
 80079a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80079a4:	2302      	movs	r3, #2
 80079a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80079aa:	f107 031c 	add.w	r3, r7, #28
 80079ae:	4618      	mov	r0, r3
 80079b0:	f007 fad4 	bl	800ef5c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80079b4:	2301      	movs	r3, #1
 80079b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80079be:	2300      	movs	r3, #0
 80079c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80079c4:	2302      	movs	r3, #2
 80079c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80079ca:	f107 031c 	add.w	r3, r7, #28
 80079ce:	4618      	mov	r0, r3
 80079d0:	f007 fac4 	bl	800ef5c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80079d4:	2302      	movs	r3, #2
 80079d6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80079de:	2300      	movs	r3, #0
 80079e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80079e4:	2302      	movs	r3, #2
 80079e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80079ea:	f107 031c 	add.w	r3, r7, #28
 80079ee:	4618      	mov	r0, r3
 80079f0:	f007 fab4 	bl	800ef5c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80079f4:	2304      	movs	r3, #4
 80079f6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a04:	2302      	movs	r3, #2
 8007a06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a0a:	f107 031c 	add.w	r3, r7, #28
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f007 faa4 	bl	800ef5c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007a14:	2201      	movs	r2, #1
 8007a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a1a:	4888      	ldr	r0, [pc, #544]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007a1c:	f7ff fef3 	bl	8007806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007a20:	2201      	movs	r2, #1
 8007a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a26:	4885      	ldr	r0, [pc, #532]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007a28:	f7ff feed 	bl	8007806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2101      	movs	r1, #1
 8007a30:	4886      	ldr	r0, [pc, #536]	; (8007c4c <MX_GPIO_Init+0x39c>)
 8007a32:	f7ff fee8 	bl	8007806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007a36:	2201      	movs	r2, #1
 8007a38:	2102      	movs	r1, #2
 8007a3a:	4884      	ldr	r0, [pc, #528]	; (8007c4c <MX_GPIO_Init+0x39c>)
 8007a3c:	f7ff fee3 	bl	8007806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007a40:	2201      	movs	r2, #1
 8007a42:	2104      	movs	r1, #4
 8007a44:	487d      	ldr	r0, [pc, #500]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007a46:	f7ff fede 	bl	8007806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a50:	487a      	ldr	r0, [pc, #488]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007a52:	f7ff fea9 	bl	80077a8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007a56:	2200      	movs	r2, #0
 8007a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a5c:	4877      	ldr	r0, [pc, #476]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007a5e:	f7ff fea3 	bl	80077a8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007a62:	2200      	movs	r2, #0
 8007a64:	2101      	movs	r1, #1
 8007a66:	4879      	ldr	r0, [pc, #484]	; (8007c4c <MX_GPIO_Init+0x39c>)
 8007a68:	f7ff fe9e 	bl	80077a8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4876      	ldr	r0, [pc, #472]	; (8007c4c <MX_GPIO_Init+0x39c>)
 8007a72:	f7ff fe99 	bl	80077a8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007a76:	2200      	movs	r2, #0
 8007a78:	2104      	movs	r1, #4
 8007a7a:	4870      	ldr	r0, [pc, #448]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007a7c:	f7ff fe94 	bl	80077a8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007a80:	2308      	movs	r3, #8
 8007a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007a84:	2301      	movs	r3, #1
 8007a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007a90:	2302      	movs	r3, #2
 8007a92:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007a94:	1d3b      	adds	r3, r7, #4
 8007a96:	4619      	mov	r1, r3
 8007a98:	4868      	ldr	r0, [pc, #416]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007a9a:	f007 fc52 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007a9e:	2308      	movs	r3, #8
 8007aa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007aba:	f007 fc42 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007abe:	2310      	movs	r3, #16
 8007ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007ad2:	1d3b      	adds	r3, r7, #4
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4859      	ldr	r0, [pc, #356]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007ad8:	f007 fc33 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007adc:	2320      	movs	r3, #32
 8007ade:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007af0:	1d3b      	adds	r3, r7, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4851      	ldr	r0, [pc, #324]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007af6:	f007 fc24 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007afa:	2301      	movs	r3, #1
 8007afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007afe:	2301      	movs	r3, #1
 8007b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007b0e:	1d3b      	adds	r3, r7, #4
 8007b10:	4619      	mov	r1, r3
 8007b12:	484b      	ldr	r0, [pc, #300]	; (8007c40 <MX_GPIO_Init+0x390>)
 8007b14:	f007 fc15 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	4619      	mov	r1, r3
 8007b32:	4842      	ldr	r0, [pc, #264]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007b34:	f007 fc05 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007b4e:	1d3b      	adds	r3, r7, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	483a      	ldr	r0, [pc, #232]	; (8007c3c <MX_GPIO_Init+0x38c>)
 8007b54:	f007 fbf5 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007b58:	2340      	movs	r3, #64	; 0x40
 8007b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007b60:	2303      	movs	r3, #3
 8007b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007b6c:	1d3b      	adds	r3, r7, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4833      	ldr	r0, [pc, #204]	; (8007c40 <MX_GPIO_Init+0x390>)
 8007b72:	f007 fbe6 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007b76:	2380      	movs	r3, #128	; 0x80
 8007b78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	482c      	ldr	r0, [pc, #176]	; (8007c40 <MX_GPIO_Init+0x390>)
 8007b90:	f007 fbd7 	bl	800f342 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007baa:	1d3b      	adds	r3, r7, #4
 8007bac:	4619      	mov	r1, r3
 8007bae:	4824      	ldr	r0, [pc, #144]	; (8007c40 <MX_GPIO_Init+0x390>)
 8007bb0:	f007 fbc7 	bl	800f342 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007bb4:	f7ff fd3e 	bl	8007634 <__NVIC_GetPriorityGrouping>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff fd8e 	bl	80076e0 <NVIC_EncodePriority>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	2006      	movs	r0, #6
 8007bca:	f7ff fd5f 	bl	800768c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007bce:	2006      	movs	r0, #6
 8007bd0:	f7ff fd3e 	bl	8007650 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007bd4:	f7ff fd2e 	bl	8007634 <__NVIC_GetPriorityGrouping>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fd7e 	bl	80076e0 <NVIC_EncodePriority>
 8007be4:	4603      	mov	r3, r0
 8007be6:	4619      	mov	r1, r3
 8007be8:	2007      	movs	r0, #7
 8007bea:	f7ff fd4f 	bl	800768c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007bee:	2007      	movs	r0, #7
 8007bf0:	f7ff fd2e 	bl	8007650 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007bf4:	f7ff fd1e 	bl	8007634 <__NVIC_GetPriorityGrouping>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff fd6e 	bl	80076e0 <NVIC_EncodePriority>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4619      	mov	r1, r3
 8007c08:	2008      	movs	r0, #8
 8007c0a:	f7ff fd3f 	bl	800768c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007c0e:	2008      	movs	r0, #8
 8007c10:	f7ff fd1e 	bl	8007650 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c14:	f7ff fd0e 	bl	8007634 <__NVIC_GetPriorityGrouping>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fd5e 	bl	80076e0 <NVIC_EncodePriority>
 8007c24:	4603      	mov	r3, r0
 8007c26:	4619      	mov	r1, r3
 8007c28:	2028      	movs	r0, #40	; 0x28
 8007c2a:	f7ff fd2f 	bl	800768c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007c2e:	2028      	movs	r0, #40	; 0x28
 8007c30:	f7ff fd0e 	bl	8007650 <__NVIC_EnableIRQ>

}
 8007c34:	bf00      	nop
 8007c36:	3728      	adds	r7, #40	; 0x28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	e009      	b.n	8007c50 <MX_GPIO_Init+0x3a0>
 8007c3c:	48000800 	.word	0x48000800
 8007c40:	48000400 	.word	0x48000400
 8007c44:	0f000003 	.word	0x0f000003
 8007c48:	f0000003 	.word	0xf0000003
 8007c4c:	48001400 	.word	0x48001400
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop

08007c54 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007c5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c60:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d013      	beq.n	8007c94 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007c6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c70:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007c74:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007c7c:	e000      	b.n	8007c80 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007c7e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007c80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0f9      	beq.n	8007c7e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007c8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007c94:	687b      	ldr	r3, [r7, #4]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
  int i=0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	e009      	b.n	8007ccc <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	60ba      	str	r2, [r7, #8]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff ffc7 	bl	8007c54 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	dbf1      	blt.n	8007cb8 <_write+0x16>
  return len;
 8007cd4:	687b      	ldr	r3, [r7, #4]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ce4:	f000 feeb 	bl	8008abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ce8:	f000 f84c 	bl	8007d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007cec:	f7ff fde0 	bl	80078b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8007cf0:	f7ff fc66 	bl	80075c0 <MX_DMA_Init>
  MX_DAC1_Init();
 8007cf4:	f7ff fb16 	bl	8007324 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007cf8:	f7ff f9ce 	bl	8007098 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007cfc:	f7ff fab0 	bl	8007260 <MX_COMP1_Init>
  MX_SPI3_Init();
 8007d00:	f000 f8ec 	bl	8007edc <MX_SPI3_Init>
  MX_RNG_Init();
 8007d04:	f000 f8dc 	bl	8007ec0 <MX_RNG_Init>
  MX_TIM1_Init();
 8007d08:	f000 fb46 	bl	8008398 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007d0c:	f000 fc9c 	bl	8008648 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007d10:	f000 fd54 	bl	80087bc <MX_TIM16_Init>
  MX_TIM15_Init();
 8007d14:	f000 fd00 	bl	8008718 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007d18:	f000 fc48 	bl	80085ac <MX_TIM5_Init>
  MX_TIM3_Init();
 8007d1c:	f000 fbf8 	bl	8008510 <MX_TIM3_Init>
  MX_DAC2_Init();
 8007d20:	f7ff fb4a 	bl	80073b8 <MX_DAC2_Init>
  MX_TIM17_Init();
 8007d24:	f000 fd72 	bl	800880c <MX_TIM17_Init>
  MX_TIM2_Init();
 8007d28:	f000 fba6 	bl	8008478 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8007d2c:	f7fe fb8e 	bl	800644c <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007d30:	4810      	ldr	r0, [pc, #64]	; (8007d74 <main+0x94>)
 8007d32:	f005 fb2d 	bl	800d390 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007d36:	2200      	movs	r2, #0
 8007d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d3c:	480e      	ldr	r0, [pc, #56]	; (8007d78 <main+0x98>)
 8007d3e:	f004 f9d7 	bl	800c0f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007d42:	2200      	movs	r2, #0
 8007d44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d48:	480b      	ldr	r0, [pc, #44]	; (8007d78 <main+0x98>)
 8007d4a:	f004 f9d1 	bl	800c0f0 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007d4e:	480b      	ldr	r0, [pc, #44]	; (8007d7c <main+0x9c>)
 8007d50:	f005 fac8 	bl	800d2e4 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007d54:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <main+0xa0>)
 8007d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007d5c:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <main+0xa0>)
 8007d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d62:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 8007d64:	f7f9 f804 	bl	8000d70 <DM_Init>
  DM_PostInit();
 8007d68:	f7f9 f810 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007d6c:	f7fd f9d0 	bl	8005110 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007d70:	e7fe      	b.n	8007d70 <main+0x90>
 8007d72:	bf00      	nop
 8007d74:	20002b70 	.word	0x20002b70
 8007d78:	48000800 	.word	0x48000800
 8007d7c:	20002c08 	.word	0x20002c08
 8007d80:	40001000 	.word	0x40001000

08007d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b0a8      	sub	sp, #160	; 0xa0
 8007d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007d8e:	2238      	movs	r2, #56	; 0x38
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f008 fbc4 	bl	8010520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007da8:	463b      	mov	r3, r7
 8007daa:	2254      	movs	r2, #84	; 0x54
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f008 fbb6 	bl	8010520 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007db4:	2000      	movs	r0, #0
 8007db6:	f004 f9b3 	bl	800c120 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007dba:	2322      	movs	r3, #34	; 0x22
 8007dbc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dc2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007dc4:	2340      	movs	r3, #64	; 0x40
 8007dc6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007de0:	232a      	movs	r3, #42	; 0x2a
 8007de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007de6:	2302      	movs	r3, #2
 8007de8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007dec:	2304      	movs	r3, #4
 8007dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007df2:	2302      	movs	r3, #2
 8007df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007df8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f004 fa33 	bl	800c268 <HAL_RCC_OscConfig>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007e08:	f000 f82a 	bl	8007e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e0c:	230f      	movs	r3, #15
 8007e0e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e10:	2303      	movs	r3, #3
 8007e12:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e14:	2300      	movs	r3, #0
 8007e16:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007e20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e24:	2108      	movs	r1, #8
 8007e26:	4618      	mov	r0, r3
 8007e28:	f004 fd36 	bl	800c898 <HAL_RCC_ClockConfig>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007e32:	f000 f815 	bl	8007e60 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007e36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007e3a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e46:	463b      	mov	r3, r7
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f004 ff15 	bl	800cc78 <HAL_RCCEx_PeriphCLKConfig>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007e54:	f000 f804 	bl	8007e60 <Error_Handler>
  }
}
 8007e58:	bf00      	nop
 8007e5a:	37a0      	adds	r7, #160	; 0xa0
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007e64:	bf00      	nop
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f043 0204 	orr.w	r2, r3, #4
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <LL_AHB2_GRP1_EnableClock>:
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007e98:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e9c:	4907      	ldr	r1, [pc, #28]	; (8007ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	bf00      	nop
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	40021000 	.word	0x40021000

08007ec0 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007ec4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007ec8:	f7ff ffe2 	bl	8007e90 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007ecc:	4802      	ldr	r0, [pc, #8]	; (8007ed8 <MX_RNG_Init+0x18>)
 8007ece:	f7ff ffce 	bl	8007e6e <LL_RNG_Enable>

}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	50060800 	.word	0x50060800

08007edc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007ee0:	4b1b      	ldr	r3, [pc, #108]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007ee2:	4a1c      	ldr	r2, [pc, #112]	; (8007f54 <MX_SPI3_Init+0x78>)
 8007ee4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007eec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007eee:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007ef6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007efa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007efc:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f02:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007f08:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007f10:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f12:	2210      	movs	r2, #16
 8007f14:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f16:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f1c:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f22:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007f28:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f2a:	2207      	movs	r2, #7
 8007f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007f2e:	4b08      	ldr	r3, [pc, #32]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f34:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f36:	2208      	movs	r2, #8
 8007f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007f3a:	4805      	ldr	r0, [pc, #20]	; (8007f50 <MX_SPI3_Init+0x74>)
 8007f3c:	f005 f8e8 	bl	800d110 <HAL_SPI_Init>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007f46:	f7ff ff8b 	bl	8007e60 <Error_Handler>
  }

}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20002a74 	.word	0x20002a74
 8007f54:	40003c00 	.word	0x40003c00

08007f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a17      	ldr	r2, [pc, #92]	; (8007fd4 <HAL_SPI_MspInit+0x7c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d128      	bne.n	8007fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007f7a:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <HAL_SPI_MspInit+0x80>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7e:	4a16      	ldr	r2, [pc, #88]	; (8007fd8 <HAL_SPI_MspInit+0x80>)
 8007f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f84:	6593      	str	r3, [r2, #88]	; 0x58
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <HAL_SPI_MspInit+0x80>)
 8007f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f8e:	613b      	str	r3, [r7, #16]
 8007f90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <HAL_SPI_MspInit+0x80>)
 8007f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f96:	4a10      	ldr	r2, [pc, #64]	; (8007fd8 <HAL_SPI_MspInit+0x80>)
 8007f98:	f043 0304 	orr.w	r3, r3, #4
 8007f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f9e:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <HAL_SPI_MspInit+0x80>)
 8007fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007faa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007fbc:	2306      	movs	r3, #6
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4805      	ldr	r0, [pc, #20]	; (8007fdc <HAL_SPI_MspInit+0x84>)
 8007fc8:	f003 fe2e 	bl	800bc28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007fcc:	bf00      	nop
 8007fce:	3728      	adds	r7, #40	; 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40003c00 	.word	0x40003c00
 8007fd8:	40021000 	.word	0x40021000
 8007fdc:	48000800 	.word	0x48000800

08007fe0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4a04      	ldr	r2, [pc, #16]	; (8007ffc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fee:	6093      	str	r3, [r2, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40007000 	.word	0x40007000

08008000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <HAL_MspInit+0x44>)
 8008008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800800a:	4a0e      	ldr	r2, [pc, #56]	; (8008044 <HAL_MspInit+0x44>)
 800800c:	f043 0301 	orr.w	r3, r3, #1
 8008010:	6613      	str	r3, [r2, #96]	; 0x60
 8008012:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <HAL_MspInit+0x44>)
 8008014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	607b      	str	r3, [r7, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <HAL_MspInit+0x44>)
 8008020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008022:	4a08      	ldr	r2, [pc, #32]	; (8008044 <HAL_MspInit+0x44>)
 8008024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008028:	6593      	str	r3, [r2, #88]	; 0x58
 800802a:	4b06      	ldr	r3, [pc, #24]	; (8008044 <HAL_MspInit+0x44>)
 800802c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008032:	603b      	str	r3, [r7, #0]
 8008034:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8008036:	f7ff ffd3 	bl	8007fe0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40021000 	.word	0x40021000

08008048 <LL_EXTI_IsActiveFlag_0_31>:
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8008052:	695a      	ldr	r2, [r3, #20]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4013      	ands	r3, r2
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d101      	bne.n	8008062 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800805e:	2301      	movs	r3, #1
 8008060:	e000      	b.n	8008064 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	40010400 	.word	0x40010400

08008074 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800807c:	4a04      	ldr	r2, [pc, #16]	; (8008090 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6153      	str	r3, [r2, #20]
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40010400 	.word	0x40010400

08008094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008098:	bf00      	nop
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
	...

080080a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <HardFault_Handler+0xc>)
 80080aa:	f7f9 fa69 	bl	8001580 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080ae:	e7fe      	b.n	80080ae <HardFault_Handler+0xa>
 80080b0:	080154c4 	.word	0x080154c4

080080b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 80080b8:	4801      	ldr	r0, [pc, #4]	; (80080c0 <MemManage_Handler+0xc>)
 80080ba:	f7f9 fa61 	bl	8001580 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80080be:	e7fe      	b.n	80080be <MemManage_Handler+0xa>
 80080c0:	080154d0 	.word	0x080154d0

080080c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <BusFault_Handler+0xc>)
 80080ca:	f7f9 fa59 	bl	8001580 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80080ce:	e7fe      	b.n	80080ce <BusFault_Handler+0xa>
 80080d0:	080154e0 	.word	0x080154e0

080080d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <UsageFault_Handler+0xc>)
 80080da:	f7f9 fa51 	bl	8001580 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080de:	e7fe      	b.n	80080de <UsageFault_Handler+0xa>
 80080e0:	080154ec 	.word	0x080154ec

080080e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080e8:	bf00      	nop
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80080f2:	b480      	push	{r7}
 80080f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80080f6:	bf00      	nop
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008104:	bf00      	nop
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008112:	f000 fd27 	bl	8008b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}

0800811a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 800811e:	f7fd f8b5 	bl	800528c <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8008122:	2001      	movs	r0, #1
 8008124:	f7ff ff90 	bl	8008048 <LL_EXTI_IsActiveFlag_0_31>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800812e:	2001      	movs	r0, #1
 8008130:	f7ff ffa0 	bl	8008074 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008134:	bf00      	nop
 8008136:	bd80      	pop	{r7, pc}

08008138 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 800813c:	f7fd f8cc 	bl	80052d8 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8008140:	2002      	movs	r0, #2
 8008142:	f7ff ff81 	bl	8008048 <LL_EXTI_IsActiveFlag_0_31>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800814c:	2002      	movs	r0, #2
 800814e:	f7ff ff91 	bl	8008074 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008152:	bf00      	nop
 8008154:	bd80      	pop	{r7, pc}

08008156 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 800815a:	f7fd f8e3 	bl	8005324 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 800815e:	2004      	movs	r0, #4
 8008160:	f7ff ff72 	bl	8008048 <LL_EXTI_IsActiveFlag_0_31>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800816a:	2004      	movs	r0, #4
 800816c:	f7ff ff82 	bl	8008074 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008170:	bf00      	nop
 8008172:	bd80      	pop	{r7, pc}

08008174 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008178:	4802      	ldr	r0, [pc, #8]	; (8008184 <DMA1_Channel1_IRQHandler+0x10>)
 800817a:	f003 fc05 	bl	800b988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800817e:	bf00      	nop
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20002968 	.word	0x20002968

08008188 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800818c:	4802      	ldr	r0, [pc, #8]	; (8008198 <DMA1_Channel2_IRQHandler+0x10>)
 800818e:	f003 fbfb 	bl	800b988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008192:	bf00      	nop
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20002270 	.word	0x20002270

0800819c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80081a0:	4802      	ldr	r0, [pc, #8]	; (80081ac <DMA1_Channel3_IRQHandler+0x10>)
 80081a2:	f003 fbf1 	bl	800b988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80081a6:	bf00      	nop
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20002a14 	.word	0x20002a14

080081b0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80081b4:	f7f8 fe04 	bl	8000dc0 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 80081b8:	f7fd f8da 	bl	8005370 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80081be:	f005 fbc9 	bl	800d954 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80081c2:	4803      	ldr	r0, [pc, #12]	; (80081d0 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80081c4:	f005 fbc6 	bl	800d954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20002c08 	.word	0x20002c08
 80081d0:	20002b24 	.word	0x20002b24

080081d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 80081d8:	f7fb ff88 	bl	80040ec <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80081dc:	4803      	ldr	r0, [pc, #12]	; (80081ec <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80081de:	f005 fbb9 	bl	800d954 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80081e2:	4803      	ldr	r0, [pc, #12]	; (80081f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80081e4:	f005 fbb6 	bl	800d954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80081e8:	bf00      	nop
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20002c08 	.word	0x20002c08
 80081f0:	20002b70 	.word	0x20002b70

080081f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80081f8:	4802      	ldr	r0, [pc, #8]	; (8008204 <TIM3_IRQHandler+0x10>)
 80081fa:	f005 fbab 	bl	800d954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200022dc 	.word	0x200022dc

08008208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 800820c:	f7fc ffee 	bl	80051ec <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8008210:	f7fd f814 	bl	800523c <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8008214:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008218:	f7ff ff16 	bl	8008048 <LL_EXTI_IsActiveFlag_0_31>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8008222:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008226:	f7ff ff25 	bl	8008074 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800822a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800822e:	f7ff ff0b 	bl	8008048 <LL_EXTI_IsActiveFlag_0_31>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8008238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800823c:	f7ff ff1a 	bl	8008074 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008240:	bf00      	nop
 8008242:	bd80      	pop	{r7, pc}

08008244 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8008248:	f7fc ff72 	bl	8005130 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800824c:	4802      	ldr	r0, [pc, #8]	; (8008258 <TIM5_IRQHandler+0x14>)
 800824e:	f005 fb81 	bl	800d954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008252:	bf00      	nop
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20002bbc 	.word	0x20002bbc

0800825c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8008260:	4802      	ldr	r0, [pc, #8]	; (800826c <COMP1_2_3_IRQHandler+0x10>)
 8008262:	f002 fc33 	bl	800aacc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8008266:	bf00      	nop
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200029c8 	.word	0x200029c8

08008270 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	e00a      	b.n	8008298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008282:	f3af 8000 	nop.w
 8008286:	4601      	mov	r1, r0
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	60ba      	str	r2, [r7, #8]
 800828e:	b2ca      	uxtb	r2, r1
 8008290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	3301      	adds	r3, #1
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	dbf0      	blt.n	8008282 <_read+0x12>
	}

return len;
 80082a0:	687b      	ldr	r3, [r7, #4]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
	return -1;
 80082b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80082d2:	605a      	str	r2, [r3, #4]
	return 0;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <_isatty>:

int _isatty(int file)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
	return 1;
 80082ea:	2301      	movs	r3, #1
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
	return 0;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
	...

08008314 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800831c:	4b11      	ldr	r3, [pc, #68]	; (8008364 <_sbrk+0x50>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d102      	bne.n	800832a <_sbrk+0x16>
		heap_end = &end;
 8008324:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <_sbrk+0x50>)
 8008326:	4a10      	ldr	r2, [pc, #64]	; (8008368 <_sbrk+0x54>)
 8008328:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <_sbrk+0x50>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <_sbrk+0x50>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	466a      	mov	r2, sp
 800833a:	4293      	cmp	r3, r2
 800833c:	d907      	bls.n	800834e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800833e:	f008 f8c5 	bl	80104cc <__errno>
 8008342:	4602      	mov	r2, r0
 8008344:	230c      	movs	r3, #12
 8008346:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800834c:	e006      	b.n	800835c <_sbrk+0x48>
	}

	heap_end += incr;
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <_sbrk+0x50>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4413      	add	r3, r2
 8008356:	4a03      	ldr	r2, [pc, #12]	; (8008364 <_sbrk+0x50>)
 8008358:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800835a:	68fb      	ldr	r3, [r7, #12]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20002260 	.word	0x20002260
 8008368:	20002cf8 	.word	0x20002cf8

0800836c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008370:	4b08      	ldr	r3, [pc, #32]	; (8008394 <SystemInit+0x28>)
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008376:	4a07      	ldr	r2, [pc, #28]	; (8008394 <SystemInit+0x28>)
 8008378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800837c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008380:	4b04      	ldr	r3, [pc, #16]	; (8008394 <SystemInit+0x28>)
 8008382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008386:	609a      	str	r2, [r3, #8]
#endif
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b09a      	sub	sp, #104	; 0x68
 800839c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800839e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80083a2:	2224      	movs	r2, #36	; 0x24
 80083a4:	2100      	movs	r1, #0
 80083a6:	4618      	mov	r0, r3
 80083a8:	f008 f8ba 	bl	8010520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	605a      	str	r2, [r3, #4]
 80083b6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80083b8:	1d3b      	adds	r3, r7, #4
 80083ba:	2234      	movs	r2, #52	; 0x34
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f008 f8ae 	bl	8010520 <memset>

  htim1.Instance = TIM1;
 80083c4:	4b2a      	ldr	r3, [pc, #168]	; (8008470 <MX_TIM1_Init+0xd8>)
 80083c6:	4a2b      	ldr	r2, [pc, #172]	; (8008474 <MX_TIM1_Init+0xdc>)
 80083c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80083ca:	4b29      	ldr	r3, [pc, #164]	; (8008470 <MX_TIM1_Init+0xd8>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80083d0:	4b27      	ldr	r3, [pc, #156]	; (8008470 <MX_TIM1_Init+0xd8>)
 80083d2:	2260      	movs	r2, #96	; 0x60
 80083d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80083d6:	4b26      	ldr	r3, [pc, #152]	; (8008470 <MX_TIM1_Init+0xd8>)
 80083d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083de:	4b24      	ldr	r3, [pc, #144]	; (8008470 <MX_TIM1_Init+0xd8>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80083e4:	4b22      	ldr	r3, [pc, #136]	; (8008470 <MX_TIM1_Init+0xd8>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80083ea:	4b21      	ldr	r3, [pc, #132]	; (8008470 <MX_TIM1_Init+0xd8>)
 80083ec:	2280      	movs	r2, #128	; 0x80
 80083ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80083f0:	2302      	movs	r3, #2
 80083f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80083f4:	2300      	movs	r3, #0
 80083f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80083f8:	2301      	movs	r3, #1
 80083fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80083fc:	2300      	movs	r3, #0
 80083fe:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008404:	2300      	movs	r3, #0
 8008406:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008408:	2301      	movs	r3, #1
 800840a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800840c:	2300      	movs	r3, #0
 800840e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8008414:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008418:	4619      	mov	r1, r3
 800841a:	4815      	ldr	r0, [pc, #84]	; (8008470 <MX_TIM1_Init+0xd8>)
 800841c:	f005 f9f4 	bl	800d808 <HAL_TIM_Encoder_Init>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008426:	f7ff fd1b 	bl	8007e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800842a:	2320      	movs	r3, #32
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800842e:	2300      	movs	r3, #0
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008432:	2300      	movs	r3, #0
 8008434:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008436:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800843a:	4619      	mov	r1, r3
 800843c:	480c      	ldr	r0, [pc, #48]	; (8008470 <MX_TIM1_Init+0xd8>)
 800843e:	f006 facf 	bl	800e9e0 <HAL_TIMEx_MasterConfigSynchronization>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8008448:	f7ff fd0a 	bl	8007e60 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800844c:	2300      	movs	r3, #0
 800844e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008450:	2300      	movs	r3, #0
 8008452:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008454:	1d3b      	adds	r3, r7, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4805      	ldr	r0, [pc, #20]	; (8008470 <MX_TIM1_Init+0xd8>)
 800845a:	f006 fb57 	bl	800eb0c <HAL_TIMEx_ConfigBreakDeadTime>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8008464:	f7ff fcfc 	bl	8007e60 <Error_Handler>
  }

}
 8008468:	bf00      	nop
 800846a:	3768      	adds	r7, #104	; 0x68
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20002c08 	.word	0x20002c08
 8008474:	40012c00 	.word	0x40012c00

08008478 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800847e:	f107 0310 	add.w	r3, r7, #16
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	605a      	str	r2, [r3, #4]
 8008488:	609a      	str	r2, [r3, #8]
 800848a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800848c:	1d3b      	adds	r3, r7, #4
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8008496:	4b1d      	ldr	r3, [pc, #116]	; (800850c <MX_TIM2_Init+0x94>)
 8008498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800849c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800849e:	4b1b      	ldr	r3, [pc, #108]	; (800850c <MX_TIM2_Init+0x94>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084a4:	4b19      	ldr	r3, [pc, #100]	; (800850c <MX_TIM2_Init+0x94>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80084aa:	4b18      	ldr	r3, [pc, #96]	; (800850c <MX_TIM2_Init+0x94>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084b0:	4b16      	ldr	r3, [pc, #88]	; (800850c <MX_TIM2_Init+0x94>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084b6:	4b15      	ldr	r3, [pc, #84]	; (800850c <MX_TIM2_Init+0x94>)
 80084b8:	2280      	movs	r2, #128	; 0x80
 80084ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80084bc:	4813      	ldr	r0, [pc, #76]	; (800850c <MX_TIM2_Init+0x94>)
 80084be:	f004 feb9 	bl	800d234 <HAL_TIM_Base_Init>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80084c8:	f7ff fcca 	bl	8007e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80084cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80084d2:	f107 0310 	add.w	r3, r7, #16
 80084d6:	4619      	mov	r1, r3
 80084d8:	480c      	ldr	r0, [pc, #48]	; (800850c <MX_TIM2_Init+0x94>)
 80084da:	f005 fccb 	bl	800de74 <HAL_TIM_ConfigClockSource>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80084e4:	f7ff fcbc 	bl	8007e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80084e8:	2320      	movs	r3, #32
 80084ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80084f0:	1d3b      	adds	r3, r7, #4
 80084f2:	4619      	mov	r1, r3
 80084f4:	4805      	ldr	r0, [pc, #20]	; (800850c <MX_TIM2_Init+0x94>)
 80084f6:	f006 fa73 	bl	800e9e0 <HAL_TIMEx_MasterConfigSynchronization>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008500:	f7ff fcae 	bl	8007e60 <Error_Handler>
  }

}
 8008504:	bf00      	nop
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20002c54 	.word	0x20002c54

08008510 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008516:	f107 0310 	add.w	r3, r7, #16
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	605a      	str	r2, [r3, #4]
 8008520:	609a      	str	r2, [r3, #8]
 8008522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008524:	1d3b      	adds	r3, r7, #4
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	605a      	str	r2, [r3, #4]
 800852c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800852e:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <MX_TIM3_Init+0x94>)
 8008530:	4a1d      	ldr	r2, [pc, #116]	; (80085a8 <MX_TIM3_Init+0x98>)
 8008532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008534:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <MX_TIM3_Init+0x94>)
 8008536:	2200      	movs	r2, #0
 8008538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800853a:	4b1a      	ldr	r3, [pc, #104]	; (80085a4 <MX_TIM3_Init+0x94>)
 800853c:	2210      	movs	r2, #16
 800853e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008540:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <MX_TIM3_Init+0x94>)
 8008542:	2201      	movs	r2, #1
 8008544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008546:	4b17      	ldr	r3, [pc, #92]	; (80085a4 <MX_TIM3_Init+0x94>)
 8008548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800854c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800854e:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <MX_TIM3_Init+0x94>)
 8008550:	2280      	movs	r2, #128	; 0x80
 8008552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008554:	4813      	ldr	r0, [pc, #76]	; (80085a4 <MX_TIM3_Init+0x94>)
 8008556:	f004 fe6d 	bl	800d234 <HAL_TIM_Base_Init>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008560:	f7ff fc7e 	bl	8007e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800856a:	f107 0310 	add.w	r3, r7, #16
 800856e:	4619      	mov	r1, r3
 8008570:	480c      	ldr	r0, [pc, #48]	; (80085a4 <MX_TIM3_Init+0x94>)
 8008572:	f005 fc7f 	bl	800de74 <HAL_TIM_ConfigClockSource>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800857c:	f7ff fc70 	bl	8007e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008580:	2320      	movs	r3, #32
 8008582:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008588:	1d3b      	adds	r3, r7, #4
 800858a:	4619      	mov	r1, r3
 800858c:	4805      	ldr	r0, [pc, #20]	; (80085a4 <MX_TIM3_Init+0x94>)
 800858e:	f006 fa27 	bl	800e9e0 <HAL_TIMEx_MasterConfigSynchronization>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008598:	f7ff fc62 	bl	8007e60 <Error_Handler>
  }

}
 800859c:	bf00      	nop
 800859e:	3720      	adds	r7, #32
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	200022dc 	.word	0x200022dc
 80085a8:	40000400 	.word	0x40000400

080085ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085b2:	f107 0310 	add.w	r3, r7, #16
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	605a      	str	r2, [r3, #4]
 80085bc:	609a      	str	r2, [r3, #8]
 80085be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085c0:	1d3b      	adds	r3, r7, #4
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	605a      	str	r2, [r3, #4]
 80085c8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80085ca:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <MX_TIM5_Init+0x94>)
 80085cc:	4a1d      	ldr	r2, [pc, #116]	; (8008644 <MX_TIM5_Init+0x98>)
 80085ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80085d0:	4b1b      	ldr	r3, [pc, #108]	; (8008640 <MX_TIM5_Init+0x94>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085d6:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <MX_TIM5_Init+0x94>)
 80085d8:	2200      	movs	r2, #0
 80085da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80085dc:	4b18      	ldr	r3, [pc, #96]	; (8008640 <MX_TIM5_Init+0x94>)
 80085de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085e4:	4b16      	ldr	r3, [pc, #88]	; (8008640 <MX_TIM5_Init+0x94>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80085ea:	4b15      	ldr	r3, [pc, #84]	; (8008640 <MX_TIM5_Init+0x94>)
 80085ec:	2280      	movs	r2, #128	; 0x80
 80085ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80085f0:	4813      	ldr	r0, [pc, #76]	; (8008640 <MX_TIM5_Init+0x94>)
 80085f2:	f004 fe1f 	bl	800d234 <HAL_TIM_Base_Init>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80085fc:	f7ff fc30 	bl	8007e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008604:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008606:	f107 0310 	add.w	r3, r7, #16
 800860a:	4619      	mov	r1, r3
 800860c:	480c      	ldr	r0, [pc, #48]	; (8008640 <MX_TIM5_Init+0x94>)
 800860e:	f005 fc31 	bl	800de74 <HAL_TIM_ConfigClockSource>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008618:	f7ff fc22 	bl	8007e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800861c:	2300      	movs	r3, #0
 800861e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4805      	ldr	r0, [pc, #20]	; (8008640 <MX_TIM5_Init+0x94>)
 800862a:	f006 f9d9 	bl	800e9e0 <HAL_TIMEx_MasterConfigSynchronization>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008634:	f7ff fc14 	bl	8007e60 <Error_Handler>
  }

}
 8008638:	bf00      	nop
 800863a:	3720      	adds	r7, #32
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20002bbc 	.word	0x20002bbc
 8008644:	40000c00 	.word	0x40000c00

08008648 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b094      	sub	sp, #80	; 0x50
 800864c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800864e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	605a      	str	r2, [r3, #4]
 8008658:	609a      	str	r2, [r3, #8]
 800865a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800865c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	605a      	str	r2, [r3, #4]
 8008666:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008668:	463b      	mov	r3, r7
 800866a:	2234      	movs	r2, #52	; 0x34
 800866c:	2100      	movs	r1, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f007 ff56 	bl	8010520 <memset>

  htim8.Instance = TIM8;
 8008674:	4b26      	ldr	r3, [pc, #152]	; (8008710 <MX_TIM8_Init+0xc8>)
 8008676:	4a27      	ldr	r2, [pc, #156]	; (8008714 <MX_TIM8_Init+0xcc>)
 8008678:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800867a:	4b25      	ldr	r3, [pc, #148]	; (8008710 <MX_TIM8_Init+0xc8>)
 800867c:	2200      	movs	r2, #0
 800867e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008680:	4b23      	ldr	r3, [pc, #140]	; (8008710 <MX_TIM8_Init+0xc8>)
 8008682:	2200      	movs	r2, #0
 8008684:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008686:	4b22      	ldr	r3, [pc, #136]	; (8008710 <MX_TIM8_Init+0xc8>)
 8008688:	2201      	movs	r2, #1
 800868a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800868c:	4b20      	ldr	r3, [pc, #128]	; (8008710 <MX_TIM8_Init+0xc8>)
 800868e:	2200      	movs	r2, #0
 8008690:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008692:	4b1f      	ldr	r3, [pc, #124]	; (8008710 <MX_TIM8_Init+0xc8>)
 8008694:	2200      	movs	r2, #0
 8008696:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <MX_TIM8_Init+0xc8>)
 800869a:	2280      	movs	r2, #128	; 0x80
 800869c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800869e:	481c      	ldr	r0, [pc, #112]	; (8008710 <MX_TIM8_Init+0xc8>)
 80086a0:	f004 fdc8 	bl	800d234 <HAL_TIM_Base_Init>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80086aa:	f7ff fbd9 	bl	8007e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80086b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086b8:	4619      	mov	r1, r3
 80086ba:	4815      	ldr	r0, [pc, #84]	; (8008710 <MX_TIM8_Init+0xc8>)
 80086bc:	f005 fbda 	bl	800de74 <HAL_TIM_ConfigClockSource>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80086c6:	f7ff fbcb 	bl	8007e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80086ca:	2320      	movs	r3, #32
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80086ce:	2300      	movs	r3, #0
 80086d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80086d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086da:	4619      	mov	r1, r3
 80086dc:	480c      	ldr	r0, [pc, #48]	; (8008710 <MX_TIM8_Init+0xc8>)
 80086de:	f006 f97f 	bl	800e9e0 <HAL_TIMEx_MasterConfigSynchronization>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80086e8:	f7ff fbba 	bl	8007e60 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80086f0:	2300      	movs	r3, #0
 80086f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80086f4:	463b      	mov	r3, r7
 80086f6:	4619      	mov	r1, r3
 80086f8:	4805      	ldr	r0, [pc, #20]	; (8008710 <MX_TIM8_Init+0xc8>)
 80086fa:	f006 fa07 	bl	800eb0c <HAL_TIMEx_ConfigBreakDeadTime>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008704:	f7ff fbac 	bl	8007e60 <Error_Handler>
  }

}
 8008708:	bf00      	nop
 800870a:	3750      	adds	r7, #80	; 0x50
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20002ad8 	.word	0x20002ad8
 8008714:	40013400 	.word	0x40013400

08008718 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800871e:	f107 0310 	add.w	r3, r7, #16
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	605a      	str	r2, [r3, #4]
 8008728:	609a      	str	r2, [r3, #8]
 800872a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800872c:	1d3b      	adds	r3, r7, #4
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	605a      	str	r2, [r3, #4]
 8008734:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008736:	4b1f      	ldr	r3, [pc, #124]	; (80087b4 <MX_TIM15_Init+0x9c>)
 8008738:	4a1f      	ldr	r2, [pc, #124]	; (80087b8 <MX_TIM15_Init+0xa0>)
 800873a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 800873c:	4b1d      	ldr	r3, [pc, #116]	; (80087b4 <MX_TIM15_Init+0x9c>)
 800873e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008742:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008744:	4b1b      	ldr	r3, [pc, #108]	; (80087b4 <MX_TIM15_Init+0x9c>)
 8008746:	2200      	movs	r2, #0
 8008748:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800874a:	4b1a      	ldr	r3, [pc, #104]	; (80087b4 <MX_TIM15_Init+0x9c>)
 800874c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008750:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008752:	4b18      	ldr	r3, [pc, #96]	; (80087b4 <MX_TIM15_Init+0x9c>)
 8008754:	2200      	movs	r2, #0
 8008756:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008758:	4b16      	ldr	r3, [pc, #88]	; (80087b4 <MX_TIM15_Init+0x9c>)
 800875a:	2200      	movs	r2, #0
 800875c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <MX_TIM15_Init+0x9c>)
 8008760:	2200      	movs	r2, #0
 8008762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008764:	4813      	ldr	r0, [pc, #76]	; (80087b4 <MX_TIM15_Init+0x9c>)
 8008766:	f004 fd65 	bl	800d234 <HAL_TIM_Base_Init>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008770:	f7ff fb76 	bl	8007e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800877a:	f107 0310 	add.w	r3, r7, #16
 800877e:	4619      	mov	r1, r3
 8008780:	480c      	ldr	r0, [pc, #48]	; (80087b4 <MX_TIM15_Init+0x9c>)
 8008782:	f005 fb77 	bl	800de74 <HAL_TIM_ConfigClockSource>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800878c:	f7ff fb68 	bl	8007e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008790:	2300      	movs	r3, #0
 8008792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008798:	1d3b      	adds	r3, r7, #4
 800879a:	4619      	mov	r1, r3
 800879c:	4805      	ldr	r0, [pc, #20]	; (80087b4 <MX_TIM15_Init+0x9c>)
 800879e:	f006 f91f 	bl	800e9e0 <HAL_TIMEx_MasterConfigSynchronization>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80087a8:	f7ff fb5a 	bl	8007e60 <Error_Handler>
  }

}
 80087ac:	bf00      	nop
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20002b24 	.word	0x20002b24
 80087b8:	40014000 	.word	0x40014000

080087bc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80087c0:	4b10      	ldr	r3, [pc, #64]	; (8008804 <MX_TIM16_Init+0x48>)
 80087c2:	4a11      	ldr	r2, [pc, #68]	; (8008808 <MX_TIM16_Init+0x4c>)
 80087c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 80087c6:	4b0f      	ldr	r3, [pc, #60]	; (8008804 <MX_TIM16_Init+0x48>)
 80087c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087cc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087ce:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <MX_TIM16_Init+0x48>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80087d4:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <MX_TIM16_Init+0x48>)
 80087d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <MX_TIM16_Init+0x48>)
 80087de:	2200      	movs	r2, #0
 80087e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80087e2:	4b08      	ldr	r3, [pc, #32]	; (8008804 <MX_TIM16_Init+0x48>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087e8:	4b06      	ldr	r3, [pc, #24]	; (8008804 <MX_TIM16_Init+0x48>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80087ee:	4805      	ldr	r0, [pc, #20]	; (8008804 <MX_TIM16_Init+0x48>)
 80087f0:	f004 fd20 	bl	800d234 <HAL_TIM_Base_Init>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80087fa:	f7ff fb31 	bl	8007e60 <Error_Handler>
  }

}
 80087fe:	bf00      	nop
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20002ca0 	.word	0x20002ca0
 8008808:	40014400 	.word	0x40014400

0800880c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008810:	4b10      	ldr	r3, [pc, #64]	; (8008854 <MX_TIM17_Init+0x48>)
 8008812:	4a11      	ldr	r2, [pc, #68]	; (8008858 <MX_TIM17_Init+0x4c>)
 8008814:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008816:	4b0f      	ldr	r3, [pc, #60]	; (8008854 <MX_TIM17_Init+0x48>)
 8008818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800881c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800881e:	4b0d      	ldr	r3, [pc, #52]	; (8008854 <MX_TIM17_Init+0x48>)
 8008820:	2200      	movs	r2, #0
 8008822:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <MX_TIM17_Init+0x48>)
 8008826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800882a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <MX_TIM17_Init+0x48>)
 800882e:	2200      	movs	r2, #0
 8008830:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008832:	4b08      	ldr	r3, [pc, #32]	; (8008854 <MX_TIM17_Init+0x48>)
 8008834:	2200      	movs	r2, #0
 8008836:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008838:	4b06      	ldr	r3, [pc, #24]	; (8008854 <MX_TIM17_Init+0x48>)
 800883a:	2200      	movs	r2, #0
 800883c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800883e:	4805      	ldr	r0, [pc, #20]	; (8008854 <MX_TIM17_Init+0x48>)
 8008840:	f004 fcf8 	bl	800d234 <HAL_TIM_Base_Init>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800884a:	f7ff fb09 	bl	8007e60 <Error_Handler>
  }

}
 800884e:	bf00      	nop
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20002b70 	.word	0x20002b70
 8008858:	40014800 	.word	0x40014800

0800885c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	; 0x28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008864:	f107 0314 	add.w	r3, r7, #20
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	605a      	str	r2, [r3, #4]
 800886e:	609a      	str	r2, [r3, #8]
 8008870:	60da      	str	r2, [r3, #12]
 8008872:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1f      	ldr	r2, [pc, #124]	; (80088f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d137      	bne.n	80088ee <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800887e:	4b1f      	ldr	r3, [pc, #124]	; (80088fc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008882:	4a1e      	ldr	r2, [pc, #120]	; (80088fc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008888:	6613      	str	r3, [r2, #96]	; 0x60
 800888a:	4b1c      	ldr	r3, [pc, #112]	; (80088fc <HAL_TIM_Encoder_MspInit+0xa0>)
 800888c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800888e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008896:	4b19      	ldr	r3, [pc, #100]	; (80088fc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889a:	4a18      	ldr	r2, [pc, #96]	; (80088fc <HAL_TIM_Encoder_MspInit+0xa0>)
 800889c:	f043 0304 	orr.w	r3, r3, #4
 80088a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088a2:	4b16      	ldr	r3, [pc, #88]	; (80088fc <HAL_TIM_Encoder_MspInit+0xa0>)
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80088ae:	2303      	movs	r3, #3
 80088b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b2:	2302      	movs	r3, #2
 80088b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ba:	2300      	movs	r3, #0
 80088bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80088be:	2302      	movs	r3, #2
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088c2:	f107 0314 	add.w	r3, r7, #20
 80088c6:	4619      	mov	r1, r3
 80088c8:	480d      	ldr	r0, [pc, #52]	; (8008900 <HAL_TIM_Encoder_MspInit+0xa4>)
 80088ca:	f003 f9ad 	bl	800bc28 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	2018      	movs	r0, #24
 80088d4:	f002 fa7b 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80088d8:	2018      	movs	r0, #24
 80088da:	f002 fa92 	bl	800ae02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80088de:	2200      	movs	r2, #0
 80088e0:	2101      	movs	r1, #1
 80088e2:	201a      	movs	r0, #26
 80088e4:	f002 fa73 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80088e8:	201a      	movs	r0, #26
 80088ea:	f002 fa8a 	bl	800ae02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80088ee:	bf00      	nop
 80088f0:	3728      	adds	r7, #40	; 0x28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	40012c00 	.word	0x40012c00
 80088fc:	40021000 	.word	0x40021000
 8008900:	48000800 	.word	0x48000800

08008904 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008914:	d10c      	bne.n	8008930 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008916:	4b4e      	ldr	r3, [pc, #312]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891a:	4a4d      	ldr	r2, [pc, #308]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 800891c:	f043 0301 	orr.w	r3, r3, #1
 8008920:	6593      	str	r3, [r2, #88]	; 0x58
 8008922:	4b4b      	ldr	r3, [pc, #300]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800892e:	e08a      	b.n	8008a46 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM3)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a47      	ldr	r2, [pc, #284]	; (8008a54 <HAL_TIM_Base_MspInit+0x150>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d114      	bne.n	8008964 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800893a:	4b45      	ldr	r3, [pc, #276]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 800893c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893e:	4a44      	ldr	r2, [pc, #272]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008940:	f043 0302 	orr.w	r3, r3, #2
 8008944:	6593      	str	r3, [r2, #88]	; 0x58
 8008946:	4b42      	ldr	r3, [pc, #264]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	623b      	str	r3, [r7, #32]
 8008950:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	201d      	movs	r0, #29
 8008958:	f002 fa39 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800895c:	201d      	movs	r0, #29
 800895e:	f002 fa50 	bl	800ae02 <HAL_NVIC_EnableIRQ>
}
 8008962:	e070      	b.n	8008a46 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM5)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a3b      	ldr	r2, [pc, #236]	; (8008a58 <HAL_TIM_Base_MspInit+0x154>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d114      	bne.n	8008998 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800896e:	4b38      	ldr	r3, [pc, #224]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008972:	4a37      	ldr	r2, [pc, #220]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008974:	f043 0308 	orr.w	r3, r3, #8
 8008978:	6593      	str	r3, [r2, #88]	; 0x58
 800897a:	4b35      	ldr	r3, [pc, #212]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 800897c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008986:	2200      	movs	r2, #0
 8008988:	2102      	movs	r1, #2
 800898a:	2032      	movs	r0, #50	; 0x32
 800898c:	f002 fa1f 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008990:	2032      	movs	r0, #50	; 0x32
 8008992:	f002 fa36 	bl	800ae02 <HAL_NVIC_EnableIRQ>
}
 8008996:	e056      	b.n	8008a46 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM8)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a2f      	ldr	r2, [pc, #188]	; (8008a5c <HAL_TIM_Base_MspInit+0x158>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10c      	bne.n	80089bc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80089a2:	4b2b      	ldr	r3, [pc, #172]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 80089a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a6:	4a2a      	ldr	r2, [pc, #168]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 80089a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089ac:	6613      	str	r3, [r2, #96]	; 0x60
 80089ae:	4b28      	ldr	r3, [pc, #160]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 80089b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089b6:	61bb      	str	r3, [r7, #24]
 80089b8:	69bb      	ldr	r3, [r7, #24]
}
 80089ba:	e044      	b.n	8008a46 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM15)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a27      	ldr	r2, [pc, #156]	; (8008a60 <HAL_TIM_Base_MspInit+0x15c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d114      	bne.n	80089f0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80089c6:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 80089c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ca:	4a21      	ldr	r2, [pc, #132]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 80089cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d0:	6613      	str	r3, [r2, #96]	; 0x60
 80089d2:	4b1f      	ldr	r3, [pc, #124]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 80089d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80089de:	2200      	movs	r2, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	2018      	movs	r0, #24
 80089e4:	f002 f9f3 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80089e8:	2018      	movs	r0, #24
 80089ea:	f002 fa0a 	bl	800ae02 <HAL_NVIC_EnableIRQ>
}
 80089ee:	e02a      	b.n	8008a46 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM16)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1b      	ldr	r2, [pc, #108]	; (8008a64 <HAL_TIM_Base_MspInit+0x160>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d10c      	bne.n	8008a14 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80089fa:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 80089fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089fe:	4a14      	ldr	r2, [pc, #80]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a04:	6613      	str	r3, [r2, #96]	; 0x60
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0e:	613b      	str	r3, [r7, #16]
 8008a10:	693b      	ldr	r3, [r7, #16]
}
 8008a12:	e018      	b.n	8008a46 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM17)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a13      	ldr	r2, [pc, #76]	; (8008a68 <HAL_TIM_Base_MspInit+0x164>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d113      	bne.n	8008a46 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a22:	4a0b      	ldr	r2, [pc, #44]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a28:	6613      	str	r3, [r2, #96]	; 0x60
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <HAL_TIM_Base_MspInit+0x14c>)
 8008a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008a36:	2200      	movs	r2, #0
 8008a38:	2101      	movs	r1, #1
 8008a3a:	201a      	movs	r0, #26
 8008a3c:	f002 f9c7 	bl	800adce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008a40:	201a      	movs	r0, #26
 8008a42:	f002 f9de 	bl	800ae02 <HAL_NVIC_EnableIRQ>
}
 8008a46:	bf00      	nop
 8008a48:	3728      	adds	r7, #40	; 0x28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40021000 	.word	0x40021000
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40000c00 	.word	0x40000c00
 8008a5c:	40013400 	.word	0x40013400
 8008a60:	40014000 	.word	0x40014000
 8008a64:	40014400 	.word	0x40014400
 8008a68:	40014800 	.word	0x40014800

08008a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008a6c:	480d      	ldr	r0, [pc, #52]	; (8008aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a70:	480d      	ldr	r0, [pc, #52]	; (8008aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8008a72:	490e      	ldr	r1, [pc, #56]	; (8008aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8008a74:	4a0e      	ldr	r2, [pc, #56]	; (8008ab0 <LoopForever+0xe>)
  movs r3, #0
 8008a76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008a78:	e002      	b.n	8008a80 <LoopCopyDataInit>

08008a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a7e:	3304      	adds	r3, #4

08008a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a84:	d3f9      	bcc.n	8008a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a86:	4a0b      	ldr	r2, [pc, #44]	; (8008ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008a88:	4c0b      	ldr	r4, [pc, #44]	; (8008ab8 <LoopForever+0x16>)
  movs r3, #0
 8008a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a8c:	e001      	b.n	8008a92 <LoopFillZerobss>

08008a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a90:	3204      	adds	r2, #4

08008a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a94:	d3fb      	bcc.n	8008a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008a96:	f7ff fc69 	bl	800836c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a9a:	f007 fd1d 	bl	80104d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008a9e:	f7ff f91f 	bl	8007ce0 <main>

08008aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8008aa2:	e7fe      	b.n	8008aa2 <LoopForever>
  ldr   r0, =_estack
 8008aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008aac:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 8008ab0:	08015a60 	.word	0x08015a60
  ldr r2, =_sbss
 8008ab4:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 8008ab8:	20002cf4 	.word	0x20002cf4

08008abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008abc:	e7fe      	b.n	8008abc <ADC1_2_IRQHandler>

08008abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ac8:	2003      	movs	r0, #3
 8008aca:	f002 f975 	bl	800adb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ace:	2000      	movs	r0, #0
 8008ad0:	f000 f80e 	bl	8008af0 <HAL_InitTick>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	71fb      	strb	r3, [r7, #7]
 8008ade:	e001      	b.n	8008ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008ae0:	f7ff fa8e 	bl	8008000 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008afc:	4b16      	ldr	r3, [pc, #88]	; (8008b58 <HAL_InitTick+0x68>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d022      	beq.n	8008b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008b04:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <HAL_InitTick+0x6c>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <HAL_InitTick+0x68>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f002 f98e 	bl	800ae3a <HAL_SYSTICK_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10f      	bne.n	8008b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b0f      	cmp	r3, #15
 8008b28:	d809      	bhi.n	8008b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b32:	f002 f94c 	bl	800adce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b36:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <HAL_InitTick+0x70>)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	e007      	b.n	8008b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	e004      	b.n	8008b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	73fb      	strb	r3, [r7, #15]
 8008b48:	e001      	b.n	8008b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20000c3c 	.word	0x20000c3c
 8008b5c:	20000c34 	.word	0x20000c34
 8008b60:	20000c38 	.word	0x20000c38

08008b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <HAL_IncTick+0x1c>)
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <HAL_IncTick+0x20>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4413      	add	r3, r2
 8008b72:	4a03      	ldr	r2, [pc, #12]	; (8008b80 <HAL_IncTick+0x1c>)
 8008b74:	6013      	str	r3, [r2, #0]
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	20002cec 	.word	0x20002cec
 8008b84:	20000c3c 	.word	0x20000c3c

08008b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8008b8c:	4b03      	ldr	r3, [pc, #12]	; (8008b9c <HAL_GetTick+0x14>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	20002cec 	.word	0x20002cec

08008ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ba8:	f7ff ffee 	bl	8008b88 <HAL_GetTick>
 8008bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bb8:	d004      	beq.n	8008bc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008bba:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <HAL_Delay+0x40>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008bc4:	bf00      	nop
 8008bc6:	f7ff ffdf 	bl	8008b88 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d8f7      	bhi.n	8008bc6 <HAL_Delay+0x26>
  {
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000c3c 	.word	0x20000c3c

08008be4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	609a      	str	r2, [r3, #8]
}
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	609a      	str	r2, [r3, #8]
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008c4c:	b490      	push	{r4, r7}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3360      	adds	r3, #96	; 0x60
 8008c5e:	461a      	mov	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008c68:	6822      	ldr	r2, [r4, #0]
 8008c6a:	4b08      	ldr	r3, [pc, #32]	; (8008c8c <LL_ADC_SetOffset+0x40>)
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c7e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc90      	pop	{r4, r7}
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	03fff000 	.word	0x03fff000

08008c90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008c90:	b490      	push	{r4, r7}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3360      	adds	r3, #96	; 0x60
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc90      	pop	{r4, r7}
 8008cb6:	4770      	bx	lr

08008cb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008cb8:	b490      	push	{r4, r7}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3360      	adds	r3, #96	; 0x60
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008cde:	bf00      	nop
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc90      	pop	{r4, r7}
 8008ce6:	4770      	bx	lr

08008ce8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008ce8:	b490      	push	{r4, r7}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3360      	adds	r3, #96	; 0x60
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc90      	pop	{r4, r7}
 8008d16:	4770      	bx	lr

08008d18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008d18:	b490      	push	{r4, r7}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3360      	adds	r3, #96	; 0x60
 8008d28:	461a      	mov	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc90      	pop	{r4, r7}
 8008d46:	4770      	bx	lr

08008d48 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	615a      	str	r2, [r3, #20]
}
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e000      	b.n	8008d88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008d94:	b490      	push	{r4, r7}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3330      	adds	r3, #48	; 0x30
 8008da4:	461a      	mov	r2, r3
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	0a1b      	lsrs	r3, r3, #8
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	f003 030c 	and.w	r3, r3, #12
 8008db0:	4413      	add	r3, r2
 8008db2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008db4:	6822      	ldr	r2, [r4, #0]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	211f      	movs	r1, #31
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	43db      	mvns	r3, r3
 8008dc4:	401a      	ands	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	0e9b      	lsrs	r3, r3, #26
 8008dca:	f003 011f 	and.w	r1, r3, #31
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f003 031f 	and.w	r3, r3, #31
 8008dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bc90      	pop	{r4, r7}
 8008de4:	4770      	bx	lr

08008de6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008de6:	b490      	push	{r4, r7}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3314      	adds	r3, #20
 8008df6:	461a      	mov	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	0e5b      	lsrs	r3, r3, #25
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	f003 0304 	and.w	r3, r3, #4
 8008e02:	4413      	add	r3, r2
 8008e04:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	0d1b      	lsrs	r3, r3, #20
 8008e0c:	f003 031f 	and.w	r3, r3, #31
 8008e10:	2107      	movs	r1, #7
 8008e12:	fa01 f303 	lsl.w	r3, r1, r3
 8008e16:	43db      	mvns	r3, r3
 8008e18:	401a      	ands	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	0d1b      	lsrs	r3, r3, #20
 8008e1e:	f003 031f 	and.w	r3, r3, #31
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	fa01 f303 	lsl.w	r3, r1, r3
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008e2c:	bf00      	nop
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc90      	pop	{r4, r7}
 8008e34:	4770      	bx	lr
	...

08008e38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e50:	43db      	mvns	r3, r3
 8008e52:	401a      	ands	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f003 0318 	and.w	r3, r3, #24
 8008e5a:	4908      	ldr	r1, [pc, #32]	; (8008e7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8008e5c:	40d9      	lsrs	r1, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	400b      	ands	r3, r1
 8008e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e66:	431a      	orrs	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	0007ffff 	.word	0x0007ffff

08008e80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 031f 	and.w	r3, r3, #31
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	6093      	str	r3, [r2, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed4:	d101      	bne.n	8008eda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e000      	b.n	8008edc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008efc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f24:	d101      	bne.n	8008f2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e000      	b.n	8008f2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f4c:	f043 0201 	orr.w	r2, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f74:	f043 0202 	orr.w	r2, r3, #2
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <LL_ADC_IsEnabled+0x18>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e000      	b.n	8008fa2 <LL_ADC_IsEnabled+0x1a>
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d101      	bne.n	8008fc6 <LL_ADC_IsDisableOngoing+0x18>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <LL_ADC_IsDisableOngoing+0x1a>
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008fe8:	f043 0204 	orr.w	r2, r3, #4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800900c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009010:	f043 0210 	orr.w	r2, r3, #16
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b04      	cmp	r3, #4
 8009036:	d101      	bne.n	800903c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800905a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800905e:	f043 0220 	orr.w	r2, r3, #32
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b08      	cmp	r3, #8
 8009084:	d101      	bne.n	800908a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009098:	b590      	push	{r4, r7, lr}
 800909a:	b089      	sub	sp, #36	; 0x24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e1ad      	b.n	800940e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d109      	bne.n	80090d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7fe f861 	bl	8007188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff fef1 	bl	8008ec0 <LL_ADC_IsDeepPowerDownEnabled>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fed7 	bl	8008e9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff ff0c 	bl	8008f10 <LL_ADC_IsInternalRegulatorEnabled>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d113      	bne.n	8009126 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff fef0 	bl	8008ee8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009108:	4b9e      	ldr	r3, [pc, #632]	; (8009384 <HAL_ADC_Init+0x2ec>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	099b      	lsrs	r3, r3, #6
 800910e:	4a9e      	ldr	r2, [pc, #632]	; (8009388 <HAL_ADC_Init+0x2f0>)
 8009110:	fba2 2303 	umull	r2, r3, r2, r3
 8009114:	099b      	lsrs	r3, r3, #6
 8009116:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009118:	e002      	b.n	8009120 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	3b01      	subs	r3, #1
 800911e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f9      	bne.n	800911a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff fef0 	bl	8008f10 <LL_ADC_IsInternalRegulatorEnabled>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913a:	f043 0210 	orr.w	r2, r3, #16
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009146:	f043 0201 	orr.w	r2, r3, #1
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff ff64 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 800915c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009162:	f003 0310 	and.w	r3, r3, #16
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 8148 	bne.w	80093fc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f040 8144 	bne.w	80093fc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009178:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800917c:	f043 0202 	orr.w	r2, r3, #2
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fefd 	bl	8008f88 <LL_ADC_IsEnabled>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d141      	bne.n	8009218 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800919c:	d004      	beq.n	80091a8 <HAL_ADC_Init+0x110>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a7a      	ldr	r2, [pc, #488]	; (800938c <HAL_ADC_Init+0x2f4>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d10f      	bne.n	80091c8 <HAL_ADC_Init+0x130>
 80091a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80091ac:	f7ff feec 	bl	8008f88 <LL_ADC_IsEnabled>
 80091b0:	4604      	mov	r4, r0
 80091b2:	4876      	ldr	r0, [pc, #472]	; (800938c <HAL_ADC_Init+0x2f4>)
 80091b4:	f7ff fee8 	bl	8008f88 <LL_ADC_IsEnabled>
 80091b8:	4603      	mov	r3, r0
 80091ba:	4323      	orrs	r3, r4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bf0c      	ite	eq
 80091c0:	2301      	moveq	r3, #1
 80091c2:	2300      	movne	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	e012      	b.n	80091ee <HAL_ADC_Init+0x156>
 80091c8:	4871      	ldr	r0, [pc, #452]	; (8009390 <HAL_ADC_Init+0x2f8>)
 80091ca:	f7ff fedd 	bl	8008f88 <LL_ADC_IsEnabled>
 80091ce:	4604      	mov	r4, r0
 80091d0:	4870      	ldr	r0, [pc, #448]	; (8009394 <HAL_ADC_Init+0x2fc>)
 80091d2:	f7ff fed9 	bl	8008f88 <LL_ADC_IsEnabled>
 80091d6:	4603      	mov	r3, r0
 80091d8:	431c      	orrs	r4, r3
 80091da:	486f      	ldr	r0, [pc, #444]	; (8009398 <HAL_ADC_Init+0x300>)
 80091dc:	f7ff fed4 	bl	8008f88 <LL_ADC_IsEnabled>
 80091e0:	4603      	mov	r3, r0
 80091e2:	4323      	orrs	r3, r4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bf0c      	ite	eq
 80091e8:	2301      	moveq	r3, #1
 80091ea:	2300      	movne	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d012      	beq.n	8009218 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091fa:	d004      	beq.n	8009206 <HAL_ADC_Init+0x16e>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a62      	ldr	r2, [pc, #392]	; (800938c <HAL_ADC_Init+0x2f4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d101      	bne.n	800920a <HAL_ADC_Init+0x172>
 8009206:	4a65      	ldr	r2, [pc, #404]	; (800939c <HAL_ADC_Init+0x304>)
 8009208:	e000      	b.n	800920c <HAL_ADC_Init+0x174>
 800920a:	4a65      	ldr	r2, [pc, #404]	; (80093a0 <HAL_ADC_Init+0x308>)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4619      	mov	r1, r3
 8009212:	4610      	mov	r0, r2
 8009214:	f7ff fce6 	bl	8008be4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7f5b      	ldrb	r3, [r3, #29]
 800921c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009222:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8009228:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800922e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009236:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009238:	4313      	orrs	r3, r2
 800923a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009242:	2b01      	cmp	r3, #1
 8009244:	d106      	bne.n	8009254 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	3b01      	subs	r3, #1
 800924c:	045b      	lsls	r3, r3, #17
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	4313      	orrs	r3, r2
 8009252:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d009      	beq.n	8009270 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	4313      	orrs	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	4b4b      	ldr	r3, [pc, #300]	; (80093a4 <HAL_ADC_Init+0x30c>)
 8009278:	4013      	ands	r3, r2
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6812      	ldr	r2, [r2, #0]
 800927e:	69b9      	ldr	r1, [r7, #24]
 8009280:	430b      	orrs	r3, r1
 8009282:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff fec0 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 80092a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff fee1 	bl	8009072 <LL_ADC_INJ_IsConversionOngoing>
 80092b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d17f      	bne.n	80093b8 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d17c      	bne.n	80093b8 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80092c2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092ca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80092cc:	4313      	orrs	r3, r2
 80092ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092da:	f023 0302 	bic.w	r3, r3, #2
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	69b9      	ldr	r1, [r7, #24]
 80092e4:	430b      	orrs	r3, r1
 80092e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d017      	beq.n	8009320 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	691a      	ldr	r2, [r3, #16]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80092fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009308:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800930c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	6911      	ldr	r1, [r2, #16]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	430b      	orrs	r3, r1
 800931a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800931e:	e013      	b.n	8009348 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800932e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009344:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800934e:	2b01      	cmp	r3, #1
 8009350:	d12a      	bne.n	80093a8 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800935c:	f023 0304 	bic.w	r3, r3, #4
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009368:	4311      	orrs	r1, r2
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800936e:	4311      	orrs	r1, r2
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009374:	430a      	orrs	r2, r1
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f042 0201 	orr.w	r2, r2, #1
 8009380:	611a      	str	r2, [r3, #16]
 8009382:	e019      	b.n	80093b8 <HAL_ADC_Init+0x320>
 8009384:	20000c34 	.word	0x20000c34
 8009388:	053e2d63 	.word	0x053e2d63
 800938c:	50000100 	.word	0x50000100
 8009390:	50000400 	.word	0x50000400
 8009394:	50000500 	.word	0x50000500
 8009398:	50000600 	.word	0x50000600
 800939c:	50000300 	.word	0x50000300
 80093a0:	50000700 	.word	0x50000700
 80093a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0201 	bic.w	r2, r2, #1
 80093b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d10c      	bne.n	80093da <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	f023 010f 	bic.w	r1, r3, #15
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	1e5a      	subs	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	631a      	str	r2, [r3, #48]	; 0x30
 80093d8:	e007      	b.n	80093ea <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 020f 	bic.w	r2, r2, #15
 80093e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	f043 0201 	orr.w	r2, r3, #1
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80093fa:	e007      	b.n	800940c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009400:	f043 0210 	orr.w	r2, r3, #16
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800940c:	7ffb      	ldrb	r3, [r7, #31]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3724      	adds	r7, #36	; 0x24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd90      	pop	{r4, r7, pc}
 8009416:	bf00      	nop

08009418 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800942c:	d004      	beq.n	8009438 <HAL_ADC_Start_DMA+0x20>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a58      	ldr	r2, [pc, #352]	; (8009594 <HAL_ADC_Start_DMA+0x17c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d101      	bne.n	800943c <HAL_ADC_Start_DMA+0x24>
 8009438:	4b57      	ldr	r3, [pc, #348]	; (8009598 <HAL_ADC_Start_DMA+0x180>)
 800943a:	e000      	b.n	800943e <HAL_ADC_Start_DMA+0x26>
 800943c:	4b57      	ldr	r3, [pc, #348]	; (800959c <HAL_ADC_Start_DMA+0x184>)
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff fd1e 	bl	8008e80 <LL_ADC_GetMultimode>
 8009444:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff fdea 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	f040 8096 	bne.w	8009584 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <HAL_ADC_Start_DMA+0x4e>
 8009462:	2302      	movs	r3, #2
 8009464:	e091      	b.n	800958a <HAL_ADC_Start_DMA+0x172>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2b05      	cmp	r3, #5
 8009478:	d002      	beq.n	8009480 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b09      	cmp	r3, #9
 800947e:	d17a      	bne.n	8009576 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 fd71 	bl	8009f68 <ADC_Enable>
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d16d      	bne.n	800956c <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a3a      	ldr	r2, [pc, #232]	; (8009594 <HAL_ADC_Start_DMA+0x17c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d009      	beq.n	80094c2 <HAL_ADC_Start_DMA+0xaa>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a3b      	ldr	r2, [pc, #236]	; (80095a0 <HAL_ADC_Start_DMA+0x188>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d002      	beq.n	80094be <HAL_ADC_Start_DMA+0xa6>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	e003      	b.n	80094c6 <HAL_ADC_Start_DMA+0xae>
 80094be:	4b39      	ldr	r3, [pc, #228]	; (80095a4 <HAL_ADC_Start_DMA+0x18c>)
 80094c0:	e001      	b.n	80094c6 <HAL_ADC_Start_DMA+0xae>
 80094c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d002      	beq.n	80094d4 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094f0:	f023 0206 	bic.w	r2, r3, #6
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	661a      	str	r2, [r3, #96]	; 0x60
 80094f8:	e002      	b.n	8009500 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009504:	4a28      	ldr	r2, [pc, #160]	; (80095a8 <HAL_ADC_Start_DMA+0x190>)
 8009506:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	4a27      	ldr	r2, [pc, #156]	; (80095ac <HAL_ADC_Start_DMA+0x194>)
 800950e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009514:	4a26      	ldr	r2, [pc, #152]	; (80095b0 <HAL_ADC_Start_DMA+0x198>)
 8009516:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	221c      	movs	r2, #28
 800951e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0210 	orr.w	r2, r2, #16
 8009536:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f042 0201 	orr.w	r2, r2, #1
 8009546:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3340      	adds	r3, #64	; 0x40
 8009552:	4619      	mov	r1, r3
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f002 f942 	bl	800b7e0 <HAL_DMA_Start_IT>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4618      	mov	r0, r3
 8009566:	f7ff fd35 	bl	8008fd4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800956a:	e00d      	b.n	8009588 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009574:	e008      	b.n	8009588 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009582:	e001      	b.n	8009588 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009584:	2302      	movs	r3, #2
 8009586:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	50000100 	.word	0x50000100
 8009598:	50000300 	.word	0x50000300
 800959c:	50000700 	.word	0x50000700
 80095a0:	50000500 	.word	0x50000500
 80095a4:	50000400 	.word	0x50000400
 80095a8:	0800a0cd 	.word	0x0800a0cd
 80095ac:	0800a1a5 	.word	0x0800a1a5
 80095b0:	0800a1c1 	.word	0x0800a1c1

080095b4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <HAL_ADC_Stop_DMA+0x16>
 80095c6:	2302      	movs	r3, #2
 80095c8:	e051      	b.n	800966e <HAL_ADC_Stop_DMA+0xba>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80095d2:	2103      	movs	r1, #3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fc13 	bl	8009e00 <ADC_ConversionStop>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d13f      	bne.n	8009664 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0201 	bic.w	r2, r2, #1
 80095f2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d10f      	bne.n	8009622 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009606:	4618      	mov	r0, r3
 8009608:	f002 f965 	bl	800b8d6 <HAL_DMA_Abort>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800961a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0210 	bic.w	r2, r2, #16
 8009630:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d105      	bne.n	8009644 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fcef 	bl	800a01c <ADC_Disable>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]
 8009642:	e002      	b.n	800964a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fce9 	bl	800a01c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009654:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009658:	f023 0301 	bic.w	r3, r3, #1
 800965c:	f043 0201 	orr.w	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b0a6      	sub	sp, #152	; 0x98
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_ADC_ConfigChannel+0x22>
 80096be:	2302      	movs	r3, #2
 80096c0:	e38e      	b.n	8009de0 <HAL_ADC_ConfigChannel+0x740>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fca8 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f040 836f 	bne.w	8009dba <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	6859      	ldr	r1, [r3, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	f7ff fb53 	bl	8008d94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fc96 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 80096f8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff fcb6 	bl	8009072 <LL_ADC_INJ_IsConversionOngoing>
 8009706:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800970a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800970e:	2b00      	cmp	r3, #0
 8009710:	f040 817b 	bne.w	8009a0a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 8176 	bne.w	8009a0a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009726:	d10f      	bne.n	8009748 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2200      	movs	r2, #0
 8009732:	4619      	mov	r1, r3
 8009734:	f7ff fb57 	bl	8008de6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff fb01 	bl	8008d48 <LL_ADC_SetSamplingTimeCommonConfig>
 8009746:	e00e      	b.n	8009766 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6819      	ldr	r1, [r3, #0]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	461a      	mov	r2, r3
 8009756:	f7ff fb46 	bl	8008de6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2100      	movs	r1, #0
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff faf1 	bl	8008d48 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	695a      	ldr	r2, [r3, #20]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	08db      	lsrs	r3, r3, #3
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	2b04      	cmp	r3, #4
 8009786:	d022      	beq.n	80097ce <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6919      	ldr	r1, [r3, #16]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009798:	f7ff fa58 	bl	8008c4c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	6919      	ldr	r1, [r3, #16]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	461a      	mov	r2, r3
 80097aa:	f7ff fa9d 	bl	8008ce8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	6919      	ldr	r1, [r3, #16]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	7f1b      	ldrb	r3, [r3, #28]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d102      	bne.n	80097c4 <HAL_ADC_ConfigChannel+0x124>
 80097be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097c2:	e000      	b.n	80097c6 <HAL_ADC_ConfigChannel+0x126>
 80097c4:	2300      	movs	r3, #0
 80097c6:	461a      	mov	r2, r3
 80097c8:	f7ff faa6 	bl	8008d18 <LL_ADC_SetOffsetSaturation>
 80097cc:	e11d      	b.n	8009a0a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2100      	movs	r1, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fa5b 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 80097da:	4603      	mov	r3, r0
 80097dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <HAL_ADC_ConfigChannel+0x15a>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff fa50 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 80097f0:	4603      	mov	r3, r0
 80097f2:	0e9b      	lsrs	r3, r3, #26
 80097f4:	f003 021f 	and.w	r2, r3, #31
 80097f8:	e012      	b.n	8009820 <HAL_ADC_ConfigChannel+0x180>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fa45 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 8009806:	4603      	mov	r3, r0
 8009808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800980c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009810:	fa93 f3a3 	rbit	r3, r3
 8009814:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009818:	fab3 f383 	clz	r3, r3
 800981c:	b2db      	uxtb	r3, r3
 800981e:	461a      	mov	r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009828:	2b00      	cmp	r3, #0
 800982a:	d105      	bne.n	8009838 <HAL_ADC_ConfigChannel+0x198>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	0e9b      	lsrs	r3, r3, #26
 8009832:	f003 031f 	and.w	r3, r3, #31
 8009836:	e00a      	b.n	800984e <HAL_ADC_ConfigChannel+0x1ae>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800983e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009840:	fa93 f3a3 	rbit	r3, r3
 8009844:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009848:	fab3 f383 	clz	r3, r3
 800984c:	b2db      	uxtb	r3, r3
 800984e:	429a      	cmp	r2, r3
 8009850:	d106      	bne.n	8009860 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2200      	movs	r2, #0
 8009858:	2100      	movs	r1, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff fa2c 	bl	8008cb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2101      	movs	r1, #1
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff fa12 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 800986c:	4603      	mov	r3, r0
 800986e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10a      	bne.n	800988c <HAL_ADC_ConfigChannel+0x1ec>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2101      	movs	r1, #1
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fa07 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 8009882:	4603      	mov	r3, r0
 8009884:	0e9b      	lsrs	r3, r3, #26
 8009886:	f003 021f 	and.w	r2, r3, #31
 800988a:	e010      	b.n	80098ae <HAL_ADC_ConfigChannel+0x20e>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2101      	movs	r1, #1
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff f9fc 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 8009898:	4603      	mov	r3, r0
 800989a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800989c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800989e:	fa93 f3a3 	rbit	r3, r3
 80098a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80098a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098a6:	fab3 f383 	clz	r3, r3
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d105      	bne.n	80098c6 <HAL_ADC_ConfigChannel+0x226>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	0e9b      	lsrs	r3, r3, #26
 80098c0:	f003 031f 	and.w	r3, r3, #31
 80098c4:	e00a      	b.n	80098dc <HAL_ADC_ConfigChannel+0x23c>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ce:	fa93 f3a3 	rbit	r3, r3
 80098d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80098d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d6:	fab3 f383 	clz	r3, r3
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	429a      	cmp	r2, r3
 80098de:	d106      	bne.n	80098ee <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2200      	movs	r2, #0
 80098e6:	2101      	movs	r1, #1
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff f9e5 	bl	8008cb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2102      	movs	r1, #2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff f9cb 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 80098fa:	4603      	mov	r3, r0
 80098fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <HAL_ADC_ConfigChannel+0x27a>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2102      	movs	r1, #2
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff f9c0 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 8009910:	4603      	mov	r3, r0
 8009912:	0e9b      	lsrs	r3, r3, #26
 8009914:	f003 021f 	and.w	r2, r3, #31
 8009918:	e010      	b.n	800993c <HAL_ADC_ConfigChannel+0x29c>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2102      	movs	r1, #2
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff f9b5 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 8009926:	4603      	mov	r3, r0
 8009928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800992a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800992c:	fa93 f3a3 	rbit	r3, r3
 8009930:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009934:	fab3 f383 	clz	r3, r3
 8009938:	b2db      	uxtb	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009944:	2b00      	cmp	r3, #0
 8009946:	d105      	bne.n	8009954 <HAL_ADC_ConfigChannel+0x2b4>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	0e9b      	lsrs	r3, r3, #26
 800994e:	f003 031f 	and.w	r3, r3, #31
 8009952:	e00a      	b.n	800996a <HAL_ADC_ConfigChannel+0x2ca>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800995a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800995c:	fa93 f3a3 	rbit	r3, r3
 8009960:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009964:	fab3 f383 	clz	r3, r3
 8009968:	b2db      	uxtb	r3, r3
 800996a:	429a      	cmp	r2, r3
 800996c:	d106      	bne.n	800997c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	2102      	movs	r1, #2
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff f99e 	bl	8008cb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2103      	movs	r1, #3
 8009982:	4618      	mov	r0, r3
 8009984:	f7ff f984 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 8009988:	4603      	mov	r3, r0
 800998a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <HAL_ADC_ConfigChannel+0x308>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2103      	movs	r1, #3
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff f979 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 800999e:	4603      	mov	r3, r0
 80099a0:	0e9b      	lsrs	r3, r3, #26
 80099a2:	f003 021f 	and.w	r2, r3, #31
 80099a6:	e010      	b.n	80099ca <HAL_ADC_ConfigChannel+0x32a>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2103      	movs	r1, #3
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f96e 	bl	8008c90 <LL_ADC_GetOffsetChannel>
 80099b4:	4603      	mov	r3, r0
 80099b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ba:	fa93 f3a3 	rbit	r3, r3
 80099be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80099c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c2:	fab3 f383 	clz	r3, r3
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	461a      	mov	r2, r3
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d105      	bne.n	80099e2 <HAL_ADC_ConfigChannel+0x342>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	0e9b      	lsrs	r3, r3, #26
 80099dc:	f003 031f 	and.w	r3, r3, #31
 80099e0:	e00a      	b.n	80099f8 <HAL_ADC_ConfigChannel+0x358>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ea:	fa93 f3a3 	rbit	r3, r3
 80099ee:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80099f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f2:	fab3 f383 	clz	r3, r3
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d106      	bne.n	8009a0a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2200      	movs	r2, #0
 8009a02:	2103      	movs	r1, #3
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff f957 	bl	8008cb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff faba 	bl	8008f88 <LL_ADC_IsEnabled>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f040 810c 	bne.w	8009c34 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	f7ff fa05 	bl	8008e38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	4aaf      	ldr	r2, [pc, #700]	; (8009cf0 <HAL_ADC_ConfigChannel+0x650>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	f040 80fd 	bne.w	8009c34 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10b      	bne.n	8009a62 <HAL_ADC_ConfigChannel+0x3c2>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	0e9b      	lsrs	r3, r3, #26
 8009a50:	3301      	adds	r3, #1
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	2b09      	cmp	r3, #9
 8009a58:	bf94      	ite	ls
 8009a5a:	2301      	movls	r3, #1
 8009a5c:	2300      	movhi	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	e012      	b.n	8009a88 <HAL_ADC_ConfigChannel+0x3e8>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6a:	fa93 f3a3 	rbit	r3, r3
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a72:	fab3 f383 	clz	r3, r3
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	3301      	adds	r3, #1
 8009a7a:	f003 031f 	and.w	r3, r3, #31
 8009a7e:	2b09      	cmp	r3, #9
 8009a80:	bf94      	ite	ls
 8009a82:	2301      	movls	r3, #1
 8009a84:	2300      	movhi	r3, #0
 8009a86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d064      	beq.n	8009b56 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d107      	bne.n	8009aa8 <HAL_ADC_ConfigChannel+0x408>
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	0e9b      	lsrs	r3, r3, #26
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	069b      	lsls	r3, r3, #26
 8009aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009aa6:	e00e      	b.n	8009ac6 <HAL_ADC_ConfigChannel+0x426>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	fa93 f3a3 	rbit	r3, r3
 8009ab4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab8:	fab3 f383 	clz	r3, r3
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	3301      	adds	r3, #1
 8009ac0:	069b      	lsls	r3, r3, #26
 8009ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <HAL_ADC_ConfigChannel+0x446>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	0e9b      	lsrs	r3, r3, #26
 8009ad8:	3301      	adds	r3, #1
 8009ada:	f003 031f 	and.w	r3, r3, #31
 8009ade:	2101      	movs	r1, #1
 8009ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae4:	e010      	b.n	8009b08 <HAL_ADC_ConfigChannel+0x468>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	fa93 f3a3 	rbit	r3, r3
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	fab3 f383 	clz	r3, r3
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	3301      	adds	r3, #1
 8009afe:	f003 031f 	and.w	r3, r3, #31
 8009b02:	2101      	movs	r1, #1
 8009b04:	fa01 f303 	lsl.w	r3, r1, r3
 8009b08:	ea42 0103 	orr.w	r1, r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <HAL_ADC_ConfigChannel+0x48e>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	0e9b      	lsrs	r3, r3, #26
 8009b1e:	3301      	adds	r3, #1
 8009b20:	f003 021f 	and.w	r2, r3, #31
 8009b24:	4613      	mov	r3, r2
 8009b26:	005b      	lsls	r3, r3, #1
 8009b28:	4413      	add	r3, r2
 8009b2a:	051b      	lsls	r3, r3, #20
 8009b2c:	e011      	b.n	8009b52 <HAL_ADC_ConfigChannel+0x4b2>
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	fa93 f3a3 	rbit	r3, r3
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	fab3 f383 	clz	r3, r3
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	3301      	adds	r3, #1
 8009b46:	f003 021f 	and.w	r2, r3, #31
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	4413      	add	r3, r2
 8009b50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009b52:	430b      	orrs	r3, r1
 8009b54:	e069      	b.n	8009c2a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d107      	bne.n	8009b72 <HAL_ADC_ConfigChannel+0x4d2>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	0e9b      	lsrs	r3, r3, #26
 8009b68:	3301      	adds	r3, #1
 8009b6a:	069b      	lsls	r3, r3, #26
 8009b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009b70:	e00e      	b.n	8009b90 <HAL_ADC_ConfigChannel+0x4f0>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	fa93 f3a3 	rbit	r3, r3
 8009b7e:	61fb      	str	r3, [r7, #28]
  return result;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	fab3 f383 	clz	r3, r3
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	3301      	adds	r3, #1
 8009b8a:	069b      	lsls	r3, r3, #26
 8009b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <HAL_ADC_ConfigChannel+0x510>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	0e9b      	lsrs	r3, r3, #26
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	f003 031f 	and.w	r3, r3, #31
 8009ba8:	2101      	movs	r1, #1
 8009baa:	fa01 f303 	lsl.w	r3, r1, r3
 8009bae:	e010      	b.n	8009bd2 <HAL_ADC_ConfigChannel+0x532>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	fa93 f3a3 	rbit	r3, r3
 8009bbc:	617b      	str	r3, [r7, #20]
  return result;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	fab3 f383 	clz	r3, r3
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	f003 031f 	and.w	r3, r3, #31
 8009bcc:	2101      	movs	r1, #1
 8009bce:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd2:	ea42 0103 	orr.w	r1, r2, r3
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10d      	bne.n	8009bfe <HAL_ADC_ConfigChannel+0x55e>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	0e9b      	lsrs	r3, r3, #26
 8009be8:	3301      	adds	r3, #1
 8009bea:	f003 021f 	and.w	r2, r3, #31
 8009bee:	4613      	mov	r3, r2
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	4413      	add	r3, r2
 8009bf4:	3b1e      	subs	r3, #30
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009bfc:	e014      	b.n	8009c28 <HAL_ADC_ConfigChannel+0x588>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	fa93 f3a3 	rbit	r3, r3
 8009c0a:	60fb      	str	r3, [r7, #12]
  return result;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	fab3 f383 	clz	r3, r3
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	3301      	adds	r3, #1
 8009c16:	f003 021f 	and.w	r2, r3, #31
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	4413      	add	r3, r2
 8009c20:	3b1e      	subs	r3, #30
 8009c22:	051b      	lsls	r3, r3, #20
 8009c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	6892      	ldr	r2, [r2, #8]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	f7ff f8d9 	bl	8008de6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	4b2e      	ldr	r3, [pc, #184]	; (8009cf4 <HAL_ADC_ConfigChannel+0x654>)
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 80c9 	beq.w	8009dd4 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c4a:	d004      	beq.n	8009c56 <HAL_ADC_ConfigChannel+0x5b6>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a29      	ldr	r2, [pc, #164]	; (8009cf8 <HAL_ADC_ConfigChannel+0x658>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d101      	bne.n	8009c5a <HAL_ADC_ConfigChannel+0x5ba>
 8009c56:	4b29      	ldr	r3, [pc, #164]	; (8009cfc <HAL_ADC_ConfigChannel+0x65c>)
 8009c58:	e000      	b.n	8009c5c <HAL_ADC_ConfigChannel+0x5bc>
 8009c5a:	4b29      	ldr	r3, [pc, #164]	; (8009d00 <HAL_ADC_ConfigChannel+0x660>)
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe ffe7 	bl	8008c30 <LL_ADC_GetCommonPathInternalCh>
 8009c62:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a26      	ldr	r2, [pc, #152]	; (8009d04 <HAL_ADC_ConfigChannel+0x664>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d004      	beq.n	8009c7a <HAL_ADC_ConfigChannel+0x5da>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a24      	ldr	r2, [pc, #144]	; (8009d08 <HAL_ADC_ConfigChannel+0x668>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d14e      	bne.n	8009d18 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d148      	bne.n	8009d18 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c8e:	d005      	beq.n	8009c9c <HAL_ADC_ConfigChannel+0x5fc>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a1d      	ldr	r2, [pc, #116]	; (8009d0c <HAL_ADC_ConfigChannel+0x66c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	f040 8099 	bne.w	8009dce <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ca4:	d004      	beq.n	8009cb0 <HAL_ADC_ConfigChannel+0x610>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a13      	ldr	r2, [pc, #76]	; (8009cf8 <HAL_ADC_ConfigChannel+0x658>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d101      	bne.n	8009cb4 <HAL_ADC_ConfigChannel+0x614>
 8009cb0:	4a12      	ldr	r2, [pc, #72]	; (8009cfc <HAL_ADC_ConfigChannel+0x65c>)
 8009cb2:	e000      	b.n	8009cb6 <HAL_ADC_ConfigChannel+0x616>
 8009cb4:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <HAL_ADC_ConfigChannel+0x660>)
 8009cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f7fe ffa2 	bl	8008c0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <HAL_ADC_ConfigChannel+0x670>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	099b      	lsrs	r3, r3, #6
 8009ccc:	4a11      	ldr	r2, [pc, #68]	; (8009d14 <HAL_ADC_ConfigChannel+0x674>)
 8009cce:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd2:	099a      	lsrs	r2, r3, #6
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	4413      	add	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009cde:	e002      	b.n	8009ce6 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f9      	bne.n	8009ce0 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009cec:	e06f      	b.n	8009dce <HAL_ADC_ConfigChannel+0x72e>
 8009cee:	bf00      	nop
 8009cf0:	407f0000 	.word	0x407f0000
 8009cf4:	80080000 	.word	0x80080000
 8009cf8:	50000100 	.word	0x50000100
 8009cfc:	50000300 	.word	0x50000300
 8009d00:	50000700 	.word	0x50000700
 8009d04:	c3210000 	.word	0xc3210000
 8009d08:	90c00010 	.word	0x90c00010
 8009d0c:	50000600 	.word	0x50000600
 8009d10:	20000c34 	.word	0x20000c34
 8009d14:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a32      	ldr	r2, [pc, #200]	; (8009de8 <HAL_ADC_ConfigChannel+0x748>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d125      	bne.n	8009d6e <HAL_ADC_ConfigChannel+0x6ce>
 8009d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d11f      	bne.n	8009d6e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a2e      	ldr	r2, [pc, #184]	; (8009dec <HAL_ADC_ConfigChannel+0x74c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d104      	bne.n	8009d42 <HAL_ADC_ConfigChannel+0x6a2>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a2c      	ldr	r2, [pc, #176]	; (8009df0 <HAL_ADC_ConfigChannel+0x750>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d047      	beq.n	8009dd2 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d4a:	d004      	beq.n	8009d56 <HAL_ADC_ConfigChannel+0x6b6>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a26      	ldr	r2, [pc, #152]	; (8009dec <HAL_ADC_ConfigChannel+0x74c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d101      	bne.n	8009d5a <HAL_ADC_ConfigChannel+0x6ba>
 8009d56:	4a27      	ldr	r2, [pc, #156]	; (8009df4 <HAL_ADC_ConfigChannel+0x754>)
 8009d58:	e000      	b.n	8009d5c <HAL_ADC_ConfigChannel+0x6bc>
 8009d5a:	4a27      	ldr	r2, [pc, #156]	; (8009df8 <HAL_ADC_ConfigChannel+0x758>)
 8009d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f7fe ff4f 	bl	8008c0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009d6c:	e031      	b.n	8009dd2 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a22      	ldr	r2, [pc, #136]	; (8009dfc <HAL_ADC_ConfigChannel+0x75c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d12d      	bne.n	8009dd4 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d127      	bne.n	8009dd4 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a18      	ldr	r2, [pc, #96]	; (8009dec <HAL_ADC_ConfigChannel+0x74c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d022      	beq.n	8009dd4 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d96:	d004      	beq.n	8009da2 <HAL_ADC_ConfigChannel+0x702>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a13      	ldr	r2, [pc, #76]	; (8009dec <HAL_ADC_ConfigChannel+0x74c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d101      	bne.n	8009da6 <HAL_ADC_ConfigChannel+0x706>
 8009da2:	4a14      	ldr	r2, [pc, #80]	; (8009df4 <HAL_ADC_ConfigChannel+0x754>)
 8009da4:	e000      	b.n	8009da8 <HAL_ADC_ConfigChannel+0x708>
 8009da6:	4a14      	ldr	r2, [pc, #80]	; (8009df8 <HAL_ADC_ConfigChannel+0x758>)
 8009da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009dac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009db0:	4619      	mov	r1, r3
 8009db2:	4610      	mov	r0, r2
 8009db4:	f7fe ff29 	bl	8008c0a <LL_ADC_SetCommonPathInternalCh>
 8009db8:	e00c      	b.n	8009dd4 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dbe:	f043 0220 	orr.w	r2, r3, #32
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009dcc:	e002      	b.n	8009dd4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009dce:	bf00      	nop
 8009dd0:	e000      	b.n	8009dd4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009dd2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009ddc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3798      	adds	r7, #152	; 0x98
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	c7520000 	.word	0xc7520000
 8009dec:	50000100 	.word	0x50000100
 8009df0:	50000500 	.word	0x50000500
 8009df4:	50000300 	.word	0x50000300
 8009df8:	50000700 	.word	0x50000700
 8009dfc:	cb840000 	.word	0xcb840000

08009e00 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff f904 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 8009e1c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7ff f925 	bl	8009072 <LL_ADC_INJ_IsConversionOngoing>
 8009e28:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d103      	bne.n	8009e38 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 8090 	beq.w	8009f58 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d02a      	beq.n	8009e9c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7f5b      	ldrb	r3, [r3, #29]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d126      	bne.n	8009e9c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	7f1b      	ldrb	r3, [r3, #28]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d122      	bne.n	8009e9c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8009e56:	2301      	movs	r3, #1
 8009e58:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009e5a:	e014      	b.n	8009e86 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	4a41      	ldr	r2, [pc, #260]	; (8009f64 <ADC_ConversionStop+0x164>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d90d      	bls.n	8009e80 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e68:	f043 0210 	orr.w	r2, r3, #16
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e74:	f043 0201 	orr.w	r2, r3, #1
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e06c      	b.n	8009f5a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	3301      	adds	r3, #1
 8009e84:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e90:	2b40      	cmp	r3, #64	; 0x40
 8009e92:	d1e3      	bne.n	8009e5c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2240      	movs	r2, #64	; 0x40
 8009e9a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d014      	beq.n	8009ecc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff f8bc 	bl	8009024 <LL_ADC_REG_IsConversionOngoing>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00c      	beq.n	8009ecc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff f879 	bl	8008fae <LL_ADC_IsDisableOngoing>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d104      	bne.n	8009ecc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff f898 	bl	8008ffc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d014      	beq.n	8009efc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff f8cb 	bl	8009072 <LL_ADC_INJ_IsConversionOngoing>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00c      	beq.n	8009efc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff f861 	bl	8008fae <LL_ADC_IsDisableOngoing>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff f8a7 	bl	800904a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d004      	beq.n	8009f0c <ADC_ConversionStop+0x10c>
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	d105      	bne.n	8009f12 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009f06:	230c      	movs	r3, #12
 8009f08:	617b      	str	r3, [r7, #20]
        break;
 8009f0a:	e005      	b.n	8009f18 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009f0c:	2308      	movs	r3, #8
 8009f0e:	617b      	str	r3, [r7, #20]
        break;
 8009f10:	e002      	b.n	8009f18 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009f12:	2304      	movs	r3, #4
 8009f14:	617b      	str	r3, [r7, #20]
        break;
 8009f16:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8009f18:	f7fe fe36 	bl	8008b88 <HAL_GetTick>
 8009f1c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009f1e:	e014      	b.n	8009f4a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009f20:	f7fe fe32 	bl	8008b88 <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	2b05      	cmp	r3, #5
 8009f2c:	d90d      	bls.n	8009f4a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f32:	f043 0210 	orr.w	r2, r3, #16
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f3e:	f043 0201 	orr.w	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e007      	b.n	8009f5a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	4013      	ands	r3, r2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e3      	bne.n	8009f20 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	a33fffff 	.word	0xa33fffff

08009f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff f807 	bl	8008f88 <LL_ADC_IsEnabled>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d146      	bne.n	800a00e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <ADC_Enable+0xb0>)
 8009f88:	4013      	ands	r3, r2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00d      	beq.n	8009faa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f92:	f043 0210 	orr.w	r2, r3, #16
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f9e:	f043 0201 	orr.w	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e032      	b.n	800a010 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe ffc2 	bl	8008f38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009fb4:	f7fe fde8 	bl	8008b88 <HAL_GetTick>
 8009fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009fba:	e021      	b.n	800a000 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fe ffe1 	bl	8008f88 <LL_ADC_IsEnabled>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d104      	bne.n	8009fd6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe ffb1 	bl	8008f38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009fd6:	f7fe fdd7 	bl	8008b88 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d90d      	bls.n	800a000 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe8:	f043 0210 	orr.w	r2, r3, #16
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ff4:	f043 0201 	orr.w	r2, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e007      	b.n	800a010 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d1d6      	bne.n	8009fbc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	8000003f 	.word	0x8000003f

0800a01c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe ffc0 	bl	8008fae <LL_ADC_IsDisableOngoing>
 800a02e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe ffa7 	bl	8008f88 <LL_ADC_IsEnabled>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d040      	beq.n	800a0c2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d13d      	bne.n	800a0c2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 030d 	and.w	r3, r3, #13
 800a050:	2b01      	cmp	r3, #1
 800a052:	d10c      	bne.n	800a06e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fe ff81 	bl	8008f60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2203      	movs	r2, #3
 800a064:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a066:	f7fe fd8f 	bl	8008b88 <HAL_GetTick>
 800a06a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a06c:	e022      	b.n	800a0b4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a072:	f043 0210 	orr.w	r2, r3, #16
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07e:	f043 0201 	orr.w	r2, r3, #1
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e01c      	b.n	800a0c4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a08a:	f7fe fd7d 	bl	8008b88 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d90d      	bls.n	800a0b4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a09c:	f043 0210 	orr.w	r2, r3, #16
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0a8:	f043 0201 	orr.w	r2, r3, #1
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e007      	b.n	800a0c4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e3      	bne.n	800a08a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d14b      	bne.n	800a17e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0308 	and.w	r3, r3, #8
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d021      	beq.n	800a144 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fe32 	bl	8008d6e <LL_ADC_REG_IsTriggerSourceSWStart>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d032      	beq.n	800a176 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d12b      	bne.n	800a176 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a12e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d11f      	bne.n	800a176 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a13a:	f043 0201 	orr.w	r2, r3, #1
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	65da      	str	r2, [r3, #92]	; 0x5c
 800a142:	e018      	b.n	800a176 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d111      	bne.n	800a176 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d105      	bne.n	800a176 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a16e:	f043 0201 	orr.w	r2, r3, #1
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7fc f948 	bl	800640c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a17c:	e00e      	b.n	800a19c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a182:	f003 0310 	and.w	r3, r3, #16
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff fa7d 	bl	800968a <HAL_ADC_ErrorCallback>
}
 800a190:	e004      	b.n	800a19c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	4798      	blx	r3
}
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7ff fa5f 	bl	8009676 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1b8:	bf00      	nop
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1de:	f043 0204 	orr.w	r2, r3, #4
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff fa4f 	bl	800968a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <LL_ADC_IsEnabled>:
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <LL_ADC_IsEnabled+0x18>
 800a208:	2301      	movs	r3, #1
 800a20a:	e000      	b.n	800a20e <LL_ADC_IsEnabled+0x1a>
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <LL_ADC_REG_IsConversionOngoing>:
{
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f003 0304 	and.w	r3, r3, #4
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d101      	bne.n	800a232 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a240:	b590      	push	{r4, r7, lr}
 800a242:	b0a1      	sub	sp, #132	; 0x84
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a25a:	2302      	movs	r3, #2
 800a25c:	e0e3      	b.n	800a426 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a26e:	d102      	bne.n	800a276 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a270:	4b6f      	ldr	r3, [pc, #444]	; (800a430 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a272:	60bb      	str	r3, [r7, #8]
 800a274:	e009      	b.n	800a28a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a6e      	ldr	r2, [pc, #440]	; (800a434 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d102      	bne.n	800a286 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a280:	4b6d      	ldr	r3, [pc, #436]	; (800a438 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a282:	60bb      	str	r3, [r7, #8]
 800a284:	e001      	b.n	800a28a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a286:	2300      	movs	r3, #0
 800a288:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10b      	bne.n	800a2a8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a294:	f043 0220 	orr.w	r2, r3, #32
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e0be      	b.n	800a426 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff ffb5 	bl	800a21a <LL_ADC_REG_IsConversionOngoing>
 800a2b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff ffaf 	bl	800a21a <LL_ADC_REG_IsConversionOngoing>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 80a0 	bne.w	800a404 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a2c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f040 809c 	bne.w	800a404 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2d4:	d004      	beq.n	800a2e0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a55      	ldr	r2, [pc, #340]	; (800a430 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d101      	bne.n	800a2e4 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a2e0:	4b56      	ldr	r3, [pc, #344]	; (800a43c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a2e2:	e000      	b.n	800a2e6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a2e4:	4b56      	ldr	r3, [pc, #344]	; (800a440 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a2e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d04b      	beq.n	800a388 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a2f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	6859      	ldr	r1, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a302:	035b      	lsls	r3, r3, #13
 800a304:	430b      	orrs	r3, r1
 800a306:	431a      	orrs	r2, r3
 800a308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a30a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a314:	d004      	beq.n	800a320 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a45      	ldr	r2, [pc, #276]	; (800a430 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d10f      	bne.n	800a340 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a320:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a324:	f7ff ff66 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a328:	4604      	mov	r4, r0
 800a32a:	4841      	ldr	r0, [pc, #260]	; (800a430 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a32c:	f7ff ff62 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a330:	4603      	mov	r3, r0
 800a332:	4323      	orrs	r3, r4
 800a334:	2b00      	cmp	r3, #0
 800a336:	bf0c      	ite	eq
 800a338:	2301      	moveq	r3, #1
 800a33a:	2300      	movne	r3, #0
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	e012      	b.n	800a366 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a340:	483c      	ldr	r0, [pc, #240]	; (800a434 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a342:	f7ff ff57 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a346:	4604      	mov	r4, r0
 800a348:	483b      	ldr	r0, [pc, #236]	; (800a438 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a34a:	f7ff ff53 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a34e:	4603      	mov	r3, r0
 800a350:	431c      	orrs	r4, r3
 800a352:	483c      	ldr	r0, [pc, #240]	; (800a444 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a354:	f7ff ff4e 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a358:	4603      	mov	r3, r0
 800a35a:	4323      	orrs	r3, r4
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bf0c      	ite	eq
 800a360:	2301      	moveq	r3, #1
 800a362:	2300      	movne	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d056      	beq.n	800a418 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a36a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a372:	f023 030f 	bic.w	r3, r3, #15
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	6811      	ldr	r1, [r2, #0]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	6892      	ldr	r2, [r2, #8]
 800a37e:	430a      	orrs	r2, r1
 800a380:	431a      	orrs	r2, r3
 800a382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a384:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a386:	e047      	b.n	800a418 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a392:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a39c:	d004      	beq.n	800a3a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a23      	ldr	r2, [pc, #140]	; (800a430 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d10f      	bne.n	800a3c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a3a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a3ac:	f7ff ff22 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	481f      	ldr	r0, [pc, #124]	; (800a430 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a3b4:	f7ff ff1e 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	4323      	orrs	r3, r4
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bf0c      	ite	eq
 800a3c0:	2301      	moveq	r3, #1
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	e012      	b.n	800a3ee <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a3c8:	481a      	ldr	r0, [pc, #104]	; (800a434 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a3ca:	f7ff ff13 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4819      	ldr	r0, [pc, #100]	; (800a438 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a3d2:	f7ff ff0f 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	431c      	orrs	r4, r3
 800a3da:	481a      	ldr	r0, [pc, #104]	; (800a444 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a3dc:	f7ff ff0a 	bl	800a1f4 <LL_ADC_IsEnabled>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	4323      	orrs	r3, r4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bf0c      	ite	eq
 800a3e8:	2301      	moveq	r3, #1
 800a3ea:	2300      	movne	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d012      	beq.n	800a418 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a3f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a3fa:	f023 030f 	bic.w	r3, r3, #15
 800a3fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a400:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a402:	e009      	b.n	800a418 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a408:	f043 0220 	orr.w	r2, r3, #32
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a416:	e000      	b.n	800a41a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a418:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a422:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a426:	4618      	mov	r0, r3
 800a428:	3784      	adds	r7, #132	; 0x84
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd90      	pop	{r4, r7, pc}
 800a42e:	bf00      	nop
 800a430:	50000100 	.word	0x50000100
 800a434:	50000400 	.word	0x50000400
 800a438:	50000500 	.word	0x50000500
 800a43c:	50000300 	.word	0x50000300
 800a440:	50000700 	.word	0x50000700
 800a444:	50000600 	.word	0x50000600

0800a448 <LL_EXTI_EnableIT_0_31>:
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a450:	4b05      	ldr	r3, [pc, #20]	; (800a468 <LL_EXTI_EnableIT_0_31+0x20>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	4904      	ldr	r1, [pc, #16]	; (800a468 <LL_EXTI_EnableIT_0_31+0x20>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4313      	orrs	r3, r2
 800a45a:	600b      	str	r3, [r1, #0]
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	40010400 	.word	0x40010400

0800a46c <LL_EXTI_EnableIT_32_63>:
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a474:	4b05      	ldr	r3, [pc, #20]	; (800a48c <LL_EXTI_EnableIT_32_63+0x20>)
 800a476:	6a1a      	ldr	r2, [r3, #32]
 800a478:	4904      	ldr	r1, [pc, #16]	; (800a48c <LL_EXTI_EnableIT_32_63+0x20>)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	620b      	str	r3, [r1, #32]
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	40010400 	.word	0x40010400

0800a490 <LL_EXTI_DisableIT_0_31>:
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a498:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <LL_EXTI_DisableIT_0_31+0x24>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	4904      	ldr	r1, [pc, #16]	; (800a4b4 <LL_EXTI_DisableIT_0_31+0x24>)
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	600b      	str	r3, [r1, #0]
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	40010400 	.word	0x40010400

0800a4b8 <LL_EXTI_DisableIT_32_63>:
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a4c0:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <LL_EXTI_DisableIT_32_63+0x24>)
 800a4c2:	6a1a      	ldr	r2, [r3, #32]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	43db      	mvns	r3, r3
 800a4c8:	4904      	ldr	r1, [pc, #16]	; (800a4dc <LL_EXTI_DisableIT_32_63+0x24>)
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	620b      	str	r3, [r1, #32]
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010400 	.word	0x40010400

0800a4e0 <LL_EXTI_EnableEvent_0_31>:
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	4904      	ldr	r1, [pc, #16]	; (800a500 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	604b      	str	r3, [r1, #4]
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	40010400 	.word	0x40010400

0800a504 <LL_EXTI_EnableEvent_32_63>:
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a50e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a510:	4904      	ldr	r1, [pc, #16]	; (800a524 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4313      	orrs	r3, r2
 800a516:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	40010400 	.word	0x40010400

0800a528 <LL_EXTI_DisableEvent_0_31>:
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a530:	4b06      	ldr	r3, [pc, #24]	; (800a54c <LL_EXTI_DisableEvent_0_31+0x24>)
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	43db      	mvns	r3, r3
 800a538:	4904      	ldr	r1, [pc, #16]	; (800a54c <LL_EXTI_DisableEvent_0_31+0x24>)
 800a53a:	4013      	ands	r3, r2
 800a53c:	604b      	str	r3, [r1, #4]
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	40010400 	.word	0x40010400

0800a550 <LL_EXTI_DisableEvent_32_63>:
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a558:	4b06      	ldr	r3, [pc, #24]	; (800a574 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a55a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	43db      	mvns	r3, r3
 800a560:	4904      	ldr	r1, [pc, #16]	; (800a574 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a562:	4013      	ands	r3, r2
 800a564:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a566:	bf00      	nop
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	40010400 	.word	0x40010400

0800a578 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a580:	4b05      	ldr	r3, [pc, #20]	; (800a598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	4904      	ldr	r1, [pc, #16]	; (800a598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4313      	orrs	r3, r2
 800a58a:	608b      	str	r3, [r1, #8]
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	40010400 	.word	0x40010400

0800a59c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a5a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a8:	4904      	ldr	r1, [pc, #16]	; (800a5bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	40010400 	.word	0x40010400

0800a5c0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a5c8:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a5ca:	689a      	ldr	r2, [r3, #8]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	43db      	mvns	r3, r3
 800a5d0:	4904      	ldr	r1, [pc, #16]	; (800a5e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	608b      	str	r3, [r1, #8]
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	40010400 	.word	0x40010400

0800a5e8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a5f0:	4b06      	ldr	r3, [pc, #24]	; (800a60c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a5f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	43db      	mvns	r3, r3
 800a5f8:	4904      	ldr	r1, [pc, #16]	; (800a60c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	40010400 	.word	0x40010400

0800a610 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a618:	4b05      	ldr	r3, [pc, #20]	; (800a630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a61a:	68da      	ldr	r2, [r3, #12]
 800a61c:	4904      	ldr	r1, [pc, #16]	; (800a630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4313      	orrs	r3, r2
 800a622:	60cb      	str	r3, [r1, #12]
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	40010400 	.word	0x40010400

0800a634 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a640:	4904      	ldr	r1, [pc, #16]	; (800a654 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4313      	orrs	r3, r2
 800a646:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	40010400 	.word	0x40010400

0800a658 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a662:	68da      	ldr	r2, [r3, #12]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	43db      	mvns	r3, r3
 800a668:	4904      	ldr	r1, [pc, #16]	; (800a67c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a66a:	4013      	ands	r3, r2
 800a66c:	60cb      	str	r3, [r1, #12]
}
 800a66e:	bf00      	nop
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40010400 	.word	0x40010400

0800a680 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a688:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	43db      	mvns	r3, r3
 800a690:	4904      	ldr	r1, [pc, #16]	; (800a6a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a692:	4013      	ands	r3, r2
 800a694:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	40010400 	.word	0x40010400

0800a6a8 <LL_EXTI_IsActiveFlag_0_31>:
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a6b0:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a6b2:	695a      	ldr	r2, [r3, #20]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d101      	bne.n	800a6c2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	40010400 	.word	0x40010400

0800a6d4 <LL_EXTI_IsActiveFlag_32_63>:
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a6dc:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a6de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d101      	bne.n	800a6ee <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e000      	b.n	800a6f0 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	40010400 	.word	0x40010400

0800a700 <LL_EXTI_ClearFlag_0_31>:
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a708:	4a04      	ldr	r2, [pc, #16]	; (800a71c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6153      	str	r3, [r2, #20]
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	40010400 	.word	0x40010400

0800a720 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a728:	4a04      	ldr	r2, [pc, #16]	; (800a73c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	40010400 	.word	0x40010400

0800a740 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d102      	bne.n	800a75c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	77fb      	strb	r3, [r7, #31]
 800a75a:	e180      	b.n	800aa5e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a76a:	d102      	bne.n	800a772 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	77fb      	strb	r3, [r7, #31]
 800a770:	e175      	b.n	800aa5e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	7f5b      	ldrb	r3, [r3, #29]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d108      	bne.n	800a78e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7fc fd91 	bl	80072b0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a798:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	4b98      	ldr	r3, [pc, #608]	; (800aa20 <HAL_COMP_Init+0x2e0>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	6979      	ldr	r1, [r7, #20]
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d015      	beq.n	800a806 <HAL_COMP_Init+0xc6>
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d112      	bne.n	800a806 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a7e0:	4b90      	ldr	r3, [pc, #576]	; (800aa24 <HAL_COMP_Init+0x2e4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	099b      	lsrs	r3, r3, #6
 800a7e6:	4a90      	ldr	r2, [pc, #576]	; (800aa28 <HAL_COMP_Init+0x2e8>)
 800a7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ec:	099a      	lsrs	r2, r3, #6
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a7f8:	e002      	b.n	800a800 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f9      	bne.n	800a7fa <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a88      	ldr	r2, [pc, #544]	; (800aa2c <HAL_COMP_Init+0x2ec>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d028      	beq.n	800a862 <HAL_COMP_Init+0x122>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a86      	ldr	r2, [pc, #536]	; (800aa30 <HAL_COMP_Init+0x2f0>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d020      	beq.n	800a85c <HAL_COMP_Init+0x11c>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a85      	ldr	r2, [pc, #532]	; (800aa34 <HAL_COMP_Init+0x2f4>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d018      	beq.n	800a856 <HAL_COMP_Init+0x116>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a83      	ldr	r2, [pc, #524]	; (800aa38 <HAL_COMP_Init+0x2f8>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d010      	beq.n	800a850 <HAL_COMP_Init+0x110>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a82      	ldr	r2, [pc, #520]	; (800aa3c <HAL_COMP_Init+0x2fc>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d008      	beq.n	800a84a <HAL_COMP_Init+0x10a>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a80      	ldr	r2, [pc, #512]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d101      	bne.n	800a846 <HAL_COMP_Init+0x106>
 800a842:	2301      	movs	r3, #1
 800a844:	e00f      	b.n	800a866 <HAL_COMP_Init+0x126>
 800a846:	2302      	movs	r3, #2
 800a848:	e00d      	b.n	800a866 <HAL_COMP_Init+0x126>
 800a84a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a84e:	e00a      	b.n	800a866 <HAL_COMP_Init+0x126>
 800a850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a854:	e007      	b.n	800a866 <HAL_COMP_Init+0x126>
 800a856:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a85a:	e004      	b.n	800a866 <HAL_COMP_Init+0x126>
 800a85c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a860:	e001      	b.n	800a866 <HAL_COMP_Init+0x126>
 800a862:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a866:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80b6 	beq.w	800a9e2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	f003 0310 	and.w	r3, r3, #16
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d011      	beq.n	800a8a6 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a6e      	ldr	r2, [pc, #440]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d004      	beq.n	800a896 <HAL_COMP_Init+0x156>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a6c      	ldr	r2, [pc, #432]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d103      	bne.n	800a89e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800a896:	6938      	ldr	r0, [r7, #16]
 800a898:	f7ff fe80 	bl	800a59c <LL_EXTI_EnableRisingTrig_32_63>
 800a89c:	e014      	b.n	800a8c8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800a89e:	6938      	ldr	r0, [r7, #16]
 800a8a0:	f7ff fe6a 	bl	800a578 <LL_EXTI_EnableRisingTrig_0_31>
 800a8a4:	e010      	b.n	800a8c8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a65      	ldr	r2, [pc, #404]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d004      	beq.n	800a8ba <HAL_COMP_Init+0x17a>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a63      	ldr	r2, [pc, #396]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d103      	bne.n	800a8c2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800a8ba:	6938      	ldr	r0, [r7, #16]
 800a8bc:	f7ff fe94 	bl	800a5e8 <LL_EXTI_DisableRisingTrig_32_63>
 800a8c0:	e002      	b.n	800a8c8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800a8c2:	6938      	ldr	r0, [r7, #16]
 800a8c4:	f7ff fe7c 	bl	800a5c0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	f003 0320 	and.w	r3, r3, #32
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d011      	beq.n	800a8f8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a59      	ldr	r2, [pc, #356]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d004      	beq.n	800a8e8 <HAL_COMP_Init+0x1a8>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a58      	ldr	r2, [pc, #352]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d103      	bne.n	800a8f0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800a8e8:	6938      	ldr	r0, [r7, #16]
 800a8ea:	f7ff fea3 	bl	800a634 <LL_EXTI_EnableFallingTrig_32_63>
 800a8ee:	e014      	b.n	800a91a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800a8f0:	6938      	ldr	r0, [r7, #16]
 800a8f2:	f7ff fe8d 	bl	800a610 <LL_EXTI_EnableFallingTrig_0_31>
 800a8f6:	e010      	b.n	800a91a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a50      	ldr	r2, [pc, #320]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d004      	beq.n	800a90c <HAL_COMP_Init+0x1cc>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a4f      	ldr	r2, [pc, #316]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d103      	bne.n	800a914 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800a90c:	6938      	ldr	r0, [r7, #16]
 800a90e:	f7ff feb7 	bl	800a680 <LL_EXTI_DisableFallingTrig_32_63>
 800a912:	e002      	b.n	800a91a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800a914:	6938      	ldr	r0, [r7, #16]
 800a916:	f7ff fe9f 	bl	800a658 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a48      	ldr	r2, [pc, #288]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d004      	beq.n	800a92e <HAL_COMP_Init+0x1ee>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a46      	ldr	r2, [pc, #280]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d103      	bne.n	800a936 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a92e:	6938      	ldr	r0, [r7, #16]
 800a930:	f7ff fef6 	bl	800a720 <LL_EXTI_ClearFlag_32_63>
 800a934:	e002      	b.n	800a93c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a936:	6938      	ldr	r0, [r7, #16]
 800a938:	f7ff fee2 	bl	800a700 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d011      	beq.n	800a96c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a3c      	ldr	r2, [pc, #240]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d004      	beq.n	800a95c <HAL_COMP_Init+0x21c>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a3b      	ldr	r2, [pc, #236]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d103      	bne.n	800a964 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800a95c:	6938      	ldr	r0, [r7, #16]
 800a95e:	f7ff fdd1 	bl	800a504 <LL_EXTI_EnableEvent_32_63>
 800a962:	e014      	b.n	800a98e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800a964:	6938      	ldr	r0, [r7, #16]
 800a966:	f7ff fdbb 	bl	800a4e0 <LL_EXTI_EnableEvent_0_31>
 800a96a:	e010      	b.n	800a98e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a33      	ldr	r2, [pc, #204]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d004      	beq.n	800a980 <HAL_COMP_Init+0x240>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a32      	ldr	r2, [pc, #200]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d103      	bne.n	800a988 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800a980:	6938      	ldr	r0, [r7, #16]
 800a982:	f7ff fde5 	bl	800a550 <LL_EXTI_DisableEvent_32_63>
 800a986:	e002      	b.n	800a98e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800a988:	6938      	ldr	r0, [r7, #16]
 800a98a:	f7ff fdcd 	bl	800a528 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d011      	beq.n	800a9be <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a28      	ldr	r2, [pc, #160]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d004      	beq.n	800a9ae <HAL_COMP_Init+0x26e>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a26      	ldr	r2, [pc, #152]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d103      	bne.n	800a9b6 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800a9ae:	6938      	ldr	r0, [r7, #16]
 800a9b0:	f7ff fd5c 	bl	800a46c <LL_EXTI_EnableIT_32_63>
 800a9b4:	e04b      	b.n	800aa4e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800a9b6:	6938      	ldr	r0, [r7, #16]
 800a9b8:	f7ff fd46 	bl	800a448 <LL_EXTI_EnableIT_0_31>
 800a9bc:	e047      	b.n	800aa4e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d004      	beq.n	800a9d2 <HAL_COMP_Init+0x292>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1d      	ldr	r2, [pc, #116]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d103      	bne.n	800a9da <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800a9d2:	6938      	ldr	r0, [r7, #16]
 800a9d4:	f7ff fd70 	bl	800a4b8 <LL_EXTI_DisableIT_32_63>
 800a9d8:	e039      	b.n	800aa4e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800a9da:	6938      	ldr	r0, [r7, #16]
 800a9dc:	f7ff fd58 	bl	800a490 <LL_EXTI_DisableIT_0_31>
 800a9e0:	e035      	b.n	800aa4e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a16      	ldr	r2, [pc, #88]	; (800aa40 <HAL_COMP_Init+0x300>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d004      	beq.n	800a9f6 <HAL_COMP_Init+0x2b6>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a14      	ldr	r2, [pc, #80]	; (800aa44 <HAL_COMP_Init+0x304>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d103      	bne.n	800a9fe <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800a9f6:	6938      	ldr	r0, [r7, #16]
 800a9f8:	f7ff fdaa 	bl	800a550 <LL_EXTI_DisableEvent_32_63>
 800a9fc:	e002      	b.n	800aa04 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800a9fe:	6938      	ldr	r0, [r7, #16]
 800aa00:	f7ff fd92 	bl	800a528 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a0d      	ldr	r2, [pc, #52]	; (800aa40 <HAL_COMP_Init+0x300>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d004      	beq.n	800aa18 <HAL_COMP_Init+0x2d8>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a0c      	ldr	r2, [pc, #48]	; (800aa44 <HAL_COMP_Init+0x304>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d117      	bne.n	800aa48 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800aa18:	6938      	ldr	r0, [r7, #16]
 800aa1a:	f7ff fd4d 	bl	800a4b8 <LL_EXTI_DisableIT_32_63>
 800aa1e:	e016      	b.n	800aa4e <HAL_COMP_Init+0x30e>
 800aa20:	ff007e0f 	.word	0xff007e0f
 800aa24:	20000c34 	.word	0x20000c34
 800aa28:	053e2d63 	.word	0x053e2d63
 800aa2c:	40010200 	.word	0x40010200
 800aa30:	40010204 	.word	0x40010204
 800aa34:	40010208 	.word	0x40010208
 800aa38:	4001020c 	.word	0x4001020c
 800aa3c:	40010210 	.word	0x40010210
 800aa40:	40010214 	.word	0x40010214
 800aa44:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800aa48:	6938      	ldr	r0, [r7, #16]
 800aa4a:	f7ff fd21 	bl	800a490 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	7f5b      	ldrb	r3, [r3, #29]
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800aa5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3720      	adds	r7, #32
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d102      	bne.n	800aa80 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	73fb      	strb	r3, [r7, #15]
 800aa7e:	e01d      	b.n	800aabc <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa8e:	d102      	bne.n	800aa96 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	73fb      	strb	r3, [r7, #15]
 800aa94:	e012      	b.n	800aabc <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	7f5b      	ldrb	r3, [r3, #29]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0201 	bic.w	r2, r2, #1
 800aaae:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	775a      	strb	r2, [r3, #29]
 800aab6:	e001      	b.n	800aabc <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
	...

0800aacc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a2f      	ldr	r2, [pc, #188]	; (800ab98 <HAL_COMP_IRQHandler+0xcc>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d028      	beq.n	800ab30 <HAL_COMP_IRQHandler+0x64>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a2e      	ldr	r2, [pc, #184]	; (800ab9c <HAL_COMP_IRQHandler+0xd0>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d020      	beq.n	800ab2a <HAL_COMP_IRQHandler+0x5e>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a2c      	ldr	r2, [pc, #176]	; (800aba0 <HAL_COMP_IRQHandler+0xd4>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d018      	beq.n	800ab24 <HAL_COMP_IRQHandler+0x58>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a2b      	ldr	r2, [pc, #172]	; (800aba4 <HAL_COMP_IRQHandler+0xd8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d010      	beq.n	800ab1e <HAL_COMP_IRQHandler+0x52>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a29      	ldr	r2, [pc, #164]	; (800aba8 <HAL_COMP_IRQHandler+0xdc>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d008      	beq.n	800ab18 <HAL_COMP_IRQHandler+0x4c>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a28      	ldr	r2, [pc, #160]	; (800abac <HAL_COMP_IRQHandler+0xe0>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d101      	bne.n	800ab14 <HAL_COMP_IRQHandler+0x48>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e00f      	b.n	800ab34 <HAL_COMP_IRQHandler+0x68>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e00d      	b.n	800ab34 <HAL_COMP_IRQHandler+0x68>
 800ab18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab1c:	e00a      	b.n	800ab34 <HAL_COMP_IRQHandler+0x68>
 800ab1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab22:	e007      	b.n	800ab34 <HAL_COMP_IRQHandler+0x68>
 800ab24:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ab28:	e004      	b.n	800ab34 <HAL_COMP_IRQHandler+0x68>
 800ab2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab2e:	e001      	b.n	800ab34 <HAL_COMP_IRQHandler+0x68>
 800ab30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ab34:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1b      	ldr	r2, [pc, #108]	; (800abac <HAL_COMP_IRQHandler+0xe0>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d004      	beq.n	800ab4e <HAL_COMP_IRQHandler+0x82>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a19      	ldr	r2, [pc, #100]	; (800abb0 <HAL_COMP_IRQHandler+0xe4>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d108      	bne.n	800ab60 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800ab4e:	68b8      	ldr	r0, [r7, #8]
 800ab50:	f7ff fdc0 	bl	800a6d4 <LL_EXTI_IsActiveFlag_32_63>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00a      	beq.n	800ab70 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800ab5e:	e007      	b.n	800ab70 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800ab60:	68b8      	ldr	r0, [r7, #8]
 800ab62:	f7ff fda1 	bl	800a6a8 <LL_EXTI_IsActiveFlag_0_31>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00c      	beq.n	800ab90 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d103      	bne.n	800ab84 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ab7c:	68b8      	ldr	r0, [r7, #8]
 800ab7e:	f7ff fdcf 	bl	800a720 <LL_EXTI_ClearFlag_32_63>
 800ab82:	e002      	b.n	800ab8a <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ab84:	68b8      	ldr	r0, [r7, #8]
 800ab86:	f7ff fdbb 	bl	800a700 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7fb fc24 	bl	80063d8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	40010200 	.word	0x40010200
 800ab9c:	40010204 	.word	0x40010204
 800aba0:	40010208 	.word	0x40010208
 800aba4:	4001020c 	.word	0x4001020c
 800aba8:	40010210 	.word	0x40010210
 800abac:	40010214 	.word	0x40010214
 800abb0:	40010218 	.word	0x40010218

0800abb4 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	0f9b      	lsrs	r3, r3, #30
 800abc4:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800abc8:	4618      	mov	r0, r3
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <__NVIC_SetPriorityGrouping>:
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f003 0307 	and.w	r3, r3, #7
 800abe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800abe4:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <__NVIC_SetPriorityGrouping+0x44>)
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800abf0:	4013      	ands	r3, r2
 800abf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800abfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ac00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ac06:	4a04      	ldr	r2, [pc, #16]	; (800ac18 <__NVIC_SetPriorityGrouping+0x44>)
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	60d3      	str	r3, [r2, #12]
}
 800ac0c:	bf00      	nop
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	e000ed00 	.word	0xe000ed00

0800ac1c <__NVIC_GetPriorityGrouping>:
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ac20:	4b04      	ldr	r3, [pc, #16]	; (800ac34 <__NVIC_GetPriorityGrouping+0x18>)
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	0a1b      	lsrs	r3, r3, #8
 800ac26:	f003 0307 	and.w	r3, r3, #7
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	e000ed00 	.word	0xe000ed00

0800ac38 <__NVIC_EnableIRQ>:
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	4603      	mov	r3, r0
 800ac40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	db0b      	blt.n	800ac62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	f003 021f 	and.w	r2, r3, #31
 800ac50:	4907      	ldr	r1, [pc, #28]	; (800ac70 <__NVIC_EnableIRQ+0x38>)
 800ac52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	2001      	movs	r0, #1
 800ac5a:	fa00 f202 	lsl.w	r2, r0, r2
 800ac5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ac62:	bf00      	nop
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	e000e100 	.word	0xe000e100

0800ac74 <__NVIC_DisableIRQ>:
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	db10      	blt.n	800aca8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	f003 021f 	and.w	r2, r3, #31
 800ac8c:	4909      	ldr	r1, [pc, #36]	; (800acb4 <__NVIC_DisableIRQ+0x40>)
 800ac8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac92:	095b      	lsrs	r3, r3, #5
 800ac94:	2001      	movs	r0, #1
 800ac96:	fa00 f202 	lsl.w	r2, r0, r2
 800ac9a:	3320      	adds	r3, #32
 800ac9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aca0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aca4:	f3bf 8f6f 	isb	sy
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	e000e100 	.word	0xe000e100

0800acb8 <__NVIC_SetPriority>:
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	db0a      	blt.n	800ace2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	490c      	ldr	r1, [pc, #48]	; (800ad04 <__NVIC_SetPriority+0x4c>)
 800acd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acd6:	0112      	lsls	r2, r2, #4
 800acd8:	b2d2      	uxtb	r2, r2
 800acda:	440b      	add	r3, r1
 800acdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ace0:	e00a      	b.n	800acf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	4908      	ldr	r1, [pc, #32]	; (800ad08 <__NVIC_SetPriority+0x50>)
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	f003 030f 	and.w	r3, r3, #15
 800acee:	3b04      	subs	r3, #4
 800acf0:	0112      	lsls	r2, r2, #4
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	440b      	add	r3, r1
 800acf6:	761a      	strb	r2, [r3, #24]
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	e000e100 	.word	0xe000e100
 800ad08:	e000ed00 	.word	0xe000ed00

0800ad0c <NVIC_EncodePriority>:
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b089      	sub	sp, #36	; 0x24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	f1c3 0307 	rsb	r3, r3, #7
 800ad26:	2b04      	cmp	r3, #4
 800ad28:	bf28      	it	cs
 800ad2a:	2304      	movcs	r3, #4
 800ad2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	3304      	adds	r3, #4
 800ad32:	2b06      	cmp	r3, #6
 800ad34:	d902      	bls.n	800ad3c <NVIC_EncodePriority+0x30>
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	3b03      	subs	r3, #3
 800ad3a:	e000      	b.n	800ad3e <NVIC_EncodePriority+0x32>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4a:	43da      	mvns	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	401a      	ands	r2, r3
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ad54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad5e:	43d9      	mvns	r1, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad64:	4313      	orrs	r3, r2
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3724      	adds	r7, #36	; 0x24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
	...

0800ad74 <SysTick_Config>:
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad84:	d301      	bcc.n	800ad8a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800ad86:	2301      	movs	r3, #1
 800ad88:	e00f      	b.n	800adaa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad8a:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <SysTick_Config+0x40>)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad92:	210f      	movs	r1, #15
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad98:	f7ff ff8e 	bl	800acb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad9c:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <SysTick_Config+0x40>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ada2:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <SysTick_Config+0x40>)
 800ada4:	2207      	movs	r2, #7
 800ada6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	e000e010 	.word	0xe000e010

0800adb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff ff07 	bl	800abd4 <__NVIC_SetPriorityGrouping>
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b086      	sub	sp, #24
 800add2:	af00      	add	r7, sp, #0
 800add4:	4603      	mov	r3, r0
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800addc:	f7ff ff1e 	bl	800ac1c <__NVIC_GetPriorityGrouping>
 800ade0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	68b9      	ldr	r1, [r7, #8]
 800ade6:	6978      	ldr	r0, [r7, #20]
 800ade8:	f7ff ff90 	bl	800ad0c <NVIC_EncodePriority>
 800adec:	4602      	mov	r2, r0
 800adee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adf2:	4611      	mov	r1, r2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff ff5f 	bl	800acb8 <__NVIC_SetPriority>
}
 800adfa:	bf00      	nop
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	4603      	mov	r3, r0
 800ae0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff ff11 	bl	800ac38 <__NVIC_EnableIRQ>
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	4603      	mov	r3, r0
 800ae26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ae28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff ff21 	bl	800ac74 <__NVIC_DisableIRQ>
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b082      	sub	sp, #8
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff ff96 	bl	800ad74 <SysTick_Config>
 800ae48:	4603      	mov	r3, r0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e014      	b.n	800ae8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	791b      	ldrb	r3, [r3, #4]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d105      	bne.n	800ae7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7fc fad9 	bl	800742c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	795b      	ldrb	r3, [r3, #5]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_DAC_Start+0x16>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e043      	b.n	800af34 <HAL_DAC_Start+0x9e>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6819      	ldr	r1, [r3, #0]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	f003 0310 	and.w	r3, r3, #16
 800aec4:	2201      	movs	r2, #1
 800aec6:	409a      	lsls	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	430a      	orrs	r2, r1
 800aece:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800aed0:	2001      	movs	r0, #1
 800aed2:	f7fd fe65 	bl	8008ba0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10f      	bne.n	800aefc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d11d      	bne.n	800af26 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f042 0201 	orr.w	r2, r2, #1
 800aef8:	605a      	str	r2, [r3, #4]
 800aefa:	e014      	b.n	800af26 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2102      	movs	r1, #2
 800af0e:	fa01 f303 	lsl.w	r3, r1, r3
 800af12:	429a      	cmp	r2, r3
 800af14:	d107      	bne.n	800af26 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f042 0202 	orr.w	r2, r2, #2
 800af24:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	795b      	ldrb	r3, [r3, #5]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d101      	bne.n	800af5a <HAL_DAC_Start_DMA+0x1e>
 800af56:	2302      	movs	r3, #2
 800af58:	e0a1      	b.n	800b09e <HAL_DAC_Start_DMA+0x162>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2202      	movs	r2, #2
 800af64:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d12a      	bne.n	800afc2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	4a4d      	ldr	r2, [pc, #308]	; (800b0a8 <HAL_DAC_Start_DMA+0x16c>)
 800af72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	4a4c      	ldr	r2, [pc, #304]	; (800b0ac <HAL_DAC_Start_DMA+0x170>)
 800af7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	4a4b      	ldr	r2, [pc, #300]	; (800b0b0 <HAL_DAC_Start_DMA+0x174>)
 800af82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af92:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	2b04      	cmp	r3, #4
 800af98:	d009      	beq.n	800afae <HAL_DAC_Start_DMA+0x72>
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d00c      	beq.n	800afb8 <HAL_DAC_Start_DMA+0x7c>
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d000      	beq.n	800afa4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800afa2:	e039      	b.n	800b018 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3308      	adds	r3, #8
 800afaa:	613b      	str	r3, [r7, #16]
        break;
 800afac:	e034      	b.n	800b018 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	330c      	adds	r3, #12
 800afb4:	613b      	str	r3, [r7, #16]
        break;
 800afb6:	e02f      	b.n	800b018 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3310      	adds	r3, #16
 800afbe:	613b      	str	r3, [r7, #16]
        break;
 800afc0:	e02a      	b.n	800b018 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	4a3b      	ldr	r2, [pc, #236]	; (800b0b4 <HAL_DAC_Start_DMA+0x178>)
 800afc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	4a3a      	ldr	r2, [pc, #232]	; (800b0b8 <HAL_DAC_Start_DMA+0x17c>)
 800afd0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	4a39      	ldr	r2, [pc, #228]	; (800b0bc <HAL_DAC_Start_DMA+0x180>)
 800afd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800afe8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	2b04      	cmp	r3, #4
 800afee:	d009      	beq.n	800b004 <HAL_DAC_Start_DMA+0xc8>
 800aff0:	2b08      	cmp	r3, #8
 800aff2:	d00c      	beq.n	800b00e <HAL_DAC_Start_DMA+0xd2>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d000      	beq.n	800affa <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800aff8:	e00e      	b.n	800b018 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3314      	adds	r3, #20
 800b000:	613b      	str	r3, [r7, #16]
        break;
 800b002:	e009      	b.n	800b018 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3318      	adds	r3, #24
 800b00a:	613b      	str	r3, [r7, #16]
        break;
 800b00c:	e004      	b.n	800b018 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	331c      	adds	r3, #28
 800b014:	613b      	str	r3, [r7, #16]
        break;
 800b016:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d111      	bne.n	800b042 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b02c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6898      	ldr	r0, [r3, #8]
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	f000 fbd2 	bl	800b7e0 <HAL_DMA_Start_IT>
 800b03c:	4603      	mov	r3, r0
 800b03e:	75fb      	strb	r3, [r7, #23]
 800b040:	e010      	b.n	800b064 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b050:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68d8      	ldr	r0, [r3, #12]
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	f000 fbc0 	bl	800b7e0 <HAL_DMA_Start_IT>
 800b060:	4603      	mov	r3, r0
 800b062:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10f      	bne.n	800b090 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f003 0310 	and.w	r3, r3, #16
 800b07c:	2201      	movs	r2, #1
 800b07e:	409a      	lsls	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	430a      	orrs	r2, r1
 800b086:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b088:	2001      	movs	r0, #1
 800b08a:	f7fd fd89 	bl	8008ba0 <HAL_Delay>
 800b08e:	e005      	b.n	800b09c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	f043 0204 	orr.w	r2, r3, #4
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800b57d 	.word	0x0800b57d
 800b0ac:	0800b59f 	.word	0x0800b59f
 800b0b0:	0800b5bb 	.word	0x0800b5bb
 800b0b4:	0800b625 	.word	0x0800b625
 800b0b8:	0800b647 	.word	0x0800b647
 800b0bc:	0800b663 	.word	0x0800b663

0800b0c0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	f003 0310 	and.w	r3, r3, #16
 800b0d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	43da      	mvns	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	400a      	ands	r2, r1
 800b0e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6819      	ldr	r1, [r3, #0]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	43da      	mvns	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	400a      	ands	r2, r1
 800b102:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b104:	2001      	movs	r0, #1
 800b106:	f7fd fd4b 	bl	8008ba0 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10f      	bne.n	800b130 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fbde 	bl	800b8d6 <HAL_DMA_Abort>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e00e      	b.n	800b14e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	4618      	mov	r0, r3
 800b136:	f000 fbce 	bl	800b8d6 <HAL_DMA_Abort>
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b14c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2204      	movs	r2, #4
 800b158:	711a      	strb	r2, [r3, #4]
 800b15a:	e002      	b.n	800b162 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b162:	7bfb      	ldrb	r3, [r7, #15]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d105      	bne.n	800b19c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4413      	add	r3, r2
 800b196:	3308      	adds	r3, #8
 800b198:	617b      	str	r3, [r7, #20]
 800b19a:	e004      	b.n	800b1a6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	3314      	adds	r3, #20
 800b1a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	371c      	adds	r7, #28
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d103      	bne.n	800b210 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	e002      	b.n	800b216 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b216:	4618      	mov	r0, r3
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
	...

0800b224 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	; 0x28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b230:	2300      	movs	r3, #0
 800b232:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	795b      	ldrb	r3, [r3, #5]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_DAC_ConfigChannel+0x1c>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e194      	b.n	800b56a <HAL_DAC_ConfigChannel+0x346>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2201      	movs	r2, #1
 800b244:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2202      	movs	r2, #2
 800b24a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	2b04      	cmp	r3, #4
 800b252:	d174      	bne.n	800b33e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d137      	bne.n	800b2ca <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b25a:	f7fd fc95 	bl	8008b88 <HAL_GetTick>
 800b25e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b260:	e011      	b.n	800b286 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b262:	f7fd fc91 	bl	8008b88 <HAL_GetTick>
 800b266:	4602      	mov	r2, r0
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d90a      	bls.n	800b286 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	f043 0208 	orr.w	r2, r3, #8
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2203      	movs	r2, #3
 800b280:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e171      	b.n	800b56a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e6      	bne.n	800b262 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b294:	2001      	movs	r0, #1
 800b296:	f7fd fc83 	bl	8008ba0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2a2:	641a      	str	r2, [r3, #64]	; 0x40
 800b2a4:	e01e      	b.n	800b2e4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b2a6:	f7fd fc6f 	bl	8008b88 <HAL_GetTick>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d90a      	bls.n	800b2ca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	f043 0208 	orr.w	r2, r3, #8
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e14f      	b.n	800b56a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dbe8      	blt.n	800b2a6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	f7fd fc63 	bl	8008ba0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f003 0310 	and.w	r3, r3, #16
 800b2f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b2f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f8:	43db      	mvns	r3, r3
 800b2fa:	ea02 0103 	and.w	r1, r2, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	409a      	lsls	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f003 0310 	and.w	r3, r3, #16
 800b31e:	21ff      	movs	r1, #255	; 0xff
 800b320:	fa01 f303 	lsl.w	r3, r1, r3
 800b324:	43db      	mvns	r3, r3
 800b326:	ea02 0103 	and.w	r1, r2, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f003 0310 	and.w	r3, r3, #16
 800b334:	409a      	lsls	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d11d      	bne.n	800b382 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f003 0310 	and.w	r3, r3, #16
 800b354:	221f      	movs	r2, #31
 800b356:	fa02 f303 	lsl.w	r3, r2, r3
 800b35a:	43db      	mvns	r3, r3
 800b35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35e:	4013      	ands	r3, r2
 800b360:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f003 0310 	and.w	r3, r3, #16
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	fa02 f303 	lsl.w	r3, r2, r3
 800b374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b376:	4313      	orrs	r3, r2
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b380:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b388:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f003 0310 	and.w	r3, r3, #16
 800b390:	2207      	movs	r2, #7
 800b392:	fa02 f303 	lsl.w	r3, r2, r3
 800b396:	43db      	mvns	r3, r3
 800b398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b39a:	4013      	ands	r3, r2
 800b39c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	623b      	str	r3, [r7, #32]
 800b3ae:	e011      	b.n	800b3d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	623b      	str	r3, [r7, #32]
 800b3c0:	e008      	b.n	800b3d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	695b      	ldr	r3, [r3, #20]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	623b      	str	r3, [r7, #32]
 800b3ce:	e001      	b.n	800b3d4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	6a3a      	ldr	r2, [r7, #32]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f003 0310 	and.w	r3, r3, #16
 800b3ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f2:	43db      	mvns	r3, r3
 800b3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	791b      	ldrb	r3, [r3, #4]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d102      	bne.n	800b408 <HAL_DAC_ConfigChannel+0x1e4>
 800b402:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b406:	e000      	b.n	800b40a <HAL_DAC_ConfigChannel+0x1e6>
 800b408:	2300      	movs	r3, #0
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f003 0310 	and.w	r3, r3, #16
 800b416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b41a:	fa02 f303 	lsl.w	r3, r2, r3
 800b41e:	43db      	mvns	r3, r3
 800b420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b422:	4013      	ands	r3, r2
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	795b      	ldrb	r3, [r3, #5]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d102      	bne.n	800b434 <HAL_DAC_ConfigChannel+0x210>
 800b42e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b432:	e000      	b.n	800b436 <HAL_DAC_ConfigChannel+0x212>
 800b434:	2300      	movs	r3, #0
 800b436:	69ba      	ldr	r2, [r7, #24]
 800b438:	4313      	orrs	r3, r2
 800b43a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d114      	bne.n	800b476 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b44c:	f001 fbc2 	bl	800cbd4 <HAL_RCC_GetHCLKFreq>
 800b450:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	4a47      	ldr	r2, [pc, #284]	; (800b574 <HAL_DAC_ConfigChannel+0x350>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d904      	bls.n	800b464 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b460:	627b      	str	r3, [r7, #36]	; 0x24
 800b462:	e00d      	b.n	800b480 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	4a44      	ldr	r2, [pc, #272]	; (800b578 <HAL_DAC_ConfigChannel+0x354>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d909      	bls.n	800b480 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
 800b474:	e004      	b.n	800b480 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b47c:	4313      	orrs	r3, r2
 800b47e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f003 0310 	and.w	r3, r3, #16
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	fa02 f303 	lsl.w	r3, r2, r3
 800b48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b48e:	4313      	orrs	r3, r2
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6819      	ldr	r1, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f003 0310 	and.w	r3, r3, #16
 800b4a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ae:	43da      	mvns	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	400a      	ands	r2, r1
 800b4b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f003 0310 	and.w	r3, r3, #16
 800b4c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ce:	43db      	mvns	r3, r3
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f003 0310 	and.w	r3, r3, #16
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6819      	ldr	r1, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f003 0310 	and.w	r3, r3, #16
 800b502:	22c0      	movs	r2, #192	; 0xc0
 800b504:	fa02 f303 	lsl.w	r3, r2, r3
 800b508:	43da      	mvns	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	400a      	ands	r2, r1
 800b510:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	089b      	lsrs	r3, r3, #2
 800b518:	f003 030f 	and.w	r3, r3, #15
 800b51c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	089b      	lsrs	r3, r3, #2
 800b524:	021b      	lsls	r3, r3, #8
 800b526:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f003 0310 	and.w	r3, r3, #16
 800b53c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b540:	fa01 f303 	lsl.w	r3, r1, r3
 800b544:	43db      	mvns	r3, r3
 800b546:	ea02 0103 	and.w	r1, r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	409a      	lsls	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2201      	movs	r2, #1
 800b560:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3728      	adds	r7, #40	; 0x28
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	09896800 	.word	0x09896800
 800b578:	04c4b400 	.word	0x04c4b400

0800b57c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b588:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff fe16 	bl	800b1bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2201      	movs	r2, #1
 800b594:	711a      	strb	r2, [r3, #4]
}
 800b596:	bf00      	nop
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff fe0f 	bl	800b1d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b084      	sub	sp, #16
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	f043 0204 	orr.w	r2, r3, #4
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff fe05 	bl	800b1e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	711a      	strb	r2, [r3, #4]
}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b630:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff ffd8 	bl	800b5e8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2201      	movs	r2, #1
 800b63c:	711a      	strb	r2, [r3, #4]
}
 800b63e:	bf00      	nop
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b652:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff ffd1 	bl	800b5fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b65a:	bf00      	nop
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	f043 0204 	orr.w	r2, r3, #4
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff ffc7 	bl	800b610 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	711a      	strb	r2, [r3, #4]
}
 800b688:	bf00      	nop
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e08d      	b.n	800b7be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	4b47      	ldr	r3, [pc, #284]	; (800b7c8 <HAL_DMA_Init+0x138>)
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d80f      	bhi.n	800b6ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4b45      	ldr	r3, [pc, #276]	; (800b7cc <HAL_DMA_Init+0x13c>)
 800b6b6:	4413      	add	r3, r2
 800b6b8:	4a45      	ldr	r2, [pc, #276]	; (800b7d0 <HAL_DMA_Init+0x140>)
 800b6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b6be:	091b      	lsrs	r3, r3, #4
 800b6c0:	009a      	lsls	r2, r3, #2
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a42      	ldr	r2, [pc, #264]	; (800b7d4 <HAL_DMA_Init+0x144>)
 800b6ca:	641a      	str	r2, [r3, #64]	; 0x40
 800b6cc:	e00e      	b.n	800b6ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	4b40      	ldr	r3, [pc, #256]	; (800b7d8 <HAL_DMA_Init+0x148>)
 800b6d6:	4413      	add	r3, r2
 800b6d8:	4a3d      	ldr	r2, [pc, #244]	; (800b7d0 <HAL_DMA_Init+0x140>)
 800b6da:	fba2 2303 	umull	r2, r3, r2, r3
 800b6de:	091b      	lsrs	r3, r3, #4
 800b6e0:	009a      	lsls	r2, r3, #2
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a3c      	ldr	r2, [pc, #240]	; (800b7dc <HAL_DMA_Init+0x14c>)
 800b6ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b71c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	4313      	orrs	r3, r2
 800b734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fa10 	bl	800bb64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b74c:	d102      	bne.n	800b754 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b768:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d010      	beq.n	800b794 <HAL_DMA_Init+0x104>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	2b04      	cmp	r3, #4
 800b778:	d80c      	bhi.n	800b794 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa30 	bl	800bbe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b790:	605a      	str	r2, [r3, #4]
 800b792:	e008      	b.n	800b7a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	40020407 	.word	0x40020407
 800b7cc:	bffdfff8 	.word	0xbffdfff8
 800b7d0:	cccccccd 	.word	0xcccccccd
 800b7d4:	40020000 	.word	0x40020000
 800b7d8:	bffdfbf8 	.word	0xbffdfbf8
 800b7dc:	40020400 	.word	0x40020400

0800b7e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_DMA_Start_IT+0x20>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e066      	b.n	800b8ce <HAL_DMA_Start_IT+0xee>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b01      	cmp	r3, #1
 800b812:	d155      	bne.n	800b8c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f022 0201 	bic.w	r2, r2, #1
 800b830:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	68b9      	ldr	r1, [r7, #8]
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 f954 	bl	800bae6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b842:	2b00      	cmp	r3, #0
 800b844:	d008      	beq.n	800b858 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f042 020e 	orr.w	r2, r2, #14
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e00f      	b.n	800b878 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 0204 	bic.w	r2, r2, #4
 800b866:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 020a 	orr.w	r2, r2, #10
 800b876:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d007      	beq.n	800b896 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b894:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f042 0201 	orr.w	r2, r2, #1
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	e005      	b.n	800b8cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b085      	sub	sp, #20
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d005      	beq.n	800b8fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2204      	movs	r2, #4
 800b8f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	73fb      	strb	r3, [r7, #15]
 800b8f8:	e037      	b.n	800b96a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 020e 	bic.w	r2, r2, #14
 800b908:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b918:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f022 0201 	bic.w	r2, r2, #1
 800b928:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b92e:	f003 021f 	and.w	r2, r3, #31
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	2101      	movs	r1, #1
 800b938:	fa01 f202 	lsl.w	r2, r1, r2
 800b93c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b946:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00c      	beq.n	800b96a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b95e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b968:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a4:	f003 031f 	and.w	r3, r3, #31
 800b9a8:	2204      	movs	r2, #4
 800b9aa:	409a      	lsls	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d026      	beq.n	800ba02 <HAL_DMA_IRQHandler+0x7a>
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f003 0304 	and.w	r3, r3, #4
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d021      	beq.n	800ba02 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0320 	and.w	r3, r3, #32
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d107      	bne.n	800b9dc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0204 	bic.w	r2, r2, #4
 800b9da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e0:	f003 021f 	and.w	r2, r3, #31
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e8:	2104      	movs	r1, #4
 800b9ea:	fa01 f202 	lsl.w	r2, r1, r2
 800b9ee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d071      	beq.n	800badc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ba00:	e06c      	b.n	800badc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba06:	f003 031f 	and.w	r3, r3, #31
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	409a      	lsls	r2, r3
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	4013      	ands	r3, r2
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d02e      	beq.n	800ba74 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d029      	beq.n	800ba74 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f022 020a 	bic.w	r2, r2, #10
 800ba3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4a:	f003 021f 	and.w	r2, r3, #31
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	2102      	movs	r1, #2
 800ba54:	fa01 f202 	lsl.w	r2, r1, r2
 800ba58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d038      	beq.n	800badc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800ba72:	e033      	b.n	800badc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba78:	f003 031f 	and.w	r3, r3, #31
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	409a      	lsls	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4013      	ands	r3, r2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d02a      	beq.n	800bade <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f003 0308 	and.w	r3, r3, #8
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d025      	beq.n	800bade <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f022 020e 	bic.w	r2, r2, #14
 800baa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa6:	f003 021f 	and.w	r2, r3, #31
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	2101      	movs	r1, #1
 800bab0:	fa01 f202 	lsl.w	r2, r1, r2
 800bab4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800badc:	bf00      	nop
 800bade:	bf00      	nop
}
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b085      	sub	sp, #20
 800baea:	af00      	add	r7, sp, #0
 800baec:	60f8      	str	r0, [r7, #12]
 800baee:	60b9      	str	r1, [r7, #8]
 800baf0:	607a      	str	r2, [r7, #4]
 800baf2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bafc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d004      	beq.n	800bb10 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bb0e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb14:	f003 021f 	and.w	r2, r3, #31
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	fa01 f202 	lsl.w	r2, r1, r2
 800bb22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	2b10      	cmp	r3, #16
 800bb32:	d108      	bne.n	800bb46 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bb44:	e007      	b.n	800bb56 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	60da      	str	r2, [r3, #12]
}
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
	...

0800bb64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	461a      	mov	r2, r3
 800bb72:	4b16      	ldr	r3, [pc, #88]	; (800bbcc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d802      	bhi.n	800bb7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800bb78:	4b15      	ldr	r3, [pc, #84]	; (800bbd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	e001      	b.n	800bb82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800bb7e:	4b15      	ldr	r3, [pc, #84]	; (800bbd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bb80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	3b08      	subs	r3, #8
 800bb8e:	4a12      	ldr	r2, [pc, #72]	; (800bbd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bb90:	fba2 2303 	umull	r2, r3, r2, r3
 800bb94:	091b      	lsrs	r3, r3, #4
 800bb96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9c:	089b      	lsrs	r3, r3, #2
 800bb9e:	009a      	lsls	r2, r3, #2
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	4413      	add	r3, r2
 800bba4:	461a      	mov	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a0b      	ldr	r2, [pc, #44]	; (800bbdc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bbae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f003 031f 	and.w	r3, r3, #31
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	409a      	lsls	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	40020407 	.word	0x40020407
 800bbd0:	40020800 	.word	0x40020800
 800bbd4:	40020820 	.word	0x40020820
 800bbd8:	cccccccd 	.word	0xcccccccd
 800bbdc:	40020880 	.word	0x40020880

0800bbe0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a08      	ldr	r2, [pc, #32]	; (800bc24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bc02:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	f003 031f 	and.w	r3, r3, #31
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	409a      	lsls	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bc14:	bf00      	nop
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	1000823f 	.word	0x1000823f
 800bc24:	40020940 	.word	0x40020940

0800bc28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bc36:	e15a      	b.n	800beee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	fa01 f303 	lsl.w	r3, r1, r3
 800bc44:	4013      	ands	r3, r2
 800bc46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f000 814c 	beq.w	800bee8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d00b      	beq.n	800bc70 <HAL_GPIO_Init+0x48>
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d007      	beq.n	800bc70 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc64:	2b11      	cmp	r3, #17
 800bc66:	d003      	beq.n	800bc70 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b12      	cmp	r3, #18
 800bc6e:	d130      	bne.n	800bcd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc80:	43db      	mvns	r3, r3
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	4013      	ands	r3, r2
 800bc86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	fa02 f303 	lsl.w	r3, r2, r3
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bca6:	2201      	movs	r2, #1
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	fa02 f303 	lsl.w	r3, r2, r3
 800bcae:	43db      	mvns	r3, r3
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	091b      	lsrs	r3, r3, #4
 800bcbc:	f003 0201 	and.w	r2, r3, #1
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	2203      	movs	r2, #3
 800bcde:	fa02 f303 	lsl.w	r3, r2, r3
 800bce2:	43db      	mvns	r3, r3
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	4013      	ands	r3, r2
 800bce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	689a      	ldr	r2, [r3, #8]
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d003      	beq.n	800bd12 <HAL_GPIO_Init+0xea>
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	2b12      	cmp	r3, #18
 800bd10:	d123      	bne.n	800bd5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	08da      	lsrs	r2, r3, #3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3208      	adds	r2, #8
 800bd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	220f      	movs	r2, #15
 800bd2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2e:	43db      	mvns	r3, r3
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	4013      	ands	r3, r2
 800bd34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	691a      	ldr	r2, [r3, #16]
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f003 0307 	and.w	r3, r3, #7
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	fa02 f303 	lsl.w	r3, r2, r3
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	08da      	lsrs	r2, r3, #3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3208      	adds	r2, #8
 800bd54:	6939      	ldr	r1, [r7, #16]
 800bd56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	2203      	movs	r2, #3
 800bd66:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6a:	43db      	mvns	r3, r3
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	f003 0203 	and.w	r2, r3, #3
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	005b      	lsls	r3, r3, #1
 800bd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 80a6 	beq.w	800bee8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd9c:	4b5b      	ldr	r3, [pc, #364]	; (800bf0c <HAL_GPIO_Init+0x2e4>)
 800bd9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bda0:	4a5a      	ldr	r2, [pc, #360]	; (800bf0c <HAL_GPIO_Init+0x2e4>)
 800bda2:	f043 0301 	orr.w	r3, r3, #1
 800bda6:	6613      	str	r3, [r2, #96]	; 0x60
 800bda8:	4b58      	ldr	r3, [pc, #352]	; (800bf0c <HAL_GPIO_Init+0x2e4>)
 800bdaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	60bb      	str	r3, [r7, #8]
 800bdb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bdb4:	4a56      	ldr	r2, [pc, #344]	; (800bf10 <HAL_GPIO_Init+0x2e8>)
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	089b      	lsrs	r3, r3, #2
 800bdba:	3302      	adds	r3, #2
 800bdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f003 0303 	and.w	r3, r3, #3
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	220f      	movs	r2, #15
 800bdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd0:	43db      	mvns	r3, r3
 800bdd2:	693a      	ldr	r2, [r7, #16]
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bdde:	d01f      	beq.n	800be20 <HAL_GPIO_Init+0x1f8>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a4c      	ldr	r2, [pc, #304]	; (800bf14 <HAL_GPIO_Init+0x2ec>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d019      	beq.n	800be1c <HAL_GPIO_Init+0x1f4>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a4b      	ldr	r2, [pc, #300]	; (800bf18 <HAL_GPIO_Init+0x2f0>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d013      	beq.n	800be18 <HAL_GPIO_Init+0x1f0>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a4a      	ldr	r2, [pc, #296]	; (800bf1c <HAL_GPIO_Init+0x2f4>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d00d      	beq.n	800be14 <HAL_GPIO_Init+0x1ec>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a49      	ldr	r2, [pc, #292]	; (800bf20 <HAL_GPIO_Init+0x2f8>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d007      	beq.n	800be10 <HAL_GPIO_Init+0x1e8>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a48      	ldr	r2, [pc, #288]	; (800bf24 <HAL_GPIO_Init+0x2fc>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d101      	bne.n	800be0c <HAL_GPIO_Init+0x1e4>
 800be08:	2305      	movs	r3, #5
 800be0a:	e00a      	b.n	800be22 <HAL_GPIO_Init+0x1fa>
 800be0c:	2306      	movs	r3, #6
 800be0e:	e008      	b.n	800be22 <HAL_GPIO_Init+0x1fa>
 800be10:	2304      	movs	r3, #4
 800be12:	e006      	b.n	800be22 <HAL_GPIO_Init+0x1fa>
 800be14:	2303      	movs	r3, #3
 800be16:	e004      	b.n	800be22 <HAL_GPIO_Init+0x1fa>
 800be18:	2302      	movs	r3, #2
 800be1a:	e002      	b.n	800be22 <HAL_GPIO_Init+0x1fa>
 800be1c:	2301      	movs	r3, #1
 800be1e:	e000      	b.n	800be22 <HAL_GPIO_Init+0x1fa>
 800be20:	2300      	movs	r3, #0
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	f002 0203 	and.w	r2, r2, #3
 800be28:	0092      	lsls	r2, r2, #2
 800be2a:	4093      	lsls	r3, r2
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800be32:	4937      	ldr	r1, [pc, #220]	; (800bf10 <HAL_GPIO_Init+0x2e8>)
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	089b      	lsrs	r3, r3, #2
 800be38:	3302      	adds	r3, #2
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800be40:	4b39      	ldr	r3, [pc, #228]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	43db      	mvns	r3, r3
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	4013      	ands	r3, r2
 800be4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4313      	orrs	r3, r2
 800be62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800be64:	4a30      	ldr	r2, [pc, #192]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800be6a:	4b2f      	ldr	r3, [pc, #188]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	43db      	mvns	r3, r3
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	4013      	ands	r3, r2
 800be78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800be8e:	4a26      	ldr	r2, [pc, #152]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800be94:	4b24      	ldr	r3, [pc, #144]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	43db      	mvns	r3, r3
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	4013      	ands	r3, r2
 800bea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800beb8:	4a1b      	ldr	r2, [pc, #108]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bebe:	4b1a      	ldr	r3, [pc, #104]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	43db      	mvns	r3, r3
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	4013      	ands	r3, r2
 800becc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4313      	orrs	r3, r2
 800bee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bee2:	4a11      	ldr	r2, [pc, #68]	; (800bf28 <HAL_GPIO_Init+0x300>)
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	3301      	adds	r3, #1
 800beec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	fa22 f303 	lsr.w	r3, r2, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f47f ae9d 	bne.w	800bc38 <HAL_GPIO_Init+0x10>
  }
}
 800befe:	bf00      	nop
 800bf00:	371c      	adds	r7, #28
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	40021000 	.word	0x40021000
 800bf10:	40010000 	.word	0x40010000
 800bf14:	48000400 	.word	0x48000400
 800bf18:	48000800 	.word	0x48000800
 800bf1c:	48000c00 	.word	0x48000c00
 800bf20:	48001000 	.word	0x48001000
 800bf24:	48001400 	.word	0x48001400
 800bf28:	40010400 	.word	0x40010400

0800bf2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800bf3a:	e0bd      	b.n	800c0b8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	fa02 f303 	lsl.w	r3, r2, r3
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	4013      	ands	r3, r2
 800bf48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 80b0 	beq.w	800c0b2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800bf52:	4a60      	ldr	r2, [pc, #384]	; (800c0d4 <HAL_GPIO_DeInit+0x1a8>)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	089b      	lsrs	r3, r3, #2
 800bf58:	3302      	adds	r3, #2
 800bf5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	f003 0303 	and.w	r3, r3, #3
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	220f      	movs	r2, #15
 800bf6a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	4013      	ands	r3, r2
 800bf72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bf7a:	d01f      	beq.n	800bfbc <HAL_GPIO_DeInit+0x90>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a56      	ldr	r2, [pc, #344]	; (800c0d8 <HAL_GPIO_DeInit+0x1ac>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d019      	beq.n	800bfb8 <HAL_GPIO_DeInit+0x8c>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a55      	ldr	r2, [pc, #340]	; (800c0dc <HAL_GPIO_DeInit+0x1b0>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d013      	beq.n	800bfb4 <HAL_GPIO_DeInit+0x88>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a54      	ldr	r2, [pc, #336]	; (800c0e0 <HAL_GPIO_DeInit+0x1b4>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d00d      	beq.n	800bfb0 <HAL_GPIO_DeInit+0x84>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a53      	ldr	r2, [pc, #332]	; (800c0e4 <HAL_GPIO_DeInit+0x1b8>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d007      	beq.n	800bfac <HAL_GPIO_DeInit+0x80>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a52      	ldr	r2, [pc, #328]	; (800c0e8 <HAL_GPIO_DeInit+0x1bc>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d101      	bne.n	800bfa8 <HAL_GPIO_DeInit+0x7c>
 800bfa4:	2305      	movs	r3, #5
 800bfa6:	e00a      	b.n	800bfbe <HAL_GPIO_DeInit+0x92>
 800bfa8:	2306      	movs	r3, #6
 800bfaa:	e008      	b.n	800bfbe <HAL_GPIO_DeInit+0x92>
 800bfac:	2304      	movs	r3, #4
 800bfae:	e006      	b.n	800bfbe <HAL_GPIO_DeInit+0x92>
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e004      	b.n	800bfbe <HAL_GPIO_DeInit+0x92>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e002      	b.n	800bfbe <HAL_GPIO_DeInit+0x92>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e000      	b.n	800bfbe <HAL_GPIO_DeInit+0x92>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	f002 0203 	and.w	r2, r2, #3
 800bfc4:	0092      	lsls	r2, r2, #2
 800bfc6:	4093      	lsls	r3, r2
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d132      	bne.n	800c034 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bfce:	4b47      	ldr	r3, [pc, #284]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	43db      	mvns	r3, r3
 800bfd6:	4945      	ldr	r1, [pc, #276]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bfdc:	4b43      	ldr	r3, [pc, #268]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	43db      	mvns	r3, r3
 800bfe4:	4941      	ldr	r1, [pc, #260]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800bfe6:	4013      	ands	r3, r2
 800bfe8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bfea:	4b40      	ldr	r3, [pc, #256]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	43db      	mvns	r3, r3
 800bff2:	493e      	ldr	r1, [pc, #248]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bff8:	4b3c      	ldr	r3, [pc, #240]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800bffa:	68da      	ldr	r2, [r3, #12]
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	43db      	mvns	r3, r3
 800c000:	493a      	ldr	r1, [pc, #232]	; (800c0ec <HAL_GPIO_DeInit+0x1c0>)
 800c002:	4013      	ands	r3, r2
 800c004:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f003 0303 	and.w	r3, r3, #3
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	220f      	movs	r2, #15
 800c010:	fa02 f303 	lsl.w	r3, r2, r3
 800c014:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c016:	4a2f      	ldr	r2, [pc, #188]	; (800c0d4 <HAL_GPIO_DeInit+0x1a8>)
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	089b      	lsrs	r3, r3, #2
 800c01c:	3302      	adds	r3, #2
 800c01e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	43da      	mvns	r2, r3
 800c026:	482b      	ldr	r0, [pc, #172]	; (800c0d4 <HAL_GPIO_DeInit+0x1a8>)
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	089b      	lsrs	r3, r3, #2
 800c02c:	400a      	ands	r2, r1
 800c02e:	3302      	adds	r3, #2
 800c030:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	005b      	lsls	r3, r3, #1
 800c03c:	2103      	movs	r1, #3
 800c03e:	fa01 f303 	lsl.w	r3, r1, r3
 800c042:	431a      	orrs	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	08da      	lsrs	r2, r3, #3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	3208      	adds	r2, #8
 800c050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	220f      	movs	r2, #15
 800c05e:	fa02 f303 	lsl.w	r3, r2, r3
 800c062:	43db      	mvns	r3, r3
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	08d2      	lsrs	r2, r2, #3
 800c068:	4019      	ands	r1, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3208      	adds	r2, #8
 800c06e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	2103      	movs	r1, #3
 800c07c:	fa01 f303 	lsl.w	r3, r1, r3
 800c080:	43db      	mvns	r3, r3
 800c082:	401a      	ands	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	2101      	movs	r1, #1
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	fa01 f303 	lsl.w	r3, r1, r3
 800c094:	43db      	mvns	r3, r3
 800c096:	401a      	ands	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689a      	ldr	r2, [r3, #8]
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	2103      	movs	r1, #3
 800c0a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c0aa:	43db      	mvns	r3, r3
 800c0ac:	401a      	ands	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f47f af3b 	bne.w	800bf3c <HAL_GPIO_DeInit+0x10>
  }
}
 800c0c6:	bf00      	nop
 800c0c8:	371c      	adds	r7, #28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	40010000 	.word	0x40010000
 800c0d8:	48000400 	.word	0x48000400
 800c0dc:	48000800 	.word	0x48000800
 800c0e0:	48000c00 	.word	0x48000c00
 800c0e4:	48001000 	.word	0x48001000
 800c0e8:	48001400 	.word	0x48001400
 800c0ec:	40010400 	.word	0x40010400

0800c0f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	807b      	strh	r3, [r7, #2]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c100:	787b      	ldrb	r3, [r7, #1]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d003      	beq.n	800c10e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c106:	887a      	ldrh	r2, [r7, #2]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c10c:	e002      	b.n	800c114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c10e:	887a      	ldrh	r2, [r7, #2]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d141      	bne.n	800c1b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c12e:	4b4b      	ldr	r3, [pc, #300]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c13a:	d131      	bne.n	800c1a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c13c:	4b47      	ldr	r3, [pc, #284]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c142:	4a46      	ldr	r2, [pc, #280]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c14c:	4b43      	ldr	r3, [pc, #268]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c154:	4a41      	ldr	r2, [pc, #260]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c15a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c15c:	4b40      	ldr	r3, [pc, #256]	; (800c260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2232      	movs	r2, #50	; 0x32
 800c162:	fb02 f303 	mul.w	r3, r2, r3
 800c166:	4a3f      	ldr	r2, [pc, #252]	; (800c264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c168:	fba2 2303 	umull	r2, r3, r2, r3
 800c16c:	0c9b      	lsrs	r3, r3, #18
 800c16e:	3301      	adds	r3, #1
 800c170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c172:	e002      	b.n	800c17a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	3b01      	subs	r3, #1
 800c178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c17a:	4b38      	ldr	r3, [pc, #224]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c186:	d102      	bne.n	800c18e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1f2      	bne.n	800c174 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c18e:	4b33      	ldr	r3, [pc, #204]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c19a:	d158      	bne.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e057      	b.n	800c250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1a0:	4b2e      	ldr	r3, [pc, #184]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1a6:	4a2d      	ldr	r2, [pc, #180]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c1b0:	e04d      	b.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1b8:	d141      	bne.n	800c23e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c1ba:	4b28      	ldr	r3, [pc, #160]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1c6:	d131      	bne.n	800c22c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1c8:	4b24      	ldr	r3, [pc, #144]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1ce:	4a23      	ldr	r2, [pc, #140]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1d8:	4b20      	ldr	r3, [pc, #128]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1e0:	4a1e      	ldr	r2, [pc, #120]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1e8:	4b1d      	ldr	r3, [pc, #116]	; (800c260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2232      	movs	r2, #50	; 0x32
 800c1ee:	fb02 f303 	mul.w	r3, r2, r3
 800c1f2:	4a1c      	ldr	r2, [pc, #112]	; (800c264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f8:	0c9b      	lsrs	r3, r3, #18
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1fe:	e002      	b.n	800c206 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3b01      	subs	r3, #1
 800c204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c206:	4b15      	ldr	r3, [pc, #84]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c20e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c212:	d102      	bne.n	800c21a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f2      	bne.n	800c200 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c21a:	4b10      	ldr	r3, [pc, #64]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c226:	d112      	bne.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e011      	b.n	800c250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c22c:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c232:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c23c:	e007      	b.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c23e:	4b07      	ldr	r3, [pc, #28]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c246:	4a05      	ldr	r2, [pc, #20]	; (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c24c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	40007000 	.word	0x40007000
 800c260:	20000c34 	.word	0x20000c34
 800c264:	431bde83 	.word	0x431bde83

0800c268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b088      	sub	sp, #32
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e308      	b.n	800c88c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d075      	beq.n	800c372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c286:	4ba3      	ldr	r3, [pc, #652]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f003 030c 	and.w	r3, r3, #12
 800c28e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c290:	4ba0      	ldr	r3, [pc, #640]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f003 0303 	and.w	r3, r3, #3
 800c298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b0c      	cmp	r3, #12
 800c29e:	d102      	bne.n	800c2a6 <HAL_RCC_OscConfig+0x3e>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d002      	beq.n	800c2ac <HAL_RCC_OscConfig+0x44>
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	d10b      	bne.n	800c2c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2ac:	4b99      	ldr	r3, [pc, #612]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d05b      	beq.n	800c370 <HAL_RCC_OscConfig+0x108>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d157      	bne.n	800c370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e2e3      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2cc:	d106      	bne.n	800c2dc <HAL_RCC_OscConfig+0x74>
 800c2ce:	4b91      	ldr	r3, [pc, #580]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a90      	ldr	r2, [pc, #576]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	e01d      	b.n	800c318 <HAL_RCC_OscConfig+0xb0>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2e4:	d10c      	bne.n	800c300 <HAL_RCC_OscConfig+0x98>
 800c2e6:	4b8b      	ldr	r3, [pc, #556]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a8a      	ldr	r2, [pc, #552]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c2ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	4b88      	ldr	r3, [pc, #544]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a87      	ldr	r2, [pc, #540]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c2f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2fc:	6013      	str	r3, [r2, #0]
 800c2fe:	e00b      	b.n	800c318 <HAL_RCC_OscConfig+0xb0>
 800c300:	4b84      	ldr	r3, [pc, #528]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a83      	ldr	r2, [pc, #524]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	4b81      	ldr	r3, [pc, #516]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a80      	ldr	r2, [pc, #512]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d013      	beq.n	800c348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c320:	f7fc fc32 	bl	8008b88 <HAL_GetTick>
 800c324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c326:	e008      	b.n	800c33a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c328:	f7fc fc2e 	bl	8008b88 <HAL_GetTick>
 800c32c:	4602      	mov	r2, r0
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	2b64      	cmp	r3, #100	; 0x64
 800c334:	d901      	bls.n	800c33a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e2a8      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c33a:	4b76      	ldr	r3, [pc, #472]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0f0      	beq.n	800c328 <HAL_RCC_OscConfig+0xc0>
 800c346:	e014      	b.n	800c372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c348:	f7fc fc1e 	bl	8008b88 <HAL_GetTick>
 800c34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c34e:	e008      	b.n	800c362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c350:	f7fc fc1a 	bl	8008b88 <HAL_GetTick>
 800c354:	4602      	mov	r2, r0
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	2b64      	cmp	r3, #100	; 0x64
 800c35c:	d901      	bls.n	800c362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e294      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c362:	4b6c      	ldr	r3, [pc, #432]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1f0      	bne.n	800c350 <HAL_RCC_OscConfig+0xe8>
 800c36e:	e000      	b.n	800c372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0302 	and.w	r3, r3, #2
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d075      	beq.n	800c46a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c37e:	4b65      	ldr	r3, [pc, #404]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	f003 030c 	and.w	r3, r3, #12
 800c386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c388:	4b62      	ldr	r3, [pc, #392]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	f003 0303 	and.w	r3, r3, #3
 800c390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	2b0c      	cmp	r3, #12
 800c396:	d102      	bne.n	800c39e <HAL_RCC_OscConfig+0x136>
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	d002      	beq.n	800c3a4 <HAL_RCC_OscConfig+0x13c>
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	d11f      	bne.n	800c3e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3a4:	4b5b      	ldr	r3, [pc, #364]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d005      	beq.n	800c3bc <HAL_RCC_OscConfig+0x154>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e267      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3bc:	4b55      	ldr	r3, [pc, #340]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	061b      	lsls	r3, r3, #24
 800c3ca:	4952      	ldr	r1, [pc, #328]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c3d0:	4b51      	ldr	r3, [pc, #324]	; (800c518 <HAL_RCC_OscConfig+0x2b0>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fc fb8b 	bl	8008af0 <HAL_InitTick>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d043      	beq.n	800c468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e253      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d023      	beq.n	800c434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3ec:	4b49      	ldr	r3, [pc, #292]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a48      	ldr	r2, [pc, #288]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c3f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3f8:	f7fc fbc6 	bl	8008b88 <HAL_GetTick>
 800c3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3fe:	e008      	b.n	800c412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c400:	f7fc fbc2 	bl	8008b88 <HAL_GetTick>
 800c404:	4602      	mov	r2, r0
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d901      	bls.n	800c412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	e23c      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c412:	4b40      	ldr	r3, [pc, #256]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0f0      	beq.n	800c400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c41e:	4b3d      	ldr	r3, [pc, #244]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	061b      	lsls	r3, r3, #24
 800c42c:	4939      	ldr	r1, [pc, #228]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	604b      	str	r3, [r1, #4]
 800c432:	e01a      	b.n	800c46a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c434:	4b37      	ldr	r3, [pc, #220]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a36      	ldr	r2, [pc, #216]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c43a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c43e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c440:	f7fc fba2 	bl	8008b88 <HAL_GetTick>
 800c444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c446:	e008      	b.n	800c45a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c448:	f7fc fb9e 	bl	8008b88 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b02      	cmp	r3, #2
 800c454:	d901      	bls.n	800c45a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e218      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c45a:	4b2e      	ldr	r3, [pc, #184]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1f0      	bne.n	800c448 <HAL_RCC_OscConfig+0x1e0>
 800c466:	e000      	b.n	800c46a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f003 0308 	and.w	r3, r3, #8
 800c472:	2b00      	cmp	r3, #0
 800c474:	d03c      	beq.n	800c4f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d01c      	beq.n	800c4b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c47e:	4b25      	ldr	r3, [pc, #148]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c484:	4a23      	ldr	r2, [pc, #140]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c486:	f043 0301 	orr.w	r3, r3, #1
 800c48a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c48e:	f7fc fb7b 	bl	8008b88 <HAL_GetTick>
 800c492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c494:	e008      	b.n	800c4a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c496:	f7fc fb77 	bl	8008b88 <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d901      	bls.n	800c4a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e1f1      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4a8:	4b1a      	ldr	r3, [pc, #104]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c4aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d0ef      	beq.n	800c496 <HAL_RCC_OscConfig+0x22e>
 800c4b6:	e01b      	b.n	800c4f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4b8:	4b16      	ldr	r3, [pc, #88]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4be:	4a15      	ldr	r2, [pc, #84]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c4c0:	f023 0301 	bic.w	r3, r3, #1
 800c4c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4c8:	f7fc fb5e 	bl	8008b88 <HAL_GetTick>
 800c4cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4ce:	e008      	b.n	800c4e2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4d0:	f7fc fb5a 	bl	8008b88 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d901      	bls.n	800c4e2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	e1d4      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4e2:	4b0c      	ldr	r3, [pc, #48]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c4e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1ef      	bne.n	800c4d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 80ab 	beq.w	800c654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c4fe:	2300      	movs	r3, #0
 800c500:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c502:	4b04      	ldr	r3, [pc, #16]	; (800c514 <HAL_RCC_OscConfig+0x2ac>)
 800c504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <HAL_RCC_OscConfig+0x2b4>
 800c50e:	2301      	movs	r3, #1
 800c510:	e005      	b.n	800c51e <HAL_RCC_OscConfig+0x2b6>
 800c512:	bf00      	nop
 800c514:	40021000 	.word	0x40021000
 800c518:	20000c38 	.word	0x20000c38
 800c51c:	2300      	movs	r3, #0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00d      	beq.n	800c53e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c522:	4baf      	ldr	r3, [pc, #700]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c526:	4aae      	ldr	r2, [pc, #696]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c52c:	6593      	str	r3, [r2, #88]	; 0x58
 800c52e:	4bac      	ldr	r3, [pc, #688]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c53a:	2301      	movs	r3, #1
 800c53c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c53e:	4ba9      	ldr	r3, [pc, #676]	; (800c7e4 <HAL_RCC_OscConfig+0x57c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c546:	2b00      	cmp	r3, #0
 800c548:	d118      	bne.n	800c57c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c54a:	4ba6      	ldr	r3, [pc, #664]	; (800c7e4 <HAL_RCC_OscConfig+0x57c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4aa5      	ldr	r2, [pc, #660]	; (800c7e4 <HAL_RCC_OscConfig+0x57c>)
 800c550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c556:	f7fc fb17 	bl	8008b88 <HAL_GetTick>
 800c55a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c55c:	e008      	b.n	800c570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c55e:	f7fc fb13 	bl	8008b88 <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d901      	bls.n	800c570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e18d      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c570:	4b9c      	ldr	r3, [pc, #624]	; (800c7e4 <HAL_RCC_OscConfig+0x57c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0f0      	beq.n	800c55e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d108      	bne.n	800c596 <HAL_RCC_OscConfig+0x32e>
 800c584:	4b96      	ldr	r3, [pc, #600]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c58a:	4a95      	ldr	r2, [pc, #596]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c58c:	f043 0301 	orr.w	r3, r3, #1
 800c590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c594:	e024      	b.n	800c5e0 <HAL_RCC_OscConfig+0x378>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	2b05      	cmp	r3, #5
 800c59c:	d110      	bne.n	800c5c0 <HAL_RCC_OscConfig+0x358>
 800c59e:	4b90      	ldr	r3, [pc, #576]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a4:	4a8e      	ldr	r2, [pc, #568]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5a6:	f043 0304 	orr.w	r3, r3, #4
 800c5aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5ae:	4b8c      	ldr	r3, [pc, #560]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b4:	4a8a      	ldr	r2, [pc, #552]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5b6:	f043 0301 	orr.w	r3, r3, #1
 800c5ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5be:	e00f      	b.n	800c5e0 <HAL_RCC_OscConfig+0x378>
 800c5c0:	4b87      	ldr	r3, [pc, #540]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c6:	4a86      	ldr	r2, [pc, #536]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5c8:	f023 0301 	bic.w	r3, r3, #1
 800c5cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5d0:	4b83      	ldr	r3, [pc, #524]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d6:	4a82      	ldr	r2, [pc, #520]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c5d8:	f023 0304 	bic.w	r3, r3, #4
 800c5dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d016      	beq.n	800c616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5e8:	f7fc face 	bl	8008b88 <HAL_GetTick>
 800c5ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5ee:	e00a      	b.n	800c606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5f0:	f7fc faca 	bl	8008b88 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d901      	bls.n	800c606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	e142      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c606:	4b76      	ldr	r3, [pc, #472]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d0ed      	beq.n	800c5f0 <HAL_RCC_OscConfig+0x388>
 800c614:	e015      	b.n	800c642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c616:	f7fc fab7 	bl	8008b88 <HAL_GetTick>
 800c61a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c61c:	e00a      	b.n	800c634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c61e:	f7fc fab3 	bl	8008b88 <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	f241 3288 	movw	r2, #5000	; 0x1388
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d901      	bls.n	800c634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e12b      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c634:	4b6a      	ldr	r3, [pc, #424]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c63a:	f003 0302 	and.w	r3, r3, #2
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1ed      	bne.n	800c61e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c642:	7ffb      	ldrb	r3, [r7, #31]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d105      	bne.n	800c654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c648:	4b65      	ldr	r3, [pc, #404]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c64c:	4a64      	ldr	r2, [pc, #400]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c64e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c652:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 0320 	and.w	r3, r3, #32
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d03c      	beq.n	800c6da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01c      	beq.n	800c6a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c668:	4b5d      	ldr	r3, [pc, #372]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c66a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c66e:	4a5c      	ldr	r2, [pc, #368]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c670:	f043 0301 	orr.w	r3, r3, #1
 800c674:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c678:	f7fc fa86 	bl	8008b88 <HAL_GetTick>
 800c67c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c67e:	e008      	b.n	800c692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c680:	f7fc fa82 	bl	8008b88 <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d901      	bls.n	800c692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e0fc      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c692:	4b53      	ldr	r3, [pc, #332]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c698:	f003 0302 	and.w	r3, r3, #2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d0ef      	beq.n	800c680 <HAL_RCC_OscConfig+0x418>
 800c6a0:	e01b      	b.n	800c6da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6a2:	4b4f      	ldr	r3, [pc, #316]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c6a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6a8:	4a4d      	ldr	r2, [pc, #308]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c6aa:	f023 0301 	bic.w	r3, r3, #1
 800c6ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6b2:	f7fc fa69 	bl	8008b88 <HAL_GetTick>
 800c6b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6b8:	e008      	b.n	800c6cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6ba:	f7fc fa65 	bl	8008b88 <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d901      	bls.n	800c6cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e0df      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6cc:	4b44      	ldr	r3, [pc, #272]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c6ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6d2:	f003 0302 	and.w	r3, r3, #2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1ef      	bne.n	800c6ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	69db      	ldr	r3, [r3, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f000 80d3 	beq.w	800c88a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c6e4:	4b3e      	ldr	r3, [pc, #248]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f003 030c 	and.w	r3, r3, #12
 800c6ec:	2b0c      	cmp	r3, #12
 800c6ee:	f000 808d 	beq.w	800c80c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d15a      	bne.n	800c7b0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6fa:	4b39      	ldr	r3, [pc, #228]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a38      	ldr	r2, [pc, #224]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c706:	f7fc fa3f 	bl	8008b88 <HAL_GetTick>
 800c70a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c70c:	e008      	b.n	800c720 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c70e:	f7fc fa3b 	bl	8008b88 <HAL_GetTick>
 800c712:	4602      	mov	r2, r0
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d901      	bls.n	800c720 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e0b5      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c720:	4b2f      	ldr	r3, [pc, #188]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1f0      	bne.n	800c70e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c72c:	4b2c      	ldr	r3, [pc, #176]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c72e:	68da      	ldr	r2, [r3, #12]
 800c730:	4b2d      	ldr	r3, [pc, #180]	; (800c7e8 <HAL_RCC_OscConfig+0x580>)
 800c732:	4013      	ands	r3, r2
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	6a11      	ldr	r1, [r2, #32]
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c73c:	3a01      	subs	r2, #1
 800c73e:	0112      	lsls	r2, r2, #4
 800c740:	4311      	orrs	r1, r2
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c746:	0212      	lsls	r2, r2, #8
 800c748:	4311      	orrs	r1, r2
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c74e:	0852      	lsrs	r2, r2, #1
 800c750:	3a01      	subs	r2, #1
 800c752:	0552      	lsls	r2, r2, #21
 800c754:	4311      	orrs	r1, r2
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c75a:	0852      	lsrs	r2, r2, #1
 800c75c:	3a01      	subs	r2, #1
 800c75e:	0652      	lsls	r2, r2, #25
 800c760:	4311      	orrs	r1, r2
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c766:	06d2      	lsls	r2, r2, #27
 800c768:	430a      	orrs	r2, r1
 800c76a:	491d      	ldr	r1, [pc, #116]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c76c:	4313      	orrs	r3, r2
 800c76e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c770:	4b1b      	ldr	r3, [pc, #108]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a1a      	ldr	r2, [pc, #104]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c77a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c77c:	4b18      	ldr	r3, [pc, #96]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	4a17      	ldr	r2, [pc, #92]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c786:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c788:	f7fc f9fe 	bl	8008b88 <HAL_GetTick>
 800c78c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c78e:	e008      	b.n	800c7a2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c790:	f7fc f9fa 	bl	8008b88 <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d901      	bls.n	800c7a2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e074      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7a2:	4b0f      	ldr	r3, [pc, #60]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0f0      	beq.n	800c790 <HAL_RCC_OscConfig+0x528>
 800c7ae:	e06c      	b.n	800c88a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7b0:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a0a      	ldr	r2, [pc, #40]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c7b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c7bc:	4b08      	ldr	r3, [pc, #32]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	4a07      	ldr	r2, [pc, #28]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c7c2:	f023 0303 	bic.w	r3, r3, #3
 800c7c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c7c8:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <HAL_RCC_OscConfig+0x578>)
 800c7ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c7d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7d8:	f7fc f9d6 	bl	8008b88 <HAL_GetTick>
 800c7dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7de:	e00e      	b.n	800c7fe <HAL_RCC_OscConfig+0x596>
 800c7e0:	40021000 	.word	0x40021000
 800c7e4:	40007000 	.word	0x40007000
 800c7e8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7ec:	f7fc f9cc 	bl	8008b88 <HAL_GetTick>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d901      	bls.n	800c7fe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e046      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7fe:	4b25      	ldr	r3, [pc, #148]	; (800c894 <HAL_RCC_OscConfig+0x62c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f0      	bne.n	800c7ec <HAL_RCC_OscConfig+0x584>
 800c80a:	e03e      	b.n	800c88a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d101      	bne.n	800c818 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	e039      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c818:	4b1e      	ldr	r3, [pc, #120]	; (800c894 <HAL_RCC_OscConfig+0x62c>)
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f003 0203 	and.w	r2, r3, #3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a1b      	ldr	r3, [r3, #32]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d12c      	bne.n	800c886 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c836:	3b01      	subs	r3, #1
 800c838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d123      	bne.n	800c886 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c848:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d11b      	bne.n	800c886 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c858:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d113      	bne.n	800c886 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c868:	085b      	lsrs	r3, r3, #1
 800c86a:	3b01      	subs	r3, #1
 800c86c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c86e:	429a      	cmp	r2, r3
 800c870:	d109      	bne.n	800c886 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c87c:	085b      	lsrs	r3, r3, #1
 800c87e:	3b01      	subs	r3, #1
 800c880:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c882:	429a      	cmp	r2, r3
 800c884:	d001      	beq.n	800c88a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e000      	b.n	800c88c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3720      	adds	r7, #32
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	40021000 	.word	0x40021000

0800c898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d101      	bne.n	800c8b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e11e      	b.n	800caee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8b0:	4b91      	ldr	r3, [pc, #580]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 030f 	and.w	r3, r3, #15
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d910      	bls.n	800c8e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8be:	4b8e      	ldr	r3, [pc, #568]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f023 020f 	bic.w	r2, r3, #15
 800c8c6:	498c      	ldr	r1, [pc, #560]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8ce:	4b8a      	ldr	r3, [pc, #552]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f003 030f 	and.w	r3, r3, #15
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d001      	beq.n	800c8e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e106      	b.n	800caee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 0301 	and.w	r3, r3, #1
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d073      	beq.n	800c9d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d129      	bne.n	800c948 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8f4:	4b81      	ldr	r3, [pc, #516]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d101      	bne.n	800c904 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e0f4      	b.n	800caee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c904:	f000 f972 	bl	800cbec <RCC_GetSysClockFreqFromPLLSource>
 800c908:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	4a7c      	ldr	r2, [pc, #496]	; (800cb00 <HAL_RCC_ClockConfig+0x268>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d93f      	bls.n	800c992 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c912:	4b7a      	ldr	r3, [pc, #488]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d009      	beq.n	800c932 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c926:	2b00      	cmp	r3, #0
 800c928:	d033      	beq.n	800c992 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d12f      	bne.n	800c992 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c932:	4b72      	ldr	r3, [pc, #456]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c93a:	4a70      	ldr	r2, [pc, #448]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c940:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c942:	2380      	movs	r3, #128	; 0x80
 800c944:	617b      	str	r3, [r7, #20]
 800c946:	e024      	b.n	800c992 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d107      	bne.n	800c960 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c950:	4b6a      	ldr	r3, [pc, #424]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d109      	bne.n	800c970 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	e0c6      	b.n	800caee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c960:	4b66      	ldr	r3, [pc, #408]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d101      	bne.n	800c970 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	e0be      	b.n	800caee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c970:	f000 f8ce 	bl	800cb10 <HAL_RCC_GetSysClockFreq>
 800c974:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	4a61      	ldr	r2, [pc, #388]	; (800cb00 <HAL_RCC_ClockConfig+0x268>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d909      	bls.n	800c992 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c97e:	4b5f      	ldr	r3, [pc, #380]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c986:	4a5d      	ldr	r2, [pc, #372]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c98c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c98e:	2380      	movs	r3, #128	; 0x80
 800c990:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c992:	4b5a      	ldr	r3, [pc, #360]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	f023 0203 	bic.w	r2, r3, #3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	4957      	ldr	r1, [pc, #348]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9a4:	f7fc f8f0 	bl	8008b88 <HAL_GetTick>
 800c9a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9aa:	e00a      	b.n	800c9c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9ac:	f7fc f8ec 	bl	8008b88 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d901      	bls.n	800c9c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e095      	b.n	800caee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9c2:	4b4e      	ldr	r3, [pc, #312]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	f003 020c 	and.w	r2, r3, #12
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d1eb      	bne.n	800c9ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0302 	and.w	r3, r3, #2
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d023      	beq.n	800ca28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 0304 	and.w	r3, r3, #4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d005      	beq.n	800c9f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c9ec:	4b43      	ldr	r3, [pc, #268]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	4a42      	ldr	r2, [pc, #264]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800c9f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c9f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f003 0308 	and.w	r3, r3, #8
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d007      	beq.n	800ca14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ca04:	4b3d      	ldr	r3, [pc, #244]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca0c:	4a3b      	ldr	r2, [pc, #236]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca14:	4b39      	ldr	r3, [pc, #228]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	4936      	ldr	r1, [pc, #216]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca22:	4313      	orrs	r3, r2
 800ca24:	608b      	str	r3, [r1, #8]
 800ca26:	e008      	b.n	800ca3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2b80      	cmp	r3, #128	; 0x80
 800ca2c:	d105      	bne.n	800ca3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ca2e:	4b33      	ldr	r3, [pc, #204]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	4a32      	ldr	r2, [pc, #200]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ca3a:	4b2f      	ldr	r3, [pc, #188]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 030f 	and.w	r3, r3, #15
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d21d      	bcs.n	800ca84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca48:	4b2b      	ldr	r3, [pc, #172]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f023 020f 	bic.w	r2, r3, #15
 800ca50:	4929      	ldr	r1, [pc, #164]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ca58:	f7fc f896 	bl	8008b88 <HAL_GetTick>
 800ca5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca5e:	e00a      	b.n	800ca76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca60:	f7fc f892 	bl	8008b88 <HAL_GetTick>
 800ca64:	4602      	mov	r2, r0
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d901      	bls.n	800ca76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e03b      	b.n	800caee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca76:	4b20      	ldr	r3, [pc, #128]	; (800caf8 <HAL_RCC_ClockConfig+0x260>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 030f 	and.w	r3, r3, #15
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d1ed      	bne.n	800ca60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 0304 	and.w	r3, r3, #4
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d008      	beq.n	800caa2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca90:	4b1a      	ldr	r3, [pc, #104]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	4917      	ldr	r1, [pc, #92]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0308 	and.w	r3, r3, #8
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d009      	beq.n	800cac2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800caae:	4b13      	ldr	r3, [pc, #76]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	00db      	lsls	r3, r3, #3
 800cabc:	490f      	ldr	r1, [pc, #60]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cac2:	f000 f825 	bl	800cb10 <HAL_RCC_GetSysClockFreq>
 800cac6:	4601      	mov	r1, r0
 800cac8:	4b0c      	ldr	r3, [pc, #48]	; (800cafc <HAL_RCC_ClockConfig+0x264>)
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	091b      	lsrs	r3, r3, #4
 800cace:	f003 030f 	and.w	r3, r3, #15
 800cad2:	4a0c      	ldr	r2, [pc, #48]	; (800cb04 <HAL_RCC_ClockConfig+0x26c>)
 800cad4:	5cd3      	ldrb	r3, [r2, r3]
 800cad6:	f003 031f 	and.w	r3, r3, #31
 800cada:	fa21 f303 	lsr.w	r3, r1, r3
 800cade:	4a0a      	ldr	r2, [pc, #40]	; (800cb08 <HAL_RCC_ClockConfig+0x270>)
 800cae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cae2:	4b0a      	ldr	r3, [pc, #40]	; (800cb0c <HAL_RCC_ClockConfig+0x274>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fc f802 	bl	8008af0 <HAL_InitTick>
 800caec:	4603      	mov	r3, r0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3718      	adds	r7, #24
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	40022000 	.word	0x40022000
 800cafc:	40021000 	.word	0x40021000
 800cb00:	04c4b400 	.word	0x04c4b400
 800cb04:	080154f8 	.word	0x080154f8
 800cb08:	20000c34 	.word	0x20000c34
 800cb0c:	20000c38 	.word	0x20000c38

0800cb10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cb16:	4b2c      	ldr	r3, [pc, #176]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	f003 030c 	and.w	r3, r3, #12
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d102      	bne.n	800cb28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cb22:	4b2a      	ldr	r3, [pc, #168]	; (800cbcc <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb24:	613b      	str	r3, [r7, #16]
 800cb26:	e047      	b.n	800cbb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cb28:	4b27      	ldr	r3, [pc, #156]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f003 030c 	and.w	r3, r3, #12
 800cb30:	2b08      	cmp	r3, #8
 800cb32:	d102      	bne.n	800cb3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cb34:	4b26      	ldr	r3, [pc, #152]	; (800cbd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb36:	613b      	str	r3, [r7, #16]
 800cb38:	e03e      	b.n	800cbb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cb3a:	4b23      	ldr	r3, [pc, #140]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f003 030c 	and.w	r3, r3, #12
 800cb42:	2b0c      	cmp	r3, #12
 800cb44:	d136      	bne.n	800cbb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cb46:	4b20      	ldr	r3, [pc, #128]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f003 0303 	and.w	r3, r3, #3
 800cb4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cb50:	4b1d      	ldr	r3, [pc, #116]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	091b      	lsrs	r3, r3, #4
 800cb56:	f003 030f 	and.w	r3, r3, #15
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d10c      	bne.n	800cb7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb64:	4a1a      	ldr	r2, [pc, #104]	; (800cbd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb6c:	4a16      	ldr	r2, [pc, #88]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb6e:	68d2      	ldr	r2, [r2, #12]
 800cb70:	0a12      	lsrs	r2, r2, #8
 800cb72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb76:	fb02 f303 	mul.w	r3, r2, r3
 800cb7a:	617b      	str	r3, [r7, #20]
      break;
 800cb7c:	e00c      	b.n	800cb98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb7e:	4a13      	ldr	r2, [pc, #76]	; (800cbcc <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb86:	4a10      	ldr	r2, [pc, #64]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb88:	68d2      	ldr	r2, [r2, #12]
 800cb8a:	0a12      	lsrs	r2, r2, #8
 800cb8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb90:	fb02 f303 	mul.w	r3, r2, r3
 800cb94:	617b      	str	r3, [r7, #20]
      break;
 800cb96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cb98:	4b0b      	ldr	r3, [pc, #44]	; (800cbc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	0e5b      	lsrs	r3, r3, #25
 800cb9e:	f003 0303 	and.w	r3, r3, #3
 800cba2:	3301      	adds	r3, #1
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb0:	613b      	str	r3, [r7, #16]
 800cbb2:	e001      	b.n	800cbb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cbb8:	693b      	ldr	r3, [r7, #16]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	371c      	adds	r7, #28
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	40021000 	.word	0x40021000
 800cbcc:	00f42400 	.word	0x00f42400
 800cbd0:	007a1200 	.word	0x007a1200

0800cbd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cbd8:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <HAL_RCC_GetHCLKFreq+0x14>)
 800cbda:	681b      	ldr	r3, [r3, #0]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	20000c34 	.word	0x20000c34

0800cbec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cbf2:	4b1e      	ldr	r3, [pc, #120]	; (800cc6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	f003 0303 	and.w	r3, r3, #3
 800cbfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cbfc:	4b1b      	ldr	r3, [pc, #108]	; (800cc6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	091b      	lsrs	r3, r3, #4
 800cc02:	f003 030f 	and.w	r3, r3, #15
 800cc06:	3301      	adds	r3, #1
 800cc08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d10c      	bne.n	800cc2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc10:	4a17      	ldr	r2, [pc, #92]	; (800cc70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc18:	4a14      	ldr	r2, [pc, #80]	; (800cc6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc1a:	68d2      	ldr	r2, [r2, #12]
 800cc1c:	0a12      	lsrs	r2, r2, #8
 800cc1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc22:	fb02 f303 	mul.w	r3, r2, r3
 800cc26:	617b      	str	r3, [r7, #20]
    break;
 800cc28:	e00c      	b.n	800cc44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc2a:	4a12      	ldr	r2, [pc, #72]	; (800cc74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc32:	4a0e      	ldr	r2, [pc, #56]	; (800cc6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc34:	68d2      	ldr	r2, [r2, #12]
 800cc36:	0a12      	lsrs	r2, r2, #8
 800cc38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc3c:	fb02 f303 	mul.w	r3, r2, r3
 800cc40:	617b      	str	r3, [r7, #20]
    break;
 800cc42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cc44:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	0e5b      	lsrs	r3, r3, #25
 800cc4a:	f003 0303 	and.w	r3, r3, #3
 800cc4e:	3301      	adds	r3, #1
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cc54:	697a      	ldr	r2, [r7, #20]
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cc5e:	687b      	ldr	r3, [r7, #4]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	371c      	adds	r7, #28
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	40021000 	.word	0x40021000
 800cc70:	007a1200 	.word	0x007a1200
 800cc74:	00f42400 	.word	0x00f42400

0800cc78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc80:	2300      	movs	r3, #0
 800cc82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cc84:	2300      	movs	r3, #0
 800cc86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 8098 	beq.w	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc96:	2300      	movs	r3, #0
 800cc98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc9a:	4b43      	ldr	r3, [pc, #268]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cc9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10d      	bne.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cca6:	4b40      	ldr	r3, [pc, #256]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccaa:	4a3f      	ldr	r2, [pc, #252]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccb0:	6593      	str	r3, [r2, #88]	; 0x58
 800ccb2:	4b3d      	ldr	r3, [pc, #244]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccba:	60bb      	str	r3, [r7, #8]
 800ccbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccc2:	4b3a      	ldr	r3, [pc, #232]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a39      	ldr	r2, [pc, #228]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ccc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ccce:	f7fb ff5b 	bl	8008b88 <HAL_GetTick>
 800ccd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccd4:	e009      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ccd6:	f7fb ff57 	bl	8008b88 <HAL_GetTick>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d902      	bls.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cce4:	2303      	movs	r3, #3
 800cce6:	74fb      	strb	r3, [r7, #19]
        break;
 800cce8:	e005      	b.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccea:	4b30      	ldr	r3, [pc, #192]	; (800cdac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d0ef      	beq.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ccf6:	7cfb      	ldrb	r3, [r7, #19]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d159      	bne.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ccfc:	4b2a      	ldr	r3, [pc, #168]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d01e      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d019      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd18:	4b23      	ldr	r3, [pc, #140]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd24:	4b20      	ldr	r3, [pc, #128]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd2a:	4a1f      	ldr	r2, [pc, #124]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd34:	4b1c      	ldr	r3, [pc, #112]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd3a:	4a1b      	ldr	r2, [pc, #108]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cd44:	4a18      	ldr	r2, [pc, #96]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d016      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd56:	f7fb ff17 	bl	8008b88 <HAL_GetTick>
 800cd5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd5c:	e00b      	b.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd5e:	f7fb ff13 	bl	8008b88 <HAL_GetTick>
 800cd62:	4602      	mov	r2, r0
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d902      	bls.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	74fb      	strb	r3, [r7, #19]
            break;
 800cd74:	e006      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd76:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd7c:	f003 0302 	and.w	r3, r3, #2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0ec      	beq.n	800cd5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800cd84:	7cfb      	ldrb	r3, [r7, #19]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10b      	bne.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cd8a:	4b07      	ldr	r3, [pc, #28]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd98:	4903      	ldr	r1, [pc, #12]	; (800cda8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cda0:	e008      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cda2:	7cfb      	ldrb	r3, [r7, #19]
 800cda4:	74bb      	strb	r3, [r7, #18]
 800cda6:	e005      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800cda8:	40021000 	.word	0x40021000
 800cdac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdb0:	7cfb      	ldrb	r3, [r7, #19]
 800cdb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdb4:	7c7b      	ldrb	r3, [r7, #17]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d105      	bne.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdba:	4baf      	ldr	r3, [pc, #700]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdbe:	4aae      	ldr	r2, [pc, #696]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00a      	beq.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cdd2:	4ba9      	ldr	r3, [pc, #676]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdd8:	f023 0203 	bic.w	r2, r3, #3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	49a5      	ldr	r1, [pc, #660]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cde2:	4313      	orrs	r3, r2
 800cde4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 0302 	and.w	r3, r3, #2
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00a      	beq.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cdf4:	4ba0      	ldr	r3, [pc, #640]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cdf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdfa:	f023 020c 	bic.w	r2, r3, #12
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	499d      	ldr	r1, [pc, #628]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce04:	4313      	orrs	r3, r2
 800ce06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0304 	and.w	r3, r3, #4
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00a      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce16:	4b98      	ldr	r3, [pc, #608]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	4994      	ldr	r1, [pc, #592]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 0308 	and.w	r3, r3, #8
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00a      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce38:	4b8f      	ldr	r3, [pc, #572]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
 800ce46:	498c      	ldr	r1, [pc, #560]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 0310 	and.w	r3, r3, #16
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00a      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ce5a:	4b87      	ldr	r3, [pc, #540]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	695b      	ldr	r3, [r3, #20]
 800ce68:	4983      	ldr	r1, [pc, #524]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0320 	and.w	r3, r3, #32
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00a      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ce7c:	4b7e      	ldr	r3, [pc, #504]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	497b      	ldr	r1, [pc, #492]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ce9e:	4b76      	ldr	r3, [pc, #472]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cea4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	69db      	ldr	r3, [r3, #28]
 800ceac:	4972      	ldr	r1, [pc, #456]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00a      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cec0:	4b6d      	ldr	r3, [pc, #436]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6a1b      	ldr	r3, [r3, #32]
 800cece:	496a      	ldr	r1, [pc, #424]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cee2:	4b65      	ldr	r3, [pc, #404]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef0:	4961      	ldr	r1, [pc, #388]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cef2:	4313      	orrs	r3, r2
 800cef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00a      	beq.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf04:	4b5c      	ldr	r3, [pc, #368]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf0a:	f023 0203 	bic.w	r2, r3, #3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf12:	4959      	ldr	r1, [pc, #356]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf14:	4313      	orrs	r3, r2
 800cf16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf26:	4b54      	ldr	r3, [pc, #336]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf34:	4950      	ldr	r1, [pc, #320]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d015      	beq.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf48:	4b4b      	ldr	r3, [pc, #300]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf56:	4948      	ldr	r1, [pc, #288]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf66:	d105      	bne.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cf68:	4b43      	ldr	r3, [pc, #268]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	4a42      	ldr	r2, [pc, #264]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d015      	beq.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cf80:	4b3d      	ldr	r3, [pc, #244]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf8e:	493a      	ldr	r1, [pc, #232]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf90:	4313      	orrs	r3, r2
 800cf92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf9e:	d105      	bne.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfa0:	4b35      	ldr	r3, [pc, #212]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	4a34      	ldr	r2, [pc, #208]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfaa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d015      	beq.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cfb8:	4b2f      	ldr	r3, [pc, #188]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc6:	492c      	ldr	r1, [pc, #176]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cfd6:	d105      	bne.n	800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfd8:	4b27      	ldr	r3, [pc, #156]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	4a26      	ldr	r2, [pc, #152]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfe2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d015      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cff0:	4b21      	ldr	r3, [pc, #132]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffe:	491e      	ldr	r1, [pc, #120]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d000:	4313      	orrs	r3, r2
 800d002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d00e:	d105      	bne.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d010:	4b19      	ldr	r3, [pc, #100]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	4a18      	ldr	r2, [pc, #96]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d01a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d024:	2b00      	cmp	r3, #0
 800d026:	d015      	beq.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d028:	4b13      	ldr	r3, [pc, #76]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d02a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d02e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d036:	4910      	ldr	r1, [pc, #64]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d038:	4313      	orrs	r3, r2
 800d03a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d046:	d105      	bne.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d048:	4b0b      	ldr	r3, [pc, #44]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	4a0a      	ldr	r2, [pc, #40]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d04e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d052:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d018      	beq.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d060:	4b05      	ldr	r3, [pc, #20]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d066:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d06e:	4902      	ldr	r1, [pc, #8]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d070:	4313      	orrs	r3, r2
 800d072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d076:	e001      	b.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d078:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d084:	d105      	bne.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d086:	4b21      	ldr	r3, [pc, #132]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	4a20      	ldr	r2, [pc, #128]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d08c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d090:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d015      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d09e:	4b1b      	ldr	r3, [pc, #108]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0ac:	4917      	ldr	r1, [pc, #92]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0bc:	d105      	bne.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d0be:	4b13      	ldr	r3, [pc, #76]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	4a12      	ldr	r2, [pc, #72]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0c8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d015      	beq.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d0d6:	4b0d      	ldr	r3, [pc, #52]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d0dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0e4:	4909      	ldr	r1, [pc, #36]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0f4:	d105      	bne.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0f6:	4b05      	ldr	r3, [pc, #20]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	4a04      	ldr	r2, [pc, #16]	; (800d10c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d0fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d100:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d102:	7cbb      	ldrb	r3, [r7, #18]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3718      	adds	r7, #24
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	40021000 	.word	0x40021000

0800d110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e084      	b.n	800d22c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b00      	cmp	r3, #0
 800d132:	d106      	bne.n	800d142 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7fa ff0b 	bl	8007f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2202      	movs	r2, #2
 800d146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d158:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d162:	d902      	bls.n	800d16a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d164:	2300      	movs	r3, #0
 800d166:	60fb      	str	r3, [r7, #12]
 800d168:	e002      	b.n	800d170 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d16a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d16e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d178:	d007      	beq.n	800d18a <HAL_SPI_Init+0x7a>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d182:	d002      	beq.n	800d18a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10b      	bne.n	800d1aa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d19a:	d903      	bls.n	800d1a4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2202      	movs	r2, #2
 800d1a0:	631a      	str	r2, [r3, #48]	; 0x30
 800d1a2:	e002      	b.n	800d1aa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	431a      	orrs	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	431a      	orrs	r2, r3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	431a      	orrs	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1c8:	431a      	orrs	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	69db      	ldr	r3, [r3, #28]
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6a1b      	ldr	r3, [r3, #32]
 800d1d4:	ea42 0103 	orr.w	r1, r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	430a      	orrs	r2, r1
 800d1e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	0c1b      	lsrs	r3, r3, #16
 800d1ea:	f003 0204 	and.w	r2, r3, #4
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f2:	431a      	orrs	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f8:	431a      	orrs	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	ea42 0103 	orr.w	r1, r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	430a      	orrs	r2, r1
 800d20a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	69da      	ldr	r2, [r3, #28]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d21a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e049      	b.n	800d2da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7fb fb52 	bl	8008904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3304      	adds	r3, #4
 800d270:	4619      	mov	r1, r3
 800d272:	4610      	mov	r0, r2
 800d274:	f000 ff20 	bl	800e0b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2201      	movs	r2, #1
 800d294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
	...

0800d2e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d001      	beq.n	800d2fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e019      	b.n	800d330 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2202      	movs	r2, #2
 800d300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	689a      	ldr	r2, [r3, #8]
 800d30a:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <HAL_TIM_Base_Start+0x58>)
 800d30c:	4013      	ands	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2b06      	cmp	r3, #6
 800d314:	d00b      	beq.n	800d32e <HAL_TIM_Base_Start+0x4a>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d31c:	d007      	beq.n	800d32e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f042 0201 	orr.w	r2, r2, #1
 800d32c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	00010007 	.word	0x00010007

0800d340 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6a1a      	ldr	r2, [r3, #32]
 800d34e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d352:	4013      	ands	r3, r2
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10f      	bne.n	800d378 <HAL_TIM_Base_Stop+0x38>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6a1a      	ldr	r2, [r3, #32]
 800d35e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d362:	4013      	ands	r3, r2
 800d364:	2b00      	cmp	r3, #0
 800d366:	d107      	bne.n	800d378 <HAL_TIM_Base_Stop+0x38>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f022 0201 	bic.w	r2, r2, #1
 800d376:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	370c      	adds	r7, #12
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
	...

0800d390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d001      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e021      	b.n	800d3ec <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68da      	ldr	r2, [r3, #12]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f042 0201 	orr.w	r2, r2, #1
 800d3be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	689a      	ldr	r2, [r3, #8]
 800d3c6:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <HAL_TIM_Base_Start_IT+0x68>)
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b06      	cmp	r3, #6
 800d3d0:	d00b      	beq.n	800d3ea <HAL_TIM_Base_Start_IT+0x5a>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3d8:	d007      	beq.n	800d3ea <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f042 0201 	orr.w	r2, r2, #1
 800d3e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	00010007 	.word	0x00010007

0800d3fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	68da      	ldr	r2, [r3, #12]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f022 0201 	bic.w	r2, r2, #1
 800d412:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6a1a      	ldr	r2, [r3, #32]
 800d41a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d41e:	4013      	ands	r3, r2
 800d420:	2b00      	cmp	r3, #0
 800d422:	d10f      	bne.n	800d444 <HAL_TIM_Base_Stop_IT+0x48>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6a1a      	ldr	r2, [r3, #32]
 800d42a:	f244 4344 	movw	r3, #17476	; 0x4444
 800d42e:	4013      	ands	r3, r2
 800d430:	2b00      	cmp	r3, #0
 800d432:	d107      	bne.n	800d444 <HAL_TIM_Base_Stop_IT+0x48>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f022 0201 	bic.w	r2, r2, #1
 800d442:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2201      	movs	r2, #1
 800d448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	370c      	adds	r7, #12
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b082      	sub	sp, #8
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e049      	b.n	800d500 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d472:	b2db      	uxtb	r3, r3
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f841 	bl	800d508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2202      	movs	r2, #2
 800d48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	3304      	adds	r3, #4
 800d496:	4619      	mov	r1, r3
 800d498:	4610      	mov	r0, r2
 800d49a:	f000 fe0d 	bl	800e0b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d109      	bne.n	800d540 <HAL_TIM_PWM_Start+0x24>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b01      	cmp	r3, #1
 800d536:	bf14      	ite	ne
 800d538:	2301      	movne	r3, #1
 800d53a:	2300      	moveq	r3, #0
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	e03c      	b.n	800d5ba <HAL_TIM_PWM_Start+0x9e>
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b04      	cmp	r3, #4
 800d544:	d109      	bne.n	800d55a <HAL_TIM_PWM_Start+0x3e>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b01      	cmp	r3, #1
 800d550:	bf14      	ite	ne
 800d552:	2301      	movne	r3, #1
 800d554:	2300      	moveq	r3, #0
 800d556:	b2db      	uxtb	r3, r3
 800d558:	e02f      	b.n	800d5ba <HAL_TIM_PWM_Start+0x9e>
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b08      	cmp	r3, #8
 800d55e:	d109      	bne.n	800d574 <HAL_TIM_PWM_Start+0x58>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2b01      	cmp	r3, #1
 800d56a:	bf14      	ite	ne
 800d56c:	2301      	movne	r3, #1
 800d56e:	2300      	moveq	r3, #0
 800d570:	b2db      	uxtb	r3, r3
 800d572:	e022      	b.n	800d5ba <HAL_TIM_PWM_Start+0x9e>
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	2b0c      	cmp	r3, #12
 800d578:	d109      	bne.n	800d58e <HAL_TIM_PWM_Start+0x72>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b01      	cmp	r3, #1
 800d584:	bf14      	ite	ne
 800d586:	2301      	movne	r3, #1
 800d588:	2300      	moveq	r3, #0
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	e015      	b.n	800d5ba <HAL_TIM_PWM_Start+0x9e>
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	2b10      	cmp	r3, #16
 800d592:	d109      	bne.n	800d5a8 <HAL_TIM_PWM_Start+0x8c>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	bf14      	ite	ne
 800d5a0:	2301      	movne	r3, #1
 800d5a2:	2300      	moveq	r3, #0
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	e008      	b.n	800d5ba <HAL_TIM_PWM_Start+0x9e>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e073      	b.n	800d6aa <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d104      	bne.n	800d5d2 <HAL_TIM_PWM_Start+0xb6>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5d0:	e023      	b.n	800d61a <HAL_TIM_PWM_Start+0xfe>
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2b04      	cmp	r3, #4
 800d5d6:	d104      	bne.n	800d5e2 <HAL_TIM_PWM_Start+0xc6>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2202      	movs	r2, #2
 800d5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5e0:	e01b      	b.n	800d61a <HAL_TIM_PWM_Start+0xfe>
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d104      	bne.n	800d5f2 <HAL_TIM_PWM_Start+0xd6>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2202      	movs	r2, #2
 800d5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5f0:	e013      	b.n	800d61a <HAL_TIM_PWM_Start+0xfe>
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b0c      	cmp	r3, #12
 800d5f6:	d104      	bne.n	800d602 <HAL_TIM_PWM_Start+0xe6>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d600:	e00b      	b.n	800d61a <HAL_TIM_PWM_Start+0xfe>
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	2b10      	cmp	r3, #16
 800d606:	d104      	bne.n	800d612 <HAL_TIM_PWM_Start+0xf6>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d610:	e003      	b.n	800d61a <HAL_TIM_PWM_Start+0xfe>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2202      	movs	r2, #2
 800d616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2201      	movs	r2, #1
 800d620:	6839      	ldr	r1, [r7, #0]
 800d622:	4618      	mov	r0, r3
 800d624:	f001 f9b6 	bl	800e994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a21      	ldr	r2, [pc, #132]	; (800d6b4 <HAL_TIM_PWM_Start+0x198>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d018      	beq.n	800d664 <HAL_TIM_PWM_Start+0x148>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a20      	ldr	r2, [pc, #128]	; (800d6b8 <HAL_TIM_PWM_Start+0x19c>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d013      	beq.n	800d664 <HAL_TIM_PWM_Start+0x148>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a1e      	ldr	r2, [pc, #120]	; (800d6bc <HAL_TIM_PWM_Start+0x1a0>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d00e      	beq.n	800d664 <HAL_TIM_PWM_Start+0x148>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a1d      	ldr	r2, [pc, #116]	; (800d6c0 <HAL_TIM_PWM_Start+0x1a4>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d009      	beq.n	800d664 <HAL_TIM_PWM_Start+0x148>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a1b      	ldr	r2, [pc, #108]	; (800d6c4 <HAL_TIM_PWM_Start+0x1a8>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d004      	beq.n	800d664 <HAL_TIM_PWM_Start+0x148>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a1a      	ldr	r2, [pc, #104]	; (800d6c8 <HAL_TIM_PWM_Start+0x1ac>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d101      	bne.n	800d668 <HAL_TIM_PWM_Start+0x14c>
 800d664:	2301      	movs	r3, #1
 800d666:	e000      	b.n	800d66a <HAL_TIM_PWM_Start+0x14e>
 800d668:	2300      	movs	r3, #0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d007      	beq.n	800d67e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d67c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	689a      	ldr	r2, [r3, #8]
 800d684:	4b11      	ldr	r3, [pc, #68]	; (800d6cc <HAL_TIM_PWM_Start+0x1b0>)
 800d686:	4013      	ands	r3, r2
 800d688:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b06      	cmp	r3, #6
 800d68e:	d00b      	beq.n	800d6a8 <HAL_TIM_PWM_Start+0x18c>
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d696:	d007      	beq.n	800d6a8 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f042 0201 	orr.w	r2, r2, #1
 800d6a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3710      	adds	r7, #16
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	40012c00 	.word	0x40012c00
 800d6b8:	40013400 	.word	0x40013400
 800d6bc:	40014000 	.word	0x40014000
 800d6c0:	40014400 	.word	0x40014400
 800d6c4:	40014800 	.word	0x40014800
 800d6c8:	40015000 	.word	0x40015000
 800d6cc:	00010007 	.word	0x00010007

0800d6d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f001 f956 	bl	800e994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a40      	ldr	r2, [pc, #256]	; (800d7f0 <HAL_TIM_PWM_Stop+0x120>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d018      	beq.n	800d724 <HAL_TIM_PWM_Stop+0x54>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a3f      	ldr	r2, [pc, #252]	; (800d7f4 <HAL_TIM_PWM_Stop+0x124>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d013      	beq.n	800d724 <HAL_TIM_PWM_Stop+0x54>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a3d      	ldr	r2, [pc, #244]	; (800d7f8 <HAL_TIM_PWM_Stop+0x128>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d00e      	beq.n	800d724 <HAL_TIM_PWM_Stop+0x54>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a3c      	ldr	r2, [pc, #240]	; (800d7fc <HAL_TIM_PWM_Stop+0x12c>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d009      	beq.n	800d724 <HAL_TIM_PWM_Stop+0x54>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a3a      	ldr	r2, [pc, #232]	; (800d800 <HAL_TIM_PWM_Stop+0x130>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d004      	beq.n	800d724 <HAL_TIM_PWM_Stop+0x54>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a39      	ldr	r2, [pc, #228]	; (800d804 <HAL_TIM_PWM_Stop+0x134>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d101      	bne.n	800d728 <HAL_TIM_PWM_Stop+0x58>
 800d724:	2301      	movs	r3, #1
 800d726:	e000      	b.n	800d72a <HAL_TIM_PWM_Stop+0x5a>
 800d728:	2300      	movs	r3, #0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d017      	beq.n	800d75e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6a1a      	ldr	r2, [r3, #32]
 800d734:	f241 1311 	movw	r3, #4369	; 0x1111
 800d738:	4013      	ands	r3, r2
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10f      	bne.n	800d75e <HAL_TIM_PWM_Stop+0x8e>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6a1a      	ldr	r2, [r3, #32]
 800d744:	f244 4344 	movw	r3, #17476	; 0x4444
 800d748:	4013      	ands	r3, r2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d107      	bne.n	800d75e <HAL_TIM_PWM_Stop+0x8e>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d75c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	6a1a      	ldr	r2, [r3, #32]
 800d764:	f241 1311 	movw	r3, #4369	; 0x1111
 800d768:	4013      	ands	r3, r2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10f      	bne.n	800d78e <HAL_TIM_PWM_Stop+0xbe>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6a1a      	ldr	r2, [r3, #32]
 800d774:	f244 4344 	movw	r3, #17476	; 0x4444
 800d778:	4013      	ands	r3, r2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d107      	bne.n	800d78e <HAL_TIM_PWM_Stop+0xbe>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f022 0201 	bic.w	r2, r2, #1
 800d78c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d104      	bne.n	800d79e <HAL_TIM_PWM_Stop+0xce>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d79c:	e023      	b.n	800d7e6 <HAL_TIM_PWM_Stop+0x116>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b04      	cmp	r3, #4
 800d7a2:	d104      	bne.n	800d7ae <HAL_TIM_PWM_Stop+0xde>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7ac:	e01b      	b.n	800d7e6 <HAL_TIM_PWM_Stop+0x116>
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	2b08      	cmp	r3, #8
 800d7b2:	d104      	bne.n	800d7be <HAL_TIM_PWM_Stop+0xee>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7bc:	e013      	b.n	800d7e6 <HAL_TIM_PWM_Stop+0x116>
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b0c      	cmp	r3, #12
 800d7c2:	d104      	bne.n	800d7ce <HAL_TIM_PWM_Stop+0xfe>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d7cc:	e00b      	b.n	800d7e6 <HAL_TIM_PWM_Stop+0x116>
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b10      	cmp	r3, #16
 800d7d2:	d104      	bne.n	800d7de <HAL_TIM_PWM_Stop+0x10e>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d7dc:	e003      	b.n	800d7e6 <HAL_TIM_PWM_Stop+0x116>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	40012c00 	.word	0x40012c00
 800d7f4:	40013400 	.word	0x40013400
 800d7f8:	40014000 	.word	0x40014000
 800d7fc:	40014400 	.word	0x40014400
 800d800:	40014800 	.word	0x40014800
 800d804:	40015000 	.word	0x40015000

0800d808 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	e097      	b.n	800d94c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d822:	b2db      	uxtb	r3, r3
 800d824:	2b00      	cmp	r3, #0
 800d826:	d106      	bne.n	800d836 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f7fb f813 	bl	800885c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2202      	movs	r2, #2
 800d83a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	689b      	ldr	r3, [r3, #8]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	6812      	ldr	r2, [r2, #0]
 800d848:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d84c:	f023 0307 	bic.w	r3, r3, #7
 800d850:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	3304      	adds	r3, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f000 fc2b 	bl	800e0b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6a1b      	ldr	r3, [r3, #32]
 800d878:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	4313      	orrs	r3, r2
 800d882:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d88a:	f023 0303 	bic.w	r3, r3, #3
 800d88e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	689a      	ldr	r2, [r3, #8]
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	021b      	lsls	r3, r3, #8
 800d89a:	4313      	orrs	r3, r2
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d8a8:	f023 030c 	bic.w	r3, r3, #12
 800d8ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d8b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	68da      	ldr	r2, [r3, #12]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	69db      	ldr	r3, [r3, #28]
 800d8c2:	021b      	lsls	r3, r3, #8
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	693a      	ldr	r2, [r7, #16]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	011a      	lsls	r2, r3, #4
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	031b      	lsls	r3, r3, #12
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d8e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d8ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	011b      	lsls	r3, r3, #4
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2201      	movs	r2, #1
 800d926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2201      	movs	r2, #1
 800d946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3718      	adds	r7, #24
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	f003 0302 	and.w	r3, r3, #2
 800d966:	2b02      	cmp	r3, #2
 800d968:	d122      	bne.n	800d9b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	f003 0302 	and.w	r3, r3, #2
 800d974:	2b02      	cmp	r3, #2
 800d976:	d11b      	bne.n	800d9b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f06f 0202 	mvn.w	r2, #2
 800d980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	f003 0303 	and.w	r3, r3, #3
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fb70 	bl	800e07c <HAL_TIM_IC_CaptureCallback>
 800d99c:	e005      	b.n	800d9aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 fb62 	bl	800e068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fb73 	bl	800e090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	f003 0304 	and.w	r3, r3, #4
 800d9ba:	2b04      	cmp	r3, #4
 800d9bc:	d122      	bne.n	800da04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	f003 0304 	and.w	r3, r3, #4
 800d9c8:	2b04      	cmp	r3, #4
 800d9ca:	d11b      	bne.n	800da04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f06f 0204 	mvn.w	r2, #4
 800d9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2202      	movs	r2, #2
 800d9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d003      	beq.n	800d9f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fb46 	bl	800e07c <HAL_TIM_IC_CaptureCallback>
 800d9f0:	e005      	b.n	800d9fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fb38 	bl	800e068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fb49 	bl	800e090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	f003 0308 	and.w	r3, r3, #8
 800da0e:	2b08      	cmp	r3, #8
 800da10:	d122      	bne.n	800da58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f003 0308 	and.w	r3, r3, #8
 800da1c:	2b08      	cmp	r3, #8
 800da1e:	d11b      	bne.n	800da58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f06f 0208 	mvn.w	r2, #8
 800da28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2204      	movs	r2, #4
 800da2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	69db      	ldr	r3, [r3, #28]
 800da36:	f003 0303 	and.w	r3, r3, #3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fb1c 	bl	800e07c <HAL_TIM_IC_CaptureCallback>
 800da44:	e005      	b.n	800da52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 fb0e 	bl	800e068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fb1f 	bl	800e090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	f003 0310 	and.w	r3, r3, #16
 800da62:	2b10      	cmp	r3, #16
 800da64:	d122      	bne.n	800daac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	f003 0310 	and.w	r3, r3, #16
 800da70:	2b10      	cmp	r3, #16
 800da72:	d11b      	bne.n	800daac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f06f 0210 	mvn.w	r2, #16
 800da7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2208      	movs	r2, #8
 800da82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	69db      	ldr	r3, [r3, #28]
 800da8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 faf2 	bl	800e07c <HAL_TIM_IC_CaptureCallback>
 800da98:	e005      	b.n	800daa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fae4 	bl	800e068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 faf5 	bl	800e090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d10e      	bne.n	800dad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d107      	bne.n	800dad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f06f 0201 	mvn.w	r2, #1
 800dad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fabe 	bl	800e054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dae2:	2b80      	cmp	r3, #128	; 0x80
 800dae4:	d10e      	bne.n	800db04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daf0:	2b80      	cmp	r3, #128	; 0x80
 800daf2:	d107      	bne.n	800db04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f001 f8c0 	bl	800ec84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db12:	d10e      	bne.n	800db32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db1e:	2b80      	cmp	r3, #128	; 0x80
 800db20:	d107      	bne.n	800db32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800db2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f001 f8b3 	bl	800ec98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3c:	2b40      	cmp	r3, #64	; 0x40
 800db3e:	d10e      	bne.n	800db5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4a:	2b40      	cmp	r3, #64	; 0x40
 800db4c:	d107      	bne.n	800db5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 faa3 	bl	800e0a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	f003 0320 	and.w	r3, r3, #32
 800db68:	2b20      	cmp	r3, #32
 800db6a:	d10e      	bne.n	800db8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	f003 0320 	and.w	r3, r3, #32
 800db76:	2b20      	cmp	r3, #32
 800db78:	d107      	bne.n	800db8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f06f 0220 	mvn.w	r2, #32
 800db82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f001 f873 	bl	800ec70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db98:	d10f      	bne.n	800dbba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dba8:	d107      	bne.n	800dbba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dbb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 f879 	bl	800ecac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbc8:	d10f      	bne.n	800dbea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbd8:	d107      	bne.n	800dbea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dbe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 f86b 	bl	800ecc0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	691b      	ldr	r3, [r3, #16]
 800dbf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbf8:	d10f      	bne.n	800dc1a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc08:	d107      	bne.n	800dc1a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dc12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f001 f85d 	bl	800ecd4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	691b      	ldr	r3, [r3, #16]
 800dc20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc28:	d10f      	bne.n	800dc4a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc38:	d107      	bne.n	800dc4a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dc42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 f84f 	bl	800ece8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc4a:	bf00      	nop
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
	...

0800dc54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d101      	bne.n	800dc6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	e0fd      	b.n	800de6a <HAL_TIM_PWM_ConfigChannel+0x216>
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2201      	movs	r2, #1
 800dc72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2b14      	cmp	r3, #20
 800dc7a:	f200 80f0 	bhi.w	800de5e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800dc7e:	a201      	add	r2, pc, #4	; (adr r2, 800dc84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800dc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc84:	0800dcd9 	.word	0x0800dcd9
 800dc88:	0800de5f 	.word	0x0800de5f
 800dc8c:	0800de5f 	.word	0x0800de5f
 800dc90:	0800de5f 	.word	0x0800de5f
 800dc94:	0800dd19 	.word	0x0800dd19
 800dc98:	0800de5f 	.word	0x0800de5f
 800dc9c:	0800de5f 	.word	0x0800de5f
 800dca0:	0800de5f 	.word	0x0800de5f
 800dca4:	0800dd5b 	.word	0x0800dd5b
 800dca8:	0800de5f 	.word	0x0800de5f
 800dcac:	0800de5f 	.word	0x0800de5f
 800dcb0:	0800de5f 	.word	0x0800de5f
 800dcb4:	0800dd9b 	.word	0x0800dd9b
 800dcb8:	0800de5f 	.word	0x0800de5f
 800dcbc:	0800de5f 	.word	0x0800de5f
 800dcc0:	0800de5f 	.word	0x0800de5f
 800dcc4:	0800dddd 	.word	0x0800dddd
 800dcc8:	0800de5f 	.word	0x0800de5f
 800dccc:	0800de5f 	.word	0x0800de5f
 800dcd0:	0800de5f 	.word	0x0800de5f
 800dcd4:	0800de1d 	.word	0x0800de1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68b9      	ldr	r1, [r7, #8]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 fa92 	bl	800e208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	699a      	ldr	r2, [r3, #24]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f042 0208 	orr.w	r2, r2, #8
 800dcf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	699a      	ldr	r2, [r3, #24]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f022 0204 	bic.w	r2, r2, #4
 800dd02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6999      	ldr	r1, [r3, #24]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	691a      	ldr	r2, [r3, #16]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	430a      	orrs	r2, r1
 800dd14:	619a      	str	r2, [r3, #24]
      break;
 800dd16:	e0a3      	b.n	800de60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68b9      	ldr	r1, [r7, #8]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f000 fb0c 	bl	800e33c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	699a      	ldr	r2, [r3, #24]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	699a      	ldr	r2, [r3, #24]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6999      	ldr	r1, [r3, #24]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	691b      	ldr	r3, [r3, #16]
 800dd4e:	021a      	lsls	r2, r3, #8
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	430a      	orrs	r2, r1
 800dd56:	619a      	str	r2, [r3, #24]
      break;
 800dd58:	e082      	b.n	800de60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68b9      	ldr	r1, [r7, #8]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 fb7f 	bl	800e464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	69da      	ldr	r2, [r3, #28]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f042 0208 	orr.w	r2, r2, #8
 800dd74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	69da      	ldr	r2, [r3, #28]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f022 0204 	bic.w	r2, r2, #4
 800dd84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	69d9      	ldr	r1, [r3, #28]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	691a      	ldr	r2, [r3, #16]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	430a      	orrs	r2, r1
 800dd96:	61da      	str	r2, [r3, #28]
      break;
 800dd98:	e062      	b.n	800de60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	68b9      	ldr	r1, [r7, #8]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 fbf1 	bl	800e588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	69da      	ldr	r2, [r3, #28]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ddb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	69da      	ldr	r2, [r3, #28]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	69d9      	ldr	r1, [r3, #28]
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	021a      	lsls	r2, r3, #8
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	430a      	orrs	r2, r1
 800ddd8:	61da      	str	r2, [r3, #28]
      break;
 800ddda:	e041      	b.n	800de60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68b9      	ldr	r1, [r7, #8]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 fc64 	bl	800e6b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f042 0208 	orr.w	r2, r2, #8
 800ddf6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f022 0204 	bic.w	r2, r2, #4
 800de06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	691a      	ldr	r2, [r3, #16]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	430a      	orrs	r2, r1
 800de18:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800de1a:	e021      	b.n	800de60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68b9      	ldr	r1, [r7, #8]
 800de22:	4618      	mov	r0, r3
 800de24:	f000 fcae 	bl	800e784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	691b      	ldr	r3, [r3, #16]
 800de52:	021a      	lsls	r2, r3, #8
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	430a      	orrs	r2, r1
 800de5a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800de5c:	e000      	b.n	800de60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800de5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop

0800de74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de84:	2b01      	cmp	r3, #1
 800de86:	d101      	bne.n	800de8c <HAL_TIM_ConfigClockSource+0x18>
 800de88:	2302      	movs	r3, #2
 800de8a:	e0d2      	b.n	800e032 <HAL_TIM_ConfigClockSource+0x1be>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2202      	movs	r2, #2
 800de98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800deaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800deae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800deb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dec8:	f000 80a9 	beq.w	800e01e <HAL_TIM_ConfigClockSource+0x1aa>
 800decc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ded0:	d81a      	bhi.n	800df08 <HAL_TIM_ConfigClockSource+0x94>
 800ded2:	2b30      	cmp	r3, #48	; 0x30
 800ded4:	f000 809a 	beq.w	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800ded8:	2b30      	cmp	r3, #48	; 0x30
 800deda:	d809      	bhi.n	800def0 <HAL_TIM_ConfigClockSource+0x7c>
 800dedc:	2b10      	cmp	r3, #16
 800dede:	f000 8095 	beq.w	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800dee2:	2b20      	cmp	r3, #32
 800dee4:	f000 8092 	beq.w	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 808f 	beq.w	800e00c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800deee:	e097      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800def0:	2b50      	cmp	r3, #80	; 0x50
 800def2:	d05b      	beq.n	800dfac <HAL_TIM_ConfigClockSource+0x138>
 800def4:	2b50      	cmp	r3, #80	; 0x50
 800def6:	d802      	bhi.n	800defe <HAL_TIM_ConfigClockSource+0x8a>
 800def8:	2b40      	cmp	r3, #64	; 0x40
 800defa:	d077      	beq.n	800dfec <HAL_TIM_ConfigClockSource+0x178>
      break;
 800defc:	e090      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800defe:	2b60      	cmp	r3, #96	; 0x60
 800df00:	d064      	beq.n	800dfcc <HAL_TIM_ConfigClockSource+0x158>
 800df02:	2b70      	cmp	r3, #112	; 0x70
 800df04:	d028      	beq.n	800df58 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800df06:	e08b      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df08:	4a4c      	ldr	r2, [pc, #304]	; (800e03c <HAL_TIM_ConfigClockSource+0x1c8>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d07e      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800df0e:	4a4b      	ldr	r2, [pc, #300]	; (800e03c <HAL_TIM_ConfigClockSource+0x1c8>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d810      	bhi.n	800df36 <HAL_TIM_ConfigClockSource+0xc2>
 800df14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df18:	d078      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800df1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df1e:	d803      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0xb4>
 800df20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df24:	d02f      	beq.n	800df86 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800df26:	e07b      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800df2c:	d06e      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800df2e:	4a44      	ldr	r2, [pc, #272]	; (800e040 <HAL_TIM_ConfigClockSource+0x1cc>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d06b      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800df34:	e074      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df36:	4a43      	ldr	r2, [pc, #268]	; (800e044 <HAL_TIM_ConfigClockSource+0x1d0>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d067      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800df3c:	4a41      	ldr	r2, [pc, #260]	; (800e044 <HAL_TIM_ConfigClockSource+0x1d0>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d803      	bhi.n	800df4a <HAL_TIM_ConfigClockSource+0xd6>
 800df42:	4a41      	ldr	r2, [pc, #260]	; (800e048 <HAL_TIM_ConfigClockSource+0x1d4>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d061      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800df48:	e06a      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df4a:	4a40      	ldr	r2, [pc, #256]	; (800e04c <HAL_TIM_ConfigClockSource+0x1d8>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d05d      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
 800df50:	4a3f      	ldr	r2, [pc, #252]	; (800e050 <HAL_TIM_ConfigClockSource+0x1dc>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d05a      	beq.n	800e00c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800df56:	e063      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6818      	ldr	r0, [r3, #0]
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	6899      	ldr	r1, [r3, #8]
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f000 fcf4 	bl	800e954 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800df7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68fa      	ldr	r2, [r7, #12]
 800df82:	609a      	str	r2, [r3, #8]
      break;
 800df84:	e04c      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6818      	ldr	r0, [r3, #0]
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	6899      	ldr	r1, [r3, #8]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	f000 fcdd 	bl	800e954 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dfa8:	609a      	str	r2, [r3, #8]
      break;
 800dfaa:	e039      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	6859      	ldr	r1, [r3, #4]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	f000 fc4f 	bl	800e85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2150      	movs	r1, #80	; 0x50
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 fca8 	bl	800e91a <TIM_ITRx_SetConfig>
      break;
 800dfca:	e029      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	6859      	ldr	r1, [r3, #4]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	f000 fc6e 	bl	800e8ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2160      	movs	r1, #96	; 0x60
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f000 fc98 	bl	800e91a <TIM_ITRx_SetConfig>
      break;
 800dfea:	e019      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	6859      	ldr	r1, [r3, #4]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	461a      	mov	r2, r3
 800dffa:	f000 fc2f 	bl	800e85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2140      	movs	r1, #64	; 0x40
 800e004:	4618      	mov	r0, r3
 800e006:	f000 fc88 	bl	800e91a <TIM_ITRx_SetConfig>
      break;
 800e00a:	e009      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4619      	mov	r1, r3
 800e016:	4610      	mov	r0, r2
 800e018:	f000 fc7f 	bl	800e91a <TIM_ITRx_SetConfig>
      break;
 800e01c:	e000      	b.n	800e020 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800e01e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	00100030 	.word	0x00100030
 800e040:	00100020 	.word	0x00100020
 800e044:	00100050 	.word	0x00100050
 800e048:	00100040 	.word	0x00100040
 800e04c:	00100060 	.word	0x00100060
 800e050:	00100070 	.word	0x00100070

0800e054 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e05c:	bf00      	nop
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr

0800e068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e070:	bf00      	nop
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e084:	bf00      	nop
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4a46      	ldr	r2, [pc, #280]	; (800e1e4 <TIM_Base_SetConfig+0x12c>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d017      	beq.n	800e100 <TIM_Base_SetConfig+0x48>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0d6:	d013      	beq.n	800e100 <TIM_Base_SetConfig+0x48>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4a43      	ldr	r2, [pc, #268]	; (800e1e8 <TIM_Base_SetConfig+0x130>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d00f      	beq.n	800e100 <TIM_Base_SetConfig+0x48>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a42      	ldr	r2, [pc, #264]	; (800e1ec <TIM_Base_SetConfig+0x134>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d00b      	beq.n	800e100 <TIM_Base_SetConfig+0x48>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4a41      	ldr	r2, [pc, #260]	; (800e1f0 <TIM_Base_SetConfig+0x138>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d007      	beq.n	800e100 <TIM_Base_SetConfig+0x48>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4a40      	ldr	r2, [pc, #256]	; (800e1f4 <TIM_Base_SetConfig+0x13c>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d003      	beq.n	800e100 <TIM_Base_SetConfig+0x48>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	4a3f      	ldr	r2, [pc, #252]	; (800e1f8 <TIM_Base_SetConfig+0x140>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d108      	bne.n	800e112 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	4313      	orrs	r3, r2
 800e110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4a33      	ldr	r2, [pc, #204]	; (800e1e4 <TIM_Base_SetConfig+0x12c>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d023      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e120:	d01f      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a30      	ldr	r2, [pc, #192]	; (800e1e8 <TIM_Base_SetConfig+0x130>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d01b      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4a2f      	ldr	r2, [pc, #188]	; (800e1ec <TIM_Base_SetConfig+0x134>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d017      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4a2e      	ldr	r2, [pc, #184]	; (800e1f0 <TIM_Base_SetConfig+0x138>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d013      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4a2d      	ldr	r2, [pc, #180]	; (800e1f4 <TIM_Base_SetConfig+0x13c>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d00f      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4a2d      	ldr	r2, [pc, #180]	; (800e1fc <TIM_Base_SetConfig+0x144>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d00b      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4a2c      	ldr	r2, [pc, #176]	; (800e200 <TIM_Base_SetConfig+0x148>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d007      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4a2b      	ldr	r2, [pc, #172]	; (800e204 <TIM_Base_SetConfig+0x14c>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d003      	beq.n	800e162 <TIM_Base_SetConfig+0xaa>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4a26      	ldr	r2, [pc, #152]	; (800e1f8 <TIM_Base_SetConfig+0x140>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d108      	bne.n	800e174 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	4313      	orrs	r3, r2
 800e172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	4313      	orrs	r3, r2
 800e180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a12      	ldr	r2, [pc, #72]	; (800e1e4 <TIM_Base_SetConfig+0x12c>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d013      	beq.n	800e1c8 <TIM_Base_SetConfig+0x110>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a14      	ldr	r2, [pc, #80]	; (800e1f4 <TIM_Base_SetConfig+0x13c>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d00f      	beq.n	800e1c8 <TIM_Base_SetConfig+0x110>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a14      	ldr	r2, [pc, #80]	; (800e1fc <TIM_Base_SetConfig+0x144>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d00b      	beq.n	800e1c8 <TIM_Base_SetConfig+0x110>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4a13      	ldr	r2, [pc, #76]	; (800e200 <TIM_Base_SetConfig+0x148>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d007      	beq.n	800e1c8 <TIM_Base_SetConfig+0x110>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	4a12      	ldr	r2, [pc, #72]	; (800e204 <TIM_Base_SetConfig+0x14c>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d003      	beq.n	800e1c8 <TIM_Base_SetConfig+0x110>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4a0d      	ldr	r2, [pc, #52]	; (800e1f8 <TIM_Base_SetConfig+0x140>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d103      	bne.n	800e1d0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	691a      	ldr	r2, [r3, #16]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	615a      	str	r2, [r3, #20]
}
 800e1d6:	bf00      	nop
 800e1d8:	3714      	adds	r7, #20
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
 800e1e2:	bf00      	nop
 800e1e4:	40012c00 	.word	0x40012c00
 800e1e8:	40000400 	.word	0x40000400
 800e1ec:	40000800 	.word	0x40000800
 800e1f0:	40000c00 	.word	0x40000c00
 800e1f4:	40013400 	.word	0x40013400
 800e1f8:	40015000 	.word	0x40015000
 800e1fc:	40014000 	.word	0x40014000
 800e200:	40014400 	.word	0x40014400
 800e204:	40014800 	.word	0x40014800

0800e208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e208:	b480      	push	{r7}
 800e20a:	b087      	sub	sp, #28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a1b      	ldr	r3, [r3, #32]
 800e216:	f023 0201 	bic.w	r2, r3, #1
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f023 0303 	bic.w	r3, r3, #3
 800e242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	f023 0302 	bic.w	r3, r3, #2
 800e254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a30      	ldr	r2, [pc, #192]	; (800e324 <TIM_OC1_SetConfig+0x11c>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d013      	beq.n	800e290 <TIM_OC1_SetConfig+0x88>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4a2f      	ldr	r2, [pc, #188]	; (800e328 <TIM_OC1_SetConfig+0x120>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d00f      	beq.n	800e290 <TIM_OC1_SetConfig+0x88>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4a2e      	ldr	r2, [pc, #184]	; (800e32c <TIM_OC1_SetConfig+0x124>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d00b      	beq.n	800e290 <TIM_OC1_SetConfig+0x88>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a2d      	ldr	r2, [pc, #180]	; (800e330 <TIM_OC1_SetConfig+0x128>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d007      	beq.n	800e290 <TIM_OC1_SetConfig+0x88>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4a2c      	ldr	r2, [pc, #176]	; (800e334 <TIM_OC1_SetConfig+0x12c>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d003      	beq.n	800e290 <TIM_OC1_SetConfig+0x88>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a2b      	ldr	r2, [pc, #172]	; (800e338 <TIM_OC1_SetConfig+0x130>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10c      	bne.n	800e2aa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	f023 0308 	bic.w	r3, r3, #8
 800e296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	f023 0304 	bic.w	r3, r3, #4
 800e2a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4a1d      	ldr	r2, [pc, #116]	; (800e324 <TIM_OC1_SetConfig+0x11c>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d013      	beq.n	800e2da <TIM_OC1_SetConfig+0xd2>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4a1c      	ldr	r2, [pc, #112]	; (800e328 <TIM_OC1_SetConfig+0x120>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d00f      	beq.n	800e2da <TIM_OC1_SetConfig+0xd2>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4a1b      	ldr	r2, [pc, #108]	; (800e32c <TIM_OC1_SetConfig+0x124>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d00b      	beq.n	800e2da <TIM_OC1_SetConfig+0xd2>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4a1a      	ldr	r2, [pc, #104]	; (800e330 <TIM_OC1_SetConfig+0x128>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d007      	beq.n	800e2da <TIM_OC1_SetConfig+0xd2>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4a19      	ldr	r2, [pc, #100]	; (800e334 <TIM_OC1_SetConfig+0x12c>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d003      	beq.n	800e2da <TIM_OC1_SetConfig+0xd2>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4a18      	ldr	r2, [pc, #96]	; (800e338 <TIM_OC1_SetConfig+0x130>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d111      	bne.n	800e2fe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	693a      	ldr	r2, [r7, #16]
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	699b      	ldr	r3, [r3, #24]
 800e2f8:	693a      	ldr	r2, [r7, #16]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	685a      	ldr	r2, [r3, #4]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	697a      	ldr	r2, [r7, #20]
 800e316:	621a      	str	r2, [r3, #32]
}
 800e318:	bf00      	nop
 800e31a:	371c      	adds	r7, #28
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr
 800e324:	40012c00 	.word	0x40012c00
 800e328:	40013400 	.word	0x40013400
 800e32c:	40014000 	.word	0x40014000
 800e330:	40014400 	.word	0x40014400
 800e334:	40014800 	.word	0x40014800
 800e338:	40015000 	.word	0x40015000

0800e33c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b087      	sub	sp, #28
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a1b      	ldr	r3, [r3, #32]
 800e34a:	f023 0210 	bic.w	r2, r3, #16
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a1b      	ldr	r3, [r3, #32]
 800e356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	699b      	ldr	r3, [r3, #24]
 800e362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e36a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	021b      	lsls	r3, r3, #8
 800e37e:	68fa      	ldr	r2, [r7, #12]
 800e380:	4313      	orrs	r3, r2
 800e382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	f023 0320 	bic.w	r3, r3, #32
 800e38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	011b      	lsls	r3, r3, #4
 800e392:	697a      	ldr	r2, [r7, #20]
 800e394:	4313      	orrs	r3, r2
 800e396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a2c      	ldr	r2, [pc, #176]	; (800e44c <TIM_OC2_SetConfig+0x110>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d007      	beq.n	800e3b0 <TIM_OC2_SetConfig+0x74>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a2b      	ldr	r2, [pc, #172]	; (800e450 <TIM_OC2_SetConfig+0x114>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d003      	beq.n	800e3b0 <TIM_OC2_SetConfig+0x74>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	4a2a      	ldr	r2, [pc, #168]	; (800e454 <TIM_OC2_SetConfig+0x118>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d10d      	bne.n	800e3cc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	011b      	lsls	r3, r3, #4
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a1f      	ldr	r2, [pc, #124]	; (800e44c <TIM_OC2_SetConfig+0x110>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d013      	beq.n	800e3fc <TIM_OC2_SetConfig+0xc0>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	4a1e      	ldr	r2, [pc, #120]	; (800e450 <TIM_OC2_SetConfig+0x114>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d00f      	beq.n	800e3fc <TIM_OC2_SetConfig+0xc0>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a1e      	ldr	r2, [pc, #120]	; (800e458 <TIM_OC2_SetConfig+0x11c>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d00b      	beq.n	800e3fc <TIM_OC2_SetConfig+0xc0>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a1d      	ldr	r2, [pc, #116]	; (800e45c <TIM_OC2_SetConfig+0x120>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d007      	beq.n	800e3fc <TIM_OC2_SetConfig+0xc0>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	4a1c      	ldr	r2, [pc, #112]	; (800e460 <TIM_OC2_SetConfig+0x124>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d003      	beq.n	800e3fc <TIM_OC2_SetConfig+0xc0>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4a17      	ldr	r2, [pc, #92]	; (800e454 <TIM_OC2_SetConfig+0x118>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d113      	bne.n	800e424 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e40a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	695b      	ldr	r3, [r3, #20]
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	4313      	orrs	r3, r2
 800e416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	699b      	ldr	r3, [r3, #24]
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	693a      	ldr	r2, [r7, #16]
 800e420:	4313      	orrs	r3, r2
 800e422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	685a      	ldr	r2, [r3, #4]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	621a      	str	r2, [r3, #32]
}
 800e43e:	bf00      	nop
 800e440:	371c      	adds	r7, #28
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	40012c00 	.word	0x40012c00
 800e450:	40013400 	.word	0x40013400
 800e454:	40015000 	.word	0x40015000
 800e458:	40014000 	.word	0x40014000
 800e45c:	40014400 	.word	0x40014400
 800e460:	40014800 	.word	0x40014800

0800e464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e464:	b480      	push	{r7}
 800e466:	b087      	sub	sp, #28
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a1b      	ldr	r3, [r3, #32]
 800e472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	69db      	ldr	r3, [r3, #28]
 800e48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f023 0303 	bic.w	r3, r3, #3
 800e49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e4b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	021b      	lsls	r3, r3, #8
 800e4b8:	697a      	ldr	r2, [r7, #20]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4a2b      	ldr	r2, [pc, #172]	; (800e570 <TIM_OC3_SetConfig+0x10c>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d007      	beq.n	800e4d6 <TIM_OC3_SetConfig+0x72>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4a2a      	ldr	r2, [pc, #168]	; (800e574 <TIM_OC3_SetConfig+0x110>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d003      	beq.n	800e4d6 <TIM_OC3_SetConfig+0x72>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4a29      	ldr	r2, [pc, #164]	; (800e578 <TIM_OC3_SetConfig+0x114>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d10d      	bne.n	800e4f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	021b      	lsls	r3, r3, #8
 800e4e4:	697a      	ldr	r2, [r7, #20]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a1e      	ldr	r2, [pc, #120]	; (800e570 <TIM_OC3_SetConfig+0x10c>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d013      	beq.n	800e522 <TIM_OC3_SetConfig+0xbe>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a1d      	ldr	r2, [pc, #116]	; (800e574 <TIM_OC3_SetConfig+0x110>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d00f      	beq.n	800e522 <TIM_OC3_SetConfig+0xbe>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a1d      	ldr	r2, [pc, #116]	; (800e57c <TIM_OC3_SetConfig+0x118>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d00b      	beq.n	800e522 <TIM_OC3_SetConfig+0xbe>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a1c      	ldr	r2, [pc, #112]	; (800e580 <TIM_OC3_SetConfig+0x11c>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d007      	beq.n	800e522 <TIM_OC3_SetConfig+0xbe>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4a1b      	ldr	r2, [pc, #108]	; (800e584 <TIM_OC3_SetConfig+0x120>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d003      	beq.n	800e522 <TIM_OC3_SetConfig+0xbe>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4a16      	ldr	r2, [pc, #88]	; (800e578 <TIM_OC3_SetConfig+0x114>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d113      	bne.n	800e54a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	011b      	lsls	r3, r3, #4
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	011b      	lsls	r3, r3, #4
 800e544:	693a      	ldr	r2, [r7, #16]
 800e546:	4313      	orrs	r3, r2
 800e548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	693a      	ldr	r2, [r7, #16]
 800e54e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	621a      	str	r2, [r3, #32]
}
 800e564:	bf00      	nop
 800e566:	371c      	adds	r7, #28
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	40012c00 	.word	0x40012c00
 800e574:	40013400 	.word	0x40013400
 800e578:	40015000 	.word	0x40015000
 800e57c:	40014000 	.word	0x40014000
 800e580:	40014400 	.word	0x40014400
 800e584:	40014800 	.word	0x40014800

0800e588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e588:	b480      	push	{r7}
 800e58a:	b087      	sub	sp, #28
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a1b      	ldr	r3, [r3, #32]
 800e596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a1b      	ldr	r3, [r3, #32]
 800e5a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	69db      	ldr	r3, [r3, #28]
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	021b      	lsls	r3, r3, #8
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	031b      	lsls	r3, r3, #12
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a2c      	ldr	r2, [pc, #176]	; (800e698 <TIM_OC4_SetConfig+0x110>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d007      	beq.n	800e5fc <TIM_OC4_SetConfig+0x74>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4a2b      	ldr	r2, [pc, #172]	; (800e69c <TIM_OC4_SetConfig+0x114>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d003      	beq.n	800e5fc <TIM_OC4_SetConfig+0x74>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4a2a      	ldr	r2, [pc, #168]	; (800e6a0 <TIM_OC4_SetConfig+0x118>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d10d      	bne.n	800e618 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	031b      	lsls	r3, r3, #12
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4a1f      	ldr	r2, [pc, #124]	; (800e698 <TIM_OC4_SetConfig+0x110>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d013      	beq.n	800e648 <TIM_OC4_SetConfig+0xc0>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a1e      	ldr	r2, [pc, #120]	; (800e69c <TIM_OC4_SetConfig+0x114>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d00f      	beq.n	800e648 <TIM_OC4_SetConfig+0xc0>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4a1e      	ldr	r2, [pc, #120]	; (800e6a4 <TIM_OC4_SetConfig+0x11c>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d00b      	beq.n	800e648 <TIM_OC4_SetConfig+0xc0>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a1d      	ldr	r2, [pc, #116]	; (800e6a8 <TIM_OC4_SetConfig+0x120>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d007      	beq.n	800e648 <TIM_OC4_SetConfig+0xc0>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4a1c      	ldr	r2, [pc, #112]	; (800e6ac <TIM_OC4_SetConfig+0x124>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d003      	beq.n	800e648 <TIM_OC4_SetConfig+0xc0>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a17      	ldr	r2, [pc, #92]	; (800e6a0 <TIM_OC4_SetConfig+0x118>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d113      	bne.n	800e670 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e64e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e656:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	019b      	lsls	r3, r3, #6
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	4313      	orrs	r3, r2
 800e662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	699b      	ldr	r3, [r3, #24]
 800e668:	019b      	lsls	r3, r3, #6
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	685a      	ldr	r2, [r3, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	697a      	ldr	r2, [r7, #20]
 800e688:	621a      	str	r2, [r3, #32]
}
 800e68a:	bf00      	nop
 800e68c:	371c      	adds	r7, #28
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	40012c00 	.word	0x40012c00
 800e69c:	40013400 	.word	0x40013400
 800e6a0:	40015000 	.word	0x40015000
 800e6a4:	40014000 	.word	0x40014000
 800e6a8:	40014400 	.word	0x40014400
 800e6ac:	40014800 	.word	0x40014800

0800e6b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e6f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	041b      	lsls	r3, r3, #16
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	4313      	orrs	r3, r2
 800e700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	4a19      	ldr	r2, [pc, #100]	; (800e76c <TIM_OC5_SetConfig+0xbc>)
 800e706:	4293      	cmp	r3, r2
 800e708:	d013      	beq.n	800e732 <TIM_OC5_SetConfig+0x82>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4a18      	ldr	r2, [pc, #96]	; (800e770 <TIM_OC5_SetConfig+0xc0>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d00f      	beq.n	800e732 <TIM_OC5_SetConfig+0x82>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	4a17      	ldr	r2, [pc, #92]	; (800e774 <TIM_OC5_SetConfig+0xc4>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d00b      	beq.n	800e732 <TIM_OC5_SetConfig+0x82>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	4a16      	ldr	r2, [pc, #88]	; (800e778 <TIM_OC5_SetConfig+0xc8>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d007      	beq.n	800e732 <TIM_OC5_SetConfig+0x82>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4a15      	ldr	r2, [pc, #84]	; (800e77c <TIM_OC5_SetConfig+0xcc>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d003      	beq.n	800e732 <TIM_OC5_SetConfig+0x82>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4a14      	ldr	r2, [pc, #80]	; (800e780 <TIM_OC5_SetConfig+0xd0>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d109      	bne.n	800e746 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	695b      	ldr	r3, [r3, #20]
 800e73e:	021b      	lsls	r3, r3, #8
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	4313      	orrs	r3, r2
 800e744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	697a      	ldr	r2, [r7, #20]
 800e74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	693a      	ldr	r2, [r7, #16]
 800e75e:	621a      	str	r2, [r3, #32]
}
 800e760:	bf00      	nop
 800e762:	371c      	adds	r7, #28
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	40012c00 	.word	0x40012c00
 800e770:	40013400 	.word	0x40013400
 800e774:	40014000 	.word	0x40014000
 800e778:	40014400 	.word	0x40014400
 800e77c:	40014800 	.word	0x40014800
 800e780:	40015000 	.word	0x40015000

0800e784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e784:	b480      	push	{r7}
 800e786:	b087      	sub	sp, #28
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a1b      	ldr	r3, [r3, #32]
 800e79e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e7b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	021b      	lsls	r3, r3, #8
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	051b      	lsls	r3, r3, #20
 800e7d2:	693a      	ldr	r2, [r7, #16]
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a1a      	ldr	r2, [pc, #104]	; (800e844 <TIM_OC6_SetConfig+0xc0>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d013      	beq.n	800e808 <TIM_OC6_SetConfig+0x84>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a19      	ldr	r2, [pc, #100]	; (800e848 <TIM_OC6_SetConfig+0xc4>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d00f      	beq.n	800e808 <TIM_OC6_SetConfig+0x84>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a18      	ldr	r2, [pc, #96]	; (800e84c <TIM_OC6_SetConfig+0xc8>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d00b      	beq.n	800e808 <TIM_OC6_SetConfig+0x84>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a17      	ldr	r2, [pc, #92]	; (800e850 <TIM_OC6_SetConfig+0xcc>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d007      	beq.n	800e808 <TIM_OC6_SetConfig+0x84>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a16      	ldr	r2, [pc, #88]	; (800e854 <TIM_OC6_SetConfig+0xd0>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d003      	beq.n	800e808 <TIM_OC6_SetConfig+0x84>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a15      	ldr	r2, [pc, #84]	; (800e858 <TIM_OC6_SetConfig+0xd4>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d109      	bne.n	800e81c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e80e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	029b      	lsls	r3, r3, #10
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	4313      	orrs	r3, r2
 800e81a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	685a      	ldr	r2, [r3, #4]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	693a      	ldr	r2, [r7, #16]
 800e834:	621a      	str	r2, [r3, #32]
}
 800e836:	bf00      	nop
 800e838:	371c      	adds	r7, #28
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	40012c00 	.word	0x40012c00
 800e848:	40013400 	.word	0x40013400
 800e84c:	40014000 	.word	0x40014000
 800e850:	40014400 	.word	0x40014400
 800e854:	40014800 	.word	0x40014800
 800e858:	40015000 	.word	0x40015000

0800e85c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6a1b      	ldr	r3, [r3, #32]
 800e86c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	f023 0201 	bic.w	r2, r3, #1
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	011b      	lsls	r3, r3, #4
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	4313      	orrs	r3, r2
 800e890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	f023 030a 	bic.w	r3, r3, #10
 800e898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	621a      	str	r2, [r3, #32]
}
 800e8ae:	bf00      	nop
 800e8b0:	371c      	adds	r7, #28
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr

0800e8ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8ba:	b480      	push	{r7}
 800e8bc:	b087      	sub	sp, #28
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	60f8      	str	r0, [r7, #12]
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	f023 0210 	bic.w	r2, r3, #16
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	699b      	ldr	r3, [r3, #24]
 800e8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6a1b      	ldr	r3, [r3, #32]
 800e8dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e8e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	031b      	lsls	r3, r3, #12
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e8f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	011b      	lsls	r3, r3, #4
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	621a      	str	r2, [r3, #32]
}
 800e90e:	bf00      	nop
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e91a:	b480      	push	{r7}
 800e91c:	b085      	sub	sp, #20
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	4313      	orrs	r3, r2
 800e93c:	f043 0307 	orr.w	r3, r3, #7
 800e940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	609a      	str	r2, [r3, #8]
}
 800e948:	bf00      	nop
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e954:	b480      	push	{r7}
 800e956:	b087      	sub	sp, #28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	607a      	str	r2, [r7, #4]
 800e960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	689b      	ldr	r3, [r3, #8]
 800e966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e96e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	021a      	lsls	r2, r3, #8
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	431a      	orrs	r2, r3
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	697a      	ldr	r2, [r7, #20]
 800e97e:	4313      	orrs	r3, r2
 800e980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	697a      	ldr	r2, [r7, #20]
 800e986:	609a      	str	r2, [r3, #8]
}
 800e988:	bf00      	nop
 800e98a:	371c      	adds	r7, #28
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e994:	b480      	push	{r7}
 800e996:	b087      	sub	sp, #28
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	f003 031f 	and.w	r3, r3, #31
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6a1a      	ldr	r2, [r3, #32]
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	43db      	mvns	r3, r3
 800e9b6:	401a      	ands	r2, r3
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6a1a      	ldr	r2, [r3, #32]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	f003 031f 	and.w	r3, r3, #31
 800e9c6:	6879      	ldr	r1, [r7, #4]
 800e9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e9cc:	431a      	orrs	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	621a      	str	r2, [r3, #32]
}
 800e9d2:	bf00      	nop
 800e9d4:	371c      	adds	r7, #28
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d101      	bne.n	800e9f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9f4:	2302      	movs	r3, #2
 800e9f6:	e074      	b.n	800eae2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2202      	movs	r2, #2
 800ea04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a34      	ldr	r2, [pc, #208]	; (800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d009      	beq.n	800ea36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a33      	ldr	r2, [pc, #204]	; (800eaf4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d004      	beq.n	800ea36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a31      	ldr	r2, [pc, #196]	; (800eaf8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d108      	bne.n	800ea48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ea3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	4313      	orrs	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ea4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a21      	ldr	r2, [pc, #132]	; (800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d022      	beq.n	800eab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea78:	d01d      	beq.n	800eab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4a1f      	ldr	r2, [pc, #124]	; (800eafc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d018      	beq.n	800eab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a1d      	ldr	r2, [pc, #116]	; (800eb00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d013      	beq.n	800eab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4a1c      	ldr	r2, [pc, #112]	; (800eb04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d00e      	beq.n	800eab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a15      	ldr	r2, [pc, #84]	; (800eaf4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d009      	beq.n	800eab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4a18      	ldr	r2, [pc, #96]	; (800eb08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d004      	beq.n	800eab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a11      	ldr	r2, [pc, #68]	; (800eaf8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d10c      	bne.n	800ead0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eabc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	68ba      	ldr	r2, [r7, #8]
 800eac4:	4313      	orrs	r3, r2
 800eac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3714      	adds	r7, #20
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	40012c00 	.word	0x40012c00
 800eaf4:	40013400 	.word	0x40013400
 800eaf8:	40015000 	.word	0x40015000
 800eafc:	40000400 	.word	0x40000400
 800eb00:	40000800 	.word	0x40000800
 800eb04:	40000c00 	.word	0x40000c00
 800eb08:	40014000 	.word	0x40014000

0800eb0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb16:	2300      	movs	r3, #0
 800eb18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d101      	bne.n	800eb28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb24:	2302      	movs	r3, #2
 800eb26:	e096      	b.n	800ec56 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4313      	orrs	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	4313      	orrs	r3, r2
 800eb74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	695b      	ldr	r3, [r3, #20]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	041b      	lsls	r3, r3, #16
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4a2f      	ldr	r2, [pc, #188]	; (800ec64 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d009      	beq.n	800ebc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a2d      	ldr	r2, [pc, #180]	; (800ec68 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d004      	beq.n	800ebc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a2c      	ldr	r2, [pc, #176]	; (800ec6c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d106      	bne.n	800ebce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	69db      	ldr	r3, [r3, #28]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a24      	ldr	r2, [pc, #144]	; (800ec64 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d009      	beq.n	800ebec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a22      	ldr	r2, [pc, #136]	; (800ec68 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d004      	beq.n	800ebec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4a21      	ldr	r2, [pc, #132]	; (800ec6c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d12b      	bne.n	800ec44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf6:	051b      	lsls	r3, r3, #20
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	6a1b      	ldr	r3, [r3, #32]
 800ec06:	4313      	orrs	r3, r2
 800ec08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec14:	4313      	orrs	r3, r2
 800ec16:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a11      	ldr	r2, [pc, #68]	; (800ec64 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d009      	beq.n	800ec36 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4a10      	ldr	r2, [pc, #64]	; (800ec68 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d004      	beq.n	800ec36 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a0e      	ldr	r2, [pc, #56]	; (800ec6c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d106      	bne.n	800ec44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec40:	4313      	orrs	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	40012c00 	.word	0x40012c00
 800ec68:	40013400 	.word	0x40013400
 800ec6c:	40015000 	.word	0x40015000

0800ec70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec78:	bf00      	nop
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec8c:	bf00      	nop
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <LL_EXTI_EnableIT_0_31>:
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ed04:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <LL_EXTI_EnableIT_0_31+0x20>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	4904      	ldr	r1, [pc, #16]	; (800ed1c <LL_EXTI_EnableIT_0_31+0x20>)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	600b      	str	r3, [r1, #0]
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr
 800ed1c:	40010400 	.word	0x40010400

0800ed20 <LL_EXTI_EnableIT_32_63>:
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ed28:	4b05      	ldr	r3, [pc, #20]	; (800ed40 <LL_EXTI_EnableIT_32_63+0x20>)
 800ed2a:	6a1a      	ldr	r2, [r3, #32]
 800ed2c:	4904      	ldr	r1, [pc, #16]	; (800ed40 <LL_EXTI_EnableIT_32_63+0x20>)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	620b      	str	r3, [r1, #32]
}
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr
 800ed40:	40010400 	.word	0x40010400

0800ed44 <LL_EXTI_DisableIT_0_31>:
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800ed4c:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <LL_EXTI_DisableIT_0_31+0x24>)
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	43db      	mvns	r3, r3
 800ed54:	4904      	ldr	r1, [pc, #16]	; (800ed68 <LL_EXTI_DisableIT_0_31+0x24>)
 800ed56:	4013      	ands	r3, r2
 800ed58:	600b      	str	r3, [r1, #0]
}
 800ed5a:	bf00      	nop
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	40010400 	.word	0x40010400

0800ed6c <LL_EXTI_DisableIT_32_63>:
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ed74:	4b06      	ldr	r3, [pc, #24]	; (800ed90 <LL_EXTI_DisableIT_32_63+0x24>)
 800ed76:	6a1a      	ldr	r2, [r3, #32]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	43db      	mvns	r3, r3
 800ed7c:	4904      	ldr	r1, [pc, #16]	; (800ed90 <LL_EXTI_DisableIT_32_63+0x24>)
 800ed7e:	4013      	ands	r3, r2
 800ed80:	620b      	str	r3, [r1, #32]
}
 800ed82:	bf00      	nop
 800ed84:	370c      	adds	r7, #12
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	40010400 	.word	0x40010400

0800ed94 <LL_EXTI_EnableEvent_0_31>:
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ed9c:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ed9e:	685a      	ldr	r2, [r3, #4]
 800eda0:	4904      	ldr	r1, [pc, #16]	; (800edb4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4313      	orrs	r3, r2
 800eda6:	604b      	str	r3, [r1, #4]
}
 800eda8:	bf00      	nop
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	40010400 	.word	0x40010400

0800edb8 <LL_EXTI_EnableEvent_32_63>:
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800edc0:	4b05      	ldr	r3, [pc, #20]	; (800edd8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800edc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edc4:	4904      	ldr	r1, [pc, #16]	; (800edd8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4313      	orrs	r3, r2
 800edca:	624b      	str	r3, [r1, #36]	; 0x24
}
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr
 800edd8:	40010400 	.word	0x40010400

0800eddc <LL_EXTI_DisableEvent_0_31>:
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ede4:	4b06      	ldr	r3, [pc, #24]	; (800ee00 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ede6:	685a      	ldr	r2, [r3, #4]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	43db      	mvns	r3, r3
 800edec:	4904      	ldr	r1, [pc, #16]	; (800ee00 <LL_EXTI_DisableEvent_0_31+0x24>)
 800edee:	4013      	ands	r3, r2
 800edf0:	604b      	str	r3, [r1, #4]
}
 800edf2:	bf00      	nop
 800edf4:	370c      	adds	r7, #12
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	40010400 	.word	0x40010400

0800ee04 <LL_EXTI_DisableEvent_32_63>:
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800ee0c:	4b06      	ldr	r3, [pc, #24]	; (800ee28 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ee0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	43db      	mvns	r3, r3
 800ee14:	4904      	ldr	r1, [pc, #16]	; (800ee28 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ee16:	4013      	ands	r3, r2
 800ee18:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ee1a:	bf00      	nop
 800ee1c:	370c      	adds	r7, #12
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	40010400 	.word	0x40010400

0800ee2c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800ee34:	4b05      	ldr	r3, [pc, #20]	; (800ee4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ee36:	689a      	ldr	r2, [r3, #8]
 800ee38:	4904      	ldr	r1, [pc, #16]	; (800ee4c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	608b      	str	r3, [r1, #8]
}
 800ee40:	bf00      	nop
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr
 800ee4c:	40010400 	.word	0x40010400

0800ee50 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ee58:	4b05      	ldr	r3, [pc, #20]	; (800ee70 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ee5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee5c:	4904      	ldr	r1, [pc, #16]	; (800ee70 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	40010400 	.word	0x40010400

0800ee74 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ee7c:	4b06      	ldr	r3, [pc, #24]	; (800ee98 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ee7e:	689a      	ldr	r2, [r3, #8]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	43db      	mvns	r3, r3
 800ee84:	4904      	ldr	r1, [pc, #16]	; (800ee98 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ee86:	4013      	ands	r3, r2
 800ee88:	608b      	str	r3, [r1, #8]
}
 800ee8a:	bf00      	nop
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	40010400 	.word	0x40010400

0800ee9c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800eea4:	4b06      	ldr	r3, [pc, #24]	; (800eec0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800eea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	43db      	mvns	r3, r3
 800eeac:	4904      	ldr	r1, [pc, #16]	; (800eec0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800eeae:	4013      	ands	r3, r2
 800eeb0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800eeb2:	bf00      	nop
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	40010400 	.word	0x40010400

0800eec4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800eecc:	4b05      	ldr	r3, [pc, #20]	; (800eee4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800eece:	68da      	ldr	r2, [r3, #12]
 800eed0:	4904      	ldr	r1, [pc, #16]	; (800eee4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4313      	orrs	r3, r2
 800eed6:	60cb      	str	r3, [r1, #12]
}
 800eed8:	bf00      	nop
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr
 800eee4:	40010400 	.word	0x40010400

0800eee8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800eef0:	4b05      	ldr	r3, [pc, #20]	; (800ef08 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800eef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef4:	4904      	ldr	r1, [pc, #16]	; (800ef08 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800eefc:	bf00      	nop
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	40010400 	.word	0x40010400

0800ef0c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ef14:	4b06      	ldr	r3, [pc, #24]	; (800ef30 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ef16:	68da      	ldr	r2, [r3, #12]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	43db      	mvns	r3, r3
 800ef1c:	4904      	ldr	r1, [pc, #16]	; (800ef30 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ef1e:	4013      	ands	r3, r2
 800ef20:	60cb      	str	r3, [r1, #12]
}
 800ef22:	bf00      	nop
 800ef24:	370c      	adds	r7, #12
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	40010400 	.word	0x40010400

0800ef34 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ef3c:	4b06      	ldr	r3, [pc, #24]	; (800ef58 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ef3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	43db      	mvns	r3, r3
 800ef44:	4904      	ldr	r1, [pc, #16]	; (800ef58 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ef46:	4013      	ands	r3, r2
 800ef48:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ef4a:	bf00      	nop
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr
 800ef56:	bf00      	nop
 800ef58:	40010400 	.word	0x40010400

0800ef5c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ef64:	2300      	movs	r3, #0
 800ef66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	7a1b      	ldrb	r3, [r3, #8]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 80c8 	beq.w	800f102 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d05d      	beq.n	800f036 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	7a5b      	ldrb	r3, [r3, #9]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d00e      	beq.n	800efa0 <LL_EXTI_Init+0x44>
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d017      	beq.n	800efb6 <LL_EXTI_Init+0x5a>
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d120      	bne.n	800efcc <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff ff24 	bl	800eddc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff feaf 	bl	800ecfc <LL_EXTI_EnableIT_0_31>
          break;
 800ef9e:	e018      	b.n	800efd2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff fecd 	bl	800ed44 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4618      	mov	r0, r3
 800efb0:	f7ff fef0 	bl	800ed94 <LL_EXTI_EnableEvent_0_31>
          break;
 800efb4:	e00d      	b.n	800efd2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff fe9e 	bl	800ecfc <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7ff fee5 	bl	800ed94 <LL_EXTI_EnableEvent_0_31>
          break;
 800efca:	e002      	b.n	800efd2 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800efcc:	2301      	movs	r3, #1
 800efce:	60fb      	str	r3, [r7, #12]
          break;
 800efd0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	7a9b      	ldrb	r3, [r3, #10]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d02d      	beq.n	800f036 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	7a9b      	ldrb	r3, [r3, #10]
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d00e      	beq.n	800f000 <LL_EXTI_Init+0xa4>
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	d017      	beq.n	800f016 <LL_EXTI_Init+0xba>
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d120      	bne.n	800f02c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ff8c 	bl	800ef0c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff ff17 	bl	800ee2c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800effe:	e01b      	b.n	800f038 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4618      	mov	r0, r3
 800f006:	f7ff ff35 	bl	800ee74 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff ff58 	bl	800eec4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800f014:	e010      	b.n	800f038 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff ff06 	bl	800ee2c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4618      	mov	r0, r3
 800f026:	f7ff ff4d 	bl	800eec4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800f02a:	e005      	b.n	800f038 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f043 0302 	orr.w	r3, r3, #2
 800f032:	60fb      	str	r3, [r7, #12]
            break;
 800f034:	e000      	b.n	800f038 <LL_EXTI_Init+0xdc>
        }
      }
 800f036:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d075      	beq.n	800f12c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	7a5b      	ldrb	r3, [r3, #9]
 800f044:	2b01      	cmp	r3, #1
 800f046:	d00e      	beq.n	800f066 <LL_EXTI_Init+0x10a>
 800f048:	2b02      	cmp	r3, #2
 800f04a:	d017      	beq.n	800f07c <LL_EXTI_Init+0x120>
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d120      	bne.n	800f092 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff fed5 	bl	800ee04 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff fe5e 	bl	800ed20 <LL_EXTI_EnableIT_32_63>
          break;
 800f064:	e01a      	b.n	800f09c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7ff fe7e 	bl	800ed6c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff fe9f 	bl	800edb8 <LL_EXTI_EnableEvent_32_63>
          break;
 800f07a:	e00f      	b.n	800f09c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff fe4d 	bl	800ed20 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7ff fe94 	bl	800edb8 <LL_EXTI_EnableEvent_32_63>
          break;
 800f090:	e004      	b.n	800f09c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f043 0304 	orr.w	r3, r3, #4
 800f098:	60fb      	str	r3, [r7, #12]
          break;
 800f09a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7a9b      	ldrb	r3, [r3, #10]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d043      	beq.n	800f12c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7a9b      	ldrb	r3, [r3, #10]
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d00e      	beq.n	800f0ca <LL_EXTI_Init+0x16e>
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	d017      	beq.n	800f0e0 <LL_EXTI_Init+0x184>
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d120      	bne.n	800f0f6 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7ff ff3b 	bl	800ef34 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff fec4 	bl	800ee50 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800f0c8:	e031      	b.n	800f12e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7ff fee4 	bl	800ee9c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff ff05 	bl	800eee8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800f0de:	e026      	b.n	800f12e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff feb3 	bl	800ee50 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7ff fefa 	bl	800eee8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800f0f4:	e01b      	b.n	800f12e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f043 0305 	orr.w	r3, r3, #5
 800f0fc:	60fb      	str	r3, [r7, #12]
            break;
 800f0fe:	bf00      	nop
 800f100:	e015      	b.n	800f12e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fe1c 	bl	800ed44 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff fe63 	bl	800eddc <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fe26 	bl	800ed6c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	4618      	mov	r0, r3
 800f126:	f7ff fe6d 	bl	800ee04 <LL_EXTI_DisableEvent_32_63>
 800f12a:	e000      	b.n	800f12e <LL_EXTI_Init+0x1d2>
      }
 800f12c:	bf00      	nop
  }

  return status;
 800f12e:	68fb      	ldr	r3, [r7, #12]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <LL_GPIO_SetPinMode>:
{
 800f138:	b480      	push	{r7}
 800f13a:	b089      	sub	sp, #36	; 0x24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	fa93 f3a3 	rbit	r3, r3
 800f152:	613b      	str	r3, [r7, #16]
  return result;
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	fab3 f383 	clz	r3, r3
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	005b      	lsls	r3, r3, #1
 800f15e:	2103      	movs	r1, #3
 800f160:	fa01 f303 	lsl.w	r3, r1, r3
 800f164:	43db      	mvns	r3, r3
 800f166:	401a      	ands	r2, r3
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	fa93 f3a3 	rbit	r3, r3
 800f172:	61bb      	str	r3, [r7, #24]
  return result;
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	fab3 f383 	clz	r3, r3
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	6879      	ldr	r1, [r7, #4]
 800f180:	fa01 f303 	lsl.w	r3, r1, r3
 800f184:	431a      	orrs	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	601a      	str	r2, [r3, #0]
}
 800f18a:	bf00      	nop
 800f18c:	3724      	adds	r7, #36	; 0x24
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr

0800f196 <LL_GPIO_SetPinOutputType>:
{
 800f196:	b480      	push	{r7}
 800f198:	b085      	sub	sp, #20
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	60b9      	str	r1, [r7, #8]
 800f1a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	685a      	ldr	r2, [r3, #4]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	43db      	mvns	r3, r3
 800f1aa:	401a      	ands	r2, r3
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	6879      	ldr	r1, [r7, #4]
 800f1b0:	fb01 f303 	mul.w	r3, r1, r3
 800f1b4:	431a      	orrs	r2, r3
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	605a      	str	r2, [r3, #4]
}
 800f1ba:	bf00      	nop
 800f1bc:	3714      	adds	r7, #20
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <LL_GPIO_SetPinSpeed>:
{
 800f1c6:	b480      	push	{r7}
 800f1c8:	b089      	sub	sp, #36	; 0x24
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	60f8      	str	r0, [r7, #12]
 800f1ce:	60b9      	str	r1, [r7, #8]
 800f1d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	689a      	ldr	r2, [r3, #8]
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	fa93 f3a3 	rbit	r3, r3
 800f1e0:	613b      	str	r3, [r7, #16]
  return result;
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	fab3 f383 	clz	r3, r3
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	2103      	movs	r1, #3
 800f1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f1f2:	43db      	mvns	r3, r3
 800f1f4:	401a      	ands	r2, r3
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	fa93 f3a3 	rbit	r3, r3
 800f200:	61bb      	str	r3, [r7, #24]
  return result;
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	fab3 f383 	clz	r3, r3
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	005b      	lsls	r3, r3, #1
 800f20c:	6879      	ldr	r1, [r7, #4]
 800f20e:	fa01 f303 	lsl.w	r3, r1, r3
 800f212:	431a      	orrs	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	609a      	str	r2, [r3, #8]
}
 800f218:	bf00      	nop
 800f21a:	3724      	adds	r7, #36	; 0x24
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <LL_GPIO_SetPinPull>:
{
 800f224:	b480      	push	{r7}
 800f226:	b089      	sub	sp, #36	; 0x24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	68da      	ldr	r2, [r3, #12]
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	fa93 f3a3 	rbit	r3, r3
 800f23e:	613b      	str	r3, [r7, #16]
  return result;
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	fab3 f383 	clz	r3, r3
 800f246:	b2db      	uxtb	r3, r3
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	2103      	movs	r1, #3
 800f24c:	fa01 f303 	lsl.w	r3, r1, r3
 800f250:	43db      	mvns	r3, r3
 800f252:	401a      	ands	r2, r3
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	fa93 f3a3 	rbit	r3, r3
 800f25e:	61bb      	str	r3, [r7, #24]
  return result;
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	fab3 f383 	clz	r3, r3
 800f266:	b2db      	uxtb	r3, r3
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	fa01 f303 	lsl.w	r3, r1, r3
 800f270:	431a      	orrs	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	60da      	str	r2, [r3, #12]
}
 800f276:	bf00      	nop
 800f278:	3724      	adds	r7, #36	; 0x24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr

0800f282 <LL_GPIO_SetAFPin_0_7>:
{
 800f282:	b480      	push	{r7}
 800f284:	b089      	sub	sp, #36	; 0x24
 800f286:	af00      	add	r7, sp, #0
 800f288:	60f8      	str	r0, [r7, #12]
 800f28a:	60b9      	str	r1, [r7, #8]
 800f28c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	6a1a      	ldr	r2, [r3, #32]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	fa93 f3a3 	rbit	r3, r3
 800f29c:	613b      	str	r3, [r7, #16]
  return result;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	fab3 f383 	clz	r3, r3
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	210f      	movs	r1, #15
 800f2aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f2ae:	43db      	mvns	r3, r3
 800f2b0:	401a      	ands	r2, r3
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	fa93 f3a3 	rbit	r3, r3
 800f2bc:	61bb      	str	r3, [r7, #24]
  return result;
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	fab3 f383 	clz	r3, r3
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	6879      	ldr	r1, [r7, #4]
 800f2ca:	fa01 f303 	lsl.w	r3, r1, r3
 800f2ce:	431a      	orrs	r2, r3
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	621a      	str	r2, [r3, #32]
}
 800f2d4:	bf00      	nop
 800f2d6:	3724      	adds	r7, #36	; 0x24
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <LL_GPIO_SetAFPin_8_15>:
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b089      	sub	sp, #36	; 0x24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	0a1b      	lsrs	r3, r3, #8
 800f2f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	fa93 f3a3 	rbit	r3, r3
 800f2fc:	613b      	str	r3, [r7, #16]
  return result;
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	fab3 f383 	clz	r3, r3
 800f304:	b2db      	uxtb	r3, r3
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	210f      	movs	r1, #15
 800f30a:	fa01 f303 	lsl.w	r3, r1, r3
 800f30e:	43db      	mvns	r3, r3
 800f310:	401a      	ands	r2, r3
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	0a1b      	lsrs	r3, r3, #8
 800f316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	fa93 f3a3 	rbit	r3, r3
 800f31e:	61bb      	str	r3, [r7, #24]
  return result;
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	fab3 f383 	clz	r3, r3
 800f326:	b2db      	uxtb	r3, r3
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	fa01 f303 	lsl.w	r3, r1, r3
 800f330:	431a      	orrs	r2, r3
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f336:	bf00      	nop
 800f338:	3724      	adds	r7, #36	; 0x24
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b086      	sub	sp, #24
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	fa93 f3a3 	rbit	r3, r3
 800f358:	60bb      	str	r3, [r7, #8]
  return result;
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	fab3 f383 	clz	r3, r3
 800f360:	b2db      	uxtb	r3, r3
 800f362:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f364:	e040      	b.n	800f3e8 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	2101      	movs	r1, #1
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	fa01 f303 	lsl.w	r3, r1, r3
 800f372:	4013      	ands	r3, r2
 800f374:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d032      	beq.n	800f3e2 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	461a      	mov	r2, r3
 800f382:	6939      	ldr	r1, [r7, #16]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff fed7 	bl	800f138 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d003      	beq.n	800f39a <LL_GPIO_Init+0x58>
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	2b02      	cmp	r3, #2
 800f398:	d106      	bne.n	800f3a8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	6939      	ldr	r1, [r7, #16]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7ff ff0f 	bl	800f1c6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	6939      	ldr	r1, [r7, #16]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff ff37 	bl	800f224 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d111      	bne.n	800f3e2 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	2bff      	cmp	r3, #255	; 0xff
 800f3c2:	d807      	bhi.n	800f3d4 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	695b      	ldr	r3, [r3, #20]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	6939      	ldr	r1, [r7, #16]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff ff58 	bl	800f282 <LL_GPIO_SetAFPin_0_7>
 800f3d2:	e006      	b.n	800f3e2 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	695b      	ldr	r3, [r3, #20]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	6939      	ldr	r1, [r7, #16]
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff ff7f 	bl	800f2e0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1b7      	bne.n	800f366 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d003      	beq.n	800f406 <LL_GPIO_Init+0xc4>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	2b02      	cmp	r3, #2
 800f404:	d107      	bne.n	800f416 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	6819      	ldr	r1, [r3, #0]
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	461a      	mov	r2, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff fec0 	bl	800f196 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3718      	adds	r7, #24
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800f420:	b590      	push	{r4, r7, lr}
 800f422:	b085      	sub	sp, #20
 800f424:	af00      	add	r7, sp, #0
 800f426:	4604      	mov	r4, r0
 800f428:	4608      	mov	r0, r1
 800f42a:	4611      	mov	r1, r2
 800f42c:	461a      	mov	r2, r3
 800f42e:	4623      	mov	r3, r4
 800f430:	80fb      	strh	r3, [r7, #6]
 800f432:	4603      	mov	r3, r0
 800f434:	80bb      	strh	r3, [r7, #4]
 800f436:	460b      	mov	r3, r1
 800f438:	70fb      	strb	r3, [r7, #3]
 800f43a:	4613      	mov	r3, r2
 800f43c:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800f43e:	2300      	movs	r3, #0
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	e026      	b.n	800f492 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800f444:	2300      	movs	r3, #0
 800f446:	60bb      	str	r3, [r7, #8]
 800f448:	e01c      	b.n	800f484 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	88fb      	ldrh	r3, [r7, #6]
 800f450:	4413      	add	r3, r2
 800f452:	b298      	uxth	r0, r3
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f45a:	4413      	add	r3, r2
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f462:	fbb2 f3f3 	udiv	r3, r2, r3
 800f466:	b29a      	uxth	r2, r3
 800f468:	88bb      	ldrh	r3, [r7, #4]
 800f46a:	4413      	add	r3, r2
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	b29b      	uxth	r3, r3
 800f472:	4413      	add	r3, r2
 800f474:	b29b      	uxth	r3, r3
 800f476:	883a      	ldrh	r2, [r7, #0]
 800f478:	4619      	mov	r1, r3
 800f47a:	f000 fc1f 	bl	800fcbc <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	3301      	adds	r3, #1
 800f482:	60bb      	str	r3, [r7, #8]
 800f484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	429a      	cmp	r2, r3
 800f48a:	dbde      	blt.n	800f44a <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	3301      	adds	r3, #1
 800f490:	60fb      	str	r3, [r7, #12]
 800f492:	78fb      	ldrb	r3, [r7, #3]
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	429a      	cmp	r2, r3
 800f498:	dbd4      	blt.n	800f444 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800f49a:	bf00      	nop
 800f49c:	3714      	adds	r7, #20
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd90      	pop	{r4, r7, pc}

0800f4a2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800f4a2:	b590      	push	{r4, r7, lr}
 800f4a4:	b087      	sub	sp, #28
 800f4a6:	af02      	add	r7, sp, #8
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	4608      	mov	r0, r1
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	4623      	mov	r3, r4
 800f4b2:	80fb      	strh	r3, [r7, #6]
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	80bb      	strh	r3, [r7, #4]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	807b      	strh	r3, [r7, #2]
 800f4bc:	4613      	mov	r3, r2
 800f4be:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800f4c4:	7bfa      	ldrb	r2, [r7, #15]
 800f4c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d939      	bls.n	800f542 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800f4ce:	88ba      	ldrh	r2, [r7, #4]
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	441a      	add	r2, r3
 800f4d4:	88b9      	ldrh	r1, [r7, #4]
 800f4d6:	883b      	ldrh	r3, [r7, #0]
 800f4d8:	4419      	add	r1, r3
 800f4da:	7bfb      	ldrb	r3, [r7, #15]
 800f4dc:	1acb      	subs	r3, r1, r3
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	f000 8089 	beq.w	800f5f6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800f4e4:	88fa      	ldrh	r2, [r7, #6]
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	441a      	add	r2, r3
 800f4ea:	88f9      	ldrh	r1, [r7, #6]
 800f4ec:	887b      	ldrh	r3, [r7, #2]
 800f4ee:	4419      	add	r1, r3
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	1acb      	subs	r3, r1, r3
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d07e      	beq.n	800f5f6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	88fb      	ldrh	r3, [r7, #6]
 800f4fe:	4413      	add	r3, r2
 800f500:	b298      	uxth	r0, r3
 800f502:	7bfb      	ldrb	r3, [r7, #15]
 800f504:	b29a      	uxth	r2, r3
 800f506:	88bb      	ldrh	r3, [r7, #4]
 800f508:	4413      	add	r3, r2
 800f50a:	b299      	uxth	r1, r3
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
 800f50e:	b29b      	uxth	r3, r3
 800f510:	005b      	lsls	r3, r3, #1
 800f512:	b29b      	uxth	r3, r3
 800f514:	887a      	ldrh	r2, [r7, #2]
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	b29b      	uxth	r3, r3
 800f51a:	3301      	adds	r3, #1
 800f51c:	b29c      	uxth	r4, r3
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
 800f520:	b29b      	uxth	r3, r3
 800f522:	005b      	lsls	r3, r3, #1
 800f524:	b29b      	uxth	r3, r3
 800f526:	883a      	ldrh	r2, [r7, #0]
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	3301      	adds	r3, #1
 800f52e:	b29a      	uxth	r2, r3
 800f530:	2304      	movs	r3, #4
 800f532:	9301      	str	r3, [sp, #4]
 800f534:	8c3b      	ldrh	r3, [r7, #32]
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	4613      	mov	r3, r2
 800f53a:	4622      	mov	r2, r4
 800f53c:	f000 fd18 	bl	800ff70 <ILI9341_Draw_Rectangle>
				goto finish;
 800f540:	e05a      	b.n	800f5f8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f542:	7bfb      	ldrb	r3, [r7, #15]
 800f544:	b29a      	uxth	r2, r3
 800f546:	88fb      	ldrh	r3, [r7, #6]
 800f548:	4413      	add	r3, r2
 800f54a:	b298      	uxth	r0, r3
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
 800f54e:	b29a      	uxth	r2, r3
 800f550:	88bb      	ldrh	r3, [r7, #4]
 800f552:	4413      	add	r3, r2
 800f554:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800f556:	7bfb      	ldrb	r3, [r7, #15]
 800f558:	b29b      	uxth	r3, r3
 800f55a:	887a      	ldrh	r2, [r7, #2]
 800f55c:	1ad3      	subs	r3, r2, r3
 800f55e:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f560:	3301      	adds	r3, #1
 800f562:	b29a      	uxth	r2, r3
 800f564:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f566:	f000 fa6b 	bl	800fa40 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f56a:	7bfb      	ldrb	r3, [r7, #15]
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	88fb      	ldrh	r3, [r7, #6]
 800f570:	4413      	add	r3, r2
 800f572:	b298      	uxth	r0, r3
										(y + h) - b,
 800f574:	88ba      	ldrh	r2, [r7, #4]
 800f576:	883b      	ldrh	r3, [r7, #0]
 800f578:	4413      	add	r3, r2
 800f57a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	b299      	uxth	r1, r3
										(w - b)+1,
 800f584:	7bfb      	ldrb	r3, [r7, #15]
 800f586:	b29b      	uxth	r3, r3
 800f588:	887a      	ldrh	r2, [r7, #2]
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f58e:	3301      	adds	r3, #1
 800f590:	b29a      	uxth	r2, r3
 800f592:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f594:	f000 fa54 	bl	800fa40 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800f598:	7bfb      	ldrb	r3, [r7, #15]
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	88fb      	ldrh	r3, [r7, #6]
 800f59e:	4413      	add	r3, r2
 800f5a0:	b298      	uxth	r0, r3
 800f5a2:	7bfb      	ldrb	r3, [r7, #15]
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	88bb      	ldrh	r3, [r7, #4]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	b299      	uxth	r1, r3
 800f5ac:	7bfb      	ldrb	r3, [r7, #15]
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	883a      	ldrh	r2, [r7, #0]
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	b29a      	uxth	r2, r3
 800f5ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f5bc:	f000 faa4 	bl	800fb08 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800f5c0:	88fa      	ldrh	r2, [r7, #6]
 800f5c2:	887b      	ldrh	r3, [r7, #2]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	b298      	uxth	r0, r3
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	88bb      	ldrh	r3, [r7, #4]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	b299      	uxth	r1, r3
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	005b      	lsls	r3, r3, #1
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	883a      	ldrh	r2, [r7, #0]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f5ea:	f000 fa8d 	bl	800fb08 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800f5ee:	7bfb      	ldrb	r3, [r7, #15]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800f5f4:	e766      	b.n	800f4c4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800f5f6:	bf00      	nop
	// done
	return;
 800f5f8:	bf00      	nop
}
 800f5fa:	3714      	adds	r7, #20
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd90      	pop	{r4, r7, pc}

0800f600 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f600:	b590      	push	{r4, r7, lr}
 800f602:	b089      	sub	sp, #36	; 0x24
 800f604:	af02      	add	r7, sp, #8
 800f606:	4604      	mov	r4, r0
 800f608:	4608      	mov	r0, r1
 800f60a:	4611      	mov	r1, r2
 800f60c:	461a      	mov	r2, r3
 800f60e:	4623      	mov	r3, r4
 800f610:	71fb      	strb	r3, [r7, #7]
 800f612:	4603      	mov	r3, r0
 800f614:	80bb      	strh	r3, [r7, #4]
 800f616:	460b      	mov	r3, r1
 800f618:	807b      	strh	r3, [r7, #2]
 800f61a:	4613      	mov	r3, r2
 800f61c:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	2b1f      	cmp	r3, #31
 800f626:	d802      	bhi.n	800f62e <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800f628:	2300      	movs	r3, #0
 800f62a:	71fb      	strb	r3, [r7, #7]
 800f62c:	e002      	b.n	800f634 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800f62e:	7dfb      	ldrb	r3, [r7, #23]
 800f630:	3b20      	subs	r3, #32
 800f632:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f634:	2300      	movs	r3, #0
 800f636:	753b      	strb	r3, [r7, #20]
 800f638:	e012      	b.n	800f660 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800f63a:	7dfa      	ldrb	r2, [r7, #23]
 800f63c:	7d38      	ldrb	r0, [r7, #20]
 800f63e:	7d39      	ldrb	r1, [r7, #20]
 800f640:	4c48      	ldr	r4, [pc, #288]	; (800f764 <ILI9341_Draw_Char+0x164>)
 800f642:	4613      	mov	r3, r2
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	4413      	add	r3, r2
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	4423      	add	r3, r4
 800f64c:	4403      	add	r3, r0
 800f64e:	781a      	ldrb	r2, [r3, #0]
 800f650:	f107 0318 	add.w	r3, r7, #24
 800f654:	440b      	add	r3, r1
 800f656:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f65a:	7d3b      	ldrb	r3, [r7, #20]
 800f65c:	3301      	adds	r3, #1
 800f65e:	753b      	strb	r3, [r7, #20]
 800f660:	7d3b      	ldrb	r3, [r7, #20]
 800f662:	2b05      	cmp	r3, #5
 800f664:	d9e9      	bls.n	800f63a <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800f666:	2300      	movs	r3, #0
 800f668:	757b      	strb	r3, [r7, #21]
 800f66a:	e074      	b.n	800f756 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800f66c:	2300      	movs	r3, #0
 800f66e:	75bb      	strb	r3, [r7, #22]
 800f670:	e06b      	b.n	800f74a <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800f672:	7d7b      	ldrb	r3, [r7, #21]
 800f674:	f107 0218 	add.w	r2, r7, #24
 800f678:	4413      	add	r3, r2
 800f67a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f67e:	461a      	mov	r2, r3
 800f680:	7dbb      	ldrb	r3, [r7, #22]
 800f682:	fa42 f303 	asr.w	r3, r2, r3
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d02d      	beq.n	800f6ea <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800f68e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f690:	2b01      	cmp	r3, #1
 800f692:	d10e      	bne.n	800f6b2 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800f694:	7d7b      	ldrb	r3, [r7, #21]
 800f696:	b29a      	uxth	r2, r3
 800f698:	88bb      	ldrh	r3, [r7, #4]
 800f69a:	4413      	add	r3, r2
 800f69c:	b298      	uxth	r0, r3
 800f69e:	7dbb      	ldrb	r3, [r7, #22]
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	887b      	ldrh	r3, [r7, #2]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	883a      	ldrh	r2, [r7, #0]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	f000 fb06 	bl	800fcbc <ILI9341_Draw_Pixel>
 800f6b0:	e048      	b.n	800f744 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800f6b2:	7d7b      	ldrb	r3, [r7, #21]
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f6b8:	fb12 f303 	smulbb	r3, r2, r3
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	88bb      	ldrh	r3, [r7, #4]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	b298      	uxth	r0, r3
 800f6c4:	7dbb      	ldrb	r3, [r7, #22]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f6ca:	fb12 f303 	smulbb	r3, r2, r3
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	887b      	ldrh	r3, [r7, #2]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	b299      	uxth	r1, r3
 800f6d6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f6d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f6da:	2301      	movs	r3, #1
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	883b      	ldrh	r3, [r7, #0]
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	4623      	mov	r3, r4
 800f6e4:	f000 fc44 	bl	800ff70 <ILI9341_Draw_Rectangle>
 800f6e8:	e02c      	b.n	800f744 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800f6ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d10e      	bne.n	800f70e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800f6f0:	7d7b      	ldrb	r3, [r7, #21]
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	88bb      	ldrh	r3, [r7, #4]
 800f6f6:	4413      	add	r3, r2
 800f6f8:	b298      	uxth	r0, r3
 800f6fa:	7dbb      	ldrb	r3, [r7, #22]
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	887b      	ldrh	r3, [r7, #2]
 800f700:	4413      	add	r3, r2
 800f702:	b29b      	uxth	r3, r3
 800f704:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f706:	4619      	mov	r1, r3
 800f708:	f000 fad8 	bl	800fcbc <ILI9341_Draw_Pixel>
 800f70c:	e01a      	b.n	800f744 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800f70e:	7d7b      	ldrb	r3, [r7, #21]
 800f710:	b29b      	uxth	r3, r3
 800f712:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f714:	fb12 f303 	smulbb	r3, r2, r3
 800f718:	b29a      	uxth	r2, r3
 800f71a:	88bb      	ldrh	r3, [r7, #4]
 800f71c:	4413      	add	r3, r2
 800f71e:	b298      	uxth	r0, r3
 800f720:	7dbb      	ldrb	r3, [r7, #22]
 800f722:	b29b      	uxth	r3, r3
 800f724:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f726:	fb12 f303 	smulbb	r3, r2, r3
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	887b      	ldrh	r3, [r7, #2]
 800f72e:	4413      	add	r3, r2
 800f730:	b299      	uxth	r1, r3
 800f732:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f734:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f736:	2301      	movs	r3, #1
 800f738:	9301      	str	r3, [sp, #4]
 800f73a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f73c:	9300      	str	r3, [sp, #0]
 800f73e:	4623      	mov	r3, r4
 800f740:	f000 fc16 	bl	800ff70 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800f744:	7dbb      	ldrb	r3, [r7, #22]
 800f746:	3301      	adds	r3, #1
 800f748:	75bb      	strb	r3, [r7, #22]
 800f74a:	7dbb      	ldrb	r3, [r7, #22]
 800f74c:	2b07      	cmp	r3, #7
 800f74e:	d990      	bls.n	800f672 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800f750:	7d7b      	ldrb	r3, [r7, #21]
 800f752:	3301      	adds	r3, #1
 800f754:	757b      	strb	r3, [r7, #21]
 800f756:	7d7b      	ldrb	r3, [r7, #21]
 800f758:	2b05      	cmp	r3, #5
 800f75a:	d987      	bls.n	800f66c <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800f75c:	bf00      	nop
 800f75e:	371c      	adds	r7, #28
 800f760:	46bd      	mov	sp, r7
 800f762:	bd90      	pop	{r4, r7, pc}
 800f764:	08015508 	.word	0x08015508

0800f768 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f768:	b590      	push	{r4, r7, lr}
 800f76a:	b087      	sub	sp, #28
 800f76c:	af02      	add	r7, sp, #8
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	4608      	mov	r0, r1
 800f772:	4611      	mov	r1, r2
 800f774:	461a      	mov	r2, r3
 800f776:	4603      	mov	r3, r0
 800f778:	817b      	strh	r3, [r7, #10]
 800f77a:	460b      	mov	r3, r1
 800f77c:	813b      	strh	r3, [r7, #8]
 800f77e:	4613      	mov	r3, r2
 800f780:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800f782:	897b      	ldrh	r3, [r7, #10]
 800f784:	3b01      	subs	r3, #1
 800f786:	b298      	uxth	r0, r3
 800f788:	8c3b      	ldrh	r3, [r7, #32]
 800f78a:	00db      	lsls	r3, r3, #3
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f790:	8939      	ldrh	r1, [r7, #8]
 800f792:	f000 f9b9 	bl	800fb08 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800f796:	897b      	ldrh	r3, [r7, #10]
 800f798:	3b02      	subs	r3, #2
 800f79a:	b298      	uxth	r0, r3
 800f79c:	8c3b      	ldrh	r3, [r7, #32]
 800f79e:	00db      	lsls	r3, r3, #3
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7a4:	8939      	ldrh	r1, [r7, #8]
 800f7a6:	f000 f9af 	bl	800fb08 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800f7aa:	e016      	b.n	800f7da <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	1c5a      	adds	r2, r3, #1
 800f7b0:	60fa      	str	r2, [r7, #12]
 800f7b2:	7818      	ldrb	r0, [r3, #0]
 800f7b4:	88fc      	ldrh	r4, [r7, #6]
 800f7b6:	893a      	ldrh	r2, [r7, #8]
 800f7b8:	8979      	ldrh	r1, [r7, #10]
 800f7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	8c3b      	ldrh	r3, [r7, #32]
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	4623      	mov	r3, r4
 800f7c4:	f7ff ff1c 	bl	800f600 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800f7c8:	8c3b      	ldrh	r3, [r7, #32]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	0052      	lsls	r2, r2, #1
 800f7ce:	4413      	add	r3, r2
 800f7d0:	005b      	lsls	r3, r3, #1
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	897b      	ldrh	r3, [r7, #10]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1e4      	bne.n	800f7ac <ILI9341_Draw_Text+0x44>
    }


}
 800f7e2:	bf00      	nop
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd90      	pop	{r4, r7, pc}

0800f7ea <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800f7ee:	f000 fca3 	bl	8010138 <_LCD_Enable>
	ILI9341_SPI_Init();
 800f7f2:	f000 f907 	bl	800fa04 <ILI9341_SPI_Init>
	_LCD_Reset();
 800f7f6:	f000 fcaf 	bl	8010158 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800f7fa:	2001      	movs	r0, #1
 800f7fc:	f000 fd7a 	bl	80102f4 <_LCD_SendCommand>
	HAL_Delay(2000);
 800f800:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f804:	f7f9 f9cc 	bl	8008ba0 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800f808:	20cb      	movs	r0, #203	; 0xcb
 800f80a:	f000 fd73 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800f80e:	2039      	movs	r0, #57	; 0x39
 800f810:	f000 fda2 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800f814:	202c      	movs	r0, #44	; 0x2c
 800f816:	f000 fd9f 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f81a:	2000      	movs	r0, #0
 800f81c:	f000 fd9c 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x34);
 800f820:	2034      	movs	r0, #52	; 0x34
 800f822:	f000 fd99 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x02);
 800f826:	2002      	movs	r0, #2
 800f828:	f000 fd96 	bl	8010358 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800f82c:	20cf      	movs	r0, #207	; 0xcf
 800f82e:	f000 fd61 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f832:	2000      	movs	r0, #0
 800f834:	f000 fd90 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f838:	20c1      	movs	r0, #193	; 0xc1
 800f83a:	f000 fd8d 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x30);
 800f83e:	2030      	movs	r0, #48	; 0x30
 800f840:	f000 fd8a 	bl	8010358 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800f844:	20e8      	movs	r0, #232	; 0xe8
 800f846:	f000 fd55 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800f84a:	2085      	movs	r0, #133	; 0x85
 800f84c:	f000 fd84 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f850:	2000      	movs	r0, #0
 800f852:	f000 fd81 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x78);
 800f856:	2078      	movs	r0, #120	; 0x78
 800f858:	f000 fd7e 	bl	8010358 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800f85c:	20ea      	movs	r0, #234	; 0xea
 800f85e:	f000 fd49 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f862:	2000      	movs	r0, #0
 800f864:	f000 fd78 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f868:	2000      	movs	r0, #0
 800f86a:	f000 fd75 	bl	8010358 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800f86e:	20ed      	movs	r0, #237	; 0xed
 800f870:	f000 fd40 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800f874:	2064      	movs	r0, #100	; 0x64
 800f876:	f000 fd6f 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f87a:	2003      	movs	r0, #3
 800f87c:	f000 fd6c 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x12);
 800f880:	2012      	movs	r0, #18
 800f882:	f000 fd69 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x81);
 800f886:	2081      	movs	r0, #129	; 0x81
 800f888:	f000 fd66 	bl	8010358 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800f88c:	20f7      	movs	r0, #247	; 0xf7
 800f88e:	f000 fd31 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800f892:	2020      	movs	r0, #32
 800f894:	f000 fd60 	bl	8010358 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800f898:	20c0      	movs	r0, #192	; 0xc0
 800f89a:	f000 fd2b 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800f89e:	2023      	movs	r0, #35	; 0x23
 800f8a0:	f000 fd5a 	bl	8010358 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800f8a4:	20c1      	movs	r0, #193	; 0xc1
 800f8a6:	f000 fd25 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800f8aa:	2010      	movs	r0, #16
 800f8ac:	f000 fd54 	bl	8010358 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800f8b0:	20c5      	movs	r0, #197	; 0xc5
 800f8b2:	f000 fd1f 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800f8b6:	203e      	movs	r0, #62	; 0x3e
 800f8b8:	f000 fd4e 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x28);
 800f8bc:	2028      	movs	r0, #40	; 0x28
 800f8be:	f000 fd4b 	bl	8010358 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800f8c2:	20c7      	movs	r0, #199	; 0xc7
 800f8c4:	f000 fd16 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800f8c8:	2086      	movs	r0, #134	; 0x86
 800f8ca:	f000 fd45 	bl	8010358 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800f8ce:	2036      	movs	r0, #54	; 0x36
 800f8d0:	f000 fd10 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800f8d4:	2048      	movs	r0, #72	; 0x48
 800f8d6:	f000 fd3f 	bl	8010358 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800f8da:	203a      	movs	r0, #58	; 0x3a
 800f8dc:	f000 fd0a 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800f8e0:	2055      	movs	r0, #85	; 0x55
 800f8e2:	f000 fd39 	bl	8010358 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800f8e6:	20b1      	movs	r0, #177	; 0xb1
 800f8e8:	f000 fd04 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	f000 fd33 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x18);
 800f8f2:	2018      	movs	r0, #24
 800f8f4:	f000 fd30 	bl	8010358 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800f8f8:	20b6      	movs	r0, #182	; 0xb6
 800f8fa:	f000 fcfb 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800f8fe:	2008      	movs	r0, #8
 800f900:	f000 fd2a 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x82);
 800f904:	2082      	movs	r0, #130	; 0x82
 800f906:	f000 fd27 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x27);
 800f90a:	2027      	movs	r0, #39	; 0x27
 800f90c:	f000 fd24 	bl	8010358 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800f910:	20f2      	movs	r0, #242	; 0xf2
 800f912:	f000 fcef 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f916:	2000      	movs	r0, #0
 800f918:	f000 fd1e 	bl	8010358 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800f91c:	2026      	movs	r0, #38	; 0x26
 800f91e:	f000 fce9 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800f922:	2001      	movs	r0, #1
 800f924:	f000 fd18 	bl	8010358 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800f928:	20e0      	movs	r0, #224	; 0xe0
 800f92a:	f000 fce3 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800f92e:	200f      	movs	r0, #15
 800f930:	f000 fd12 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f934:	2031      	movs	r0, #49	; 0x31
 800f936:	f000 fd0f 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800f93a:	202b      	movs	r0, #43	; 0x2b
 800f93c:	f000 fd0c 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f940:	200c      	movs	r0, #12
 800f942:	f000 fd09 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f946:	200e      	movs	r0, #14
 800f948:	f000 fd06 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x08);
 800f94c:	2008      	movs	r0, #8
 800f94e:	f000 fd03 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800f952:	204e      	movs	r0, #78	; 0x4e
 800f954:	f000 fd00 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800f958:	20f1      	movs	r0, #241	; 0xf1
 800f95a:	f000 fcfd 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x37);
 800f95e:	2037      	movs	r0, #55	; 0x37
 800f960:	f000 fcfa 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x07);
 800f964:	2007      	movs	r0, #7
 800f966:	f000 fcf7 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x10);
 800f96a:	2010      	movs	r0, #16
 800f96c:	f000 fcf4 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f970:	2003      	movs	r0, #3
 800f972:	f000 fcf1 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f976:	200e      	movs	r0, #14
 800f978:	f000 fcee 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x09);
 800f97c:	2009      	movs	r0, #9
 800f97e:	f000 fceb 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f982:	2000      	movs	r0, #0
 800f984:	f000 fce8 	bl	8010358 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800f988:	20e1      	movs	r0, #225	; 0xe1
 800f98a:	f000 fcb3 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f98e:	2000      	movs	r0, #0
 800f990:	f000 fce2 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f994:	200e      	movs	r0, #14
 800f996:	f000 fcdf 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x14);
 800f99a:	2014      	movs	r0, #20
 800f99c:	f000 fcdc 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f9a0:	2003      	movs	r0, #3
 800f9a2:	f000 fcd9 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x11);
 800f9a6:	2011      	movs	r0, #17
 800f9a8:	f000 fcd6 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x07);
 800f9ac:	2007      	movs	r0, #7
 800f9ae:	f000 fcd3 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f9b2:	2031      	movs	r0, #49	; 0x31
 800f9b4:	f000 fcd0 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f9b8:	20c1      	movs	r0, #193	; 0xc1
 800f9ba:	f000 fccd 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x48);
 800f9be:	2048      	movs	r0, #72	; 0x48
 800f9c0:	f000 fcca 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x08);
 800f9c4:	2008      	movs	r0, #8
 800f9c6:	f000 fcc7 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f9ca:	200f      	movs	r0, #15
 800f9cc:	f000 fcc4 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f9d0:	200c      	movs	r0, #12
 800f9d2:	f000 fcc1 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f9d6:	2031      	movs	r0, #49	; 0x31
 800f9d8:	f000 fcbe 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x36);
 800f9dc:	2036      	movs	r0, #54	; 0x36
 800f9de:	f000 fcbb 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f9e2:	200f      	movs	r0, #15
 800f9e4:	f000 fcb8 	bl	8010358 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800f9e8:	2011      	movs	r0, #17
 800f9ea:	f000 fc83 	bl	80102f4 <_LCD_SendCommand>
	HAL_Delay(240);
 800f9ee:	20f0      	movs	r0, #240	; 0xf0
 800f9f0:	f7f9 f8d6 	bl	8008ba0 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800f9f4:	2029      	movs	r0, #41	; 0x29
 800f9f6:	f000 fc7d 	bl	80102f4 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800f9fa:	2000      	movs	r0, #0
 800f9fc:	f000 fb4e 	bl	801009c <ILI9341_Set_Rotation>
}
 800fa00:	bf00      	nop
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800fa04:	b480      	push	{r7}
 800fa06:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fa08:	4b0b      	ldr	r3, [pc, #44]	; (800fa38 <ILI9341_SPI_Init+0x34>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa10:	2b40      	cmp	r3, #64	; 0x40
 800fa12:	d005      	beq.n	800fa20 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800fa14:	4b08      	ldr	r3, [pc, #32]	; (800fa38 <ILI9341_SPI_Init+0x34>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a07      	ldr	r2, [pc, #28]	; (800fa38 <ILI9341_SPI_Init+0x34>)
 800fa1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa1e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fa20:	4b06      	ldr	r3, [pc, #24]	; (800fa3c <ILI9341_SPI_Init+0x38>)
 800fa22:	695b      	ldr	r3, [r3, #20]
 800fa24:	4a05      	ldr	r2, [pc, #20]	; (800fa3c <ILI9341_SPI_Init+0x38>)
 800fa26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa2a:	6153      	str	r3, [r2, #20]
}
 800fa2c:	bf00      	nop
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	40003c00 	.word	0x40003c00
 800fa3c:	48000400 	.word	0x48000400

0800fa40 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800fa40:	b590      	push	{r4, r7, lr}
 800fa42:	b087      	sub	sp, #28
 800fa44:	af02      	add	r7, sp, #8
 800fa46:	4604      	mov	r4, r0
 800fa48:	4608      	mov	r0, r1
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4623      	mov	r3, r4
 800fa50:	80fb      	strh	r3, [r7, #6]
 800fa52:	4603      	mov	r3, r0
 800fa54:	80bb      	strh	r3, [r7, #4]
 800fa56:	460b      	mov	r3, r1
 800fa58:	807b      	strh	r3, [r7, #2]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fa5e:	4b28      	ldr	r3, [pc, #160]	; (800fb00 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	88fa      	ldrh	r2, [r7, #6]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d246      	bcs.n	800faf8 <ILI9341_Draw_Horizontal_Line+0xb8>
 800fa6a:	4b26      	ldr	r3, [pc, #152]	; (800fb04 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	88ba      	ldrh	r2, [r7, #4]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d240      	bcs.n	800faf8 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800fa76:	88fa      	ldrh	r2, [r7, #6]
 800fa78:	887b      	ldrh	r3, [r7, #2]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	4a20      	ldr	r2, [pc, #128]	; (800fb00 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fa80:	8812      	ldrh	r2, [r2, #0]
 800fa82:	b292      	uxth	r2, r2
 800fa84:	4293      	cmp	r3, r2
 800fa86:	db05      	blt.n	800fa94 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800fa88:	4b1d      	ldr	r3, [pc, #116]	; (800fb00 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fa8a:	881b      	ldrh	r3, [r3, #0]
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	88fb      	ldrh	r3, [r7, #6]
 800fa90:	1ad3      	subs	r3, r2, r3
 800fa92:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800fa94:	88fa      	ldrh	r2, [r7, #6]
 800fa96:	887b      	ldrh	r3, [r7, #2]
 800fa98:	4413      	add	r3, r2
 800fa9a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	88bb      	ldrh	r3, [r7, #4]
 800faa2:	88b9      	ldrh	r1, [r7, #4]
 800faa4:	88f8      	ldrh	r0, [r7, #6]
 800faa6:	f000 f893 	bl	800fbd0 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800faaa:	2300      	movs	r3, #0
 800faac:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800faae:	887b      	ldrh	r3, [r7, #2]
 800fab0:	f003 0301 	and.w	r3, r3, #1
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d009      	beq.n	800facc <ILI9341_Draw_Horizontal_Line+0x8c>
 800fab8:	887b      	ldrh	r3, [r7, #2]
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d906      	bls.n	800facc <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800fabe:	2301      	movs	r3, #1
 800fac0:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800fac2:	887b      	ldrh	r3, [r7, #2]
 800fac4:	085b      	lsrs	r3, r3, #1
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	005b      	lsls	r3, r3, #1
 800faca:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800facc:	887c      	ldrh	r4, [r7, #2]
 800face:	883a      	ldrh	r2, [r7, #0]
 800fad0:	88b9      	ldrh	r1, [r7, #4]
 800fad2:	88f8      	ldrh	r0, [r7, #6]
 800fad4:	2303      	movs	r3, #3
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	4623      	mov	r3, r4
 800fada:	f000 fb5b 	bl	8010194 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800fade:	7bfb      	ldrb	r3, [r7, #15]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00a      	beq.n	800fafa <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800fae4:	88fa      	ldrh	r2, [r7, #6]
 800fae6:	887b      	ldrh	r3, [r7, #2]
 800fae8:	4413      	add	r3, r2
 800faea:	b29b      	uxth	r3, r3
 800faec:	883a      	ldrh	r2, [r7, #0]
 800faee:	88b9      	ldrh	r1, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 f8e3 	bl	800fcbc <ILI9341_Draw_Pixel>
 800faf6:	e000      	b.n	800fafa <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800faf8:	bf00      	nop
							(ypos),
							colour);
	}


}
 800fafa:	3714      	adds	r7, #20
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd90      	pop	{r4, r7, pc}
 800fb00:	20000c42 	.word	0x20000c42
 800fb04:	20000c40 	.word	0x20000c40

0800fb08 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800fb08:	b590      	push	{r4, r7, lr}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af02      	add	r7, sp, #8
 800fb0e:	4604      	mov	r4, r0
 800fb10:	4608      	mov	r0, r1
 800fb12:	4611      	mov	r1, r2
 800fb14:	461a      	mov	r2, r3
 800fb16:	4623      	mov	r3, r4
 800fb18:	80fb      	strh	r3, [r7, #6]
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	80bb      	strh	r3, [r7, #4]
 800fb1e:	460b      	mov	r3, r1
 800fb20:	807b      	strh	r3, [r7, #2]
 800fb22:	4613      	mov	r3, r2
 800fb24:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fb26:	4b28      	ldr	r3, [pc, #160]	; (800fbc8 <ILI9341_Draw_Vertical_Line+0xc0>)
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	88fa      	ldrh	r2, [r7, #6]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d246      	bcs.n	800fbc0 <ILI9341_Draw_Vertical_Line+0xb8>
 800fb32:	4b26      	ldr	r3, [pc, #152]	; (800fbcc <ILI9341_Draw_Vertical_Line+0xc4>)
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	88ba      	ldrh	r2, [r7, #4]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d240      	bcs.n	800fbc0 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800fb3e:	88ba      	ldrh	r2, [r7, #4]
 800fb40:	887b      	ldrh	r3, [r7, #2]
 800fb42:	4413      	add	r3, r2
 800fb44:	3b01      	subs	r3, #1
 800fb46:	4a21      	ldr	r2, [pc, #132]	; (800fbcc <ILI9341_Draw_Vertical_Line+0xc4>)
 800fb48:	8812      	ldrh	r2, [r2, #0]
 800fb4a:	b292      	uxth	r2, r2
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	db05      	blt.n	800fb5c <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800fb50:	4b1e      	ldr	r3, [pc, #120]	; (800fbcc <ILI9341_Draw_Vertical_Line+0xc4>)
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	88bb      	ldrh	r3, [r7, #4]
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800fb5c:	88ba      	ldrh	r2, [r7, #4]
 800fb5e:	887b      	ldrh	r3, [r7, #2]
 800fb60:	4413      	add	r3, r2
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	3b01      	subs	r3, #1
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	88fa      	ldrh	r2, [r7, #6]
 800fb6a:	88b9      	ldrh	r1, [r7, #4]
 800fb6c:	88f8      	ldrh	r0, [r7, #6]
 800fb6e:	f000 f82f 	bl	800fbd0 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800fb72:	2300      	movs	r3, #0
 800fb74:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800fb76:	887b      	ldrh	r3, [r7, #2]
 800fb78:	f003 0301 	and.w	r3, r3, #1
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d009      	beq.n	800fb94 <ILI9341_Draw_Vertical_Line+0x8c>
 800fb80:	887b      	ldrh	r3, [r7, #2]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d906      	bls.n	800fb94 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800fb86:	2301      	movs	r3, #1
 800fb88:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800fb8a:	887b      	ldrh	r3, [r7, #2]
 800fb8c:	085b      	lsrs	r3, r3, #1
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800fb94:	7bfb      	ldrb	r3, [r7, #15]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d008      	beq.n	800fbac <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800fb9a:	88ba      	ldrh	r2, [r7, #4]
 800fb9c:	887b      	ldrh	r3, [r7, #2]
 800fb9e:	4413      	add	r3, r2
 800fba0:	b299      	uxth	r1, r3
 800fba2:	883a      	ldrh	r2, [r7, #0]
 800fba4:	88fb      	ldrh	r3, [r7, #6]
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 f888 	bl	800fcbc <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800fbac:	887c      	ldrh	r4, [r7, #2]
 800fbae:	883a      	ldrh	r2, [r7, #0]
 800fbb0:	88b9      	ldrh	r1, [r7, #4]
 800fbb2:	88f8      	ldrh	r0, [r7, #6]
 800fbb4:	2303      	movs	r3, #3
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	4623      	mov	r3, r4
 800fbba:	f000 faeb 	bl	8010194 <_LCD_Write_Frame>
 800fbbe:	e000      	b.n	800fbc2 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fbc0:	bf00      	nop
}
 800fbc2:	3714      	adds	r7, #20
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd90      	pop	{r4, r7, pc}
 800fbc8:	20000c42 	.word	0x20000c42
 800fbcc:	20000c40 	.word	0x20000c40

0800fbd0 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800fbd0:	b590      	push	{r4, r7, lr}
 800fbd2:	b083      	sub	sp, #12
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	4608      	mov	r0, r1
 800fbda:	4611      	mov	r1, r2
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4623      	mov	r3, r4
 800fbe0:	80fb      	strh	r3, [r7, #6]
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	80bb      	strh	r3, [r7, #4]
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	807b      	strh	r3, [r7, #2]
 800fbea:	4613      	mov	r3, r2
 800fbec:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800fbee:	202a      	movs	r0, #42	; 0x2a
 800fbf0:	f000 fb80 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800fbf4:	88fb      	ldrh	r3, [r7, #6]
 800fbf6:	0a1b      	lsrs	r3, r3, #8
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f000 fbab 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(sc);
 800fc02:	88fb      	ldrh	r3, [r7, #6]
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	4618      	mov	r0, r3
 800fc08:	f000 fba6 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800fc0c:	887b      	ldrh	r3, [r7, #2]
 800fc0e:	0a1b      	lsrs	r3, r3, #8
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	4618      	mov	r0, r3
 800fc16:	f000 fb9f 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(ec);
 800fc1a:	887b      	ldrh	r3, [r7, #2]
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f000 fb9a 	bl	8010358 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800fc24:	202b      	movs	r0, #43	; 0x2b
 800fc26:	f000 fb65 	bl	80102f4 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800fc2a:	88bb      	ldrh	r3, [r7, #4]
 800fc2c:	0a1b      	lsrs	r3, r3, #8
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 fb90 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(sp);
 800fc38:	88bb      	ldrh	r3, [r7, #4]
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f000 fb8b 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800fc42:	883b      	ldrh	r3, [r7, #0]
 800fc44:	0a1b      	lsrs	r3, r3, #8
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 fb84 	bl	8010358 <_LCD_SendData>
	_LCD_SendData(ep);
 800fc50:	883b      	ldrh	r3, [r7, #0]
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	4618      	mov	r0, r3
 800fc56:	f000 fb7f 	bl	8010358 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800fc5a:	202c      	movs	r0, #44	; 0x2c
 800fc5c:	f000 fb4a 	bl	80102f4 <_LCD_SendCommand>
}
 800fc60:	bf00      	nop
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd90      	pop	{r4, r7, pc}

0800fc68 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af02      	add	r7, sp, #8
 800fc6e:	4603      	mov	r3, r0
 800fc70:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800fc72:	4b10      	ldr	r3, [pc, #64]	; (800fcb4 <ILI9341_Fill_Screen+0x4c>)
 800fc74:	881b      	ldrh	r3, [r3, #0]
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	4b0f      	ldr	r3, [pc, #60]	; (800fcb8 <ILI9341_Fill_Screen+0x50>)
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	2100      	movs	r1, #0
 800fc80:	2000      	movs	r0, #0
 800fc82:	f7ff ffa5 	bl	800fbd0 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800fc86:	4b0b      	ldr	r3, [pc, #44]	; (800fcb4 <ILI9341_Fill_Screen+0x4c>)
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	4b0a      	ldr	r3, [pc, #40]	; (800fcb8 <ILI9341_Fill_Screen+0x50>)
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	fb03 f302 	mul.w	r3, r3, r2
 800fc98:	4619      	mov	r1, r3
 800fc9a:	88fa      	ldrh	r2, [r7, #6]
 800fc9c:	2304      	movs	r3, #4
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	460b      	mov	r3, r1
 800fca2:	2100      	movs	r1, #0
 800fca4:	2000      	movs	r0, #0
 800fca6:	f000 fa75 	bl	8010194 <_LCD_Write_Frame>
}
 800fcaa:	bf00      	nop
 800fcac:	3708      	adds	r7, #8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	20000c42 	.word	0x20000c42
 800fcb8:	20000c40 	.word	0x20000c40

0800fcbc <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b08e      	sub	sp, #56	; 0x38
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	80fb      	strh	r3, [r7, #6]
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	80bb      	strh	r3, [r7, #4]
 800fcca:	4613      	mov	r3, r2
 800fccc:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800fcce:	4b98      	ldr	r3, [pc, #608]	; (800ff30 <ILI9341_Draw_Pixel+0x274>)
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	88fa      	ldrh	r2, [r7, #6]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f080 8143 	bcs.w	800ff62 <ILI9341_Draw_Pixel+0x2a6>
 800fcdc:	4b95      	ldr	r3, [pc, #596]	; (800ff34 <ILI9341_Draw_Pixel+0x278>)
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	88ba      	ldrh	r2, [r7, #4]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	f080 813c 	bcs.w	800ff62 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fcea:	4b93      	ldr	r3, [pc, #588]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	4a92      	ldr	r2, [pc, #584]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fcf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcf4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fcf6:	4b90      	ldr	r3, [pc, #576]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	4a8f      	ldr	r2, [pc, #572]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fcfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd00:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800fd02:	220a      	movs	r2, #10
 800fd04:	2100      	movs	r1, #0
 800fd06:	202a      	movs	r0, #42	; 0x2a
 800fd08:	f000 fb58 	bl	80103bc <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd10:	e008      	b.n	800fd24 <ILI9341_Draw_Pixel+0x68>
 800fd12:	4b89      	ldr	r3, [pc, #548]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	4a88      	ldr	r2, [pc, #544]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd1c:	6153      	str	r3, [r2, #20]
 800fd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd20:	3301      	adds	r3, #1
 800fd22:	637b      	str	r3, [r7, #52]	; 0x34
 800fd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd26:	2b02      	cmp	r3, #2
 800fd28:	ddf3      	ble.n	800fd12 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fd2a:	4b83      	ldr	r3, [pc, #524]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd2c:	695b      	ldr	r3, [r3, #20]
 800fd2e:	4a82      	ldr	r2, [pc, #520]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd34:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fd36:	4b80      	ldr	r3, [pc, #512]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd38:	695b      	ldr	r3, [r3, #20]
 800fd3a:	4a7f      	ldr	r2, [pc, #508]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd40:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd42:	4b7d      	ldr	r3, [pc, #500]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd44:	695b      	ldr	r3, [r3, #20]
 800fd46:	4a7c      	ldr	r2, [pc, #496]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd4c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800fd4e:	88fb      	ldrh	r3, [r7, #6]
 800fd50:	0a1b      	lsrs	r3, r3, #8
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	753b      	strb	r3, [r7, #20]
 800fd58:	88fb      	ldrh	r3, [r7, #6]
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	757b      	strb	r3, [r7, #21]
 800fd5e:	88fb      	ldrh	r3, [r7, #6]
 800fd60:	3301      	adds	r3, #1
 800fd62:	121b      	asrs	r3, r3, #8
 800fd64:	b2db      	uxtb	r3, r3
 800fd66:	75bb      	strb	r3, [r7, #22]
 800fd68:	88fb      	ldrh	r3, [r7, #6]
 800fd6a:	b2db      	uxtb	r3, r3
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800fd72:	f107 0014 	add.w	r0, r7, #20
 800fd76:	230a      	movs	r3, #10
 800fd78:	2200      	movs	r2, #0
 800fd7a:	2104      	movs	r1, #4
 800fd7c:	f000 fb50 	bl	8010420 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd80:	2300      	movs	r3, #0
 800fd82:	633b      	str	r3, [r7, #48]	; 0x30
 800fd84:	e008      	b.n	800fd98 <ILI9341_Draw_Pixel+0xdc>
 800fd86:	4b6c      	ldr	r3, [pc, #432]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd88:	695b      	ldr	r3, [r3, #20]
 800fd8a:	4a6b      	ldr	r2, [pc, #428]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fd8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd90:	6153      	str	r3, [r2, #20]
 800fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd94:	3301      	adds	r3, #1
 800fd96:	633b      	str	r3, [r7, #48]	; 0x30
 800fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9a:	2b02      	cmp	r3, #2
 800fd9c:	ddf3      	ble.n	800fd86 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fd9e:	4b66      	ldr	r3, [pc, #408]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	4a65      	ldr	r2, [pc, #404]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fda4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fda8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fdaa:	4b63      	ldr	r3, [pc, #396]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdac:	695b      	ldr	r3, [r3, #20]
 800fdae:	4a62      	ldr	r2, [pc, #392]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdb4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fdb6:	4b60      	ldr	r3, [pc, #384]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdb8:	695b      	ldr	r3, [r3, #20]
 800fdba:	4a5f      	ldr	r2, [pc, #380]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdc0:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800fdc2:	220a      	movs	r2, #10
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	202b      	movs	r0, #43	; 0x2b
 800fdc8:	f000 faf8 	bl	80103bc <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fdcc:	2300      	movs	r3, #0
 800fdce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdd0:	e008      	b.n	800fde4 <ILI9341_Draw_Pixel+0x128>
 800fdd2:	4b59      	ldr	r3, [pc, #356]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdd4:	695b      	ldr	r3, [r3, #20]
 800fdd6:	4a58      	ldr	r2, [pc, #352]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fddc:	6153      	str	r3, [r2, #20]
 800fdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde0:	3301      	adds	r3, #1
 800fde2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde6:	2b02      	cmp	r3, #2
 800fde8:	ddf3      	ble.n	800fdd2 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fdea:	4b53      	ldr	r3, [pc, #332]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	4a52      	ldr	r2, [pc, #328]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdf4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fdf6:	4b50      	ldr	r3, [pc, #320]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdf8:	695b      	ldr	r3, [r3, #20]
 800fdfa:	4a4f      	ldr	r2, [pc, #316]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fdfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe00:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe02:	4b4d      	ldr	r3, [pc, #308]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe04:	695b      	ldr	r3, [r3, #20]
 800fe06:	4a4c      	ldr	r2, [pc, #304]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe0c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800fe0e:	88bb      	ldrh	r3, [r7, #4]
 800fe10:	0a1b      	lsrs	r3, r3, #8
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	743b      	strb	r3, [r7, #16]
 800fe18:	88bb      	ldrh	r3, [r7, #4]
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	747b      	strb	r3, [r7, #17]
 800fe1e:	88bb      	ldrh	r3, [r7, #4]
 800fe20:	3301      	adds	r3, #1
 800fe22:	121b      	asrs	r3, r3, #8
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	74bb      	strb	r3, [r7, #18]
 800fe28:	88bb      	ldrh	r3, [r7, #4]
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800fe32:	f107 0010 	add.w	r0, r7, #16
 800fe36:	230a      	movs	r3, #10
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2104      	movs	r1, #4
 800fe3c:	f000 faf0 	bl	8010420 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe40:	2300      	movs	r3, #0
 800fe42:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe44:	e008      	b.n	800fe58 <ILI9341_Draw_Pixel+0x19c>
 800fe46:	4b3c      	ldr	r3, [pc, #240]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	4a3b      	ldr	r2, [pc, #236]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe50:	6153      	str	r3, [r2, #20]
 800fe52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe54:	3301      	adds	r3, #1
 800fe56:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5a:	2b02      	cmp	r3, #2
 800fe5c:	ddf3      	ble.n	800fe46 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe5e:	4b36      	ldr	r3, [pc, #216]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe60:	695b      	ldr	r3, [r3, #20]
 800fe62:	4a35      	ldr	r2, [pc, #212]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe68:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fe6a:	4b33      	ldr	r3, [pc, #204]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe6c:	695b      	ldr	r3, [r3, #20]
 800fe6e:	4a32      	ldr	r2, [pc, #200]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe74:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe76:	4b30      	ldr	r3, [pc, #192]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe78:	695b      	ldr	r3, [r3, #20]
 800fe7a:	4a2f      	ldr	r2, [pc, #188]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe80:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800fe82:	220a      	movs	r2, #10
 800fe84:	2100      	movs	r1, #0
 800fe86:	202c      	movs	r0, #44	; 0x2c
 800fe88:	f000 fa98 	bl	80103bc <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	627b      	str	r3, [r7, #36]	; 0x24
 800fe90:	e008      	b.n	800fea4 <ILI9341_Draw_Pixel+0x1e8>
 800fe92:	4b29      	ldr	r3, [pc, #164]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe94:	695b      	ldr	r3, [r3, #20]
 800fe96:	4a28      	ldr	r2, [pc, #160]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fe98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe9c:	6153      	str	r3, [r2, #20]
 800fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea0:	3301      	adds	r3, #1
 800fea2:	627b      	str	r3, [r7, #36]	; 0x24
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea6:	2b02      	cmp	r3, #2
 800fea8:	ddf3      	ble.n	800fe92 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800feaa:	4b23      	ldr	r3, [pc, #140]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800feac:	695b      	ldr	r3, [r3, #20]
 800feae:	4a22      	ldr	r2, [pc, #136]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800feb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feb4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800feb6:	4b20      	ldr	r3, [pc, #128]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800feb8:	695b      	ldr	r3, [r3, #20]
 800feba:	4a1f      	ldr	r2, [pc, #124]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800febc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fec0:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fec2:	4b1d      	ldr	r3, [pc, #116]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fec4:	695b      	ldr	r3, [r3, #20]
 800fec6:	4a1c      	ldr	r2, [pc, #112]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fecc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800fece:	887b      	ldrh	r3, [r7, #2]
 800fed0:	0a1b      	lsrs	r3, r3, #8
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	733b      	strb	r3, [r7, #12]
 800fed8:	887b      	ldrh	r3, [r7, #2]
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800fede:	f107 000c 	add.w	r0, r7, #12
 800fee2:	2301      	movs	r3, #1
 800fee4:	2200      	movs	r2, #0
 800fee6:	2102      	movs	r1, #2
 800fee8:	f000 fa9a 	bl	8010420 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800feec:	2300      	movs	r3, #0
 800feee:	623b      	str	r3, [r7, #32]
 800fef0:	e008      	b.n	800ff04 <ILI9341_Draw_Pixel+0x248>
 800fef2:	4b11      	ldr	r3, [pc, #68]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fef4:	695b      	ldr	r3, [r3, #20]
 800fef6:	4a10      	ldr	r2, [pc, #64]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800fef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fefc:	6153      	str	r3, [r2, #20]
 800fefe:	6a3b      	ldr	r3, [r7, #32]
 800ff00:	3301      	adds	r3, #1
 800ff02:	623b      	str	r3, [r7, #32]
 800ff04:	6a3b      	ldr	r3, [r7, #32]
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	ddf3      	ble.n	800fef2 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	61fb      	str	r3, [r7, #28]
 800ff0e:	e008      	b.n	800ff22 <ILI9341_Draw_Pixel+0x266>
 800ff10:	4b09      	ldr	r3, [pc, #36]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800ff12:	695b      	ldr	r3, [r3, #20]
 800ff14:	4a08      	ldr	r2, [pc, #32]	; (800ff38 <ILI9341_Draw_Pixel+0x27c>)
 800ff16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff1a:	6153      	str	r3, [r2, #20]
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	61fb      	str	r3, [r7, #28]
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	ddf3      	ble.n	800ff10 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff28:	2300      	movs	r3, #0
 800ff2a:	61bb      	str	r3, [r7, #24]
 800ff2c:	e00f      	b.n	800ff4e <ILI9341_Draw_Pixel+0x292>
 800ff2e:	bf00      	nop
 800ff30:	20000c42 	.word	0x20000c42
 800ff34:	20000c40 	.word	0x20000c40
 800ff38:	48000400 	.word	0x48000400
 800ff3c:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <ILI9341_Draw_Pixel+0x2b0>)
 800ff3e:	695b      	ldr	r3, [r3, #20]
 800ff40:	4a0a      	ldr	r2, [pc, #40]	; (800ff6c <ILI9341_Draw_Pixel+0x2b0>)
 800ff42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff46:	6153      	str	r3, [r2, #20]
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	61bb      	str	r3, [r7, #24]
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	ddf3      	ble.n	800ff3c <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ff54:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <ILI9341_Draw_Pixel+0x2b0>)
 800ff56:	695b      	ldr	r3, [r3, #20]
 800ff58:	4a04      	ldr	r2, [pc, #16]	; (800ff6c <ILI9341_Draw_Pixel+0x2b0>)
 800ff5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff5e:	6153      	str	r3, [r2, #20]
 800ff60:	e000      	b.n	800ff64 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800ff62:	bf00      	nop


}
 800ff64:	3738      	adds	r7, #56	; 0x38
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	48000400 	.word	0x48000400

0800ff70 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800ff70:	b590      	push	{r4, r7, lr}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af02      	add	r7, sp, #8
 800ff76:	4604      	mov	r4, r0
 800ff78:	4608      	mov	r0, r1
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	4623      	mov	r3, r4
 800ff80:	80fb      	strh	r3, [r7, #6]
 800ff82:	4603      	mov	r3, r0
 800ff84:	80bb      	strh	r3, [r7, #4]
 800ff86:	460b      	mov	r3, r1
 800ff88:	807b      	strh	r3, [r7, #2]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ff8e:	4b41      	ldr	r3, [pc, #260]	; (8010094 <ILI9341_Draw_Rectangle+0x124>)
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	88fa      	ldrh	r2, [r7, #6]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d278      	bcs.n	801008c <ILI9341_Draw_Rectangle+0x11c>
 800ff9a:	4b3f      	ldr	r3, [pc, #252]	; (8010098 <ILI9341_Draw_Rectangle+0x128>)
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	88ba      	ldrh	r2, [r7, #4]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d272      	bcs.n	801008c <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800ffa6:	88fa      	ldrh	r2, [r7, #6]
 800ffa8:	887b      	ldrh	r3, [r7, #2]
 800ffaa:	4413      	add	r3, r2
 800ffac:	3b01      	subs	r3, #1
 800ffae:	4a39      	ldr	r2, [pc, #228]	; (8010094 <ILI9341_Draw_Rectangle+0x124>)
 800ffb0:	8812      	ldrh	r2, [r2, #0]
 800ffb2:	b292      	uxth	r2, r2
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	db05      	blt.n	800ffc4 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800ffb8:	4b36      	ldr	r3, [pc, #216]	; (8010094 <ILI9341_Draw_Rectangle+0x124>)
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	88fb      	ldrh	r3, [r7, #6]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800ffc4:	88ba      	ldrh	r2, [r7, #4]
 800ffc6:	883b      	ldrh	r3, [r7, #0]
 800ffc8:	4413      	add	r3, r2
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	4a32      	ldr	r2, [pc, #200]	; (8010098 <ILI9341_Draw_Rectangle+0x128>)
 800ffce:	8812      	ldrh	r2, [r2, #0]
 800ffd0:	b292      	uxth	r2, r2
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	db05      	blt.n	800ffe2 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ffd6:	4b30      	ldr	r3, [pc, #192]	; (8010098 <ILI9341_Draw_Rectangle+0x128>)
 800ffd8:	881b      	ldrh	r3, [r3, #0]
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	88bb      	ldrh	r3, [r7, #4]
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ffe2:	88fa      	ldrh	r2, [r7, #6]
 800ffe4:	887b      	ldrh	r3, [r7, #2]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ffea:	3b01      	subs	r3, #1
 800ffec:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ffee:	88ba      	ldrh	r2, [r7, #4]
 800fff0:	883b      	ldrh	r3, [r7, #0]
 800fff2:	4413      	add	r3, r2
 800fff4:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fff6:	3b01      	subs	r3, #1
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	88b9      	ldrh	r1, [r7, #4]
 800fffc:	88f8      	ldrh	r0, [r7, #6]
 800fffe:	4622      	mov	r2, r4
 8010000:	f7ff fde6 	bl	800fbd0 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8010004:	883a      	ldrh	r2, [r7, #0]
 8010006:	887b      	ldrh	r3, [r7, #2]
 8010008:	fb12 f303 	smulbb	r3, r2, r3
 801000c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8010012:	89fb      	ldrh	r3, [r7, #14]
 8010014:	f003 0301 	and.w	r3, r3, #1
 8010018:	2b00      	cmp	r3, #0
 801001a:	d009      	beq.n	8010030 <ILI9341_Draw_Rectangle+0xc0>
 801001c:	89fb      	ldrh	r3, [r7, #14]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d906      	bls.n	8010030 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8010022:	2301      	movs	r3, #1
 8010024:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8010026:	89fb      	ldrh	r3, [r7, #14]
 8010028:	085b      	lsrs	r3, r3, #1
 801002a:	b29b      	uxth	r3, r3
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 8010030:	89fc      	ldrh	r4, [r7, #14]
 8010032:	8c3a      	ldrh	r2, [r7, #32]
 8010034:	88b9      	ldrh	r1, [r7, #4]
 8010036:	88f8      	ldrh	r0, [r7, #6]
 8010038:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	4623      	mov	r3, r4
 8010040:	f000 f8a8 	bl	8010194 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8010044:	7b7b      	ldrb	r3, [r7, #13]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d021      	beq.n	801008e <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 801004a:	88fa      	ldrh	r2, [r7, #6]
 801004c:	887b      	ldrh	r3, [r7, #2]
 801004e:	4413      	add	r3, r2
 8010050:	b29b      	uxth	r3, r3
 8010052:	3b02      	subs	r3, #2
 8010054:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8010056:	88ba      	ldrh	r2, [r7, #4]
 8010058:	883b      	ldrh	r3, [r7, #0]
 801005a:	4413      	add	r3, r2
 801005c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 801005e:	3b01      	subs	r3, #1
 8010060:	b29b      	uxth	r3, r3
 8010062:	8c3a      	ldrh	r2, [r7, #32]
 8010064:	4619      	mov	r1, r3
 8010066:	f7ff fe29 	bl	800fcbc <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 801006a:	88fa      	ldrh	r2, [r7, #6]
 801006c:	887b      	ldrh	r3, [r7, #2]
 801006e:	4413      	add	r3, r2
 8010070:	b29b      	uxth	r3, r3
 8010072:	3b01      	subs	r3, #1
 8010074:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8010076:	88ba      	ldrh	r2, [r7, #4]
 8010078:	883b      	ldrh	r3, [r7, #0]
 801007a:	4413      	add	r3, r2
 801007c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 801007e:	3b01      	subs	r3, #1
 8010080:	b29b      	uxth	r3, r3
 8010082:	8c3a      	ldrh	r2, [r7, #32]
 8010084:	4619      	mov	r1, r3
 8010086:	f7ff fe19 	bl	800fcbc <ILI9341_Draw_Pixel>
 801008a:	e000      	b.n	801008e <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 801008c:	bf00      	nop
							colour);
	}
}
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	bd90      	pop	{r4, r7, pc}
 8010094:	20000c42 	.word	0x20000c42
 8010098:	20000c40 	.word	0x20000c40

0801009c <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 80100a6:	79fb      	ldrb	r3, [r7, #7]
 80100a8:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 80100aa:	2036      	movs	r0, #54	; 0x36
 80100ac:	f000 f922 	bl	80102f4 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 80100b0:	7bfb      	ldrb	r3, [r7, #15]
 80100b2:	2b03      	cmp	r3, #3
 80100b4:	d836      	bhi.n	8010124 <ILI9341_Set_Rotation+0x88>
 80100b6:	a201      	add	r2, pc, #4	; (adr r2, 80100bc <ILI9341_Set_Rotation+0x20>)
 80100b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100bc:	080100cd 	.word	0x080100cd
 80100c0:	080100e3 	.word	0x080100e3
 80100c4:	080100f9 	.word	0x080100f9
 80100c8:	0801010f 	.word	0x0801010f
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 80100cc:	2048      	movs	r0, #72	; 0x48
 80100ce:	f000 f943 	bl	8010358 <_LCD_SendData>
			LCD_WIDTH = 240;
 80100d2:	4b17      	ldr	r3, [pc, #92]	; (8010130 <ILI9341_Set_Rotation+0x94>)
 80100d4:	22f0      	movs	r2, #240	; 0xf0
 80100d6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80100d8:	4b16      	ldr	r3, [pc, #88]	; (8010134 <ILI9341_Set_Rotation+0x98>)
 80100da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80100de:	801a      	strh	r2, [r3, #0]
			break;
 80100e0:	e021      	b.n	8010126 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 80100e2:	2028      	movs	r0, #40	; 0x28
 80100e4:	f000 f938 	bl	8010358 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80100e8:	4b11      	ldr	r3, [pc, #68]	; (8010130 <ILI9341_Set_Rotation+0x94>)
 80100ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80100ee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80100f0:	4b10      	ldr	r3, [pc, #64]	; (8010134 <ILI9341_Set_Rotation+0x98>)
 80100f2:	22f0      	movs	r2, #240	; 0xf0
 80100f4:	801a      	strh	r2, [r3, #0]
			break;
 80100f6:	e016      	b.n	8010126 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 80100f8:	2088      	movs	r0, #136	; 0x88
 80100fa:	f000 f92d 	bl	8010358 <_LCD_SendData>
			LCD_WIDTH  = 240;
 80100fe:	4b0c      	ldr	r3, [pc, #48]	; (8010130 <ILI9341_Set_Rotation+0x94>)
 8010100:	22f0      	movs	r2, #240	; 0xf0
 8010102:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8010104:	4b0b      	ldr	r3, [pc, #44]	; (8010134 <ILI9341_Set_Rotation+0x98>)
 8010106:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801010a:	801a      	strh	r2, [r3, #0]
			break;
 801010c:	e00b      	b.n	8010126 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 801010e:	20e8      	movs	r0, #232	; 0xe8
 8010110:	f000 f922 	bl	8010358 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8010114:	4b06      	ldr	r3, [pc, #24]	; (8010130 <ILI9341_Set_Rotation+0x94>)
 8010116:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801011a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 801011c:	4b05      	ldr	r3, [pc, #20]	; (8010134 <ILI9341_Set_Rotation+0x98>)
 801011e:	22f0      	movs	r2, #240	; 0xf0
 8010120:	801a      	strh	r2, [r3, #0]
			break;
 8010122:	e000      	b.n	8010126 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8010124:	bf00      	nop
	}
}
 8010126:	bf00      	nop
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	20000c42 	.word	0x20000c42
 8010134:	20000c40 	.word	0x20000c40

08010138 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8010138:	b480      	push	{r7}
 801013a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 801013c:	4b05      	ldr	r3, [pc, #20]	; (8010154 <_LCD_Enable+0x1c>)
 801013e:	695b      	ldr	r3, [r3, #20]
 8010140:	4a04      	ldr	r2, [pc, #16]	; (8010154 <_LCD_Enable+0x1c>)
 8010142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010146:	6153      	str	r3, [r2, #20]
}
 8010148:	bf00      	nop
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	48000400 	.word	0x48000400

08010158 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8010158:	b580      	push	{r7, lr}
 801015a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 801015c:	4b0c      	ldr	r3, [pc, #48]	; (8010190 <_LCD_Reset+0x38>)
 801015e:	695b      	ldr	r3, [r3, #20]
 8010160:	4a0b      	ldr	r2, [pc, #44]	; (8010190 <_LCD_Reset+0x38>)
 8010162:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010166:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8010168:	20c8      	movs	r0, #200	; 0xc8
 801016a:	f7f8 fd19 	bl	8008ba0 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801016e:	4b08      	ldr	r3, [pc, #32]	; (8010190 <_LCD_Reset+0x38>)
 8010170:	695b      	ldr	r3, [r3, #20]
 8010172:	4a07      	ldr	r2, [pc, #28]	; (8010190 <_LCD_Reset+0x38>)
 8010174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010178:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 801017a:	20c8      	movs	r0, #200	; 0xc8
 801017c:	f7f8 fd10 	bl	8008ba0 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8010180:	4b03      	ldr	r3, [pc, #12]	; (8010190 <_LCD_Reset+0x38>)
 8010182:	695b      	ldr	r3, [r3, #20]
 8010184:	4a02      	ldr	r2, [pc, #8]	; (8010190 <_LCD_Reset+0x38>)
 8010186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801018a:	6153      	str	r3, [r2, #20]
}
 801018c:	bf00      	nop
 801018e:	bd80      	pop	{r7, pc}
 8010190:	48000400 	.word	0x48000400

08010194 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8010194:	b5b0      	push	{r4, r5, r7, lr}
 8010196:	b08e      	sub	sp, #56	; 0x38
 8010198:	af00      	add	r7, sp, #0
 801019a:	607b      	str	r3, [r7, #4]
 801019c:	4603      	mov	r3, r0
 801019e:	81fb      	strh	r3, [r7, #14]
 80101a0:	460b      	mov	r3, r1
 80101a2:	81bb      	strh	r3, [r7, #12]
 80101a4:	4613      	mov	r3, r2
 80101a6:	817b      	strh	r3, [r7, #10]
 80101a8:	466b      	mov	r3, sp
 80101aa:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 80101ac:	2300      	movs	r3, #0
 80101ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	005b      	lsls	r3, r3, #1
 80101b4:	4a4d      	ldr	r2, [pc, #308]	; (80102ec <_LCD_Write_Frame+0x158>)
 80101b6:	8812      	ldrh	r2, [r2, #0]
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d202      	bcs.n	80101c2 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101c0:	e002      	b.n	80101c8 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 80101c2:	4b4a      	ldr	r3, [pc, #296]	; (80102ec <_LCD_Write_Frame+0x158>)
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 80101c8:	897b      	ldrh	r3, [r7, #10]
 80101ca:	0a1b      	lsrs	r3, r3, #8
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 80101d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101d2:	4603      	mov	r3, r0
 80101d4:	3b01      	subs	r3, #1
 80101d6:	61bb      	str	r3, [r7, #24]
 80101d8:	4601      	mov	r1, r0
 80101da:	f04f 0200 	mov.w	r2, #0
 80101de:	f04f 0300 	mov.w	r3, #0
 80101e2:	f04f 0400 	mov.w	r4, #0
 80101e6:	00d4      	lsls	r4, r2, #3
 80101e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80101ec:	00cb      	lsls	r3, r1, #3
 80101ee:	4601      	mov	r1, r0
 80101f0:	f04f 0200 	mov.w	r2, #0
 80101f4:	f04f 0300 	mov.w	r3, #0
 80101f8:	f04f 0400 	mov.w	r4, #0
 80101fc:	00d4      	lsls	r4, r2, #3
 80101fe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8010202:	00cb      	lsls	r3, r1, #3
 8010204:	1dc3      	adds	r3, r0, #7
 8010206:	08db      	lsrs	r3, r3, #3
 8010208:	00db      	lsls	r3, r3, #3
 801020a:	ebad 0d03 	sub.w	sp, sp, r3
 801020e:	466b      	mov	r3, sp
 8010210:	3300      	adds	r3, #0
 8010212:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8010214:	2300      	movs	r3, #0
 8010216:	633b      	str	r3, [r7, #48]	; 0x30
 8010218:	e00d      	b.n	8010236 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 801021a:	697a      	ldr	r2, [r7, #20]
 801021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021e:	4413      	add	r3, r2
 8010220:	7ffa      	ldrb	r2, [r7, #31]
 8010222:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8010224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010226:	3301      	adds	r3, #1
 8010228:	897a      	ldrh	r2, [r7, #10]
 801022a:	b2d1      	uxtb	r1, r2
 801022c:	697a      	ldr	r2, [r7, #20]
 801022e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8010230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010232:	3302      	adds	r3, #2
 8010234:	633b      	str	r3, [r7, #48]	; 0x30
 8010236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023a:	429a      	cmp	r2, r3
 801023c:	d3ed      	bcc.n	801021a <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8010244:	2301      	movs	r3, #1
 8010246:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8010248:	2300      	movs	r3, #0
 801024a:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d00d      	beq.n	801026e <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010256:	fbb2 f3f3 	udiv	r3, r2, r3
 801025a:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010260:	fbb3 f2f2 	udiv	r2, r3, r2
 8010264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010266:	fb01 f202 	mul.w	r2, r1, r2
 801026a:	1a9b      	subs	r3, r3, r2
 801026c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801026e:	4b20      	ldr	r3, [pc, #128]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 8010270:	695b      	ldr	r3, [r3, #20]
 8010272:	4a1f      	ldr	r2, [pc, #124]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 8010274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010278:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801027a:	4b1d      	ldr	r3, [pc, #116]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 801027c:	695b      	ldr	r3, [r3, #20]
 801027e:	4a1c      	ldr	r2, [pc, #112]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 8010280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010284:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 8010286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00f      	beq.n	80102ac <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 801028c:	2300      	movs	r3, #0
 801028e:	627b      	str	r3, [r7, #36]	; 0x24
 8010290:	e008      	b.n	80102a4 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8010292:	6978      	ldr	r0, [r7, #20]
 8010294:	230a      	movs	r3, #10
 8010296:	2200      	movs	r2, #0
 8010298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801029a:	f000 f8c1 	bl	8010420 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	3301      	adds	r3, #1
 80102a2:	627b      	str	r3, [r7, #36]	; 0x24
 80102a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d3f2      	bcc.n	8010292 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 80102ac:	6978      	ldr	r0, [r7, #20]
 80102ae:	230a      	movs	r3, #10
 80102b0:	2200      	movs	r2, #0
 80102b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80102b4:	f000 f8b4 	bl	8010420 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80102b8:	2300      	movs	r3, #0
 80102ba:	623b      	str	r3, [r7, #32]
 80102bc:	e008      	b.n	80102d0 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80102be:	4b0c      	ldr	r3, [pc, #48]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 80102c0:	695b      	ldr	r3, [r3, #20]
 80102c2:	4a0b      	ldr	r2, [pc, #44]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 80102c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102c8:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	3301      	adds	r3, #1
 80102ce:	623b      	str	r3, [r7, #32]
 80102d0:	6a3b      	ldr	r3, [r7, #32]
 80102d2:	2b02      	cmp	r3, #2
 80102d4:	ddf3      	ble.n	80102be <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80102d6:	4b06      	ldr	r3, [pc, #24]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	4a05      	ldr	r2, [pc, #20]	; (80102f0 <_LCD_Write_Frame+0x15c>)
 80102dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102e0:	6153      	str	r3, [r2, #20]
 80102e2:	46ad      	mov	sp, r5

}
 80102e4:	bf00      	nop
 80102e6:	3738      	adds	r7, #56	; 0x38
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bdb0      	pop	{r4, r5, r7, pc}
 80102ec:	20000c44 	.word	0x20000c44
 80102f0:	48000400 	.word	0x48000400

080102f4 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80102fe:	4b15      	ldr	r3, [pc, #84]	; (8010354 <_LCD_SendCommand+0x60>)
 8010300:	695b      	ldr	r3, [r3, #20]
 8010302:	4a14      	ldr	r2, [pc, #80]	; (8010354 <_LCD_SendCommand+0x60>)
 8010304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010308:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 801030a:	4b12      	ldr	r3, [pc, #72]	; (8010354 <_LCD_SendCommand+0x60>)
 801030c:	695b      	ldr	r3, [r3, #20]
 801030e:	4a11      	ldr	r2, [pc, #68]	; (8010354 <_LCD_SendCommand+0x60>)
 8010310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010314:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	2200      	movs	r2, #0
 801031a:	2100      	movs	r1, #0
 801031c:	4618      	mov	r0, r3
 801031e:	f000 f84d 	bl	80103bc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8010322:	2300      	movs	r3, #0
 8010324:	60fb      	str	r3, [r7, #12]
 8010326:	e008      	b.n	801033a <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010328:	4b0a      	ldr	r3, [pc, #40]	; (8010354 <_LCD_SendCommand+0x60>)
 801032a:	695b      	ldr	r3, [r3, #20]
 801032c:	4a09      	ldr	r2, [pc, #36]	; (8010354 <_LCD_SendCommand+0x60>)
 801032e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010332:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	3301      	adds	r3, #1
 8010338:	60fb      	str	r3, [r7, #12]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2b02      	cmp	r3, #2
 801033e:	ddf3      	ble.n	8010328 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010340:	4b04      	ldr	r3, [pc, #16]	; (8010354 <_LCD_SendCommand+0x60>)
 8010342:	695b      	ldr	r3, [r3, #20]
 8010344:	4a03      	ldr	r2, [pc, #12]	; (8010354 <_LCD_SendCommand+0x60>)
 8010346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801034a:	6153      	str	r3, [r2, #20]
}
 801034c:	bf00      	nop
 801034e:	3710      	adds	r7, #16
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	48000400 	.word	0x48000400

08010358 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010362:	4b15      	ldr	r3, [pc, #84]	; (80103b8 <_LCD_SendData+0x60>)
 8010364:	695b      	ldr	r3, [r3, #20]
 8010366:	4a14      	ldr	r2, [pc, #80]	; (80103b8 <_LCD_SendData+0x60>)
 8010368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801036c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801036e:	4b12      	ldr	r3, [pc, #72]	; (80103b8 <_LCD_SendData+0x60>)
 8010370:	695b      	ldr	r3, [r3, #20]
 8010372:	4a11      	ldr	r2, [pc, #68]	; (80103b8 <_LCD_SendData+0x60>)
 8010374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010378:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 801037a:	79fb      	ldrb	r3, [r7, #7]
 801037c:	2200      	movs	r2, #0
 801037e:	2100      	movs	r1, #0
 8010380:	4618      	mov	r0, r3
 8010382:	f000 f81b 	bl	80103bc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8010386:	2300      	movs	r3, #0
 8010388:	60fb      	str	r3, [r7, #12]
 801038a:	e008      	b.n	801039e <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <_LCD_SendData+0x60>)
 801038e:	695b      	ldr	r3, [r3, #20]
 8010390:	4a09      	ldr	r2, [pc, #36]	; (80103b8 <_LCD_SendData+0x60>)
 8010392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010396:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	3301      	adds	r3, #1
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	ddf3      	ble.n	801038c <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80103a4:	4b04      	ldr	r3, [pc, #16]	; (80103b8 <_LCD_SendData+0x60>)
 80103a6:	695b      	ldr	r3, [r3, #20]
 80103a8:	4a03      	ldr	r2, [pc, #12]	; (80103b8 <_LCD_SendData+0x60>)
 80103aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103ae:	6153      	str	r3, [r2, #20]
}
 80103b0:	bf00      	nop
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	48000400 	.word	0x48000400

080103bc <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80103bc:	b480      	push	{r7}
 80103be:	b085      	sub	sp, #20
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	4603      	mov	r3, r0
 80103c4:	71fb      	strb	r3, [r7, #7]
 80103c6:	460b      	mov	r3, r1
 80103c8:	71bb      	strb	r3, [r7, #6]
 80103ca:	4613      	mov	r3, r2
 80103cc:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80103ce:	2300      	movs	r3, #0
 80103d0:	60fb      	str	r3, [r7, #12]
 80103d2:	e003      	b.n	80103dc <_SPI_SendByte+0x20>
   		asm("nop");
 80103d4:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	3301      	adds	r3, #1
 80103da:	60fb      	str	r3, [r7, #12]
 80103dc:	79bb      	ldrb	r3, [r7, #6]
 80103de:	68fa      	ldr	r2, [r7, #12]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	dbf7      	blt.n	80103d4 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80103e4:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <_SPI_SendByte+0x5c>)
 80103e6:	689b      	ldr	r3, [r3, #8]
 80103e8:	f003 0302 	and.w	r3, r3, #2
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	d102      	bne.n	80103f6 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80103f0:	4a0a      	ldr	r2, [pc, #40]	; (801041c <_SPI_SendByte+0x60>)
 80103f2:	79fb      	ldrb	r3, [r7, #7]
 80103f4:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80103f6:	2300      	movs	r3, #0
 80103f8:	60bb      	str	r3, [r7, #8]
 80103fa:	e003      	b.n	8010404 <_SPI_SendByte+0x48>
   		asm("nop");
 80103fc:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	3301      	adds	r3, #1
 8010402:	60bb      	str	r3, [r7, #8]
 8010404:	797b      	ldrb	r3, [r7, #5]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	429a      	cmp	r2, r3
 801040a:	dbf7      	blt.n	80103fc <_SPI_SendByte+0x40>

#endif

}
 801040c:	bf00      	nop
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	40003c00 	.word	0x40003c00
 801041c:	40003c0c 	.word	0x40003c0c

08010420 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8010420:	b480      	push	{r7}
 8010422:	b089      	sub	sp, #36	; 0x24
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	4611      	mov	r1, r2
 801042c:	461a      	mov	r2, r3
 801042e:	460b      	mov	r3, r1
 8010430:	71fb      	strb	r3, [r7, #7]
 8010432:	4613      	mov	r3, r2
 8010434:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8010436:	2300      	movs	r3, #0
 8010438:	61fb      	str	r3, [r7, #28]
 801043a:	e003      	b.n	8010444 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 801043c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	3301      	adds	r3, #1
 8010442:	61fb      	str	r3, [r7, #28]
 8010444:	79fb      	ldrb	r3, [r7, #7]
 8010446:	69fa      	ldr	r2, [r7, #28]
 8010448:	429a      	cmp	r2, r3
 801044a:	dbf7      	blt.n	801043c <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8010450:	e01d      	b.n	801048e <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8010452:	4b1c      	ldr	r3, [pc, #112]	; (80104c4 <_SPI_SendByteMultiByte+0xa4>)
 8010454:	689b      	ldr	r3, [r3, #8]
 8010456:	f003 0302 	and.w	r3, r3, #2
 801045a:	2b02      	cmp	r3, #2
 801045c:	d117      	bne.n	801048e <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	2b01      	cmp	r3, #1
 8010462:	d90a      	bls.n	801047a <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	881a      	ldrh	r2, [r3, #0]
 8010468:	4b16      	ldr	r3, [pc, #88]	; (80104c4 <_SPI_SendByteMultiByte+0xa4>)
 801046a:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	3302      	adds	r3, #2
 8010470:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	3b02      	subs	r3, #2
 8010476:	60bb      	str	r3, [r7, #8]
 8010478:	e009      	b.n	801048e <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 801047a:	4a13      	ldr	r2, [pc, #76]	; (80104c8 <_SPI_SendByteMultiByte+0xa8>)
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	3301      	adds	r3, #1
 8010486:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	3b01      	subs	r3, #1
 801048c:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d1de      	bne.n	8010452 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8010494:	4b0b      	ldr	r3, [pc, #44]	; (80104c4 <_SPI_SendByteMultiByte+0xa4>)
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	4a0a      	ldr	r2, [pc, #40]	; (80104c4 <_SPI_SendByteMultiByte+0xa4>)
 801049a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801049e:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80104a0:	2300      	movs	r3, #0
 80104a2:	617b      	str	r3, [r7, #20]
 80104a4:	e003      	b.n	80104ae <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 80104a6:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	3301      	adds	r3, #1
 80104ac:	617b      	str	r3, [r7, #20]
 80104ae:	79bb      	ldrb	r3, [r7, #6]
 80104b0:	697a      	ldr	r2, [r7, #20]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	dbf7      	blt.n	80104a6 <_SPI_SendByteMultiByte+0x86>

#endif

}
 80104b6:	bf00      	nop
 80104b8:	3724      	adds	r7, #36	; 0x24
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	40003c00 	.word	0x40003c00
 80104c8:	40003c0c 	.word	0x40003c0c

080104cc <__errno>:
 80104cc:	4b01      	ldr	r3, [pc, #4]	; (80104d4 <__errno+0x8>)
 80104ce:	6818      	ldr	r0, [r3, #0]
 80104d0:	4770      	bx	lr
 80104d2:	bf00      	nop
 80104d4:	20001c38 	.word	0x20001c38

080104d8 <__libc_init_array>:
 80104d8:	b570      	push	{r4, r5, r6, lr}
 80104da:	4e0d      	ldr	r6, [pc, #52]	; (8010510 <__libc_init_array+0x38>)
 80104dc:	4c0d      	ldr	r4, [pc, #52]	; (8010514 <__libc_init_array+0x3c>)
 80104de:	1ba4      	subs	r4, r4, r6
 80104e0:	10a4      	asrs	r4, r4, #2
 80104e2:	2500      	movs	r5, #0
 80104e4:	42a5      	cmp	r5, r4
 80104e6:	d109      	bne.n	80104fc <__libc_init_array+0x24>
 80104e8:	4e0b      	ldr	r6, [pc, #44]	; (8010518 <__libc_init_array+0x40>)
 80104ea:	4c0c      	ldr	r4, [pc, #48]	; (801051c <__libc_init_array+0x44>)
 80104ec:	f004 f89e 	bl	801462c <_init>
 80104f0:	1ba4      	subs	r4, r4, r6
 80104f2:	10a4      	asrs	r4, r4, #2
 80104f4:	2500      	movs	r5, #0
 80104f6:	42a5      	cmp	r5, r4
 80104f8:	d105      	bne.n	8010506 <__libc_init_array+0x2e>
 80104fa:	bd70      	pop	{r4, r5, r6, pc}
 80104fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010500:	4798      	blx	r3
 8010502:	3501      	adds	r5, #1
 8010504:	e7ee      	b.n	80104e4 <__libc_init_array+0xc>
 8010506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801050a:	4798      	blx	r3
 801050c:	3501      	adds	r5, #1
 801050e:	e7f2      	b.n	80104f6 <__libc_init_array+0x1e>
 8010510:	08015a58 	.word	0x08015a58
 8010514:	08015a58 	.word	0x08015a58
 8010518:	08015a58 	.word	0x08015a58
 801051c:	08015a5c 	.word	0x08015a5c

08010520 <memset>:
 8010520:	4402      	add	r2, r0
 8010522:	4603      	mov	r3, r0
 8010524:	4293      	cmp	r3, r2
 8010526:	d100      	bne.n	801052a <memset+0xa>
 8010528:	4770      	bx	lr
 801052a:	f803 1b01 	strb.w	r1, [r3], #1
 801052e:	e7f9      	b.n	8010524 <memset+0x4>

08010530 <__cvt>:
 8010530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010534:	ec55 4b10 	vmov	r4, r5, d0
 8010538:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801053a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801053e:	2d00      	cmp	r5, #0
 8010540:	460e      	mov	r6, r1
 8010542:	4691      	mov	r9, r2
 8010544:	4619      	mov	r1, r3
 8010546:	bfb8      	it	lt
 8010548:	4622      	movlt	r2, r4
 801054a:	462b      	mov	r3, r5
 801054c:	f027 0720 	bic.w	r7, r7, #32
 8010550:	bfbb      	ittet	lt
 8010552:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010556:	461d      	movlt	r5, r3
 8010558:	2300      	movge	r3, #0
 801055a:	232d      	movlt	r3, #45	; 0x2d
 801055c:	bfb8      	it	lt
 801055e:	4614      	movlt	r4, r2
 8010560:	2f46      	cmp	r7, #70	; 0x46
 8010562:	700b      	strb	r3, [r1, #0]
 8010564:	d004      	beq.n	8010570 <__cvt+0x40>
 8010566:	2f45      	cmp	r7, #69	; 0x45
 8010568:	d100      	bne.n	801056c <__cvt+0x3c>
 801056a:	3601      	adds	r6, #1
 801056c:	2102      	movs	r1, #2
 801056e:	e000      	b.n	8010572 <__cvt+0x42>
 8010570:	2103      	movs	r1, #3
 8010572:	ab03      	add	r3, sp, #12
 8010574:	9301      	str	r3, [sp, #4]
 8010576:	ab02      	add	r3, sp, #8
 8010578:	9300      	str	r3, [sp, #0]
 801057a:	4632      	mov	r2, r6
 801057c:	4653      	mov	r3, sl
 801057e:	ec45 4b10 	vmov	d0, r4, r5
 8010582:	f000 fe3d 	bl	8011200 <_dtoa_r>
 8010586:	2f47      	cmp	r7, #71	; 0x47
 8010588:	4680      	mov	r8, r0
 801058a:	d102      	bne.n	8010592 <__cvt+0x62>
 801058c:	f019 0f01 	tst.w	r9, #1
 8010590:	d026      	beq.n	80105e0 <__cvt+0xb0>
 8010592:	2f46      	cmp	r7, #70	; 0x46
 8010594:	eb08 0906 	add.w	r9, r8, r6
 8010598:	d111      	bne.n	80105be <__cvt+0x8e>
 801059a:	f898 3000 	ldrb.w	r3, [r8]
 801059e:	2b30      	cmp	r3, #48	; 0x30
 80105a0:	d10a      	bne.n	80105b8 <__cvt+0x88>
 80105a2:	2200      	movs	r2, #0
 80105a4:	2300      	movs	r3, #0
 80105a6:	4620      	mov	r0, r4
 80105a8:	4629      	mov	r1, r5
 80105aa:	f7f0 fab5 	bl	8000b18 <__aeabi_dcmpeq>
 80105ae:	b918      	cbnz	r0, 80105b8 <__cvt+0x88>
 80105b0:	f1c6 0601 	rsb	r6, r6, #1
 80105b4:	f8ca 6000 	str.w	r6, [sl]
 80105b8:	f8da 3000 	ldr.w	r3, [sl]
 80105bc:	4499      	add	r9, r3
 80105be:	2200      	movs	r2, #0
 80105c0:	2300      	movs	r3, #0
 80105c2:	4620      	mov	r0, r4
 80105c4:	4629      	mov	r1, r5
 80105c6:	f7f0 faa7 	bl	8000b18 <__aeabi_dcmpeq>
 80105ca:	b938      	cbnz	r0, 80105dc <__cvt+0xac>
 80105cc:	2230      	movs	r2, #48	; 0x30
 80105ce:	9b03      	ldr	r3, [sp, #12]
 80105d0:	454b      	cmp	r3, r9
 80105d2:	d205      	bcs.n	80105e0 <__cvt+0xb0>
 80105d4:	1c59      	adds	r1, r3, #1
 80105d6:	9103      	str	r1, [sp, #12]
 80105d8:	701a      	strb	r2, [r3, #0]
 80105da:	e7f8      	b.n	80105ce <__cvt+0x9e>
 80105dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80105e0:	9b03      	ldr	r3, [sp, #12]
 80105e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80105e4:	eba3 0308 	sub.w	r3, r3, r8
 80105e8:	4640      	mov	r0, r8
 80105ea:	6013      	str	r3, [r2, #0]
 80105ec:	b004      	add	sp, #16
 80105ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080105f2 <__exponent>:
 80105f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105f4:	2900      	cmp	r1, #0
 80105f6:	4604      	mov	r4, r0
 80105f8:	bfba      	itte	lt
 80105fa:	4249      	neglt	r1, r1
 80105fc:	232d      	movlt	r3, #45	; 0x2d
 80105fe:	232b      	movge	r3, #43	; 0x2b
 8010600:	2909      	cmp	r1, #9
 8010602:	f804 2b02 	strb.w	r2, [r4], #2
 8010606:	7043      	strb	r3, [r0, #1]
 8010608:	dd20      	ble.n	801064c <__exponent+0x5a>
 801060a:	f10d 0307 	add.w	r3, sp, #7
 801060e:	461f      	mov	r7, r3
 8010610:	260a      	movs	r6, #10
 8010612:	fb91 f5f6 	sdiv	r5, r1, r6
 8010616:	fb06 1115 	mls	r1, r6, r5, r1
 801061a:	3130      	adds	r1, #48	; 0x30
 801061c:	2d09      	cmp	r5, #9
 801061e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010622:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8010626:	4629      	mov	r1, r5
 8010628:	dc09      	bgt.n	801063e <__exponent+0x4c>
 801062a:	3130      	adds	r1, #48	; 0x30
 801062c:	3b02      	subs	r3, #2
 801062e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010632:	42bb      	cmp	r3, r7
 8010634:	4622      	mov	r2, r4
 8010636:	d304      	bcc.n	8010642 <__exponent+0x50>
 8010638:	1a10      	subs	r0, r2, r0
 801063a:	b003      	add	sp, #12
 801063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801063e:	4613      	mov	r3, r2
 8010640:	e7e7      	b.n	8010612 <__exponent+0x20>
 8010642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010646:	f804 2b01 	strb.w	r2, [r4], #1
 801064a:	e7f2      	b.n	8010632 <__exponent+0x40>
 801064c:	2330      	movs	r3, #48	; 0x30
 801064e:	4419      	add	r1, r3
 8010650:	7083      	strb	r3, [r0, #2]
 8010652:	1d02      	adds	r2, r0, #4
 8010654:	70c1      	strb	r1, [r0, #3]
 8010656:	e7ef      	b.n	8010638 <__exponent+0x46>

08010658 <_printf_float>:
 8010658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065c:	b08d      	sub	sp, #52	; 0x34
 801065e:	460c      	mov	r4, r1
 8010660:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010664:	4616      	mov	r6, r2
 8010666:	461f      	mov	r7, r3
 8010668:	4605      	mov	r5, r0
 801066a:	f001 fcfb 	bl	8012064 <_localeconv_r>
 801066e:	6803      	ldr	r3, [r0, #0]
 8010670:	9304      	str	r3, [sp, #16]
 8010672:	4618      	mov	r0, r3
 8010674:	f7ef fdd4 	bl	8000220 <strlen>
 8010678:	2300      	movs	r3, #0
 801067a:	930a      	str	r3, [sp, #40]	; 0x28
 801067c:	f8d8 3000 	ldr.w	r3, [r8]
 8010680:	9005      	str	r0, [sp, #20]
 8010682:	3307      	adds	r3, #7
 8010684:	f023 0307 	bic.w	r3, r3, #7
 8010688:	f103 0208 	add.w	r2, r3, #8
 801068c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010690:	f8d4 b000 	ldr.w	fp, [r4]
 8010694:	f8c8 2000 	str.w	r2, [r8]
 8010698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80106a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80106a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80106a8:	9307      	str	r3, [sp, #28]
 80106aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80106ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106b2:	4ba7      	ldr	r3, [pc, #668]	; (8010950 <_printf_float+0x2f8>)
 80106b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106b8:	f7f0 fa60 	bl	8000b7c <__aeabi_dcmpun>
 80106bc:	bb70      	cbnz	r0, 801071c <_printf_float+0xc4>
 80106be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106c2:	4ba3      	ldr	r3, [pc, #652]	; (8010950 <_printf_float+0x2f8>)
 80106c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106c8:	f7f0 fa3a 	bl	8000b40 <__aeabi_dcmple>
 80106cc:	bb30      	cbnz	r0, 801071c <_printf_float+0xc4>
 80106ce:	2200      	movs	r2, #0
 80106d0:	2300      	movs	r3, #0
 80106d2:	4640      	mov	r0, r8
 80106d4:	4649      	mov	r1, r9
 80106d6:	f7f0 fa29 	bl	8000b2c <__aeabi_dcmplt>
 80106da:	b110      	cbz	r0, 80106e2 <_printf_float+0x8a>
 80106dc:	232d      	movs	r3, #45	; 0x2d
 80106de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106e2:	4a9c      	ldr	r2, [pc, #624]	; (8010954 <_printf_float+0x2fc>)
 80106e4:	4b9c      	ldr	r3, [pc, #624]	; (8010958 <_printf_float+0x300>)
 80106e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80106ea:	bf8c      	ite	hi
 80106ec:	4690      	movhi	r8, r2
 80106ee:	4698      	movls	r8, r3
 80106f0:	2303      	movs	r3, #3
 80106f2:	f02b 0204 	bic.w	r2, fp, #4
 80106f6:	6123      	str	r3, [r4, #16]
 80106f8:	6022      	str	r2, [r4, #0]
 80106fa:	f04f 0900 	mov.w	r9, #0
 80106fe:	9700      	str	r7, [sp, #0]
 8010700:	4633      	mov	r3, r6
 8010702:	aa0b      	add	r2, sp, #44	; 0x2c
 8010704:	4621      	mov	r1, r4
 8010706:	4628      	mov	r0, r5
 8010708:	f000 f9e6 	bl	8010ad8 <_printf_common>
 801070c:	3001      	adds	r0, #1
 801070e:	f040 808d 	bne.w	801082c <_printf_float+0x1d4>
 8010712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010716:	b00d      	add	sp, #52	; 0x34
 8010718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071c:	4642      	mov	r2, r8
 801071e:	464b      	mov	r3, r9
 8010720:	4640      	mov	r0, r8
 8010722:	4649      	mov	r1, r9
 8010724:	f7f0 fa2a 	bl	8000b7c <__aeabi_dcmpun>
 8010728:	b110      	cbz	r0, 8010730 <_printf_float+0xd8>
 801072a:	4a8c      	ldr	r2, [pc, #560]	; (801095c <_printf_float+0x304>)
 801072c:	4b8c      	ldr	r3, [pc, #560]	; (8010960 <_printf_float+0x308>)
 801072e:	e7da      	b.n	80106e6 <_printf_float+0x8e>
 8010730:	6861      	ldr	r1, [r4, #4]
 8010732:	1c4b      	adds	r3, r1, #1
 8010734:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010738:	a80a      	add	r0, sp, #40	; 0x28
 801073a:	d13e      	bne.n	80107ba <_printf_float+0x162>
 801073c:	2306      	movs	r3, #6
 801073e:	6063      	str	r3, [r4, #4]
 8010740:	2300      	movs	r3, #0
 8010742:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010746:	ab09      	add	r3, sp, #36	; 0x24
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	ec49 8b10 	vmov	d0, r8, r9
 801074e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010752:	6022      	str	r2, [r4, #0]
 8010754:	f8cd a004 	str.w	sl, [sp, #4]
 8010758:	6861      	ldr	r1, [r4, #4]
 801075a:	4628      	mov	r0, r5
 801075c:	f7ff fee8 	bl	8010530 <__cvt>
 8010760:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010764:	2b47      	cmp	r3, #71	; 0x47
 8010766:	4680      	mov	r8, r0
 8010768:	d109      	bne.n	801077e <_printf_float+0x126>
 801076a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801076c:	1cd8      	adds	r0, r3, #3
 801076e:	db02      	blt.n	8010776 <_printf_float+0x11e>
 8010770:	6862      	ldr	r2, [r4, #4]
 8010772:	4293      	cmp	r3, r2
 8010774:	dd47      	ble.n	8010806 <_printf_float+0x1ae>
 8010776:	f1aa 0a02 	sub.w	sl, sl, #2
 801077a:	fa5f fa8a 	uxtb.w	sl, sl
 801077e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010784:	d824      	bhi.n	80107d0 <_printf_float+0x178>
 8010786:	3901      	subs	r1, #1
 8010788:	4652      	mov	r2, sl
 801078a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801078e:	9109      	str	r1, [sp, #36]	; 0x24
 8010790:	f7ff ff2f 	bl	80105f2 <__exponent>
 8010794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010796:	1813      	adds	r3, r2, r0
 8010798:	2a01      	cmp	r2, #1
 801079a:	4681      	mov	r9, r0
 801079c:	6123      	str	r3, [r4, #16]
 801079e:	dc02      	bgt.n	80107a6 <_printf_float+0x14e>
 80107a0:	6822      	ldr	r2, [r4, #0]
 80107a2:	07d1      	lsls	r1, r2, #31
 80107a4:	d501      	bpl.n	80107aa <_printf_float+0x152>
 80107a6:	3301      	adds	r3, #1
 80107a8:	6123      	str	r3, [r4, #16]
 80107aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d0a5      	beq.n	80106fe <_printf_float+0xa6>
 80107b2:	232d      	movs	r3, #45	; 0x2d
 80107b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107b8:	e7a1      	b.n	80106fe <_printf_float+0xa6>
 80107ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80107be:	f000 8177 	beq.w	8010ab0 <_printf_float+0x458>
 80107c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80107c6:	d1bb      	bne.n	8010740 <_printf_float+0xe8>
 80107c8:	2900      	cmp	r1, #0
 80107ca:	d1b9      	bne.n	8010740 <_printf_float+0xe8>
 80107cc:	2301      	movs	r3, #1
 80107ce:	e7b6      	b.n	801073e <_printf_float+0xe6>
 80107d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80107d4:	d119      	bne.n	801080a <_printf_float+0x1b2>
 80107d6:	2900      	cmp	r1, #0
 80107d8:	6863      	ldr	r3, [r4, #4]
 80107da:	dd0c      	ble.n	80107f6 <_printf_float+0x19e>
 80107dc:	6121      	str	r1, [r4, #16]
 80107de:	b913      	cbnz	r3, 80107e6 <_printf_float+0x18e>
 80107e0:	6822      	ldr	r2, [r4, #0]
 80107e2:	07d2      	lsls	r2, r2, #31
 80107e4:	d502      	bpl.n	80107ec <_printf_float+0x194>
 80107e6:	3301      	adds	r3, #1
 80107e8:	440b      	add	r3, r1
 80107ea:	6123      	str	r3, [r4, #16]
 80107ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80107f0:	f04f 0900 	mov.w	r9, #0
 80107f4:	e7d9      	b.n	80107aa <_printf_float+0x152>
 80107f6:	b913      	cbnz	r3, 80107fe <_printf_float+0x1a6>
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	07d0      	lsls	r0, r2, #31
 80107fc:	d501      	bpl.n	8010802 <_printf_float+0x1aa>
 80107fe:	3302      	adds	r3, #2
 8010800:	e7f3      	b.n	80107ea <_printf_float+0x192>
 8010802:	2301      	movs	r3, #1
 8010804:	e7f1      	b.n	80107ea <_printf_float+0x192>
 8010806:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801080a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801080e:	4293      	cmp	r3, r2
 8010810:	db05      	blt.n	801081e <_printf_float+0x1c6>
 8010812:	6822      	ldr	r2, [r4, #0]
 8010814:	6123      	str	r3, [r4, #16]
 8010816:	07d1      	lsls	r1, r2, #31
 8010818:	d5e8      	bpl.n	80107ec <_printf_float+0x194>
 801081a:	3301      	adds	r3, #1
 801081c:	e7e5      	b.n	80107ea <_printf_float+0x192>
 801081e:	2b00      	cmp	r3, #0
 8010820:	bfd4      	ite	le
 8010822:	f1c3 0302 	rsble	r3, r3, #2
 8010826:	2301      	movgt	r3, #1
 8010828:	4413      	add	r3, r2
 801082a:	e7de      	b.n	80107ea <_printf_float+0x192>
 801082c:	6823      	ldr	r3, [r4, #0]
 801082e:	055a      	lsls	r2, r3, #21
 8010830:	d407      	bmi.n	8010842 <_printf_float+0x1ea>
 8010832:	6923      	ldr	r3, [r4, #16]
 8010834:	4642      	mov	r2, r8
 8010836:	4631      	mov	r1, r6
 8010838:	4628      	mov	r0, r5
 801083a:	47b8      	blx	r7
 801083c:	3001      	adds	r0, #1
 801083e:	d12b      	bne.n	8010898 <_printf_float+0x240>
 8010840:	e767      	b.n	8010712 <_printf_float+0xba>
 8010842:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010846:	f240 80dc 	bls.w	8010a02 <_printf_float+0x3aa>
 801084a:	2200      	movs	r2, #0
 801084c:	2300      	movs	r3, #0
 801084e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010852:	f7f0 f961 	bl	8000b18 <__aeabi_dcmpeq>
 8010856:	2800      	cmp	r0, #0
 8010858:	d033      	beq.n	80108c2 <_printf_float+0x26a>
 801085a:	2301      	movs	r3, #1
 801085c:	4a41      	ldr	r2, [pc, #260]	; (8010964 <_printf_float+0x30c>)
 801085e:	4631      	mov	r1, r6
 8010860:	4628      	mov	r0, r5
 8010862:	47b8      	blx	r7
 8010864:	3001      	adds	r0, #1
 8010866:	f43f af54 	beq.w	8010712 <_printf_float+0xba>
 801086a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801086e:	429a      	cmp	r2, r3
 8010870:	db02      	blt.n	8010878 <_printf_float+0x220>
 8010872:	6823      	ldr	r3, [r4, #0]
 8010874:	07d8      	lsls	r0, r3, #31
 8010876:	d50f      	bpl.n	8010898 <_printf_float+0x240>
 8010878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801087c:	4631      	mov	r1, r6
 801087e:	4628      	mov	r0, r5
 8010880:	47b8      	blx	r7
 8010882:	3001      	adds	r0, #1
 8010884:	f43f af45 	beq.w	8010712 <_printf_float+0xba>
 8010888:	f04f 0800 	mov.w	r8, #0
 801088c:	f104 091a 	add.w	r9, r4, #26
 8010890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010892:	3b01      	subs	r3, #1
 8010894:	4543      	cmp	r3, r8
 8010896:	dc09      	bgt.n	80108ac <_printf_float+0x254>
 8010898:	6823      	ldr	r3, [r4, #0]
 801089a:	079b      	lsls	r3, r3, #30
 801089c:	f100 8103 	bmi.w	8010aa6 <_printf_float+0x44e>
 80108a0:	68e0      	ldr	r0, [r4, #12]
 80108a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108a4:	4298      	cmp	r0, r3
 80108a6:	bfb8      	it	lt
 80108a8:	4618      	movlt	r0, r3
 80108aa:	e734      	b.n	8010716 <_printf_float+0xbe>
 80108ac:	2301      	movs	r3, #1
 80108ae:	464a      	mov	r2, r9
 80108b0:	4631      	mov	r1, r6
 80108b2:	4628      	mov	r0, r5
 80108b4:	47b8      	blx	r7
 80108b6:	3001      	adds	r0, #1
 80108b8:	f43f af2b 	beq.w	8010712 <_printf_float+0xba>
 80108bc:	f108 0801 	add.w	r8, r8, #1
 80108c0:	e7e6      	b.n	8010890 <_printf_float+0x238>
 80108c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	dc2b      	bgt.n	8010920 <_printf_float+0x2c8>
 80108c8:	2301      	movs	r3, #1
 80108ca:	4a26      	ldr	r2, [pc, #152]	; (8010964 <_printf_float+0x30c>)
 80108cc:	4631      	mov	r1, r6
 80108ce:	4628      	mov	r0, r5
 80108d0:	47b8      	blx	r7
 80108d2:	3001      	adds	r0, #1
 80108d4:	f43f af1d 	beq.w	8010712 <_printf_float+0xba>
 80108d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108da:	b923      	cbnz	r3, 80108e6 <_printf_float+0x28e>
 80108dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108de:	b913      	cbnz	r3, 80108e6 <_printf_float+0x28e>
 80108e0:	6823      	ldr	r3, [r4, #0]
 80108e2:	07d9      	lsls	r1, r3, #31
 80108e4:	d5d8      	bpl.n	8010898 <_printf_float+0x240>
 80108e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108ea:	4631      	mov	r1, r6
 80108ec:	4628      	mov	r0, r5
 80108ee:	47b8      	blx	r7
 80108f0:	3001      	adds	r0, #1
 80108f2:	f43f af0e 	beq.w	8010712 <_printf_float+0xba>
 80108f6:	f04f 0900 	mov.w	r9, #0
 80108fa:	f104 0a1a 	add.w	sl, r4, #26
 80108fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010900:	425b      	negs	r3, r3
 8010902:	454b      	cmp	r3, r9
 8010904:	dc01      	bgt.n	801090a <_printf_float+0x2b2>
 8010906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010908:	e794      	b.n	8010834 <_printf_float+0x1dc>
 801090a:	2301      	movs	r3, #1
 801090c:	4652      	mov	r2, sl
 801090e:	4631      	mov	r1, r6
 8010910:	4628      	mov	r0, r5
 8010912:	47b8      	blx	r7
 8010914:	3001      	adds	r0, #1
 8010916:	f43f aefc 	beq.w	8010712 <_printf_float+0xba>
 801091a:	f109 0901 	add.w	r9, r9, #1
 801091e:	e7ee      	b.n	80108fe <_printf_float+0x2a6>
 8010920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010924:	429a      	cmp	r2, r3
 8010926:	bfa8      	it	ge
 8010928:	461a      	movge	r2, r3
 801092a:	2a00      	cmp	r2, #0
 801092c:	4691      	mov	r9, r2
 801092e:	dd07      	ble.n	8010940 <_printf_float+0x2e8>
 8010930:	4613      	mov	r3, r2
 8010932:	4631      	mov	r1, r6
 8010934:	4642      	mov	r2, r8
 8010936:	4628      	mov	r0, r5
 8010938:	47b8      	blx	r7
 801093a:	3001      	adds	r0, #1
 801093c:	f43f aee9 	beq.w	8010712 <_printf_float+0xba>
 8010940:	f104 031a 	add.w	r3, r4, #26
 8010944:	f04f 0b00 	mov.w	fp, #0
 8010948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801094c:	9306      	str	r3, [sp, #24]
 801094e:	e015      	b.n	801097c <_printf_float+0x324>
 8010950:	7fefffff 	.word	0x7fefffff
 8010954:	08015750 	.word	0x08015750
 8010958:	0801574c 	.word	0x0801574c
 801095c:	08015758 	.word	0x08015758
 8010960:	08015754 	.word	0x08015754
 8010964:	08015a0c 	.word	0x08015a0c
 8010968:	2301      	movs	r3, #1
 801096a:	9a06      	ldr	r2, [sp, #24]
 801096c:	4631      	mov	r1, r6
 801096e:	4628      	mov	r0, r5
 8010970:	47b8      	blx	r7
 8010972:	3001      	adds	r0, #1
 8010974:	f43f aecd 	beq.w	8010712 <_printf_float+0xba>
 8010978:	f10b 0b01 	add.w	fp, fp, #1
 801097c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010980:	ebaa 0309 	sub.w	r3, sl, r9
 8010984:	455b      	cmp	r3, fp
 8010986:	dcef      	bgt.n	8010968 <_printf_float+0x310>
 8010988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801098c:	429a      	cmp	r2, r3
 801098e:	44d0      	add	r8, sl
 8010990:	db15      	blt.n	80109be <_printf_float+0x366>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	07da      	lsls	r2, r3, #31
 8010996:	d412      	bmi.n	80109be <_printf_float+0x366>
 8010998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801099a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801099c:	eba3 020a 	sub.w	r2, r3, sl
 80109a0:	eba3 0a01 	sub.w	sl, r3, r1
 80109a4:	4592      	cmp	sl, r2
 80109a6:	bfa8      	it	ge
 80109a8:	4692      	movge	sl, r2
 80109aa:	f1ba 0f00 	cmp.w	sl, #0
 80109ae:	dc0e      	bgt.n	80109ce <_printf_float+0x376>
 80109b0:	f04f 0800 	mov.w	r8, #0
 80109b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109b8:	f104 091a 	add.w	r9, r4, #26
 80109bc:	e019      	b.n	80109f2 <_printf_float+0x39a>
 80109be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109c2:	4631      	mov	r1, r6
 80109c4:	4628      	mov	r0, r5
 80109c6:	47b8      	blx	r7
 80109c8:	3001      	adds	r0, #1
 80109ca:	d1e5      	bne.n	8010998 <_printf_float+0x340>
 80109cc:	e6a1      	b.n	8010712 <_printf_float+0xba>
 80109ce:	4653      	mov	r3, sl
 80109d0:	4642      	mov	r2, r8
 80109d2:	4631      	mov	r1, r6
 80109d4:	4628      	mov	r0, r5
 80109d6:	47b8      	blx	r7
 80109d8:	3001      	adds	r0, #1
 80109da:	d1e9      	bne.n	80109b0 <_printf_float+0x358>
 80109dc:	e699      	b.n	8010712 <_printf_float+0xba>
 80109de:	2301      	movs	r3, #1
 80109e0:	464a      	mov	r2, r9
 80109e2:	4631      	mov	r1, r6
 80109e4:	4628      	mov	r0, r5
 80109e6:	47b8      	blx	r7
 80109e8:	3001      	adds	r0, #1
 80109ea:	f43f ae92 	beq.w	8010712 <_printf_float+0xba>
 80109ee:	f108 0801 	add.w	r8, r8, #1
 80109f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109f6:	1a9b      	subs	r3, r3, r2
 80109f8:	eba3 030a 	sub.w	r3, r3, sl
 80109fc:	4543      	cmp	r3, r8
 80109fe:	dcee      	bgt.n	80109de <_printf_float+0x386>
 8010a00:	e74a      	b.n	8010898 <_printf_float+0x240>
 8010a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a04:	2a01      	cmp	r2, #1
 8010a06:	dc01      	bgt.n	8010a0c <_printf_float+0x3b4>
 8010a08:	07db      	lsls	r3, r3, #31
 8010a0a:	d53a      	bpl.n	8010a82 <_printf_float+0x42a>
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	4642      	mov	r2, r8
 8010a10:	4631      	mov	r1, r6
 8010a12:	4628      	mov	r0, r5
 8010a14:	47b8      	blx	r7
 8010a16:	3001      	adds	r0, #1
 8010a18:	f43f ae7b 	beq.w	8010712 <_printf_float+0xba>
 8010a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a20:	4631      	mov	r1, r6
 8010a22:	4628      	mov	r0, r5
 8010a24:	47b8      	blx	r7
 8010a26:	3001      	adds	r0, #1
 8010a28:	f108 0801 	add.w	r8, r8, #1
 8010a2c:	f43f ae71 	beq.w	8010712 <_printf_float+0xba>
 8010a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a32:	2200      	movs	r2, #0
 8010a34:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f7f0 f86b 	bl	8000b18 <__aeabi_dcmpeq>
 8010a42:	b9c8      	cbnz	r0, 8010a78 <_printf_float+0x420>
 8010a44:	4653      	mov	r3, sl
 8010a46:	4642      	mov	r2, r8
 8010a48:	4631      	mov	r1, r6
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	47b8      	blx	r7
 8010a4e:	3001      	adds	r0, #1
 8010a50:	d10e      	bne.n	8010a70 <_printf_float+0x418>
 8010a52:	e65e      	b.n	8010712 <_printf_float+0xba>
 8010a54:	2301      	movs	r3, #1
 8010a56:	4652      	mov	r2, sl
 8010a58:	4631      	mov	r1, r6
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	47b8      	blx	r7
 8010a5e:	3001      	adds	r0, #1
 8010a60:	f43f ae57 	beq.w	8010712 <_printf_float+0xba>
 8010a64:	f108 0801 	add.w	r8, r8, #1
 8010a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	4543      	cmp	r3, r8
 8010a6e:	dcf1      	bgt.n	8010a54 <_printf_float+0x3fc>
 8010a70:	464b      	mov	r3, r9
 8010a72:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010a76:	e6de      	b.n	8010836 <_printf_float+0x1de>
 8010a78:	f04f 0800 	mov.w	r8, #0
 8010a7c:	f104 0a1a 	add.w	sl, r4, #26
 8010a80:	e7f2      	b.n	8010a68 <_printf_float+0x410>
 8010a82:	2301      	movs	r3, #1
 8010a84:	e7df      	b.n	8010a46 <_printf_float+0x3ee>
 8010a86:	2301      	movs	r3, #1
 8010a88:	464a      	mov	r2, r9
 8010a8a:	4631      	mov	r1, r6
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	47b8      	blx	r7
 8010a90:	3001      	adds	r0, #1
 8010a92:	f43f ae3e 	beq.w	8010712 <_printf_float+0xba>
 8010a96:	f108 0801 	add.w	r8, r8, #1
 8010a9a:	68e3      	ldr	r3, [r4, #12]
 8010a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a9e:	1a9b      	subs	r3, r3, r2
 8010aa0:	4543      	cmp	r3, r8
 8010aa2:	dcf0      	bgt.n	8010a86 <_printf_float+0x42e>
 8010aa4:	e6fc      	b.n	80108a0 <_printf_float+0x248>
 8010aa6:	f04f 0800 	mov.w	r8, #0
 8010aaa:	f104 0919 	add.w	r9, r4, #25
 8010aae:	e7f4      	b.n	8010a9a <_printf_float+0x442>
 8010ab0:	2900      	cmp	r1, #0
 8010ab2:	f43f ae8b 	beq.w	80107cc <_printf_float+0x174>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010abc:	ab09      	add	r3, sp, #36	; 0x24
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	ec49 8b10 	vmov	d0, r8, r9
 8010ac4:	6022      	str	r2, [r4, #0]
 8010ac6:	f8cd a004 	str.w	sl, [sp, #4]
 8010aca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010ace:	4628      	mov	r0, r5
 8010ad0:	f7ff fd2e 	bl	8010530 <__cvt>
 8010ad4:	4680      	mov	r8, r0
 8010ad6:	e648      	b.n	801076a <_printf_float+0x112>

08010ad8 <_printf_common>:
 8010ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010adc:	4691      	mov	r9, r2
 8010ade:	461f      	mov	r7, r3
 8010ae0:	688a      	ldr	r2, [r1, #8]
 8010ae2:	690b      	ldr	r3, [r1, #16]
 8010ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	bfb8      	it	lt
 8010aec:	4613      	movlt	r3, r2
 8010aee:	f8c9 3000 	str.w	r3, [r9]
 8010af2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010af6:	4606      	mov	r6, r0
 8010af8:	460c      	mov	r4, r1
 8010afa:	b112      	cbz	r2, 8010b02 <_printf_common+0x2a>
 8010afc:	3301      	adds	r3, #1
 8010afe:	f8c9 3000 	str.w	r3, [r9]
 8010b02:	6823      	ldr	r3, [r4, #0]
 8010b04:	0699      	lsls	r1, r3, #26
 8010b06:	bf42      	ittt	mi
 8010b08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010b0c:	3302      	addmi	r3, #2
 8010b0e:	f8c9 3000 	strmi.w	r3, [r9]
 8010b12:	6825      	ldr	r5, [r4, #0]
 8010b14:	f015 0506 	ands.w	r5, r5, #6
 8010b18:	d107      	bne.n	8010b2a <_printf_common+0x52>
 8010b1a:	f104 0a19 	add.w	sl, r4, #25
 8010b1e:	68e3      	ldr	r3, [r4, #12]
 8010b20:	f8d9 2000 	ldr.w	r2, [r9]
 8010b24:	1a9b      	subs	r3, r3, r2
 8010b26:	42ab      	cmp	r3, r5
 8010b28:	dc28      	bgt.n	8010b7c <_printf_common+0xa4>
 8010b2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010b2e:	6822      	ldr	r2, [r4, #0]
 8010b30:	3300      	adds	r3, #0
 8010b32:	bf18      	it	ne
 8010b34:	2301      	movne	r3, #1
 8010b36:	0692      	lsls	r2, r2, #26
 8010b38:	d42d      	bmi.n	8010b96 <_printf_common+0xbe>
 8010b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b3e:	4639      	mov	r1, r7
 8010b40:	4630      	mov	r0, r6
 8010b42:	47c0      	blx	r8
 8010b44:	3001      	adds	r0, #1
 8010b46:	d020      	beq.n	8010b8a <_printf_common+0xb2>
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	68e5      	ldr	r5, [r4, #12]
 8010b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8010b50:	f003 0306 	and.w	r3, r3, #6
 8010b54:	2b04      	cmp	r3, #4
 8010b56:	bf08      	it	eq
 8010b58:	1aad      	subeq	r5, r5, r2
 8010b5a:	68a3      	ldr	r3, [r4, #8]
 8010b5c:	6922      	ldr	r2, [r4, #16]
 8010b5e:	bf0c      	ite	eq
 8010b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b64:	2500      	movne	r5, #0
 8010b66:	4293      	cmp	r3, r2
 8010b68:	bfc4      	itt	gt
 8010b6a:	1a9b      	subgt	r3, r3, r2
 8010b6c:	18ed      	addgt	r5, r5, r3
 8010b6e:	f04f 0900 	mov.w	r9, #0
 8010b72:	341a      	adds	r4, #26
 8010b74:	454d      	cmp	r5, r9
 8010b76:	d11a      	bne.n	8010bae <_printf_common+0xd6>
 8010b78:	2000      	movs	r0, #0
 8010b7a:	e008      	b.n	8010b8e <_printf_common+0xb6>
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	4652      	mov	r2, sl
 8010b80:	4639      	mov	r1, r7
 8010b82:	4630      	mov	r0, r6
 8010b84:	47c0      	blx	r8
 8010b86:	3001      	adds	r0, #1
 8010b88:	d103      	bne.n	8010b92 <_printf_common+0xba>
 8010b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b92:	3501      	adds	r5, #1
 8010b94:	e7c3      	b.n	8010b1e <_printf_common+0x46>
 8010b96:	18e1      	adds	r1, r4, r3
 8010b98:	1c5a      	adds	r2, r3, #1
 8010b9a:	2030      	movs	r0, #48	; 0x30
 8010b9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ba0:	4422      	add	r2, r4
 8010ba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010baa:	3302      	adds	r3, #2
 8010bac:	e7c5      	b.n	8010b3a <_printf_common+0x62>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	4622      	mov	r2, r4
 8010bb2:	4639      	mov	r1, r7
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	47c0      	blx	r8
 8010bb8:	3001      	adds	r0, #1
 8010bba:	d0e6      	beq.n	8010b8a <_printf_common+0xb2>
 8010bbc:	f109 0901 	add.w	r9, r9, #1
 8010bc0:	e7d8      	b.n	8010b74 <_printf_common+0x9c>
	...

08010bc4 <_printf_i>:
 8010bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010bcc:	460c      	mov	r4, r1
 8010bce:	7e09      	ldrb	r1, [r1, #24]
 8010bd0:	b085      	sub	sp, #20
 8010bd2:	296e      	cmp	r1, #110	; 0x6e
 8010bd4:	4617      	mov	r7, r2
 8010bd6:	4606      	mov	r6, r0
 8010bd8:	4698      	mov	r8, r3
 8010bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bdc:	f000 80b3 	beq.w	8010d46 <_printf_i+0x182>
 8010be0:	d822      	bhi.n	8010c28 <_printf_i+0x64>
 8010be2:	2963      	cmp	r1, #99	; 0x63
 8010be4:	d036      	beq.n	8010c54 <_printf_i+0x90>
 8010be6:	d80a      	bhi.n	8010bfe <_printf_i+0x3a>
 8010be8:	2900      	cmp	r1, #0
 8010bea:	f000 80b9 	beq.w	8010d60 <_printf_i+0x19c>
 8010bee:	2958      	cmp	r1, #88	; 0x58
 8010bf0:	f000 8083 	beq.w	8010cfa <_printf_i+0x136>
 8010bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010bfc:	e032      	b.n	8010c64 <_printf_i+0xa0>
 8010bfe:	2964      	cmp	r1, #100	; 0x64
 8010c00:	d001      	beq.n	8010c06 <_printf_i+0x42>
 8010c02:	2969      	cmp	r1, #105	; 0x69
 8010c04:	d1f6      	bne.n	8010bf4 <_printf_i+0x30>
 8010c06:	6820      	ldr	r0, [r4, #0]
 8010c08:	6813      	ldr	r3, [r2, #0]
 8010c0a:	0605      	lsls	r5, r0, #24
 8010c0c:	f103 0104 	add.w	r1, r3, #4
 8010c10:	d52a      	bpl.n	8010c68 <_printf_i+0xa4>
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	6011      	str	r1, [r2, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	da03      	bge.n	8010c22 <_printf_i+0x5e>
 8010c1a:	222d      	movs	r2, #45	; 0x2d
 8010c1c:	425b      	negs	r3, r3
 8010c1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010c22:	486f      	ldr	r0, [pc, #444]	; (8010de0 <_printf_i+0x21c>)
 8010c24:	220a      	movs	r2, #10
 8010c26:	e039      	b.n	8010c9c <_printf_i+0xd8>
 8010c28:	2973      	cmp	r1, #115	; 0x73
 8010c2a:	f000 809d 	beq.w	8010d68 <_printf_i+0x1a4>
 8010c2e:	d808      	bhi.n	8010c42 <_printf_i+0x7e>
 8010c30:	296f      	cmp	r1, #111	; 0x6f
 8010c32:	d020      	beq.n	8010c76 <_printf_i+0xb2>
 8010c34:	2970      	cmp	r1, #112	; 0x70
 8010c36:	d1dd      	bne.n	8010bf4 <_printf_i+0x30>
 8010c38:	6823      	ldr	r3, [r4, #0]
 8010c3a:	f043 0320 	orr.w	r3, r3, #32
 8010c3e:	6023      	str	r3, [r4, #0]
 8010c40:	e003      	b.n	8010c4a <_printf_i+0x86>
 8010c42:	2975      	cmp	r1, #117	; 0x75
 8010c44:	d017      	beq.n	8010c76 <_printf_i+0xb2>
 8010c46:	2978      	cmp	r1, #120	; 0x78
 8010c48:	d1d4      	bne.n	8010bf4 <_printf_i+0x30>
 8010c4a:	2378      	movs	r3, #120	; 0x78
 8010c4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c50:	4864      	ldr	r0, [pc, #400]	; (8010de4 <_printf_i+0x220>)
 8010c52:	e055      	b.n	8010d00 <_printf_i+0x13c>
 8010c54:	6813      	ldr	r3, [r2, #0]
 8010c56:	1d19      	adds	r1, r3, #4
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	6011      	str	r1, [r2, #0]
 8010c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c64:	2301      	movs	r3, #1
 8010c66:	e08c      	b.n	8010d82 <_printf_i+0x1be>
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	6011      	str	r1, [r2, #0]
 8010c6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010c70:	bf18      	it	ne
 8010c72:	b21b      	sxthne	r3, r3
 8010c74:	e7cf      	b.n	8010c16 <_printf_i+0x52>
 8010c76:	6813      	ldr	r3, [r2, #0]
 8010c78:	6825      	ldr	r5, [r4, #0]
 8010c7a:	1d18      	adds	r0, r3, #4
 8010c7c:	6010      	str	r0, [r2, #0]
 8010c7e:	0628      	lsls	r0, r5, #24
 8010c80:	d501      	bpl.n	8010c86 <_printf_i+0xc2>
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	e002      	b.n	8010c8c <_printf_i+0xc8>
 8010c86:	0668      	lsls	r0, r5, #25
 8010c88:	d5fb      	bpl.n	8010c82 <_printf_i+0xbe>
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	4854      	ldr	r0, [pc, #336]	; (8010de0 <_printf_i+0x21c>)
 8010c8e:	296f      	cmp	r1, #111	; 0x6f
 8010c90:	bf14      	ite	ne
 8010c92:	220a      	movne	r2, #10
 8010c94:	2208      	moveq	r2, #8
 8010c96:	2100      	movs	r1, #0
 8010c98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c9c:	6865      	ldr	r5, [r4, #4]
 8010c9e:	60a5      	str	r5, [r4, #8]
 8010ca0:	2d00      	cmp	r5, #0
 8010ca2:	f2c0 8095 	blt.w	8010dd0 <_printf_i+0x20c>
 8010ca6:	6821      	ldr	r1, [r4, #0]
 8010ca8:	f021 0104 	bic.w	r1, r1, #4
 8010cac:	6021      	str	r1, [r4, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d13d      	bne.n	8010d2e <_printf_i+0x16a>
 8010cb2:	2d00      	cmp	r5, #0
 8010cb4:	f040 808e 	bne.w	8010dd4 <_printf_i+0x210>
 8010cb8:	4665      	mov	r5, ip
 8010cba:	2a08      	cmp	r2, #8
 8010cbc:	d10b      	bne.n	8010cd6 <_printf_i+0x112>
 8010cbe:	6823      	ldr	r3, [r4, #0]
 8010cc0:	07db      	lsls	r3, r3, #31
 8010cc2:	d508      	bpl.n	8010cd6 <_printf_i+0x112>
 8010cc4:	6923      	ldr	r3, [r4, #16]
 8010cc6:	6862      	ldr	r2, [r4, #4]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	bfde      	ittt	le
 8010ccc:	2330      	movle	r3, #48	; 0x30
 8010cce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010cd2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010cd6:	ebac 0305 	sub.w	r3, ip, r5
 8010cda:	6123      	str	r3, [r4, #16]
 8010cdc:	f8cd 8000 	str.w	r8, [sp]
 8010ce0:	463b      	mov	r3, r7
 8010ce2:	aa03      	add	r2, sp, #12
 8010ce4:	4621      	mov	r1, r4
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	f7ff fef6 	bl	8010ad8 <_printf_common>
 8010cec:	3001      	adds	r0, #1
 8010cee:	d14d      	bne.n	8010d8c <_printf_i+0x1c8>
 8010cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cf4:	b005      	add	sp, #20
 8010cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cfa:	4839      	ldr	r0, [pc, #228]	; (8010de0 <_printf_i+0x21c>)
 8010cfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010d00:	6813      	ldr	r3, [r2, #0]
 8010d02:	6821      	ldr	r1, [r4, #0]
 8010d04:	1d1d      	adds	r5, r3, #4
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	6015      	str	r5, [r2, #0]
 8010d0a:	060a      	lsls	r2, r1, #24
 8010d0c:	d50b      	bpl.n	8010d26 <_printf_i+0x162>
 8010d0e:	07ca      	lsls	r2, r1, #31
 8010d10:	bf44      	itt	mi
 8010d12:	f041 0120 	orrmi.w	r1, r1, #32
 8010d16:	6021      	strmi	r1, [r4, #0]
 8010d18:	b91b      	cbnz	r3, 8010d22 <_printf_i+0x15e>
 8010d1a:	6822      	ldr	r2, [r4, #0]
 8010d1c:	f022 0220 	bic.w	r2, r2, #32
 8010d20:	6022      	str	r2, [r4, #0]
 8010d22:	2210      	movs	r2, #16
 8010d24:	e7b7      	b.n	8010c96 <_printf_i+0xd2>
 8010d26:	064d      	lsls	r5, r1, #25
 8010d28:	bf48      	it	mi
 8010d2a:	b29b      	uxthmi	r3, r3
 8010d2c:	e7ef      	b.n	8010d0e <_printf_i+0x14a>
 8010d2e:	4665      	mov	r5, ip
 8010d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d34:	fb02 3311 	mls	r3, r2, r1, r3
 8010d38:	5cc3      	ldrb	r3, [r0, r3]
 8010d3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010d3e:	460b      	mov	r3, r1
 8010d40:	2900      	cmp	r1, #0
 8010d42:	d1f5      	bne.n	8010d30 <_printf_i+0x16c>
 8010d44:	e7b9      	b.n	8010cba <_printf_i+0xf6>
 8010d46:	6813      	ldr	r3, [r2, #0]
 8010d48:	6825      	ldr	r5, [r4, #0]
 8010d4a:	6961      	ldr	r1, [r4, #20]
 8010d4c:	1d18      	adds	r0, r3, #4
 8010d4e:	6010      	str	r0, [r2, #0]
 8010d50:	0628      	lsls	r0, r5, #24
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	d501      	bpl.n	8010d5a <_printf_i+0x196>
 8010d56:	6019      	str	r1, [r3, #0]
 8010d58:	e002      	b.n	8010d60 <_printf_i+0x19c>
 8010d5a:	066a      	lsls	r2, r5, #25
 8010d5c:	d5fb      	bpl.n	8010d56 <_printf_i+0x192>
 8010d5e:	8019      	strh	r1, [r3, #0]
 8010d60:	2300      	movs	r3, #0
 8010d62:	6123      	str	r3, [r4, #16]
 8010d64:	4665      	mov	r5, ip
 8010d66:	e7b9      	b.n	8010cdc <_printf_i+0x118>
 8010d68:	6813      	ldr	r3, [r2, #0]
 8010d6a:	1d19      	adds	r1, r3, #4
 8010d6c:	6011      	str	r1, [r2, #0]
 8010d6e:	681d      	ldr	r5, [r3, #0]
 8010d70:	6862      	ldr	r2, [r4, #4]
 8010d72:	2100      	movs	r1, #0
 8010d74:	4628      	mov	r0, r5
 8010d76:	f7ef fa5b 	bl	8000230 <memchr>
 8010d7a:	b108      	cbz	r0, 8010d80 <_printf_i+0x1bc>
 8010d7c:	1b40      	subs	r0, r0, r5
 8010d7e:	6060      	str	r0, [r4, #4]
 8010d80:	6863      	ldr	r3, [r4, #4]
 8010d82:	6123      	str	r3, [r4, #16]
 8010d84:	2300      	movs	r3, #0
 8010d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d8a:	e7a7      	b.n	8010cdc <_printf_i+0x118>
 8010d8c:	6923      	ldr	r3, [r4, #16]
 8010d8e:	462a      	mov	r2, r5
 8010d90:	4639      	mov	r1, r7
 8010d92:	4630      	mov	r0, r6
 8010d94:	47c0      	blx	r8
 8010d96:	3001      	adds	r0, #1
 8010d98:	d0aa      	beq.n	8010cf0 <_printf_i+0x12c>
 8010d9a:	6823      	ldr	r3, [r4, #0]
 8010d9c:	079b      	lsls	r3, r3, #30
 8010d9e:	d413      	bmi.n	8010dc8 <_printf_i+0x204>
 8010da0:	68e0      	ldr	r0, [r4, #12]
 8010da2:	9b03      	ldr	r3, [sp, #12]
 8010da4:	4298      	cmp	r0, r3
 8010da6:	bfb8      	it	lt
 8010da8:	4618      	movlt	r0, r3
 8010daa:	e7a3      	b.n	8010cf4 <_printf_i+0x130>
 8010dac:	2301      	movs	r3, #1
 8010dae:	464a      	mov	r2, r9
 8010db0:	4639      	mov	r1, r7
 8010db2:	4630      	mov	r0, r6
 8010db4:	47c0      	blx	r8
 8010db6:	3001      	adds	r0, #1
 8010db8:	d09a      	beq.n	8010cf0 <_printf_i+0x12c>
 8010dba:	3501      	adds	r5, #1
 8010dbc:	68e3      	ldr	r3, [r4, #12]
 8010dbe:	9a03      	ldr	r2, [sp, #12]
 8010dc0:	1a9b      	subs	r3, r3, r2
 8010dc2:	42ab      	cmp	r3, r5
 8010dc4:	dcf2      	bgt.n	8010dac <_printf_i+0x1e8>
 8010dc6:	e7eb      	b.n	8010da0 <_printf_i+0x1dc>
 8010dc8:	2500      	movs	r5, #0
 8010dca:	f104 0919 	add.w	r9, r4, #25
 8010dce:	e7f5      	b.n	8010dbc <_printf_i+0x1f8>
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d1ac      	bne.n	8010d2e <_printf_i+0x16a>
 8010dd4:	7803      	ldrb	r3, [r0, #0]
 8010dd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010dda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010dde:	e76c      	b.n	8010cba <_printf_i+0xf6>
 8010de0:	0801575c 	.word	0x0801575c
 8010de4:	0801576d 	.word	0x0801576d

08010de8 <iprintf>:
 8010de8:	b40f      	push	{r0, r1, r2, r3}
 8010dea:	4b0a      	ldr	r3, [pc, #40]	; (8010e14 <iprintf+0x2c>)
 8010dec:	b513      	push	{r0, r1, r4, lr}
 8010dee:	681c      	ldr	r4, [r3, #0]
 8010df0:	b124      	cbz	r4, 8010dfc <iprintf+0x14>
 8010df2:	69a3      	ldr	r3, [r4, #24]
 8010df4:	b913      	cbnz	r3, 8010dfc <iprintf+0x14>
 8010df6:	4620      	mov	r0, r4
 8010df8:	f001 f8aa 	bl	8011f50 <__sinit>
 8010dfc:	ab05      	add	r3, sp, #20
 8010dfe:	9a04      	ldr	r2, [sp, #16]
 8010e00:	68a1      	ldr	r1, [r4, #8]
 8010e02:	9301      	str	r3, [sp, #4]
 8010e04:	4620      	mov	r0, r4
 8010e06:	f001 febf 	bl	8012b88 <_vfiprintf_r>
 8010e0a:	b002      	add	sp, #8
 8010e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e10:	b004      	add	sp, #16
 8010e12:	4770      	bx	lr
 8010e14:	20001c38 	.word	0x20001c38

08010e18 <_puts_r>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	460e      	mov	r6, r1
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	b118      	cbz	r0, 8010e28 <_puts_r+0x10>
 8010e20:	6983      	ldr	r3, [r0, #24]
 8010e22:	b90b      	cbnz	r3, 8010e28 <_puts_r+0x10>
 8010e24:	f001 f894 	bl	8011f50 <__sinit>
 8010e28:	69ab      	ldr	r3, [r5, #24]
 8010e2a:	68ac      	ldr	r4, [r5, #8]
 8010e2c:	b913      	cbnz	r3, 8010e34 <_puts_r+0x1c>
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f001 f88e 	bl	8011f50 <__sinit>
 8010e34:	4b23      	ldr	r3, [pc, #140]	; (8010ec4 <_puts_r+0xac>)
 8010e36:	429c      	cmp	r4, r3
 8010e38:	d117      	bne.n	8010e6a <_puts_r+0x52>
 8010e3a:	686c      	ldr	r4, [r5, #4]
 8010e3c:	89a3      	ldrh	r3, [r4, #12]
 8010e3e:	071b      	lsls	r3, r3, #28
 8010e40:	d51d      	bpl.n	8010e7e <_puts_r+0x66>
 8010e42:	6923      	ldr	r3, [r4, #16]
 8010e44:	b1db      	cbz	r3, 8010e7e <_puts_r+0x66>
 8010e46:	3e01      	subs	r6, #1
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e4e:	3b01      	subs	r3, #1
 8010e50:	60a3      	str	r3, [r4, #8]
 8010e52:	b9e9      	cbnz	r1, 8010e90 <_puts_r+0x78>
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	da2e      	bge.n	8010eb6 <_puts_r+0x9e>
 8010e58:	4622      	mov	r2, r4
 8010e5a:	210a      	movs	r1, #10
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	f000 f883 	bl	8010f68 <__swbuf_r>
 8010e62:	3001      	adds	r0, #1
 8010e64:	d011      	beq.n	8010e8a <_puts_r+0x72>
 8010e66:	200a      	movs	r0, #10
 8010e68:	e011      	b.n	8010e8e <_puts_r+0x76>
 8010e6a:	4b17      	ldr	r3, [pc, #92]	; (8010ec8 <_puts_r+0xb0>)
 8010e6c:	429c      	cmp	r4, r3
 8010e6e:	d101      	bne.n	8010e74 <_puts_r+0x5c>
 8010e70:	68ac      	ldr	r4, [r5, #8]
 8010e72:	e7e3      	b.n	8010e3c <_puts_r+0x24>
 8010e74:	4b15      	ldr	r3, [pc, #84]	; (8010ecc <_puts_r+0xb4>)
 8010e76:	429c      	cmp	r4, r3
 8010e78:	bf08      	it	eq
 8010e7a:	68ec      	ldreq	r4, [r5, #12]
 8010e7c:	e7de      	b.n	8010e3c <_puts_r+0x24>
 8010e7e:	4621      	mov	r1, r4
 8010e80:	4628      	mov	r0, r5
 8010e82:	f000 f8c3 	bl	801100c <__swsetup_r>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d0dd      	beq.n	8010e46 <_puts_r+0x2e>
 8010e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e8e:	bd70      	pop	{r4, r5, r6, pc}
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	da04      	bge.n	8010e9e <_puts_r+0x86>
 8010e94:	69a2      	ldr	r2, [r4, #24]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	dc06      	bgt.n	8010ea8 <_puts_r+0x90>
 8010e9a:	290a      	cmp	r1, #10
 8010e9c:	d004      	beq.n	8010ea8 <_puts_r+0x90>
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	1c5a      	adds	r2, r3, #1
 8010ea2:	6022      	str	r2, [r4, #0]
 8010ea4:	7019      	strb	r1, [r3, #0]
 8010ea6:	e7cf      	b.n	8010e48 <_puts_r+0x30>
 8010ea8:	4622      	mov	r2, r4
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 f85c 	bl	8010f68 <__swbuf_r>
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	d1c9      	bne.n	8010e48 <_puts_r+0x30>
 8010eb4:	e7e9      	b.n	8010e8a <_puts_r+0x72>
 8010eb6:	6823      	ldr	r3, [r4, #0]
 8010eb8:	200a      	movs	r0, #10
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	6022      	str	r2, [r4, #0]
 8010ebe:	7018      	strb	r0, [r3, #0]
 8010ec0:	e7e5      	b.n	8010e8e <_puts_r+0x76>
 8010ec2:	bf00      	nop
 8010ec4:	080157ac 	.word	0x080157ac
 8010ec8:	080157cc 	.word	0x080157cc
 8010ecc:	0801578c 	.word	0x0801578c

08010ed0 <puts>:
 8010ed0:	4b02      	ldr	r3, [pc, #8]	; (8010edc <puts+0xc>)
 8010ed2:	4601      	mov	r1, r0
 8010ed4:	6818      	ldr	r0, [r3, #0]
 8010ed6:	f7ff bf9f 	b.w	8010e18 <_puts_r>
 8010eda:	bf00      	nop
 8010edc:	20001c38 	.word	0x20001c38

08010ee0 <sniprintf>:
 8010ee0:	b40c      	push	{r2, r3}
 8010ee2:	b530      	push	{r4, r5, lr}
 8010ee4:	4b17      	ldr	r3, [pc, #92]	; (8010f44 <sniprintf+0x64>)
 8010ee6:	1e0c      	subs	r4, r1, #0
 8010ee8:	b09d      	sub	sp, #116	; 0x74
 8010eea:	681d      	ldr	r5, [r3, #0]
 8010eec:	da08      	bge.n	8010f00 <sniprintf+0x20>
 8010eee:	238b      	movs	r3, #139	; 0x8b
 8010ef0:	602b      	str	r3, [r5, #0]
 8010ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ef6:	b01d      	add	sp, #116	; 0x74
 8010ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010efc:	b002      	add	sp, #8
 8010efe:	4770      	bx	lr
 8010f00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010f04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010f08:	bf14      	ite	ne
 8010f0a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010f0e:	4623      	moveq	r3, r4
 8010f10:	9304      	str	r3, [sp, #16]
 8010f12:	9307      	str	r3, [sp, #28]
 8010f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f18:	9002      	str	r0, [sp, #8]
 8010f1a:	9006      	str	r0, [sp, #24]
 8010f1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010f20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010f22:	ab21      	add	r3, sp, #132	; 0x84
 8010f24:	a902      	add	r1, sp, #8
 8010f26:	4628      	mov	r0, r5
 8010f28:	9301      	str	r3, [sp, #4]
 8010f2a:	f001 fd0b 	bl	8012944 <_svfiprintf_r>
 8010f2e:	1c43      	adds	r3, r0, #1
 8010f30:	bfbc      	itt	lt
 8010f32:	238b      	movlt	r3, #139	; 0x8b
 8010f34:	602b      	strlt	r3, [r5, #0]
 8010f36:	2c00      	cmp	r4, #0
 8010f38:	d0dd      	beq.n	8010ef6 <sniprintf+0x16>
 8010f3a:	9b02      	ldr	r3, [sp, #8]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	701a      	strb	r2, [r3, #0]
 8010f40:	e7d9      	b.n	8010ef6 <sniprintf+0x16>
 8010f42:	bf00      	nop
 8010f44:	20001c38 	.word	0x20001c38

08010f48 <strcat>:
 8010f48:	b510      	push	{r4, lr}
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	781a      	ldrb	r2, [r3, #0]
 8010f4e:	1c5c      	adds	r4, r3, #1
 8010f50:	b93a      	cbnz	r2, 8010f62 <strcat+0x1a>
 8010f52:	3b01      	subs	r3, #1
 8010f54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f5c:	2a00      	cmp	r2, #0
 8010f5e:	d1f9      	bne.n	8010f54 <strcat+0xc>
 8010f60:	bd10      	pop	{r4, pc}
 8010f62:	4623      	mov	r3, r4
 8010f64:	e7f2      	b.n	8010f4c <strcat+0x4>
	...

08010f68 <__swbuf_r>:
 8010f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f6a:	460e      	mov	r6, r1
 8010f6c:	4614      	mov	r4, r2
 8010f6e:	4605      	mov	r5, r0
 8010f70:	b118      	cbz	r0, 8010f7a <__swbuf_r+0x12>
 8010f72:	6983      	ldr	r3, [r0, #24]
 8010f74:	b90b      	cbnz	r3, 8010f7a <__swbuf_r+0x12>
 8010f76:	f000 ffeb 	bl	8011f50 <__sinit>
 8010f7a:	4b21      	ldr	r3, [pc, #132]	; (8011000 <__swbuf_r+0x98>)
 8010f7c:	429c      	cmp	r4, r3
 8010f7e:	d12a      	bne.n	8010fd6 <__swbuf_r+0x6e>
 8010f80:	686c      	ldr	r4, [r5, #4]
 8010f82:	69a3      	ldr	r3, [r4, #24]
 8010f84:	60a3      	str	r3, [r4, #8]
 8010f86:	89a3      	ldrh	r3, [r4, #12]
 8010f88:	071a      	lsls	r2, r3, #28
 8010f8a:	d52e      	bpl.n	8010fea <__swbuf_r+0x82>
 8010f8c:	6923      	ldr	r3, [r4, #16]
 8010f8e:	b363      	cbz	r3, 8010fea <__swbuf_r+0x82>
 8010f90:	6923      	ldr	r3, [r4, #16]
 8010f92:	6820      	ldr	r0, [r4, #0]
 8010f94:	1ac0      	subs	r0, r0, r3
 8010f96:	6963      	ldr	r3, [r4, #20]
 8010f98:	b2f6      	uxtb	r6, r6
 8010f9a:	4283      	cmp	r3, r0
 8010f9c:	4637      	mov	r7, r6
 8010f9e:	dc04      	bgt.n	8010faa <__swbuf_r+0x42>
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f000 ff6a 	bl	8011e7c <_fflush_r>
 8010fa8:	bb28      	cbnz	r0, 8010ff6 <__swbuf_r+0x8e>
 8010faa:	68a3      	ldr	r3, [r4, #8]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	60a3      	str	r3, [r4, #8]
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	1c5a      	adds	r2, r3, #1
 8010fb4:	6022      	str	r2, [r4, #0]
 8010fb6:	701e      	strb	r6, [r3, #0]
 8010fb8:	6963      	ldr	r3, [r4, #20]
 8010fba:	3001      	adds	r0, #1
 8010fbc:	4283      	cmp	r3, r0
 8010fbe:	d004      	beq.n	8010fca <__swbuf_r+0x62>
 8010fc0:	89a3      	ldrh	r3, [r4, #12]
 8010fc2:	07db      	lsls	r3, r3, #31
 8010fc4:	d519      	bpl.n	8010ffa <__swbuf_r+0x92>
 8010fc6:	2e0a      	cmp	r6, #10
 8010fc8:	d117      	bne.n	8010ffa <__swbuf_r+0x92>
 8010fca:	4621      	mov	r1, r4
 8010fcc:	4628      	mov	r0, r5
 8010fce:	f000 ff55 	bl	8011e7c <_fflush_r>
 8010fd2:	b190      	cbz	r0, 8010ffa <__swbuf_r+0x92>
 8010fd4:	e00f      	b.n	8010ff6 <__swbuf_r+0x8e>
 8010fd6:	4b0b      	ldr	r3, [pc, #44]	; (8011004 <__swbuf_r+0x9c>)
 8010fd8:	429c      	cmp	r4, r3
 8010fda:	d101      	bne.n	8010fe0 <__swbuf_r+0x78>
 8010fdc:	68ac      	ldr	r4, [r5, #8]
 8010fde:	e7d0      	b.n	8010f82 <__swbuf_r+0x1a>
 8010fe0:	4b09      	ldr	r3, [pc, #36]	; (8011008 <__swbuf_r+0xa0>)
 8010fe2:	429c      	cmp	r4, r3
 8010fe4:	bf08      	it	eq
 8010fe6:	68ec      	ldreq	r4, [r5, #12]
 8010fe8:	e7cb      	b.n	8010f82 <__swbuf_r+0x1a>
 8010fea:	4621      	mov	r1, r4
 8010fec:	4628      	mov	r0, r5
 8010fee:	f000 f80d 	bl	801100c <__swsetup_r>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d0cc      	beq.n	8010f90 <__swbuf_r+0x28>
 8010ff6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ffe:	bf00      	nop
 8011000:	080157ac 	.word	0x080157ac
 8011004:	080157cc 	.word	0x080157cc
 8011008:	0801578c 	.word	0x0801578c

0801100c <__swsetup_r>:
 801100c:	4b32      	ldr	r3, [pc, #200]	; (80110d8 <__swsetup_r+0xcc>)
 801100e:	b570      	push	{r4, r5, r6, lr}
 8011010:	681d      	ldr	r5, [r3, #0]
 8011012:	4606      	mov	r6, r0
 8011014:	460c      	mov	r4, r1
 8011016:	b125      	cbz	r5, 8011022 <__swsetup_r+0x16>
 8011018:	69ab      	ldr	r3, [r5, #24]
 801101a:	b913      	cbnz	r3, 8011022 <__swsetup_r+0x16>
 801101c:	4628      	mov	r0, r5
 801101e:	f000 ff97 	bl	8011f50 <__sinit>
 8011022:	4b2e      	ldr	r3, [pc, #184]	; (80110dc <__swsetup_r+0xd0>)
 8011024:	429c      	cmp	r4, r3
 8011026:	d10f      	bne.n	8011048 <__swsetup_r+0x3c>
 8011028:	686c      	ldr	r4, [r5, #4]
 801102a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801102e:	b29a      	uxth	r2, r3
 8011030:	0715      	lsls	r5, r2, #28
 8011032:	d42c      	bmi.n	801108e <__swsetup_r+0x82>
 8011034:	06d0      	lsls	r0, r2, #27
 8011036:	d411      	bmi.n	801105c <__swsetup_r+0x50>
 8011038:	2209      	movs	r2, #9
 801103a:	6032      	str	r2, [r6, #0]
 801103c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011040:	81a3      	strh	r3, [r4, #12]
 8011042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011046:	e03e      	b.n	80110c6 <__swsetup_r+0xba>
 8011048:	4b25      	ldr	r3, [pc, #148]	; (80110e0 <__swsetup_r+0xd4>)
 801104a:	429c      	cmp	r4, r3
 801104c:	d101      	bne.n	8011052 <__swsetup_r+0x46>
 801104e:	68ac      	ldr	r4, [r5, #8]
 8011050:	e7eb      	b.n	801102a <__swsetup_r+0x1e>
 8011052:	4b24      	ldr	r3, [pc, #144]	; (80110e4 <__swsetup_r+0xd8>)
 8011054:	429c      	cmp	r4, r3
 8011056:	bf08      	it	eq
 8011058:	68ec      	ldreq	r4, [r5, #12]
 801105a:	e7e6      	b.n	801102a <__swsetup_r+0x1e>
 801105c:	0751      	lsls	r1, r2, #29
 801105e:	d512      	bpl.n	8011086 <__swsetup_r+0x7a>
 8011060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011062:	b141      	cbz	r1, 8011076 <__swsetup_r+0x6a>
 8011064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011068:	4299      	cmp	r1, r3
 801106a:	d002      	beq.n	8011072 <__swsetup_r+0x66>
 801106c:	4630      	mov	r0, r6
 801106e:	f001 fb67 	bl	8012740 <_free_r>
 8011072:	2300      	movs	r3, #0
 8011074:	6363      	str	r3, [r4, #52]	; 0x34
 8011076:	89a3      	ldrh	r3, [r4, #12]
 8011078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801107c:	81a3      	strh	r3, [r4, #12]
 801107e:	2300      	movs	r3, #0
 8011080:	6063      	str	r3, [r4, #4]
 8011082:	6923      	ldr	r3, [r4, #16]
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	89a3      	ldrh	r3, [r4, #12]
 8011088:	f043 0308 	orr.w	r3, r3, #8
 801108c:	81a3      	strh	r3, [r4, #12]
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	b94b      	cbnz	r3, 80110a6 <__swsetup_r+0x9a>
 8011092:	89a3      	ldrh	r3, [r4, #12]
 8011094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801109c:	d003      	beq.n	80110a6 <__swsetup_r+0x9a>
 801109e:	4621      	mov	r1, r4
 80110a0:	4630      	mov	r0, r6
 80110a2:	f001 f811 	bl	80120c8 <__smakebuf_r>
 80110a6:	89a2      	ldrh	r2, [r4, #12]
 80110a8:	f012 0301 	ands.w	r3, r2, #1
 80110ac:	d00c      	beq.n	80110c8 <__swsetup_r+0xbc>
 80110ae:	2300      	movs	r3, #0
 80110b0:	60a3      	str	r3, [r4, #8]
 80110b2:	6963      	ldr	r3, [r4, #20]
 80110b4:	425b      	negs	r3, r3
 80110b6:	61a3      	str	r3, [r4, #24]
 80110b8:	6923      	ldr	r3, [r4, #16]
 80110ba:	b953      	cbnz	r3, 80110d2 <__swsetup_r+0xc6>
 80110bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80110c4:	d1ba      	bne.n	801103c <__swsetup_r+0x30>
 80110c6:	bd70      	pop	{r4, r5, r6, pc}
 80110c8:	0792      	lsls	r2, r2, #30
 80110ca:	bf58      	it	pl
 80110cc:	6963      	ldrpl	r3, [r4, #20]
 80110ce:	60a3      	str	r3, [r4, #8]
 80110d0:	e7f2      	b.n	80110b8 <__swsetup_r+0xac>
 80110d2:	2000      	movs	r0, #0
 80110d4:	e7f7      	b.n	80110c6 <__swsetup_r+0xba>
 80110d6:	bf00      	nop
 80110d8:	20001c38 	.word	0x20001c38
 80110dc:	080157ac 	.word	0x080157ac
 80110e0:	080157cc 	.word	0x080157cc
 80110e4:	0801578c 	.word	0x0801578c

080110e8 <quorem>:
 80110e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	6903      	ldr	r3, [r0, #16]
 80110ee:	690c      	ldr	r4, [r1, #16]
 80110f0:	42a3      	cmp	r3, r4
 80110f2:	4680      	mov	r8, r0
 80110f4:	f2c0 8082 	blt.w	80111fc <quorem+0x114>
 80110f8:	3c01      	subs	r4, #1
 80110fa:	f101 0714 	add.w	r7, r1, #20
 80110fe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011102:	f100 0614 	add.w	r6, r0, #20
 8011106:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801110a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801110e:	eb06 030c 	add.w	r3, r6, ip
 8011112:	3501      	adds	r5, #1
 8011114:	eb07 090c 	add.w	r9, r7, ip
 8011118:	9301      	str	r3, [sp, #4]
 801111a:	fbb0 f5f5 	udiv	r5, r0, r5
 801111e:	b395      	cbz	r5, 8011186 <quorem+0x9e>
 8011120:	f04f 0a00 	mov.w	sl, #0
 8011124:	4638      	mov	r0, r7
 8011126:	46b6      	mov	lr, r6
 8011128:	46d3      	mov	fp, sl
 801112a:	f850 2b04 	ldr.w	r2, [r0], #4
 801112e:	b293      	uxth	r3, r2
 8011130:	fb05 a303 	mla	r3, r5, r3, sl
 8011134:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011138:	b29b      	uxth	r3, r3
 801113a:	ebab 0303 	sub.w	r3, fp, r3
 801113e:	0c12      	lsrs	r2, r2, #16
 8011140:	f8de b000 	ldr.w	fp, [lr]
 8011144:	fb05 a202 	mla	r2, r5, r2, sl
 8011148:	fa13 f38b 	uxtah	r3, r3, fp
 801114c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011150:	fa1f fb82 	uxth.w	fp, r2
 8011154:	f8de 2000 	ldr.w	r2, [lr]
 8011158:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801115c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011160:	b29b      	uxth	r3, r3
 8011162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011166:	4581      	cmp	r9, r0
 8011168:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801116c:	f84e 3b04 	str.w	r3, [lr], #4
 8011170:	d2db      	bcs.n	801112a <quorem+0x42>
 8011172:	f856 300c 	ldr.w	r3, [r6, ip]
 8011176:	b933      	cbnz	r3, 8011186 <quorem+0x9e>
 8011178:	9b01      	ldr	r3, [sp, #4]
 801117a:	3b04      	subs	r3, #4
 801117c:	429e      	cmp	r6, r3
 801117e:	461a      	mov	r2, r3
 8011180:	d330      	bcc.n	80111e4 <quorem+0xfc>
 8011182:	f8c8 4010 	str.w	r4, [r8, #16]
 8011186:	4640      	mov	r0, r8
 8011188:	f001 fa06 	bl	8012598 <__mcmp>
 801118c:	2800      	cmp	r0, #0
 801118e:	db25      	blt.n	80111dc <quorem+0xf4>
 8011190:	3501      	adds	r5, #1
 8011192:	4630      	mov	r0, r6
 8011194:	f04f 0c00 	mov.w	ip, #0
 8011198:	f857 2b04 	ldr.w	r2, [r7], #4
 801119c:	f8d0 e000 	ldr.w	lr, [r0]
 80111a0:	b293      	uxth	r3, r2
 80111a2:	ebac 0303 	sub.w	r3, ip, r3
 80111a6:	0c12      	lsrs	r2, r2, #16
 80111a8:	fa13 f38e 	uxtah	r3, r3, lr
 80111ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80111b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111ba:	45b9      	cmp	r9, r7
 80111bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80111c0:	f840 3b04 	str.w	r3, [r0], #4
 80111c4:	d2e8      	bcs.n	8011198 <quorem+0xb0>
 80111c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80111ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80111ce:	b92a      	cbnz	r2, 80111dc <quorem+0xf4>
 80111d0:	3b04      	subs	r3, #4
 80111d2:	429e      	cmp	r6, r3
 80111d4:	461a      	mov	r2, r3
 80111d6:	d30b      	bcc.n	80111f0 <quorem+0x108>
 80111d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80111dc:	4628      	mov	r0, r5
 80111de:	b003      	add	sp, #12
 80111e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111e4:	6812      	ldr	r2, [r2, #0]
 80111e6:	3b04      	subs	r3, #4
 80111e8:	2a00      	cmp	r2, #0
 80111ea:	d1ca      	bne.n	8011182 <quorem+0x9a>
 80111ec:	3c01      	subs	r4, #1
 80111ee:	e7c5      	b.n	801117c <quorem+0x94>
 80111f0:	6812      	ldr	r2, [r2, #0]
 80111f2:	3b04      	subs	r3, #4
 80111f4:	2a00      	cmp	r2, #0
 80111f6:	d1ef      	bne.n	80111d8 <quorem+0xf0>
 80111f8:	3c01      	subs	r4, #1
 80111fa:	e7ea      	b.n	80111d2 <quorem+0xea>
 80111fc:	2000      	movs	r0, #0
 80111fe:	e7ee      	b.n	80111de <quorem+0xf6>

08011200 <_dtoa_r>:
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	ec57 6b10 	vmov	r6, r7, d0
 8011208:	b097      	sub	sp, #92	; 0x5c
 801120a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801120c:	9106      	str	r1, [sp, #24]
 801120e:	4604      	mov	r4, r0
 8011210:	920b      	str	r2, [sp, #44]	; 0x2c
 8011212:	9312      	str	r3, [sp, #72]	; 0x48
 8011214:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011218:	e9cd 6700 	strd	r6, r7, [sp]
 801121c:	b93d      	cbnz	r5, 801122e <_dtoa_r+0x2e>
 801121e:	2010      	movs	r0, #16
 8011220:	f000 ff92 	bl	8012148 <malloc>
 8011224:	6260      	str	r0, [r4, #36]	; 0x24
 8011226:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801122a:	6005      	str	r5, [r0, #0]
 801122c:	60c5      	str	r5, [r0, #12]
 801122e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011230:	6819      	ldr	r1, [r3, #0]
 8011232:	b151      	cbz	r1, 801124a <_dtoa_r+0x4a>
 8011234:	685a      	ldr	r2, [r3, #4]
 8011236:	604a      	str	r2, [r1, #4]
 8011238:	2301      	movs	r3, #1
 801123a:	4093      	lsls	r3, r2
 801123c:	608b      	str	r3, [r1, #8]
 801123e:	4620      	mov	r0, r4
 8011240:	f000 ffc9 	bl	80121d6 <_Bfree>
 8011244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011246:	2200      	movs	r2, #0
 8011248:	601a      	str	r2, [r3, #0]
 801124a:	1e3b      	subs	r3, r7, #0
 801124c:	bfbb      	ittet	lt
 801124e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011252:	9301      	strlt	r3, [sp, #4]
 8011254:	2300      	movge	r3, #0
 8011256:	2201      	movlt	r2, #1
 8011258:	bfac      	ite	ge
 801125a:	f8c8 3000 	strge.w	r3, [r8]
 801125e:	f8c8 2000 	strlt.w	r2, [r8]
 8011262:	4baf      	ldr	r3, [pc, #700]	; (8011520 <_dtoa_r+0x320>)
 8011264:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011268:	ea33 0308 	bics.w	r3, r3, r8
 801126c:	d114      	bne.n	8011298 <_dtoa_r+0x98>
 801126e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011270:	f242 730f 	movw	r3, #9999	; 0x270f
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	9b00      	ldr	r3, [sp, #0]
 8011278:	b923      	cbnz	r3, 8011284 <_dtoa_r+0x84>
 801127a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801127e:	2800      	cmp	r0, #0
 8011280:	f000 8542 	beq.w	8011d08 <_dtoa_r+0xb08>
 8011284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011286:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011534 <_dtoa_r+0x334>
 801128a:	2b00      	cmp	r3, #0
 801128c:	f000 8544 	beq.w	8011d18 <_dtoa_r+0xb18>
 8011290:	f10b 0303 	add.w	r3, fp, #3
 8011294:	f000 bd3e 	b.w	8011d14 <_dtoa_r+0xb14>
 8011298:	e9dd 6700 	ldrd	r6, r7, [sp]
 801129c:	2200      	movs	r2, #0
 801129e:	2300      	movs	r3, #0
 80112a0:	4630      	mov	r0, r6
 80112a2:	4639      	mov	r1, r7
 80112a4:	f7ef fc38 	bl	8000b18 <__aeabi_dcmpeq>
 80112a8:	4681      	mov	r9, r0
 80112aa:	b168      	cbz	r0, 80112c8 <_dtoa_r+0xc8>
 80112ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112ae:	2301      	movs	r3, #1
 80112b0:	6013      	str	r3, [r2, #0]
 80112b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	f000 8524 	beq.w	8011d02 <_dtoa_r+0xb02>
 80112ba:	4b9a      	ldr	r3, [pc, #616]	; (8011524 <_dtoa_r+0x324>)
 80112bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80112be:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80112c2:	6013      	str	r3, [r2, #0]
 80112c4:	f000 bd28 	b.w	8011d18 <_dtoa_r+0xb18>
 80112c8:	aa14      	add	r2, sp, #80	; 0x50
 80112ca:	a915      	add	r1, sp, #84	; 0x54
 80112cc:	ec47 6b10 	vmov	d0, r6, r7
 80112d0:	4620      	mov	r0, r4
 80112d2:	f001 f9d8 	bl	8012686 <__d2b>
 80112d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80112da:	9004      	str	r0, [sp, #16]
 80112dc:	2d00      	cmp	r5, #0
 80112de:	d07c      	beq.n	80113da <_dtoa_r+0x1da>
 80112e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80112e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80112e8:	46b2      	mov	sl, r6
 80112ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80112ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80112f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80112f6:	2200      	movs	r2, #0
 80112f8:	4b8b      	ldr	r3, [pc, #556]	; (8011528 <_dtoa_r+0x328>)
 80112fa:	4650      	mov	r0, sl
 80112fc:	4659      	mov	r1, fp
 80112fe:	f7ee ffeb 	bl	80002d8 <__aeabi_dsub>
 8011302:	a381      	add	r3, pc, #516	; (adr r3, 8011508 <_dtoa_r+0x308>)
 8011304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011308:	f7ef f99e 	bl	8000648 <__aeabi_dmul>
 801130c:	a380      	add	r3, pc, #512	; (adr r3, 8011510 <_dtoa_r+0x310>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	f7ee ffe3 	bl	80002dc <__adddf3>
 8011316:	4606      	mov	r6, r0
 8011318:	4628      	mov	r0, r5
 801131a:	460f      	mov	r7, r1
 801131c:	f7ef f92a 	bl	8000574 <__aeabi_i2d>
 8011320:	a37d      	add	r3, pc, #500	; (adr r3, 8011518 <_dtoa_r+0x318>)
 8011322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011326:	f7ef f98f 	bl	8000648 <__aeabi_dmul>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	4630      	mov	r0, r6
 8011330:	4639      	mov	r1, r7
 8011332:	f7ee ffd3 	bl	80002dc <__adddf3>
 8011336:	4606      	mov	r6, r0
 8011338:	460f      	mov	r7, r1
 801133a:	f7ef fc35 	bl	8000ba8 <__aeabi_d2iz>
 801133e:	2200      	movs	r2, #0
 8011340:	4682      	mov	sl, r0
 8011342:	2300      	movs	r3, #0
 8011344:	4630      	mov	r0, r6
 8011346:	4639      	mov	r1, r7
 8011348:	f7ef fbf0 	bl	8000b2c <__aeabi_dcmplt>
 801134c:	b148      	cbz	r0, 8011362 <_dtoa_r+0x162>
 801134e:	4650      	mov	r0, sl
 8011350:	f7ef f910 	bl	8000574 <__aeabi_i2d>
 8011354:	4632      	mov	r2, r6
 8011356:	463b      	mov	r3, r7
 8011358:	f7ef fbde 	bl	8000b18 <__aeabi_dcmpeq>
 801135c:	b908      	cbnz	r0, 8011362 <_dtoa_r+0x162>
 801135e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011362:	f1ba 0f16 	cmp.w	sl, #22
 8011366:	d859      	bhi.n	801141c <_dtoa_r+0x21c>
 8011368:	4970      	ldr	r1, [pc, #448]	; (801152c <_dtoa_r+0x32c>)
 801136a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801136e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011376:	f7ef fbf7 	bl	8000b68 <__aeabi_dcmpgt>
 801137a:	2800      	cmp	r0, #0
 801137c:	d050      	beq.n	8011420 <_dtoa_r+0x220>
 801137e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011382:	2300      	movs	r3, #0
 8011384:	930f      	str	r3, [sp, #60]	; 0x3c
 8011386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011388:	1b5d      	subs	r5, r3, r5
 801138a:	f1b5 0801 	subs.w	r8, r5, #1
 801138e:	bf49      	itett	mi
 8011390:	f1c5 0301 	rsbmi	r3, r5, #1
 8011394:	2300      	movpl	r3, #0
 8011396:	9305      	strmi	r3, [sp, #20]
 8011398:	f04f 0800 	movmi.w	r8, #0
 801139c:	bf58      	it	pl
 801139e:	9305      	strpl	r3, [sp, #20]
 80113a0:	f1ba 0f00 	cmp.w	sl, #0
 80113a4:	db3e      	blt.n	8011424 <_dtoa_r+0x224>
 80113a6:	2300      	movs	r3, #0
 80113a8:	44d0      	add	r8, sl
 80113aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80113ae:	9307      	str	r3, [sp, #28]
 80113b0:	9b06      	ldr	r3, [sp, #24]
 80113b2:	2b09      	cmp	r3, #9
 80113b4:	f200 8090 	bhi.w	80114d8 <_dtoa_r+0x2d8>
 80113b8:	2b05      	cmp	r3, #5
 80113ba:	bfc4      	itt	gt
 80113bc:	3b04      	subgt	r3, #4
 80113be:	9306      	strgt	r3, [sp, #24]
 80113c0:	9b06      	ldr	r3, [sp, #24]
 80113c2:	f1a3 0302 	sub.w	r3, r3, #2
 80113c6:	bfcc      	ite	gt
 80113c8:	2500      	movgt	r5, #0
 80113ca:	2501      	movle	r5, #1
 80113cc:	2b03      	cmp	r3, #3
 80113ce:	f200 808f 	bhi.w	80114f0 <_dtoa_r+0x2f0>
 80113d2:	e8df f003 	tbb	[pc, r3]
 80113d6:	7f7d      	.short	0x7f7d
 80113d8:	7131      	.short	0x7131
 80113da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80113de:	441d      	add	r5, r3
 80113e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80113e4:	2820      	cmp	r0, #32
 80113e6:	dd13      	ble.n	8011410 <_dtoa_r+0x210>
 80113e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80113ec:	9b00      	ldr	r3, [sp, #0]
 80113ee:	fa08 f800 	lsl.w	r8, r8, r0
 80113f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80113f6:	fa23 f000 	lsr.w	r0, r3, r0
 80113fa:	ea48 0000 	orr.w	r0, r8, r0
 80113fe:	f7ef f8a9 	bl	8000554 <__aeabi_ui2d>
 8011402:	2301      	movs	r3, #1
 8011404:	4682      	mov	sl, r0
 8011406:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801140a:	3d01      	subs	r5, #1
 801140c:	9313      	str	r3, [sp, #76]	; 0x4c
 801140e:	e772      	b.n	80112f6 <_dtoa_r+0xf6>
 8011410:	9b00      	ldr	r3, [sp, #0]
 8011412:	f1c0 0020 	rsb	r0, r0, #32
 8011416:	fa03 f000 	lsl.w	r0, r3, r0
 801141a:	e7f0      	b.n	80113fe <_dtoa_r+0x1fe>
 801141c:	2301      	movs	r3, #1
 801141e:	e7b1      	b.n	8011384 <_dtoa_r+0x184>
 8011420:	900f      	str	r0, [sp, #60]	; 0x3c
 8011422:	e7b0      	b.n	8011386 <_dtoa_r+0x186>
 8011424:	9b05      	ldr	r3, [sp, #20]
 8011426:	eba3 030a 	sub.w	r3, r3, sl
 801142a:	9305      	str	r3, [sp, #20]
 801142c:	f1ca 0300 	rsb	r3, sl, #0
 8011430:	9307      	str	r3, [sp, #28]
 8011432:	2300      	movs	r3, #0
 8011434:	930e      	str	r3, [sp, #56]	; 0x38
 8011436:	e7bb      	b.n	80113b0 <_dtoa_r+0x1b0>
 8011438:	2301      	movs	r3, #1
 801143a:	930a      	str	r3, [sp, #40]	; 0x28
 801143c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801143e:	2b00      	cmp	r3, #0
 8011440:	dd59      	ble.n	80114f6 <_dtoa_r+0x2f6>
 8011442:	9302      	str	r3, [sp, #8]
 8011444:	4699      	mov	r9, r3
 8011446:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011448:	2200      	movs	r2, #0
 801144a:	6072      	str	r2, [r6, #4]
 801144c:	2204      	movs	r2, #4
 801144e:	f102 0014 	add.w	r0, r2, #20
 8011452:	4298      	cmp	r0, r3
 8011454:	6871      	ldr	r1, [r6, #4]
 8011456:	d953      	bls.n	8011500 <_dtoa_r+0x300>
 8011458:	4620      	mov	r0, r4
 801145a:	f000 fe88 	bl	801216e <_Balloc>
 801145e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011460:	6030      	str	r0, [r6, #0]
 8011462:	f1b9 0f0e 	cmp.w	r9, #14
 8011466:	f8d3 b000 	ldr.w	fp, [r3]
 801146a:	f200 80e6 	bhi.w	801163a <_dtoa_r+0x43a>
 801146e:	2d00      	cmp	r5, #0
 8011470:	f000 80e3 	beq.w	801163a <_dtoa_r+0x43a>
 8011474:	ed9d 7b00 	vldr	d7, [sp]
 8011478:	f1ba 0f00 	cmp.w	sl, #0
 801147c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011480:	dd74      	ble.n	801156c <_dtoa_r+0x36c>
 8011482:	4a2a      	ldr	r2, [pc, #168]	; (801152c <_dtoa_r+0x32c>)
 8011484:	f00a 030f 	and.w	r3, sl, #15
 8011488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801148c:	ed93 7b00 	vldr	d7, [r3]
 8011490:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011494:	06f0      	lsls	r0, r6, #27
 8011496:	ed8d 7b08 	vstr	d7, [sp, #32]
 801149a:	d565      	bpl.n	8011568 <_dtoa_r+0x368>
 801149c:	4b24      	ldr	r3, [pc, #144]	; (8011530 <_dtoa_r+0x330>)
 801149e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80114a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80114a6:	f7ef f9f9 	bl	800089c <__aeabi_ddiv>
 80114aa:	e9cd 0100 	strd	r0, r1, [sp]
 80114ae:	f006 060f 	and.w	r6, r6, #15
 80114b2:	2503      	movs	r5, #3
 80114b4:	4f1e      	ldr	r7, [pc, #120]	; (8011530 <_dtoa_r+0x330>)
 80114b6:	e04c      	b.n	8011552 <_dtoa_r+0x352>
 80114b8:	2301      	movs	r3, #1
 80114ba:	930a      	str	r3, [sp, #40]	; 0x28
 80114bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114be:	4453      	add	r3, sl
 80114c0:	f103 0901 	add.w	r9, r3, #1
 80114c4:	9302      	str	r3, [sp, #8]
 80114c6:	464b      	mov	r3, r9
 80114c8:	2b01      	cmp	r3, #1
 80114ca:	bfb8      	it	lt
 80114cc:	2301      	movlt	r3, #1
 80114ce:	e7ba      	b.n	8011446 <_dtoa_r+0x246>
 80114d0:	2300      	movs	r3, #0
 80114d2:	e7b2      	b.n	801143a <_dtoa_r+0x23a>
 80114d4:	2300      	movs	r3, #0
 80114d6:	e7f0      	b.n	80114ba <_dtoa_r+0x2ba>
 80114d8:	2501      	movs	r5, #1
 80114da:	2300      	movs	r3, #0
 80114dc:	9306      	str	r3, [sp, #24]
 80114de:	950a      	str	r5, [sp, #40]	; 0x28
 80114e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114e4:	9302      	str	r3, [sp, #8]
 80114e6:	4699      	mov	r9, r3
 80114e8:	2200      	movs	r2, #0
 80114ea:	2312      	movs	r3, #18
 80114ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80114ee:	e7aa      	b.n	8011446 <_dtoa_r+0x246>
 80114f0:	2301      	movs	r3, #1
 80114f2:	930a      	str	r3, [sp, #40]	; 0x28
 80114f4:	e7f4      	b.n	80114e0 <_dtoa_r+0x2e0>
 80114f6:	2301      	movs	r3, #1
 80114f8:	9302      	str	r3, [sp, #8]
 80114fa:	4699      	mov	r9, r3
 80114fc:	461a      	mov	r2, r3
 80114fe:	e7f5      	b.n	80114ec <_dtoa_r+0x2ec>
 8011500:	3101      	adds	r1, #1
 8011502:	6071      	str	r1, [r6, #4]
 8011504:	0052      	lsls	r2, r2, #1
 8011506:	e7a2      	b.n	801144e <_dtoa_r+0x24e>
 8011508:	636f4361 	.word	0x636f4361
 801150c:	3fd287a7 	.word	0x3fd287a7
 8011510:	8b60c8b3 	.word	0x8b60c8b3
 8011514:	3fc68a28 	.word	0x3fc68a28
 8011518:	509f79fb 	.word	0x509f79fb
 801151c:	3fd34413 	.word	0x3fd34413
 8011520:	7ff00000 	.word	0x7ff00000
 8011524:	08015a0d 	.word	0x08015a0d
 8011528:	3ff80000 	.word	0x3ff80000
 801152c:	08015818 	.word	0x08015818
 8011530:	080157f0 	.word	0x080157f0
 8011534:	08015787 	.word	0x08015787
 8011538:	07f1      	lsls	r1, r6, #31
 801153a:	d508      	bpl.n	801154e <_dtoa_r+0x34e>
 801153c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011544:	f7ef f880 	bl	8000648 <__aeabi_dmul>
 8011548:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801154c:	3501      	adds	r5, #1
 801154e:	1076      	asrs	r6, r6, #1
 8011550:	3708      	adds	r7, #8
 8011552:	2e00      	cmp	r6, #0
 8011554:	d1f0      	bne.n	8011538 <_dtoa_r+0x338>
 8011556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801155a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801155e:	f7ef f99d 	bl	800089c <__aeabi_ddiv>
 8011562:	e9cd 0100 	strd	r0, r1, [sp]
 8011566:	e01a      	b.n	801159e <_dtoa_r+0x39e>
 8011568:	2502      	movs	r5, #2
 801156a:	e7a3      	b.n	80114b4 <_dtoa_r+0x2b4>
 801156c:	f000 80a0 	beq.w	80116b0 <_dtoa_r+0x4b0>
 8011570:	f1ca 0600 	rsb	r6, sl, #0
 8011574:	4b9f      	ldr	r3, [pc, #636]	; (80117f4 <_dtoa_r+0x5f4>)
 8011576:	4fa0      	ldr	r7, [pc, #640]	; (80117f8 <_dtoa_r+0x5f8>)
 8011578:	f006 020f 	and.w	r2, r6, #15
 801157c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011584:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011588:	f7ef f85e 	bl	8000648 <__aeabi_dmul>
 801158c:	e9cd 0100 	strd	r0, r1, [sp]
 8011590:	1136      	asrs	r6, r6, #4
 8011592:	2300      	movs	r3, #0
 8011594:	2502      	movs	r5, #2
 8011596:	2e00      	cmp	r6, #0
 8011598:	d17f      	bne.n	801169a <_dtoa_r+0x49a>
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1e1      	bne.n	8011562 <_dtoa_r+0x362>
 801159e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	f000 8087 	beq.w	80116b4 <_dtoa_r+0x4b4>
 80115a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80115aa:	2200      	movs	r2, #0
 80115ac:	4b93      	ldr	r3, [pc, #588]	; (80117fc <_dtoa_r+0x5fc>)
 80115ae:	4630      	mov	r0, r6
 80115b0:	4639      	mov	r1, r7
 80115b2:	f7ef fabb 	bl	8000b2c <__aeabi_dcmplt>
 80115b6:	2800      	cmp	r0, #0
 80115b8:	d07c      	beq.n	80116b4 <_dtoa_r+0x4b4>
 80115ba:	f1b9 0f00 	cmp.w	r9, #0
 80115be:	d079      	beq.n	80116b4 <_dtoa_r+0x4b4>
 80115c0:	9b02      	ldr	r3, [sp, #8]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	dd35      	ble.n	8011632 <_dtoa_r+0x432>
 80115c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80115ca:	9308      	str	r3, [sp, #32]
 80115cc:	4639      	mov	r1, r7
 80115ce:	2200      	movs	r2, #0
 80115d0:	4b8b      	ldr	r3, [pc, #556]	; (8011800 <_dtoa_r+0x600>)
 80115d2:	4630      	mov	r0, r6
 80115d4:	f7ef f838 	bl	8000648 <__aeabi_dmul>
 80115d8:	e9cd 0100 	strd	r0, r1, [sp]
 80115dc:	9f02      	ldr	r7, [sp, #8]
 80115de:	3501      	adds	r5, #1
 80115e0:	4628      	mov	r0, r5
 80115e2:	f7ee ffc7 	bl	8000574 <__aeabi_i2d>
 80115e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115ea:	f7ef f82d 	bl	8000648 <__aeabi_dmul>
 80115ee:	2200      	movs	r2, #0
 80115f0:	4b84      	ldr	r3, [pc, #528]	; (8011804 <_dtoa_r+0x604>)
 80115f2:	f7ee fe73 	bl	80002dc <__adddf3>
 80115f6:	4605      	mov	r5, r0
 80115f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80115fc:	2f00      	cmp	r7, #0
 80115fe:	d15d      	bne.n	80116bc <_dtoa_r+0x4bc>
 8011600:	2200      	movs	r2, #0
 8011602:	4b81      	ldr	r3, [pc, #516]	; (8011808 <_dtoa_r+0x608>)
 8011604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011608:	f7ee fe66 	bl	80002d8 <__aeabi_dsub>
 801160c:	462a      	mov	r2, r5
 801160e:	4633      	mov	r3, r6
 8011610:	e9cd 0100 	strd	r0, r1, [sp]
 8011614:	f7ef faa8 	bl	8000b68 <__aeabi_dcmpgt>
 8011618:	2800      	cmp	r0, #0
 801161a:	f040 8288 	bne.w	8011b2e <_dtoa_r+0x92e>
 801161e:	462a      	mov	r2, r5
 8011620:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011624:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011628:	f7ef fa80 	bl	8000b2c <__aeabi_dcmplt>
 801162c:	2800      	cmp	r0, #0
 801162e:	f040 827c 	bne.w	8011b2a <_dtoa_r+0x92a>
 8011632:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011636:	e9cd 2300 	strd	r2, r3, [sp]
 801163a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801163c:	2b00      	cmp	r3, #0
 801163e:	f2c0 8150 	blt.w	80118e2 <_dtoa_r+0x6e2>
 8011642:	f1ba 0f0e 	cmp.w	sl, #14
 8011646:	f300 814c 	bgt.w	80118e2 <_dtoa_r+0x6e2>
 801164a:	4b6a      	ldr	r3, [pc, #424]	; (80117f4 <_dtoa_r+0x5f4>)
 801164c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011650:	ed93 7b00 	vldr	d7, [r3]
 8011654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011656:	2b00      	cmp	r3, #0
 8011658:	ed8d 7b02 	vstr	d7, [sp, #8]
 801165c:	f280 80d8 	bge.w	8011810 <_dtoa_r+0x610>
 8011660:	f1b9 0f00 	cmp.w	r9, #0
 8011664:	f300 80d4 	bgt.w	8011810 <_dtoa_r+0x610>
 8011668:	f040 825e 	bne.w	8011b28 <_dtoa_r+0x928>
 801166c:	2200      	movs	r2, #0
 801166e:	4b66      	ldr	r3, [pc, #408]	; (8011808 <_dtoa_r+0x608>)
 8011670:	ec51 0b17 	vmov	r0, r1, d7
 8011674:	f7ee ffe8 	bl	8000648 <__aeabi_dmul>
 8011678:	e9dd 2300 	ldrd	r2, r3, [sp]
 801167c:	f7ef fa6a 	bl	8000b54 <__aeabi_dcmpge>
 8011680:	464f      	mov	r7, r9
 8011682:	464e      	mov	r6, r9
 8011684:	2800      	cmp	r0, #0
 8011686:	f040 8234 	bne.w	8011af2 <_dtoa_r+0x8f2>
 801168a:	2331      	movs	r3, #49	; 0x31
 801168c:	f10b 0501 	add.w	r5, fp, #1
 8011690:	f88b 3000 	strb.w	r3, [fp]
 8011694:	f10a 0a01 	add.w	sl, sl, #1
 8011698:	e22f      	b.n	8011afa <_dtoa_r+0x8fa>
 801169a:	07f2      	lsls	r2, r6, #31
 801169c:	d505      	bpl.n	80116aa <_dtoa_r+0x4aa>
 801169e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116a2:	f7ee ffd1 	bl	8000648 <__aeabi_dmul>
 80116a6:	3501      	adds	r5, #1
 80116a8:	2301      	movs	r3, #1
 80116aa:	1076      	asrs	r6, r6, #1
 80116ac:	3708      	adds	r7, #8
 80116ae:	e772      	b.n	8011596 <_dtoa_r+0x396>
 80116b0:	2502      	movs	r5, #2
 80116b2:	e774      	b.n	801159e <_dtoa_r+0x39e>
 80116b4:	f8cd a020 	str.w	sl, [sp, #32]
 80116b8:	464f      	mov	r7, r9
 80116ba:	e791      	b.n	80115e0 <_dtoa_r+0x3e0>
 80116bc:	4b4d      	ldr	r3, [pc, #308]	; (80117f4 <_dtoa_r+0x5f4>)
 80116be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80116c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80116c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d047      	beq.n	801175c <_dtoa_r+0x55c>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	2000      	movs	r0, #0
 80116d2:	494e      	ldr	r1, [pc, #312]	; (801180c <_dtoa_r+0x60c>)
 80116d4:	f7ef f8e2 	bl	800089c <__aeabi_ddiv>
 80116d8:	462a      	mov	r2, r5
 80116da:	4633      	mov	r3, r6
 80116dc:	f7ee fdfc 	bl	80002d8 <__aeabi_dsub>
 80116e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80116e4:	465d      	mov	r5, fp
 80116e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116ea:	f7ef fa5d 	bl	8000ba8 <__aeabi_d2iz>
 80116ee:	4606      	mov	r6, r0
 80116f0:	f7ee ff40 	bl	8000574 <__aeabi_i2d>
 80116f4:	4602      	mov	r2, r0
 80116f6:	460b      	mov	r3, r1
 80116f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116fc:	f7ee fdec 	bl	80002d8 <__aeabi_dsub>
 8011700:	3630      	adds	r6, #48	; 0x30
 8011702:	f805 6b01 	strb.w	r6, [r5], #1
 8011706:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801170a:	e9cd 0100 	strd	r0, r1, [sp]
 801170e:	f7ef fa0d 	bl	8000b2c <__aeabi_dcmplt>
 8011712:	2800      	cmp	r0, #0
 8011714:	d163      	bne.n	80117de <_dtoa_r+0x5de>
 8011716:	e9dd 2300 	ldrd	r2, r3, [sp]
 801171a:	2000      	movs	r0, #0
 801171c:	4937      	ldr	r1, [pc, #220]	; (80117fc <_dtoa_r+0x5fc>)
 801171e:	f7ee fddb 	bl	80002d8 <__aeabi_dsub>
 8011722:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011726:	f7ef fa01 	bl	8000b2c <__aeabi_dcmplt>
 801172a:	2800      	cmp	r0, #0
 801172c:	f040 80b7 	bne.w	801189e <_dtoa_r+0x69e>
 8011730:	eba5 030b 	sub.w	r3, r5, fp
 8011734:	429f      	cmp	r7, r3
 8011736:	f77f af7c 	ble.w	8011632 <_dtoa_r+0x432>
 801173a:	2200      	movs	r2, #0
 801173c:	4b30      	ldr	r3, [pc, #192]	; (8011800 <_dtoa_r+0x600>)
 801173e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011742:	f7ee ff81 	bl	8000648 <__aeabi_dmul>
 8011746:	2200      	movs	r2, #0
 8011748:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801174c:	4b2c      	ldr	r3, [pc, #176]	; (8011800 <_dtoa_r+0x600>)
 801174e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011752:	f7ee ff79 	bl	8000648 <__aeabi_dmul>
 8011756:	e9cd 0100 	strd	r0, r1, [sp]
 801175a:	e7c4      	b.n	80116e6 <_dtoa_r+0x4e6>
 801175c:	462a      	mov	r2, r5
 801175e:	4633      	mov	r3, r6
 8011760:	f7ee ff72 	bl	8000648 <__aeabi_dmul>
 8011764:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011768:	eb0b 0507 	add.w	r5, fp, r7
 801176c:	465e      	mov	r6, fp
 801176e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011772:	f7ef fa19 	bl	8000ba8 <__aeabi_d2iz>
 8011776:	4607      	mov	r7, r0
 8011778:	f7ee fefc 	bl	8000574 <__aeabi_i2d>
 801177c:	3730      	adds	r7, #48	; 0x30
 801177e:	4602      	mov	r2, r0
 8011780:	460b      	mov	r3, r1
 8011782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011786:	f7ee fda7 	bl	80002d8 <__aeabi_dsub>
 801178a:	f806 7b01 	strb.w	r7, [r6], #1
 801178e:	42ae      	cmp	r6, r5
 8011790:	e9cd 0100 	strd	r0, r1, [sp]
 8011794:	f04f 0200 	mov.w	r2, #0
 8011798:	d126      	bne.n	80117e8 <_dtoa_r+0x5e8>
 801179a:	4b1c      	ldr	r3, [pc, #112]	; (801180c <_dtoa_r+0x60c>)
 801179c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117a0:	f7ee fd9c 	bl	80002dc <__adddf3>
 80117a4:	4602      	mov	r2, r0
 80117a6:	460b      	mov	r3, r1
 80117a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117ac:	f7ef f9dc 	bl	8000b68 <__aeabi_dcmpgt>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	d174      	bne.n	801189e <_dtoa_r+0x69e>
 80117b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80117b8:	2000      	movs	r0, #0
 80117ba:	4914      	ldr	r1, [pc, #80]	; (801180c <_dtoa_r+0x60c>)
 80117bc:	f7ee fd8c 	bl	80002d8 <__aeabi_dsub>
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117c8:	f7ef f9b0 	bl	8000b2c <__aeabi_dcmplt>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	f43f af30 	beq.w	8011632 <_dtoa_r+0x432>
 80117d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80117d6:	2b30      	cmp	r3, #48	; 0x30
 80117d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80117dc:	d002      	beq.n	80117e4 <_dtoa_r+0x5e4>
 80117de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80117e2:	e04a      	b.n	801187a <_dtoa_r+0x67a>
 80117e4:	4615      	mov	r5, r2
 80117e6:	e7f4      	b.n	80117d2 <_dtoa_r+0x5d2>
 80117e8:	4b05      	ldr	r3, [pc, #20]	; (8011800 <_dtoa_r+0x600>)
 80117ea:	f7ee ff2d 	bl	8000648 <__aeabi_dmul>
 80117ee:	e9cd 0100 	strd	r0, r1, [sp]
 80117f2:	e7bc      	b.n	801176e <_dtoa_r+0x56e>
 80117f4:	08015818 	.word	0x08015818
 80117f8:	080157f0 	.word	0x080157f0
 80117fc:	3ff00000 	.word	0x3ff00000
 8011800:	40240000 	.word	0x40240000
 8011804:	401c0000 	.word	0x401c0000
 8011808:	40140000 	.word	0x40140000
 801180c:	3fe00000 	.word	0x3fe00000
 8011810:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011814:	465d      	mov	r5, fp
 8011816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801181a:	4630      	mov	r0, r6
 801181c:	4639      	mov	r1, r7
 801181e:	f7ef f83d 	bl	800089c <__aeabi_ddiv>
 8011822:	f7ef f9c1 	bl	8000ba8 <__aeabi_d2iz>
 8011826:	4680      	mov	r8, r0
 8011828:	f7ee fea4 	bl	8000574 <__aeabi_i2d>
 801182c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011830:	f7ee ff0a 	bl	8000648 <__aeabi_dmul>
 8011834:	4602      	mov	r2, r0
 8011836:	460b      	mov	r3, r1
 8011838:	4630      	mov	r0, r6
 801183a:	4639      	mov	r1, r7
 801183c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011840:	f7ee fd4a 	bl	80002d8 <__aeabi_dsub>
 8011844:	f805 6b01 	strb.w	r6, [r5], #1
 8011848:	eba5 060b 	sub.w	r6, r5, fp
 801184c:	45b1      	cmp	r9, r6
 801184e:	4602      	mov	r2, r0
 8011850:	460b      	mov	r3, r1
 8011852:	d139      	bne.n	80118c8 <_dtoa_r+0x6c8>
 8011854:	f7ee fd42 	bl	80002dc <__adddf3>
 8011858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801185c:	4606      	mov	r6, r0
 801185e:	460f      	mov	r7, r1
 8011860:	f7ef f982 	bl	8000b68 <__aeabi_dcmpgt>
 8011864:	b9c8      	cbnz	r0, 801189a <_dtoa_r+0x69a>
 8011866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801186a:	4630      	mov	r0, r6
 801186c:	4639      	mov	r1, r7
 801186e:	f7ef f953 	bl	8000b18 <__aeabi_dcmpeq>
 8011872:	b110      	cbz	r0, 801187a <_dtoa_r+0x67a>
 8011874:	f018 0f01 	tst.w	r8, #1
 8011878:	d10f      	bne.n	801189a <_dtoa_r+0x69a>
 801187a:	9904      	ldr	r1, [sp, #16]
 801187c:	4620      	mov	r0, r4
 801187e:	f000 fcaa 	bl	80121d6 <_Bfree>
 8011882:	2300      	movs	r3, #0
 8011884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011886:	702b      	strb	r3, [r5, #0]
 8011888:	f10a 0301 	add.w	r3, sl, #1
 801188c:	6013      	str	r3, [r2, #0]
 801188e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011890:	2b00      	cmp	r3, #0
 8011892:	f000 8241 	beq.w	8011d18 <_dtoa_r+0xb18>
 8011896:	601d      	str	r5, [r3, #0]
 8011898:	e23e      	b.n	8011d18 <_dtoa_r+0xb18>
 801189a:	f8cd a020 	str.w	sl, [sp, #32]
 801189e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80118a2:	2a39      	cmp	r2, #57	; 0x39
 80118a4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80118a8:	d108      	bne.n	80118bc <_dtoa_r+0x6bc>
 80118aa:	459b      	cmp	fp, r3
 80118ac:	d10a      	bne.n	80118c4 <_dtoa_r+0x6c4>
 80118ae:	9b08      	ldr	r3, [sp, #32]
 80118b0:	3301      	adds	r3, #1
 80118b2:	9308      	str	r3, [sp, #32]
 80118b4:	2330      	movs	r3, #48	; 0x30
 80118b6:	f88b 3000 	strb.w	r3, [fp]
 80118ba:	465b      	mov	r3, fp
 80118bc:	781a      	ldrb	r2, [r3, #0]
 80118be:	3201      	adds	r2, #1
 80118c0:	701a      	strb	r2, [r3, #0]
 80118c2:	e78c      	b.n	80117de <_dtoa_r+0x5de>
 80118c4:	461d      	mov	r5, r3
 80118c6:	e7ea      	b.n	801189e <_dtoa_r+0x69e>
 80118c8:	2200      	movs	r2, #0
 80118ca:	4b9b      	ldr	r3, [pc, #620]	; (8011b38 <_dtoa_r+0x938>)
 80118cc:	f7ee febc 	bl	8000648 <__aeabi_dmul>
 80118d0:	2200      	movs	r2, #0
 80118d2:	2300      	movs	r3, #0
 80118d4:	4606      	mov	r6, r0
 80118d6:	460f      	mov	r7, r1
 80118d8:	f7ef f91e 	bl	8000b18 <__aeabi_dcmpeq>
 80118dc:	2800      	cmp	r0, #0
 80118de:	d09a      	beq.n	8011816 <_dtoa_r+0x616>
 80118e0:	e7cb      	b.n	801187a <_dtoa_r+0x67a>
 80118e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118e4:	2a00      	cmp	r2, #0
 80118e6:	f000 808b 	beq.w	8011a00 <_dtoa_r+0x800>
 80118ea:	9a06      	ldr	r2, [sp, #24]
 80118ec:	2a01      	cmp	r2, #1
 80118ee:	dc6e      	bgt.n	80119ce <_dtoa_r+0x7ce>
 80118f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80118f2:	2a00      	cmp	r2, #0
 80118f4:	d067      	beq.n	80119c6 <_dtoa_r+0x7c6>
 80118f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80118fa:	9f07      	ldr	r7, [sp, #28]
 80118fc:	9d05      	ldr	r5, [sp, #20]
 80118fe:	9a05      	ldr	r2, [sp, #20]
 8011900:	2101      	movs	r1, #1
 8011902:	441a      	add	r2, r3
 8011904:	4620      	mov	r0, r4
 8011906:	9205      	str	r2, [sp, #20]
 8011908:	4498      	add	r8, r3
 801190a:	f000 fd04 	bl	8012316 <__i2b>
 801190e:	4606      	mov	r6, r0
 8011910:	2d00      	cmp	r5, #0
 8011912:	dd0c      	ble.n	801192e <_dtoa_r+0x72e>
 8011914:	f1b8 0f00 	cmp.w	r8, #0
 8011918:	dd09      	ble.n	801192e <_dtoa_r+0x72e>
 801191a:	4545      	cmp	r5, r8
 801191c:	9a05      	ldr	r2, [sp, #20]
 801191e:	462b      	mov	r3, r5
 8011920:	bfa8      	it	ge
 8011922:	4643      	movge	r3, r8
 8011924:	1ad2      	subs	r2, r2, r3
 8011926:	9205      	str	r2, [sp, #20]
 8011928:	1aed      	subs	r5, r5, r3
 801192a:	eba8 0803 	sub.w	r8, r8, r3
 801192e:	9b07      	ldr	r3, [sp, #28]
 8011930:	b1eb      	cbz	r3, 801196e <_dtoa_r+0x76e>
 8011932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011934:	2b00      	cmp	r3, #0
 8011936:	d067      	beq.n	8011a08 <_dtoa_r+0x808>
 8011938:	b18f      	cbz	r7, 801195e <_dtoa_r+0x75e>
 801193a:	4631      	mov	r1, r6
 801193c:	463a      	mov	r2, r7
 801193e:	4620      	mov	r0, r4
 8011940:	f000 fd88 	bl	8012454 <__pow5mult>
 8011944:	9a04      	ldr	r2, [sp, #16]
 8011946:	4601      	mov	r1, r0
 8011948:	4606      	mov	r6, r0
 801194a:	4620      	mov	r0, r4
 801194c:	f000 fcec 	bl	8012328 <__multiply>
 8011950:	9904      	ldr	r1, [sp, #16]
 8011952:	9008      	str	r0, [sp, #32]
 8011954:	4620      	mov	r0, r4
 8011956:	f000 fc3e 	bl	80121d6 <_Bfree>
 801195a:	9b08      	ldr	r3, [sp, #32]
 801195c:	9304      	str	r3, [sp, #16]
 801195e:	9b07      	ldr	r3, [sp, #28]
 8011960:	1bda      	subs	r2, r3, r7
 8011962:	d004      	beq.n	801196e <_dtoa_r+0x76e>
 8011964:	9904      	ldr	r1, [sp, #16]
 8011966:	4620      	mov	r0, r4
 8011968:	f000 fd74 	bl	8012454 <__pow5mult>
 801196c:	9004      	str	r0, [sp, #16]
 801196e:	2101      	movs	r1, #1
 8011970:	4620      	mov	r0, r4
 8011972:	f000 fcd0 	bl	8012316 <__i2b>
 8011976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011978:	4607      	mov	r7, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	f000 81d0 	beq.w	8011d20 <_dtoa_r+0xb20>
 8011980:	461a      	mov	r2, r3
 8011982:	4601      	mov	r1, r0
 8011984:	4620      	mov	r0, r4
 8011986:	f000 fd65 	bl	8012454 <__pow5mult>
 801198a:	9b06      	ldr	r3, [sp, #24]
 801198c:	2b01      	cmp	r3, #1
 801198e:	4607      	mov	r7, r0
 8011990:	dc40      	bgt.n	8011a14 <_dtoa_r+0x814>
 8011992:	9b00      	ldr	r3, [sp, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d139      	bne.n	8011a0c <_dtoa_r+0x80c>
 8011998:	9b01      	ldr	r3, [sp, #4]
 801199a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d136      	bne.n	8011a10 <_dtoa_r+0x810>
 80119a2:	9b01      	ldr	r3, [sp, #4]
 80119a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119a8:	0d1b      	lsrs	r3, r3, #20
 80119aa:	051b      	lsls	r3, r3, #20
 80119ac:	b12b      	cbz	r3, 80119ba <_dtoa_r+0x7ba>
 80119ae:	9b05      	ldr	r3, [sp, #20]
 80119b0:	3301      	adds	r3, #1
 80119b2:	9305      	str	r3, [sp, #20]
 80119b4:	f108 0801 	add.w	r8, r8, #1
 80119b8:	2301      	movs	r3, #1
 80119ba:	9307      	str	r3, [sp, #28]
 80119bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d12a      	bne.n	8011a18 <_dtoa_r+0x818>
 80119c2:	2001      	movs	r0, #1
 80119c4:	e030      	b.n	8011a28 <_dtoa_r+0x828>
 80119c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80119cc:	e795      	b.n	80118fa <_dtoa_r+0x6fa>
 80119ce:	9b07      	ldr	r3, [sp, #28]
 80119d0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80119d4:	42bb      	cmp	r3, r7
 80119d6:	bfbf      	itttt	lt
 80119d8:	9b07      	ldrlt	r3, [sp, #28]
 80119da:	9707      	strlt	r7, [sp, #28]
 80119dc:	1afa      	sublt	r2, r7, r3
 80119de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80119e0:	bfbb      	ittet	lt
 80119e2:	189b      	addlt	r3, r3, r2
 80119e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80119e6:	1bdf      	subge	r7, r3, r7
 80119e8:	2700      	movlt	r7, #0
 80119ea:	f1b9 0f00 	cmp.w	r9, #0
 80119ee:	bfb5      	itete	lt
 80119f0:	9b05      	ldrlt	r3, [sp, #20]
 80119f2:	9d05      	ldrge	r5, [sp, #20]
 80119f4:	eba3 0509 	sublt.w	r5, r3, r9
 80119f8:	464b      	movge	r3, r9
 80119fa:	bfb8      	it	lt
 80119fc:	2300      	movlt	r3, #0
 80119fe:	e77e      	b.n	80118fe <_dtoa_r+0x6fe>
 8011a00:	9f07      	ldr	r7, [sp, #28]
 8011a02:	9d05      	ldr	r5, [sp, #20]
 8011a04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011a06:	e783      	b.n	8011910 <_dtoa_r+0x710>
 8011a08:	9a07      	ldr	r2, [sp, #28]
 8011a0a:	e7ab      	b.n	8011964 <_dtoa_r+0x764>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	e7d4      	b.n	80119ba <_dtoa_r+0x7ba>
 8011a10:	9b00      	ldr	r3, [sp, #0]
 8011a12:	e7d2      	b.n	80119ba <_dtoa_r+0x7ba>
 8011a14:	2300      	movs	r3, #0
 8011a16:	9307      	str	r3, [sp, #28]
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011a1e:	6918      	ldr	r0, [r3, #16]
 8011a20:	f000 fc2b 	bl	801227a <__hi0bits>
 8011a24:	f1c0 0020 	rsb	r0, r0, #32
 8011a28:	4440      	add	r0, r8
 8011a2a:	f010 001f 	ands.w	r0, r0, #31
 8011a2e:	d047      	beq.n	8011ac0 <_dtoa_r+0x8c0>
 8011a30:	f1c0 0320 	rsb	r3, r0, #32
 8011a34:	2b04      	cmp	r3, #4
 8011a36:	dd3b      	ble.n	8011ab0 <_dtoa_r+0x8b0>
 8011a38:	9b05      	ldr	r3, [sp, #20]
 8011a3a:	f1c0 001c 	rsb	r0, r0, #28
 8011a3e:	4403      	add	r3, r0
 8011a40:	9305      	str	r3, [sp, #20]
 8011a42:	4405      	add	r5, r0
 8011a44:	4480      	add	r8, r0
 8011a46:	9b05      	ldr	r3, [sp, #20]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	dd05      	ble.n	8011a58 <_dtoa_r+0x858>
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	9904      	ldr	r1, [sp, #16]
 8011a50:	4620      	mov	r0, r4
 8011a52:	f000 fd4d 	bl	80124f0 <__lshift>
 8011a56:	9004      	str	r0, [sp, #16]
 8011a58:	f1b8 0f00 	cmp.w	r8, #0
 8011a5c:	dd05      	ble.n	8011a6a <_dtoa_r+0x86a>
 8011a5e:	4639      	mov	r1, r7
 8011a60:	4642      	mov	r2, r8
 8011a62:	4620      	mov	r0, r4
 8011a64:	f000 fd44 	bl	80124f0 <__lshift>
 8011a68:	4607      	mov	r7, r0
 8011a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a6c:	b353      	cbz	r3, 8011ac4 <_dtoa_r+0x8c4>
 8011a6e:	4639      	mov	r1, r7
 8011a70:	9804      	ldr	r0, [sp, #16]
 8011a72:	f000 fd91 	bl	8012598 <__mcmp>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	da24      	bge.n	8011ac4 <_dtoa_r+0x8c4>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	220a      	movs	r2, #10
 8011a7e:	9904      	ldr	r1, [sp, #16]
 8011a80:	4620      	mov	r0, r4
 8011a82:	f000 fbbf 	bl	8012204 <__multadd>
 8011a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a88:	9004      	str	r0, [sp, #16]
 8011a8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	f000 814d 	beq.w	8011d2e <_dtoa_r+0xb2e>
 8011a94:	2300      	movs	r3, #0
 8011a96:	4631      	mov	r1, r6
 8011a98:	220a      	movs	r2, #10
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f000 fbb2 	bl	8012204 <__multadd>
 8011aa0:	9b02      	ldr	r3, [sp, #8]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	4606      	mov	r6, r0
 8011aa6:	dc4f      	bgt.n	8011b48 <_dtoa_r+0x948>
 8011aa8:	9b06      	ldr	r3, [sp, #24]
 8011aaa:	2b02      	cmp	r3, #2
 8011aac:	dd4c      	ble.n	8011b48 <_dtoa_r+0x948>
 8011aae:	e011      	b.n	8011ad4 <_dtoa_r+0x8d4>
 8011ab0:	d0c9      	beq.n	8011a46 <_dtoa_r+0x846>
 8011ab2:	9a05      	ldr	r2, [sp, #20]
 8011ab4:	331c      	adds	r3, #28
 8011ab6:	441a      	add	r2, r3
 8011ab8:	9205      	str	r2, [sp, #20]
 8011aba:	441d      	add	r5, r3
 8011abc:	4498      	add	r8, r3
 8011abe:	e7c2      	b.n	8011a46 <_dtoa_r+0x846>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	e7f6      	b.n	8011ab2 <_dtoa_r+0x8b2>
 8011ac4:	f1b9 0f00 	cmp.w	r9, #0
 8011ac8:	dc38      	bgt.n	8011b3c <_dtoa_r+0x93c>
 8011aca:	9b06      	ldr	r3, [sp, #24]
 8011acc:	2b02      	cmp	r3, #2
 8011ace:	dd35      	ble.n	8011b3c <_dtoa_r+0x93c>
 8011ad0:	f8cd 9008 	str.w	r9, [sp, #8]
 8011ad4:	9b02      	ldr	r3, [sp, #8]
 8011ad6:	b963      	cbnz	r3, 8011af2 <_dtoa_r+0x8f2>
 8011ad8:	4639      	mov	r1, r7
 8011ada:	2205      	movs	r2, #5
 8011adc:	4620      	mov	r0, r4
 8011ade:	f000 fb91 	bl	8012204 <__multadd>
 8011ae2:	4601      	mov	r1, r0
 8011ae4:	4607      	mov	r7, r0
 8011ae6:	9804      	ldr	r0, [sp, #16]
 8011ae8:	f000 fd56 	bl	8012598 <__mcmp>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	f73f adcc 	bgt.w	801168a <_dtoa_r+0x48a>
 8011af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011af4:	465d      	mov	r5, fp
 8011af6:	ea6f 0a03 	mvn.w	sl, r3
 8011afa:	f04f 0900 	mov.w	r9, #0
 8011afe:	4639      	mov	r1, r7
 8011b00:	4620      	mov	r0, r4
 8011b02:	f000 fb68 	bl	80121d6 <_Bfree>
 8011b06:	2e00      	cmp	r6, #0
 8011b08:	f43f aeb7 	beq.w	801187a <_dtoa_r+0x67a>
 8011b0c:	f1b9 0f00 	cmp.w	r9, #0
 8011b10:	d005      	beq.n	8011b1e <_dtoa_r+0x91e>
 8011b12:	45b1      	cmp	r9, r6
 8011b14:	d003      	beq.n	8011b1e <_dtoa_r+0x91e>
 8011b16:	4649      	mov	r1, r9
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f000 fb5c 	bl	80121d6 <_Bfree>
 8011b1e:	4631      	mov	r1, r6
 8011b20:	4620      	mov	r0, r4
 8011b22:	f000 fb58 	bl	80121d6 <_Bfree>
 8011b26:	e6a8      	b.n	801187a <_dtoa_r+0x67a>
 8011b28:	2700      	movs	r7, #0
 8011b2a:	463e      	mov	r6, r7
 8011b2c:	e7e1      	b.n	8011af2 <_dtoa_r+0x8f2>
 8011b2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011b32:	463e      	mov	r6, r7
 8011b34:	e5a9      	b.n	801168a <_dtoa_r+0x48a>
 8011b36:	bf00      	nop
 8011b38:	40240000 	.word	0x40240000
 8011b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	f000 80fa 	beq.w	8011d3c <_dtoa_r+0xb3c>
 8011b48:	2d00      	cmp	r5, #0
 8011b4a:	dd05      	ble.n	8011b58 <_dtoa_r+0x958>
 8011b4c:	4631      	mov	r1, r6
 8011b4e:	462a      	mov	r2, r5
 8011b50:	4620      	mov	r0, r4
 8011b52:	f000 fccd 	bl	80124f0 <__lshift>
 8011b56:	4606      	mov	r6, r0
 8011b58:	9b07      	ldr	r3, [sp, #28]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d04c      	beq.n	8011bf8 <_dtoa_r+0x9f8>
 8011b5e:	6871      	ldr	r1, [r6, #4]
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 fb04 	bl	801216e <_Balloc>
 8011b66:	6932      	ldr	r2, [r6, #16]
 8011b68:	3202      	adds	r2, #2
 8011b6a:	4605      	mov	r5, r0
 8011b6c:	0092      	lsls	r2, r2, #2
 8011b6e:	f106 010c 	add.w	r1, r6, #12
 8011b72:	300c      	adds	r0, #12
 8011b74:	f000 faf0 	bl	8012158 <memcpy>
 8011b78:	2201      	movs	r2, #1
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f000 fcb7 	bl	80124f0 <__lshift>
 8011b82:	9b00      	ldr	r3, [sp, #0]
 8011b84:	f8cd b014 	str.w	fp, [sp, #20]
 8011b88:	f003 0301 	and.w	r3, r3, #1
 8011b8c:	46b1      	mov	r9, r6
 8011b8e:	9307      	str	r3, [sp, #28]
 8011b90:	4606      	mov	r6, r0
 8011b92:	4639      	mov	r1, r7
 8011b94:	9804      	ldr	r0, [sp, #16]
 8011b96:	f7ff faa7 	bl	80110e8 <quorem>
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011ba2:	9804      	ldr	r0, [sp, #16]
 8011ba4:	f000 fcf8 	bl	8012598 <__mcmp>
 8011ba8:	4632      	mov	r2, r6
 8011baa:	9000      	str	r0, [sp, #0]
 8011bac:	4639      	mov	r1, r7
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f000 fd0c 	bl	80125cc <__mdiff>
 8011bb4:	68c3      	ldr	r3, [r0, #12]
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	bb03      	cbnz	r3, 8011bfc <_dtoa_r+0x9fc>
 8011bba:	4601      	mov	r1, r0
 8011bbc:	9008      	str	r0, [sp, #32]
 8011bbe:	9804      	ldr	r0, [sp, #16]
 8011bc0:	f000 fcea 	bl	8012598 <__mcmp>
 8011bc4:	9a08      	ldr	r2, [sp, #32]
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	4611      	mov	r1, r2
 8011bca:	4620      	mov	r0, r4
 8011bcc:	9308      	str	r3, [sp, #32]
 8011bce:	f000 fb02 	bl	80121d6 <_Bfree>
 8011bd2:	9b08      	ldr	r3, [sp, #32]
 8011bd4:	b9a3      	cbnz	r3, 8011c00 <_dtoa_r+0xa00>
 8011bd6:	9a06      	ldr	r2, [sp, #24]
 8011bd8:	b992      	cbnz	r2, 8011c00 <_dtoa_r+0xa00>
 8011bda:	9a07      	ldr	r2, [sp, #28]
 8011bdc:	b982      	cbnz	r2, 8011c00 <_dtoa_r+0xa00>
 8011bde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011be2:	d029      	beq.n	8011c38 <_dtoa_r+0xa38>
 8011be4:	9b00      	ldr	r3, [sp, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	dd01      	ble.n	8011bee <_dtoa_r+0x9ee>
 8011bea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011bee:	9b05      	ldr	r3, [sp, #20]
 8011bf0:	1c5d      	adds	r5, r3, #1
 8011bf2:	f883 8000 	strb.w	r8, [r3]
 8011bf6:	e782      	b.n	8011afe <_dtoa_r+0x8fe>
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	e7c2      	b.n	8011b82 <_dtoa_r+0x982>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	e7e3      	b.n	8011bc8 <_dtoa_r+0x9c8>
 8011c00:	9a00      	ldr	r2, [sp, #0]
 8011c02:	2a00      	cmp	r2, #0
 8011c04:	db04      	blt.n	8011c10 <_dtoa_r+0xa10>
 8011c06:	d125      	bne.n	8011c54 <_dtoa_r+0xa54>
 8011c08:	9a06      	ldr	r2, [sp, #24]
 8011c0a:	bb1a      	cbnz	r2, 8011c54 <_dtoa_r+0xa54>
 8011c0c:	9a07      	ldr	r2, [sp, #28]
 8011c0e:	bb0a      	cbnz	r2, 8011c54 <_dtoa_r+0xa54>
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	ddec      	ble.n	8011bee <_dtoa_r+0x9ee>
 8011c14:	2201      	movs	r2, #1
 8011c16:	9904      	ldr	r1, [sp, #16]
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f000 fc69 	bl	80124f0 <__lshift>
 8011c1e:	4639      	mov	r1, r7
 8011c20:	9004      	str	r0, [sp, #16]
 8011c22:	f000 fcb9 	bl	8012598 <__mcmp>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	dc03      	bgt.n	8011c32 <_dtoa_r+0xa32>
 8011c2a:	d1e0      	bne.n	8011bee <_dtoa_r+0x9ee>
 8011c2c:	f018 0f01 	tst.w	r8, #1
 8011c30:	d0dd      	beq.n	8011bee <_dtoa_r+0x9ee>
 8011c32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c36:	d1d8      	bne.n	8011bea <_dtoa_r+0x9ea>
 8011c38:	9b05      	ldr	r3, [sp, #20]
 8011c3a:	9a05      	ldr	r2, [sp, #20]
 8011c3c:	1c5d      	adds	r5, r3, #1
 8011c3e:	2339      	movs	r3, #57	; 0x39
 8011c40:	7013      	strb	r3, [r2, #0]
 8011c42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c46:	2b39      	cmp	r3, #57	; 0x39
 8011c48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011c4c:	d04f      	beq.n	8011cee <_dtoa_r+0xaee>
 8011c4e:	3301      	adds	r3, #1
 8011c50:	7013      	strb	r3, [r2, #0]
 8011c52:	e754      	b.n	8011afe <_dtoa_r+0x8fe>
 8011c54:	9a05      	ldr	r2, [sp, #20]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	f102 0501 	add.w	r5, r2, #1
 8011c5c:	dd06      	ble.n	8011c6c <_dtoa_r+0xa6c>
 8011c5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c62:	d0e9      	beq.n	8011c38 <_dtoa_r+0xa38>
 8011c64:	f108 0801 	add.w	r8, r8, #1
 8011c68:	9b05      	ldr	r3, [sp, #20]
 8011c6a:	e7c2      	b.n	8011bf2 <_dtoa_r+0x9f2>
 8011c6c:	9a02      	ldr	r2, [sp, #8]
 8011c6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011c72:	eba5 030b 	sub.w	r3, r5, fp
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d021      	beq.n	8011cbe <_dtoa_r+0xabe>
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	220a      	movs	r2, #10
 8011c7e:	9904      	ldr	r1, [sp, #16]
 8011c80:	4620      	mov	r0, r4
 8011c82:	f000 fabf 	bl	8012204 <__multadd>
 8011c86:	45b1      	cmp	r9, r6
 8011c88:	9004      	str	r0, [sp, #16]
 8011c8a:	f04f 0300 	mov.w	r3, #0
 8011c8e:	f04f 020a 	mov.w	r2, #10
 8011c92:	4649      	mov	r1, r9
 8011c94:	4620      	mov	r0, r4
 8011c96:	d105      	bne.n	8011ca4 <_dtoa_r+0xaa4>
 8011c98:	f000 fab4 	bl	8012204 <__multadd>
 8011c9c:	4681      	mov	r9, r0
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	9505      	str	r5, [sp, #20]
 8011ca2:	e776      	b.n	8011b92 <_dtoa_r+0x992>
 8011ca4:	f000 faae 	bl	8012204 <__multadd>
 8011ca8:	4631      	mov	r1, r6
 8011caa:	4681      	mov	r9, r0
 8011cac:	2300      	movs	r3, #0
 8011cae:	220a      	movs	r2, #10
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f000 faa7 	bl	8012204 <__multadd>
 8011cb6:	4606      	mov	r6, r0
 8011cb8:	e7f2      	b.n	8011ca0 <_dtoa_r+0xaa0>
 8011cba:	f04f 0900 	mov.w	r9, #0
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	9904      	ldr	r1, [sp, #16]
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f000 fc14 	bl	80124f0 <__lshift>
 8011cc8:	4639      	mov	r1, r7
 8011cca:	9004      	str	r0, [sp, #16]
 8011ccc:	f000 fc64 	bl	8012598 <__mcmp>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	dcb6      	bgt.n	8011c42 <_dtoa_r+0xa42>
 8011cd4:	d102      	bne.n	8011cdc <_dtoa_r+0xadc>
 8011cd6:	f018 0f01 	tst.w	r8, #1
 8011cda:	d1b2      	bne.n	8011c42 <_dtoa_r+0xa42>
 8011cdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011ce0:	2b30      	cmp	r3, #48	; 0x30
 8011ce2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011ce6:	f47f af0a 	bne.w	8011afe <_dtoa_r+0x8fe>
 8011cea:	4615      	mov	r5, r2
 8011cec:	e7f6      	b.n	8011cdc <_dtoa_r+0xadc>
 8011cee:	4593      	cmp	fp, r2
 8011cf0:	d105      	bne.n	8011cfe <_dtoa_r+0xafe>
 8011cf2:	2331      	movs	r3, #49	; 0x31
 8011cf4:	f10a 0a01 	add.w	sl, sl, #1
 8011cf8:	f88b 3000 	strb.w	r3, [fp]
 8011cfc:	e6ff      	b.n	8011afe <_dtoa_r+0x8fe>
 8011cfe:	4615      	mov	r5, r2
 8011d00:	e79f      	b.n	8011c42 <_dtoa_r+0xa42>
 8011d02:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011d68 <_dtoa_r+0xb68>
 8011d06:	e007      	b.n	8011d18 <_dtoa_r+0xb18>
 8011d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011d6c <_dtoa_r+0xb6c>
 8011d0e:	b11b      	cbz	r3, 8011d18 <_dtoa_r+0xb18>
 8011d10:	f10b 0308 	add.w	r3, fp, #8
 8011d14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011d16:	6013      	str	r3, [r2, #0]
 8011d18:	4658      	mov	r0, fp
 8011d1a:	b017      	add	sp, #92	; 0x5c
 8011d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d20:	9b06      	ldr	r3, [sp, #24]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	f77f ae35 	ble.w	8011992 <_dtoa_r+0x792>
 8011d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d2a:	9307      	str	r3, [sp, #28]
 8011d2c:	e649      	b.n	80119c2 <_dtoa_r+0x7c2>
 8011d2e:	9b02      	ldr	r3, [sp, #8]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	dc03      	bgt.n	8011d3c <_dtoa_r+0xb3c>
 8011d34:	9b06      	ldr	r3, [sp, #24]
 8011d36:	2b02      	cmp	r3, #2
 8011d38:	f73f aecc 	bgt.w	8011ad4 <_dtoa_r+0x8d4>
 8011d3c:	465d      	mov	r5, fp
 8011d3e:	4639      	mov	r1, r7
 8011d40:	9804      	ldr	r0, [sp, #16]
 8011d42:	f7ff f9d1 	bl	80110e8 <quorem>
 8011d46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011d4a:	f805 8b01 	strb.w	r8, [r5], #1
 8011d4e:	9a02      	ldr	r2, [sp, #8]
 8011d50:	eba5 030b 	sub.w	r3, r5, fp
 8011d54:	429a      	cmp	r2, r3
 8011d56:	ddb0      	ble.n	8011cba <_dtoa_r+0xaba>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	220a      	movs	r2, #10
 8011d5c:	9904      	ldr	r1, [sp, #16]
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f000 fa50 	bl	8012204 <__multadd>
 8011d64:	9004      	str	r0, [sp, #16]
 8011d66:	e7ea      	b.n	8011d3e <_dtoa_r+0xb3e>
 8011d68:	08015a0c 	.word	0x08015a0c
 8011d6c:	0801577e 	.word	0x0801577e

08011d70 <__sflush_r>:
 8011d70:	898a      	ldrh	r2, [r1, #12]
 8011d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d76:	4605      	mov	r5, r0
 8011d78:	0710      	lsls	r0, r2, #28
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	d458      	bmi.n	8011e30 <__sflush_r+0xc0>
 8011d7e:	684b      	ldr	r3, [r1, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	dc05      	bgt.n	8011d90 <__sflush_r+0x20>
 8011d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	dc02      	bgt.n	8011d90 <__sflush_r+0x20>
 8011d8a:	2000      	movs	r0, #0
 8011d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d92:	2e00      	cmp	r6, #0
 8011d94:	d0f9      	beq.n	8011d8a <__sflush_r+0x1a>
 8011d96:	2300      	movs	r3, #0
 8011d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d9c:	682f      	ldr	r7, [r5, #0]
 8011d9e:	6a21      	ldr	r1, [r4, #32]
 8011da0:	602b      	str	r3, [r5, #0]
 8011da2:	d032      	beq.n	8011e0a <__sflush_r+0x9a>
 8011da4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011da6:	89a3      	ldrh	r3, [r4, #12]
 8011da8:	075a      	lsls	r2, r3, #29
 8011daa:	d505      	bpl.n	8011db8 <__sflush_r+0x48>
 8011dac:	6863      	ldr	r3, [r4, #4]
 8011dae:	1ac0      	subs	r0, r0, r3
 8011db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011db2:	b10b      	cbz	r3, 8011db8 <__sflush_r+0x48>
 8011db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011db6:	1ac0      	subs	r0, r0, r3
 8011db8:	2300      	movs	r3, #0
 8011dba:	4602      	mov	r2, r0
 8011dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dbe:	6a21      	ldr	r1, [r4, #32]
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	47b0      	blx	r6
 8011dc4:	1c43      	adds	r3, r0, #1
 8011dc6:	89a3      	ldrh	r3, [r4, #12]
 8011dc8:	d106      	bne.n	8011dd8 <__sflush_r+0x68>
 8011dca:	6829      	ldr	r1, [r5, #0]
 8011dcc:	291d      	cmp	r1, #29
 8011dce:	d848      	bhi.n	8011e62 <__sflush_r+0xf2>
 8011dd0:	4a29      	ldr	r2, [pc, #164]	; (8011e78 <__sflush_r+0x108>)
 8011dd2:	40ca      	lsrs	r2, r1
 8011dd4:	07d6      	lsls	r6, r2, #31
 8011dd6:	d544      	bpl.n	8011e62 <__sflush_r+0xf2>
 8011dd8:	2200      	movs	r2, #0
 8011dda:	6062      	str	r2, [r4, #4]
 8011ddc:	04d9      	lsls	r1, r3, #19
 8011dde:	6922      	ldr	r2, [r4, #16]
 8011de0:	6022      	str	r2, [r4, #0]
 8011de2:	d504      	bpl.n	8011dee <__sflush_r+0x7e>
 8011de4:	1c42      	adds	r2, r0, #1
 8011de6:	d101      	bne.n	8011dec <__sflush_r+0x7c>
 8011de8:	682b      	ldr	r3, [r5, #0]
 8011dea:	b903      	cbnz	r3, 8011dee <__sflush_r+0x7e>
 8011dec:	6560      	str	r0, [r4, #84]	; 0x54
 8011dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011df0:	602f      	str	r7, [r5, #0]
 8011df2:	2900      	cmp	r1, #0
 8011df4:	d0c9      	beq.n	8011d8a <__sflush_r+0x1a>
 8011df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dfa:	4299      	cmp	r1, r3
 8011dfc:	d002      	beq.n	8011e04 <__sflush_r+0x94>
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f000 fc9e 	bl	8012740 <_free_r>
 8011e04:	2000      	movs	r0, #0
 8011e06:	6360      	str	r0, [r4, #52]	; 0x34
 8011e08:	e7c0      	b.n	8011d8c <__sflush_r+0x1c>
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	47b0      	blx	r6
 8011e10:	1c41      	adds	r1, r0, #1
 8011e12:	d1c8      	bne.n	8011da6 <__sflush_r+0x36>
 8011e14:	682b      	ldr	r3, [r5, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d0c5      	beq.n	8011da6 <__sflush_r+0x36>
 8011e1a:	2b1d      	cmp	r3, #29
 8011e1c:	d001      	beq.n	8011e22 <__sflush_r+0xb2>
 8011e1e:	2b16      	cmp	r3, #22
 8011e20:	d101      	bne.n	8011e26 <__sflush_r+0xb6>
 8011e22:	602f      	str	r7, [r5, #0]
 8011e24:	e7b1      	b.n	8011d8a <__sflush_r+0x1a>
 8011e26:	89a3      	ldrh	r3, [r4, #12]
 8011e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e2c:	81a3      	strh	r3, [r4, #12]
 8011e2e:	e7ad      	b.n	8011d8c <__sflush_r+0x1c>
 8011e30:	690f      	ldr	r7, [r1, #16]
 8011e32:	2f00      	cmp	r7, #0
 8011e34:	d0a9      	beq.n	8011d8a <__sflush_r+0x1a>
 8011e36:	0793      	lsls	r3, r2, #30
 8011e38:	680e      	ldr	r6, [r1, #0]
 8011e3a:	bf08      	it	eq
 8011e3c:	694b      	ldreq	r3, [r1, #20]
 8011e3e:	600f      	str	r7, [r1, #0]
 8011e40:	bf18      	it	ne
 8011e42:	2300      	movne	r3, #0
 8011e44:	eba6 0807 	sub.w	r8, r6, r7
 8011e48:	608b      	str	r3, [r1, #8]
 8011e4a:	f1b8 0f00 	cmp.w	r8, #0
 8011e4e:	dd9c      	ble.n	8011d8a <__sflush_r+0x1a>
 8011e50:	4643      	mov	r3, r8
 8011e52:	463a      	mov	r2, r7
 8011e54:	6a21      	ldr	r1, [r4, #32]
 8011e56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e58:	4628      	mov	r0, r5
 8011e5a:	47b0      	blx	r6
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	dc06      	bgt.n	8011e6e <__sflush_r+0xfe>
 8011e60:	89a3      	ldrh	r3, [r4, #12]
 8011e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e66:	81a3      	strh	r3, [r4, #12]
 8011e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e6c:	e78e      	b.n	8011d8c <__sflush_r+0x1c>
 8011e6e:	4407      	add	r7, r0
 8011e70:	eba8 0800 	sub.w	r8, r8, r0
 8011e74:	e7e9      	b.n	8011e4a <__sflush_r+0xda>
 8011e76:	bf00      	nop
 8011e78:	20400001 	.word	0x20400001

08011e7c <_fflush_r>:
 8011e7c:	b538      	push	{r3, r4, r5, lr}
 8011e7e:	690b      	ldr	r3, [r1, #16]
 8011e80:	4605      	mov	r5, r0
 8011e82:	460c      	mov	r4, r1
 8011e84:	b1db      	cbz	r3, 8011ebe <_fflush_r+0x42>
 8011e86:	b118      	cbz	r0, 8011e90 <_fflush_r+0x14>
 8011e88:	6983      	ldr	r3, [r0, #24]
 8011e8a:	b90b      	cbnz	r3, 8011e90 <_fflush_r+0x14>
 8011e8c:	f000 f860 	bl	8011f50 <__sinit>
 8011e90:	4b0c      	ldr	r3, [pc, #48]	; (8011ec4 <_fflush_r+0x48>)
 8011e92:	429c      	cmp	r4, r3
 8011e94:	d109      	bne.n	8011eaa <_fflush_r+0x2e>
 8011e96:	686c      	ldr	r4, [r5, #4]
 8011e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e9c:	b17b      	cbz	r3, 8011ebe <_fflush_r+0x42>
 8011e9e:	4621      	mov	r1, r4
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ea6:	f7ff bf63 	b.w	8011d70 <__sflush_r>
 8011eaa:	4b07      	ldr	r3, [pc, #28]	; (8011ec8 <_fflush_r+0x4c>)
 8011eac:	429c      	cmp	r4, r3
 8011eae:	d101      	bne.n	8011eb4 <_fflush_r+0x38>
 8011eb0:	68ac      	ldr	r4, [r5, #8]
 8011eb2:	e7f1      	b.n	8011e98 <_fflush_r+0x1c>
 8011eb4:	4b05      	ldr	r3, [pc, #20]	; (8011ecc <_fflush_r+0x50>)
 8011eb6:	429c      	cmp	r4, r3
 8011eb8:	bf08      	it	eq
 8011eba:	68ec      	ldreq	r4, [r5, #12]
 8011ebc:	e7ec      	b.n	8011e98 <_fflush_r+0x1c>
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	bd38      	pop	{r3, r4, r5, pc}
 8011ec2:	bf00      	nop
 8011ec4:	080157ac 	.word	0x080157ac
 8011ec8:	080157cc 	.word	0x080157cc
 8011ecc:	0801578c 	.word	0x0801578c

08011ed0 <std>:
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	b510      	push	{r4, lr}
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8011eda:	6083      	str	r3, [r0, #8]
 8011edc:	8181      	strh	r1, [r0, #12]
 8011ede:	6643      	str	r3, [r0, #100]	; 0x64
 8011ee0:	81c2      	strh	r2, [r0, #14]
 8011ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ee6:	6183      	str	r3, [r0, #24]
 8011ee8:	4619      	mov	r1, r3
 8011eea:	2208      	movs	r2, #8
 8011eec:	305c      	adds	r0, #92	; 0x5c
 8011eee:	f7fe fb17 	bl	8010520 <memset>
 8011ef2:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <std+0x38>)
 8011ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8011ef6:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <std+0x3c>)
 8011ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011efa:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <std+0x40>)
 8011efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011efe:	4b05      	ldr	r3, [pc, #20]	; (8011f14 <std+0x44>)
 8011f00:	6224      	str	r4, [r4, #32]
 8011f02:	6323      	str	r3, [r4, #48]	; 0x30
 8011f04:	bd10      	pop	{r4, pc}
 8011f06:	bf00      	nop
 8011f08:	08012dd5 	.word	0x08012dd5
 8011f0c:	08012df7 	.word	0x08012df7
 8011f10:	08012e2f 	.word	0x08012e2f
 8011f14:	08012e53 	.word	0x08012e53

08011f18 <_cleanup_r>:
 8011f18:	4901      	ldr	r1, [pc, #4]	; (8011f20 <_cleanup_r+0x8>)
 8011f1a:	f000 b885 	b.w	8012028 <_fwalk_reent>
 8011f1e:	bf00      	nop
 8011f20:	08011e7d 	.word	0x08011e7d

08011f24 <__sfmoreglue>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	1e4a      	subs	r2, r1, #1
 8011f28:	2568      	movs	r5, #104	; 0x68
 8011f2a:	4355      	muls	r5, r2
 8011f2c:	460e      	mov	r6, r1
 8011f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f32:	f000 fc53 	bl	80127dc <_malloc_r>
 8011f36:	4604      	mov	r4, r0
 8011f38:	b140      	cbz	r0, 8011f4c <__sfmoreglue+0x28>
 8011f3a:	2100      	movs	r1, #0
 8011f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8011f40:	300c      	adds	r0, #12
 8011f42:	60a0      	str	r0, [r4, #8]
 8011f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f48:	f7fe faea 	bl	8010520 <memset>
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	bd70      	pop	{r4, r5, r6, pc}

08011f50 <__sinit>:
 8011f50:	6983      	ldr	r3, [r0, #24]
 8011f52:	b510      	push	{r4, lr}
 8011f54:	4604      	mov	r4, r0
 8011f56:	bb33      	cbnz	r3, 8011fa6 <__sinit+0x56>
 8011f58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011f5c:	6503      	str	r3, [r0, #80]	; 0x50
 8011f5e:	4b12      	ldr	r3, [pc, #72]	; (8011fa8 <__sinit+0x58>)
 8011f60:	4a12      	ldr	r2, [pc, #72]	; (8011fac <__sinit+0x5c>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	6282      	str	r2, [r0, #40]	; 0x28
 8011f66:	4298      	cmp	r0, r3
 8011f68:	bf04      	itt	eq
 8011f6a:	2301      	moveq	r3, #1
 8011f6c:	6183      	streq	r3, [r0, #24]
 8011f6e:	f000 f81f 	bl	8011fb0 <__sfp>
 8011f72:	6060      	str	r0, [r4, #4]
 8011f74:	4620      	mov	r0, r4
 8011f76:	f000 f81b 	bl	8011fb0 <__sfp>
 8011f7a:	60a0      	str	r0, [r4, #8]
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f000 f817 	bl	8011fb0 <__sfp>
 8011f82:	2200      	movs	r2, #0
 8011f84:	60e0      	str	r0, [r4, #12]
 8011f86:	2104      	movs	r1, #4
 8011f88:	6860      	ldr	r0, [r4, #4]
 8011f8a:	f7ff ffa1 	bl	8011ed0 <std>
 8011f8e:	2201      	movs	r2, #1
 8011f90:	2109      	movs	r1, #9
 8011f92:	68a0      	ldr	r0, [r4, #8]
 8011f94:	f7ff ff9c 	bl	8011ed0 <std>
 8011f98:	2202      	movs	r2, #2
 8011f9a:	2112      	movs	r1, #18
 8011f9c:	68e0      	ldr	r0, [r4, #12]
 8011f9e:	f7ff ff97 	bl	8011ed0 <std>
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	61a3      	str	r3, [r4, #24]
 8011fa6:	bd10      	pop	{r4, pc}
 8011fa8:	08015748 	.word	0x08015748
 8011fac:	08011f19 	.word	0x08011f19

08011fb0 <__sfp>:
 8011fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb2:	4b1b      	ldr	r3, [pc, #108]	; (8012020 <__sfp+0x70>)
 8011fb4:	681e      	ldr	r6, [r3, #0]
 8011fb6:	69b3      	ldr	r3, [r6, #24]
 8011fb8:	4607      	mov	r7, r0
 8011fba:	b913      	cbnz	r3, 8011fc2 <__sfp+0x12>
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f7ff ffc7 	bl	8011f50 <__sinit>
 8011fc2:	3648      	adds	r6, #72	; 0x48
 8011fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	d503      	bpl.n	8011fd4 <__sfp+0x24>
 8011fcc:	6833      	ldr	r3, [r6, #0]
 8011fce:	b133      	cbz	r3, 8011fde <__sfp+0x2e>
 8011fd0:	6836      	ldr	r6, [r6, #0]
 8011fd2:	e7f7      	b.n	8011fc4 <__sfp+0x14>
 8011fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011fd8:	b16d      	cbz	r5, 8011ff6 <__sfp+0x46>
 8011fda:	3468      	adds	r4, #104	; 0x68
 8011fdc:	e7f4      	b.n	8011fc8 <__sfp+0x18>
 8011fde:	2104      	movs	r1, #4
 8011fe0:	4638      	mov	r0, r7
 8011fe2:	f7ff ff9f 	bl	8011f24 <__sfmoreglue>
 8011fe6:	6030      	str	r0, [r6, #0]
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d1f1      	bne.n	8011fd0 <__sfp+0x20>
 8011fec:	230c      	movs	r3, #12
 8011fee:	603b      	str	r3, [r7, #0]
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ff6:	4b0b      	ldr	r3, [pc, #44]	; (8012024 <__sfp+0x74>)
 8011ff8:	6665      	str	r5, [r4, #100]	; 0x64
 8011ffa:	e9c4 5500 	strd	r5, r5, [r4]
 8011ffe:	60a5      	str	r5, [r4, #8]
 8012000:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012004:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012008:	2208      	movs	r2, #8
 801200a:	4629      	mov	r1, r5
 801200c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012010:	f7fe fa86 	bl	8010520 <memset>
 8012014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801201c:	e7e9      	b.n	8011ff2 <__sfp+0x42>
 801201e:	bf00      	nop
 8012020:	08015748 	.word	0x08015748
 8012024:	ffff0001 	.word	0xffff0001

08012028 <_fwalk_reent>:
 8012028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801202c:	4680      	mov	r8, r0
 801202e:	4689      	mov	r9, r1
 8012030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012034:	2600      	movs	r6, #0
 8012036:	b914      	cbnz	r4, 801203e <_fwalk_reent+0x16>
 8012038:	4630      	mov	r0, r6
 801203a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801203e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012042:	3f01      	subs	r7, #1
 8012044:	d501      	bpl.n	801204a <_fwalk_reent+0x22>
 8012046:	6824      	ldr	r4, [r4, #0]
 8012048:	e7f5      	b.n	8012036 <_fwalk_reent+0xe>
 801204a:	89ab      	ldrh	r3, [r5, #12]
 801204c:	2b01      	cmp	r3, #1
 801204e:	d907      	bls.n	8012060 <_fwalk_reent+0x38>
 8012050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012054:	3301      	adds	r3, #1
 8012056:	d003      	beq.n	8012060 <_fwalk_reent+0x38>
 8012058:	4629      	mov	r1, r5
 801205a:	4640      	mov	r0, r8
 801205c:	47c8      	blx	r9
 801205e:	4306      	orrs	r6, r0
 8012060:	3568      	adds	r5, #104	; 0x68
 8012062:	e7ee      	b.n	8012042 <_fwalk_reent+0x1a>

08012064 <_localeconv_r>:
 8012064:	4b04      	ldr	r3, [pc, #16]	; (8012078 <_localeconv_r+0x14>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	6a18      	ldr	r0, [r3, #32]
 801206a:	4b04      	ldr	r3, [pc, #16]	; (801207c <_localeconv_r+0x18>)
 801206c:	2800      	cmp	r0, #0
 801206e:	bf08      	it	eq
 8012070:	4618      	moveq	r0, r3
 8012072:	30f0      	adds	r0, #240	; 0xf0
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	20001c38 	.word	0x20001c38
 801207c:	20001c9c 	.word	0x20001c9c

08012080 <__swhatbuf_r>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	460e      	mov	r6, r1
 8012084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012088:	2900      	cmp	r1, #0
 801208a:	b096      	sub	sp, #88	; 0x58
 801208c:	4614      	mov	r4, r2
 801208e:	461d      	mov	r5, r3
 8012090:	da07      	bge.n	80120a2 <__swhatbuf_r+0x22>
 8012092:	2300      	movs	r3, #0
 8012094:	602b      	str	r3, [r5, #0]
 8012096:	89b3      	ldrh	r3, [r6, #12]
 8012098:	061a      	lsls	r2, r3, #24
 801209a:	d410      	bmi.n	80120be <__swhatbuf_r+0x3e>
 801209c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120a0:	e00e      	b.n	80120c0 <__swhatbuf_r+0x40>
 80120a2:	466a      	mov	r2, sp
 80120a4:	f000 fefc 	bl	8012ea0 <_fstat_r>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	dbf2      	blt.n	8012092 <__swhatbuf_r+0x12>
 80120ac:	9a01      	ldr	r2, [sp, #4]
 80120ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80120b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80120b6:	425a      	negs	r2, r3
 80120b8:	415a      	adcs	r2, r3
 80120ba:	602a      	str	r2, [r5, #0]
 80120bc:	e7ee      	b.n	801209c <__swhatbuf_r+0x1c>
 80120be:	2340      	movs	r3, #64	; 0x40
 80120c0:	2000      	movs	r0, #0
 80120c2:	6023      	str	r3, [r4, #0]
 80120c4:	b016      	add	sp, #88	; 0x58
 80120c6:	bd70      	pop	{r4, r5, r6, pc}

080120c8 <__smakebuf_r>:
 80120c8:	898b      	ldrh	r3, [r1, #12]
 80120ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80120cc:	079d      	lsls	r5, r3, #30
 80120ce:	4606      	mov	r6, r0
 80120d0:	460c      	mov	r4, r1
 80120d2:	d507      	bpl.n	80120e4 <__smakebuf_r+0x1c>
 80120d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120d8:	6023      	str	r3, [r4, #0]
 80120da:	6123      	str	r3, [r4, #16]
 80120dc:	2301      	movs	r3, #1
 80120de:	6163      	str	r3, [r4, #20]
 80120e0:	b002      	add	sp, #8
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	ab01      	add	r3, sp, #4
 80120e6:	466a      	mov	r2, sp
 80120e8:	f7ff ffca 	bl	8012080 <__swhatbuf_r>
 80120ec:	9900      	ldr	r1, [sp, #0]
 80120ee:	4605      	mov	r5, r0
 80120f0:	4630      	mov	r0, r6
 80120f2:	f000 fb73 	bl	80127dc <_malloc_r>
 80120f6:	b948      	cbnz	r0, 801210c <__smakebuf_r+0x44>
 80120f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120fc:	059a      	lsls	r2, r3, #22
 80120fe:	d4ef      	bmi.n	80120e0 <__smakebuf_r+0x18>
 8012100:	f023 0303 	bic.w	r3, r3, #3
 8012104:	f043 0302 	orr.w	r3, r3, #2
 8012108:	81a3      	strh	r3, [r4, #12]
 801210a:	e7e3      	b.n	80120d4 <__smakebuf_r+0xc>
 801210c:	4b0d      	ldr	r3, [pc, #52]	; (8012144 <__smakebuf_r+0x7c>)
 801210e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012110:	89a3      	ldrh	r3, [r4, #12]
 8012112:	6020      	str	r0, [r4, #0]
 8012114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012118:	81a3      	strh	r3, [r4, #12]
 801211a:	9b00      	ldr	r3, [sp, #0]
 801211c:	6163      	str	r3, [r4, #20]
 801211e:	9b01      	ldr	r3, [sp, #4]
 8012120:	6120      	str	r0, [r4, #16]
 8012122:	b15b      	cbz	r3, 801213c <__smakebuf_r+0x74>
 8012124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012128:	4630      	mov	r0, r6
 801212a:	f000 fecb 	bl	8012ec4 <_isatty_r>
 801212e:	b128      	cbz	r0, 801213c <__smakebuf_r+0x74>
 8012130:	89a3      	ldrh	r3, [r4, #12]
 8012132:	f023 0303 	bic.w	r3, r3, #3
 8012136:	f043 0301 	orr.w	r3, r3, #1
 801213a:	81a3      	strh	r3, [r4, #12]
 801213c:	89a3      	ldrh	r3, [r4, #12]
 801213e:	431d      	orrs	r5, r3
 8012140:	81a5      	strh	r5, [r4, #12]
 8012142:	e7cd      	b.n	80120e0 <__smakebuf_r+0x18>
 8012144:	08011f19 	.word	0x08011f19

08012148 <malloc>:
 8012148:	4b02      	ldr	r3, [pc, #8]	; (8012154 <malloc+0xc>)
 801214a:	4601      	mov	r1, r0
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	f000 bb45 	b.w	80127dc <_malloc_r>
 8012152:	bf00      	nop
 8012154:	20001c38 	.word	0x20001c38

08012158 <memcpy>:
 8012158:	b510      	push	{r4, lr}
 801215a:	1e43      	subs	r3, r0, #1
 801215c:	440a      	add	r2, r1
 801215e:	4291      	cmp	r1, r2
 8012160:	d100      	bne.n	8012164 <memcpy+0xc>
 8012162:	bd10      	pop	{r4, pc}
 8012164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012168:	f803 4f01 	strb.w	r4, [r3, #1]!
 801216c:	e7f7      	b.n	801215e <memcpy+0x6>

0801216e <_Balloc>:
 801216e:	b570      	push	{r4, r5, r6, lr}
 8012170:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012172:	4604      	mov	r4, r0
 8012174:	460e      	mov	r6, r1
 8012176:	b93d      	cbnz	r5, 8012188 <_Balloc+0x1a>
 8012178:	2010      	movs	r0, #16
 801217a:	f7ff ffe5 	bl	8012148 <malloc>
 801217e:	6260      	str	r0, [r4, #36]	; 0x24
 8012180:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012184:	6005      	str	r5, [r0, #0]
 8012186:	60c5      	str	r5, [r0, #12]
 8012188:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801218a:	68eb      	ldr	r3, [r5, #12]
 801218c:	b183      	cbz	r3, 80121b0 <_Balloc+0x42>
 801218e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012196:	b9b8      	cbnz	r0, 80121c8 <_Balloc+0x5a>
 8012198:	2101      	movs	r1, #1
 801219a:	fa01 f506 	lsl.w	r5, r1, r6
 801219e:	1d6a      	adds	r2, r5, #5
 80121a0:	0092      	lsls	r2, r2, #2
 80121a2:	4620      	mov	r0, r4
 80121a4:	f000 fabe 	bl	8012724 <_calloc_r>
 80121a8:	b160      	cbz	r0, 80121c4 <_Balloc+0x56>
 80121aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80121ae:	e00e      	b.n	80121ce <_Balloc+0x60>
 80121b0:	2221      	movs	r2, #33	; 0x21
 80121b2:	2104      	movs	r1, #4
 80121b4:	4620      	mov	r0, r4
 80121b6:	f000 fab5 	bl	8012724 <_calloc_r>
 80121ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121bc:	60e8      	str	r0, [r5, #12]
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d1e4      	bne.n	801218e <_Balloc+0x20>
 80121c4:	2000      	movs	r0, #0
 80121c6:	bd70      	pop	{r4, r5, r6, pc}
 80121c8:	6802      	ldr	r2, [r0, #0]
 80121ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80121ce:	2300      	movs	r3, #0
 80121d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121d4:	e7f7      	b.n	80121c6 <_Balloc+0x58>

080121d6 <_Bfree>:
 80121d6:	b570      	push	{r4, r5, r6, lr}
 80121d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80121da:	4606      	mov	r6, r0
 80121dc:	460d      	mov	r5, r1
 80121de:	b93c      	cbnz	r4, 80121f0 <_Bfree+0x1a>
 80121e0:	2010      	movs	r0, #16
 80121e2:	f7ff ffb1 	bl	8012148 <malloc>
 80121e6:	6270      	str	r0, [r6, #36]	; 0x24
 80121e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80121ec:	6004      	str	r4, [r0, #0]
 80121ee:	60c4      	str	r4, [r0, #12]
 80121f0:	b13d      	cbz	r5, 8012202 <_Bfree+0x2c>
 80121f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80121f4:	686a      	ldr	r2, [r5, #4]
 80121f6:	68db      	ldr	r3, [r3, #12]
 80121f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121fc:	6029      	str	r1, [r5, #0]
 80121fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012202:	bd70      	pop	{r4, r5, r6, pc}

08012204 <__multadd>:
 8012204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012208:	690d      	ldr	r5, [r1, #16]
 801220a:	461f      	mov	r7, r3
 801220c:	4606      	mov	r6, r0
 801220e:	460c      	mov	r4, r1
 8012210:	f101 0c14 	add.w	ip, r1, #20
 8012214:	2300      	movs	r3, #0
 8012216:	f8dc 0000 	ldr.w	r0, [ip]
 801221a:	b281      	uxth	r1, r0
 801221c:	fb02 7101 	mla	r1, r2, r1, r7
 8012220:	0c0f      	lsrs	r7, r1, #16
 8012222:	0c00      	lsrs	r0, r0, #16
 8012224:	fb02 7000 	mla	r0, r2, r0, r7
 8012228:	b289      	uxth	r1, r1
 801222a:	3301      	adds	r3, #1
 801222c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012230:	429d      	cmp	r5, r3
 8012232:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012236:	f84c 1b04 	str.w	r1, [ip], #4
 801223a:	dcec      	bgt.n	8012216 <__multadd+0x12>
 801223c:	b1d7      	cbz	r7, 8012274 <__multadd+0x70>
 801223e:	68a3      	ldr	r3, [r4, #8]
 8012240:	42ab      	cmp	r3, r5
 8012242:	dc12      	bgt.n	801226a <__multadd+0x66>
 8012244:	6861      	ldr	r1, [r4, #4]
 8012246:	4630      	mov	r0, r6
 8012248:	3101      	adds	r1, #1
 801224a:	f7ff ff90 	bl	801216e <_Balloc>
 801224e:	6922      	ldr	r2, [r4, #16]
 8012250:	3202      	adds	r2, #2
 8012252:	f104 010c 	add.w	r1, r4, #12
 8012256:	4680      	mov	r8, r0
 8012258:	0092      	lsls	r2, r2, #2
 801225a:	300c      	adds	r0, #12
 801225c:	f7ff ff7c 	bl	8012158 <memcpy>
 8012260:	4621      	mov	r1, r4
 8012262:	4630      	mov	r0, r6
 8012264:	f7ff ffb7 	bl	80121d6 <_Bfree>
 8012268:	4644      	mov	r4, r8
 801226a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801226e:	3501      	adds	r5, #1
 8012270:	615f      	str	r7, [r3, #20]
 8012272:	6125      	str	r5, [r4, #16]
 8012274:	4620      	mov	r0, r4
 8012276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801227a <__hi0bits>:
 801227a:	0c02      	lsrs	r2, r0, #16
 801227c:	0412      	lsls	r2, r2, #16
 801227e:	4603      	mov	r3, r0
 8012280:	b9b2      	cbnz	r2, 80122b0 <__hi0bits+0x36>
 8012282:	0403      	lsls	r3, r0, #16
 8012284:	2010      	movs	r0, #16
 8012286:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801228a:	bf04      	itt	eq
 801228c:	021b      	lsleq	r3, r3, #8
 801228e:	3008      	addeq	r0, #8
 8012290:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012294:	bf04      	itt	eq
 8012296:	011b      	lsleq	r3, r3, #4
 8012298:	3004      	addeq	r0, #4
 801229a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801229e:	bf04      	itt	eq
 80122a0:	009b      	lsleq	r3, r3, #2
 80122a2:	3002      	addeq	r0, #2
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	db06      	blt.n	80122b6 <__hi0bits+0x3c>
 80122a8:	005b      	lsls	r3, r3, #1
 80122aa:	d503      	bpl.n	80122b4 <__hi0bits+0x3a>
 80122ac:	3001      	adds	r0, #1
 80122ae:	4770      	bx	lr
 80122b0:	2000      	movs	r0, #0
 80122b2:	e7e8      	b.n	8012286 <__hi0bits+0xc>
 80122b4:	2020      	movs	r0, #32
 80122b6:	4770      	bx	lr

080122b8 <__lo0bits>:
 80122b8:	6803      	ldr	r3, [r0, #0]
 80122ba:	f013 0207 	ands.w	r2, r3, #7
 80122be:	4601      	mov	r1, r0
 80122c0:	d00b      	beq.n	80122da <__lo0bits+0x22>
 80122c2:	07da      	lsls	r2, r3, #31
 80122c4:	d423      	bmi.n	801230e <__lo0bits+0x56>
 80122c6:	0798      	lsls	r0, r3, #30
 80122c8:	bf49      	itett	mi
 80122ca:	085b      	lsrmi	r3, r3, #1
 80122cc:	089b      	lsrpl	r3, r3, #2
 80122ce:	2001      	movmi	r0, #1
 80122d0:	600b      	strmi	r3, [r1, #0]
 80122d2:	bf5c      	itt	pl
 80122d4:	600b      	strpl	r3, [r1, #0]
 80122d6:	2002      	movpl	r0, #2
 80122d8:	4770      	bx	lr
 80122da:	b298      	uxth	r0, r3
 80122dc:	b9a8      	cbnz	r0, 801230a <__lo0bits+0x52>
 80122de:	0c1b      	lsrs	r3, r3, #16
 80122e0:	2010      	movs	r0, #16
 80122e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80122e6:	bf04      	itt	eq
 80122e8:	0a1b      	lsreq	r3, r3, #8
 80122ea:	3008      	addeq	r0, #8
 80122ec:	071a      	lsls	r2, r3, #28
 80122ee:	bf04      	itt	eq
 80122f0:	091b      	lsreq	r3, r3, #4
 80122f2:	3004      	addeq	r0, #4
 80122f4:	079a      	lsls	r2, r3, #30
 80122f6:	bf04      	itt	eq
 80122f8:	089b      	lsreq	r3, r3, #2
 80122fa:	3002      	addeq	r0, #2
 80122fc:	07da      	lsls	r2, r3, #31
 80122fe:	d402      	bmi.n	8012306 <__lo0bits+0x4e>
 8012300:	085b      	lsrs	r3, r3, #1
 8012302:	d006      	beq.n	8012312 <__lo0bits+0x5a>
 8012304:	3001      	adds	r0, #1
 8012306:	600b      	str	r3, [r1, #0]
 8012308:	4770      	bx	lr
 801230a:	4610      	mov	r0, r2
 801230c:	e7e9      	b.n	80122e2 <__lo0bits+0x2a>
 801230e:	2000      	movs	r0, #0
 8012310:	4770      	bx	lr
 8012312:	2020      	movs	r0, #32
 8012314:	4770      	bx	lr

08012316 <__i2b>:
 8012316:	b510      	push	{r4, lr}
 8012318:	460c      	mov	r4, r1
 801231a:	2101      	movs	r1, #1
 801231c:	f7ff ff27 	bl	801216e <_Balloc>
 8012320:	2201      	movs	r2, #1
 8012322:	6144      	str	r4, [r0, #20]
 8012324:	6102      	str	r2, [r0, #16]
 8012326:	bd10      	pop	{r4, pc}

08012328 <__multiply>:
 8012328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232c:	4614      	mov	r4, r2
 801232e:	690a      	ldr	r2, [r1, #16]
 8012330:	6923      	ldr	r3, [r4, #16]
 8012332:	429a      	cmp	r2, r3
 8012334:	bfb8      	it	lt
 8012336:	460b      	movlt	r3, r1
 8012338:	4688      	mov	r8, r1
 801233a:	bfbc      	itt	lt
 801233c:	46a0      	movlt	r8, r4
 801233e:	461c      	movlt	r4, r3
 8012340:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012344:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012348:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801234c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012350:	eb07 0609 	add.w	r6, r7, r9
 8012354:	42b3      	cmp	r3, r6
 8012356:	bfb8      	it	lt
 8012358:	3101      	addlt	r1, #1
 801235a:	f7ff ff08 	bl	801216e <_Balloc>
 801235e:	f100 0514 	add.w	r5, r0, #20
 8012362:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012366:	462b      	mov	r3, r5
 8012368:	2200      	movs	r2, #0
 801236a:	4573      	cmp	r3, lr
 801236c:	d316      	bcc.n	801239c <__multiply+0x74>
 801236e:	f104 0214 	add.w	r2, r4, #20
 8012372:	f108 0114 	add.w	r1, r8, #20
 8012376:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801237a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801237e:	9300      	str	r3, [sp, #0]
 8012380:	9b00      	ldr	r3, [sp, #0]
 8012382:	9201      	str	r2, [sp, #4]
 8012384:	4293      	cmp	r3, r2
 8012386:	d80c      	bhi.n	80123a2 <__multiply+0x7a>
 8012388:	2e00      	cmp	r6, #0
 801238a:	dd03      	ble.n	8012394 <__multiply+0x6c>
 801238c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012390:	2b00      	cmp	r3, #0
 8012392:	d05d      	beq.n	8012450 <__multiply+0x128>
 8012394:	6106      	str	r6, [r0, #16]
 8012396:	b003      	add	sp, #12
 8012398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239c:	f843 2b04 	str.w	r2, [r3], #4
 80123a0:	e7e3      	b.n	801236a <__multiply+0x42>
 80123a2:	f8b2 b000 	ldrh.w	fp, [r2]
 80123a6:	f1bb 0f00 	cmp.w	fp, #0
 80123aa:	d023      	beq.n	80123f4 <__multiply+0xcc>
 80123ac:	4689      	mov	r9, r1
 80123ae:	46ac      	mov	ip, r5
 80123b0:	f04f 0800 	mov.w	r8, #0
 80123b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80123b8:	f8dc a000 	ldr.w	sl, [ip]
 80123bc:	b2a3      	uxth	r3, r4
 80123be:	fa1f fa8a 	uxth.w	sl, sl
 80123c2:	fb0b a303 	mla	r3, fp, r3, sl
 80123c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80123ca:	f8dc 4000 	ldr.w	r4, [ip]
 80123ce:	4443      	add	r3, r8
 80123d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80123d4:	fb0b 840a 	mla	r4, fp, sl, r8
 80123d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80123dc:	46e2      	mov	sl, ip
 80123de:	b29b      	uxth	r3, r3
 80123e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80123e4:	454f      	cmp	r7, r9
 80123e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80123ea:	f84a 3b04 	str.w	r3, [sl], #4
 80123ee:	d82b      	bhi.n	8012448 <__multiply+0x120>
 80123f0:	f8cc 8004 	str.w	r8, [ip, #4]
 80123f4:	9b01      	ldr	r3, [sp, #4]
 80123f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80123fa:	3204      	adds	r2, #4
 80123fc:	f1ba 0f00 	cmp.w	sl, #0
 8012400:	d020      	beq.n	8012444 <__multiply+0x11c>
 8012402:	682b      	ldr	r3, [r5, #0]
 8012404:	4689      	mov	r9, r1
 8012406:	46a8      	mov	r8, r5
 8012408:	f04f 0b00 	mov.w	fp, #0
 801240c:	f8b9 c000 	ldrh.w	ip, [r9]
 8012410:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012414:	fb0a 440c 	mla	r4, sl, ip, r4
 8012418:	445c      	add	r4, fp
 801241a:	46c4      	mov	ip, r8
 801241c:	b29b      	uxth	r3, r3
 801241e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012422:	f84c 3b04 	str.w	r3, [ip], #4
 8012426:	f859 3b04 	ldr.w	r3, [r9], #4
 801242a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801242e:	0c1b      	lsrs	r3, r3, #16
 8012430:	fb0a b303 	mla	r3, sl, r3, fp
 8012434:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012438:	454f      	cmp	r7, r9
 801243a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801243e:	d805      	bhi.n	801244c <__multiply+0x124>
 8012440:	f8c8 3004 	str.w	r3, [r8, #4]
 8012444:	3504      	adds	r5, #4
 8012446:	e79b      	b.n	8012380 <__multiply+0x58>
 8012448:	46d4      	mov	ip, sl
 801244a:	e7b3      	b.n	80123b4 <__multiply+0x8c>
 801244c:	46e0      	mov	r8, ip
 801244e:	e7dd      	b.n	801240c <__multiply+0xe4>
 8012450:	3e01      	subs	r6, #1
 8012452:	e799      	b.n	8012388 <__multiply+0x60>

08012454 <__pow5mult>:
 8012454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012458:	4615      	mov	r5, r2
 801245a:	f012 0203 	ands.w	r2, r2, #3
 801245e:	4606      	mov	r6, r0
 8012460:	460f      	mov	r7, r1
 8012462:	d007      	beq.n	8012474 <__pow5mult+0x20>
 8012464:	3a01      	subs	r2, #1
 8012466:	4c21      	ldr	r4, [pc, #132]	; (80124ec <__pow5mult+0x98>)
 8012468:	2300      	movs	r3, #0
 801246a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801246e:	f7ff fec9 	bl	8012204 <__multadd>
 8012472:	4607      	mov	r7, r0
 8012474:	10ad      	asrs	r5, r5, #2
 8012476:	d035      	beq.n	80124e4 <__pow5mult+0x90>
 8012478:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801247a:	b93c      	cbnz	r4, 801248c <__pow5mult+0x38>
 801247c:	2010      	movs	r0, #16
 801247e:	f7ff fe63 	bl	8012148 <malloc>
 8012482:	6270      	str	r0, [r6, #36]	; 0x24
 8012484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012488:	6004      	str	r4, [r0, #0]
 801248a:	60c4      	str	r4, [r0, #12]
 801248c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012494:	b94c      	cbnz	r4, 80124aa <__pow5mult+0x56>
 8012496:	f240 2171 	movw	r1, #625	; 0x271
 801249a:	4630      	mov	r0, r6
 801249c:	f7ff ff3b 	bl	8012316 <__i2b>
 80124a0:	2300      	movs	r3, #0
 80124a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80124a6:	4604      	mov	r4, r0
 80124a8:	6003      	str	r3, [r0, #0]
 80124aa:	f04f 0800 	mov.w	r8, #0
 80124ae:	07eb      	lsls	r3, r5, #31
 80124b0:	d50a      	bpl.n	80124c8 <__pow5mult+0x74>
 80124b2:	4639      	mov	r1, r7
 80124b4:	4622      	mov	r2, r4
 80124b6:	4630      	mov	r0, r6
 80124b8:	f7ff ff36 	bl	8012328 <__multiply>
 80124bc:	4639      	mov	r1, r7
 80124be:	4681      	mov	r9, r0
 80124c0:	4630      	mov	r0, r6
 80124c2:	f7ff fe88 	bl	80121d6 <_Bfree>
 80124c6:	464f      	mov	r7, r9
 80124c8:	106d      	asrs	r5, r5, #1
 80124ca:	d00b      	beq.n	80124e4 <__pow5mult+0x90>
 80124cc:	6820      	ldr	r0, [r4, #0]
 80124ce:	b938      	cbnz	r0, 80124e0 <__pow5mult+0x8c>
 80124d0:	4622      	mov	r2, r4
 80124d2:	4621      	mov	r1, r4
 80124d4:	4630      	mov	r0, r6
 80124d6:	f7ff ff27 	bl	8012328 <__multiply>
 80124da:	6020      	str	r0, [r4, #0]
 80124dc:	f8c0 8000 	str.w	r8, [r0]
 80124e0:	4604      	mov	r4, r0
 80124e2:	e7e4      	b.n	80124ae <__pow5mult+0x5a>
 80124e4:	4638      	mov	r0, r7
 80124e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ea:	bf00      	nop
 80124ec:	080158e0 	.word	0x080158e0

080124f0 <__lshift>:
 80124f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124f4:	460c      	mov	r4, r1
 80124f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80124fa:	6923      	ldr	r3, [r4, #16]
 80124fc:	6849      	ldr	r1, [r1, #4]
 80124fe:	eb0a 0903 	add.w	r9, sl, r3
 8012502:	68a3      	ldr	r3, [r4, #8]
 8012504:	4607      	mov	r7, r0
 8012506:	4616      	mov	r6, r2
 8012508:	f109 0501 	add.w	r5, r9, #1
 801250c:	42ab      	cmp	r3, r5
 801250e:	db32      	blt.n	8012576 <__lshift+0x86>
 8012510:	4638      	mov	r0, r7
 8012512:	f7ff fe2c 	bl	801216e <_Balloc>
 8012516:	2300      	movs	r3, #0
 8012518:	4680      	mov	r8, r0
 801251a:	f100 0114 	add.w	r1, r0, #20
 801251e:	461a      	mov	r2, r3
 8012520:	4553      	cmp	r3, sl
 8012522:	db2b      	blt.n	801257c <__lshift+0x8c>
 8012524:	6920      	ldr	r0, [r4, #16]
 8012526:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801252a:	f104 0314 	add.w	r3, r4, #20
 801252e:	f016 021f 	ands.w	r2, r6, #31
 8012532:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012536:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801253a:	d025      	beq.n	8012588 <__lshift+0x98>
 801253c:	f1c2 0e20 	rsb	lr, r2, #32
 8012540:	2000      	movs	r0, #0
 8012542:	681e      	ldr	r6, [r3, #0]
 8012544:	468a      	mov	sl, r1
 8012546:	4096      	lsls	r6, r2
 8012548:	4330      	orrs	r0, r6
 801254a:	f84a 0b04 	str.w	r0, [sl], #4
 801254e:	f853 0b04 	ldr.w	r0, [r3], #4
 8012552:	459c      	cmp	ip, r3
 8012554:	fa20 f00e 	lsr.w	r0, r0, lr
 8012558:	d814      	bhi.n	8012584 <__lshift+0x94>
 801255a:	6048      	str	r0, [r1, #4]
 801255c:	b108      	cbz	r0, 8012562 <__lshift+0x72>
 801255e:	f109 0502 	add.w	r5, r9, #2
 8012562:	3d01      	subs	r5, #1
 8012564:	4638      	mov	r0, r7
 8012566:	f8c8 5010 	str.w	r5, [r8, #16]
 801256a:	4621      	mov	r1, r4
 801256c:	f7ff fe33 	bl	80121d6 <_Bfree>
 8012570:	4640      	mov	r0, r8
 8012572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012576:	3101      	adds	r1, #1
 8012578:	005b      	lsls	r3, r3, #1
 801257a:	e7c7      	b.n	801250c <__lshift+0x1c>
 801257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012580:	3301      	adds	r3, #1
 8012582:	e7cd      	b.n	8012520 <__lshift+0x30>
 8012584:	4651      	mov	r1, sl
 8012586:	e7dc      	b.n	8012542 <__lshift+0x52>
 8012588:	3904      	subs	r1, #4
 801258a:	f853 2b04 	ldr.w	r2, [r3], #4
 801258e:	f841 2f04 	str.w	r2, [r1, #4]!
 8012592:	459c      	cmp	ip, r3
 8012594:	d8f9      	bhi.n	801258a <__lshift+0x9a>
 8012596:	e7e4      	b.n	8012562 <__lshift+0x72>

08012598 <__mcmp>:
 8012598:	6903      	ldr	r3, [r0, #16]
 801259a:	690a      	ldr	r2, [r1, #16]
 801259c:	1a9b      	subs	r3, r3, r2
 801259e:	b530      	push	{r4, r5, lr}
 80125a0:	d10c      	bne.n	80125bc <__mcmp+0x24>
 80125a2:	0092      	lsls	r2, r2, #2
 80125a4:	3014      	adds	r0, #20
 80125a6:	3114      	adds	r1, #20
 80125a8:	1884      	adds	r4, r0, r2
 80125aa:	4411      	add	r1, r2
 80125ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80125b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80125b4:	4295      	cmp	r5, r2
 80125b6:	d003      	beq.n	80125c0 <__mcmp+0x28>
 80125b8:	d305      	bcc.n	80125c6 <__mcmp+0x2e>
 80125ba:	2301      	movs	r3, #1
 80125bc:	4618      	mov	r0, r3
 80125be:	bd30      	pop	{r4, r5, pc}
 80125c0:	42a0      	cmp	r0, r4
 80125c2:	d3f3      	bcc.n	80125ac <__mcmp+0x14>
 80125c4:	e7fa      	b.n	80125bc <__mcmp+0x24>
 80125c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125ca:	e7f7      	b.n	80125bc <__mcmp+0x24>

080125cc <__mdiff>:
 80125cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125d0:	460d      	mov	r5, r1
 80125d2:	4607      	mov	r7, r0
 80125d4:	4611      	mov	r1, r2
 80125d6:	4628      	mov	r0, r5
 80125d8:	4614      	mov	r4, r2
 80125da:	f7ff ffdd 	bl	8012598 <__mcmp>
 80125de:	1e06      	subs	r6, r0, #0
 80125e0:	d108      	bne.n	80125f4 <__mdiff+0x28>
 80125e2:	4631      	mov	r1, r6
 80125e4:	4638      	mov	r0, r7
 80125e6:	f7ff fdc2 	bl	801216e <_Balloc>
 80125ea:	2301      	movs	r3, #1
 80125ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80125f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125f4:	bfa4      	itt	ge
 80125f6:	4623      	movge	r3, r4
 80125f8:	462c      	movge	r4, r5
 80125fa:	4638      	mov	r0, r7
 80125fc:	6861      	ldr	r1, [r4, #4]
 80125fe:	bfa6      	itte	ge
 8012600:	461d      	movge	r5, r3
 8012602:	2600      	movge	r6, #0
 8012604:	2601      	movlt	r6, #1
 8012606:	f7ff fdb2 	bl	801216e <_Balloc>
 801260a:	692b      	ldr	r3, [r5, #16]
 801260c:	60c6      	str	r6, [r0, #12]
 801260e:	6926      	ldr	r6, [r4, #16]
 8012610:	f105 0914 	add.w	r9, r5, #20
 8012614:	f104 0214 	add.w	r2, r4, #20
 8012618:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801261c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012620:	f100 0514 	add.w	r5, r0, #20
 8012624:	f04f 0e00 	mov.w	lr, #0
 8012628:	f852 ab04 	ldr.w	sl, [r2], #4
 801262c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012630:	fa1e f18a 	uxtah	r1, lr, sl
 8012634:	b2a3      	uxth	r3, r4
 8012636:	1ac9      	subs	r1, r1, r3
 8012638:	0c23      	lsrs	r3, r4, #16
 801263a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801263e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012642:	b289      	uxth	r1, r1
 8012644:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012648:	45c8      	cmp	r8, r9
 801264a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801264e:	4694      	mov	ip, r2
 8012650:	f845 3b04 	str.w	r3, [r5], #4
 8012654:	d8e8      	bhi.n	8012628 <__mdiff+0x5c>
 8012656:	45bc      	cmp	ip, r7
 8012658:	d304      	bcc.n	8012664 <__mdiff+0x98>
 801265a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801265e:	b183      	cbz	r3, 8012682 <__mdiff+0xb6>
 8012660:	6106      	str	r6, [r0, #16]
 8012662:	e7c5      	b.n	80125f0 <__mdiff+0x24>
 8012664:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012668:	fa1e f381 	uxtah	r3, lr, r1
 801266c:	141a      	asrs	r2, r3, #16
 801266e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012672:	b29b      	uxth	r3, r3
 8012674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012678:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801267c:	f845 3b04 	str.w	r3, [r5], #4
 8012680:	e7e9      	b.n	8012656 <__mdiff+0x8a>
 8012682:	3e01      	subs	r6, #1
 8012684:	e7e9      	b.n	801265a <__mdiff+0x8e>

08012686 <__d2b>:
 8012686:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801268a:	460e      	mov	r6, r1
 801268c:	2101      	movs	r1, #1
 801268e:	ec59 8b10 	vmov	r8, r9, d0
 8012692:	4615      	mov	r5, r2
 8012694:	f7ff fd6b 	bl	801216e <_Balloc>
 8012698:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801269c:	4607      	mov	r7, r0
 801269e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126a2:	bb34      	cbnz	r4, 80126f2 <__d2b+0x6c>
 80126a4:	9301      	str	r3, [sp, #4]
 80126a6:	f1b8 0300 	subs.w	r3, r8, #0
 80126aa:	d027      	beq.n	80126fc <__d2b+0x76>
 80126ac:	a802      	add	r0, sp, #8
 80126ae:	f840 3d08 	str.w	r3, [r0, #-8]!
 80126b2:	f7ff fe01 	bl	80122b8 <__lo0bits>
 80126b6:	9900      	ldr	r1, [sp, #0]
 80126b8:	b1f0      	cbz	r0, 80126f8 <__d2b+0x72>
 80126ba:	9a01      	ldr	r2, [sp, #4]
 80126bc:	f1c0 0320 	rsb	r3, r0, #32
 80126c0:	fa02 f303 	lsl.w	r3, r2, r3
 80126c4:	430b      	orrs	r3, r1
 80126c6:	40c2      	lsrs	r2, r0
 80126c8:	617b      	str	r3, [r7, #20]
 80126ca:	9201      	str	r2, [sp, #4]
 80126cc:	9b01      	ldr	r3, [sp, #4]
 80126ce:	61bb      	str	r3, [r7, #24]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	bf14      	ite	ne
 80126d4:	2102      	movne	r1, #2
 80126d6:	2101      	moveq	r1, #1
 80126d8:	6139      	str	r1, [r7, #16]
 80126da:	b1c4      	cbz	r4, 801270e <__d2b+0x88>
 80126dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80126e0:	4404      	add	r4, r0
 80126e2:	6034      	str	r4, [r6, #0]
 80126e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80126e8:	6028      	str	r0, [r5, #0]
 80126ea:	4638      	mov	r0, r7
 80126ec:	b003      	add	sp, #12
 80126ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80126f6:	e7d5      	b.n	80126a4 <__d2b+0x1e>
 80126f8:	6179      	str	r1, [r7, #20]
 80126fa:	e7e7      	b.n	80126cc <__d2b+0x46>
 80126fc:	a801      	add	r0, sp, #4
 80126fe:	f7ff fddb 	bl	80122b8 <__lo0bits>
 8012702:	9b01      	ldr	r3, [sp, #4]
 8012704:	617b      	str	r3, [r7, #20]
 8012706:	2101      	movs	r1, #1
 8012708:	6139      	str	r1, [r7, #16]
 801270a:	3020      	adds	r0, #32
 801270c:	e7e5      	b.n	80126da <__d2b+0x54>
 801270e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012712:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012716:	6030      	str	r0, [r6, #0]
 8012718:	6918      	ldr	r0, [r3, #16]
 801271a:	f7ff fdae 	bl	801227a <__hi0bits>
 801271e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012722:	e7e1      	b.n	80126e8 <__d2b+0x62>

08012724 <_calloc_r>:
 8012724:	b538      	push	{r3, r4, r5, lr}
 8012726:	fb02 f401 	mul.w	r4, r2, r1
 801272a:	4621      	mov	r1, r4
 801272c:	f000 f856 	bl	80127dc <_malloc_r>
 8012730:	4605      	mov	r5, r0
 8012732:	b118      	cbz	r0, 801273c <_calloc_r+0x18>
 8012734:	4622      	mov	r2, r4
 8012736:	2100      	movs	r1, #0
 8012738:	f7fd fef2 	bl	8010520 <memset>
 801273c:	4628      	mov	r0, r5
 801273e:	bd38      	pop	{r3, r4, r5, pc}

08012740 <_free_r>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4605      	mov	r5, r0
 8012744:	2900      	cmp	r1, #0
 8012746:	d045      	beq.n	80127d4 <_free_r+0x94>
 8012748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801274c:	1f0c      	subs	r4, r1, #4
 801274e:	2b00      	cmp	r3, #0
 8012750:	bfb8      	it	lt
 8012752:	18e4      	addlt	r4, r4, r3
 8012754:	f000 fc03 	bl	8012f5e <__malloc_lock>
 8012758:	4a1f      	ldr	r2, [pc, #124]	; (80127d8 <_free_r+0x98>)
 801275a:	6813      	ldr	r3, [r2, #0]
 801275c:	4610      	mov	r0, r2
 801275e:	b933      	cbnz	r3, 801276e <_free_r+0x2e>
 8012760:	6063      	str	r3, [r4, #4]
 8012762:	6014      	str	r4, [r2, #0]
 8012764:	4628      	mov	r0, r5
 8012766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801276a:	f000 bbf9 	b.w	8012f60 <__malloc_unlock>
 801276e:	42a3      	cmp	r3, r4
 8012770:	d90c      	bls.n	801278c <_free_r+0x4c>
 8012772:	6821      	ldr	r1, [r4, #0]
 8012774:	1862      	adds	r2, r4, r1
 8012776:	4293      	cmp	r3, r2
 8012778:	bf04      	itt	eq
 801277a:	681a      	ldreq	r2, [r3, #0]
 801277c:	685b      	ldreq	r3, [r3, #4]
 801277e:	6063      	str	r3, [r4, #4]
 8012780:	bf04      	itt	eq
 8012782:	1852      	addeq	r2, r2, r1
 8012784:	6022      	streq	r2, [r4, #0]
 8012786:	6004      	str	r4, [r0, #0]
 8012788:	e7ec      	b.n	8012764 <_free_r+0x24>
 801278a:	4613      	mov	r3, r2
 801278c:	685a      	ldr	r2, [r3, #4]
 801278e:	b10a      	cbz	r2, 8012794 <_free_r+0x54>
 8012790:	42a2      	cmp	r2, r4
 8012792:	d9fa      	bls.n	801278a <_free_r+0x4a>
 8012794:	6819      	ldr	r1, [r3, #0]
 8012796:	1858      	adds	r0, r3, r1
 8012798:	42a0      	cmp	r0, r4
 801279a:	d10b      	bne.n	80127b4 <_free_r+0x74>
 801279c:	6820      	ldr	r0, [r4, #0]
 801279e:	4401      	add	r1, r0
 80127a0:	1858      	adds	r0, r3, r1
 80127a2:	4282      	cmp	r2, r0
 80127a4:	6019      	str	r1, [r3, #0]
 80127a6:	d1dd      	bne.n	8012764 <_free_r+0x24>
 80127a8:	6810      	ldr	r0, [r2, #0]
 80127aa:	6852      	ldr	r2, [r2, #4]
 80127ac:	605a      	str	r2, [r3, #4]
 80127ae:	4401      	add	r1, r0
 80127b0:	6019      	str	r1, [r3, #0]
 80127b2:	e7d7      	b.n	8012764 <_free_r+0x24>
 80127b4:	d902      	bls.n	80127bc <_free_r+0x7c>
 80127b6:	230c      	movs	r3, #12
 80127b8:	602b      	str	r3, [r5, #0]
 80127ba:	e7d3      	b.n	8012764 <_free_r+0x24>
 80127bc:	6820      	ldr	r0, [r4, #0]
 80127be:	1821      	adds	r1, r4, r0
 80127c0:	428a      	cmp	r2, r1
 80127c2:	bf04      	itt	eq
 80127c4:	6811      	ldreq	r1, [r2, #0]
 80127c6:	6852      	ldreq	r2, [r2, #4]
 80127c8:	6062      	str	r2, [r4, #4]
 80127ca:	bf04      	itt	eq
 80127cc:	1809      	addeq	r1, r1, r0
 80127ce:	6021      	streq	r1, [r4, #0]
 80127d0:	605c      	str	r4, [r3, #4]
 80127d2:	e7c7      	b.n	8012764 <_free_r+0x24>
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
 80127d6:	bf00      	nop
 80127d8:	20002264 	.word	0x20002264

080127dc <_malloc_r>:
 80127dc:	b570      	push	{r4, r5, r6, lr}
 80127de:	1ccd      	adds	r5, r1, #3
 80127e0:	f025 0503 	bic.w	r5, r5, #3
 80127e4:	3508      	adds	r5, #8
 80127e6:	2d0c      	cmp	r5, #12
 80127e8:	bf38      	it	cc
 80127ea:	250c      	movcc	r5, #12
 80127ec:	2d00      	cmp	r5, #0
 80127ee:	4606      	mov	r6, r0
 80127f0:	db01      	blt.n	80127f6 <_malloc_r+0x1a>
 80127f2:	42a9      	cmp	r1, r5
 80127f4:	d903      	bls.n	80127fe <_malloc_r+0x22>
 80127f6:	230c      	movs	r3, #12
 80127f8:	6033      	str	r3, [r6, #0]
 80127fa:	2000      	movs	r0, #0
 80127fc:	bd70      	pop	{r4, r5, r6, pc}
 80127fe:	f000 fbae 	bl	8012f5e <__malloc_lock>
 8012802:	4a21      	ldr	r2, [pc, #132]	; (8012888 <_malloc_r+0xac>)
 8012804:	6814      	ldr	r4, [r2, #0]
 8012806:	4621      	mov	r1, r4
 8012808:	b991      	cbnz	r1, 8012830 <_malloc_r+0x54>
 801280a:	4c20      	ldr	r4, [pc, #128]	; (801288c <_malloc_r+0xb0>)
 801280c:	6823      	ldr	r3, [r4, #0]
 801280e:	b91b      	cbnz	r3, 8012818 <_malloc_r+0x3c>
 8012810:	4630      	mov	r0, r6
 8012812:	f000 facf 	bl	8012db4 <_sbrk_r>
 8012816:	6020      	str	r0, [r4, #0]
 8012818:	4629      	mov	r1, r5
 801281a:	4630      	mov	r0, r6
 801281c:	f000 faca 	bl	8012db4 <_sbrk_r>
 8012820:	1c43      	adds	r3, r0, #1
 8012822:	d124      	bne.n	801286e <_malloc_r+0x92>
 8012824:	230c      	movs	r3, #12
 8012826:	6033      	str	r3, [r6, #0]
 8012828:	4630      	mov	r0, r6
 801282a:	f000 fb99 	bl	8012f60 <__malloc_unlock>
 801282e:	e7e4      	b.n	80127fa <_malloc_r+0x1e>
 8012830:	680b      	ldr	r3, [r1, #0]
 8012832:	1b5b      	subs	r3, r3, r5
 8012834:	d418      	bmi.n	8012868 <_malloc_r+0x8c>
 8012836:	2b0b      	cmp	r3, #11
 8012838:	d90f      	bls.n	801285a <_malloc_r+0x7e>
 801283a:	600b      	str	r3, [r1, #0]
 801283c:	50cd      	str	r5, [r1, r3]
 801283e:	18cc      	adds	r4, r1, r3
 8012840:	4630      	mov	r0, r6
 8012842:	f000 fb8d 	bl	8012f60 <__malloc_unlock>
 8012846:	f104 000b 	add.w	r0, r4, #11
 801284a:	1d23      	adds	r3, r4, #4
 801284c:	f020 0007 	bic.w	r0, r0, #7
 8012850:	1ac3      	subs	r3, r0, r3
 8012852:	d0d3      	beq.n	80127fc <_malloc_r+0x20>
 8012854:	425a      	negs	r2, r3
 8012856:	50e2      	str	r2, [r4, r3]
 8012858:	e7d0      	b.n	80127fc <_malloc_r+0x20>
 801285a:	428c      	cmp	r4, r1
 801285c:	684b      	ldr	r3, [r1, #4]
 801285e:	bf16      	itet	ne
 8012860:	6063      	strne	r3, [r4, #4]
 8012862:	6013      	streq	r3, [r2, #0]
 8012864:	460c      	movne	r4, r1
 8012866:	e7eb      	b.n	8012840 <_malloc_r+0x64>
 8012868:	460c      	mov	r4, r1
 801286a:	6849      	ldr	r1, [r1, #4]
 801286c:	e7cc      	b.n	8012808 <_malloc_r+0x2c>
 801286e:	1cc4      	adds	r4, r0, #3
 8012870:	f024 0403 	bic.w	r4, r4, #3
 8012874:	42a0      	cmp	r0, r4
 8012876:	d005      	beq.n	8012884 <_malloc_r+0xa8>
 8012878:	1a21      	subs	r1, r4, r0
 801287a:	4630      	mov	r0, r6
 801287c:	f000 fa9a 	bl	8012db4 <_sbrk_r>
 8012880:	3001      	adds	r0, #1
 8012882:	d0cf      	beq.n	8012824 <_malloc_r+0x48>
 8012884:	6025      	str	r5, [r4, #0]
 8012886:	e7db      	b.n	8012840 <_malloc_r+0x64>
 8012888:	20002264 	.word	0x20002264
 801288c:	20002268 	.word	0x20002268

08012890 <__ssputs_r>:
 8012890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012894:	688e      	ldr	r6, [r1, #8]
 8012896:	429e      	cmp	r6, r3
 8012898:	4682      	mov	sl, r0
 801289a:	460c      	mov	r4, r1
 801289c:	4690      	mov	r8, r2
 801289e:	4699      	mov	r9, r3
 80128a0:	d837      	bhi.n	8012912 <__ssputs_r+0x82>
 80128a2:	898a      	ldrh	r2, [r1, #12]
 80128a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128a8:	d031      	beq.n	801290e <__ssputs_r+0x7e>
 80128aa:	6825      	ldr	r5, [r4, #0]
 80128ac:	6909      	ldr	r1, [r1, #16]
 80128ae:	1a6f      	subs	r7, r5, r1
 80128b0:	6965      	ldr	r5, [r4, #20]
 80128b2:	2302      	movs	r3, #2
 80128b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80128bc:	f109 0301 	add.w	r3, r9, #1
 80128c0:	443b      	add	r3, r7
 80128c2:	429d      	cmp	r5, r3
 80128c4:	bf38      	it	cc
 80128c6:	461d      	movcc	r5, r3
 80128c8:	0553      	lsls	r3, r2, #21
 80128ca:	d530      	bpl.n	801292e <__ssputs_r+0x9e>
 80128cc:	4629      	mov	r1, r5
 80128ce:	f7ff ff85 	bl	80127dc <_malloc_r>
 80128d2:	4606      	mov	r6, r0
 80128d4:	b950      	cbnz	r0, 80128ec <__ssputs_r+0x5c>
 80128d6:	230c      	movs	r3, #12
 80128d8:	f8ca 3000 	str.w	r3, [sl]
 80128dc:	89a3      	ldrh	r3, [r4, #12]
 80128de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128e2:	81a3      	strh	r3, [r4, #12]
 80128e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ec:	463a      	mov	r2, r7
 80128ee:	6921      	ldr	r1, [r4, #16]
 80128f0:	f7ff fc32 	bl	8012158 <memcpy>
 80128f4:	89a3      	ldrh	r3, [r4, #12]
 80128f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80128fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128fe:	81a3      	strh	r3, [r4, #12]
 8012900:	6126      	str	r6, [r4, #16]
 8012902:	6165      	str	r5, [r4, #20]
 8012904:	443e      	add	r6, r7
 8012906:	1bed      	subs	r5, r5, r7
 8012908:	6026      	str	r6, [r4, #0]
 801290a:	60a5      	str	r5, [r4, #8]
 801290c:	464e      	mov	r6, r9
 801290e:	454e      	cmp	r6, r9
 8012910:	d900      	bls.n	8012914 <__ssputs_r+0x84>
 8012912:	464e      	mov	r6, r9
 8012914:	4632      	mov	r2, r6
 8012916:	4641      	mov	r1, r8
 8012918:	6820      	ldr	r0, [r4, #0]
 801291a:	f000 fb07 	bl	8012f2c <memmove>
 801291e:	68a3      	ldr	r3, [r4, #8]
 8012920:	1b9b      	subs	r3, r3, r6
 8012922:	60a3      	str	r3, [r4, #8]
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	441e      	add	r6, r3
 8012928:	6026      	str	r6, [r4, #0]
 801292a:	2000      	movs	r0, #0
 801292c:	e7dc      	b.n	80128e8 <__ssputs_r+0x58>
 801292e:	462a      	mov	r2, r5
 8012930:	f000 fb17 	bl	8012f62 <_realloc_r>
 8012934:	4606      	mov	r6, r0
 8012936:	2800      	cmp	r0, #0
 8012938:	d1e2      	bne.n	8012900 <__ssputs_r+0x70>
 801293a:	6921      	ldr	r1, [r4, #16]
 801293c:	4650      	mov	r0, sl
 801293e:	f7ff feff 	bl	8012740 <_free_r>
 8012942:	e7c8      	b.n	80128d6 <__ssputs_r+0x46>

08012944 <_svfiprintf_r>:
 8012944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012948:	461d      	mov	r5, r3
 801294a:	898b      	ldrh	r3, [r1, #12]
 801294c:	061f      	lsls	r7, r3, #24
 801294e:	b09d      	sub	sp, #116	; 0x74
 8012950:	4680      	mov	r8, r0
 8012952:	460c      	mov	r4, r1
 8012954:	4616      	mov	r6, r2
 8012956:	d50f      	bpl.n	8012978 <_svfiprintf_r+0x34>
 8012958:	690b      	ldr	r3, [r1, #16]
 801295a:	b96b      	cbnz	r3, 8012978 <_svfiprintf_r+0x34>
 801295c:	2140      	movs	r1, #64	; 0x40
 801295e:	f7ff ff3d 	bl	80127dc <_malloc_r>
 8012962:	6020      	str	r0, [r4, #0]
 8012964:	6120      	str	r0, [r4, #16]
 8012966:	b928      	cbnz	r0, 8012974 <_svfiprintf_r+0x30>
 8012968:	230c      	movs	r3, #12
 801296a:	f8c8 3000 	str.w	r3, [r8]
 801296e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012972:	e0c8      	b.n	8012b06 <_svfiprintf_r+0x1c2>
 8012974:	2340      	movs	r3, #64	; 0x40
 8012976:	6163      	str	r3, [r4, #20]
 8012978:	2300      	movs	r3, #0
 801297a:	9309      	str	r3, [sp, #36]	; 0x24
 801297c:	2320      	movs	r3, #32
 801297e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012982:	2330      	movs	r3, #48	; 0x30
 8012984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012988:	9503      	str	r5, [sp, #12]
 801298a:	f04f 0b01 	mov.w	fp, #1
 801298e:	4637      	mov	r7, r6
 8012990:	463d      	mov	r5, r7
 8012992:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012996:	b10b      	cbz	r3, 801299c <_svfiprintf_r+0x58>
 8012998:	2b25      	cmp	r3, #37	; 0x25
 801299a:	d13e      	bne.n	8012a1a <_svfiprintf_r+0xd6>
 801299c:	ebb7 0a06 	subs.w	sl, r7, r6
 80129a0:	d00b      	beq.n	80129ba <_svfiprintf_r+0x76>
 80129a2:	4653      	mov	r3, sl
 80129a4:	4632      	mov	r2, r6
 80129a6:	4621      	mov	r1, r4
 80129a8:	4640      	mov	r0, r8
 80129aa:	f7ff ff71 	bl	8012890 <__ssputs_r>
 80129ae:	3001      	adds	r0, #1
 80129b0:	f000 80a4 	beq.w	8012afc <_svfiprintf_r+0x1b8>
 80129b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b6:	4453      	add	r3, sl
 80129b8:	9309      	str	r3, [sp, #36]	; 0x24
 80129ba:	783b      	ldrb	r3, [r7, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	f000 809d 	beq.w	8012afc <_svfiprintf_r+0x1b8>
 80129c2:	2300      	movs	r3, #0
 80129c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129cc:	9304      	str	r3, [sp, #16]
 80129ce:	9307      	str	r3, [sp, #28]
 80129d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129d4:	931a      	str	r3, [sp, #104]	; 0x68
 80129d6:	462f      	mov	r7, r5
 80129d8:	2205      	movs	r2, #5
 80129da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80129de:	4850      	ldr	r0, [pc, #320]	; (8012b20 <_svfiprintf_r+0x1dc>)
 80129e0:	f7ed fc26 	bl	8000230 <memchr>
 80129e4:	9b04      	ldr	r3, [sp, #16]
 80129e6:	b9d0      	cbnz	r0, 8012a1e <_svfiprintf_r+0xda>
 80129e8:	06d9      	lsls	r1, r3, #27
 80129ea:	bf44      	itt	mi
 80129ec:	2220      	movmi	r2, #32
 80129ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80129f2:	071a      	lsls	r2, r3, #28
 80129f4:	bf44      	itt	mi
 80129f6:	222b      	movmi	r2, #43	; 0x2b
 80129f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80129fc:	782a      	ldrb	r2, [r5, #0]
 80129fe:	2a2a      	cmp	r2, #42	; 0x2a
 8012a00:	d015      	beq.n	8012a2e <_svfiprintf_r+0xea>
 8012a02:	9a07      	ldr	r2, [sp, #28]
 8012a04:	462f      	mov	r7, r5
 8012a06:	2000      	movs	r0, #0
 8012a08:	250a      	movs	r5, #10
 8012a0a:	4639      	mov	r1, r7
 8012a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a10:	3b30      	subs	r3, #48	; 0x30
 8012a12:	2b09      	cmp	r3, #9
 8012a14:	d94d      	bls.n	8012ab2 <_svfiprintf_r+0x16e>
 8012a16:	b1b8      	cbz	r0, 8012a48 <_svfiprintf_r+0x104>
 8012a18:	e00f      	b.n	8012a3a <_svfiprintf_r+0xf6>
 8012a1a:	462f      	mov	r7, r5
 8012a1c:	e7b8      	b.n	8012990 <_svfiprintf_r+0x4c>
 8012a1e:	4a40      	ldr	r2, [pc, #256]	; (8012b20 <_svfiprintf_r+0x1dc>)
 8012a20:	1a80      	subs	r0, r0, r2
 8012a22:	fa0b f000 	lsl.w	r0, fp, r0
 8012a26:	4318      	orrs	r0, r3
 8012a28:	9004      	str	r0, [sp, #16]
 8012a2a:	463d      	mov	r5, r7
 8012a2c:	e7d3      	b.n	80129d6 <_svfiprintf_r+0x92>
 8012a2e:	9a03      	ldr	r2, [sp, #12]
 8012a30:	1d11      	adds	r1, r2, #4
 8012a32:	6812      	ldr	r2, [r2, #0]
 8012a34:	9103      	str	r1, [sp, #12]
 8012a36:	2a00      	cmp	r2, #0
 8012a38:	db01      	blt.n	8012a3e <_svfiprintf_r+0xfa>
 8012a3a:	9207      	str	r2, [sp, #28]
 8012a3c:	e004      	b.n	8012a48 <_svfiprintf_r+0x104>
 8012a3e:	4252      	negs	r2, r2
 8012a40:	f043 0302 	orr.w	r3, r3, #2
 8012a44:	9207      	str	r2, [sp, #28]
 8012a46:	9304      	str	r3, [sp, #16]
 8012a48:	783b      	ldrb	r3, [r7, #0]
 8012a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8012a4c:	d10c      	bne.n	8012a68 <_svfiprintf_r+0x124>
 8012a4e:	787b      	ldrb	r3, [r7, #1]
 8012a50:	2b2a      	cmp	r3, #42	; 0x2a
 8012a52:	d133      	bne.n	8012abc <_svfiprintf_r+0x178>
 8012a54:	9b03      	ldr	r3, [sp, #12]
 8012a56:	1d1a      	adds	r2, r3, #4
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	9203      	str	r2, [sp, #12]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	bfb8      	it	lt
 8012a60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012a64:	3702      	adds	r7, #2
 8012a66:	9305      	str	r3, [sp, #20]
 8012a68:	4d2e      	ldr	r5, [pc, #184]	; (8012b24 <_svfiprintf_r+0x1e0>)
 8012a6a:	7839      	ldrb	r1, [r7, #0]
 8012a6c:	2203      	movs	r2, #3
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f7ed fbde 	bl	8000230 <memchr>
 8012a74:	b138      	cbz	r0, 8012a86 <_svfiprintf_r+0x142>
 8012a76:	2340      	movs	r3, #64	; 0x40
 8012a78:	1b40      	subs	r0, r0, r5
 8012a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8012a7e:	9b04      	ldr	r3, [sp, #16]
 8012a80:	4303      	orrs	r3, r0
 8012a82:	3701      	adds	r7, #1
 8012a84:	9304      	str	r3, [sp, #16]
 8012a86:	7839      	ldrb	r1, [r7, #0]
 8012a88:	4827      	ldr	r0, [pc, #156]	; (8012b28 <_svfiprintf_r+0x1e4>)
 8012a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a8e:	2206      	movs	r2, #6
 8012a90:	1c7e      	adds	r6, r7, #1
 8012a92:	f7ed fbcd 	bl	8000230 <memchr>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d038      	beq.n	8012b0c <_svfiprintf_r+0x1c8>
 8012a9a:	4b24      	ldr	r3, [pc, #144]	; (8012b2c <_svfiprintf_r+0x1e8>)
 8012a9c:	bb13      	cbnz	r3, 8012ae4 <_svfiprintf_r+0x1a0>
 8012a9e:	9b03      	ldr	r3, [sp, #12]
 8012aa0:	3307      	adds	r3, #7
 8012aa2:	f023 0307 	bic.w	r3, r3, #7
 8012aa6:	3308      	adds	r3, #8
 8012aa8:	9303      	str	r3, [sp, #12]
 8012aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aac:	444b      	add	r3, r9
 8012aae:	9309      	str	r3, [sp, #36]	; 0x24
 8012ab0:	e76d      	b.n	801298e <_svfiprintf_r+0x4a>
 8012ab2:	fb05 3202 	mla	r2, r5, r2, r3
 8012ab6:	2001      	movs	r0, #1
 8012ab8:	460f      	mov	r7, r1
 8012aba:	e7a6      	b.n	8012a0a <_svfiprintf_r+0xc6>
 8012abc:	2300      	movs	r3, #0
 8012abe:	3701      	adds	r7, #1
 8012ac0:	9305      	str	r3, [sp, #20]
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	250a      	movs	r5, #10
 8012ac6:	4638      	mov	r0, r7
 8012ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012acc:	3a30      	subs	r2, #48	; 0x30
 8012ace:	2a09      	cmp	r2, #9
 8012ad0:	d903      	bls.n	8012ada <_svfiprintf_r+0x196>
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d0c8      	beq.n	8012a68 <_svfiprintf_r+0x124>
 8012ad6:	9105      	str	r1, [sp, #20]
 8012ad8:	e7c6      	b.n	8012a68 <_svfiprintf_r+0x124>
 8012ada:	fb05 2101 	mla	r1, r5, r1, r2
 8012ade:	2301      	movs	r3, #1
 8012ae0:	4607      	mov	r7, r0
 8012ae2:	e7f0      	b.n	8012ac6 <_svfiprintf_r+0x182>
 8012ae4:	ab03      	add	r3, sp, #12
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	4622      	mov	r2, r4
 8012aea:	4b11      	ldr	r3, [pc, #68]	; (8012b30 <_svfiprintf_r+0x1ec>)
 8012aec:	a904      	add	r1, sp, #16
 8012aee:	4640      	mov	r0, r8
 8012af0:	f7fd fdb2 	bl	8010658 <_printf_float>
 8012af4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012af8:	4681      	mov	r9, r0
 8012afa:	d1d6      	bne.n	8012aaa <_svfiprintf_r+0x166>
 8012afc:	89a3      	ldrh	r3, [r4, #12]
 8012afe:	065b      	lsls	r3, r3, #25
 8012b00:	f53f af35 	bmi.w	801296e <_svfiprintf_r+0x2a>
 8012b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b06:	b01d      	add	sp, #116	; 0x74
 8012b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0c:	ab03      	add	r3, sp, #12
 8012b0e:	9300      	str	r3, [sp, #0]
 8012b10:	4622      	mov	r2, r4
 8012b12:	4b07      	ldr	r3, [pc, #28]	; (8012b30 <_svfiprintf_r+0x1ec>)
 8012b14:	a904      	add	r1, sp, #16
 8012b16:	4640      	mov	r0, r8
 8012b18:	f7fe f854 	bl	8010bc4 <_printf_i>
 8012b1c:	e7ea      	b.n	8012af4 <_svfiprintf_r+0x1b0>
 8012b1e:	bf00      	nop
 8012b20:	080158ec 	.word	0x080158ec
 8012b24:	080158f2 	.word	0x080158f2
 8012b28:	080158f6 	.word	0x080158f6
 8012b2c:	08010659 	.word	0x08010659
 8012b30:	08012891 	.word	0x08012891

08012b34 <__sfputc_r>:
 8012b34:	6893      	ldr	r3, [r2, #8]
 8012b36:	3b01      	subs	r3, #1
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	b410      	push	{r4}
 8012b3c:	6093      	str	r3, [r2, #8]
 8012b3e:	da08      	bge.n	8012b52 <__sfputc_r+0x1e>
 8012b40:	6994      	ldr	r4, [r2, #24]
 8012b42:	42a3      	cmp	r3, r4
 8012b44:	db01      	blt.n	8012b4a <__sfputc_r+0x16>
 8012b46:	290a      	cmp	r1, #10
 8012b48:	d103      	bne.n	8012b52 <__sfputc_r+0x1e>
 8012b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b4e:	f7fe ba0b 	b.w	8010f68 <__swbuf_r>
 8012b52:	6813      	ldr	r3, [r2, #0]
 8012b54:	1c58      	adds	r0, r3, #1
 8012b56:	6010      	str	r0, [r2, #0]
 8012b58:	7019      	strb	r1, [r3, #0]
 8012b5a:	4608      	mov	r0, r1
 8012b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <__sfputs_r>:
 8012b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b64:	4606      	mov	r6, r0
 8012b66:	460f      	mov	r7, r1
 8012b68:	4614      	mov	r4, r2
 8012b6a:	18d5      	adds	r5, r2, r3
 8012b6c:	42ac      	cmp	r4, r5
 8012b6e:	d101      	bne.n	8012b74 <__sfputs_r+0x12>
 8012b70:	2000      	movs	r0, #0
 8012b72:	e007      	b.n	8012b84 <__sfputs_r+0x22>
 8012b74:	463a      	mov	r2, r7
 8012b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f7ff ffda 	bl	8012b34 <__sfputc_r>
 8012b80:	1c43      	adds	r3, r0, #1
 8012b82:	d1f3      	bne.n	8012b6c <__sfputs_r+0xa>
 8012b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b88 <_vfiprintf_r>:
 8012b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8c:	460c      	mov	r4, r1
 8012b8e:	b09d      	sub	sp, #116	; 0x74
 8012b90:	4617      	mov	r7, r2
 8012b92:	461d      	mov	r5, r3
 8012b94:	4606      	mov	r6, r0
 8012b96:	b118      	cbz	r0, 8012ba0 <_vfiprintf_r+0x18>
 8012b98:	6983      	ldr	r3, [r0, #24]
 8012b9a:	b90b      	cbnz	r3, 8012ba0 <_vfiprintf_r+0x18>
 8012b9c:	f7ff f9d8 	bl	8011f50 <__sinit>
 8012ba0:	4b7c      	ldr	r3, [pc, #496]	; (8012d94 <_vfiprintf_r+0x20c>)
 8012ba2:	429c      	cmp	r4, r3
 8012ba4:	d158      	bne.n	8012c58 <_vfiprintf_r+0xd0>
 8012ba6:	6874      	ldr	r4, [r6, #4]
 8012ba8:	89a3      	ldrh	r3, [r4, #12]
 8012baa:	0718      	lsls	r0, r3, #28
 8012bac:	d55e      	bpl.n	8012c6c <_vfiprintf_r+0xe4>
 8012bae:	6923      	ldr	r3, [r4, #16]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d05b      	beq.n	8012c6c <_vfiprintf_r+0xe4>
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8012bb8:	2320      	movs	r3, #32
 8012bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bbe:	2330      	movs	r3, #48	; 0x30
 8012bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bc4:	9503      	str	r5, [sp, #12]
 8012bc6:	f04f 0b01 	mov.w	fp, #1
 8012bca:	46b8      	mov	r8, r7
 8012bcc:	4645      	mov	r5, r8
 8012bce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012bd2:	b10b      	cbz	r3, 8012bd8 <_vfiprintf_r+0x50>
 8012bd4:	2b25      	cmp	r3, #37	; 0x25
 8012bd6:	d154      	bne.n	8012c82 <_vfiprintf_r+0xfa>
 8012bd8:	ebb8 0a07 	subs.w	sl, r8, r7
 8012bdc:	d00b      	beq.n	8012bf6 <_vfiprintf_r+0x6e>
 8012bde:	4653      	mov	r3, sl
 8012be0:	463a      	mov	r2, r7
 8012be2:	4621      	mov	r1, r4
 8012be4:	4630      	mov	r0, r6
 8012be6:	f7ff ffbc 	bl	8012b62 <__sfputs_r>
 8012bea:	3001      	adds	r0, #1
 8012bec:	f000 80c2 	beq.w	8012d74 <_vfiprintf_r+0x1ec>
 8012bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bf2:	4453      	add	r3, sl
 8012bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8012bf6:	f898 3000 	ldrb.w	r3, [r8]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f000 80ba 	beq.w	8012d74 <_vfiprintf_r+0x1ec>
 8012c00:	2300      	movs	r3, #0
 8012c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c0a:	9304      	str	r3, [sp, #16]
 8012c0c:	9307      	str	r3, [sp, #28]
 8012c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c12:	931a      	str	r3, [sp, #104]	; 0x68
 8012c14:	46a8      	mov	r8, r5
 8012c16:	2205      	movs	r2, #5
 8012c18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012c1c:	485e      	ldr	r0, [pc, #376]	; (8012d98 <_vfiprintf_r+0x210>)
 8012c1e:	f7ed fb07 	bl	8000230 <memchr>
 8012c22:	9b04      	ldr	r3, [sp, #16]
 8012c24:	bb78      	cbnz	r0, 8012c86 <_vfiprintf_r+0xfe>
 8012c26:	06d9      	lsls	r1, r3, #27
 8012c28:	bf44      	itt	mi
 8012c2a:	2220      	movmi	r2, #32
 8012c2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c30:	071a      	lsls	r2, r3, #28
 8012c32:	bf44      	itt	mi
 8012c34:	222b      	movmi	r2, #43	; 0x2b
 8012c36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c3a:	782a      	ldrb	r2, [r5, #0]
 8012c3c:	2a2a      	cmp	r2, #42	; 0x2a
 8012c3e:	d02a      	beq.n	8012c96 <_vfiprintf_r+0x10e>
 8012c40:	9a07      	ldr	r2, [sp, #28]
 8012c42:	46a8      	mov	r8, r5
 8012c44:	2000      	movs	r0, #0
 8012c46:	250a      	movs	r5, #10
 8012c48:	4641      	mov	r1, r8
 8012c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c4e:	3b30      	subs	r3, #48	; 0x30
 8012c50:	2b09      	cmp	r3, #9
 8012c52:	d969      	bls.n	8012d28 <_vfiprintf_r+0x1a0>
 8012c54:	b360      	cbz	r0, 8012cb0 <_vfiprintf_r+0x128>
 8012c56:	e024      	b.n	8012ca2 <_vfiprintf_r+0x11a>
 8012c58:	4b50      	ldr	r3, [pc, #320]	; (8012d9c <_vfiprintf_r+0x214>)
 8012c5a:	429c      	cmp	r4, r3
 8012c5c:	d101      	bne.n	8012c62 <_vfiprintf_r+0xda>
 8012c5e:	68b4      	ldr	r4, [r6, #8]
 8012c60:	e7a2      	b.n	8012ba8 <_vfiprintf_r+0x20>
 8012c62:	4b4f      	ldr	r3, [pc, #316]	; (8012da0 <_vfiprintf_r+0x218>)
 8012c64:	429c      	cmp	r4, r3
 8012c66:	bf08      	it	eq
 8012c68:	68f4      	ldreq	r4, [r6, #12]
 8012c6a:	e79d      	b.n	8012ba8 <_vfiprintf_r+0x20>
 8012c6c:	4621      	mov	r1, r4
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f7fe f9cc 	bl	801100c <__swsetup_r>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d09d      	beq.n	8012bb4 <_vfiprintf_r+0x2c>
 8012c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c7c:	b01d      	add	sp, #116	; 0x74
 8012c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c82:	46a8      	mov	r8, r5
 8012c84:	e7a2      	b.n	8012bcc <_vfiprintf_r+0x44>
 8012c86:	4a44      	ldr	r2, [pc, #272]	; (8012d98 <_vfiprintf_r+0x210>)
 8012c88:	1a80      	subs	r0, r0, r2
 8012c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8012c8e:	4318      	orrs	r0, r3
 8012c90:	9004      	str	r0, [sp, #16]
 8012c92:	4645      	mov	r5, r8
 8012c94:	e7be      	b.n	8012c14 <_vfiprintf_r+0x8c>
 8012c96:	9a03      	ldr	r2, [sp, #12]
 8012c98:	1d11      	adds	r1, r2, #4
 8012c9a:	6812      	ldr	r2, [r2, #0]
 8012c9c:	9103      	str	r1, [sp, #12]
 8012c9e:	2a00      	cmp	r2, #0
 8012ca0:	db01      	blt.n	8012ca6 <_vfiprintf_r+0x11e>
 8012ca2:	9207      	str	r2, [sp, #28]
 8012ca4:	e004      	b.n	8012cb0 <_vfiprintf_r+0x128>
 8012ca6:	4252      	negs	r2, r2
 8012ca8:	f043 0302 	orr.w	r3, r3, #2
 8012cac:	9207      	str	r2, [sp, #28]
 8012cae:	9304      	str	r3, [sp, #16]
 8012cb0:	f898 3000 	ldrb.w	r3, [r8]
 8012cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8012cb6:	d10e      	bne.n	8012cd6 <_vfiprintf_r+0x14e>
 8012cb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8012cbe:	d138      	bne.n	8012d32 <_vfiprintf_r+0x1aa>
 8012cc0:	9b03      	ldr	r3, [sp, #12]
 8012cc2:	1d1a      	adds	r2, r3, #4
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	9203      	str	r2, [sp, #12]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	bfb8      	it	lt
 8012ccc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012cd0:	f108 0802 	add.w	r8, r8, #2
 8012cd4:	9305      	str	r3, [sp, #20]
 8012cd6:	4d33      	ldr	r5, [pc, #204]	; (8012da4 <_vfiprintf_r+0x21c>)
 8012cd8:	f898 1000 	ldrb.w	r1, [r8]
 8012cdc:	2203      	movs	r2, #3
 8012cde:	4628      	mov	r0, r5
 8012ce0:	f7ed faa6 	bl	8000230 <memchr>
 8012ce4:	b140      	cbz	r0, 8012cf8 <_vfiprintf_r+0x170>
 8012ce6:	2340      	movs	r3, #64	; 0x40
 8012ce8:	1b40      	subs	r0, r0, r5
 8012cea:	fa03 f000 	lsl.w	r0, r3, r0
 8012cee:	9b04      	ldr	r3, [sp, #16]
 8012cf0:	4303      	orrs	r3, r0
 8012cf2:	f108 0801 	add.w	r8, r8, #1
 8012cf6:	9304      	str	r3, [sp, #16]
 8012cf8:	f898 1000 	ldrb.w	r1, [r8]
 8012cfc:	482a      	ldr	r0, [pc, #168]	; (8012da8 <_vfiprintf_r+0x220>)
 8012cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d02:	2206      	movs	r2, #6
 8012d04:	f108 0701 	add.w	r7, r8, #1
 8012d08:	f7ed fa92 	bl	8000230 <memchr>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	d037      	beq.n	8012d80 <_vfiprintf_r+0x1f8>
 8012d10:	4b26      	ldr	r3, [pc, #152]	; (8012dac <_vfiprintf_r+0x224>)
 8012d12:	bb1b      	cbnz	r3, 8012d5c <_vfiprintf_r+0x1d4>
 8012d14:	9b03      	ldr	r3, [sp, #12]
 8012d16:	3307      	adds	r3, #7
 8012d18:	f023 0307 	bic.w	r3, r3, #7
 8012d1c:	3308      	adds	r3, #8
 8012d1e:	9303      	str	r3, [sp, #12]
 8012d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d22:	444b      	add	r3, r9
 8012d24:	9309      	str	r3, [sp, #36]	; 0x24
 8012d26:	e750      	b.n	8012bca <_vfiprintf_r+0x42>
 8012d28:	fb05 3202 	mla	r2, r5, r2, r3
 8012d2c:	2001      	movs	r0, #1
 8012d2e:	4688      	mov	r8, r1
 8012d30:	e78a      	b.n	8012c48 <_vfiprintf_r+0xc0>
 8012d32:	2300      	movs	r3, #0
 8012d34:	f108 0801 	add.w	r8, r8, #1
 8012d38:	9305      	str	r3, [sp, #20]
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	250a      	movs	r5, #10
 8012d3e:	4640      	mov	r0, r8
 8012d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d44:	3a30      	subs	r2, #48	; 0x30
 8012d46:	2a09      	cmp	r2, #9
 8012d48:	d903      	bls.n	8012d52 <_vfiprintf_r+0x1ca>
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d0c3      	beq.n	8012cd6 <_vfiprintf_r+0x14e>
 8012d4e:	9105      	str	r1, [sp, #20]
 8012d50:	e7c1      	b.n	8012cd6 <_vfiprintf_r+0x14e>
 8012d52:	fb05 2101 	mla	r1, r5, r1, r2
 8012d56:	2301      	movs	r3, #1
 8012d58:	4680      	mov	r8, r0
 8012d5a:	e7f0      	b.n	8012d3e <_vfiprintf_r+0x1b6>
 8012d5c:	ab03      	add	r3, sp, #12
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	4622      	mov	r2, r4
 8012d62:	4b13      	ldr	r3, [pc, #76]	; (8012db0 <_vfiprintf_r+0x228>)
 8012d64:	a904      	add	r1, sp, #16
 8012d66:	4630      	mov	r0, r6
 8012d68:	f7fd fc76 	bl	8010658 <_printf_float>
 8012d6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012d70:	4681      	mov	r9, r0
 8012d72:	d1d5      	bne.n	8012d20 <_vfiprintf_r+0x198>
 8012d74:	89a3      	ldrh	r3, [r4, #12]
 8012d76:	065b      	lsls	r3, r3, #25
 8012d78:	f53f af7e 	bmi.w	8012c78 <_vfiprintf_r+0xf0>
 8012d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d7e:	e77d      	b.n	8012c7c <_vfiprintf_r+0xf4>
 8012d80:	ab03      	add	r3, sp, #12
 8012d82:	9300      	str	r3, [sp, #0]
 8012d84:	4622      	mov	r2, r4
 8012d86:	4b0a      	ldr	r3, [pc, #40]	; (8012db0 <_vfiprintf_r+0x228>)
 8012d88:	a904      	add	r1, sp, #16
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f7fd ff1a 	bl	8010bc4 <_printf_i>
 8012d90:	e7ec      	b.n	8012d6c <_vfiprintf_r+0x1e4>
 8012d92:	bf00      	nop
 8012d94:	080157ac 	.word	0x080157ac
 8012d98:	080158ec 	.word	0x080158ec
 8012d9c:	080157cc 	.word	0x080157cc
 8012da0:	0801578c 	.word	0x0801578c
 8012da4:	080158f2 	.word	0x080158f2
 8012da8:	080158f6 	.word	0x080158f6
 8012dac:	08010659 	.word	0x08010659
 8012db0:	08012b63 	.word	0x08012b63

08012db4 <_sbrk_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4c06      	ldr	r4, [pc, #24]	; (8012dd0 <_sbrk_r+0x1c>)
 8012db8:	2300      	movs	r3, #0
 8012dba:	4605      	mov	r5, r0
 8012dbc:	4608      	mov	r0, r1
 8012dbe:	6023      	str	r3, [r4, #0]
 8012dc0:	f7f5 faa8 	bl	8008314 <_sbrk>
 8012dc4:	1c43      	adds	r3, r0, #1
 8012dc6:	d102      	bne.n	8012dce <_sbrk_r+0x1a>
 8012dc8:	6823      	ldr	r3, [r4, #0]
 8012dca:	b103      	cbz	r3, 8012dce <_sbrk_r+0x1a>
 8012dcc:	602b      	str	r3, [r5, #0]
 8012dce:	bd38      	pop	{r3, r4, r5, pc}
 8012dd0:	20002cf0 	.word	0x20002cf0

08012dd4 <__sread>:
 8012dd4:	b510      	push	{r4, lr}
 8012dd6:	460c      	mov	r4, r1
 8012dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ddc:	f000 f8e8 	bl	8012fb0 <_read_r>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	bfab      	itete	ge
 8012de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012de6:	89a3      	ldrhlt	r3, [r4, #12]
 8012de8:	181b      	addge	r3, r3, r0
 8012dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012dee:	bfac      	ite	ge
 8012df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012df2:	81a3      	strhlt	r3, [r4, #12]
 8012df4:	bd10      	pop	{r4, pc}

08012df6 <__swrite>:
 8012df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dfa:	461f      	mov	r7, r3
 8012dfc:	898b      	ldrh	r3, [r1, #12]
 8012dfe:	05db      	lsls	r3, r3, #23
 8012e00:	4605      	mov	r5, r0
 8012e02:	460c      	mov	r4, r1
 8012e04:	4616      	mov	r6, r2
 8012e06:	d505      	bpl.n	8012e14 <__swrite+0x1e>
 8012e08:	2302      	movs	r3, #2
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e10:	f000 f868 	bl	8012ee4 <_lseek_r>
 8012e14:	89a3      	ldrh	r3, [r4, #12]
 8012e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e1e:	81a3      	strh	r3, [r4, #12]
 8012e20:	4632      	mov	r2, r6
 8012e22:	463b      	mov	r3, r7
 8012e24:	4628      	mov	r0, r5
 8012e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e2a:	f000 b817 	b.w	8012e5c <_write_r>

08012e2e <__sseek>:
 8012e2e:	b510      	push	{r4, lr}
 8012e30:	460c      	mov	r4, r1
 8012e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e36:	f000 f855 	bl	8012ee4 <_lseek_r>
 8012e3a:	1c43      	adds	r3, r0, #1
 8012e3c:	89a3      	ldrh	r3, [r4, #12]
 8012e3e:	bf15      	itete	ne
 8012e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e4a:	81a3      	strheq	r3, [r4, #12]
 8012e4c:	bf18      	it	ne
 8012e4e:	81a3      	strhne	r3, [r4, #12]
 8012e50:	bd10      	pop	{r4, pc}

08012e52 <__sclose>:
 8012e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e56:	f000 b813 	b.w	8012e80 <_close_r>
	...

08012e5c <_write_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4c07      	ldr	r4, [pc, #28]	; (8012e7c <_write_r+0x20>)
 8012e60:	4605      	mov	r5, r0
 8012e62:	4608      	mov	r0, r1
 8012e64:	4611      	mov	r1, r2
 8012e66:	2200      	movs	r2, #0
 8012e68:	6022      	str	r2, [r4, #0]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	f7f4 ff19 	bl	8007ca2 <_write>
 8012e70:	1c43      	adds	r3, r0, #1
 8012e72:	d102      	bne.n	8012e7a <_write_r+0x1e>
 8012e74:	6823      	ldr	r3, [r4, #0]
 8012e76:	b103      	cbz	r3, 8012e7a <_write_r+0x1e>
 8012e78:	602b      	str	r3, [r5, #0]
 8012e7a:	bd38      	pop	{r3, r4, r5, pc}
 8012e7c:	20002cf0 	.word	0x20002cf0

08012e80 <_close_r>:
 8012e80:	b538      	push	{r3, r4, r5, lr}
 8012e82:	4c06      	ldr	r4, [pc, #24]	; (8012e9c <_close_r+0x1c>)
 8012e84:	2300      	movs	r3, #0
 8012e86:	4605      	mov	r5, r0
 8012e88:	4608      	mov	r0, r1
 8012e8a:	6023      	str	r3, [r4, #0]
 8012e8c:	f7f5 fa0d 	bl	80082aa <_close>
 8012e90:	1c43      	adds	r3, r0, #1
 8012e92:	d102      	bne.n	8012e9a <_close_r+0x1a>
 8012e94:	6823      	ldr	r3, [r4, #0]
 8012e96:	b103      	cbz	r3, 8012e9a <_close_r+0x1a>
 8012e98:	602b      	str	r3, [r5, #0]
 8012e9a:	bd38      	pop	{r3, r4, r5, pc}
 8012e9c:	20002cf0 	.word	0x20002cf0

08012ea0 <_fstat_r>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	4c07      	ldr	r4, [pc, #28]	; (8012ec0 <_fstat_r+0x20>)
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	4605      	mov	r5, r0
 8012ea8:	4608      	mov	r0, r1
 8012eaa:	4611      	mov	r1, r2
 8012eac:	6023      	str	r3, [r4, #0]
 8012eae:	f7f5 fa08 	bl	80082c2 <_fstat>
 8012eb2:	1c43      	adds	r3, r0, #1
 8012eb4:	d102      	bne.n	8012ebc <_fstat_r+0x1c>
 8012eb6:	6823      	ldr	r3, [r4, #0]
 8012eb8:	b103      	cbz	r3, 8012ebc <_fstat_r+0x1c>
 8012eba:	602b      	str	r3, [r5, #0]
 8012ebc:	bd38      	pop	{r3, r4, r5, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20002cf0 	.word	0x20002cf0

08012ec4 <_isatty_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4c06      	ldr	r4, [pc, #24]	; (8012ee0 <_isatty_r+0x1c>)
 8012ec8:	2300      	movs	r3, #0
 8012eca:	4605      	mov	r5, r0
 8012ecc:	4608      	mov	r0, r1
 8012ece:	6023      	str	r3, [r4, #0]
 8012ed0:	f7f5 fa07 	bl	80082e2 <_isatty>
 8012ed4:	1c43      	adds	r3, r0, #1
 8012ed6:	d102      	bne.n	8012ede <_isatty_r+0x1a>
 8012ed8:	6823      	ldr	r3, [r4, #0]
 8012eda:	b103      	cbz	r3, 8012ede <_isatty_r+0x1a>
 8012edc:	602b      	str	r3, [r5, #0]
 8012ede:	bd38      	pop	{r3, r4, r5, pc}
 8012ee0:	20002cf0 	.word	0x20002cf0

08012ee4 <_lseek_r>:
 8012ee4:	b538      	push	{r3, r4, r5, lr}
 8012ee6:	4c07      	ldr	r4, [pc, #28]	; (8012f04 <_lseek_r+0x20>)
 8012ee8:	4605      	mov	r5, r0
 8012eea:	4608      	mov	r0, r1
 8012eec:	4611      	mov	r1, r2
 8012eee:	2200      	movs	r2, #0
 8012ef0:	6022      	str	r2, [r4, #0]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	f7f5 fa00 	bl	80082f8 <_lseek>
 8012ef8:	1c43      	adds	r3, r0, #1
 8012efa:	d102      	bne.n	8012f02 <_lseek_r+0x1e>
 8012efc:	6823      	ldr	r3, [r4, #0]
 8012efe:	b103      	cbz	r3, 8012f02 <_lseek_r+0x1e>
 8012f00:	602b      	str	r3, [r5, #0]
 8012f02:	bd38      	pop	{r3, r4, r5, pc}
 8012f04:	20002cf0 	.word	0x20002cf0

08012f08 <__ascii_mbtowc>:
 8012f08:	b082      	sub	sp, #8
 8012f0a:	b901      	cbnz	r1, 8012f0e <__ascii_mbtowc+0x6>
 8012f0c:	a901      	add	r1, sp, #4
 8012f0e:	b142      	cbz	r2, 8012f22 <__ascii_mbtowc+0x1a>
 8012f10:	b14b      	cbz	r3, 8012f26 <__ascii_mbtowc+0x1e>
 8012f12:	7813      	ldrb	r3, [r2, #0]
 8012f14:	600b      	str	r3, [r1, #0]
 8012f16:	7812      	ldrb	r2, [r2, #0]
 8012f18:	1c10      	adds	r0, r2, #0
 8012f1a:	bf18      	it	ne
 8012f1c:	2001      	movne	r0, #1
 8012f1e:	b002      	add	sp, #8
 8012f20:	4770      	bx	lr
 8012f22:	4610      	mov	r0, r2
 8012f24:	e7fb      	b.n	8012f1e <__ascii_mbtowc+0x16>
 8012f26:	f06f 0001 	mvn.w	r0, #1
 8012f2a:	e7f8      	b.n	8012f1e <__ascii_mbtowc+0x16>

08012f2c <memmove>:
 8012f2c:	4288      	cmp	r0, r1
 8012f2e:	b510      	push	{r4, lr}
 8012f30:	eb01 0302 	add.w	r3, r1, r2
 8012f34:	d807      	bhi.n	8012f46 <memmove+0x1a>
 8012f36:	1e42      	subs	r2, r0, #1
 8012f38:	4299      	cmp	r1, r3
 8012f3a:	d00a      	beq.n	8012f52 <memmove+0x26>
 8012f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012f44:	e7f8      	b.n	8012f38 <memmove+0xc>
 8012f46:	4283      	cmp	r3, r0
 8012f48:	d9f5      	bls.n	8012f36 <memmove+0xa>
 8012f4a:	1881      	adds	r1, r0, r2
 8012f4c:	1ad2      	subs	r2, r2, r3
 8012f4e:	42d3      	cmn	r3, r2
 8012f50:	d100      	bne.n	8012f54 <memmove+0x28>
 8012f52:	bd10      	pop	{r4, pc}
 8012f54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012f5c:	e7f7      	b.n	8012f4e <memmove+0x22>

08012f5e <__malloc_lock>:
 8012f5e:	4770      	bx	lr

08012f60 <__malloc_unlock>:
 8012f60:	4770      	bx	lr

08012f62 <_realloc_r>:
 8012f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f64:	4607      	mov	r7, r0
 8012f66:	4614      	mov	r4, r2
 8012f68:	460e      	mov	r6, r1
 8012f6a:	b921      	cbnz	r1, 8012f76 <_realloc_r+0x14>
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f72:	f7ff bc33 	b.w	80127dc <_malloc_r>
 8012f76:	b922      	cbnz	r2, 8012f82 <_realloc_r+0x20>
 8012f78:	f7ff fbe2 	bl	8012740 <_free_r>
 8012f7c:	4625      	mov	r5, r4
 8012f7e:	4628      	mov	r0, r5
 8012f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f82:	f000 f834 	bl	8012fee <_malloc_usable_size_r>
 8012f86:	42a0      	cmp	r0, r4
 8012f88:	d20f      	bcs.n	8012faa <_realloc_r+0x48>
 8012f8a:	4621      	mov	r1, r4
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	f7ff fc25 	bl	80127dc <_malloc_r>
 8012f92:	4605      	mov	r5, r0
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d0f2      	beq.n	8012f7e <_realloc_r+0x1c>
 8012f98:	4631      	mov	r1, r6
 8012f9a:	4622      	mov	r2, r4
 8012f9c:	f7ff f8dc 	bl	8012158 <memcpy>
 8012fa0:	4631      	mov	r1, r6
 8012fa2:	4638      	mov	r0, r7
 8012fa4:	f7ff fbcc 	bl	8012740 <_free_r>
 8012fa8:	e7e9      	b.n	8012f7e <_realloc_r+0x1c>
 8012faa:	4635      	mov	r5, r6
 8012fac:	e7e7      	b.n	8012f7e <_realloc_r+0x1c>
	...

08012fb0 <_read_r>:
 8012fb0:	b538      	push	{r3, r4, r5, lr}
 8012fb2:	4c07      	ldr	r4, [pc, #28]	; (8012fd0 <_read_r+0x20>)
 8012fb4:	4605      	mov	r5, r0
 8012fb6:	4608      	mov	r0, r1
 8012fb8:	4611      	mov	r1, r2
 8012fba:	2200      	movs	r2, #0
 8012fbc:	6022      	str	r2, [r4, #0]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	f7f5 f956 	bl	8008270 <_read>
 8012fc4:	1c43      	adds	r3, r0, #1
 8012fc6:	d102      	bne.n	8012fce <_read_r+0x1e>
 8012fc8:	6823      	ldr	r3, [r4, #0]
 8012fca:	b103      	cbz	r3, 8012fce <_read_r+0x1e>
 8012fcc:	602b      	str	r3, [r5, #0]
 8012fce:	bd38      	pop	{r3, r4, r5, pc}
 8012fd0:	20002cf0 	.word	0x20002cf0

08012fd4 <__ascii_wctomb>:
 8012fd4:	b149      	cbz	r1, 8012fea <__ascii_wctomb+0x16>
 8012fd6:	2aff      	cmp	r2, #255	; 0xff
 8012fd8:	bf85      	ittet	hi
 8012fda:	238a      	movhi	r3, #138	; 0x8a
 8012fdc:	6003      	strhi	r3, [r0, #0]
 8012fde:	700a      	strbls	r2, [r1, #0]
 8012fe0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012fe4:	bf98      	it	ls
 8012fe6:	2001      	movls	r0, #1
 8012fe8:	4770      	bx	lr
 8012fea:	4608      	mov	r0, r1
 8012fec:	4770      	bx	lr

08012fee <_malloc_usable_size_r>:
 8012fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ff2:	1f18      	subs	r0, r3, #4
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	bfbc      	itt	lt
 8012ff8:	580b      	ldrlt	r3, [r1, r0]
 8012ffa:	18c0      	addlt	r0, r0, r3
 8012ffc:	4770      	bx	lr
	...

08013000 <log10>:
 8013000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013002:	ed2d 8b02 	vpush	{d8}
 8013006:	b08b      	sub	sp, #44	; 0x2c
 8013008:	ec55 4b10 	vmov	r4, r5, d0
 801300c:	f000 f9e8 	bl	80133e0 <__ieee754_log10>
 8013010:	4b36      	ldr	r3, [pc, #216]	; (80130ec <log10+0xec>)
 8013012:	eeb0 8a40 	vmov.f32	s16, s0
 8013016:	eef0 8a60 	vmov.f32	s17, s1
 801301a:	f993 6000 	ldrsb.w	r6, [r3]
 801301e:	1c73      	adds	r3, r6, #1
 8013020:	d05c      	beq.n	80130dc <log10+0xdc>
 8013022:	4622      	mov	r2, r4
 8013024:	462b      	mov	r3, r5
 8013026:	4620      	mov	r0, r4
 8013028:	4629      	mov	r1, r5
 801302a:	f7ed fda7 	bl	8000b7c <__aeabi_dcmpun>
 801302e:	4607      	mov	r7, r0
 8013030:	2800      	cmp	r0, #0
 8013032:	d153      	bne.n	80130dc <log10+0xdc>
 8013034:	2200      	movs	r2, #0
 8013036:	2300      	movs	r3, #0
 8013038:	4620      	mov	r0, r4
 801303a:	4629      	mov	r1, r5
 801303c:	f7ed fd80 	bl	8000b40 <__aeabi_dcmple>
 8013040:	2800      	cmp	r0, #0
 8013042:	d04b      	beq.n	80130dc <log10+0xdc>
 8013044:	4b2a      	ldr	r3, [pc, #168]	; (80130f0 <log10+0xf0>)
 8013046:	9301      	str	r3, [sp, #4]
 8013048:	9708      	str	r7, [sp, #32]
 801304a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801304e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8013052:	b9a6      	cbnz	r6, 801307e <log10+0x7e>
 8013054:	4b27      	ldr	r3, [pc, #156]	; (80130f4 <log10+0xf4>)
 8013056:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801305a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801305e:	4620      	mov	r0, r4
 8013060:	2200      	movs	r2, #0
 8013062:	2300      	movs	r3, #0
 8013064:	4629      	mov	r1, r5
 8013066:	f7ed fd57 	bl	8000b18 <__aeabi_dcmpeq>
 801306a:	bb40      	cbnz	r0, 80130be <log10+0xbe>
 801306c:	2301      	movs	r3, #1
 801306e:	2e02      	cmp	r6, #2
 8013070:	9300      	str	r3, [sp, #0]
 8013072:	d119      	bne.n	80130a8 <log10+0xa8>
 8013074:	f7fd fa2a 	bl	80104cc <__errno>
 8013078:	2321      	movs	r3, #33	; 0x21
 801307a:	6003      	str	r3, [r0, #0]
 801307c:	e019      	b.n	80130b2 <log10+0xb2>
 801307e:	4b1e      	ldr	r3, [pc, #120]	; (80130f8 <log10+0xf8>)
 8013080:	2200      	movs	r2, #0
 8013082:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013086:	4620      	mov	r0, r4
 8013088:	2200      	movs	r2, #0
 801308a:	2300      	movs	r3, #0
 801308c:	4629      	mov	r1, r5
 801308e:	f7ed fd43 	bl	8000b18 <__aeabi_dcmpeq>
 8013092:	2800      	cmp	r0, #0
 8013094:	d0ea      	beq.n	801306c <log10+0x6c>
 8013096:	2302      	movs	r3, #2
 8013098:	429e      	cmp	r6, r3
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	d111      	bne.n	80130c2 <log10+0xc2>
 801309e:	f7fd fa15 	bl	80104cc <__errno>
 80130a2:	2322      	movs	r3, #34	; 0x22
 80130a4:	6003      	str	r3, [r0, #0]
 80130a6:	e011      	b.n	80130cc <log10+0xcc>
 80130a8:	4668      	mov	r0, sp
 80130aa:	f000 fff4 	bl	8014096 <matherr>
 80130ae:	2800      	cmp	r0, #0
 80130b0:	d0e0      	beq.n	8013074 <log10+0x74>
 80130b2:	4812      	ldr	r0, [pc, #72]	; (80130fc <log10+0xfc>)
 80130b4:	f000 fff4 	bl	80140a0 <nan>
 80130b8:	ed8d 0b06 	vstr	d0, [sp, #24]
 80130bc:	e006      	b.n	80130cc <log10+0xcc>
 80130be:	2302      	movs	r3, #2
 80130c0:	9300      	str	r3, [sp, #0]
 80130c2:	4668      	mov	r0, sp
 80130c4:	f000 ffe7 	bl	8014096 <matherr>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d0e8      	beq.n	801309e <log10+0x9e>
 80130cc:	9b08      	ldr	r3, [sp, #32]
 80130ce:	b11b      	cbz	r3, 80130d8 <log10+0xd8>
 80130d0:	f7fd f9fc 	bl	80104cc <__errno>
 80130d4:	9b08      	ldr	r3, [sp, #32]
 80130d6:	6003      	str	r3, [r0, #0]
 80130d8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80130dc:	eeb0 0a48 	vmov.f32	s0, s16
 80130e0:	eef0 0a68 	vmov.f32	s1, s17
 80130e4:	b00b      	add	sp, #44	; 0x2c
 80130e6:	ecbd 8b02 	vpop	{d8}
 80130ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130ec:	20001e08 	.word	0x20001e08
 80130f0:	08015a08 	.word	0x08015a08
 80130f4:	c7efffff 	.word	0xc7efffff
 80130f8:	fff00000 	.word	0xfff00000
 80130fc:	080158f1 	.word	0x080158f1

08013100 <pow>:
 8013100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013104:	ed2d 8b04 	vpush	{d8-d9}
 8013108:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80133dc <pow+0x2dc>
 801310c:	b08d      	sub	sp, #52	; 0x34
 801310e:	ec57 6b10 	vmov	r6, r7, d0
 8013112:	ec55 4b11 	vmov	r4, r5, d1
 8013116:	f000 f9ef 	bl	80134f8 <__ieee754_pow>
 801311a:	f999 3000 	ldrsb.w	r3, [r9]
 801311e:	9300      	str	r3, [sp, #0]
 8013120:	3301      	adds	r3, #1
 8013122:	eeb0 8a40 	vmov.f32	s16, s0
 8013126:	eef0 8a60 	vmov.f32	s17, s1
 801312a:	46c8      	mov	r8, r9
 801312c:	d05f      	beq.n	80131ee <pow+0xee>
 801312e:	4622      	mov	r2, r4
 8013130:	462b      	mov	r3, r5
 8013132:	4620      	mov	r0, r4
 8013134:	4629      	mov	r1, r5
 8013136:	f7ed fd21 	bl	8000b7c <__aeabi_dcmpun>
 801313a:	4683      	mov	fp, r0
 801313c:	2800      	cmp	r0, #0
 801313e:	d156      	bne.n	80131ee <pow+0xee>
 8013140:	4632      	mov	r2, r6
 8013142:	463b      	mov	r3, r7
 8013144:	4630      	mov	r0, r6
 8013146:	4639      	mov	r1, r7
 8013148:	f7ed fd18 	bl	8000b7c <__aeabi_dcmpun>
 801314c:	9001      	str	r0, [sp, #4]
 801314e:	b1e8      	cbz	r0, 801318c <pow+0x8c>
 8013150:	2200      	movs	r2, #0
 8013152:	2300      	movs	r3, #0
 8013154:	4620      	mov	r0, r4
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed fcde 	bl	8000b18 <__aeabi_dcmpeq>
 801315c:	2800      	cmp	r0, #0
 801315e:	d046      	beq.n	80131ee <pow+0xee>
 8013160:	2301      	movs	r3, #1
 8013162:	9302      	str	r3, [sp, #8]
 8013164:	4b96      	ldr	r3, [pc, #600]	; (80133c0 <pow+0x2c0>)
 8013166:	9303      	str	r3, [sp, #12]
 8013168:	4b96      	ldr	r3, [pc, #600]	; (80133c4 <pow+0x2c4>)
 801316a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801316e:	2200      	movs	r2, #0
 8013170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013174:	9b00      	ldr	r3, [sp, #0]
 8013176:	2b02      	cmp	r3, #2
 8013178:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801317c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013180:	d033      	beq.n	80131ea <pow+0xea>
 8013182:	a802      	add	r0, sp, #8
 8013184:	f000 ff87 	bl	8014096 <matherr>
 8013188:	bb48      	cbnz	r0, 80131de <pow+0xde>
 801318a:	e05d      	b.n	8013248 <pow+0x148>
 801318c:	f04f 0a00 	mov.w	sl, #0
 8013190:	f04f 0b00 	mov.w	fp, #0
 8013194:	4652      	mov	r2, sl
 8013196:	465b      	mov	r3, fp
 8013198:	4630      	mov	r0, r6
 801319a:	4639      	mov	r1, r7
 801319c:	f7ed fcbc 	bl	8000b18 <__aeabi_dcmpeq>
 80131a0:	ec4b ab19 	vmov	d9, sl, fp
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d054      	beq.n	8013252 <pow+0x152>
 80131a8:	4652      	mov	r2, sl
 80131aa:	465b      	mov	r3, fp
 80131ac:	4620      	mov	r0, r4
 80131ae:	4629      	mov	r1, r5
 80131b0:	f7ed fcb2 	bl	8000b18 <__aeabi_dcmpeq>
 80131b4:	4680      	mov	r8, r0
 80131b6:	b318      	cbz	r0, 8013200 <pow+0x100>
 80131b8:	2301      	movs	r3, #1
 80131ba:	9302      	str	r3, [sp, #8]
 80131bc:	4b80      	ldr	r3, [pc, #512]	; (80133c0 <pow+0x2c0>)
 80131be:	9303      	str	r3, [sp, #12]
 80131c0:	9b01      	ldr	r3, [sp, #4]
 80131c2:	930a      	str	r3, [sp, #40]	; 0x28
 80131c4:	9b00      	ldr	r3, [sp, #0]
 80131c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80131ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80131ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d0d5      	beq.n	8013182 <pow+0x82>
 80131d6:	4b7b      	ldr	r3, [pc, #492]	; (80133c4 <pow+0x2c4>)
 80131d8:	2200      	movs	r2, #0
 80131da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80131de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131e0:	b11b      	cbz	r3, 80131ea <pow+0xea>
 80131e2:	f7fd f973 	bl	80104cc <__errno>
 80131e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131e8:	6003      	str	r3, [r0, #0]
 80131ea:	ed9d 8b08 	vldr	d8, [sp, #32]
 80131ee:	eeb0 0a48 	vmov.f32	s0, s16
 80131f2:	eef0 0a68 	vmov.f32	s1, s17
 80131f6:	b00d      	add	sp, #52	; 0x34
 80131f8:	ecbd 8b04 	vpop	{d8-d9}
 80131fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013200:	ec45 4b10 	vmov	d0, r4, r5
 8013204:	f000 ff3f 	bl	8014086 <finite>
 8013208:	2800      	cmp	r0, #0
 801320a:	d0f0      	beq.n	80131ee <pow+0xee>
 801320c:	4652      	mov	r2, sl
 801320e:	465b      	mov	r3, fp
 8013210:	4620      	mov	r0, r4
 8013212:	4629      	mov	r1, r5
 8013214:	f7ed fc8a 	bl	8000b2c <__aeabi_dcmplt>
 8013218:	2800      	cmp	r0, #0
 801321a:	d0e8      	beq.n	80131ee <pow+0xee>
 801321c:	2301      	movs	r3, #1
 801321e:	9302      	str	r3, [sp, #8]
 8013220:	4b67      	ldr	r3, [pc, #412]	; (80133c0 <pow+0x2c0>)
 8013222:	9303      	str	r3, [sp, #12]
 8013224:	f999 3000 	ldrsb.w	r3, [r9]
 8013228:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801322c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013230:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013234:	b913      	cbnz	r3, 801323c <pow+0x13c>
 8013236:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801323a:	e7a2      	b.n	8013182 <pow+0x82>
 801323c:	4962      	ldr	r1, [pc, #392]	; (80133c8 <pow+0x2c8>)
 801323e:	2000      	movs	r0, #0
 8013240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013244:	2b02      	cmp	r3, #2
 8013246:	d19c      	bne.n	8013182 <pow+0x82>
 8013248:	f7fd f940 	bl	80104cc <__errno>
 801324c:	2321      	movs	r3, #33	; 0x21
 801324e:	6003      	str	r3, [r0, #0]
 8013250:	e7c5      	b.n	80131de <pow+0xde>
 8013252:	eeb0 0a48 	vmov.f32	s0, s16
 8013256:	eef0 0a68 	vmov.f32	s1, s17
 801325a:	f000 ff14 	bl	8014086 <finite>
 801325e:	9000      	str	r0, [sp, #0]
 8013260:	2800      	cmp	r0, #0
 8013262:	f040 8081 	bne.w	8013368 <pow+0x268>
 8013266:	ec47 6b10 	vmov	d0, r6, r7
 801326a:	f000 ff0c 	bl	8014086 <finite>
 801326e:	2800      	cmp	r0, #0
 8013270:	d07a      	beq.n	8013368 <pow+0x268>
 8013272:	ec45 4b10 	vmov	d0, r4, r5
 8013276:	f000 ff06 	bl	8014086 <finite>
 801327a:	2800      	cmp	r0, #0
 801327c:	d074      	beq.n	8013368 <pow+0x268>
 801327e:	ec53 2b18 	vmov	r2, r3, d8
 8013282:	ee18 0a10 	vmov	r0, s16
 8013286:	4619      	mov	r1, r3
 8013288:	f7ed fc78 	bl	8000b7c <__aeabi_dcmpun>
 801328c:	f999 9000 	ldrsb.w	r9, [r9]
 8013290:	4b4b      	ldr	r3, [pc, #300]	; (80133c0 <pow+0x2c0>)
 8013292:	b1b0      	cbz	r0, 80132c2 <pow+0x1c2>
 8013294:	2201      	movs	r2, #1
 8013296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801329a:	9b00      	ldr	r3, [sp, #0]
 801329c:	930a      	str	r3, [sp, #40]	; 0x28
 801329e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80132a6:	f1b9 0f00 	cmp.w	r9, #0
 80132aa:	d0c4      	beq.n	8013236 <pow+0x136>
 80132ac:	4652      	mov	r2, sl
 80132ae:	465b      	mov	r3, fp
 80132b0:	4650      	mov	r0, sl
 80132b2:	4659      	mov	r1, fp
 80132b4:	f7ed faf2 	bl	800089c <__aeabi_ddiv>
 80132b8:	f1b9 0f02 	cmp.w	r9, #2
 80132bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80132c0:	e7c1      	b.n	8013246 <pow+0x146>
 80132c2:	2203      	movs	r2, #3
 80132c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80132c8:	900a      	str	r0, [sp, #40]	; 0x28
 80132ca:	4629      	mov	r1, r5
 80132cc:	4620      	mov	r0, r4
 80132ce:	2200      	movs	r2, #0
 80132d0:	4b3e      	ldr	r3, [pc, #248]	; (80133cc <pow+0x2cc>)
 80132d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80132d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132da:	f7ed f9b5 	bl	8000648 <__aeabi_dmul>
 80132de:	4604      	mov	r4, r0
 80132e0:	460d      	mov	r5, r1
 80132e2:	f1b9 0f00 	cmp.w	r9, #0
 80132e6:	d124      	bne.n	8013332 <pow+0x232>
 80132e8:	4b39      	ldr	r3, [pc, #228]	; (80133d0 <pow+0x2d0>)
 80132ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80132ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80132f2:	4630      	mov	r0, r6
 80132f4:	4652      	mov	r2, sl
 80132f6:	465b      	mov	r3, fp
 80132f8:	4639      	mov	r1, r7
 80132fa:	f7ed fc17 	bl	8000b2c <__aeabi_dcmplt>
 80132fe:	2800      	cmp	r0, #0
 8013300:	d056      	beq.n	80133b0 <pow+0x2b0>
 8013302:	ec45 4b10 	vmov	d0, r4, r5
 8013306:	f000 fed3 	bl	80140b0 <rint>
 801330a:	4622      	mov	r2, r4
 801330c:	462b      	mov	r3, r5
 801330e:	ec51 0b10 	vmov	r0, r1, d0
 8013312:	f7ed fc01 	bl	8000b18 <__aeabi_dcmpeq>
 8013316:	b920      	cbnz	r0, 8013322 <pow+0x222>
 8013318:	4b2e      	ldr	r3, [pc, #184]	; (80133d4 <pow+0x2d4>)
 801331a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801331e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013322:	f998 3000 	ldrsb.w	r3, [r8]
 8013326:	2b02      	cmp	r3, #2
 8013328:	d142      	bne.n	80133b0 <pow+0x2b0>
 801332a:	f7fd f8cf 	bl	80104cc <__errno>
 801332e:	2322      	movs	r3, #34	; 0x22
 8013330:	e78d      	b.n	801324e <pow+0x14e>
 8013332:	4b29      	ldr	r3, [pc, #164]	; (80133d8 <pow+0x2d8>)
 8013334:	2200      	movs	r2, #0
 8013336:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801333a:	4630      	mov	r0, r6
 801333c:	4652      	mov	r2, sl
 801333e:	465b      	mov	r3, fp
 8013340:	4639      	mov	r1, r7
 8013342:	f7ed fbf3 	bl	8000b2c <__aeabi_dcmplt>
 8013346:	2800      	cmp	r0, #0
 8013348:	d0eb      	beq.n	8013322 <pow+0x222>
 801334a:	ec45 4b10 	vmov	d0, r4, r5
 801334e:	f000 feaf 	bl	80140b0 <rint>
 8013352:	4622      	mov	r2, r4
 8013354:	462b      	mov	r3, r5
 8013356:	ec51 0b10 	vmov	r0, r1, d0
 801335a:	f7ed fbdd 	bl	8000b18 <__aeabi_dcmpeq>
 801335e:	2800      	cmp	r0, #0
 8013360:	d1df      	bne.n	8013322 <pow+0x222>
 8013362:	2200      	movs	r2, #0
 8013364:	4b18      	ldr	r3, [pc, #96]	; (80133c8 <pow+0x2c8>)
 8013366:	e7da      	b.n	801331e <pow+0x21e>
 8013368:	2200      	movs	r2, #0
 801336a:	2300      	movs	r3, #0
 801336c:	ec51 0b18 	vmov	r0, r1, d8
 8013370:	f7ed fbd2 	bl	8000b18 <__aeabi_dcmpeq>
 8013374:	2800      	cmp	r0, #0
 8013376:	f43f af3a 	beq.w	80131ee <pow+0xee>
 801337a:	ec47 6b10 	vmov	d0, r6, r7
 801337e:	f000 fe82 	bl	8014086 <finite>
 8013382:	2800      	cmp	r0, #0
 8013384:	f43f af33 	beq.w	80131ee <pow+0xee>
 8013388:	ec45 4b10 	vmov	d0, r4, r5
 801338c:	f000 fe7b 	bl	8014086 <finite>
 8013390:	2800      	cmp	r0, #0
 8013392:	f43f af2c 	beq.w	80131ee <pow+0xee>
 8013396:	2304      	movs	r3, #4
 8013398:	9302      	str	r3, [sp, #8]
 801339a:	4b09      	ldr	r3, [pc, #36]	; (80133c0 <pow+0x2c0>)
 801339c:	9303      	str	r3, [sp, #12]
 801339e:	2300      	movs	r3, #0
 80133a0:	930a      	str	r3, [sp, #40]	; 0x28
 80133a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80133a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80133aa:	ed8d 9b08 	vstr	d9, [sp, #32]
 80133ae:	e7b8      	b.n	8013322 <pow+0x222>
 80133b0:	a802      	add	r0, sp, #8
 80133b2:	f000 fe70 	bl	8014096 <matherr>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	f47f af11 	bne.w	80131de <pow+0xde>
 80133bc:	e7b5      	b.n	801332a <pow+0x22a>
 80133be:	bf00      	nop
 80133c0:	08015a0e 	.word	0x08015a0e
 80133c4:	3ff00000 	.word	0x3ff00000
 80133c8:	fff00000 	.word	0xfff00000
 80133cc:	3fe00000 	.word	0x3fe00000
 80133d0:	47efffff 	.word	0x47efffff
 80133d4:	c7efffff 	.word	0xc7efffff
 80133d8:	7ff00000 	.word	0x7ff00000
 80133dc:	20001e08 	.word	0x20001e08

080133e0 <__ieee754_log10>:
 80133e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133e4:	ec55 4b10 	vmov	r4, r5, d0
 80133e8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80133ec:	462b      	mov	r3, r5
 80133ee:	da2f      	bge.n	8013450 <__ieee754_log10+0x70>
 80133f0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80133f4:	4322      	orrs	r2, r4
 80133f6:	d10a      	bne.n	801340e <__ieee754_log10+0x2e>
 80133f8:	493b      	ldr	r1, [pc, #236]	; (80134e8 <__ieee754_log10+0x108>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	2300      	movs	r3, #0
 80133fe:	2000      	movs	r0, #0
 8013400:	f7ed fa4c 	bl	800089c <__aeabi_ddiv>
 8013404:	ec41 0b10 	vmov	d0, r0, r1
 8013408:	b003      	add	sp, #12
 801340a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801340e:	2d00      	cmp	r5, #0
 8013410:	da08      	bge.n	8013424 <__ieee754_log10+0x44>
 8013412:	ee10 2a10 	vmov	r2, s0
 8013416:	4620      	mov	r0, r4
 8013418:	4629      	mov	r1, r5
 801341a:	f7ec ff5d 	bl	80002d8 <__aeabi_dsub>
 801341e:	2200      	movs	r2, #0
 8013420:	2300      	movs	r3, #0
 8013422:	e7ed      	b.n	8013400 <__ieee754_log10+0x20>
 8013424:	2200      	movs	r2, #0
 8013426:	4b31      	ldr	r3, [pc, #196]	; (80134ec <__ieee754_log10+0x10c>)
 8013428:	4629      	mov	r1, r5
 801342a:	ee10 0a10 	vmov	r0, s0
 801342e:	f7ed f90b 	bl	8000648 <__aeabi_dmul>
 8013432:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8013436:	4604      	mov	r4, r0
 8013438:	460d      	mov	r5, r1
 801343a:	460b      	mov	r3, r1
 801343c:	492c      	ldr	r1, [pc, #176]	; (80134f0 <__ieee754_log10+0x110>)
 801343e:	428b      	cmp	r3, r1
 8013440:	dd08      	ble.n	8013454 <__ieee754_log10+0x74>
 8013442:	4622      	mov	r2, r4
 8013444:	462b      	mov	r3, r5
 8013446:	4620      	mov	r0, r4
 8013448:	4629      	mov	r1, r5
 801344a:	f7ec ff47 	bl	80002dc <__adddf3>
 801344e:	e7d9      	b.n	8013404 <__ieee754_log10+0x24>
 8013450:	2200      	movs	r2, #0
 8013452:	e7f3      	b.n	801343c <__ieee754_log10+0x5c>
 8013454:	1518      	asrs	r0, r3, #20
 8013456:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801345a:	4410      	add	r0, r2
 801345c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8013460:	4448      	add	r0, r9
 8013462:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8013466:	f7ed f885 	bl	8000574 <__aeabi_i2d>
 801346a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801346e:	3303      	adds	r3, #3
 8013470:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8013474:	ec45 4b10 	vmov	d0, r4, r5
 8013478:	4606      	mov	r6, r0
 801347a:	460f      	mov	r7, r1
 801347c:	f000 ff14 	bl	80142a8 <__ieee754_log>
 8013480:	a313      	add	r3, pc, #76	; (adr r3, 80134d0 <__ieee754_log10+0xf0>)
 8013482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013486:	4630      	mov	r0, r6
 8013488:	4639      	mov	r1, r7
 801348a:	ed8d 0b00 	vstr	d0, [sp]
 801348e:	f7ed f8db 	bl	8000648 <__aeabi_dmul>
 8013492:	ed9d 0b00 	vldr	d0, [sp]
 8013496:	4604      	mov	r4, r0
 8013498:	460d      	mov	r5, r1
 801349a:	a30f      	add	r3, pc, #60	; (adr r3, 80134d8 <__ieee754_log10+0xf8>)
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	ec51 0b10 	vmov	r0, r1, d0
 80134a4:	f7ed f8d0 	bl	8000648 <__aeabi_dmul>
 80134a8:	4602      	mov	r2, r0
 80134aa:	460b      	mov	r3, r1
 80134ac:	4620      	mov	r0, r4
 80134ae:	4629      	mov	r1, r5
 80134b0:	f7ec ff14 	bl	80002dc <__adddf3>
 80134b4:	a30a      	add	r3, pc, #40	; (adr r3, 80134e0 <__ieee754_log10+0x100>)
 80134b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ba:	4604      	mov	r4, r0
 80134bc:	460d      	mov	r5, r1
 80134be:	4630      	mov	r0, r6
 80134c0:	4639      	mov	r1, r7
 80134c2:	f7ed f8c1 	bl	8000648 <__aeabi_dmul>
 80134c6:	4602      	mov	r2, r0
 80134c8:	460b      	mov	r3, r1
 80134ca:	4620      	mov	r0, r4
 80134cc:	4629      	mov	r1, r5
 80134ce:	e7bc      	b.n	801344a <__ieee754_log10+0x6a>
 80134d0:	11f12b36 	.word	0x11f12b36
 80134d4:	3d59fef3 	.word	0x3d59fef3
 80134d8:	1526e50e 	.word	0x1526e50e
 80134dc:	3fdbcb7b 	.word	0x3fdbcb7b
 80134e0:	509f6000 	.word	0x509f6000
 80134e4:	3fd34413 	.word	0x3fd34413
 80134e8:	c3500000 	.word	0xc3500000
 80134ec:	43500000 	.word	0x43500000
 80134f0:	7fefffff 	.word	0x7fefffff
 80134f4:	00000000 	.word	0x00000000

080134f8 <__ieee754_pow>:
 80134f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134fc:	b091      	sub	sp, #68	; 0x44
 80134fe:	ed8d 1b00 	vstr	d1, [sp]
 8013502:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013506:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801350a:	ea58 0302 	orrs.w	r3, r8, r2
 801350e:	ec57 6b10 	vmov	r6, r7, d0
 8013512:	f000 84be 	beq.w	8013e92 <__ieee754_pow+0x99a>
 8013516:	4b7a      	ldr	r3, [pc, #488]	; (8013700 <__ieee754_pow+0x208>)
 8013518:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801351c:	429c      	cmp	r4, r3
 801351e:	463d      	mov	r5, r7
 8013520:	ee10 aa10 	vmov	sl, s0
 8013524:	dc09      	bgt.n	801353a <__ieee754_pow+0x42>
 8013526:	d103      	bne.n	8013530 <__ieee754_pow+0x38>
 8013528:	b93e      	cbnz	r6, 801353a <__ieee754_pow+0x42>
 801352a:	45a0      	cmp	r8, r4
 801352c:	dc0d      	bgt.n	801354a <__ieee754_pow+0x52>
 801352e:	e001      	b.n	8013534 <__ieee754_pow+0x3c>
 8013530:	4598      	cmp	r8, r3
 8013532:	dc02      	bgt.n	801353a <__ieee754_pow+0x42>
 8013534:	4598      	cmp	r8, r3
 8013536:	d10e      	bne.n	8013556 <__ieee754_pow+0x5e>
 8013538:	b16a      	cbz	r2, 8013556 <__ieee754_pow+0x5e>
 801353a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801353e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013542:	ea54 030a 	orrs.w	r3, r4, sl
 8013546:	f000 84a4 	beq.w	8013e92 <__ieee754_pow+0x99a>
 801354a:	486e      	ldr	r0, [pc, #440]	; (8013704 <__ieee754_pow+0x20c>)
 801354c:	b011      	add	sp, #68	; 0x44
 801354e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013552:	f000 bda5 	b.w	80140a0 <nan>
 8013556:	2d00      	cmp	r5, #0
 8013558:	da53      	bge.n	8013602 <__ieee754_pow+0x10a>
 801355a:	4b6b      	ldr	r3, [pc, #428]	; (8013708 <__ieee754_pow+0x210>)
 801355c:	4598      	cmp	r8, r3
 801355e:	dc4d      	bgt.n	80135fc <__ieee754_pow+0x104>
 8013560:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013564:	4598      	cmp	r8, r3
 8013566:	dd4c      	ble.n	8013602 <__ieee754_pow+0x10a>
 8013568:	ea4f 5328 	mov.w	r3, r8, asr #20
 801356c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013570:	2b14      	cmp	r3, #20
 8013572:	dd26      	ble.n	80135c2 <__ieee754_pow+0xca>
 8013574:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013578:	fa22 f103 	lsr.w	r1, r2, r3
 801357c:	fa01 f303 	lsl.w	r3, r1, r3
 8013580:	4293      	cmp	r3, r2
 8013582:	d13e      	bne.n	8013602 <__ieee754_pow+0x10a>
 8013584:	f001 0101 	and.w	r1, r1, #1
 8013588:	f1c1 0b02 	rsb	fp, r1, #2
 801358c:	2a00      	cmp	r2, #0
 801358e:	d15b      	bne.n	8013648 <__ieee754_pow+0x150>
 8013590:	4b5b      	ldr	r3, [pc, #364]	; (8013700 <__ieee754_pow+0x208>)
 8013592:	4598      	cmp	r8, r3
 8013594:	d124      	bne.n	80135e0 <__ieee754_pow+0xe8>
 8013596:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801359a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801359e:	ea53 030a 	orrs.w	r3, r3, sl
 80135a2:	f000 8476 	beq.w	8013e92 <__ieee754_pow+0x99a>
 80135a6:	4b59      	ldr	r3, [pc, #356]	; (801370c <__ieee754_pow+0x214>)
 80135a8:	429c      	cmp	r4, r3
 80135aa:	dd2d      	ble.n	8013608 <__ieee754_pow+0x110>
 80135ac:	f1b9 0f00 	cmp.w	r9, #0
 80135b0:	f280 8473 	bge.w	8013e9a <__ieee754_pow+0x9a2>
 80135b4:	2000      	movs	r0, #0
 80135b6:	2100      	movs	r1, #0
 80135b8:	ec41 0b10 	vmov	d0, r0, r1
 80135bc:	b011      	add	sp, #68	; 0x44
 80135be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c2:	2a00      	cmp	r2, #0
 80135c4:	d13e      	bne.n	8013644 <__ieee754_pow+0x14c>
 80135c6:	f1c3 0314 	rsb	r3, r3, #20
 80135ca:	fa48 f103 	asr.w	r1, r8, r3
 80135ce:	fa01 f303 	lsl.w	r3, r1, r3
 80135d2:	4543      	cmp	r3, r8
 80135d4:	f040 8469 	bne.w	8013eaa <__ieee754_pow+0x9b2>
 80135d8:	f001 0101 	and.w	r1, r1, #1
 80135dc:	f1c1 0b02 	rsb	fp, r1, #2
 80135e0:	4b4b      	ldr	r3, [pc, #300]	; (8013710 <__ieee754_pow+0x218>)
 80135e2:	4598      	cmp	r8, r3
 80135e4:	d118      	bne.n	8013618 <__ieee754_pow+0x120>
 80135e6:	f1b9 0f00 	cmp.w	r9, #0
 80135ea:	f280 845a 	bge.w	8013ea2 <__ieee754_pow+0x9aa>
 80135ee:	4948      	ldr	r1, [pc, #288]	; (8013710 <__ieee754_pow+0x218>)
 80135f0:	4632      	mov	r2, r6
 80135f2:	463b      	mov	r3, r7
 80135f4:	2000      	movs	r0, #0
 80135f6:	f7ed f951 	bl	800089c <__aeabi_ddiv>
 80135fa:	e7dd      	b.n	80135b8 <__ieee754_pow+0xc0>
 80135fc:	f04f 0b02 	mov.w	fp, #2
 8013600:	e7c4      	b.n	801358c <__ieee754_pow+0x94>
 8013602:	f04f 0b00 	mov.w	fp, #0
 8013606:	e7c1      	b.n	801358c <__ieee754_pow+0x94>
 8013608:	f1b9 0f00 	cmp.w	r9, #0
 801360c:	dad2      	bge.n	80135b4 <__ieee754_pow+0xbc>
 801360e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013612:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013616:	e7cf      	b.n	80135b8 <__ieee754_pow+0xc0>
 8013618:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801361c:	d106      	bne.n	801362c <__ieee754_pow+0x134>
 801361e:	4632      	mov	r2, r6
 8013620:	463b      	mov	r3, r7
 8013622:	4610      	mov	r0, r2
 8013624:	4619      	mov	r1, r3
 8013626:	f7ed f80f 	bl	8000648 <__aeabi_dmul>
 801362a:	e7c5      	b.n	80135b8 <__ieee754_pow+0xc0>
 801362c:	4b39      	ldr	r3, [pc, #228]	; (8013714 <__ieee754_pow+0x21c>)
 801362e:	4599      	cmp	r9, r3
 8013630:	d10a      	bne.n	8013648 <__ieee754_pow+0x150>
 8013632:	2d00      	cmp	r5, #0
 8013634:	db08      	blt.n	8013648 <__ieee754_pow+0x150>
 8013636:	ec47 6b10 	vmov	d0, r6, r7
 801363a:	b011      	add	sp, #68	; 0x44
 801363c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013640:	f000 bc68 	b.w	8013f14 <__ieee754_sqrt>
 8013644:	f04f 0b00 	mov.w	fp, #0
 8013648:	ec47 6b10 	vmov	d0, r6, r7
 801364c:	f000 fd12 	bl	8014074 <fabs>
 8013650:	ec51 0b10 	vmov	r0, r1, d0
 8013654:	f1ba 0f00 	cmp.w	sl, #0
 8013658:	d127      	bne.n	80136aa <__ieee754_pow+0x1b2>
 801365a:	b124      	cbz	r4, 8013666 <__ieee754_pow+0x16e>
 801365c:	4b2c      	ldr	r3, [pc, #176]	; (8013710 <__ieee754_pow+0x218>)
 801365e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013662:	429a      	cmp	r2, r3
 8013664:	d121      	bne.n	80136aa <__ieee754_pow+0x1b2>
 8013666:	f1b9 0f00 	cmp.w	r9, #0
 801366a:	da05      	bge.n	8013678 <__ieee754_pow+0x180>
 801366c:	4602      	mov	r2, r0
 801366e:	460b      	mov	r3, r1
 8013670:	2000      	movs	r0, #0
 8013672:	4927      	ldr	r1, [pc, #156]	; (8013710 <__ieee754_pow+0x218>)
 8013674:	f7ed f912 	bl	800089c <__aeabi_ddiv>
 8013678:	2d00      	cmp	r5, #0
 801367a:	da9d      	bge.n	80135b8 <__ieee754_pow+0xc0>
 801367c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013680:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013684:	ea54 030b 	orrs.w	r3, r4, fp
 8013688:	d108      	bne.n	801369c <__ieee754_pow+0x1a4>
 801368a:	4602      	mov	r2, r0
 801368c:	460b      	mov	r3, r1
 801368e:	4610      	mov	r0, r2
 8013690:	4619      	mov	r1, r3
 8013692:	f7ec fe21 	bl	80002d8 <__aeabi_dsub>
 8013696:	4602      	mov	r2, r0
 8013698:	460b      	mov	r3, r1
 801369a:	e7ac      	b.n	80135f6 <__ieee754_pow+0xfe>
 801369c:	f1bb 0f01 	cmp.w	fp, #1
 80136a0:	d18a      	bne.n	80135b8 <__ieee754_pow+0xc0>
 80136a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136a6:	4619      	mov	r1, r3
 80136a8:	e786      	b.n	80135b8 <__ieee754_pow+0xc0>
 80136aa:	0fed      	lsrs	r5, r5, #31
 80136ac:	1e6b      	subs	r3, r5, #1
 80136ae:	930d      	str	r3, [sp, #52]	; 0x34
 80136b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80136b4:	d102      	bne.n	80136bc <__ieee754_pow+0x1c4>
 80136b6:	4632      	mov	r2, r6
 80136b8:	463b      	mov	r3, r7
 80136ba:	e7e8      	b.n	801368e <__ieee754_pow+0x196>
 80136bc:	4b16      	ldr	r3, [pc, #88]	; (8013718 <__ieee754_pow+0x220>)
 80136be:	4598      	cmp	r8, r3
 80136c0:	f340 80fe 	ble.w	80138c0 <__ieee754_pow+0x3c8>
 80136c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80136c8:	4598      	cmp	r8, r3
 80136ca:	dd0a      	ble.n	80136e2 <__ieee754_pow+0x1ea>
 80136cc:	4b0f      	ldr	r3, [pc, #60]	; (801370c <__ieee754_pow+0x214>)
 80136ce:	429c      	cmp	r4, r3
 80136d0:	dc0d      	bgt.n	80136ee <__ieee754_pow+0x1f6>
 80136d2:	f1b9 0f00 	cmp.w	r9, #0
 80136d6:	f6bf af6d 	bge.w	80135b4 <__ieee754_pow+0xbc>
 80136da:	a307      	add	r3, pc, #28	; (adr r3, 80136f8 <__ieee754_pow+0x200>)
 80136dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e0:	e79f      	b.n	8013622 <__ieee754_pow+0x12a>
 80136e2:	4b0e      	ldr	r3, [pc, #56]	; (801371c <__ieee754_pow+0x224>)
 80136e4:	429c      	cmp	r4, r3
 80136e6:	ddf4      	ble.n	80136d2 <__ieee754_pow+0x1da>
 80136e8:	4b09      	ldr	r3, [pc, #36]	; (8013710 <__ieee754_pow+0x218>)
 80136ea:	429c      	cmp	r4, r3
 80136ec:	dd18      	ble.n	8013720 <__ieee754_pow+0x228>
 80136ee:	f1b9 0f00 	cmp.w	r9, #0
 80136f2:	dcf2      	bgt.n	80136da <__ieee754_pow+0x1e2>
 80136f4:	e75e      	b.n	80135b4 <__ieee754_pow+0xbc>
 80136f6:	bf00      	nop
 80136f8:	8800759c 	.word	0x8800759c
 80136fc:	7e37e43c 	.word	0x7e37e43c
 8013700:	7ff00000 	.word	0x7ff00000
 8013704:	080158f1 	.word	0x080158f1
 8013708:	433fffff 	.word	0x433fffff
 801370c:	3fefffff 	.word	0x3fefffff
 8013710:	3ff00000 	.word	0x3ff00000
 8013714:	3fe00000 	.word	0x3fe00000
 8013718:	41e00000 	.word	0x41e00000
 801371c:	3feffffe 	.word	0x3feffffe
 8013720:	2200      	movs	r2, #0
 8013722:	4b63      	ldr	r3, [pc, #396]	; (80138b0 <__ieee754_pow+0x3b8>)
 8013724:	f7ec fdd8 	bl	80002d8 <__aeabi_dsub>
 8013728:	a355      	add	r3, pc, #340	; (adr r3, 8013880 <__ieee754_pow+0x388>)
 801372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801372e:	4604      	mov	r4, r0
 8013730:	460d      	mov	r5, r1
 8013732:	f7ec ff89 	bl	8000648 <__aeabi_dmul>
 8013736:	a354      	add	r3, pc, #336	; (adr r3, 8013888 <__ieee754_pow+0x390>)
 8013738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373c:	4606      	mov	r6, r0
 801373e:	460f      	mov	r7, r1
 8013740:	4620      	mov	r0, r4
 8013742:	4629      	mov	r1, r5
 8013744:	f7ec ff80 	bl	8000648 <__aeabi_dmul>
 8013748:	2200      	movs	r2, #0
 801374a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801374e:	4b59      	ldr	r3, [pc, #356]	; (80138b4 <__ieee754_pow+0x3bc>)
 8013750:	4620      	mov	r0, r4
 8013752:	4629      	mov	r1, r5
 8013754:	f7ec ff78 	bl	8000648 <__aeabi_dmul>
 8013758:	4602      	mov	r2, r0
 801375a:	460b      	mov	r3, r1
 801375c:	a14c      	add	r1, pc, #304	; (adr r1, 8013890 <__ieee754_pow+0x398>)
 801375e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013762:	f7ec fdb9 	bl	80002d8 <__aeabi_dsub>
 8013766:	4622      	mov	r2, r4
 8013768:	462b      	mov	r3, r5
 801376a:	f7ec ff6d 	bl	8000648 <__aeabi_dmul>
 801376e:	4602      	mov	r2, r0
 8013770:	460b      	mov	r3, r1
 8013772:	2000      	movs	r0, #0
 8013774:	4950      	ldr	r1, [pc, #320]	; (80138b8 <__ieee754_pow+0x3c0>)
 8013776:	f7ec fdaf 	bl	80002d8 <__aeabi_dsub>
 801377a:	4622      	mov	r2, r4
 801377c:	462b      	mov	r3, r5
 801377e:	4680      	mov	r8, r0
 8013780:	4689      	mov	r9, r1
 8013782:	4620      	mov	r0, r4
 8013784:	4629      	mov	r1, r5
 8013786:	f7ec ff5f 	bl	8000648 <__aeabi_dmul>
 801378a:	4602      	mov	r2, r0
 801378c:	460b      	mov	r3, r1
 801378e:	4640      	mov	r0, r8
 8013790:	4649      	mov	r1, r9
 8013792:	f7ec ff59 	bl	8000648 <__aeabi_dmul>
 8013796:	a340      	add	r3, pc, #256	; (adr r3, 8013898 <__ieee754_pow+0x3a0>)
 8013798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379c:	f7ec ff54 	bl	8000648 <__aeabi_dmul>
 80137a0:	4602      	mov	r2, r0
 80137a2:	460b      	mov	r3, r1
 80137a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80137a8:	f7ec fd96 	bl	80002d8 <__aeabi_dsub>
 80137ac:	4602      	mov	r2, r0
 80137ae:	460b      	mov	r3, r1
 80137b0:	4604      	mov	r4, r0
 80137b2:	460d      	mov	r5, r1
 80137b4:	4630      	mov	r0, r6
 80137b6:	4639      	mov	r1, r7
 80137b8:	f7ec fd90 	bl	80002dc <__adddf3>
 80137bc:	2000      	movs	r0, #0
 80137be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137c2:	4632      	mov	r2, r6
 80137c4:	463b      	mov	r3, r7
 80137c6:	f7ec fd87 	bl	80002d8 <__aeabi_dsub>
 80137ca:	4602      	mov	r2, r0
 80137cc:	460b      	mov	r3, r1
 80137ce:	4620      	mov	r0, r4
 80137d0:	4629      	mov	r1, r5
 80137d2:	f7ec fd81 	bl	80002d8 <__aeabi_dsub>
 80137d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137d8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80137dc:	4313      	orrs	r3, r2
 80137de:	4606      	mov	r6, r0
 80137e0:	460f      	mov	r7, r1
 80137e2:	f040 81eb 	bne.w	8013bbc <__ieee754_pow+0x6c4>
 80137e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80138a0 <__ieee754_pow+0x3a8>
 80137ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80137ee:	2400      	movs	r4, #0
 80137f0:	4622      	mov	r2, r4
 80137f2:	462b      	mov	r3, r5
 80137f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80137f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137fc:	f7ec fd6c 	bl	80002d8 <__aeabi_dsub>
 8013800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013804:	f7ec ff20 	bl	8000648 <__aeabi_dmul>
 8013808:	e9dd 2300 	ldrd	r2, r3, [sp]
 801380c:	4680      	mov	r8, r0
 801380e:	4689      	mov	r9, r1
 8013810:	4630      	mov	r0, r6
 8013812:	4639      	mov	r1, r7
 8013814:	f7ec ff18 	bl	8000648 <__aeabi_dmul>
 8013818:	4602      	mov	r2, r0
 801381a:	460b      	mov	r3, r1
 801381c:	4640      	mov	r0, r8
 801381e:	4649      	mov	r1, r9
 8013820:	f7ec fd5c 	bl	80002dc <__adddf3>
 8013824:	4622      	mov	r2, r4
 8013826:	462b      	mov	r3, r5
 8013828:	4680      	mov	r8, r0
 801382a:	4689      	mov	r9, r1
 801382c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013830:	f7ec ff0a 	bl	8000648 <__aeabi_dmul>
 8013834:	460b      	mov	r3, r1
 8013836:	4604      	mov	r4, r0
 8013838:	460d      	mov	r5, r1
 801383a:	4602      	mov	r2, r0
 801383c:	4649      	mov	r1, r9
 801383e:	4640      	mov	r0, r8
 8013840:	e9cd 4500 	strd	r4, r5, [sp]
 8013844:	f7ec fd4a 	bl	80002dc <__adddf3>
 8013848:	4b1c      	ldr	r3, [pc, #112]	; (80138bc <__ieee754_pow+0x3c4>)
 801384a:	4299      	cmp	r1, r3
 801384c:	4606      	mov	r6, r0
 801384e:	460f      	mov	r7, r1
 8013850:	468b      	mov	fp, r1
 8013852:	f340 82f7 	ble.w	8013e44 <__ieee754_pow+0x94c>
 8013856:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801385a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801385e:	4303      	orrs	r3, r0
 8013860:	f000 81ea 	beq.w	8013c38 <__ieee754_pow+0x740>
 8013864:	a310      	add	r3, pc, #64	; (adr r3, 80138a8 <__ieee754_pow+0x3b0>)
 8013866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801386a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801386e:	f7ec feeb 	bl	8000648 <__aeabi_dmul>
 8013872:	a30d      	add	r3, pc, #52	; (adr r3, 80138a8 <__ieee754_pow+0x3b0>)
 8013874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013878:	e6d5      	b.n	8013626 <__ieee754_pow+0x12e>
 801387a:	bf00      	nop
 801387c:	f3af 8000 	nop.w
 8013880:	60000000 	.word	0x60000000
 8013884:	3ff71547 	.word	0x3ff71547
 8013888:	f85ddf44 	.word	0xf85ddf44
 801388c:	3e54ae0b 	.word	0x3e54ae0b
 8013890:	55555555 	.word	0x55555555
 8013894:	3fd55555 	.word	0x3fd55555
 8013898:	652b82fe 	.word	0x652b82fe
 801389c:	3ff71547 	.word	0x3ff71547
 80138a0:	00000000 	.word	0x00000000
 80138a4:	bff00000 	.word	0xbff00000
 80138a8:	8800759c 	.word	0x8800759c
 80138ac:	7e37e43c 	.word	0x7e37e43c
 80138b0:	3ff00000 	.word	0x3ff00000
 80138b4:	3fd00000 	.word	0x3fd00000
 80138b8:	3fe00000 	.word	0x3fe00000
 80138bc:	408fffff 	.word	0x408fffff
 80138c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80138c4:	f04f 0200 	mov.w	r2, #0
 80138c8:	da05      	bge.n	80138d6 <__ieee754_pow+0x3de>
 80138ca:	4bd3      	ldr	r3, [pc, #844]	; (8013c18 <__ieee754_pow+0x720>)
 80138cc:	f7ec febc 	bl	8000648 <__aeabi_dmul>
 80138d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80138d4:	460c      	mov	r4, r1
 80138d6:	1523      	asrs	r3, r4, #20
 80138d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80138dc:	4413      	add	r3, r2
 80138de:	9309      	str	r3, [sp, #36]	; 0x24
 80138e0:	4bce      	ldr	r3, [pc, #824]	; (8013c1c <__ieee754_pow+0x724>)
 80138e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80138e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80138ea:	429c      	cmp	r4, r3
 80138ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80138f0:	dd08      	ble.n	8013904 <__ieee754_pow+0x40c>
 80138f2:	4bcb      	ldr	r3, [pc, #812]	; (8013c20 <__ieee754_pow+0x728>)
 80138f4:	429c      	cmp	r4, r3
 80138f6:	f340 815e 	ble.w	8013bb6 <__ieee754_pow+0x6be>
 80138fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138fc:	3301      	adds	r3, #1
 80138fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013900:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013904:	f04f 0a00 	mov.w	sl, #0
 8013908:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801390c:	930c      	str	r3, [sp, #48]	; 0x30
 801390e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013910:	4bc4      	ldr	r3, [pc, #784]	; (8013c24 <__ieee754_pow+0x72c>)
 8013912:	4413      	add	r3, r2
 8013914:	ed93 7b00 	vldr	d7, [r3]
 8013918:	4629      	mov	r1, r5
 801391a:	ec53 2b17 	vmov	r2, r3, d7
 801391e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013922:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013926:	f7ec fcd7 	bl	80002d8 <__aeabi_dsub>
 801392a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801392e:	4606      	mov	r6, r0
 8013930:	460f      	mov	r7, r1
 8013932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013936:	f7ec fcd1 	bl	80002dc <__adddf3>
 801393a:	4602      	mov	r2, r0
 801393c:	460b      	mov	r3, r1
 801393e:	2000      	movs	r0, #0
 8013940:	49b9      	ldr	r1, [pc, #740]	; (8013c28 <__ieee754_pow+0x730>)
 8013942:	f7ec ffab 	bl	800089c <__aeabi_ddiv>
 8013946:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801394a:	4602      	mov	r2, r0
 801394c:	460b      	mov	r3, r1
 801394e:	4630      	mov	r0, r6
 8013950:	4639      	mov	r1, r7
 8013952:	f7ec fe79 	bl	8000648 <__aeabi_dmul>
 8013956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801395a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801395e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013962:	2300      	movs	r3, #0
 8013964:	9302      	str	r3, [sp, #8]
 8013966:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801396a:	106d      	asrs	r5, r5, #1
 801396c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013970:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013974:	2200      	movs	r2, #0
 8013976:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801397a:	4640      	mov	r0, r8
 801397c:	4649      	mov	r1, r9
 801397e:	4614      	mov	r4, r2
 8013980:	461d      	mov	r5, r3
 8013982:	f7ec fe61 	bl	8000648 <__aeabi_dmul>
 8013986:	4602      	mov	r2, r0
 8013988:	460b      	mov	r3, r1
 801398a:	4630      	mov	r0, r6
 801398c:	4639      	mov	r1, r7
 801398e:	f7ec fca3 	bl	80002d8 <__aeabi_dsub>
 8013992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013996:	4606      	mov	r6, r0
 8013998:	460f      	mov	r7, r1
 801399a:	4620      	mov	r0, r4
 801399c:	4629      	mov	r1, r5
 801399e:	f7ec fc9b 	bl	80002d8 <__aeabi_dsub>
 80139a2:	4602      	mov	r2, r0
 80139a4:	460b      	mov	r3, r1
 80139a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80139aa:	f7ec fc95 	bl	80002d8 <__aeabi_dsub>
 80139ae:	4642      	mov	r2, r8
 80139b0:	464b      	mov	r3, r9
 80139b2:	f7ec fe49 	bl	8000648 <__aeabi_dmul>
 80139b6:	4602      	mov	r2, r0
 80139b8:	460b      	mov	r3, r1
 80139ba:	4630      	mov	r0, r6
 80139bc:	4639      	mov	r1, r7
 80139be:	f7ec fc8b 	bl	80002d8 <__aeabi_dsub>
 80139c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80139c6:	f7ec fe3f 	bl	8000648 <__aeabi_dmul>
 80139ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80139d2:	4610      	mov	r0, r2
 80139d4:	4619      	mov	r1, r3
 80139d6:	f7ec fe37 	bl	8000648 <__aeabi_dmul>
 80139da:	a37b      	add	r3, pc, #492	; (adr r3, 8013bc8 <__ieee754_pow+0x6d0>)
 80139dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e0:	4604      	mov	r4, r0
 80139e2:	460d      	mov	r5, r1
 80139e4:	f7ec fe30 	bl	8000648 <__aeabi_dmul>
 80139e8:	a379      	add	r3, pc, #484	; (adr r3, 8013bd0 <__ieee754_pow+0x6d8>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	f7ec fc75 	bl	80002dc <__adddf3>
 80139f2:	4622      	mov	r2, r4
 80139f4:	462b      	mov	r3, r5
 80139f6:	f7ec fe27 	bl	8000648 <__aeabi_dmul>
 80139fa:	a377      	add	r3, pc, #476	; (adr r3, 8013bd8 <__ieee754_pow+0x6e0>)
 80139fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a00:	f7ec fc6c 	bl	80002dc <__adddf3>
 8013a04:	4622      	mov	r2, r4
 8013a06:	462b      	mov	r3, r5
 8013a08:	f7ec fe1e 	bl	8000648 <__aeabi_dmul>
 8013a0c:	a374      	add	r3, pc, #464	; (adr r3, 8013be0 <__ieee754_pow+0x6e8>)
 8013a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a12:	f7ec fc63 	bl	80002dc <__adddf3>
 8013a16:	4622      	mov	r2, r4
 8013a18:	462b      	mov	r3, r5
 8013a1a:	f7ec fe15 	bl	8000648 <__aeabi_dmul>
 8013a1e:	a372      	add	r3, pc, #456	; (adr r3, 8013be8 <__ieee754_pow+0x6f0>)
 8013a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a24:	f7ec fc5a 	bl	80002dc <__adddf3>
 8013a28:	4622      	mov	r2, r4
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	f7ec fe0c 	bl	8000648 <__aeabi_dmul>
 8013a30:	a36f      	add	r3, pc, #444	; (adr r3, 8013bf0 <__ieee754_pow+0x6f8>)
 8013a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a36:	f7ec fc51 	bl	80002dc <__adddf3>
 8013a3a:	4622      	mov	r2, r4
 8013a3c:	4606      	mov	r6, r0
 8013a3e:	460f      	mov	r7, r1
 8013a40:	462b      	mov	r3, r5
 8013a42:	4620      	mov	r0, r4
 8013a44:	4629      	mov	r1, r5
 8013a46:	f7ec fdff 	bl	8000648 <__aeabi_dmul>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	4630      	mov	r0, r6
 8013a50:	4639      	mov	r1, r7
 8013a52:	f7ec fdf9 	bl	8000648 <__aeabi_dmul>
 8013a56:	4642      	mov	r2, r8
 8013a58:	4604      	mov	r4, r0
 8013a5a:	460d      	mov	r5, r1
 8013a5c:	464b      	mov	r3, r9
 8013a5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a62:	f7ec fc3b 	bl	80002dc <__adddf3>
 8013a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a6a:	f7ec fded 	bl	8000648 <__aeabi_dmul>
 8013a6e:	4622      	mov	r2, r4
 8013a70:	462b      	mov	r3, r5
 8013a72:	f7ec fc33 	bl	80002dc <__adddf3>
 8013a76:	4642      	mov	r2, r8
 8013a78:	4606      	mov	r6, r0
 8013a7a:	460f      	mov	r7, r1
 8013a7c:	464b      	mov	r3, r9
 8013a7e:	4640      	mov	r0, r8
 8013a80:	4649      	mov	r1, r9
 8013a82:	f7ec fde1 	bl	8000648 <__aeabi_dmul>
 8013a86:	2200      	movs	r2, #0
 8013a88:	4b68      	ldr	r3, [pc, #416]	; (8013c2c <__ieee754_pow+0x734>)
 8013a8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013a8e:	f7ec fc25 	bl	80002dc <__adddf3>
 8013a92:	4632      	mov	r2, r6
 8013a94:	463b      	mov	r3, r7
 8013a96:	f7ec fc21 	bl	80002dc <__adddf3>
 8013a9a:	9802      	ldr	r0, [sp, #8]
 8013a9c:	460d      	mov	r5, r1
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	460b      	mov	r3, r1
 8013aa4:	4640      	mov	r0, r8
 8013aa6:	4649      	mov	r1, r9
 8013aa8:	f7ec fdce 	bl	8000648 <__aeabi_dmul>
 8013aac:	2200      	movs	r2, #0
 8013aae:	4680      	mov	r8, r0
 8013ab0:	4689      	mov	r9, r1
 8013ab2:	4b5e      	ldr	r3, [pc, #376]	; (8013c2c <__ieee754_pow+0x734>)
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	4629      	mov	r1, r5
 8013ab8:	f7ec fc0e 	bl	80002d8 <__aeabi_dsub>
 8013abc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ac0:	f7ec fc0a 	bl	80002d8 <__aeabi_dsub>
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	460b      	mov	r3, r1
 8013ac8:	4630      	mov	r0, r6
 8013aca:	4639      	mov	r1, r7
 8013acc:	f7ec fc04 	bl	80002d8 <__aeabi_dsub>
 8013ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ad4:	f7ec fdb8 	bl	8000648 <__aeabi_dmul>
 8013ad8:	4622      	mov	r2, r4
 8013ada:	4606      	mov	r6, r0
 8013adc:	460f      	mov	r7, r1
 8013ade:	462b      	mov	r3, r5
 8013ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ae4:	f7ec fdb0 	bl	8000648 <__aeabi_dmul>
 8013ae8:	4602      	mov	r2, r0
 8013aea:	460b      	mov	r3, r1
 8013aec:	4630      	mov	r0, r6
 8013aee:	4639      	mov	r1, r7
 8013af0:	f7ec fbf4 	bl	80002dc <__adddf3>
 8013af4:	4606      	mov	r6, r0
 8013af6:	460f      	mov	r7, r1
 8013af8:	4602      	mov	r2, r0
 8013afa:	460b      	mov	r3, r1
 8013afc:	4640      	mov	r0, r8
 8013afe:	4649      	mov	r1, r9
 8013b00:	f7ec fbec 	bl	80002dc <__adddf3>
 8013b04:	9802      	ldr	r0, [sp, #8]
 8013b06:	a33c      	add	r3, pc, #240	; (adr r3, 8013bf8 <__ieee754_pow+0x700>)
 8013b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	460d      	mov	r5, r1
 8013b10:	f7ec fd9a 	bl	8000648 <__aeabi_dmul>
 8013b14:	4642      	mov	r2, r8
 8013b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b1a:	464b      	mov	r3, r9
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	4629      	mov	r1, r5
 8013b20:	f7ec fbda 	bl	80002d8 <__aeabi_dsub>
 8013b24:	4602      	mov	r2, r0
 8013b26:	460b      	mov	r3, r1
 8013b28:	4630      	mov	r0, r6
 8013b2a:	4639      	mov	r1, r7
 8013b2c:	f7ec fbd4 	bl	80002d8 <__aeabi_dsub>
 8013b30:	a333      	add	r3, pc, #204	; (adr r3, 8013c00 <__ieee754_pow+0x708>)
 8013b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b36:	f7ec fd87 	bl	8000648 <__aeabi_dmul>
 8013b3a:	a333      	add	r3, pc, #204	; (adr r3, 8013c08 <__ieee754_pow+0x710>)
 8013b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b40:	4606      	mov	r6, r0
 8013b42:	460f      	mov	r7, r1
 8013b44:	4620      	mov	r0, r4
 8013b46:	4629      	mov	r1, r5
 8013b48:	f7ec fd7e 	bl	8000648 <__aeabi_dmul>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	460b      	mov	r3, r1
 8013b50:	4630      	mov	r0, r6
 8013b52:	4639      	mov	r1, r7
 8013b54:	f7ec fbc2 	bl	80002dc <__adddf3>
 8013b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b5a:	4b35      	ldr	r3, [pc, #212]	; (8013c30 <__ieee754_pow+0x738>)
 8013b5c:	4413      	add	r3, r2
 8013b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b62:	f7ec fbbb 	bl	80002dc <__adddf3>
 8013b66:	4604      	mov	r4, r0
 8013b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b6a:	460d      	mov	r5, r1
 8013b6c:	f7ec fd02 	bl	8000574 <__aeabi_i2d>
 8013b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b72:	4b30      	ldr	r3, [pc, #192]	; (8013c34 <__ieee754_pow+0x73c>)
 8013b74:	4413      	add	r3, r2
 8013b76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b7a:	4606      	mov	r6, r0
 8013b7c:	460f      	mov	r7, r1
 8013b7e:	4622      	mov	r2, r4
 8013b80:	462b      	mov	r3, r5
 8013b82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b86:	f7ec fba9 	bl	80002dc <__adddf3>
 8013b8a:	4642      	mov	r2, r8
 8013b8c:	464b      	mov	r3, r9
 8013b8e:	f7ec fba5 	bl	80002dc <__adddf3>
 8013b92:	4632      	mov	r2, r6
 8013b94:	463b      	mov	r3, r7
 8013b96:	f7ec fba1 	bl	80002dc <__adddf3>
 8013b9a:	9802      	ldr	r0, [sp, #8]
 8013b9c:	4632      	mov	r2, r6
 8013b9e:	463b      	mov	r3, r7
 8013ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ba4:	f7ec fb98 	bl	80002d8 <__aeabi_dsub>
 8013ba8:	4642      	mov	r2, r8
 8013baa:	464b      	mov	r3, r9
 8013bac:	f7ec fb94 	bl	80002d8 <__aeabi_dsub>
 8013bb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013bb4:	e607      	b.n	80137c6 <__ieee754_pow+0x2ce>
 8013bb6:	f04f 0a01 	mov.w	sl, #1
 8013bba:	e6a5      	b.n	8013908 <__ieee754_pow+0x410>
 8013bbc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013c10 <__ieee754_pow+0x718>
 8013bc0:	e613      	b.n	80137ea <__ieee754_pow+0x2f2>
 8013bc2:	bf00      	nop
 8013bc4:	f3af 8000 	nop.w
 8013bc8:	4a454eef 	.word	0x4a454eef
 8013bcc:	3fca7e28 	.word	0x3fca7e28
 8013bd0:	93c9db65 	.word	0x93c9db65
 8013bd4:	3fcd864a 	.word	0x3fcd864a
 8013bd8:	a91d4101 	.word	0xa91d4101
 8013bdc:	3fd17460 	.word	0x3fd17460
 8013be0:	518f264d 	.word	0x518f264d
 8013be4:	3fd55555 	.word	0x3fd55555
 8013be8:	db6fabff 	.word	0xdb6fabff
 8013bec:	3fdb6db6 	.word	0x3fdb6db6
 8013bf0:	33333303 	.word	0x33333303
 8013bf4:	3fe33333 	.word	0x3fe33333
 8013bf8:	e0000000 	.word	0xe0000000
 8013bfc:	3feec709 	.word	0x3feec709
 8013c00:	dc3a03fd 	.word	0xdc3a03fd
 8013c04:	3feec709 	.word	0x3feec709
 8013c08:	145b01f5 	.word	0x145b01f5
 8013c0c:	be3e2fe0 	.word	0xbe3e2fe0
 8013c10:	00000000 	.word	0x00000000
 8013c14:	3ff00000 	.word	0x3ff00000
 8013c18:	43400000 	.word	0x43400000
 8013c1c:	0003988e 	.word	0x0003988e
 8013c20:	000bb679 	.word	0x000bb679
 8013c24:	08015a18 	.word	0x08015a18
 8013c28:	3ff00000 	.word	0x3ff00000
 8013c2c:	40080000 	.word	0x40080000
 8013c30:	08015a38 	.word	0x08015a38
 8013c34:	08015a28 	.word	0x08015a28
 8013c38:	a3b4      	add	r3, pc, #720	; (adr r3, 8013f0c <__ieee754_pow+0xa14>)
 8013c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c3e:	4640      	mov	r0, r8
 8013c40:	4649      	mov	r1, r9
 8013c42:	f7ec fb4b 	bl	80002dc <__adddf3>
 8013c46:	4622      	mov	r2, r4
 8013c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c4c:	462b      	mov	r3, r5
 8013c4e:	4630      	mov	r0, r6
 8013c50:	4639      	mov	r1, r7
 8013c52:	f7ec fb41 	bl	80002d8 <__aeabi_dsub>
 8013c56:	4602      	mov	r2, r0
 8013c58:	460b      	mov	r3, r1
 8013c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c5e:	f7ec ff83 	bl	8000b68 <__aeabi_dcmpgt>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f47f adfe 	bne.w	8013864 <__ieee754_pow+0x36c>
 8013c68:	4aa3      	ldr	r2, [pc, #652]	; (8013ef8 <__ieee754_pow+0xa00>)
 8013c6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	f340 810a 	ble.w	8013e88 <__ieee754_pow+0x990>
 8013c74:	151b      	asrs	r3, r3, #20
 8013c76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013c7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013c7e:	fa4a f303 	asr.w	r3, sl, r3
 8013c82:	445b      	add	r3, fp
 8013c84:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013c88:	4e9c      	ldr	r6, [pc, #624]	; (8013efc <__ieee754_pow+0xa04>)
 8013c8a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013c8e:	4116      	asrs	r6, r2
 8013c90:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013c94:	2000      	movs	r0, #0
 8013c96:	ea23 0106 	bic.w	r1, r3, r6
 8013c9a:	f1c2 0214 	rsb	r2, r2, #20
 8013c9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013ca2:	fa4a fa02 	asr.w	sl, sl, r2
 8013ca6:	f1bb 0f00 	cmp.w	fp, #0
 8013caa:	4602      	mov	r2, r0
 8013cac:	460b      	mov	r3, r1
 8013cae:	4620      	mov	r0, r4
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	bfb8      	it	lt
 8013cb4:	f1ca 0a00 	rsblt	sl, sl, #0
 8013cb8:	f7ec fb0e 	bl	80002d8 <__aeabi_dsub>
 8013cbc:	e9cd 0100 	strd	r0, r1, [sp]
 8013cc0:	4642      	mov	r2, r8
 8013cc2:	464b      	mov	r3, r9
 8013cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cc8:	f7ec fb08 	bl	80002dc <__adddf3>
 8013ccc:	2000      	movs	r0, #0
 8013cce:	a378      	add	r3, pc, #480	; (adr r3, 8013eb0 <__ieee754_pow+0x9b8>)
 8013cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	460d      	mov	r5, r1
 8013cd8:	f7ec fcb6 	bl	8000648 <__aeabi_dmul>
 8013cdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ce0:	4606      	mov	r6, r0
 8013ce2:	460f      	mov	r7, r1
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	4629      	mov	r1, r5
 8013ce8:	f7ec faf6 	bl	80002d8 <__aeabi_dsub>
 8013cec:	4602      	mov	r2, r0
 8013cee:	460b      	mov	r3, r1
 8013cf0:	4640      	mov	r0, r8
 8013cf2:	4649      	mov	r1, r9
 8013cf4:	f7ec faf0 	bl	80002d8 <__aeabi_dsub>
 8013cf8:	a36f      	add	r3, pc, #444	; (adr r3, 8013eb8 <__ieee754_pow+0x9c0>)
 8013cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfe:	f7ec fca3 	bl	8000648 <__aeabi_dmul>
 8013d02:	a36f      	add	r3, pc, #444	; (adr r3, 8013ec0 <__ieee754_pow+0x9c8>)
 8013d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d08:	4680      	mov	r8, r0
 8013d0a:	4689      	mov	r9, r1
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	4629      	mov	r1, r5
 8013d10:	f7ec fc9a 	bl	8000648 <__aeabi_dmul>
 8013d14:	4602      	mov	r2, r0
 8013d16:	460b      	mov	r3, r1
 8013d18:	4640      	mov	r0, r8
 8013d1a:	4649      	mov	r1, r9
 8013d1c:	f7ec fade 	bl	80002dc <__adddf3>
 8013d20:	4604      	mov	r4, r0
 8013d22:	460d      	mov	r5, r1
 8013d24:	4602      	mov	r2, r0
 8013d26:	460b      	mov	r3, r1
 8013d28:	4630      	mov	r0, r6
 8013d2a:	4639      	mov	r1, r7
 8013d2c:	f7ec fad6 	bl	80002dc <__adddf3>
 8013d30:	4632      	mov	r2, r6
 8013d32:	463b      	mov	r3, r7
 8013d34:	4680      	mov	r8, r0
 8013d36:	4689      	mov	r9, r1
 8013d38:	f7ec face 	bl	80002d8 <__aeabi_dsub>
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	460b      	mov	r3, r1
 8013d40:	4620      	mov	r0, r4
 8013d42:	4629      	mov	r1, r5
 8013d44:	f7ec fac8 	bl	80002d8 <__aeabi_dsub>
 8013d48:	4642      	mov	r2, r8
 8013d4a:	4606      	mov	r6, r0
 8013d4c:	460f      	mov	r7, r1
 8013d4e:	464b      	mov	r3, r9
 8013d50:	4640      	mov	r0, r8
 8013d52:	4649      	mov	r1, r9
 8013d54:	f7ec fc78 	bl	8000648 <__aeabi_dmul>
 8013d58:	a35b      	add	r3, pc, #364	; (adr r3, 8013ec8 <__ieee754_pow+0x9d0>)
 8013d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5e:	4604      	mov	r4, r0
 8013d60:	460d      	mov	r5, r1
 8013d62:	f7ec fc71 	bl	8000648 <__aeabi_dmul>
 8013d66:	a35a      	add	r3, pc, #360	; (adr r3, 8013ed0 <__ieee754_pow+0x9d8>)
 8013d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6c:	f7ec fab4 	bl	80002d8 <__aeabi_dsub>
 8013d70:	4622      	mov	r2, r4
 8013d72:	462b      	mov	r3, r5
 8013d74:	f7ec fc68 	bl	8000648 <__aeabi_dmul>
 8013d78:	a357      	add	r3, pc, #348	; (adr r3, 8013ed8 <__ieee754_pow+0x9e0>)
 8013d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7e:	f7ec faad 	bl	80002dc <__adddf3>
 8013d82:	4622      	mov	r2, r4
 8013d84:	462b      	mov	r3, r5
 8013d86:	f7ec fc5f 	bl	8000648 <__aeabi_dmul>
 8013d8a:	a355      	add	r3, pc, #340	; (adr r3, 8013ee0 <__ieee754_pow+0x9e8>)
 8013d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d90:	f7ec faa2 	bl	80002d8 <__aeabi_dsub>
 8013d94:	4622      	mov	r2, r4
 8013d96:	462b      	mov	r3, r5
 8013d98:	f7ec fc56 	bl	8000648 <__aeabi_dmul>
 8013d9c:	a352      	add	r3, pc, #328	; (adr r3, 8013ee8 <__ieee754_pow+0x9f0>)
 8013d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da2:	f7ec fa9b 	bl	80002dc <__adddf3>
 8013da6:	4622      	mov	r2, r4
 8013da8:	462b      	mov	r3, r5
 8013daa:	f7ec fc4d 	bl	8000648 <__aeabi_dmul>
 8013dae:	4602      	mov	r2, r0
 8013db0:	460b      	mov	r3, r1
 8013db2:	4640      	mov	r0, r8
 8013db4:	4649      	mov	r1, r9
 8013db6:	f7ec fa8f 	bl	80002d8 <__aeabi_dsub>
 8013dba:	4604      	mov	r4, r0
 8013dbc:	460d      	mov	r5, r1
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	4649      	mov	r1, r9
 8013dc6:	f7ec fc3f 	bl	8000648 <__aeabi_dmul>
 8013dca:	2200      	movs	r2, #0
 8013dcc:	e9cd 0100 	strd	r0, r1, [sp]
 8013dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	4629      	mov	r1, r5
 8013dd8:	f7ec fa7e 	bl	80002d8 <__aeabi_dsub>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	460b      	mov	r3, r1
 8013de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013de4:	f7ec fd5a 	bl	800089c <__aeabi_ddiv>
 8013de8:	4632      	mov	r2, r6
 8013dea:	4604      	mov	r4, r0
 8013dec:	460d      	mov	r5, r1
 8013dee:	463b      	mov	r3, r7
 8013df0:	4640      	mov	r0, r8
 8013df2:	4649      	mov	r1, r9
 8013df4:	f7ec fc28 	bl	8000648 <__aeabi_dmul>
 8013df8:	4632      	mov	r2, r6
 8013dfa:	463b      	mov	r3, r7
 8013dfc:	f7ec fa6e 	bl	80002dc <__adddf3>
 8013e00:	4602      	mov	r2, r0
 8013e02:	460b      	mov	r3, r1
 8013e04:	4620      	mov	r0, r4
 8013e06:	4629      	mov	r1, r5
 8013e08:	f7ec fa66 	bl	80002d8 <__aeabi_dsub>
 8013e0c:	4642      	mov	r2, r8
 8013e0e:	464b      	mov	r3, r9
 8013e10:	f7ec fa62 	bl	80002d8 <__aeabi_dsub>
 8013e14:	4602      	mov	r2, r0
 8013e16:	460b      	mov	r3, r1
 8013e18:	2000      	movs	r0, #0
 8013e1a:	4939      	ldr	r1, [pc, #228]	; (8013f00 <__ieee754_pow+0xa08>)
 8013e1c:	f7ec fa5c 	bl	80002d8 <__aeabi_dsub>
 8013e20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013e24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013e28:	4602      	mov	r2, r0
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	da2f      	bge.n	8013e8e <__ieee754_pow+0x996>
 8013e2e:	4650      	mov	r0, sl
 8013e30:	ec43 2b10 	vmov	d0, r2, r3
 8013e34:	f000 f9c0 	bl	80141b8 <scalbn>
 8013e38:	ec51 0b10 	vmov	r0, r1, d0
 8013e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e40:	f7ff bbf1 	b.w	8013626 <__ieee754_pow+0x12e>
 8013e44:	4b2f      	ldr	r3, [pc, #188]	; (8013f04 <__ieee754_pow+0xa0c>)
 8013e46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013e4a:	429e      	cmp	r6, r3
 8013e4c:	f77f af0c 	ble.w	8013c68 <__ieee754_pow+0x770>
 8013e50:	4b2d      	ldr	r3, [pc, #180]	; (8013f08 <__ieee754_pow+0xa10>)
 8013e52:	440b      	add	r3, r1
 8013e54:	4303      	orrs	r3, r0
 8013e56:	d00b      	beq.n	8013e70 <__ieee754_pow+0x978>
 8013e58:	a325      	add	r3, pc, #148	; (adr r3, 8013ef0 <__ieee754_pow+0x9f8>)
 8013e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e62:	f7ec fbf1 	bl	8000648 <__aeabi_dmul>
 8013e66:	a322      	add	r3, pc, #136	; (adr r3, 8013ef0 <__ieee754_pow+0x9f8>)
 8013e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e6c:	f7ff bbdb 	b.w	8013626 <__ieee754_pow+0x12e>
 8013e70:	4622      	mov	r2, r4
 8013e72:	462b      	mov	r3, r5
 8013e74:	f7ec fa30 	bl	80002d8 <__aeabi_dsub>
 8013e78:	4642      	mov	r2, r8
 8013e7a:	464b      	mov	r3, r9
 8013e7c:	f7ec fe6a 	bl	8000b54 <__aeabi_dcmpge>
 8013e80:	2800      	cmp	r0, #0
 8013e82:	f43f aef1 	beq.w	8013c68 <__ieee754_pow+0x770>
 8013e86:	e7e7      	b.n	8013e58 <__ieee754_pow+0x960>
 8013e88:	f04f 0a00 	mov.w	sl, #0
 8013e8c:	e718      	b.n	8013cc0 <__ieee754_pow+0x7c8>
 8013e8e:	4621      	mov	r1, r4
 8013e90:	e7d4      	b.n	8013e3c <__ieee754_pow+0x944>
 8013e92:	2000      	movs	r0, #0
 8013e94:	491a      	ldr	r1, [pc, #104]	; (8013f00 <__ieee754_pow+0xa08>)
 8013e96:	f7ff bb8f 	b.w	80135b8 <__ieee754_pow+0xc0>
 8013e9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e9e:	f7ff bb8b 	b.w	80135b8 <__ieee754_pow+0xc0>
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	4639      	mov	r1, r7
 8013ea6:	f7ff bb87 	b.w	80135b8 <__ieee754_pow+0xc0>
 8013eaa:	4693      	mov	fp, r2
 8013eac:	f7ff bb98 	b.w	80135e0 <__ieee754_pow+0xe8>
 8013eb0:	00000000 	.word	0x00000000
 8013eb4:	3fe62e43 	.word	0x3fe62e43
 8013eb8:	fefa39ef 	.word	0xfefa39ef
 8013ebc:	3fe62e42 	.word	0x3fe62e42
 8013ec0:	0ca86c39 	.word	0x0ca86c39
 8013ec4:	be205c61 	.word	0xbe205c61
 8013ec8:	72bea4d0 	.word	0x72bea4d0
 8013ecc:	3e663769 	.word	0x3e663769
 8013ed0:	c5d26bf1 	.word	0xc5d26bf1
 8013ed4:	3ebbbd41 	.word	0x3ebbbd41
 8013ed8:	af25de2c 	.word	0xaf25de2c
 8013edc:	3f11566a 	.word	0x3f11566a
 8013ee0:	16bebd93 	.word	0x16bebd93
 8013ee4:	3f66c16c 	.word	0x3f66c16c
 8013ee8:	5555553e 	.word	0x5555553e
 8013eec:	3fc55555 	.word	0x3fc55555
 8013ef0:	c2f8f359 	.word	0xc2f8f359
 8013ef4:	01a56e1f 	.word	0x01a56e1f
 8013ef8:	3fe00000 	.word	0x3fe00000
 8013efc:	000fffff 	.word	0x000fffff
 8013f00:	3ff00000 	.word	0x3ff00000
 8013f04:	4090cbff 	.word	0x4090cbff
 8013f08:	3f6f3400 	.word	0x3f6f3400
 8013f0c:	652b82fe 	.word	0x652b82fe
 8013f10:	3c971547 	.word	0x3c971547

08013f14 <__ieee754_sqrt>:
 8013f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f18:	4955      	ldr	r1, [pc, #340]	; (8014070 <__ieee754_sqrt+0x15c>)
 8013f1a:	ec55 4b10 	vmov	r4, r5, d0
 8013f1e:	43a9      	bics	r1, r5
 8013f20:	462b      	mov	r3, r5
 8013f22:	462a      	mov	r2, r5
 8013f24:	d112      	bne.n	8013f4c <__ieee754_sqrt+0x38>
 8013f26:	ee10 2a10 	vmov	r2, s0
 8013f2a:	ee10 0a10 	vmov	r0, s0
 8013f2e:	4629      	mov	r1, r5
 8013f30:	f7ec fb8a 	bl	8000648 <__aeabi_dmul>
 8013f34:	4602      	mov	r2, r0
 8013f36:	460b      	mov	r3, r1
 8013f38:	4620      	mov	r0, r4
 8013f3a:	4629      	mov	r1, r5
 8013f3c:	f7ec f9ce 	bl	80002dc <__adddf3>
 8013f40:	4604      	mov	r4, r0
 8013f42:	460d      	mov	r5, r1
 8013f44:	ec45 4b10 	vmov	d0, r4, r5
 8013f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f4c:	2d00      	cmp	r5, #0
 8013f4e:	ee10 0a10 	vmov	r0, s0
 8013f52:	4621      	mov	r1, r4
 8013f54:	dc0f      	bgt.n	8013f76 <__ieee754_sqrt+0x62>
 8013f56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013f5a:	4330      	orrs	r0, r6
 8013f5c:	d0f2      	beq.n	8013f44 <__ieee754_sqrt+0x30>
 8013f5e:	b155      	cbz	r5, 8013f76 <__ieee754_sqrt+0x62>
 8013f60:	ee10 2a10 	vmov	r2, s0
 8013f64:	4620      	mov	r0, r4
 8013f66:	4629      	mov	r1, r5
 8013f68:	f7ec f9b6 	bl	80002d8 <__aeabi_dsub>
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	460b      	mov	r3, r1
 8013f70:	f7ec fc94 	bl	800089c <__aeabi_ddiv>
 8013f74:	e7e4      	b.n	8013f40 <__ieee754_sqrt+0x2c>
 8013f76:	151b      	asrs	r3, r3, #20
 8013f78:	d073      	beq.n	8014062 <__ieee754_sqrt+0x14e>
 8013f7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013f7e:	07dd      	lsls	r5, r3, #31
 8013f80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013f84:	bf48      	it	mi
 8013f86:	0fc8      	lsrmi	r0, r1, #31
 8013f88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013f8c:	bf44      	itt	mi
 8013f8e:	0049      	lslmi	r1, r1, #1
 8013f90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013f94:	2500      	movs	r5, #0
 8013f96:	1058      	asrs	r0, r3, #1
 8013f98:	0fcb      	lsrs	r3, r1, #31
 8013f9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013f9e:	0049      	lsls	r1, r1, #1
 8013fa0:	2316      	movs	r3, #22
 8013fa2:	462c      	mov	r4, r5
 8013fa4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013fa8:	19a7      	adds	r7, r4, r6
 8013faa:	4297      	cmp	r7, r2
 8013fac:	bfde      	ittt	le
 8013fae:	19bc      	addle	r4, r7, r6
 8013fb0:	1bd2      	suble	r2, r2, r7
 8013fb2:	19ad      	addle	r5, r5, r6
 8013fb4:	0fcf      	lsrs	r7, r1, #31
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013fbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013fc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013fc4:	d1f0      	bne.n	8013fa8 <__ieee754_sqrt+0x94>
 8013fc6:	f04f 0c20 	mov.w	ip, #32
 8013fca:	469e      	mov	lr, r3
 8013fcc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013fd0:	42a2      	cmp	r2, r4
 8013fd2:	eb06 070e 	add.w	r7, r6, lr
 8013fd6:	dc02      	bgt.n	8013fde <__ieee754_sqrt+0xca>
 8013fd8:	d112      	bne.n	8014000 <__ieee754_sqrt+0xec>
 8013fda:	428f      	cmp	r7, r1
 8013fdc:	d810      	bhi.n	8014000 <__ieee754_sqrt+0xec>
 8013fde:	2f00      	cmp	r7, #0
 8013fe0:	eb07 0e06 	add.w	lr, r7, r6
 8013fe4:	da42      	bge.n	801406c <__ieee754_sqrt+0x158>
 8013fe6:	f1be 0f00 	cmp.w	lr, #0
 8013fea:	db3f      	blt.n	801406c <__ieee754_sqrt+0x158>
 8013fec:	f104 0801 	add.w	r8, r4, #1
 8013ff0:	1b12      	subs	r2, r2, r4
 8013ff2:	428f      	cmp	r7, r1
 8013ff4:	bf88      	it	hi
 8013ff6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013ffa:	1bc9      	subs	r1, r1, r7
 8013ffc:	4433      	add	r3, r6
 8013ffe:	4644      	mov	r4, r8
 8014000:	0052      	lsls	r2, r2, #1
 8014002:	f1bc 0c01 	subs.w	ip, ip, #1
 8014006:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801400a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801400e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014012:	d1dd      	bne.n	8013fd0 <__ieee754_sqrt+0xbc>
 8014014:	430a      	orrs	r2, r1
 8014016:	d006      	beq.n	8014026 <__ieee754_sqrt+0x112>
 8014018:	1c5c      	adds	r4, r3, #1
 801401a:	bf13      	iteet	ne
 801401c:	3301      	addne	r3, #1
 801401e:	3501      	addeq	r5, #1
 8014020:	4663      	moveq	r3, ip
 8014022:	f023 0301 	bicne.w	r3, r3, #1
 8014026:	106a      	asrs	r2, r5, #1
 8014028:	085b      	lsrs	r3, r3, #1
 801402a:	07e9      	lsls	r1, r5, #31
 801402c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014030:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014034:	bf48      	it	mi
 8014036:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801403a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801403e:	461c      	mov	r4, r3
 8014040:	e780      	b.n	8013f44 <__ieee754_sqrt+0x30>
 8014042:	0aca      	lsrs	r2, r1, #11
 8014044:	3815      	subs	r0, #21
 8014046:	0549      	lsls	r1, r1, #21
 8014048:	2a00      	cmp	r2, #0
 801404a:	d0fa      	beq.n	8014042 <__ieee754_sqrt+0x12e>
 801404c:	02d6      	lsls	r6, r2, #11
 801404e:	d50a      	bpl.n	8014066 <__ieee754_sqrt+0x152>
 8014050:	f1c3 0420 	rsb	r4, r3, #32
 8014054:	fa21 f404 	lsr.w	r4, r1, r4
 8014058:	1e5d      	subs	r5, r3, #1
 801405a:	4099      	lsls	r1, r3
 801405c:	4322      	orrs	r2, r4
 801405e:	1b43      	subs	r3, r0, r5
 8014060:	e78b      	b.n	8013f7a <__ieee754_sqrt+0x66>
 8014062:	4618      	mov	r0, r3
 8014064:	e7f0      	b.n	8014048 <__ieee754_sqrt+0x134>
 8014066:	0052      	lsls	r2, r2, #1
 8014068:	3301      	adds	r3, #1
 801406a:	e7ef      	b.n	801404c <__ieee754_sqrt+0x138>
 801406c:	46a0      	mov	r8, r4
 801406e:	e7bf      	b.n	8013ff0 <__ieee754_sqrt+0xdc>
 8014070:	7ff00000 	.word	0x7ff00000

08014074 <fabs>:
 8014074:	ec51 0b10 	vmov	r0, r1, d0
 8014078:	ee10 2a10 	vmov	r2, s0
 801407c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014080:	ec43 2b10 	vmov	d0, r2, r3
 8014084:	4770      	bx	lr

08014086 <finite>:
 8014086:	ee10 3a90 	vmov	r3, s1
 801408a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801408e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014092:	0fc0      	lsrs	r0, r0, #31
 8014094:	4770      	bx	lr

08014096 <matherr>:
 8014096:	2000      	movs	r0, #0
 8014098:	4770      	bx	lr
 801409a:	0000      	movs	r0, r0
 801409c:	0000      	movs	r0, r0
	...

080140a0 <nan>:
 80140a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80140a8 <nan+0x8>
 80140a4:	4770      	bx	lr
 80140a6:	bf00      	nop
 80140a8:	00000000 	.word	0x00000000
 80140ac:	7ff80000 	.word	0x7ff80000

080140b0 <rint>:
 80140b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140b2:	ec51 0b10 	vmov	r0, r1, d0
 80140b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80140ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80140be:	2e13      	cmp	r6, #19
 80140c0:	460b      	mov	r3, r1
 80140c2:	ee10 4a10 	vmov	r4, s0
 80140c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80140ca:	dc56      	bgt.n	801417a <rint+0xca>
 80140cc:	2e00      	cmp	r6, #0
 80140ce:	da2b      	bge.n	8014128 <rint+0x78>
 80140d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80140d4:	4302      	orrs	r2, r0
 80140d6:	d023      	beq.n	8014120 <rint+0x70>
 80140d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80140dc:	4302      	orrs	r2, r0
 80140de:	4254      	negs	r4, r2
 80140e0:	4314      	orrs	r4, r2
 80140e2:	0c4b      	lsrs	r3, r1, #17
 80140e4:	0b24      	lsrs	r4, r4, #12
 80140e6:	045b      	lsls	r3, r3, #17
 80140e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80140ec:	ea44 0103 	orr.w	r1, r4, r3
 80140f0:	460b      	mov	r3, r1
 80140f2:	492f      	ldr	r1, [pc, #188]	; (80141b0 <rint+0x100>)
 80140f4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80140f8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80140fc:	4602      	mov	r2, r0
 80140fe:	4639      	mov	r1, r7
 8014100:	4630      	mov	r0, r6
 8014102:	f7ec f8eb 	bl	80002dc <__adddf3>
 8014106:	e9cd 0100 	strd	r0, r1, [sp]
 801410a:	463b      	mov	r3, r7
 801410c:	4632      	mov	r2, r6
 801410e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014112:	f7ec f8e1 	bl	80002d8 <__aeabi_dsub>
 8014116:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801411a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801411e:	4639      	mov	r1, r7
 8014120:	ec41 0b10 	vmov	d0, r0, r1
 8014124:	b003      	add	sp, #12
 8014126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014128:	4a22      	ldr	r2, [pc, #136]	; (80141b4 <rint+0x104>)
 801412a:	4132      	asrs	r2, r6
 801412c:	ea01 0702 	and.w	r7, r1, r2
 8014130:	4307      	orrs	r7, r0
 8014132:	d0f5      	beq.n	8014120 <rint+0x70>
 8014134:	0852      	lsrs	r2, r2, #1
 8014136:	4011      	ands	r1, r2
 8014138:	430c      	orrs	r4, r1
 801413a:	d00b      	beq.n	8014154 <rint+0xa4>
 801413c:	ea23 0202 	bic.w	r2, r3, r2
 8014140:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014144:	2e13      	cmp	r6, #19
 8014146:	fa43 f306 	asr.w	r3, r3, r6
 801414a:	bf0c      	ite	eq
 801414c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014150:	2400      	movne	r4, #0
 8014152:	4313      	orrs	r3, r2
 8014154:	4916      	ldr	r1, [pc, #88]	; (80141b0 <rint+0x100>)
 8014156:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801415a:	4622      	mov	r2, r4
 801415c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014160:	4620      	mov	r0, r4
 8014162:	4629      	mov	r1, r5
 8014164:	f7ec f8ba 	bl	80002dc <__adddf3>
 8014168:	e9cd 0100 	strd	r0, r1, [sp]
 801416c:	4622      	mov	r2, r4
 801416e:	462b      	mov	r3, r5
 8014170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014174:	f7ec f8b0 	bl	80002d8 <__aeabi_dsub>
 8014178:	e7d2      	b.n	8014120 <rint+0x70>
 801417a:	2e33      	cmp	r6, #51	; 0x33
 801417c:	dd07      	ble.n	801418e <rint+0xde>
 801417e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014182:	d1cd      	bne.n	8014120 <rint+0x70>
 8014184:	ee10 2a10 	vmov	r2, s0
 8014188:	f7ec f8a8 	bl	80002dc <__adddf3>
 801418c:	e7c8      	b.n	8014120 <rint+0x70>
 801418e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014196:	40f2      	lsrs	r2, r6
 8014198:	4210      	tst	r0, r2
 801419a:	d0c1      	beq.n	8014120 <rint+0x70>
 801419c:	0852      	lsrs	r2, r2, #1
 801419e:	4210      	tst	r0, r2
 80141a0:	bf1f      	itttt	ne
 80141a2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80141a6:	ea20 0202 	bicne.w	r2, r0, r2
 80141aa:	4134      	asrne	r4, r6
 80141ac:	4314      	orrne	r4, r2
 80141ae:	e7d1      	b.n	8014154 <rint+0xa4>
 80141b0:	08015a48 	.word	0x08015a48
 80141b4:	000fffff 	.word	0x000fffff

080141b8 <scalbn>:
 80141b8:	b570      	push	{r4, r5, r6, lr}
 80141ba:	ec55 4b10 	vmov	r4, r5, d0
 80141be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80141c2:	4606      	mov	r6, r0
 80141c4:	462b      	mov	r3, r5
 80141c6:	b9aa      	cbnz	r2, 80141f4 <scalbn+0x3c>
 80141c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80141cc:	4323      	orrs	r3, r4
 80141ce:	d03b      	beq.n	8014248 <scalbn+0x90>
 80141d0:	4b31      	ldr	r3, [pc, #196]	; (8014298 <scalbn+0xe0>)
 80141d2:	4629      	mov	r1, r5
 80141d4:	2200      	movs	r2, #0
 80141d6:	ee10 0a10 	vmov	r0, s0
 80141da:	f7ec fa35 	bl	8000648 <__aeabi_dmul>
 80141de:	4b2f      	ldr	r3, [pc, #188]	; (801429c <scalbn+0xe4>)
 80141e0:	429e      	cmp	r6, r3
 80141e2:	4604      	mov	r4, r0
 80141e4:	460d      	mov	r5, r1
 80141e6:	da12      	bge.n	801420e <scalbn+0x56>
 80141e8:	a327      	add	r3, pc, #156	; (adr r3, 8014288 <scalbn+0xd0>)
 80141ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ee:	f7ec fa2b 	bl	8000648 <__aeabi_dmul>
 80141f2:	e009      	b.n	8014208 <scalbn+0x50>
 80141f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80141f8:	428a      	cmp	r2, r1
 80141fa:	d10c      	bne.n	8014216 <scalbn+0x5e>
 80141fc:	ee10 2a10 	vmov	r2, s0
 8014200:	4620      	mov	r0, r4
 8014202:	4629      	mov	r1, r5
 8014204:	f7ec f86a 	bl	80002dc <__adddf3>
 8014208:	4604      	mov	r4, r0
 801420a:	460d      	mov	r5, r1
 801420c:	e01c      	b.n	8014248 <scalbn+0x90>
 801420e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014212:	460b      	mov	r3, r1
 8014214:	3a36      	subs	r2, #54	; 0x36
 8014216:	4432      	add	r2, r6
 8014218:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801421c:	428a      	cmp	r2, r1
 801421e:	dd0b      	ble.n	8014238 <scalbn+0x80>
 8014220:	ec45 4b11 	vmov	d1, r4, r5
 8014224:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014290 <scalbn+0xd8>
 8014228:	f000 f9f0 	bl	801460c <copysign>
 801422c:	a318      	add	r3, pc, #96	; (adr r3, 8014290 <scalbn+0xd8>)
 801422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014232:	ec51 0b10 	vmov	r0, r1, d0
 8014236:	e7da      	b.n	80141ee <scalbn+0x36>
 8014238:	2a00      	cmp	r2, #0
 801423a:	dd08      	ble.n	801424e <scalbn+0x96>
 801423c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014240:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014244:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014248:	ec45 4b10 	vmov	d0, r4, r5
 801424c:	bd70      	pop	{r4, r5, r6, pc}
 801424e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014252:	da0d      	bge.n	8014270 <scalbn+0xb8>
 8014254:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014258:	429e      	cmp	r6, r3
 801425a:	ec45 4b11 	vmov	d1, r4, r5
 801425e:	dce1      	bgt.n	8014224 <scalbn+0x6c>
 8014260:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014288 <scalbn+0xd0>
 8014264:	f000 f9d2 	bl	801460c <copysign>
 8014268:	a307      	add	r3, pc, #28	; (adr r3, 8014288 <scalbn+0xd0>)
 801426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426e:	e7e0      	b.n	8014232 <scalbn+0x7a>
 8014270:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014274:	3236      	adds	r2, #54	; 0x36
 8014276:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801427a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801427e:	4620      	mov	r0, r4
 8014280:	4629      	mov	r1, r5
 8014282:	2200      	movs	r2, #0
 8014284:	4b06      	ldr	r3, [pc, #24]	; (80142a0 <scalbn+0xe8>)
 8014286:	e7b2      	b.n	80141ee <scalbn+0x36>
 8014288:	c2f8f359 	.word	0xc2f8f359
 801428c:	01a56e1f 	.word	0x01a56e1f
 8014290:	8800759c 	.word	0x8800759c
 8014294:	7e37e43c 	.word	0x7e37e43c
 8014298:	43500000 	.word	0x43500000
 801429c:	ffff3cb0 	.word	0xffff3cb0
 80142a0:	3c900000 	.word	0x3c900000
 80142a4:	00000000 	.word	0x00000000

080142a8 <__ieee754_log>:
 80142a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ac:	ec51 0b10 	vmov	r0, r1, d0
 80142b0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80142b4:	b087      	sub	sp, #28
 80142b6:	460d      	mov	r5, r1
 80142b8:	da27      	bge.n	801430a <__ieee754_log+0x62>
 80142ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80142be:	4303      	orrs	r3, r0
 80142c0:	ee10 2a10 	vmov	r2, s0
 80142c4:	d10a      	bne.n	80142dc <__ieee754_log+0x34>
 80142c6:	49cc      	ldr	r1, [pc, #816]	; (80145f8 <__ieee754_log+0x350>)
 80142c8:	2200      	movs	r2, #0
 80142ca:	2300      	movs	r3, #0
 80142cc:	2000      	movs	r0, #0
 80142ce:	f7ec fae5 	bl	800089c <__aeabi_ddiv>
 80142d2:	ec41 0b10 	vmov	d0, r0, r1
 80142d6:	b007      	add	sp, #28
 80142d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142dc:	2900      	cmp	r1, #0
 80142de:	da05      	bge.n	80142ec <__ieee754_log+0x44>
 80142e0:	460b      	mov	r3, r1
 80142e2:	f7eb fff9 	bl	80002d8 <__aeabi_dsub>
 80142e6:	2200      	movs	r2, #0
 80142e8:	2300      	movs	r3, #0
 80142ea:	e7f0      	b.n	80142ce <__ieee754_log+0x26>
 80142ec:	4bc3      	ldr	r3, [pc, #780]	; (80145fc <__ieee754_log+0x354>)
 80142ee:	2200      	movs	r2, #0
 80142f0:	f7ec f9aa 	bl	8000648 <__aeabi_dmul>
 80142f4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80142f8:	460d      	mov	r5, r1
 80142fa:	4ac1      	ldr	r2, [pc, #772]	; (8014600 <__ieee754_log+0x358>)
 80142fc:	4295      	cmp	r5, r2
 80142fe:	dd06      	ble.n	801430e <__ieee754_log+0x66>
 8014300:	4602      	mov	r2, r0
 8014302:	460b      	mov	r3, r1
 8014304:	f7eb ffea 	bl	80002dc <__adddf3>
 8014308:	e7e3      	b.n	80142d2 <__ieee754_log+0x2a>
 801430a:	2300      	movs	r3, #0
 801430c:	e7f5      	b.n	80142fa <__ieee754_log+0x52>
 801430e:	152c      	asrs	r4, r5, #20
 8014310:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014314:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014318:	441c      	add	r4, r3
 801431a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801431e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8014322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014326:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801432a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801432e:	ea42 0105 	orr.w	r1, r2, r5
 8014332:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8014336:	2200      	movs	r2, #0
 8014338:	4bb2      	ldr	r3, [pc, #712]	; (8014604 <__ieee754_log+0x35c>)
 801433a:	f7eb ffcd 	bl	80002d8 <__aeabi_dsub>
 801433e:	1cab      	adds	r3, r5, #2
 8014340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014344:	2b02      	cmp	r3, #2
 8014346:	4682      	mov	sl, r0
 8014348:	468b      	mov	fp, r1
 801434a:	f04f 0200 	mov.w	r2, #0
 801434e:	dc53      	bgt.n	80143f8 <__ieee754_log+0x150>
 8014350:	2300      	movs	r3, #0
 8014352:	f7ec fbe1 	bl	8000b18 <__aeabi_dcmpeq>
 8014356:	b1d0      	cbz	r0, 801438e <__ieee754_log+0xe6>
 8014358:	2c00      	cmp	r4, #0
 801435a:	f000 8120 	beq.w	801459e <__ieee754_log+0x2f6>
 801435e:	4620      	mov	r0, r4
 8014360:	f7ec f908 	bl	8000574 <__aeabi_i2d>
 8014364:	a390      	add	r3, pc, #576	; (adr r3, 80145a8 <__ieee754_log+0x300>)
 8014366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801436a:	4606      	mov	r6, r0
 801436c:	460f      	mov	r7, r1
 801436e:	f7ec f96b 	bl	8000648 <__aeabi_dmul>
 8014372:	a38f      	add	r3, pc, #572	; (adr r3, 80145b0 <__ieee754_log+0x308>)
 8014374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014378:	4604      	mov	r4, r0
 801437a:	460d      	mov	r5, r1
 801437c:	4630      	mov	r0, r6
 801437e:	4639      	mov	r1, r7
 8014380:	f7ec f962 	bl	8000648 <__aeabi_dmul>
 8014384:	4602      	mov	r2, r0
 8014386:	460b      	mov	r3, r1
 8014388:	4620      	mov	r0, r4
 801438a:	4629      	mov	r1, r5
 801438c:	e7ba      	b.n	8014304 <__ieee754_log+0x5c>
 801438e:	a38a      	add	r3, pc, #552	; (adr r3, 80145b8 <__ieee754_log+0x310>)
 8014390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014394:	4650      	mov	r0, sl
 8014396:	4659      	mov	r1, fp
 8014398:	f7ec f956 	bl	8000648 <__aeabi_dmul>
 801439c:	4602      	mov	r2, r0
 801439e:	460b      	mov	r3, r1
 80143a0:	2000      	movs	r0, #0
 80143a2:	4999      	ldr	r1, [pc, #612]	; (8014608 <__ieee754_log+0x360>)
 80143a4:	f7eb ff98 	bl	80002d8 <__aeabi_dsub>
 80143a8:	4652      	mov	r2, sl
 80143aa:	4606      	mov	r6, r0
 80143ac:	460f      	mov	r7, r1
 80143ae:	465b      	mov	r3, fp
 80143b0:	4650      	mov	r0, sl
 80143b2:	4659      	mov	r1, fp
 80143b4:	f7ec f948 	bl	8000648 <__aeabi_dmul>
 80143b8:	4602      	mov	r2, r0
 80143ba:	460b      	mov	r3, r1
 80143bc:	4630      	mov	r0, r6
 80143be:	4639      	mov	r1, r7
 80143c0:	f7ec f942 	bl	8000648 <__aeabi_dmul>
 80143c4:	4606      	mov	r6, r0
 80143c6:	460f      	mov	r7, r1
 80143c8:	b914      	cbnz	r4, 80143d0 <__ieee754_log+0x128>
 80143ca:	4632      	mov	r2, r6
 80143cc:	463b      	mov	r3, r7
 80143ce:	e0a0      	b.n	8014512 <__ieee754_log+0x26a>
 80143d0:	4620      	mov	r0, r4
 80143d2:	f7ec f8cf 	bl	8000574 <__aeabi_i2d>
 80143d6:	a374      	add	r3, pc, #464	; (adr r3, 80145a8 <__ieee754_log+0x300>)
 80143d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143dc:	4680      	mov	r8, r0
 80143de:	4689      	mov	r9, r1
 80143e0:	f7ec f932 	bl	8000648 <__aeabi_dmul>
 80143e4:	a372      	add	r3, pc, #456	; (adr r3, 80145b0 <__ieee754_log+0x308>)
 80143e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ea:	4604      	mov	r4, r0
 80143ec:	460d      	mov	r5, r1
 80143ee:	4640      	mov	r0, r8
 80143f0:	4649      	mov	r1, r9
 80143f2:	f7ec f929 	bl	8000648 <__aeabi_dmul>
 80143f6:	e0a5      	b.n	8014544 <__ieee754_log+0x29c>
 80143f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80143fc:	f7eb ff6e 	bl	80002dc <__adddf3>
 8014400:	4602      	mov	r2, r0
 8014402:	460b      	mov	r3, r1
 8014404:	4650      	mov	r0, sl
 8014406:	4659      	mov	r1, fp
 8014408:	f7ec fa48 	bl	800089c <__aeabi_ddiv>
 801440c:	e9cd 0100 	strd	r0, r1, [sp]
 8014410:	4620      	mov	r0, r4
 8014412:	f7ec f8af 	bl	8000574 <__aeabi_i2d>
 8014416:	e9dd 2300 	ldrd	r2, r3, [sp]
 801441a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801441e:	4610      	mov	r0, r2
 8014420:	4619      	mov	r1, r3
 8014422:	f7ec f911 	bl	8000648 <__aeabi_dmul>
 8014426:	4602      	mov	r2, r0
 8014428:	460b      	mov	r3, r1
 801442a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801442e:	f7ec f90b 	bl	8000648 <__aeabi_dmul>
 8014432:	a363      	add	r3, pc, #396	; (adr r3, 80145c0 <__ieee754_log+0x318>)
 8014434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014438:	4680      	mov	r8, r0
 801443a:	4689      	mov	r9, r1
 801443c:	f7ec f904 	bl	8000648 <__aeabi_dmul>
 8014440:	a361      	add	r3, pc, #388	; (adr r3, 80145c8 <__ieee754_log+0x320>)
 8014442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014446:	f7eb ff49 	bl	80002dc <__adddf3>
 801444a:	4642      	mov	r2, r8
 801444c:	464b      	mov	r3, r9
 801444e:	f7ec f8fb 	bl	8000648 <__aeabi_dmul>
 8014452:	a35f      	add	r3, pc, #380	; (adr r3, 80145d0 <__ieee754_log+0x328>)
 8014454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014458:	f7eb ff40 	bl	80002dc <__adddf3>
 801445c:	4642      	mov	r2, r8
 801445e:	464b      	mov	r3, r9
 8014460:	f7ec f8f2 	bl	8000648 <__aeabi_dmul>
 8014464:	a35c      	add	r3, pc, #368	; (adr r3, 80145d8 <__ieee754_log+0x330>)
 8014466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801446a:	f7eb ff37 	bl	80002dc <__adddf3>
 801446e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014472:	f7ec f8e9 	bl	8000648 <__aeabi_dmul>
 8014476:	a35a      	add	r3, pc, #360	; (adr r3, 80145e0 <__ieee754_log+0x338>)
 8014478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014480:	4640      	mov	r0, r8
 8014482:	4649      	mov	r1, r9
 8014484:	f7ec f8e0 	bl	8000648 <__aeabi_dmul>
 8014488:	a357      	add	r3, pc, #348	; (adr r3, 80145e8 <__ieee754_log+0x340>)
 801448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448e:	f7eb ff25 	bl	80002dc <__adddf3>
 8014492:	4642      	mov	r2, r8
 8014494:	464b      	mov	r3, r9
 8014496:	f7ec f8d7 	bl	8000648 <__aeabi_dmul>
 801449a:	a355      	add	r3, pc, #340	; (adr r3, 80145f0 <__ieee754_log+0x348>)
 801449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a0:	f7eb ff1c 	bl	80002dc <__adddf3>
 80144a4:	4642      	mov	r2, r8
 80144a6:	464b      	mov	r3, r9
 80144a8:	f7ec f8ce 	bl	8000648 <__aeabi_dmul>
 80144ac:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80144b0:	4602      	mov	r2, r0
 80144b2:	460b      	mov	r3, r1
 80144b4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80144b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144bc:	f7eb ff0e 	bl	80002dc <__adddf3>
 80144c0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80144c4:	3551      	adds	r5, #81	; 0x51
 80144c6:	4335      	orrs	r5, r6
 80144c8:	2d00      	cmp	r5, #0
 80144ca:	4680      	mov	r8, r0
 80144cc:	4689      	mov	r9, r1
 80144ce:	dd48      	ble.n	8014562 <__ieee754_log+0x2ba>
 80144d0:	2200      	movs	r2, #0
 80144d2:	4b4d      	ldr	r3, [pc, #308]	; (8014608 <__ieee754_log+0x360>)
 80144d4:	4650      	mov	r0, sl
 80144d6:	4659      	mov	r1, fp
 80144d8:	f7ec f8b6 	bl	8000648 <__aeabi_dmul>
 80144dc:	4652      	mov	r2, sl
 80144de:	465b      	mov	r3, fp
 80144e0:	f7ec f8b2 	bl	8000648 <__aeabi_dmul>
 80144e4:	4602      	mov	r2, r0
 80144e6:	460b      	mov	r3, r1
 80144e8:	4606      	mov	r6, r0
 80144ea:	460f      	mov	r7, r1
 80144ec:	4640      	mov	r0, r8
 80144ee:	4649      	mov	r1, r9
 80144f0:	f7eb fef4 	bl	80002dc <__adddf3>
 80144f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144f8:	f7ec f8a6 	bl	8000648 <__aeabi_dmul>
 80144fc:	4680      	mov	r8, r0
 80144fe:	4689      	mov	r9, r1
 8014500:	b964      	cbnz	r4, 801451c <__ieee754_log+0x274>
 8014502:	4602      	mov	r2, r0
 8014504:	460b      	mov	r3, r1
 8014506:	4630      	mov	r0, r6
 8014508:	4639      	mov	r1, r7
 801450a:	f7eb fee5 	bl	80002d8 <__aeabi_dsub>
 801450e:	4602      	mov	r2, r0
 8014510:	460b      	mov	r3, r1
 8014512:	4650      	mov	r0, sl
 8014514:	4659      	mov	r1, fp
 8014516:	f7eb fedf 	bl	80002d8 <__aeabi_dsub>
 801451a:	e6da      	b.n	80142d2 <__ieee754_log+0x2a>
 801451c:	a322      	add	r3, pc, #136	; (adr r3, 80145a8 <__ieee754_log+0x300>)
 801451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014526:	f7ec f88f 	bl	8000648 <__aeabi_dmul>
 801452a:	a321      	add	r3, pc, #132	; (adr r3, 80145b0 <__ieee754_log+0x308>)
 801452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014530:	4604      	mov	r4, r0
 8014532:	460d      	mov	r5, r1
 8014534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014538:	f7ec f886 	bl	8000648 <__aeabi_dmul>
 801453c:	4642      	mov	r2, r8
 801453e:	464b      	mov	r3, r9
 8014540:	f7eb fecc 	bl	80002dc <__adddf3>
 8014544:	4602      	mov	r2, r0
 8014546:	460b      	mov	r3, r1
 8014548:	4630      	mov	r0, r6
 801454a:	4639      	mov	r1, r7
 801454c:	f7eb fec4 	bl	80002d8 <__aeabi_dsub>
 8014550:	4652      	mov	r2, sl
 8014552:	465b      	mov	r3, fp
 8014554:	f7eb fec0 	bl	80002d8 <__aeabi_dsub>
 8014558:	4602      	mov	r2, r0
 801455a:	460b      	mov	r3, r1
 801455c:	4620      	mov	r0, r4
 801455e:	4629      	mov	r1, r5
 8014560:	e7d9      	b.n	8014516 <__ieee754_log+0x26e>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	4650      	mov	r0, sl
 8014568:	4659      	mov	r1, fp
 801456a:	f7eb feb5 	bl	80002d8 <__aeabi_dsub>
 801456e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014572:	f7ec f869 	bl	8000648 <__aeabi_dmul>
 8014576:	4606      	mov	r6, r0
 8014578:	460f      	mov	r7, r1
 801457a:	2c00      	cmp	r4, #0
 801457c:	f43f af25 	beq.w	80143ca <__ieee754_log+0x122>
 8014580:	a309      	add	r3, pc, #36	; (adr r3, 80145a8 <__ieee754_log+0x300>)
 8014582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801458a:	f7ec f85d 	bl	8000648 <__aeabi_dmul>
 801458e:	a308      	add	r3, pc, #32	; (adr r3, 80145b0 <__ieee754_log+0x308>)
 8014590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014594:	4604      	mov	r4, r0
 8014596:	460d      	mov	r5, r1
 8014598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801459c:	e729      	b.n	80143f2 <__ieee754_log+0x14a>
 801459e:	2000      	movs	r0, #0
 80145a0:	2100      	movs	r1, #0
 80145a2:	e696      	b.n	80142d2 <__ieee754_log+0x2a>
 80145a4:	f3af 8000 	nop.w
 80145a8:	fee00000 	.word	0xfee00000
 80145ac:	3fe62e42 	.word	0x3fe62e42
 80145b0:	35793c76 	.word	0x35793c76
 80145b4:	3dea39ef 	.word	0x3dea39ef
 80145b8:	55555555 	.word	0x55555555
 80145bc:	3fd55555 	.word	0x3fd55555
 80145c0:	df3e5244 	.word	0xdf3e5244
 80145c4:	3fc2f112 	.word	0x3fc2f112
 80145c8:	96cb03de 	.word	0x96cb03de
 80145cc:	3fc74664 	.word	0x3fc74664
 80145d0:	94229359 	.word	0x94229359
 80145d4:	3fd24924 	.word	0x3fd24924
 80145d8:	55555593 	.word	0x55555593
 80145dc:	3fe55555 	.word	0x3fe55555
 80145e0:	d078c69f 	.word	0xd078c69f
 80145e4:	3fc39a09 	.word	0x3fc39a09
 80145e8:	1d8e78af 	.word	0x1d8e78af
 80145ec:	3fcc71c5 	.word	0x3fcc71c5
 80145f0:	9997fa04 	.word	0x9997fa04
 80145f4:	3fd99999 	.word	0x3fd99999
 80145f8:	c3500000 	.word	0xc3500000
 80145fc:	43500000 	.word	0x43500000
 8014600:	7fefffff 	.word	0x7fefffff
 8014604:	3ff00000 	.word	0x3ff00000
 8014608:	3fe00000 	.word	0x3fe00000

0801460c <copysign>:
 801460c:	ec51 0b10 	vmov	r0, r1, d0
 8014610:	ee11 0a90 	vmov	r0, s3
 8014614:	ee10 2a10 	vmov	r2, s0
 8014618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801461c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014620:	ea41 0300 	orr.w	r3, r1, r0
 8014624:	ec43 2b10 	vmov	d0, r2, r3
 8014628:	4770      	bx	lr
	...

0801462c <_init>:
 801462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801462e:	bf00      	nop
 8014630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014632:	bc08      	pop	{r3}
 8014634:	469e      	mov	lr, r3
 8014636:	4770      	bx	lr

08014638 <_fini>:
 8014638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801463a:	bf00      	nop
 801463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801463e:	bc08      	pop	{r3}
 8014640:	469e      	mov	lr, r3
 8014642:	4770      	bx	lr
