
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea4  08009ea4  000204dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009ea4  08009ea4  000204dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ea4  08009ea4  000204dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ea8  08009ea8  00019ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004dc  20000000  08009eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200004dc  0800a388  000204dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  0800a388  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231d5  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004864  00000000  00000000  000436e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b58  00000000  00000000  00047f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001910  00000000  00000000  00049aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ed78  00000000  00000000  0004b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ac4b  00000000  00000000  0007a128  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001238c9  00000000  00000000  00094d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b863c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab0  00000000  00000000  001b86b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004dc 	.word	0x200004dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009aa8 	.word	0x08009aa8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004e0 	.word	0x200004e0
 800021c:	08009aa8 	.word	0x08009aa8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	dc01      	bgt.n	80002f2 <DM_DigitCount+0x12>
		return 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	e018      	b.n	8000324 <DM_DigitCount+0x44>
	if(num < 100)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2b63      	cmp	r3, #99	; 0x63
 80002f6:	dc01      	bgt.n	80002fc <DM_DigitCount+0x1c>
		return 2;
 80002f8:	2302      	movs	r3, #2
 80002fa:	e013      	b.n	8000324 <DM_DigitCount+0x44>
	if(num < 1000)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000302:	da01      	bge.n	8000308 <DM_DigitCount+0x28>
		return 3;
 8000304:	2303      	movs	r3, #3
 8000306:	e00d      	b.n	8000324 <DM_DigitCount+0x44>
	if(num < 10000)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f242 720f 	movw	r2, #9999	; 0x270f
 800030e:	4293      	cmp	r3, r2
 8000310:	dc01      	bgt.n	8000316 <DM_DigitCount+0x36>
		return 4;
 8000312:	2304      	movs	r3, #4
 8000314:	e006      	b.n	8000324 <DM_DigitCount+0x44>
	if(num < 100000)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a05      	ldr	r2, [pc, #20]	; (8000330 <DM_DigitCount+0x50>)
 800031a:	4293      	cmp	r3, r2
 800031c:	dc01      	bgt.n	8000322 <DM_DigitCount+0x42>
		return 5;
 800031e:	2305      	movs	r3, #5
 8000320:	e000      	b.n	8000324 <DM_DigitCount+0x44>
	else
		return 0;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	0001869f 	.word	0x0001869f

08000334 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af04      	add	r7, sp, #16
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <DM_RefreshBackgroundLayout+0x7c>)
 800033c:	8818      	ldrh	r0, [r3, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	9302      	str	r3, [sp, #8]
 8000342:	2302      	movs	r3, #2
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2332      	movs	r3, #50	; 0x32
 800034e:	2250      	movs	r2, #80	; 0x50
 8000350:	21c8      	movs	r1, #200	; 0xc8
 8000352:	f007 fb0d 	bl	8007970 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <DM_RefreshBackgroundLayout+0x7c>)
 8000358:	8858      	ldrh	r0, [r3, #2]
 800035a:	2300      	movs	r3, #0
 800035c:	9302      	str	r3, [sp, #8]
 800035e:	2302      	movs	r3, #2
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2332      	movs	r3, #50	; 0x32
 800036a:	2250      	movs	r2, #80	; 0x50
 800036c:	21c8      	movs	r1, #200	; 0xc8
 800036e:	f007 faff 	bl	8007970 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <DM_RefreshBackgroundLayout+0x7c>)
 8000374:	8898      	ldrh	r0, [r3, #4]
 8000376:	2300      	movs	r3, #0
 8000378:	9302      	str	r3, [sp, #8]
 800037a:	2302      	movs	r3, #2
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2332      	movs	r3, #50	; 0x32
 8000386:	2250      	movs	r2, #80	; 0x50
 8000388:	21c8      	movs	r1, #200	; 0xc8
 800038a:	f007 faf1 	bl	8007970 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <DM_RefreshBackgroundLayout+0x7c>)
 8000390:	88d8      	ldrh	r0, [r3, #6]
 8000392:	2300      	movs	r3, #0
 8000394:	9302      	str	r3, [sp, #8]
 8000396:	2302      	movs	r3, #2
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2332      	movs	r3, #50	; 0x32
 80003a2:	2250      	movs	r2, #80	; 0x50
 80003a4:	21c8      	movs	r1, #200	; 0xc8
 80003a6:	f007 fae3 	bl	8007970 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000000 	.word	0x20000000

080003b4 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af02      	add	r7, sp, #8
	  ILI9341_Init();
 80003ba:	f007 fda1 	bl	8007f00 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80003be:	2003      	movs	r0, #3
 80003c0:	f007 fd40 	bl	8007e44 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80003c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80003c8:	f007 ff50 	bl	800826c <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80003cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	2301      	movs	r3, #1
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	2300      	movs	r3, #0
 80003d8:	220a      	movs	r2, #10
 80003da:	210a      	movs	r1, #10
 80003dc:	4803      	ldr	r0, [pc, #12]	; (80003ec <DM_Init+0x38>)
 80003de:	f007 fc31 	bl	8007c44 <ILI9341_Draw_Text>
	  DM_RefreshBackgroundLayout();
 80003e2:	f7ff ffa7 	bl	8000334 <DM_RefreshBackgroundLayout>

}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	08009ac0 	.word	0x08009ac0

080003f0 <DM_RegisterStrings>:
 *
 *
 *
 */
void DM_RegisterStrings()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af02      	add	r7, sp, #8
	int res = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
	res = TM_RegisterString("ONE", 10, 220, 2);
 80003fa:	2302      	movs	r3, #2
 80003fc:	22dc      	movs	r2, #220	; 0xdc
 80003fe:	210a      	movs	r1, #10
 8000400:	4815      	ldr	r0, [pc, #84]	; (8000458 <DM_RegisterStrings+0x68>)
 8000402:	f008 f9b7 	bl	8008774 <TM_RegisterString>
 8000406:	6078      	str	r0, [r7, #4]
	res = TM_RegisterString("TWO", 100, 220, 2);
 8000408:	2302      	movs	r3, #2
 800040a:	22dc      	movs	r2, #220	; 0xdc
 800040c:	2164      	movs	r1, #100	; 0x64
 800040e:	4813      	ldr	r0, [pc, #76]	; (800045c <DM_RegisterStrings+0x6c>)
 8000410:	f008 f9b0 	bl	8008774 <TM_RegisterString>
 8000414:	6078      	str	r0, [r7, #4]
	res = TM_RegisterString("THREE", 175, 220, 2);
 8000416:	2302      	movs	r3, #2
 8000418:	22dc      	movs	r2, #220	; 0xdc
 800041a:	21af      	movs	r1, #175	; 0xaf
 800041c:	4810      	ldr	r0, [pc, #64]	; (8000460 <DM_RegisterStrings+0x70>)
 800041e:	f008 f9a9 	bl	8008774 <TM_RegisterString>
 8000422:	6078      	str	r0, [r7, #4]
	res = TM_RegisterString("FOUR", 260, 220, 2);
 8000424:	2302      	movs	r3, #2
 8000426:	22dc      	movs	r2, #220	; 0xdc
 8000428:	f44f 7182 	mov.w	r1, #260	; 0x104
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <DM_RegisterStrings+0x74>)
 800042e:	f008 f9a1 	bl	8008774 <TM_RegisterString>
 8000432:	6078      	str	r0, [r7, #4]
	if(res < 0)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	da0a      	bge.n	8000450 <DM_RegisterStrings+0x60>
	{
		ILI9341_Draw_Text("Exceeded String Buffer Bounds!", 10, 20, BLACK, 1, WHITE);
 800043a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	2301      	movs	r3, #1
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2300      	movs	r3, #0
 8000446:	2214      	movs	r2, #20
 8000448:	210a      	movs	r1, #10
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <DM_RegisterStrings+0x78>)
 800044c:	f007 fbfa 	bl	8007c44 <ILI9341_Draw_Text>
	}
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	08009ad0 	.word	0x08009ad0
 800045c:	08009ad4 	.word	0x08009ad4
 8000460:	08009ad8 	.word	0x08009ad8
 8000464:	08009ae0 	.word	0x08009ae0
 8000468:	08009ae8 	.word	0x08009ae8

0800046c <DM_AddDigitPadding>:
 *
 *
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	6039      	str	r1, [r7, #0]
 8000476:	80fb      	strh	r3, [r7, #6]
 8000478:	4613      	mov	r3, r2
 800047a:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 800047c:	88bb      	ldrh	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <DM_AddDigitPadding+0x1c>
 8000482:	88bb      	ldrh	r3, [r7, #4]
 8000484:	2b06      	cmp	r3, #6
 8000486:	d901      	bls.n	800048c <DM_AddDigitPadding+0x20>
		return 1;
 8000488:	2301      	movs	r3, #1
 800048a:	e048      	b.n	800051e <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 800048c:	88fb      	ldrh	r3, [r7, #6]
 800048e:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000490:	89fb      	ldrh	r3, [r7, #14]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff24 	bl	80002e0 <DM_DigitCount>
 8000498:	4603      	mov	r3, r0
 800049a:	2b05      	cmp	r3, #5
 800049c:	d83e      	bhi.n	800051c <DM_AddDigitPadding+0xb0>
 800049e:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <DM_AddDigitPadding+0x38>)
 80004a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a4:	080004bd 	.word	0x080004bd
 80004a8:	080004cd 	.word	0x080004cd
 80004ac:	080004dd 	.word	0x080004dd
 80004b0:	080004ed 	.word	0x080004ed
 80004b4:	080004fd 	.word	0x080004fd
 80004b8:	0800050d 	.word	0x0800050d
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <DM_AddDigitPadding+0xbc>)
 80004c0:	4619      	mov	r1, r3
 80004c2:	6838      	ldr	r0, [r7, #0]
 80004c4:	f008 fa4c 	bl	8008960 <sniprintf>
			return 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	e028      	b.n	800051e <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 80004cc:	88b9      	ldrh	r1, [r7, #4]
 80004ce:	89fb      	ldrh	r3, [r7, #14]
 80004d0:	4a16      	ldr	r2, [pc, #88]	; (800052c <DM_AddDigitPadding+0xc0>)
 80004d2:	6838      	ldr	r0, [r7, #0]
 80004d4:	f008 fa44 	bl	8008960 <sniprintf>
			return 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	e020      	b.n	800051e <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 80004dc:	88b9      	ldrh	r1, [r7, #4]
 80004de:	89fb      	ldrh	r3, [r7, #14]
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <DM_AddDigitPadding+0xc4>)
 80004e2:	6838      	ldr	r0, [r7, #0]
 80004e4:	f008 fa3c 	bl	8008960 <sniprintf>
			return 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	e018      	b.n	800051e <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 80004ec:	88b9      	ldrh	r1, [r7, #4]
 80004ee:	89fb      	ldrh	r3, [r7, #14]
 80004f0:	4a10      	ldr	r2, [pc, #64]	; (8000534 <DM_AddDigitPadding+0xc8>)
 80004f2:	6838      	ldr	r0, [r7, #0]
 80004f4:	f008 fa34 	bl	8008960 <sniprintf>
			return 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	e010      	b.n	800051e <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 80004fc:	88b9      	ldrh	r1, [r7, #4]
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <DM_AddDigitPadding+0xcc>)
 8000502:	6838      	ldr	r0, [r7, #0]
 8000504:	f008 fa2c 	bl	8008960 <sniprintf>
			return 0;
 8000508:	2300      	movs	r3, #0
 800050a:	e008      	b.n	800051e <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 800050c:	88b9      	ldrh	r1, [r7, #4]
 800050e:	89fb      	ldrh	r3, [r7, #14]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <DM_AddDigitPadding+0xd0>)
 8000512:	6838      	ldr	r0, [r7, #0]
 8000514:	f008 fa24 	bl	8008960 <sniprintf>
			return 0;
 8000518:	2300      	movs	r3, #0
 800051a:	e000      	b.n	800051e <DM_AddDigitPadding+0xb2>

	}

	return 2;
 800051c:	2302      	movs	r3, #2


}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	08009b08 	.word	0x08009b08
 800052c:	08009b10 	.word	0x08009b10
 8000530:	08009b18 	.word	0x08009b18
 8000534:	08009b20 	.word	0x08009b20
 8000538:	08009b28 	.word	0x08009b28
 800053c:	08009b2c 	.word	0x08009b2c

08000540 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af02      	add	r7, sp, #8
													*/
	int res;
//	if( (res = TM_FindStringRegister("ONE")) >= 0 )
//	{

		char tmp[6] = "";
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	2300      	movs	r3, #0
 800054c:	813b      	strh	r3, [r7, #8]
		if(DM_AddDigitPadding(TIM6->CNT, tmp, sizeof(tmp)) == 0)
 800054e:	4b60      	ldr	r3, [pc, #384]	; (80006d0 <DM_UpdateDisplay+0x190>)
 8000550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000552:	b29b      	uxth	r3, r3
 8000554:	1d39      	adds	r1, r7, #4
 8000556:	2206      	movs	r2, #6
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff87 	bl	800046c <DM_AddDigitPadding>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d114      	bne.n	800058e <DM_UpdateDisplay+0x4e>
			ILI9341_Draw_Text(tmp, STRINGREG[0].x, STRINGREG[0].y, BLACK, STRINGREG[0].size, DARKCYAN);
 8000564:	4b5b      	ldr	r3, [pc, #364]	; (80006d4 <DM_UpdateDisplay+0x194>)
 8000566:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800056a:	b299      	uxth	r1, r3
 800056c:	4b59      	ldr	r3, [pc, #356]	; (80006d4 <DM_UpdateDisplay+0x194>)
 800056e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8000572:	b29c      	uxth	r4, r3
 8000574:	4b57      	ldr	r3, [pc, #348]	; (80006d4 <DM_UpdateDisplay+0x194>)
 8000576:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800057a:	b29b      	uxth	r3, r3
 800057c:	1d38      	adds	r0, r7, #4
 800057e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8000582:	9201      	str	r2, [sp, #4]
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	4622      	mov	r2, r4
 800058a:	f007 fb5b 	bl	8007c44 <ILI9341_Draw_Text>
//	}



	if( (res = TM_FindStringRegister("TWO")) >= 0 )
 800058e:	4852      	ldr	r0, [pc, #328]	; (80006d8 <DM_UpdateDisplay+0x198>)
 8000590:	f008 f8cc 	bl	800872c <TM_FindStringRegister>
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	db2c      	blt.n	80005f6 <DM_UpdateDisplay+0xb6>
	{
		ILI9341_Draw_Text(STRINGREG[res].text, STRINGREG[res].x, STRINGREG[res].y, BLACK, STRINGREG[res].size, DARKGREEN);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2226      	movs	r2, #38	; 0x26
 80005a0:	fb02 f303 	mul.w	r3, r2, r3
 80005a4:	4a4b      	ldr	r2, [pc, #300]	; (80006d4 <DM_UpdateDisplay+0x194>)
 80005a6:	1898      	adds	r0, r3, r2
 80005a8:	4a4a      	ldr	r2, [pc, #296]	; (80006d4 <DM_UpdateDisplay+0x194>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2126      	movs	r1, #38	; 0x26
 80005ae:	fb01 f303 	mul.w	r3, r1, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	3320      	adds	r3, #32
 80005b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ba:	b29c      	uxth	r4, r3
 80005bc:	4a45      	ldr	r2, [pc, #276]	; (80006d4 <DM_UpdateDisplay+0x194>)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2126      	movs	r1, #38	; 0x26
 80005c2:	fb01 f303 	mul.w	r3, r1, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	3322      	adds	r3, #34	; 0x22
 80005ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ce:	b29d      	uxth	r5, r3
 80005d0:	4a40      	ldr	r2, [pc, #256]	; (80006d4 <DM_UpdateDisplay+0x194>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2126      	movs	r1, #38	; 0x26
 80005d6:	fb01 f303 	mul.w	r3, r1, r3
 80005da:	4413      	add	r3, r2
 80005dc:	3324      	adds	r3, #36	; 0x24
 80005de:	f993 3000 	ldrsb.w	r3, [r3]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	462a      	mov	r2, r5
 80005f0:	4621      	mov	r1, r4
 80005f2:	f007 fb27 	bl	8007c44 <ILI9341_Draw_Text>
	}


	if( (res = TM_FindStringRegister("THREE")) >= 0 )
 80005f6:	4839      	ldr	r0, [pc, #228]	; (80006dc <DM_UpdateDisplay+0x19c>)
 80005f8:	f008 f898 	bl	800872c <TM_FindStringRegister>
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db2c      	blt.n	800065e <DM_UpdateDisplay+0x11e>
	{
		ILI9341_Draw_Text(STRINGREG[res].text, STRINGREG[res].x, STRINGREG[res].y, BLACK, STRINGREG[res].size, YELLOW);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2226      	movs	r2, #38	; 0x26
 8000608:	fb02 f303 	mul.w	r3, r2, r3
 800060c:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <DM_UpdateDisplay+0x194>)
 800060e:	1898      	adds	r0, r3, r2
 8000610:	4a30      	ldr	r2, [pc, #192]	; (80006d4 <DM_UpdateDisplay+0x194>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2126      	movs	r1, #38	; 0x26
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	4413      	add	r3, r2
 800061c:	3320      	adds	r3, #32
 800061e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000622:	b29c      	uxth	r4, r3
 8000624:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <DM_UpdateDisplay+0x194>)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2126      	movs	r1, #38	; 0x26
 800062a:	fb01 f303 	mul.w	r3, r1, r3
 800062e:	4413      	add	r3, r2
 8000630:	3322      	adds	r3, #34	; 0x22
 8000632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000636:	b29d      	uxth	r5, r3
 8000638:	4a26      	ldr	r2, [pc, #152]	; (80006d4 <DM_UpdateDisplay+0x194>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2126      	movs	r1, #38	; 0x26
 800063e:	fb01 f303 	mul.w	r3, r1, r3
 8000642:	4413      	add	r3, r2
 8000644:	3324      	adds	r3, #36	; 0x24
 8000646:	f993 3000 	ldrsb.w	r3, [r3]
 800064a:	b29b      	uxth	r3, r3
 800064c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000650:	9201      	str	r2, [sp, #4]
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	462a      	mov	r2, r5
 8000658:	4621      	mov	r1, r4
 800065a:	f007 faf3 	bl	8007c44 <ILI9341_Draw_Text>
	}

	if( (res = TM_FindStringRegister("FOUR")) >= 0 )
 800065e:	4820      	ldr	r0, [pc, #128]	; (80006e0 <DM_UpdateDisplay+0x1a0>)
 8000660:	f008 f864 	bl	800872c <TM_FindStringRegister>
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db2c      	blt.n	80006c6 <DM_UpdateDisplay+0x186>
	{
		ILI9341_Draw_Text(STRINGREG[res].text, STRINGREG[res].x, STRINGREG[res].y, BLACK, STRINGREG[res].size, RED);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2226      	movs	r2, #38	; 0x26
 8000670:	fb02 f303 	mul.w	r3, r2, r3
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <DM_UpdateDisplay+0x194>)
 8000676:	1898      	adds	r0, r3, r2
 8000678:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <DM_UpdateDisplay+0x194>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2126      	movs	r1, #38	; 0x26
 800067e:	fb01 f303 	mul.w	r3, r1, r3
 8000682:	4413      	add	r3, r2
 8000684:	3320      	adds	r3, #32
 8000686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068a:	b29c      	uxth	r4, r3
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <DM_UpdateDisplay+0x194>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2126      	movs	r1, #38	; 0x26
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	4413      	add	r3, r2
 8000698:	3322      	adds	r3, #34	; 0x22
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	b29d      	uxth	r5, r3
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <DM_UpdateDisplay+0x194>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2126      	movs	r1, #38	; 0x26
 80006a6:	fb01 f303 	mul.w	r3, r1, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	3324      	adds	r3, #36	; 0x24
 80006ae:	f993 3000 	ldrsb.w	r3, [r3]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	462a      	mov	r2, r5
 80006c0:	4621      	mov	r1, r4
 80006c2:	f007 fabf 	bl	8007c44 <ILI9341_Draw_Text>
	}


}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bdb0      	pop	{r4, r5, r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40001000 	.word	0x40001000
 80006d4:	200003e0 	.word	0x200003e0
 80006d8:	08009ad4 	.word	0x08009ad4
 80006dc:	08009ad8 	.word	0x08009ad8
 80006e0:	08009ae0 	.word	0x08009ae0

080006e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2220      	movs	r2, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f008 f8ab 	bl	8008858 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000704:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000708:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800070a:	4b30      	ldr	r3, [pc, #192]	; (80007cc <MX_ADC1_Init+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_ADC1_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_ADC1_Init+0xe8>)
 800072a:	2204      	movs	r2, #4
 800072c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000730:	2200      	movs	r2, #0
 8000732:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000736:	2201      	movs	r2, #1
 8000738:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_ADC1_Init+0xe8>)
 800073c:	2201      	movs	r2, #1
 800073e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000756:	2201      	movs	r2, #1
 8000758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_ADC1_Init+0xe8>)
 800075e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000762:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076c:	4817      	ldr	r0, [pc, #92]	; (80007cc <MX_ADC1_Init+0xe8>)
 800076e:	f002 f829 	bl	80027c4 <HAL_ADC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000778:	f000 ff3e 	bl	80015f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <MX_ADC1_Init+0xe8>)
 8000788:	f002 fdb2 	bl	80032f0 <HAL_ADCEx_MultiModeConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000792:	f000 ff31 	bl	80015f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_ADC1_Init+0xec>)
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079a:	2306      	movs	r3, #6
 800079c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a2:	237f      	movs	r3, #127	; 0x7f
 80007a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a6:	2304      	movs	r3, #4
 80007a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_ADC1_Init+0xe8>)
 80007b4:	f002 f9c6 	bl	8002b44 <HAL_ADC_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007be:	f000 ff1b 	bl	80015f8 <Error_Handler>
  }

}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000051c 	.word	0x2000051c
 80007d0:	0c900008 	.word	0x0c900008

080007d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007f4:	d14f      	bne.n	8000896 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <HAL_ADC_MspInit+0xcc>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a29      	ldr	r2, [pc, #164]	; (80008a0 <HAL_ADC_MspInit+0xcc>)
 80007fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <HAL_ADC_MspInit+0xcc>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <HAL_ADC_MspInit+0xcc>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <HAL_ADC_MspInit+0xcc>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <HAL_ADC_MspInit+0xcc>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082a:	2303      	movs	r3, #3
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f004 f874 	bl	8004928 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000842:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <HAL_ADC_MspInit+0xd4>)
 8000844:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000848:	2205      	movs	r2, #5
 800084a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000870:	2220      	movs	r2, #32
 8000872:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 800087c:	f003 fde2 	bl	8004444 <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000886:	f000 feb7 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 800088e:	655a      	str	r2, [r3, #84]	; 0x54
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_ADC_MspInit+0xd0>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	20000588 	.word	0x20000588
 80008a8:	40020008 	.word	0x40020008

080008ac <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <MX_COMP1_Init+0x48>)
 80008b4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <MX_COMP1_Init+0x4c>)
 80008c0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_COMP1_Init+0x44>)
 80008dc:	f002 ff5c 	bl	8003798 <HAL_COMP_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80008e6:	f000 fe87 	bl	80015f8 <Error_Handler>
  }

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200005e8 	.word	0x200005e8
 80008f4:	40010200 	.word	0x40010200
 80008f8:	00800030 	.word	0x00800030

080008fc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_COMP_MspInit+0x5c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d118      	bne.n	8000950 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_COMP_MspInit+0x60>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_COMP_MspInit+0x60>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_COMP_MspInit+0x60>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000936:	2302      	movs	r3, #2
 8000938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093a:	2303      	movs	r3, #3
 800093c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f003 ffec 	bl	8004928 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40010200 	.word	0x40010200
 800095c:	40021000 	.word	0x40021000

08000960 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2230      	movs	r2, #48	; 0x30
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f007 ff73 	bl	8008858 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_DAC1_Init+0x8c>)
 8000974:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_DAC1_Init+0x90>)
 8000976:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_DAC1_Init+0x8c>)
 800097a:	f003 f9b0 	bl	8003cde <HAL_DAC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000984:	f000 fe38 	bl	80015f8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000988:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800098c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800099a:	2306      	movs	r3, #6
 800099c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_DAC1_Init+0x8c>)
 80009b6:	f003 fb0f 	bl	8003fd8 <HAL_DAC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80009c0:	f000 fe1a 	bl	80015f8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	2210      	movs	r2, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_DAC1_Init+0x8c>)
 80009d4:	f003 fb00 	bl	8003fd8 <HAL_DAC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80009de:	f000 fe0b 	bl	80015f8 <Error_Handler>
  }

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000620 	.word	0x20000620
 80009f0:	50000800 	.word	0x50000800

080009f4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2230      	movs	r2, #48	; 0x30
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f007 ff29 	bl	8008858 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_DAC2_Init+0x6c>)
 8000a08:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_DAC2_Init+0x70>)
 8000a0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000a0c:	4814      	ldr	r0, [pc, #80]	; (8000a60 <MX_DAC2_Init+0x6c>)
 8000a0e:	f003 f966 	bl	8003cde <HAL_DAC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 fdee 	bl	80015f8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_DAC2_Init+0x6c>)
 8000a4a:	f003 fac5 	bl	8003fd8 <HAL_DAC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8000a54:	f000 fdd0 	bl	80015f8 <Error_Handler>
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000060c 	.word	0x2000060c
 8000a64:	50000c00 	.word	0x50000c00

08000a68 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a56      	ldr	r2, [pc, #344]	; (8000be0 <HAL_DAC_MspInit+0x178>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d150      	bne.n	8000b2c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a8a:	4b56      	ldr	r3, [pc, #344]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a55      	ldr	r2, [pc, #340]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b53      	ldr	r3, [pc, #332]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b4d      	ldr	r3, [pc, #308]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000aba:	2330      	movs	r3, #48	; 0x30
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f003 ff2a 	bl	8004928 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000ad4:	4b44      	ldr	r3, [pc, #272]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000ad6:	4a45      	ldr	r2, [pc, #276]	; (8000bec <HAL_DAC_MspInit+0x184>)
 8000ad8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000ada:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000adc:	2206      	movs	r2, #6
 8000ade:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aec:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000afa:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b02:	4b39      	ldr	r3, [pc, #228]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000b04:	2220      	movs	r2, #32
 8000b06:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b08:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000b0e:	4836      	ldr	r0, [pc, #216]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000b10:	f003 fc98 	bl	8004444 <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000b1a:	f000 fd6d 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a31      	ldr	r2, [pc, #196]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	4a30      	ldr	r2, [pc, #192]	; (8000be8 <HAL_DAC_MspInit+0x180>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000b2a:	e054      	b.n	8000bd6 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a2f      	ldr	r2, [pc, #188]	; (8000bf0 <HAL_DAC_MspInit+0x188>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d14f      	bne.n	8000bd6 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000b36:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a2a      	ldr	r2, [pc, #168]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <HAL_DAC_MspInit+0x17c>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f003 fed4 	bl	8004928 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000b82:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_DAC_MspInit+0x190>)
 8000b84:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000b88:	2229      	movs	r2, #41	; 0x29
 8000b8a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000b8e:	2210      	movs	r2, #16
 8000b90:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000bbc:	f003 fc42 	bl	8004444 <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8000bc6:	f000 fd17 	bl	80015f8 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_DAC_MspInit+0x18c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000bd6:	bf00      	nop
 8000bd8:	3730      	adds	r7, #48	; 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	50000800 	.word	0x50000800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	20000634 	.word	0x20000634
 8000bec:	4002001c 	.word	0x4002001c
 8000bf0:	50000c00 	.word	0x50000c00
 8000bf4:	20000694 	.word	0x20000694
 8000bf8:	40020030 	.word	0x40020030

08000bfc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_DMA_Init+0x80>)
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <MX_DMA_Init+0x80>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_DMA_Init+0x80>)
 8000c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_DMA_Init+0x80>)
 8000c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <MX_DMA_Init+0x80>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6493      	str	r3, [r2, #72]	; 0x48
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_DMA_Init+0x80>)
 8000c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2101      	movs	r1, #1
 8000c36:	200b      	movs	r0, #11
 8000c38:	f003 f81d 	bl	8003c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c3c:	200b      	movs	r0, #11
 8000c3e:	f003 f834 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	200c      	movs	r0, #12
 8000c48:	f003 f815 	bl	8003c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c4c:	200c      	movs	r0, #12
 8000c4e:	f003 f82c 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200d      	movs	r0, #13
 8000c58:	f003 f80d 	bl	8003c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c5c:	200d      	movs	r0, #13
 8000c5e:	f003 f824 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200e      	movs	r0, #14
 8000c68:	f003 f805 	bl	8003c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c6c:	200e      	movs	r0, #14
 8000c6e:	f003 f81c 	bl	8003caa <HAL_NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <update_dc_bias_sweep+0x88>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <update_dc_bias_sweep+0x1a>
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	e005      	b.n	8000ca6 <update_dc_bias_sweep+0x26>
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000ca4:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10a      	bne.n	8000cc4 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <update_dc_bias_sweep+0x90>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <update_dc_bias_sweep+0x3e>
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <update_dc_bias_sweep+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e002      	b.n	8000cc4 <update_dc_bias_sweep+0x44>
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <update_dc_bias_sweep+0x90>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <update_dc_bias_sweep+0x52>
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <update_dc_bias_sweep+0x88>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cda:	d302      	bcc.n	8000ce2 <update_dc_bias_sweep+0x62>
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <update_dc_bias_sweep+0x88>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <update_dc_bias_sweep+0x90>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2108      	movs	r1, #8
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f003 ffb4 	bl	8004c5c <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <update_dc_bias_sweep+0x8c>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <update_dc_bias_sweep+0x94>)
 8000cfe:	f003 f925 	bl	8003f4c <HAL_DAC_SetValue>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200004f8 	.word	0x200004f8
 8000d10:	200004fc 	.word	0x200004fc
 8000d14:	20000620 	.word	0x20000620

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	0c1b      	lsrs	r3, r3, #16
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	ea02 0103 	and.w	r1, r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	0c1b      	lsrs	r3, r3, #16
 8000e52:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f003 031f 	and.w	r3, r3, #31
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	430a      	orrs	r2, r1
 8000e76:	3302      	adds	r3, #2
 8000e78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40010000 	.word	0x40010000

08000e8c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	613b      	str	r3, [r7, #16]
  return result;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	61bb      	str	r3, [r7, #24]
  return result;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b089      	sub	sp, #36	; 0x24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa93 f3a3 	rbit	r3, r3
 8000f04:	613b      	str	r3, [r7, #16]
  return result;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	fab3 f383 	clz	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2103      	movs	r1, #3
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa93 f3a3 	rbit	r3, r3
 8000f24:	61bb      	str	r3, [r7, #24]
  return result;
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	431a      	orrs	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	60da      	str	r2, [r3, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3724      	adds	r7, #36	; 0x24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f7ff ffd4 	bl	8000f64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000fbc:	2020      	movs	r0, #32
 8000fbe:	f7ff ffd1 	bl	8000f64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ffce 	bl	8000f64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fc8:	2002      	movs	r0, #2
 8000fca:	f7ff ffcb 	bl	8000f64 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000fce:	2108      	movs	r1, #8
 8000fd0:	48d3      	ldr	r0, [pc, #844]	; (8001320 <MX_GPIO_Init+0x38c>)
 8000fd2:	f7ff ffb9 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f7ff ffb4 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	48cf      	ldr	r0, [pc, #828]	; (8001320 <MX_GPIO_Init+0x38c>)
 8000fe4:	f7ff ffb0 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000fe8:	2120      	movs	r1, #32
 8000fea:	48cd      	ldr	r0, [pc, #820]	; (8001320 <MX_GPIO_Init+0x38c>)
 8000fec:	f7ff ffac 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	48cc      	ldr	r0, [pc, #816]	; (8001324 <MX_GPIO_Init+0x390>)
 8000ff4:	f7ff ffa8 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffc:	48c8      	ldr	r0, [pc, #800]	; (8001320 <MX_GPIO_Init+0x38c>)
 8000ffe:	f7ff ffa3 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001006:	48c6      	ldr	r0, [pc, #792]	; (8001320 <MX_GPIO_Init+0x38c>)
 8001008:	f7ff ff9e 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	48c5      	ldr	r0, [pc, #788]	; (8001324 <MX_GPIO_Init+0x390>)
 8001010:	f7ff ff9a 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	48c3      	ldr	r0, [pc, #780]	; (8001324 <MX_GPIO_Init+0x390>)
 8001018:	f7ff ff96 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	48c0      	ldr	r0, [pc, #768]	; (8001324 <MX_GPIO_Init+0x390>)
 8001022:	f7ff ff91 	bl	8000f48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001026:	49c0      	ldr	r1, [pc, #768]	; (8001328 <MX_GPIO_Init+0x394>)
 8001028:	2002      	movs	r0, #2
 800102a:	f7ff feff 	bl	8000e2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800102e:	49bf      	ldr	r1, [pc, #764]	; (800132c <MX_GPIO_Init+0x398>)
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff fefb 	bl	8000e2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001036:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800103a:	2005      	movs	r0, #5
 800103c:	f7ff fef6 	bl	8000e2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001040:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001044:	2005      	movs	r0, #5
 8001046:	f7ff fef1 	bl	8000e2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800104a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800104e:	2002      	movs	r0, #2
 8001050:	f7ff feec 	bl	8000e2c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001054:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001058:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800105a:	2301      	movs	r3, #1
 800105c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001066:	2302      	movs	r3, #2
 8001068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4618      	mov	r0, r3
 8001072:	f006 fa1b 	bl	80074ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800107a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800107c:	2301      	movs	r3, #1
 800107e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001088:	2302      	movs	r3, #2
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4618      	mov	r0, r3
 8001094:	f006 fa0a 	bl	80074ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001098:	2301      	movs	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800109c:	2301      	movs	r3, #1
 800109e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 f9fa 	bl	80074ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010bc:	2301      	movs	r3, #1
 80010be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4618      	mov	r0, r3
 80010d4:	f006 f9ea 	bl	80074ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80010d8:	2304      	movs	r3, #4
 80010da:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010dc:	2301      	movs	r3, #1
 80010de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80010e8:	2302      	movs	r3, #2
 80010ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f006 f9da 	bl	80074ac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fe:	4888      	ldr	r0, [pc, #544]	; (8001320 <MX_GPIO_Init+0x38c>)
 8001100:	f7ff fef3 	bl	8000eea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110a:	4885      	ldr	r0, [pc, #532]	; (8001320 <MX_GPIO_Init+0x38c>)
 800110c:	f7ff feed 	bl	8000eea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001110:	2201      	movs	r2, #1
 8001112:	2101      	movs	r1, #1
 8001114:	4886      	ldr	r0, [pc, #536]	; (8001330 <MX_GPIO_Init+0x39c>)
 8001116:	f7ff fee8 	bl	8000eea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 800111a:	2201      	movs	r2, #1
 800111c:	2102      	movs	r1, #2
 800111e:	4884      	ldr	r0, [pc, #528]	; (8001330 <MX_GPIO_Init+0x39c>)
 8001120:	f7ff fee3 	bl	8000eea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	487d      	ldr	r0, [pc, #500]	; (8001320 <MX_GPIO_Init+0x38c>)
 800112a:	f7ff fede 	bl	8000eea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001134:	487a      	ldr	r0, [pc, #488]	; (8001320 <MX_GPIO_Init+0x38c>)
 8001136:	f7ff fea9 	bl	8000e8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001140:	4877      	ldr	r0, [pc, #476]	; (8001320 <MX_GPIO_Init+0x38c>)
 8001142:	f7ff fea3 	bl	8000e8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001146:	2200      	movs	r2, #0
 8001148:	2101      	movs	r1, #1
 800114a:	4879      	ldr	r0, [pc, #484]	; (8001330 <MX_GPIO_Init+0x39c>)
 800114c:	f7ff fe9e 	bl	8000e8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	4876      	ldr	r0, [pc, #472]	; (8001330 <MX_GPIO_Init+0x39c>)
 8001156:	f7ff fe99 	bl	8000e8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800115a:	2200      	movs	r2, #0
 800115c:	2104      	movs	r1, #4
 800115e:	4870      	ldr	r0, [pc, #448]	; (8001320 <MX_GPIO_Init+0x38c>)
 8001160:	f7ff fe94 	bl	8000e8c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001164:	2308      	movs	r3, #8
 8001166:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001168:	2301      	movs	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4868      	ldr	r0, [pc, #416]	; (8001320 <MX_GPIO_Init+0x38c>)
 800117e:	f006 fb88 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001182:	2308      	movs	r3, #8
 8001184:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001186:	2301      	movs	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f006 fb78 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80011a2:	2310      	movs	r3, #16
 80011a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a6:	2301      	movs	r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4859      	ldr	r0, [pc, #356]	; (8001320 <MX_GPIO_Init+0x38c>)
 80011bc:	f006 fb69 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80011c0:	2320      	movs	r3, #32
 80011c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011c4:	2301      	movs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4851      	ldr	r0, [pc, #324]	; (8001320 <MX_GPIO_Init+0x38c>)
 80011da:	f006 fb5a 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011e2:	2301      	movs	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <MX_GPIO_Init+0x390>)
 80011f8:	f006 fb4b 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4842      	ldr	r0, [pc, #264]	; (8001320 <MX_GPIO_Init+0x38c>)
 8001218:	f006 fb3b 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 800121c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001220:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001222:	2301      	movs	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	483a      	ldr	r0, [pc, #232]	; (8001320 <MX_GPIO_Init+0x38c>)
 8001238:	f006 fb2b 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 800123c:	2340      	movs	r3, #64	; 0x40
 800123e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001240:	2301      	movs	r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4833      	ldr	r0, [pc, #204]	; (8001324 <MX_GPIO_Init+0x390>)
 8001256:	f006 fb1c 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800125e:	2301      	movs	r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	482c      	ldr	r0, [pc, #176]	; (8001324 <MX_GPIO_Init+0x390>)
 8001274:	f006 fb0d 	bl	8007892 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8001278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800127e:	2301      	movs	r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4824      	ldr	r0, [pc, #144]	; (8001324 <MX_GPIO_Init+0x390>)
 8001294:	f006 fafd 	bl	8007892 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001298:	f7ff fd3e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 800129c:	4603      	mov	r3, r0
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fd8e 	bl	8000dc4 <NVIC_EncodePriority>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4619      	mov	r1, r3
 80012ac:	2006      	movs	r0, #6
 80012ae:	f7ff fd5f 	bl	8000d70 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80012b2:	2006      	movs	r0, #6
 80012b4:	f7ff fd3e 	bl	8000d34 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012b8:	f7ff fd2e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 80012bc:	4603      	mov	r3, r0
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fd7e 	bl	8000dc4 <NVIC_EncodePriority>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	2007      	movs	r0, #7
 80012ce:	f7ff fd4f 	bl	8000d70 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80012d2:	2007      	movs	r0, #7
 80012d4:	f7ff fd2e 	bl	8000d34 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012d8:	f7ff fd1e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 80012dc:	4603      	mov	r3, r0
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd6e 	bl	8000dc4 <NVIC_EncodePriority>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4619      	mov	r1, r3
 80012ec:	2008      	movs	r0, #8
 80012ee:	f7ff fd3f 	bl	8000d70 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80012f2:	2008      	movs	r0, #8
 80012f4:	f7ff fd1e 	bl	8000d34 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012f8:	f7ff fd0e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fd5e 	bl	8000dc4 <NVIC_EncodePriority>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	2028      	movs	r0, #40	; 0x28
 800130e:	f7ff fd2f 	bl	8000d70 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001312:	2028      	movs	r0, #40	; 0x28
 8001314:	f7ff fd0e 	bl	8000d34 <__NVIC_EnableIRQ>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	e009      	b.n	8001334 <MX_GPIO_Init+0x3a0>
 8001320:	48000800 	.word	0x48000800
 8001324:	48000400 	.word	0x48000400
 8001328:	0f000003 	.word	0x0f000003
 800132c:	f0000003 	.word	0xf0000003
 8001330:	48001400 	.word	0x48001400
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop

08001338 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001340:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001344:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001350:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001354:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001358:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00b      	beq.n	8001378 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001360:	e000      	b.n	8001364 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001362:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f9      	beq.n	8001362 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800136e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e009      	b.n	80013b0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60ba      	str	r2, [r7, #8]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffc7 	bl	8001338 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbf1      	blt.n	800139c <_write+0x16>
  return len;
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f000 ffa6 	bl	800231a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f8a5 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d2:	f7ff fddf 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 80013d6:	f7ff fc11 	bl	8000bfc <MX_DMA_Init>
  MX_DAC1_Init();
 80013da:	f7ff fac1 	bl	8000960 <MX_DAC1_Init>
  MX_DAC2_Init();
 80013de:	f7ff fb09 	bl	80009f4 <MX_DAC2_Init>
  MX_ADC1_Init();
 80013e2:	f7ff f97f 	bl	80006e4 <MX_ADC1_Init>
  MX_COMP1_Init();
 80013e6:	f7ff fa61 	bl	80008ac <MX_COMP1_Init>
  MX_TIM2_Init();
 80013ea:	f000 fca7 	bl	8001d3c <MX_TIM2_Init>
  MX_TIM17_Init();
 80013ee:	f000 fe25 	bl	800203c <MX_TIM17_Init>
  MX_SPI3_Init();
 80013f2:	f000 f93f 	bl	8001674 <MX_SPI3_Init>
  MX_RNG_Init();
 80013f6:	f000 f92f 	bl	8001658 <MX_RNG_Init>
  MX_TIM1_Init();
 80013fa:	f000 fc2f 	bl	8001c5c <MX_TIM1_Init>
  MX_TIM8_Init();
 80013fe:	f000 fd3d 	bl	8001e7c <MX_TIM8_Init>
  MX_TIM16_Init();
 8001402:	f000 fdf5 	bl	8001ff0 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001406:	f000 fda1 	bl	8001f4c <MX_TIM15_Init>
  MX_TIM6_Init();
 800140a:	f000 fd01 	bl	8001e10 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2378      	movs	r3, #120	; 0x78
 8001414:	4a34      	ldr	r2, [pc, #208]	; (80014e8 <main+0x124>)
 8001416:	2100      	movs	r1, #0
 8001418:	4834      	ldr	r0, [pc, #208]	; (80014ec <main+0x128>)
 800141a:	f002 fcd5 	bl	8003dc8 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800141e:	2110      	movs	r1, #16
 8001420:	4832      	ldr	r0, [pc, #200]	; (80014ec <main+0x128>)
 8001422:	f002 fc7e 	bl	8003d22 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001426:	2300      	movs	r3, #0
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2378      	movs	r3, #120	; 0x78
 800142c:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <main+0x12c>)
 800142e:	2100      	movs	r1, #0
 8001430:	4830      	ldr	r0, [pc, #192]	; (80014f4 <main+0x130>)
 8001432:	f002 fcc9 	bl	8003dc8 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8001436:	4830      	ldr	r0, [pc, #192]	; (80014f8 <main+0x134>)
 8001438:	f004 ff8c 	bl	8006354 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2108      	movs	r1, #8
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f003 fc0a 	bl	8004c5c <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2101      	movs	r1, #1
 800144c:	482b      	ldr	r0, [pc, #172]	; (80014fc <main+0x138>)
 800144e:	f003 fc05 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2120      	movs	r1, #32
 8001456:	482a      	ldr	r0, [pc, #168]	; (8001500 <main+0x13c>)
 8001458:	f003 fc00 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2110      	movs	r1, #16
 8001460:	4827      	ldr	r0, [pc, #156]	; (8001500 <main+0x13c>)
 8001462:	f003 fbfb 	bl	8004c5c <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8001466:	4827      	ldr	r0, [pc, #156]	; (8001504 <main+0x140>)
 8001468:	f004 ffa2 	bl	80063b0 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	4823      	ldr	r0, [pc, #140]	; (8001500 <main+0x13c>)
 8001474:	f003 fbf2 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <main+0x13c>)
 8001480:	f003 fbec 	bl	8004c5c <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2108      	movs	r1, #8
 8001488:	481d      	ldr	r0, [pc, #116]	; (8001500 <main+0x13c>)
 800148a:	f003 fbe7 	bl	8004c5c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 800148e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	f023 0307 	bic.w	r3, r3, #7
 800149c:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 800149e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a8:	f043 0305 	orr.w	r3, r3, #5
 80014ac:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80014ae:	4816      	ldr	r0, [pc, #88]	; (8001508 <main+0x144>)
 80014b0:	f004 ff7e 	bl	80063b0 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 80014b4:	4815      	ldr	r0, [pc, #84]	; (800150c <main+0x148>)
 80014b6:	f004 ff4d 	bl	8006354 <HAL_TIM_Base_Start>

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <main+0x14c>)
 80014bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <main+0x14c>)
 80014c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80014ca:	f7fe ff73 	bl	80003b4 <DM_Init>
  DM_RegisterStrings();
 80014ce:	f7fe ff8f 	bl	80003f0 <DM_RegisterStrings>
  HAL_Delay(2000);
 80014d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014d6:	f000 ff91 	bl	80023fc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim15);
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <main+0x150>)
 80014dc:	f004 ff68 	bl	80063b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <main+0x154>)
 80014e2:	f004 ff37 	bl	8006354 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <main+0x122>
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20000620 	.word	0x20000620
 80014f0:	200001ec 	.word	0x200001ec
 80014f4:	2000060c 	.word	0x2000060c
 80014f8:	200007b8 	.word	0x200007b8
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	20000850 	.word	0x20000850
 8001508:	20000934 	.word	0x20000934
 800150c:	200008e8 	.word	0x200008e8
 8001510:	40001000 	.word	0x40001000
 8001514:	20000804 	.word	0x20000804
 8001518:	2000089c 	.word	0x2000089c

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0a8      	sub	sp, #160	; 0xa0
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001526:	2238      	movs	r2, #56	; 0x38
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f007 f994 	bl	8008858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2254      	movs	r2, #84	; 0x54
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f007 f986 	bl	8008858 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800154c:	2000      	movs	r0, #0
 800154e:	f003 fb9d 	bl	8004c8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001552:	2322      	movs	r3, #34	; 0x22
 8001554:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2340      	movs	r3, #64	; 0x40
 800155e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001578:	232a      	movs	r3, #42	; 0x2a
 800157a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001584:	2304      	movs	r3, #4
 8001586:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001590:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fc1d 	bl	8004dd4 <HAL_RCC_OscConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80015a0:	f000 f82a 	bl	80015f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a4:	230f      	movs	r3, #15
 80015a6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a8:	2303      	movs	r3, #3
 80015aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80015b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015bc:	2108      	movs	r1, #8
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 ff20 	bl	8005404 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80015ca:	f000 f815 	bl	80015f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80015ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80015d4:	2300      	movs	r3, #0
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 f8ff 	bl	80057e4 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015ec:	f000 f804 	bl	80015f8 <Error_Handler>
  }
}
 80015f0:	bf00      	nop
 80015f2:	37a0      	adds	r7, #160	; 0xa0
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f043 0204 	orr.w	r2, r3, #4
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <LL_AHB2_GRP1_EnableClock>:
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4313      	orrs	r3, r2
 800163a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800163e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000

08001658 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800165c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001660:	f7ff ffe2 	bl	8001628 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <MX_RNG_Init+0x18>)
 8001666:	f7ff ffce 	bl	8001606 <LL_RNG_Enable>

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	50060800 	.word	0x50060800

08001674 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <MX_SPI3_Init+0x74>)
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <MX_SPI3_Init+0x78>)
 800167c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_SPI3_Init+0x74>)
 8001680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001684:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_SPI3_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_SPI3_Init+0x74>)
 800168e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001692:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_SPI3_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_SPI3_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016aa:	2210      	movs	r2, #16
 80016ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016c2:	2207      	movs	r2, #7
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016ce:	2208      	movs	r2, #8
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_SPI3_Init+0x74>)
 80016d4:	f004 fad2 	bl	8005c7c <HAL_SPI_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80016de:	f7ff ff8b 	bl	80015f8 <Error_Handler>
  }

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200006f4 	.word	0x200006f4
 80016ec:	40003c00 	.word	0x40003c00

080016f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <HAL_SPI_MspInit+0xd0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d151      	bne.n	80017b6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <HAL_SPI_MspInit+0xd4>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <HAL_SPI_MspInit+0xd4>)
 8001718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_SPI_MspInit+0xd4>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_SPI_MspInit+0xd4>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <HAL_SPI_MspInit+0xd4>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_SPI_MspInit+0xd4>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001742:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001754:	2306      	movs	r3, #6
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	481a      	ldr	r0, [pc, #104]	; (80017c8 <HAL_SPI_MspInit+0xd8>)
 8001760:	f003 f8e2 	bl	8004928 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 8001766:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <HAL_SPI_MspInit+0xe0>)
 8001768:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 800176c:	220f      	movs	r2, #15
 800176e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 8001772:	2210      	movs	r2, #16
 8001774:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 8001790:	2200      	movs	r2, #0
 8001792:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 800179c:	f002 fe52 	bl	8004444 <HAL_DMA_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80017a6:	f7ff ff27 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_SPI_MspInit+0xdc>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40003c00 	.word	0x40003c00
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000800 	.word	0x48000800
 80017cc:	20000758 	.word	0x20000758
 80017d0:	40020044 	.word	0x40020044

080017d4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80017de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e2:	6093      	str	r3, [r2, #8]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40007000 	.word	0x40007000

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x44>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x44>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x44>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x44>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x44>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800182a:	f7ff ffd3 	bl	80017d4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d101      	bne.n	8001856 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40010400 	.word	0x40010400

08001868 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6153      	str	r3, [r2, #20]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40010400 	.word	0x40010400

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler+0x4>

080018a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler+0x4>

080018ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018dc:	f000 fd70 	bl	80023c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <EXTI0_IRQHandler+0x2c>)
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <EXTI0_IRQHandler+0x30>)
 80018ec:	6810      	ldr	r0, [r2, #0]
 80018ee:	6018      	str	r0, [r3, #0]
 80018f0:	7912      	ldrb	r2, [r2, #4]
 80018f2:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <EXTI0_IRQHandler+0x34>)
 80018f6:	f007 f82b 	bl	8008950 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff ff9e 	bl	800183c <LL_EXTI_IsActiveFlag_0_31>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff ffae 	bl	8001868 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000510 	.word	0x20000510
 8001914:	08009b34 	.word	0x08009b34
 8001918:	08009b3c 	.word	0x08009b3c

0800191c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <EXTI1_IRQHandler+0x2c>)
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <EXTI1_IRQHandler+0x30>)
 8001924:	6810      	ldr	r0, [r2, #0]
 8001926:	6018      	str	r0, [r3, #0]
 8001928:	7912      	ldrb	r2, [r2, #4]
 800192a:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <EXTI1_IRQHandler+0x34>)
 800192e:	f007 f80f 	bl	8008950 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8001932:	2002      	movs	r0, #2
 8001934:	f7ff ff82 	bl	800183c <LL_EXTI_IsActiveFlag_0_31>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800193e:	2002      	movs	r0, #2
 8001940:	f7ff ff92 	bl	8001868 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000510 	.word	0x20000510
 800194c:	08009b4c 	.word	0x08009b4c
 8001950:	08009b54 	.word	0x08009b54

08001954 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <EXTI2_IRQHandler+0x2c>)
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <EXTI2_IRQHandler+0x30>)
 800195c:	cb03      	ldmia	r3!, {r0, r1}
 800195e:	6010      	str	r0, [r2, #0]
 8001960:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 8001962:	4809      	ldr	r0, [pc, #36]	; (8001988 <EXTI2_IRQHandler+0x34>)
 8001964:	f006 fff4 	bl	8008950 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001968:	2004      	movs	r0, #4
 800196a:	f7ff ff67 	bl	800183c <LL_EXTI_IsActiveFlag_0_31>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8001974:	2004      	movs	r0, #4
 8001976:	f7ff ff77 	bl	8001868 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000510 	.word	0x20000510
 8001984:	08009b64 	.word	0x08009b64
 8001988:	08009b6c 	.word	0x08009b6c

0800198c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA1_Channel1_IRQHandler+0x10>)
 8001992:	f002 fe7a 	bl	800468a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000588 	.word	0x20000588

080019a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA1_Channel2_IRQHandler+0x10>)
 80019a6:	f002 fe70 	bl	800468a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000634 	.word	0x20000634

080019b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <DMA1_Channel3_IRQHandler+0x10>)
 80019ba:	f002 fe66 	bl	800468a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000694 	.word	0x20000694

080019c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA1_Channel4_IRQHandler+0x10>)
 80019ce:	f002 fe5c 	bl	800468a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000758 	.word	0x20000758

080019dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 80019e0:	f7fe fdae 	bl	8000540 <DM_UpdateDisplay>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80019e6:	f004 fdbf 	bl	8006568 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80019ec:	f004 fdbc 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200008e8 	.word	0x200008e8
 80019f8:	20000804 	.word	0x20000804

080019fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001a00:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001a0a:	f004 fdad 	bl	8006568 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001a10:	f004 fdaa 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000510 	.word	0x20000510
 8001a1c:	08009b7c 	.word	0x08009b7c
 8001a20:	200008e8 	.word	0x200008e8
 8001a24:	20000980 	.word	0x20000980

08001a28 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001a2c:	f7ff f928 	bl	8000c80 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d305      	bcc.n	8001a48 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 8001a42:	8812      	ldrh	r2, [r2, #0]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d90a      	bls.n	8001a5e <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8001a50:	f006 ff0a 	bl	8008868 <iprintf>
		new_enc_value = TIM1->CNT;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001a5c:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 8001a66:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8001a6a:	f004 fd7d 	bl	8006568 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001a70:	f004 fd7a 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	20000500 	.word	0x20000500
 8001a80:	08009b80 	.word	0x08009b80
 8001a84:	20000502 	.word	0x20000502
 8001a88:	200008e8 	.word	0x200008e8
 8001a8c:	20000850 	.word	0x20000850

08001a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM2_IRQHandler+0x10>)
 8001a96:	f004 fd67 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000934 	.word	0x20000934

08001aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001aa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aac:	481b      	ldr	r0, [pc, #108]	; (8001b1c <EXTI15_10_IRQHandler+0x78>)
 8001aae:	f003 f8bd 	bl	8004c2c <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <EXTI15_10_IRQHandler+0x7c>)
 8001aba:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <EXTI15_10_IRQHandler+0x80>)
 8001abc:	6810      	ldr	r0, [r2, #0]
 8001abe:	6018      	str	r0, [r3, #0]
 8001ac0:	7912      	ldrb	r2, [r2, #4]
 8001ac2:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 8001ac4:	4818      	ldr	r0, [pc, #96]	; (8001b28 <EXTI15_10_IRQHandler+0x84>)
 8001ac6:	f006 ff43 	bl	8008950 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8001aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <EXTI15_10_IRQHandler+0x78>)
 8001ad0:	f003 f8ac 	bl	8004c2c <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <EXTI15_10_IRQHandler+0x7c>)
 8001adc:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <EXTI15_10_IRQHandler+0x88>)
 8001ade:	6810      	ldr	r0, [r2, #0]
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	7912      	ldrb	r2, [r2, #4]
 8001ae4:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <EXTI15_10_IRQHandler+0x8c>)
 8001ae8:	f006 ff32 	bl	8008950 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001aec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001af0:	f7ff fea4 	bl	800183c <LL_EXTI_IsActiveFlag_0_31>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001afa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001afe:	f7ff feb3 	bl	8001868 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001b02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b06:	f7ff fe99 	bl	800183c <LL_EXTI_IsActiveFlag_0_31>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001b10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b14:	f7ff fea8 	bl	8001868 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	48000800 	.word	0x48000800
 8001b20:	20000510 	.word	0x20000510
 8001b24:	08009b88 	.word	0x08009b88
 8001b28:	08009b90 	.word	0x08009b90
 8001b2c:	08009ba0 	.word	0x08009ba0
 8001b30:	08009ba8 	.word	0x08009ba8

08001b34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e00a      	b.n	8001b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b46:	f3af 8000 	nop.w
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	b2ca      	uxtb	r2, r1
 8001b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbf0      	blt.n	8001b46 <_read+0x12>
	}

return len;
 8001b64:	687b      	ldr	r3, [r7, #4]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
	return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b96:	605a      	str	r2, [r3, #4]
	return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_isatty>:

int _isatty(int file)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
	return 1;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x50>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <_sbrk+0x16>
		heap_end = &end;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <_sbrk+0x50>)
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <_sbrk+0x54>)
 8001bec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <_sbrk+0x50>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <_sbrk+0x50>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	466a      	mov	r2, sp
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d907      	bls.n	8001c12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c02:	f006 fdff 	bl	8008804 <__errno>
 8001c06:	4602      	mov	r2, r0
 8001c08:	230c      	movs	r3, #12
 8001c0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c10:	e006      	b.n	8001c20 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <_sbrk+0x50>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <_sbrk+0x50>)
 8001c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000504 	.word	0x20000504
 8001c2c:	200009d8 	.word	0x200009d8

08001c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <SystemInit+0x28>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3a:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <SystemInit+0x28>)
 8001c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SystemInit+0x28>)
 8001c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b09a      	sub	sp, #104	; 0x68
 8001c60:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f006 fdf4 	bl	8008858 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2234      	movs	r2, #52	; 0x34
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fde8 	bl	8008858 <memset>

  htim1.Instance = TIM1;
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001c8a:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <MX_TIM1_Init+0xdc>)
 8001c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001cd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4815      	ldr	r0, [pc, #84]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001ce0:	f004 fb9c 	bl	800641c <HAL_TIM_Encoder_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001cea:	f7ff fc85 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001d02:	f005 f915 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001d0c:	f7ff fc74 	bl	80015f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_TIM1_Init+0xd8>)
 8001d1e:	f005 f99d 	bl	800705c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001d28:	f7ff fc66 	bl	80015f8 <Error_Handler>
  }

}
 8001d2c:	bf00      	nop
 8001d2e:	3768      	adds	r7, #104	; 0x68
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200008e8 	.word	0x200008e8
 8001d38:	40012c00 	.word	0x40012c00

08001d3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001d74:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d94:	481d      	ldr	r0, [pc, #116]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001d96:	f004 fa86 	bl	80062a6 <HAL_TIM_Base_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001da0:	f7ff fc2a 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	4619      	mov	r1, r3
 8001db0:	4816      	ldr	r0, [pc, #88]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001db2:	f004 fd59 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001dbc:	f7ff fc1c 	bl	80015f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001dc4:	2350      	movs	r3, #80	; 0x50
 8001dc6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001dd8:	f004 fe36 	bl	8006a48 <HAL_TIM_SlaveConfigSynchro>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001de2:	f7ff fc09 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_TIM2_Init+0xd0>)
 8001df4:	f005 f89c 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001dfe:	f7ff fbfb 	bl	80015f8 <Error_Handler>
  }

}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000934 	.word	0x20000934

08001e10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <MX_TIM6_Init+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e40:	f004 fa31 	bl	80062a6 <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e4a:	f7ff fbd5 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e5c:	f005 f868 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e66:	f7ff fbc7 	bl	80015f8 <Error_Handler>
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000089c 	.word	0x2000089c
 8001e78:	40001000 	.word	0x40001000

08001e7c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	; 0x50
 8001e80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2234      	movs	r2, #52	; 0x34
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f006 fcd8 	bl	8008858 <memset>

  htim8.Instance = TIM8;
 8001ea8:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001eaa:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <MX_TIM8_Init+0xcc>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ed2:	481c      	ldr	r0, [pc, #112]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001ed4:	f004 f9e7 	bl	80062a6 <HAL_TIM_Base_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001ede:	f7ff fb8b 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ee8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eec:	4619      	mov	r1, r3
 8001eee:	4815      	ldr	r0, [pc, #84]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001ef0:	f004 fcba 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001efa:	f7ff fb7d 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001efe:	2320      	movs	r3, #32
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001f12:	f005 f80d 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001f1c:	f7ff fb6c 	bl	80015f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f28:	463b      	mov	r3, r7
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_TIM8_Init+0xc8>)
 8001f2e:	f005 f895 	bl	800705c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001f38:	f7ff fb5e 	bl	80015f8 <Error_Handler>
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3750      	adds	r7, #80	; 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200007b8 	.word	0x200007b8
 8001f48:	40013400 	.word	0x40013400

08001f4c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <MX_TIM15_Init+0xa0>)
 8001f6e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f84:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001f98:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001f9a:	f004 f984 	bl	80062a6 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001fa4:	f7ff fb28 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001fb6:	f004 fc57 	bl	8006868 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001fc0:	f7ff fb1a 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_TIM15_Init+0x9c>)
 8001fd2:	f004 ffad 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001fdc:	f7ff fb0c 	bl	80015f8 <Error_Handler>
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000804 	.word	0x20000804
 8001fec:	40014000 	.word	0x40014000

08001ff0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_TIM16_Init+0x44>)
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <MX_TIM16_Init+0x48>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_TIM16_Init+0x44>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_TIM16_Init+0x44>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_TIM16_Init+0x44>)
 8002008:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800200c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_TIM16_Init+0x44>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <MX_TIM16_Init+0x44>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_TIM16_Init+0x44>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_TIM16_Init+0x44>)
 8002022:	f004 f940 	bl	80062a6 <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800202c:	f7ff fae4 	bl	80015f8 <Error_Handler>
  }

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000980 	.word	0x20000980
 8002038:	40014400 	.word	0x40014400

0800203c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_TIM17_Init+0x44>)
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <MX_TIM17_Init+0x48>)
 8002044:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_TIM17_Init+0x44>)
 8002048:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800204c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_TIM17_Init+0x44>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_TIM17_Init+0x44>)
 8002056:	2240      	movs	r2, #64	; 0x40
 8002058:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_TIM17_Init+0x44>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_TIM17_Init+0x44>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_TIM17_Init+0x44>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_TIM17_Init+0x44>)
 800206e:	f004 f91a 	bl	80062a6 <HAL_TIM_Base_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002078:	f7ff fabe 	bl	80015f8 <Error_Handler>
  }

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000850 	.word	0x20000850
 8002084:	40014800 	.word	0x40014800

08002088 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_TIM_Encoder_MspInit+0xac>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d13f      	bne.n	800212a <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb0>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb0>)
 80020b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020b4:	6613      	str	r3, [r2, #96]	; 0x60
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb0>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb0>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb0>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_TIM_Encoder_MspInit+0xb0>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020da:	2303      	movs	r3, #3
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80020ea:	2302      	movs	r3, #2
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4811      	ldr	r0, [pc, #68]	; (800213c <HAL_TIM_Encoder_MspInit+0xb4>)
 80020f6:	f002 fc17 	bl	8004928 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2101      	movs	r1, #1
 80020fe:	2018      	movs	r0, #24
 8002100:	f001 fdb9 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002104:	2018      	movs	r0, #24
 8002106:	f001 fdd0 	bl	8003caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2101      	movs	r1, #1
 800210e:	2019      	movs	r0, #25
 8002110:	f001 fdb1 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002114:	2019      	movs	r0, #25
 8002116:	f001 fdc8 	bl	8003caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	201a      	movs	r0, #26
 8002120:	f001 fda9 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002124:	201a      	movs	r0, #26
 8002126:	f001 fdc0 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40021000 	.word	0x40021000
 800213c:	48000800 	.word	0x48000800

08002140 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d131      	bne.n	80021c6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002162:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	623b      	str	r3, [r7, #32]
 8002178:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a4c      	ldr	r2, [pc, #304]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002192:	2301      	movs	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a2:	2301      	movs	r3, #1
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b0:	f002 fbba 	bl	8004928 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2101      	movs	r1, #1
 80021b8:	201c      	movs	r0, #28
 80021ba:	f001 fd5c 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021be:	201c      	movs	r0, #28
 80021c0:	f001 fd73 	bl	8003caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80021c4:	e070      	b.n	80022a8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM6)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <HAL_TIM_Base_MspInit+0x174>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d10c      	bne.n	80021ea <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021d0:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 80021d6:	f043 0310 	orr.w	r3, r3, #16
 80021da:	6593      	str	r3, [r2, #88]	; 0x58
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]
}
 80021e8:	e05e      	b.n	80022a8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a32      	ldr	r2, [pc, #200]	; (80022b8 <HAL_TIM_Base_MspInit+0x178>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10c      	bne.n	800220e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 80021fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]
}
 800220c:	e04c      	b.n	80022a8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_TIM_Base_MspInit+0x17c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d114      	bne.n	8002242 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002222:	6613      	str	r3, [r2, #96]	; 0x60
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2101      	movs	r1, #1
 8002234:	2018      	movs	r0, #24
 8002236:	f001 fd1e 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800223a:	2018      	movs	r0, #24
 800223c:	f001 fd35 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 8002240:	e032      	b.n	80022a8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_TIM_Base_MspInit+0x180>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d114      	bne.n	8002276 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002256:	6613      	str	r3, [r2, #96]	; 0x60
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 800225a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2101      	movs	r1, #1
 8002268:	2019      	movs	r0, #25
 800226a:	f001 fd04 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800226e:	2019      	movs	r0, #25
 8002270:	f001 fd1b 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 8002274:	e018      	b.n	80022a8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_TIM_Base_MspInit+0x184>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d113      	bne.n	80022a8 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 8002286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228a:	6613      	str	r3, [r2, #96]	; 0x60
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_TIM_Base_MspInit+0x170>)
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	201a      	movs	r0, #26
 800229e:	f001 fcea 	bl	8003c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80022a2:	201a      	movs	r0, #26
 80022a4:	f001 fd01 	bl	8003caa <HAL_NVIC_EnableIRQ>
}
 80022a8:	bf00      	nop
 80022aa:	3738      	adds	r7, #56	; 0x38
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40001000 	.word	0x40001000
 80022b8:	40013400 	.word	0x40013400
 80022bc:	40014000 	.word	0x40014000
 80022c0:	40014400 	.word	0x40014400
 80022c4:	40014800 	.word	0x40014800

080022c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022cc:	480d      	ldr	r0, [pc, #52]	; (8002304 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ce:	490e      	ldr	r1, [pc, #56]	; (8002308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <LoopForever+0xe>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022d4:	e002      	b.n	80022dc <LoopCopyDataInit>

080022d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022da:	3304      	adds	r3, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e0:	d3f9      	bcc.n	80022d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022e4:	4c0b      	ldr	r4, [pc, #44]	; (8002314 <LoopForever+0x16>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e8:	e001      	b.n	80022ee <LoopFillZerobss>

080022ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ec:	3204      	adds	r2, #4

080022ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f0:	d3fb      	bcc.n	80022ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022f2:	f7ff fc9d 	bl	8001c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f6:	f006 fa8b 	bl	8008810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fa:	f7ff f863 	bl	80013c4 <main>

080022fe <LoopForever>:

LoopForever:
    b LoopForever
 80022fe:	e7fe      	b.n	80022fe <LoopForever>
  ldr   r0, =_estack
 8002300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	200004dc 	.word	0x200004dc
  ldr r2, =_sidata
 800230c:	08009eac 	.word	0x08009eac
  ldr r2, =_sbss
 8002310:	200004dc 	.word	0x200004dc
  ldr r4, =_ebss
 8002314:	200009d4 	.word	0x200009d4

08002318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC1_2_IRQHandler>

0800231a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f001 fc9b 	bl	8003c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f80e 	bl	800234c <HAL_InitTick>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	e001      	b.n	8002340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800233c:	f7ff fa5a 	bl	80017f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002340:	79fb      	ldrb	r3, [r7, #7]

}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_InitTick+0x68>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d022      	beq.n	80023a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_InitTick+0x6c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_InitTick+0x68>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fca6 	bl	8003cc6 <HAL_SYSTICK_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	d809      	bhi.n	800239a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002386:	2200      	movs	r2, #0
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238e:	f001 fc72 	bl	8003c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_InitTick+0x70>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e007      	b.n	80023aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e004      	b.n	80023aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e001      	b.n	80023aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200003d4 	.word	0x200003d4
 80023b8:	200003cc 	.word	0x200003cc
 80023bc:	200003d0 	.word	0x200003d0

080023c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_IncTick+0x1c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_IncTick+0x20>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_IncTick+0x1c>)
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	200009cc 	.word	0x200009cc
 80023e0:	200003d4 	.word	0x200003d4

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200009cc 	.word	0x200009cc

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff ffee 	bl	80023e4 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002414:	d004      	beq.n	8002420 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_Delay+0x40>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002420:	bf00      	nop
 8002422:	f7ff ffdf 	bl	80023e4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	429a      	cmp	r2, r3
 8002430:	d8f7      	bhi.n	8002422 <HAL_Delay+0x26>
  {
  }
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200003d4 	.word	0x200003d4

08002440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024a8:	b490      	push	{r4, r7}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024c4:	6822      	ldr	r2, [r4, #0]
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <LL_ADC_SetOffset+0x40>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024da:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc90      	pop	{r4, r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	03fff000 	.word	0x03fff000

080024ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024ec:	b490      	push	{r4, r7}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3360      	adds	r3, #96	; 0x60
 80024fa:	461a      	mov	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bc90      	pop	{r4, r7}
 8002512:	4770      	bx	lr

08002514 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002514:	b490      	push	{r4, r7}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3360      	adds	r3, #96	; 0x60
 8002524:	461a      	mov	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4313      	orrs	r3, r2
 8002538:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bc90      	pop	{r4, r7}
 8002542:	4770      	bx	lr

08002544 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002544:	b490      	push	{r4, r7}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3360      	adds	r3, #96	; 0x60
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4313      	orrs	r3, r2
 8002568:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bc90      	pop	{r4, r7}
 8002572:	4770      	bx	lr

08002574 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002574:	b490      	push	{r4, r7}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3360      	adds	r3, #96	; 0x60
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4313      	orrs	r3, r2
 8002598:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc90      	pop	{r4, r7}
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	615a      	str	r2, [r3, #20]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ca:	b490      	push	{r4, r7}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3330      	adds	r3, #48	; 0x30
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	4413      	add	r3, r2
 80025e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80025ea:	6822      	ldr	r2, [r4, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	211f      	movs	r1, #31
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	f003 011f 	and.w	r1, r3, #31
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	4313      	orrs	r3, r2
 8002610:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bc90      	pop	{r4, r7}
 800261a:	4770      	bx	lr

0800261c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800261c:	b490      	push	{r4, r7}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3314      	adds	r3, #20
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	0e5b      	lsrs	r3, r3, #25
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	4413      	add	r3, r2
 800263a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0d1b      	lsrs	r3, r3, #20
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2107      	movs	r1, #7
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	0d1b      	lsrs	r3, r3, #20
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	4313      	orrs	r3, r2
 8002660:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bc90      	pop	{r4, r7}
 800266a:	4770      	bx	lr

0800266c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	43db      	mvns	r3, r3
 8002686:	401a      	ands	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0318 	and.w	r3, r3, #24
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002690:	40d9      	lsrs	r1, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	400b      	ands	r3, r1
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	431a      	orrs	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	0007ffff 	.word	0x0007ffff

080026b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6093      	str	r3, [r2, #8]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ec:	d101      	bne.n	80026f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800273c:	d101      	bne.n	8002742 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <LL_ADC_IsEnabled+0x18>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <LL_ADC_IsEnabled+0x1a>
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b04      	cmp	r3, #4
 8002788:	d101      	bne.n	800278e <LL_ADC_REG_IsConversionOngoing+0x18>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d101      	bne.n	80027b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1ad      	b.n	8002b3a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fd fff1 	bl	80007d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff67 	bl	80026d8 <LL_ADC_IsDeepPowerDownEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff4d 	bl	80026b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff82 	bl	8002728 <LL_ADC_IsInternalRegulatorEnabled>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d113      	bne.n	8002852 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff66 	bl	8002700 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002834:	4b9e      	ldr	r3, [pc, #632]	; (8002ab0 <HAL_ADC_Init+0x2ec>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	4a9e      	ldr	r2, [pc, #632]	; (8002ab4 <HAL_ADC_Init+0x2f0>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002844:	e002      	b.n	800284c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f9      	bne.n	8002846 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff66 	bl	8002728 <LL_ADC_IsInternalRegulatorEnabled>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	f043 0210 	orr.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff77 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 8002888:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 8148 	bne.w	8002b28 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8144 	bne.w	8002b28 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028a8:	f043 0202 	orr.w	r2, r3, #2
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff4b 	bl	8002750 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d141      	bne.n	8002944 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c8:	d004      	beq.n	80028d4 <HAL_ADC_Init+0x110>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a7a      	ldr	r2, [pc, #488]	; (8002ab8 <HAL_ADC_Init+0x2f4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10f      	bne.n	80028f4 <HAL_ADC_Init+0x130>
 80028d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028d8:	f7ff ff3a 	bl	8002750 <LL_ADC_IsEnabled>
 80028dc:	4604      	mov	r4, r0
 80028de:	4876      	ldr	r0, [pc, #472]	; (8002ab8 <HAL_ADC_Init+0x2f4>)
 80028e0:	f7ff ff36 	bl	8002750 <LL_ADC_IsEnabled>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4323      	orrs	r3, r4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e012      	b.n	800291a <HAL_ADC_Init+0x156>
 80028f4:	4871      	ldr	r0, [pc, #452]	; (8002abc <HAL_ADC_Init+0x2f8>)
 80028f6:	f7ff ff2b 	bl	8002750 <LL_ADC_IsEnabled>
 80028fa:	4604      	mov	r4, r0
 80028fc:	4870      	ldr	r0, [pc, #448]	; (8002ac0 <HAL_ADC_Init+0x2fc>)
 80028fe:	f7ff ff27 	bl	8002750 <LL_ADC_IsEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	431c      	orrs	r4, r3
 8002906:	486f      	ldr	r0, [pc, #444]	; (8002ac4 <HAL_ADC_Init+0x300>)
 8002908:	f7ff ff22 	bl	8002750 <LL_ADC_IsEnabled>
 800290c:	4603      	mov	r3, r0
 800290e:	4323      	orrs	r3, r4
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d012      	beq.n	8002944 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002926:	d004      	beq.n	8002932 <HAL_ADC_Init+0x16e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a62      	ldr	r2, [pc, #392]	; (8002ab8 <HAL_ADC_Init+0x2f4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Init+0x172>
 8002932:	4a65      	ldr	r2, [pc, #404]	; (8002ac8 <HAL_ADC_Init+0x304>)
 8002934:	e000      	b.n	8002938 <HAL_ADC_Init+0x174>
 8002936:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_ADC_Init+0x308>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f7ff fd7e 	bl	8002440 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7f5b      	ldrb	r3, [r3, #29]
 8002948:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800294e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002954:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800295a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002962:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800296e:	2b01      	cmp	r3, #1
 8002970:	d106      	bne.n	8002980 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	045b      	lsls	r3, r3, #17
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <HAL_ADC_Init+0x30c>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	69b9      	ldr	r1, [r7, #24]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fed3 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 80029d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fee0 	bl	800279c <LL_ADC_INJ_IsConversionOngoing>
 80029dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d17f      	bne.n	8002ae4 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d17c      	bne.n	8002ae4 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a06:	f023 0302 	bic.w	r3, r3, #2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d017      	beq.n	8002a4c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6911      	ldr	r1, [r2, #16]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a4a:	e013      	b.n	8002a74 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a70:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d12a      	bne.n	8002ad4 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a88:	f023 0304 	bic.w	r3, r3, #4
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a94:	4311      	orrs	r1, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	e019      	b.n	8002ae4 <HAL_ADC_Init+0x320>
 8002ab0:	200003cc 	.word	0x200003cc
 8002ab4:	053e2d63 	.word	0x053e2d63
 8002ab8:	50000100 	.word	0x50000100
 8002abc:	50000400 	.word	0x50000400
 8002ac0:	50000500 	.word	0x50000500
 8002ac4:	50000600 	.word	0x50000600
 8002ac8:	50000300 	.word	0x50000300
 8002acc:	50000700 	.word	0x50000700
 8002ad0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d10c      	bne.n	8002b06 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f023 010f 	bic.w	r1, r3, #15
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
 8002b04:	e007      	b.n	8002b16 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 020f 	bic.w	r2, r2, #15
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b26:	e007      	b.n	8002b38 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	f043 0210 	orr.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop

08002b44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0a6      	sub	sp, #152	; 0x98
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x22>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e38e      	b.n	8003284 <HAL_ADC_ConfigChannel+0x740>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fdff 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 836f 	bne.w	800325e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f7ff fd1c 	bl	80025ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fded 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 8002b9c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fdf9 	bl	800279c <LL_ADC_INJ_IsConversionOngoing>
 8002baa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 817b 	bne.w	8002eae <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 8176 	bne.w	8002eae <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bca:	d10f      	bne.n	8002bec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7ff fd20 	bl	800261c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fcdd 	bl	80025a4 <LL_ADC_SetSamplingTimeCommonConfig>
 8002bea:	e00e      	b.n	8002c0a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f7ff fd0f 	bl	800261c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fccd 	bl	80025a4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d022      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6919      	ldr	r1, [r3, #16]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c3c:	f7ff fc34 	bl	80024a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f7ff fc79 	bl	8002544 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6919      	ldr	r1, [r3, #16]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	7f1b      	ldrb	r3, [r3, #28]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d102      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x124>
 8002c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x126>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f7ff fc82 	bl	8002574 <LL_ADC_SetOffsetSaturation>
 8002c70:	e11d      	b.n	8002eae <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fc37 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x15a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fc2c 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	e012      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x180>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fc21 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x198>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	e00a      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x1ae>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fc08 	bl	8002514 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fbee 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1ec>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fbe3 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	f003 021f 	and.w	r2, r3, #31
 8002d2e:	e010      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x20e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fbd8 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x226>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0e9b      	lsrs	r3, r3, #26
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	e00a      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x23c>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d106      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fbc1 	bl	8002514 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2102      	movs	r1, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fba7 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x27a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2102      	movs	r1, #2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fb9c 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	0e9b      	lsrs	r3, r3, #26
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	e010      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x29c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fb91 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x2b4>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	e00a      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2ca>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fb7a 	bl	8002514 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2103      	movs	r1, #3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb60 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x308>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fb55 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 021f 	and.w	r2, r3, #31
 8002e4a:	e010      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x32a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2103      	movs	r1, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fb4a 	bl	80024ec <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x342>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	e00a      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x358>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d106      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fb33 	bl	8002514 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fc4c 	bl	8002750 <LL_ADC_IsEnabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 810c 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f7ff fbcd 	bl	800266c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4aaf      	ldr	r2, [pc, #700]	; (8003194 <HAL_ADC_ConfigChannel+0x650>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	f040 80fd 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x3c2>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0e9b      	lsrs	r3, r3, #26
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	bf94      	ite	ls
 8002efe:	2301      	movls	r3, #1
 8002f00:	2300      	movhi	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e012      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x3e8>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2b09      	cmp	r3, #9
 8002f24:	bf94      	ite	ls
 8002f26:	2301      	movls	r3, #1
 8002f28:	2300      	movhi	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d064      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x408>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	069b      	lsls	r3, r3, #26
 8002f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4a:	e00e      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x426>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	069b      	lsls	r3, r3, #26
 8002f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x446>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0e9b      	lsrs	r3, r3, #26
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	e010      	b.n	8002fac <HAL_ADC_ConfigChannel+0x468>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	ea42 0103 	orr.w	r1, r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x48e>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	0e9b      	lsrs	r3, r3, #26
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	051b      	lsls	r3, r3, #20
 8002fd0:	e011      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x4b2>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	e069      	b.n	80030ce <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x4d2>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003014:	e00e      	b.n	8003034 <HAL_ADC_ConfigChannel+0x4f0>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	61fb      	str	r3, [r7, #28]
  return result;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	069b      	lsls	r3, r3, #26
 8003030:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x510>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	3301      	adds	r3, #1
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	e010      	b.n	8003076 <HAL_ADC_ConfigChannel+0x532>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	617b      	str	r3, [r7, #20]
  return result;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	ea42 0103 	orr.w	r1, r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x55e>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	3301      	adds	r3, #1
 800308e:	f003 021f 	and.w	r2, r3, #31
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	3b1e      	subs	r3, #30
 800309a:	051b      	lsls	r3, r3, #20
 800309c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030a0:	e014      	b.n	80030cc <HAL_ADC_ConfigChannel+0x588>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	60fb      	str	r3, [r7, #12]
  return result;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 021f 	and.w	r2, r3, #31
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	051b      	lsls	r3, r3, #20
 80030c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030cc:	430b      	orrs	r3, r1
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6892      	ldr	r2, [r2, #8]
 80030d2:	4619      	mov	r1, r3
 80030d4:	f7ff faa2 	bl	800261c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_ADC_ConfigChannel+0x654>)
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80c9 	beq.w	8003278 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ee:	d004      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x5b6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <HAL_ADC_ConfigChannel+0x658>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x5ba>
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_ADC_ConfigChannel+0x65c>)
 80030fc:	e000      	b.n	8003100 <HAL_ADC_ConfigChannel+0x5bc>
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_ADC_ConfigChannel+0x660>)
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f9c3 	bl	800248c <LL_ADC_GetCommonPathInternalCh>
 8003106:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_ADC_ConfigChannel+0x664>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_ADC_ConfigChannel+0x5da>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <HAL_ADC_ConfigChannel+0x668>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d14e      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800311e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d148      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003132:	d005      	beq.n	8003140 <HAL_ADC_ConfigChannel+0x5fc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <HAL_ADC_ConfigChannel+0x66c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f040 8099 	bne.w	8003272 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003148:	d004      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x610>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_ADC_ConfigChannel+0x658>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x614>
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <HAL_ADC_ConfigChannel+0x65c>)
 8003156:	e000      	b.n	800315a <HAL_ADC_ConfigChannel+0x616>
 8003158:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <HAL_ADC_ConfigChannel+0x660>)
 800315a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f7ff f97e 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_ADC_ConfigChannel+0x670>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <HAL_ADC_ConfigChannel+0x674>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	099a      	lsrs	r2, r3, #6
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003182:	e002      	b.n	800318a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3b01      	subs	r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f9      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003190:	e06f      	b.n	8003272 <HAL_ADC_ConfigChannel+0x72e>
 8003192:	bf00      	nop
 8003194:	407f0000 	.word	0x407f0000
 8003198:	80080000 	.word	0x80080000
 800319c:	50000100 	.word	0x50000100
 80031a0:	50000300 	.word	0x50000300
 80031a4:	50000700 	.word	0x50000700
 80031a8:	c3210000 	.word	0xc3210000
 80031ac:	90c00010 	.word	0x90c00010
 80031b0:	50000600 	.word	0x50000600
 80031b4:	200003cc 	.word	0x200003cc
 80031b8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a32      	ldr	r2, [pc, #200]	; (800328c <HAL_ADC_ConfigChannel+0x748>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d125      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x6ce>
 80031c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11f      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <HAL_ADC_ConfigChannel+0x74c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d104      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x6a2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_ADC_ConfigChannel+0x750>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d047      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ee:	d004      	beq.n	80031fa <HAL_ADC_ConfigChannel+0x6b6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a26      	ldr	r2, [pc, #152]	; (8003290 <HAL_ADC_ConfigChannel+0x74c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x6ba>
 80031fa:	4a27      	ldr	r2, [pc, #156]	; (8003298 <HAL_ADC_ConfigChannel+0x754>)
 80031fc:	e000      	b.n	8003200 <HAL_ADC_ConfigChannel+0x6bc>
 80031fe:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_ADC_ConfigChannel+0x758>)
 8003200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f7ff f92b 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003210:	e031      	b.n	8003276 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <HAL_ADC_ConfigChannel+0x75c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d12d      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800321c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d127      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_ADC_ConfigChannel+0x74c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d022      	beq.n	8003278 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323a:	d004      	beq.n	8003246 <HAL_ADC_ConfigChannel+0x702>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <HAL_ADC_ConfigChannel+0x74c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x706>
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_ADC_ConfigChannel+0x754>)
 8003248:	e000      	b.n	800324c <HAL_ADC_ConfigChannel+0x708>
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_ADC_ConfigChannel+0x758>)
 800324c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f7ff f905 	bl	8002466 <LL_ADC_SetCommonPathInternalCh>
 800325c:	e00c      	b.n	8003278 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003270:	e002      	b.n	8003278 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003272:	bf00      	nop
 8003274:	e000      	b.n	8003278 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003276:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003280:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003284:	4618      	mov	r0, r3
 8003286:	3798      	adds	r7, #152	; 0x98
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	c7520000 	.word	0xc7520000
 8003290:	50000100 	.word	0x50000100
 8003294:	50000500 	.word	0x50000500
 8003298:	50000300 	.word	0x50000300
 800329c:	50000700 	.word	0x50000700
 80032a0:	cb840000 	.word	0xcb840000

080032a4 <LL_ADC_IsEnabled>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <LL_ADC_IsEnabled+0x18>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <LL_ADC_IsEnabled+0x1a>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_REG_IsConversionOngoing>:
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b0a1      	sub	sp, #132	; 0x84
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800330a:	2302      	movs	r3, #2
 800330c:	e0e3      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800331e:	d102      	bne.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003320:	4b6f      	ldr	r3, [pc, #444]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	e009      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6e      	ldr	r2, [pc, #440]	; (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003330:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	e001      	b.n	800333a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0be      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffb5 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 8003360:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ffaf 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 80a0 	bne.w	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 809c 	bne.w	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003384:	d004      	beq.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a55      	ldr	r2, [pc, #340]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003390:	4b56      	ldr	r3, [pc, #344]	; (80034ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003392:	e000      	b.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003394:	4b56      	ldr	r3, [pc, #344]	; (80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003396:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d04b      	beq.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033b2:	035b      	lsls	r3, r3, #13
 80033b4:	430b      	orrs	r3, r1
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c4:	d004      	beq.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a45      	ldr	r2, [pc, #276]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10f      	bne.n	80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80033d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033d4:	f7ff ff66 	bl	80032a4 <LL_ADC_IsEnabled>
 80033d8:	4604      	mov	r4, r0
 80033da:	4841      	ldr	r0, [pc, #260]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80033dc:	f7ff ff62 	bl	80032a4 <LL_ADC_IsEnabled>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4323      	orrs	r3, r4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80033f0:	483c      	ldr	r0, [pc, #240]	; (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80033f2:	f7ff ff57 	bl	80032a4 <LL_ADC_IsEnabled>
 80033f6:	4604      	mov	r4, r0
 80033f8:	483b      	ldr	r0, [pc, #236]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033fa:	f7ff ff53 	bl	80032a4 <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	431c      	orrs	r4, r3
 8003402:	483c      	ldr	r0, [pc, #240]	; (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003404:	f7ff ff4e 	bl	80032a4 <LL_ADC_IsEnabled>
 8003408:	4603      	mov	r3, r0
 800340a:	4323      	orrs	r3, r4
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d056      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800341a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003422:	f023 030f 	bic.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	6811      	ldr	r1, [r2, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6892      	ldr	r2, [r2, #8]
 800342e:	430a      	orrs	r2, r1
 8003430:	431a      	orrs	r2, r3
 8003432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003434:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003436:	e047      	b.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003442:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344c:	d004      	beq.n	8003458 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10f      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003458:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800345c:	f7ff ff22 	bl	80032a4 <LL_ADC_IsEnabled>
 8003460:	4604      	mov	r4, r0
 8003462:	481f      	ldr	r0, [pc, #124]	; (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003464:	f7ff ff1e 	bl	80032a4 <LL_ADC_IsEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	4323      	orrs	r3, r4
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e012      	b.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003478:	481a      	ldr	r0, [pc, #104]	; (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800347a:	f7ff ff13 	bl	80032a4 <LL_ADC_IsEnabled>
 800347e:	4604      	mov	r4, r0
 8003480:	4819      	ldr	r0, [pc, #100]	; (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003482:	f7ff ff0f 	bl	80032a4 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	431c      	orrs	r4, r3
 800348a:	481a      	ldr	r0, [pc, #104]	; (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800348c:	f7ff ff0a 	bl	80032a4 <LL_ADC_IsEnabled>
 8003490:	4603      	mov	r3, r0
 8003492:	4323      	orrs	r3, r4
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034aa:	f023 030f 	bic.w	r3, r3, #15
 80034ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80034b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b2:	e009      	b.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034c6:	e000      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3784      	adds	r7, #132	; 0x84
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd90      	pop	{r4, r7, pc}
 80034de:	bf00      	nop
 80034e0:	50000100 	.word	0x50000100
 80034e4:	50000400 	.word	0x50000400
 80034e8:	50000500 	.word	0x50000500
 80034ec:	50000300 	.word	0x50000300
 80034f0:	50000700 	.word	0x50000700
 80034f4:	50000600 	.word	0x50000600

080034f8 <LL_EXTI_EnableIT_0_31>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <LL_EXTI_EnableIT_0_31+0x20>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4904      	ldr	r1, [pc, #16]	; (8003518 <LL_EXTI_EnableIT_0_31+0x20>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40010400 	.word	0x40010400

0800351c <LL_EXTI_EnableIT_32_63>:
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <LL_EXTI_EnableIT_32_63+0x20>)
 8003526:	6a1a      	ldr	r2, [r3, #32]
 8003528:	4904      	ldr	r1, [pc, #16]	; (800353c <LL_EXTI_EnableIT_32_63+0x20>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4313      	orrs	r3, r2
 800352e:	620b      	str	r3, [r1, #32]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40010400 	.word	0x40010400

08003540 <LL_EXTI_DisableIT_0_31>:
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <LL_EXTI_DisableIT_0_31+0x24>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	43db      	mvns	r3, r3
 8003550:	4904      	ldr	r1, [pc, #16]	; (8003564 <LL_EXTI_DisableIT_0_31+0x24>)
 8003552:	4013      	ands	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010400 	.word	0x40010400

08003568 <LL_EXTI_DisableIT_32_63>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <LL_EXTI_DisableIT_32_63+0x24>)
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	43db      	mvns	r3, r3
 8003578:	4904      	ldr	r1, [pc, #16]	; (800358c <LL_EXTI_DisableIT_32_63+0x24>)
 800357a:	4013      	ands	r3, r2
 800357c:	620b      	str	r3, [r1, #32]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40010400 	.word	0x40010400

08003590 <LL_EXTI_EnableEvent_0_31>:
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4904      	ldr	r1, [pc, #16]	; (80035b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40010400 	.word	0x40010400

080035b4 <LL_EXTI_EnableEvent_32_63>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80035be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c0:	4904      	ldr	r1, [pc, #16]	; (80035d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40010400 	.word	0x40010400

080035d8 <LL_EXTI_DisableEvent_0_31>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	4904      	ldr	r1, [pc, #16]	; (80035fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010400 	.word	0x40010400

08003600 <LL_EXTI_DisableEvent_32_63>:
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <LL_EXTI_DisableEvent_32_63+0x24>)
 800360a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	43db      	mvns	r3, r3
 8003610:	4904      	ldr	r1, [pc, #16]	; (8003624 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003612:	4013      	ands	r3, r2
 8003614:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40010400 	.word	0x40010400

08003628 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	4904      	ldr	r1, [pc, #16]	; (8003648 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40010400 	.word	0x40010400

0800364c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003658:	4904      	ldr	r1, [pc, #16]	; (800366c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4313      	orrs	r3, r2
 800365e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40010400 	.word	0x40010400

08003670 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	43db      	mvns	r3, r3
 8003680:	4904      	ldr	r1, [pc, #16]	; (8003694 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003682:	4013      	ands	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010400 	.word	0x40010400

08003698 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80036a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	4904      	ldr	r1, [pc, #16]	; (80036bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	628b      	str	r3, [r1, #40]	; 0x28
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40010400 	.word	0x40010400

080036c0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4904      	ldr	r1, [pc, #16]	; (80036e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60cb      	str	r3, [r1, #12]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40010400 	.word	0x40010400

080036e4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40010400 	.word	0x40010400

08003708 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	43db      	mvns	r3, r3
 8003718:	4904      	ldr	r1, [pc, #16]	; (800372c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800371a:	4013      	ands	r3, r2
 800371c:	60cb      	str	r3, [r1, #12]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010400 	.word	0x40010400

08003730 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	43db      	mvns	r3, r3
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003742:	4013      	ands	r3, r2
 8003744:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010400 	.word	0x40010400

08003758 <LL_EXTI_ClearFlag_0_31>:
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6153      	str	r3, [r2, #20]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010400 	.word	0x40010400

08003778 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010400 	.word	0x40010400

08003798 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e180      	b.n	8003ab6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c2:	d102      	bne.n	80037ca <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e175      	b.n	8003ab6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7f5b      	ldrb	r3, [r3, #29]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d108      	bne.n	80037e6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fd f88b 	bl	80008fc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037f0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b98      	ldr	r3, [pc, #608]	; (8003a78 <HAL_COMP_Init+0x2e0>)
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	6979      	ldr	r1, [r7, #20]
 8003820:	430b      	orrs	r3, r1
 8003822:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d015      	beq.n	800385e <HAL_COMP_Init+0xc6>
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d112      	bne.n	800385e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003838:	4b90      	ldr	r3, [pc, #576]	; (8003a7c <HAL_COMP_Init+0x2e4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	4a90      	ldr	r2, [pc, #576]	; (8003a80 <HAL_COMP_Init+0x2e8>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	099a      	lsrs	r2, r3, #6
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003850:	e002      	b.n	8003858 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f9      	bne.n	8003852 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a88      	ldr	r2, [pc, #544]	; (8003a84 <HAL_COMP_Init+0x2ec>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d028      	beq.n	80038ba <HAL_COMP_Init+0x122>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a86      	ldr	r2, [pc, #536]	; (8003a88 <HAL_COMP_Init+0x2f0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d020      	beq.n	80038b4 <HAL_COMP_Init+0x11c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a85      	ldr	r2, [pc, #532]	; (8003a8c <HAL_COMP_Init+0x2f4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_COMP_Init+0x116>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a83      	ldr	r2, [pc, #524]	; (8003a90 <HAL_COMP_Init+0x2f8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d010      	beq.n	80038a8 <HAL_COMP_Init+0x110>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a82      	ldr	r2, [pc, #520]	; (8003a94 <HAL_COMP_Init+0x2fc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d008      	beq.n	80038a2 <HAL_COMP_Init+0x10a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a80      	ldr	r2, [pc, #512]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_COMP_Init+0x106>
 800389a:	2301      	movs	r3, #1
 800389c:	e00f      	b.n	80038be <HAL_COMP_Init+0x126>
 800389e:	2302      	movs	r3, #2
 80038a0:	e00d      	b.n	80038be <HAL_COMP_Init+0x126>
 80038a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038a6:	e00a      	b.n	80038be <HAL_COMP_Init+0x126>
 80038a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038ac:	e007      	b.n	80038be <HAL_COMP_Init+0x126>
 80038ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80038b2:	e004      	b.n	80038be <HAL_COMP_Init+0x126>
 80038b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038b8:	e001      	b.n	80038be <HAL_COMP_Init+0x126>
 80038ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038be:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80b6 	beq.w	8003a3a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d011      	beq.n	80038fe <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a6e      	ldr	r2, [pc, #440]	; (8003a98 <HAL_COMP_Init+0x300>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_COMP_Init+0x156>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6c      	ldr	r2, [pc, #432]	; (8003a9c <HAL_COMP_Init+0x304>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d103      	bne.n	80038f6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80038ee:	6938      	ldr	r0, [r7, #16]
 80038f0:	f7ff feac 	bl	800364c <LL_EXTI_EnableRisingTrig_32_63>
 80038f4:	e014      	b.n	8003920 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80038f6:	6938      	ldr	r0, [r7, #16]
 80038f8:	f7ff fe96 	bl	8003628 <LL_EXTI_EnableRisingTrig_0_31>
 80038fc:	e010      	b.n	8003920 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a65      	ldr	r2, [pc, #404]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_COMP_Init+0x17a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a63      	ldr	r2, [pc, #396]	; (8003a9c <HAL_COMP_Init+0x304>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d103      	bne.n	800391a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003912:	6938      	ldr	r0, [r7, #16]
 8003914:	f7ff fec0 	bl	8003698 <LL_EXTI_DisableRisingTrig_32_63>
 8003918:	e002      	b.n	8003920 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800391a:	6938      	ldr	r0, [r7, #16]
 800391c:	f7ff fea8 	bl	8003670 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d011      	beq.n	8003950 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a59      	ldr	r2, [pc, #356]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_COMP_Init+0x1a8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_COMP_Init+0x304>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003940:	6938      	ldr	r0, [r7, #16]
 8003942:	f7ff fecf 	bl	80036e4 <LL_EXTI_EnableFallingTrig_32_63>
 8003946:	e014      	b.n	8003972 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003948:	6938      	ldr	r0, [r7, #16]
 800394a:	f7ff feb9 	bl	80036c0 <LL_EXTI_EnableFallingTrig_0_31>
 800394e:	e010      	b.n	8003972 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a50      	ldr	r2, [pc, #320]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_COMP_Init+0x1cc>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4f      	ldr	r2, [pc, #316]	; (8003a9c <HAL_COMP_Init+0x304>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d103      	bne.n	800396c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8003964:	6938      	ldr	r0, [r7, #16]
 8003966:	f7ff fee3 	bl	8003730 <LL_EXTI_DisableFallingTrig_32_63>
 800396a:	e002      	b.n	8003972 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800396c:	6938      	ldr	r0, [r7, #16]
 800396e:	f7ff fecb 	bl	8003708 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a48      	ldr	r2, [pc, #288]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_COMP_Init+0x1ee>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a46      	ldr	r2, [pc, #280]	; (8003a9c <HAL_COMP_Init+0x304>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d103      	bne.n	800398e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003986:	6938      	ldr	r0, [r7, #16]
 8003988:	f7ff fef6 	bl	8003778 <LL_EXTI_ClearFlag_32_63>
 800398c:	e002      	b.n	8003994 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800398e:	6938      	ldr	r0, [r7, #16]
 8003990:	f7ff fee2 	bl	8003758 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d011      	beq.n	80039c4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3c      	ldr	r2, [pc, #240]	; (8003a98 <HAL_COMP_Init+0x300>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_COMP_Init+0x21c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a3b      	ldr	r2, [pc, #236]	; (8003a9c <HAL_COMP_Init+0x304>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d103      	bne.n	80039bc <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80039b4:	6938      	ldr	r0, [r7, #16]
 80039b6:	f7ff fdfd 	bl	80035b4 <LL_EXTI_EnableEvent_32_63>
 80039ba:	e014      	b.n	80039e6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80039bc:	6938      	ldr	r0, [r7, #16]
 80039be:	f7ff fde7 	bl	8003590 <LL_EXTI_EnableEvent_0_31>
 80039c2:	e010      	b.n	80039e6 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <HAL_COMP_Init+0x300>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_COMP_Init+0x240>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a32      	ldr	r2, [pc, #200]	; (8003a9c <HAL_COMP_Init+0x304>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80039d8:	6938      	ldr	r0, [r7, #16]
 80039da:	f7ff fe11 	bl	8003600 <LL_EXTI_DisableEvent_32_63>
 80039de:	e002      	b.n	80039e6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80039e0:	6938      	ldr	r0, [r7, #16]
 80039e2:	f7ff fdf9 	bl	80035d8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d011      	beq.n	8003a16 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <HAL_COMP_Init+0x300>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_COMP_Init+0x26e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_COMP_Init+0x304>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d103      	bne.n	8003a0e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003a06:	6938      	ldr	r0, [r7, #16]
 8003a08:	f7ff fd88 	bl	800351c <LL_EXTI_EnableIT_32_63>
 8003a0c:	e04b      	b.n	8003aa6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003a0e:	6938      	ldr	r0, [r7, #16]
 8003a10:	f7ff fd72 	bl	80034f8 <LL_EXTI_EnableIT_0_31>
 8003a14:	e047      	b.n	8003aa6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_COMP_Init+0x292>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_COMP_Init+0x304>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d103      	bne.n	8003a32 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003a2a:	6938      	ldr	r0, [r7, #16]
 8003a2c:	f7ff fd9c 	bl	8003568 <LL_EXTI_DisableIT_32_63>
 8003a30:	e039      	b.n	8003aa6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f7ff fd84 	bl	8003540 <LL_EXTI_DisableIT_0_31>
 8003a38:	e035      	b.n	8003aa6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_COMP_Init+0x2b6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_COMP_Init+0x304>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d103      	bne.n	8003a56 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003a4e:	6938      	ldr	r0, [r7, #16]
 8003a50:	f7ff fdd6 	bl	8003600 <LL_EXTI_DisableEvent_32_63>
 8003a54:	e002      	b.n	8003a5c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003a56:	6938      	ldr	r0, [r7, #16]
 8003a58:	f7ff fdbe 	bl	80035d8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <HAL_COMP_Init+0x300>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_COMP_Init+0x2d8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <HAL_COMP_Init+0x304>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d117      	bne.n	8003aa0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8003a70:	6938      	ldr	r0, [r7, #16]
 8003a72:	f7ff fd79 	bl	8003568 <LL_EXTI_DisableIT_32_63>
 8003a76:	e016      	b.n	8003aa6 <HAL_COMP_Init+0x30e>
 8003a78:	ff007e0f 	.word	0xff007e0f
 8003a7c:	200003cc 	.word	0x200003cc
 8003a80:	053e2d63 	.word	0x053e2d63
 8003a84:	40010200 	.word	0x40010200
 8003a88:	40010204 	.word	0x40010204
 8003a8c:	40010208 	.word	0x40010208
 8003a90:	4001020c 	.word	0x4001020c
 8003a94:	40010210 	.word	0x40010210
 8003a98:	40010214 	.word	0x40010214
 8003a9c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003aa0:	6938      	ldr	r0, [r7, #16]
 8003aa2:	f7ff fd4d 	bl	8003540 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7f5b      	ldrb	r3, [r3, #29]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <__NVIC_SetPriorityGrouping>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003adc:	4013      	ands	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003af2:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <__NVIC_SetPriorityGrouping+0x44>)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	60d3      	str	r3, [r2, #12]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <__NVIC_GetPriorityGrouping>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <__NVIC_GetPriorityGrouping+0x18>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	f003 0307 	and.w	r3, r3, #7
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_EnableIRQ>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	db0b      	blt.n	8003b4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4907      	ldr	r1, [pc, #28]	; (8003b5c <__NVIC_EnableIRQ+0x38>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2001      	movs	r0, #1
 8003b46:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000e100 	.word	0xe000e100

08003b60 <__NVIC_SetPriority>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db0a      	blt.n	8003b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	490c      	ldr	r1, [pc, #48]	; (8003bac <__NVIC_SetPriority+0x4c>)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	440b      	add	r3, r1
 8003b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b88:	e00a      	b.n	8003ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4908      	ldr	r1, [pc, #32]	; (8003bb0 <__NVIC_SetPriority+0x50>)
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	3b04      	subs	r3, #4
 8003b98:	0112      	lsls	r2, r2, #4
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	761a      	strb	r2, [r3, #24]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000e100 	.word	0xe000e100
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <NVIC_EncodePriority>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f1c3 0307 	rsb	r3, r3, #7
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf28      	it	cs
 8003bd2:	2304      	movcs	r3, #4
 8003bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d902      	bls.n	8003be4 <NVIC_EncodePriority+0x30>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3b03      	subs	r3, #3
 8003be2:	e000      	b.n	8003be6 <NVIC_EncodePriority+0x32>
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	43d9      	mvns	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	4313      	orrs	r3, r2
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <SysTick_Config>:
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2c:	d301      	bcc.n	8003c32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e00f      	b.n	8003c52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <SysTick_Config+0x40>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c3a:	210f      	movs	r1, #15
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c40:	f7ff ff8e 	bl	8003b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <SysTick_Config+0x40>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <SysTick_Config+0x40>)
 8003c4c:	2207      	movs	r2, #7
 8003c4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000e010 	.word	0xe000e010

08003c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff29 	bl	8003ac0 <__NVIC_SetPriorityGrouping>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c84:	f7ff ff40 	bl	8003b08 <__NVIC_GetPriorityGrouping>
 8003c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff90 	bl	8003bb4 <NVIC_EncodePriority>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff5f 	bl	8003b60 <__NVIC_SetPriority>
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff33 	bl	8003b24 <__NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ffa4 	bl	8003c1c <SysTick_Config>
 8003cd4:	4603      	mov	r3, r0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e014      	b.n	8003d1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	791b      	ldrb	r3, [r3, #4]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fc feb1 	bl	8000a68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	795b      	ldrb	r3, [r3, #5]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_DAC_Start+0x16>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e043      	b.n	8003dc0 <HAL_DAC_Start+0x9e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f7fe fb4d 	bl	80023fc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d11d      	bne.n	8003db2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e014      	b.n	8003db2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2102      	movs	r1, #2
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d107      	bne.n	8003db2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0202 	orr.w	r2, r2, #2
 8003db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	795b      	ldrb	r3, [r3, #5]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_DAC_Start_DMA+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0a1      	b.n	8003f2a <HAL_DAC_Start_DMA+0x162>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2202      	movs	r2, #2
 8003df0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d12a      	bne.n	8003e4e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a4d      	ldr	r2, [pc, #308]	; (8003f34 <HAL_DAC_Start_DMA+0x16c>)
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a4c      	ldr	r2, [pc, #304]	; (8003f38 <HAL_DAC_Start_DMA+0x170>)
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a4b      	ldr	r2, [pc, #300]	; (8003f3c <HAL_DAC_Start_DMA+0x174>)
 8003e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d009      	beq.n	8003e3a <HAL_DAC_Start_DMA+0x72>
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d00c      	beq.n	8003e44 <HAL_DAC_Start_DMA+0x7c>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d000      	beq.n	8003e30 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003e2e:	e039      	b.n	8003ea4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	613b      	str	r3, [r7, #16]
        break;
 8003e38:	e034      	b.n	8003ea4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	613b      	str	r3, [r7, #16]
        break;
 8003e42:	e02f      	b.n	8003ea4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3310      	adds	r3, #16
 8003e4a:	613b      	str	r3, [r7, #16]
        break;
 8003e4c:	e02a      	b.n	8003ea4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <HAL_DAC_Start_DMA+0x178>)
 8003e54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <HAL_DAC_Start_DMA+0x17c>)
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a39      	ldr	r2, [pc, #228]	; (8003f48 <HAL_DAC_Start_DMA+0x180>)
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e74:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d009      	beq.n	8003e90 <HAL_DAC_Start_DMA+0xc8>
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d00c      	beq.n	8003e9a <HAL_DAC_Start_DMA+0xd2>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d000      	beq.n	8003e86 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003e84:	e00e      	b.n	8003ea4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	613b      	str	r3, [r7, #16]
        break;
 8003e8e:	e009      	b.n	8003ea4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3318      	adds	r3, #24
 8003e96:	613b      	str	r3, [r7, #16]
        break;
 8003e98:	e004      	b.n	8003ea4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	331c      	adds	r3, #28
 8003ea0:	613b      	str	r3, [r7, #16]
        break;
 8003ea2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d111      	bne.n	8003ece <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6898      	ldr	r0, [r3, #8]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	f000 fb66 	bl	8004594 <HAL_DMA_Start_IT>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]
 8003ecc:	e010      	b.n	8003ef0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003edc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	68d8      	ldr	r0, [r3, #12]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	f000 fb54 	bl	8004594 <HAL_DMA_Start_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10f      	bne.n	8003f1c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7fe fa71 	bl	80023fc <HAL_Delay>
 8003f1a:	e005      	b.n	8003f28 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08004331 	.word	0x08004331
 8003f38:	08004353 	.word	0x08004353
 8003f3c:	0800436f 	.word	0x0800436f
 8003f40:	080043d9 	.word	0x080043d9
 8003f44:	080043fb 	.word	0x080043fb
 8003f48:	08004417 	.word	0x08004417

08003f4c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	3308      	adds	r3, #8
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e004      	b.n	8003f86 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	3314      	adds	r3, #20
 8003f84:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	795b      	ldrb	r3, [r3, #5]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_DAC_ConfigChannel+0x1c>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e194      	b.n	800431e <HAL_DAC_ConfigChannel+0x346>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d174      	bne.n	80040f2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d137      	bne.n	800407e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800400e:	f7fe f9e9 	bl	80023e4 <HAL_GetTick>
 8004012:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004014:	e011      	b.n	800403a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004016:	f7fe f9e5 	bl	80023e4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d90a      	bls.n	800403a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f043 0208 	orr.w	r2, r3, #8
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2203      	movs	r2, #3
 8004034:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e171      	b.n	800431e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e6      	bne.n	8004016 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004048:	2001      	movs	r0, #1
 800404a:	f7fe f9d7 	bl	80023fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
 8004058:	e01e      	b.n	8004098 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800405a:	f7fe f9c3 	bl	80023e4 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d90a      	bls.n	800407e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f043 0208 	orr.w	r2, r3, #8
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2203      	movs	r2, #3
 8004078:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e14f      	b.n	800431e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	2b00      	cmp	r3, #0
 8004086:	dbe8      	blt.n	800405a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004088:	2001      	movs	r0, #1
 800408a:	f7fe f9b7 	bl	80023fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	ea02 0103 	and.w	r1, r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	409a      	lsls	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	21ff      	movs	r1, #255	; 0xff
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	ea02 0103 	and.w	r1, r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	409a      	lsls	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d11d      	bne.n	8004136 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	221f      	movs	r2, #31
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004112:	4013      	ands	r3, r2
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	4313      	orrs	r3, r2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2207      	movs	r2, #7
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	4013      	ands	r3, r2
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800415e:	2300      	movs	r3, #0
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	e011      	b.n	8004188 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004170:	2301      	movs	r3, #1
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	e008      	b.n	8004188 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800417e:	2301      	movs	r3, #1
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	e001      	b.n	8004188 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004184:	2300      	movs	r3, #0
 8004186:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041aa:	4013      	ands	r3, r2
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d102      	bne.n	80041bc <HAL_DAC_ConfigChannel+0x1e4>
 80041b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ba:	e000      	b.n	80041be <HAL_DAC_ConfigChannel+0x1e6>
 80041bc:	2300      	movs	r3, #0
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	4013      	ands	r3, r2
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	795b      	ldrb	r3, [r3, #5]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d102      	bne.n	80041e8 <HAL_DAC_ConfigChannel+0x210>
 80041e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041e6:	e000      	b.n	80041ea <HAL_DAC_ConfigChannel+0x212>
 80041e8:	2300      	movs	r3, #0
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d114      	bne.n	800422a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004200:	f001 fa9e 	bl	8005740 <HAL_RCC_GetHCLKFreq>
 8004204:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4a47      	ldr	r2, [pc, #284]	; (8004328 <HAL_DAC_ConfigChannel+0x350>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d904      	bls.n	8004218 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
 8004216:	e00d      	b.n	8004234 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4a44      	ldr	r2, [pc, #272]	; (800432c <HAL_DAC_ConfigChannel+0x354>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d909      	bls.n	8004234 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
 8004228:	e004      	b.n	8004234 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	4313      	orrs	r3, r2
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	4313      	orrs	r3, r2
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	400a      	ands	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004286:	4013      	ands	r3, r2
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	4313      	orrs	r3, r2
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	22c0      	movs	r2, #192	; 0xc0
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43da      	mvns	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	400a      	ands	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	089b      	lsrs	r3, r3, #2
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	ea02 0103 	and.w	r1, r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3728      	adds	r7, #40	; 0x28
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	09896800 	.word	0x09896800
 800432c:	04c4b400 	.word	0x04c4b400

08004330 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff fe2c 	bl	8003f9c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	711a      	strb	r2, [r3, #4]
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fe25 	bl	8003fb0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f043 0204 	orr.w	r2, r3, #4
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fe1b 	bl	8003fc4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	711a      	strb	r2, [r3, #4]
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff ffd8 	bl	800439c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	711a      	strb	r2, [r3, #4]
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff ffd1 	bl	80043b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f043 0204 	orr.w	r2, r3, #4
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff ffc7 	bl	80043c4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	711a      	strb	r2, [r3, #4]
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e08d      	b.n	8004572 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_DMA_Init+0x138>)
 800445e:	429a      	cmp	r2, r3
 8004460:	d80f      	bhi.n	8004482 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	4b45      	ldr	r3, [pc, #276]	; (8004580 <HAL_DMA_Init+0x13c>)
 800446a:	4413      	add	r3, r2
 800446c:	4a45      	ldr	r2, [pc, #276]	; (8004584 <HAL_DMA_Init+0x140>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	009a      	lsls	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a42      	ldr	r2, [pc, #264]	; (8004588 <HAL_DMA_Init+0x144>)
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
 8004480:	e00e      	b.n	80044a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	4b40      	ldr	r3, [pc, #256]	; (800458c <HAL_DMA_Init+0x148>)
 800448a:	4413      	add	r3, r2
 800448c:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <HAL_DMA_Init+0x140>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	009a      	lsls	r2, r3, #2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <HAL_DMA_Init+0x14c>)
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f9b6 	bl	8004864 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004500:	d102      	bne.n	8004508 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800451c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d010      	beq.n	8004548 <HAL_DMA_Init+0x104>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b04      	cmp	r3, #4
 800452c:	d80c      	bhi.n	8004548 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f9d6 	bl	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	e008      	b.n	800455a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40020407 	.word	0x40020407
 8004580:	bffdfff8 	.word	0xbffdfff8
 8004584:	cccccccd 	.word	0xcccccccd
 8004588:	40020000 	.word	0x40020000
 800458c:	bffdfbf8 	.word	0xbffdfbf8
 8004590:	40020400 	.word	0x40020400

08004594 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_DMA_Start_IT+0x20>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e066      	b.n	8004682 <HAL_DMA_Start_IT+0xee>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d155      	bne.n	8004674 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f8fb 	bl	80047e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 020e 	orr.w	r2, r2, #14
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e00f      	b.n	800462c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0204 	bic.w	r2, r2, #4
 800461a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 020a 	orr.w	r2, r2, #10
 800462a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004648:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004660:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e005      	b.n	8004680 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800467c:	2302      	movs	r3, #2
 800467e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2204      	movs	r2, #4
 80046ac:	409a      	lsls	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d026      	beq.n	8004704 <HAL_DMA_IRQHandler+0x7a>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d021      	beq.n	8004704 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d107      	bne.n	80046de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0204 	bic.w	r2, r2, #4
 80046dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f003 021f 	and.w	r2, r3, #31
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2104      	movs	r1, #4
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d071      	beq.n	80047de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004702:	e06c      	b.n	80047de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2202      	movs	r2, #2
 800470e:	409a      	lsls	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02e      	beq.n	8004776 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d029      	beq.n	8004776 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 020a 	bic.w	r2, r2, #10
 800473e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	2102      	movs	r1, #2
 8004756:	fa01 f202 	lsl.w	r2, r1, r2
 800475a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d038      	beq.n	80047de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004774:	e033      	b.n	80047de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2208      	movs	r2, #8
 8004780:	409a      	lsls	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d02a      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d025      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 020e 	bic.w	r2, r2, #14
 80047a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	f003 021f 	and.w	r2, r3, #31
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f202 	lsl.w	r2, r1, r2
 80047b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
}
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004810:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f003 021f 	and.w	r2, r3, #31
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f202 	lsl.w	r2, r1, r2
 8004824:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b10      	cmp	r3, #16
 8004834:	d108      	bne.n	8004848 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004846:	e007      	b.n	8004858 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	4b16      	ldr	r3, [pc, #88]	; (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d802      	bhi.n	800487e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e001      	b.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004880:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3b08      	subs	r3, #8
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	009a      	lsls	r2, r3, #2
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2201      	movs	r2, #1
 80048b8:	409a      	lsls	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40020407 	.word	0x40020407
 80048d0:	40020800 	.word	0x40020800
 80048d4:	40020820 	.word	0x40020820
 80048d8:	cccccccd 	.word	0xcccccccd
 80048dc:	40020880 	.word	0x40020880

080048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	461a      	mov	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a08      	ldr	r2, [pc, #32]	; (8004924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004902:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b01      	subs	r3, #1
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2201      	movs	r2, #1
 800490e:	409a      	lsls	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	1000823f 	.word	0x1000823f
 8004924:	40020940 	.word	0x40020940

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004936:	e15a      	b.n	8004bee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 814c 	beq.w	8004be8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d00b      	beq.n	8004970 <HAL_GPIO_Init+0x48>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d007      	beq.n	8004970 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004964:	2b11      	cmp	r3, #17
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b12      	cmp	r3, #18
 800496e:	d130      	bne.n	80049d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	2203      	movs	r2, #3
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4013      	ands	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049a6:	2201      	movs	r2, #1
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0201 	and.w	r2, r3, #1
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_Init+0xea>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b12      	cmp	r3, #18
 8004a10:	d123      	bne.n	8004a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	08da      	lsrs	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3208      	adds	r2, #8
 8004a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	220f      	movs	r2, #15
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	6939      	ldr	r1, [r7, #16]
 8004a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	2203      	movs	r2, #3
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 0203 	and.w	r2, r3, #3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a6 	beq.w	8004be8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9c:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <HAL_GPIO_Init+0x2e4>)
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	4a5a      	ldr	r2, [pc, #360]	; (8004c0c <HAL_GPIO_Init+0x2e4>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6613      	str	r3, [r2, #96]	; 0x60
 8004aa8:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <HAL_GPIO_Init+0x2e4>)
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ab4:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <HAL_GPIO_Init+0x2e8>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	3302      	adds	r3, #2
 8004abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	220f      	movs	r2, #15
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ade:	d01f      	beq.n	8004b20 <HAL_GPIO_Init+0x1f8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a4c      	ldr	r2, [pc, #304]	; (8004c14 <HAL_GPIO_Init+0x2ec>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d019      	beq.n	8004b1c <HAL_GPIO_Init+0x1f4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a4b      	ldr	r2, [pc, #300]	; (8004c18 <HAL_GPIO_Init+0x2f0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <HAL_GPIO_Init+0x1f0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a4a      	ldr	r2, [pc, #296]	; (8004c1c <HAL_GPIO_Init+0x2f4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00d      	beq.n	8004b14 <HAL_GPIO_Init+0x1ec>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a49      	ldr	r2, [pc, #292]	; (8004c20 <HAL_GPIO_Init+0x2f8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <HAL_GPIO_Init+0x1e8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a48      	ldr	r2, [pc, #288]	; (8004c24 <HAL_GPIO_Init+0x2fc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d101      	bne.n	8004b0c <HAL_GPIO_Init+0x1e4>
 8004b08:	2305      	movs	r3, #5
 8004b0a:	e00a      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b0c:	2306      	movs	r3, #6
 8004b0e:	e008      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b10:	2304      	movs	r3, #4
 8004b12:	e006      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b14:	2303      	movs	r3, #3
 8004b16:	e004      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e002      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_GPIO_Init+0x1fa>
 8004b20:	2300      	movs	r3, #0
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	f002 0203 	and.w	r2, r2, #3
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	4093      	lsls	r3, r2
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b32:	4937      	ldr	r1, [pc, #220]	; (8004c10 <HAL_GPIO_Init+0x2e8>)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	3302      	adds	r3, #2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b40:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b64:	4a30      	ldr	r2, [pc, #192]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4013      	ands	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bb8:	4a1b      	ldr	r2, [pc, #108]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bbe:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004be2:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <HAL_GPIO_Init+0x300>)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	3301      	adds	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f ae9d 	bne.w	8004938 <HAL_GPIO_Init+0x10>
  }
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40010000 	.word	0x40010000
 8004c14:	48000400 	.word	0x48000400
 8004c18:	48000800 	.word	0x48000800
 8004c1c:	48000c00 	.word	0x48000c00
 8004c20:	48001000 	.word	0x48001000
 8004c24:	48001400 	.word	0x48001400
 8004c28:	40010400 	.word	0x40010400

08004c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	887b      	ldrh	r3, [r7, #2]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	e001      	b.n	8004c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	807b      	strh	r3, [r7, #2]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c6c:	787b      	ldrb	r3, [r7, #1]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c72:	887a      	ldrh	r2, [r7, #2]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c78:	e002      	b.n	8004c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d141      	bne.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c9a:	4b4b      	ldr	r3, [pc, #300]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca6:	d131      	bne.n	8004d0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ca8:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cae:	4a46      	ldr	r2, [pc, #280]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cb8:	4b43      	ldr	r3, [pc, #268]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cc0:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cc8:	4b40      	ldr	r3, [pc, #256]	; (8004dcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2232      	movs	r2, #50	; 0x32
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	4a3f      	ldr	r2, [pc, #252]	; (8004dd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	0c9b      	lsrs	r3, r3, #18
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cde:	e002      	b.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ce6:	4b38      	ldr	r3, [pc, #224]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf2:	d102      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f2      	bne.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cfa:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d158      	bne.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e057      	b.n	8004dbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d0c:	4b2e      	ldr	r3, [pc, #184]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d12:	4a2d      	ldr	r2, [pc, #180]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d1c:	e04d      	b.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d141      	bne.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d26:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d131      	bne.n	8004d98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d3a:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d44:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d4c:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d54:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2232      	movs	r2, #50	; 0x32
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	0c9b      	lsrs	r3, r3, #18
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d6a:	e002      	b.n	8004d72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d102      	bne.n	8004d86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f2      	bne.n	8004d6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d92:	d112      	bne.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e011      	b.n	8004dbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004da8:	e007      	b.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004db2:	4a05      	ldr	r2, [pc, #20]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004db8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40007000 	.word	0x40007000
 8004dcc:	200003cc 	.word	0x200003cc
 8004dd0:	431bde83 	.word	0x431bde83

08004dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e308      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d075      	beq.n	8004ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004df2:	4ba3      	ldr	r3, [pc, #652]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dfc:	4ba0      	ldr	r3, [pc, #640]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	d102      	bne.n	8004e12 <HAL_RCC_OscConfig+0x3e>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_OscConfig+0x44>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d10b      	bne.n	8004e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	4b99      	ldr	r3, [pc, #612]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05b      	beq.n	8004edc <HAL_RCC_OscConfig+0x108>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d157      	bne.n	8004edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e2e3      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x74>
 8004e3a:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a90      	ldr	r2, [pc, #576]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e01d      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x98>
 8004e52:	4b8b      	ldr	r3, [pc, #556]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a8a      	ldr	r2, [pc, #552]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	4b88      	ldr	r3, [pc, #544]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a87      	ldr	r2, [pc, #540]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0xb0>
 8004e6c:	4b84      	ldr	r3, [pc, #528]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a83      	ldr	r2, [pc, #524]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	4b81      	ldr	r3, [pc, #516]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a80      	ldr	r2, [pc, #512]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fd faaa 	bl	80023e4 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fd faa6 	bl	80023e4 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e2a8      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea6:	4b76      	ldr	r3, [pc, #472]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0xc0>
 8004eb2:	e014      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd fa96 	bl	80023e4 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fd fa92 	bl	80023e4 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e294      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ece:	4b6c      	ldr	r3, [pc, #432]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0xe8>
 8004eda:	e000      	b.n	8004ede <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d075      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eea:	4b65      	ldr	r3, [pc, #404]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 030c 	and.w	r3, r3, #12
 8004ef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef4:	4b62      	ldr	r3, [pc, #392]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d102      	bne.n	8004f0a <HAL_RCC_OscConfig+0x136>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d002      	beq.n	8004f10 <HAL_RCC_OscConfig+0x13c>
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d11f      	bne.n	8004f50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f10:	4b5b      	ldr	r3, [pc, #364]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_OscConfig+0x154>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e267      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f28:	4b55      	ldr	r3, [pc, #340]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	061b      	lsls	r3, r3, #24
 8004f36:	4952      	ldr	r1, [pc, #328]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f3c:	4b51      	ldr	r3, [pc, #324]	; (8005084 <HAL_RCC_OscConfig+0x2b0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fd fa03 	bl	800234c <HAL_InitTick>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d043      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e253      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d023      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f58:	4b49      	ldr	r3, [pc, #292]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a48      	ldr	r2, [pc, #288]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fd fa3e 	bl	80023e4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fd fa3a 	bl	80023e4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e23c      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7e:	4b40      	ldr	r3, [pc, #256]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	061b      	lsls	r3, r3, #24
 8004f98:	4939      	ldr	r1, [pc, #228]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]
 8004f9e:	e01a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa0:	4b37      	ldr	r3, [pc, #220]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a36      	ldr	r2, [pc, #216]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fa1a 	bl	80023e4 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb4:	f7fd fa16 	bl	80023e4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e218      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x1e0>
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d03c      	beq.n	800505c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fea:	4b25      	ldr	r3, [pc, #148]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff0:	4a23      	ldr	r2, [pc, #140]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffa:	f7fd f9f3 	bl	80023e4 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005002:	f7fd f9ef 	bl	80023e4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1f1      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005014:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0ef      	beq.n	8005002 <HAL_RCC_OscConfig+0x22e>
 8005022:	e01b      	b.n	800505c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005024:	4b16      	ldr	r3, [pc, #88]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502a:	4a15      	ldr	r2, [pc, #84]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fd f9d6 	bl	80023e4 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503c:	f7fd f9d2 	bl	80023e4 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e1d4      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ef      	bne.n	800503c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80ab 	beq.w	80051c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800506e:	4b04      	ldr	r3, [pc, #16]	; (8005080 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_RCC_OscConfig+0x2b4>
 800507a:	2301      	movs	r3, #1
 800507c:	e005      	b.n	800508a <HAL_RCC_OscConfig+0x2b6>
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000
 8005084:	200003d0 	.word	0x200003d0
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508e:	4baf      	ldr	r3, [pc, #700]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	4aae      	ldr	r2, [pc, #696]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6593      	str	r3, [r2, #88]	; 0x58
 800509a:	4bac      	ldr	r3, [pc, #688]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800509c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050aa:	4ba9      	ldr	r3, [pc, #676]	; (8005350 <HAL_RCC_OscConfig+0x57c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d118      	bne.n	80050e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b6:	4ba6      	ldr	r3, [pc, #664]	; (8005350 <HAL_RCC_OscConfig+0x57c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4aa5      	ldr	r2, [pc, #660]	; (8005350 <HAL_RCC_OscConfig+0x57c>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c2:	f7fd f98f 	bl	80023e4 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fd f98b 	bl	80023e4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e18d      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050dc:	4b9c      	ldr	r3, [pc, #624]	; (8005350 <HAL_RCC_OscConfig+0x57c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d108      	bne.n	8005102 <HAL_RCC_OscConfig+0x32e>
 80050f0:	4b96      	ldr	r3, [pc, #600]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	4a95      	ldr	r2, [pc, #596]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005100:	e024      	b.n	800514c <HAL_RCC_OscConfig+0x378>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b05      	cmp	r3, #5
 8005108:	d110      	bne.n	800512c <HAL_RCC_OscConfig+0x358>
 800510a:	4b90      	ldr	r3, [pc, #576]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	4a8e      	ldr	r2, [pc, #568]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005112:	f043 0304 	orr.w	r3, r3, #4
 8005116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800511a:	4b8c      	ldr	r3, [pc, #560]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	4a8a      	ldr	r2, [pc, #552]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800512a:	e00f      	b.n	800514c <HAL_RCC_OscConfig+0x378>
 800512c:	4b87      	ldr	r3, [pc, #540]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	4a86      	ldr	r2, [pc, #536]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800513c:	4b83      	ldr	r3, [pc, #524]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	4a82      	ldr	r2, [pc, #520]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005144:	f023 0304 	bic.w	r3, r3, #4
 8005148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d016      	beq.n	8005182 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005154:	f7fd f946 	bl	80023e4 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515a:	e00a      	b.n	8005172 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515c:	f7fd f942 	bl	80023e4 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e142      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005172:	4b76      	ldr	r3, [pc, #472]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ed      	beq.n	800515c <HAL_RCC_OscConfig+0x388>
 8005180:	e015      	b.n	80051ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005182:	f7fd f92f 	bl	80023e4 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005188:	e00a      	b.n	80051a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518a:	f7fd f92b 	bl	80023e4 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	f241 3288 	movw	r2, #5000	; 0x1388
 8005198:	4293      	cmp	r3, r2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e12b      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a0:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ed      	bne.n	800518a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ae:	7ffb      	ldrb	r3, [r7, #31]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d105      	bne.n	80051c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b4:	4b65      	ldr	r3, [pc, #404]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	4a64      	ldr	r2, [pc, #400]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80051ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d03c      	beq.n	8005246 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01c      	beq.n	800520e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051d4:	4b5d      	ldr	r3, [pc, #372]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80051d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051da:	4a5c      	ldr	r2, [pc, #368]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e4:	f7fd f8fe 	bl	80023e4 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ec:	f7fd f8fa 	bl	80023e4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e0fc      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051fe:	4b53      	ldr	r3, [pc, #332]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0ef      	beq.n	80051ec <HAL_RCC_OscConfig+0x418>
 800520c:	e01b      	b.n	8005246 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800520e:	4b4f      	ldr	r3, [pc, #316]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005214:	4a4d      	ldr	r2, [pc, #308]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521e:	f7fd f8e1 	bl	80023e4 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005226:	f7fd f8dd 	bl	80023e4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e0df      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005238:	4b44      	ldr	r3, [pc, #272]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800523a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ef      	bne.n	8005226 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80d3 	beq.w	80053f6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005250:	4b3e      	ldr	r3, [pc, #248]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	2b0c      	cmp	r3, #12
 800525a:	f000 808d 	beq.w	8005378 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d15a      	bne.n	800531c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a38      	ldr	r2, [pc, #224]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800526c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fd f8b7 	bl	80023e4 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527a:	f7fd f8b3 	bl	80023e4 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e0b5      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528c:	4b2f      	ldr	r3, [pc, #188]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	4b2d      	ldr	r3, [pc, #180]	; (8005354 <HAL_RCC_OscConfig+0x580>)
 800529e:	4013      	ands	r3, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6a11      	ldr	r1, [r2, #32]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052a8:	3a01      	subs	r2, #1
 80052aa:	0112      	lsls	r2, r2, #4
 80052ac:	4311      	orrs	r1, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052b2:	0212      	lsls	r2, r2, #8
 80052b4:	4311      	orrs	r1, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052ba:	0852      	lsrs	r2, r2, #1
 80052bc:	3a01      	subs	r2, #1
 80052be:	0552      	lsls	r2, r2, #21
 80052c0:	4311      	orrs	r1, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052c6:	0852      	lsrs	r2, r2, #1
 80052c8:	3a01      	subs	r2, #1
 80052ca:	0652      	lsls	r2, r2, #25
 80052cc:	4311      	orrs	r1, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052d2:	06d2      	lsls	r2, r2, #27
 80052d4:	430a      	orrs	r2, r1
 80052d6:	491d      	ldr	r1, [pc, #116]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052dc:	4b1b      	ldr	r3, [pc, #108]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80052e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052e8:	4b18      	ldr	r3, [pc, #96]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a17      	ldr	r2, [pc, #92]	; (800534c <HAL_RCC_OscConfig+0x578>)
 80052ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fd f876 	bl	80023e4 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fd f872 	bl	80023e4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e074      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x528>
 800531a:	e06c      	b.n	80053f6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005326:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a07      	ldr	r2, [pc, #28]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_OscConfig+0x578>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <HAL_RCC_OscConfig+0x578>)
 800533a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800533e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005342:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fd f84e 	bl	80023e4 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800534a:	e00e      	b.n	800536a <HAL_RCC_OscConfig+0x596>
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
 8005354:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005358:	f7fd f844 	bl	80023e4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e046      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800536a:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_RCC_OscConfig+0x62c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x584>
 8005376:	e03e      	b.n	80053f6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e039      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_RCC_OscConfig+0x62c>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 0203 	and.w	r2, r3, #3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	429a      	cmp	r2, r3
 8005396:	d12c      	bne.n	80053f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	3b01      	subs	r3, #1
 80053a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d123      	bne.n	80053f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d11b      	bne.n	80053f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d113      	bne.n	80053f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	3b01      	subs	r3, #1
 80053d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d109      	bne.n	80053f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	3b01      	subs	r3, #1
 80053ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000

08005404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e11e      	b.n	800565a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800541c:	4b91      	ldr	r3, [pc, #580]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d910      	bls.n	800544c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b8e      	ldr	r3, [pc, #568]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 020f 	bic.w	r2, r3, #15
 8005432:	498c      	ldr	r1, [pc, #560]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b8a      	ldr	r3, [pc, #552]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e106      	b.n	800565a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d073      	beq.n	8005540 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d129      	bne.n	80054b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005460:	4b81      	ldr	r3, [pc, #516]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0f4      	b.n	800565a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005470:	f000 f972 	bl	8005758 <RCC_GetSysClockFreqFromPLLSource>
 8005474:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4a7c      	ldr	r2, [pc, #496]	; (800566c <HAL_RCC_ClockConfig+0x268>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d93f      	bls.n	80054fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800547e:	4b7a      	ldr	r3, [pc, #488]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005492:	2b00      	cmp	r3, #0
 8005494:	d033      	beq.n	80054fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800549a:	2b00      	cmp	r3, #0
 800549c:	d12f      	bne.n	80054fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800549e:	4b72      	ldr	r3, [pc, #456]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a6:	4a70      	ldr	r2, [pc, #448]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e024      	b.n	80054fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d107      	bne.n	80054cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054bc:	4b6a      	ldr	r3, [pc, #424]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0c6      	b.n	800565a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054cc:	4b66      	ldr	r3, [pc, #408]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0be      	b.n	800565a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80054dc:	f000 f8ce 	bl	800567c <HAL_RCC_GetSysClockFreq>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4a61      	ldr	r2, [pc, #388]	; (800566c <HAL_RCC_ClockConfig+0x268>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d909      	bls.n	80054fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f2:	4a5d      	ldr	r2, [pc, #372]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80054f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054fe:	4b5a      	ldr	r3, [pc, #360]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f023 0203 	bic.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	4957      	ldr	r1, [pc, #348]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800550c:	4313      	orrs	r3, r2
 800550e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005510:	f7fc ff68 	bl	80023e4 <HAL_GetTick>
 8005514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005516:	e00a      	b.n	800552e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005518:	f7fc ff64 	bl	80023e4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	f241 3288 	movw	r2, #5000	; 0x1388
 8005526:	4293      	cmp	r3, r2
 8005528:	d901      	bls.n	800552e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e095      	b.n	800565a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552e:	4b4e      	ldr	r3, [pc, #312]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 020c 	and.w	r2, r3, #12
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	429a      	cmp	r2, r3
 800553e:	d1eb      	bne.n	8005518 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005558:	4b43      	ldr	r3, [pc, #268]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a42      	ldr	r2, [pc, #264]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800555e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005562:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005570:	4b3d      	ldr	r3, [pc, #244]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005578:	4a3b      	ldr	r2, [pc, #236]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800557a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800557e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005580:	4b39      	ldr	r3, [pc, #228]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4936      	ldr	r1, [pc, #216]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
 8005592:	e008      	b.n	80055a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b80      	cmp	r3, #128	; 0x80
 8005598:	d105      	bne.n	80055a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800559a:	4b33      	ldr	r3, [pc, #204]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4a32      	ldr	r2, [pc, #200]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80055a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055a6:	4b2f      	ldr	r3, [pc, #188]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d21d      	bcs.n	80055f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b4:	4b2b      	ldr	r3, [pc, #172]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f023 020f 	bic.w	r2, r3, #15
 80055bc:	4929      	ldr	r1, [pc, #164]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055c4:	f7fc ff0e 	bl	80023e4 <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055cc:	f7fc ff0a 	bl	80023e4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e03b      	b.n	800565a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <HAL_RCC_ClockConfig+0x260>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1ed      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4917      	ldr	r1, [pc, #92]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	490f      	ldr	r1, [pc, #60]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800562e:	f000 f825 	bl	800567c <HAL_RCC_GetSysClockFreq>
 8005632:	4601      	mov	r1, r0
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <HAL_RCC_ClockConfig+0x264>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <HAL_RCC_ClockConfig+0x26c>)
 8005640:	5cd3      	ldrb	r3, [r2, r3]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	fa21 f303 	lsr.w	r3, r1, r3
 800564a:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <HAL_RCC_ClockConfig+0x270>)
 800564c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_RCC_ClockConfig+0x274>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fc fe7a 	bl	800234c <HAL_InitTick>
 8005658:	4603      	mov	r3, r0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40022000 	.word	0x40022000
 8005668:	40021000 	.word	0x40021000
 800566c:	04c4b400 	.word	0x04c4b400
 8005670:	08009bbc 	.word	0x08009bbc
 8005674:	200003cc 	.word	0x200003cc
 8005678:	200003d0 	.word	0x200003d0

0800567c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005682:	4b2c      	ldr	r3, [pc, #176]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b04      	cmp	r3, #4
 800568c:	d102      	bne.n	8005694 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800568e:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	e047      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005694:	4b27      	ldr	r3, [pc, #156]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d102      	bne.n	80056a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056a0:	4b26      	ldr	r3, [pc, #152]	; (800573c <HAL_RCC_GetSysClockFreq+0xc0>)
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	e03e      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80056a6:	4b23      	ldr	r3, [pc, #140]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	d136      	bne.n	8005720 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056b2:	4b20      	ldr	r3, [pc, #128]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056bc:	4b1d      	ldr	r3, [pc, #116]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	3301      	adds	r3, #1
 80056c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d10c      	bne.n	80056ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056d0:	4a1a      	ldr	r2, [pc, #104]	; (800573c <HAL_RCC_GetSysClockFreq+0xc0>)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056da:	68d2      	ldr	r2, [r2, #12]
 80056dc:	0a12      	lsrs	r2, r2, #8
 80056de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	617b      	str	r3, [r7, #20]
      break;
 80056e8:	e00c      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056ea:	4a13      	ldr	r2, [pc, #76]	; (8005738 <HAL_RCC_GetSysClockFreq+0xbc>)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	0a12      	lsrs	r2, r2, #8
 80056f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056fc:	fb02 f303 	mul.w	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]
      break;
 8005702:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005704:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	0e5b      	lsrs	r3, r3, #25
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	3301      	adds	r3, #1
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e001      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005724:	693b      	ldr	r3, [r7, #16]
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40021000 	.word	0x40021000
 8005738:	00f42400 	.word	0x00f42400
 800573c:	007a1200 	.word	0x007a1200

08005740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005744:	4b03      	ldr	r3, [pc, #12]	; (8005754 <HAL_RCC_GetHCLKFreq+0x14>)
 8005746:	681b      	ldr	r3, [r3, #0]
}
 8005748:	4618      	mov	r0, r3
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	200003cc 	.word	0x200003cc

08005758 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800575e:	4b1e      	ldr	r3, [pc, #120]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d10c      	bne.n	8005796 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800577c:	4a17      	ldr	r2, [pc, #92]	; (80057dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	4a14      	ldr	r2, [pc, #80]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005786:	68d2      	ldr	r2, [r2, #12]
 8005788:	0a12      	lsrs	r2, r2, #8
 800578a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	617b      	str	r3, [r7, #20]
    break;
 8005794:	e00c      	b.n	80057b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	fbb2 f3f3 	udiv	r3, r2, r3
 800579e:	4a0e      	ldr	r2, [pc, #56]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a0:	68d2      	ldr	r2, [r2, #12]
 80057a2:	0a12      	lsrs	r2, r2, #8
 80057a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]
    break;
 80057ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	0e5b      	lsrs	r3, r3, #25
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	3301      	adds	r3, #1
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057ca:	687b      	ldr	r3, [r7, #4]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	40021000 	.word	0x40021000
 80057dc:	007a1200 	.word	0x007a1200
 80057e0:	00f42400 	.word	0x00f42400

080057e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057ec:	2300      	movs	r3, #0
 80057ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f0:	2300      	movs	r3, #0
 80057f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8098 	beq.w	8005932 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005806:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005812:	4b40      	ldr	r3, [pc, #256]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	4a3f      	ldr	r2, [pc, #252]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581c:	6593      	str	r3, [r2, #88]	; 0x58
 800581e:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800582a:	2301      	movs	r3, #1
 800582c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800582e:	4b3a      	ldr	r3, [pc, #232]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a39      	ldr	r2, [pc, #228]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005838:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800583a:	f7fc fdd3 	bl	80023e4 <HAL_GetTick>
 800583e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005840:	e009      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005842:	f7fc fdcf 	bl	80023e4 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d902      	bls.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	74fb      	strb	r3, [r7, #19]
        break;
 8005854:	e005      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005856:	4b30      	ldr	r3, [pc, #192]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ef      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d159      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005868:	4b2a      	ldr	r3, [pc, #168]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	429a      	cmp	r2, r3
 8005882:	d019      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005884:	4b23      	ldr	r3, [pc, #140]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005890:	4b20      	ldr	r3, [pc, #128]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058a0:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058b0:	4a18      	ldr	r2, [pc, #96]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fc fd8f 	bl	80023e4 <HAL_GetTick>
 80058c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c8:	e00b      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fc fd8b 	bl	80023e4 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d902      	bls.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	74fb      	strb	r3, [r7, #19]
            break;
 80058e0:	e006      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ec      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10b      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005904:	4903      	ldr	r1, [pc, #12]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800590c:	e008      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	74bb      	strb	r3, [r7, #18]
 8005912:	e005      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005914:	40021000 	.word	0x40021000
 8005918:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005920:	7c7b      	ldrb	r3, [r7, #17]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d105      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005926:	4baf      	ldr	r3, [pc, #700]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	4aae      	ldr	r2, [pc, #696]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800592c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005930:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800593e:	4ba9      	ldr	r3, [pc, #676]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f023 0203 	bic.w	r2, r3, #3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	49a5      	ldr	r1, [pc, #660]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005960:	4ba0      	ldr	r3, [pc, #640]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f023 020c 	bic.w	r2, r3, #12
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	499d      	ldr	r1, [pc, #628]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005982:	4b98      	ldr	r3, [pc, #608]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4994      	ldr	r1, [pc, #592]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a4:	4b8f      	ldr	r3, [pc, #572]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	498c      	ldr	r1, [pc, #560]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059c6:	4b87      	ldr	r3, [pc, #540]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4983      	ldr	r1, [pc, #524]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059e8:	4b7e      	ldr	r3, [pc, #504]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	497b      	ldr	r1, [pc, #492]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4972      	ldr	r1, [pc, #456]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a2c:	4b6d      	ldr	r3, [pc, #436]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	496a      	ldr	r1, [pc, #424]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a4e:	4b65      	ldr	r3, [pc, #404]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	4961      	ldr	r1, [pc, #388]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a70:	4b5c      	ldr	r3, [pc, #368]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a76:	f023 0203 	bic.w	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	4959      	ldr	r1, [pc, #356]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a92:	4b54      	ldr	r3, [pc, #336]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	4950      	ldr	r1, [pc, #320]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d015      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab4:	4b4b      	ldr	r3, [pc, #300]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	4948      	ldr	r1, [pc, #288]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad4:	4b43      	ldr	r3, [pc, #268]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a42      	ldr	r2, [pc, #264]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ade:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aec:	4b3d      	ldr	r3, [pc, #244]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afa:	493a      	ldr	r1, [pc, #232]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b0c:	4b35      	ldr	r3, [pc, #212]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a34      	ldr	r2, [pc, #208]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d015      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b24:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	492c      	ldr	r1, [pc, #176]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b42:	d105      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b44:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a26      	ldr	r2, [pc, #152]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b5c:	4b21      	ldr	r3, [pc, #132]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	491e      	ldr	r1, [pc, #120]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7a:	d105      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b7c:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a18      	ldr	r2, [pc, #96]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d015      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b94:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	4910      	ldr	r1, [pc, #64]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d018      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	4902      	ldr	r1, [pc, #8]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005be2:	e001      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005be4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf0:	d105      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bf2:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bfc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d015      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c18:	4917      	ldr	r1, [pc, #92]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d105      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c34:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d015      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c42:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c50:	4909      	ldr	r1, [pc, #36]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c60:	d105      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c62:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000

08005c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e084      	b.n	8005d98 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fb fd21 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cce:	d902      	bls.n	8005cd6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e002      	b.n	8005cdc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ce4:	d007      	beq.n	8005cf6 <HAL_SPI_Init+0x7a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cee:	d002      	beq.n	8005cf6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10b      	bne.n	8005d16 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d06:	d903      	bls.n	8005d10 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d0e:	e002      	b.n	8005d16 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	ea42 0103 	orr.w	r1, r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	f003 0204 	and.w	r2, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	ea42 0103 	orr.w	r1, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_SPI_Transmit+0x22>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e150      	b.n	8006064 <HAL_SPI_Transmit+0x2c4>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dca:	f7fc fb0b 	bl	80023e4 <HAL_GetTick>
 8005dce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dd0:	88fb      	ldrh	r3, [r7, #6]
 8005dd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d002      	beq.n	8005de6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
 8005de2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005de4:	e135      	b.n	8006052 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_SPI_Transmit+0x52>
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005df6:	e12c      	b.n	8006052 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	88fa      	ldrh	r2, [r7, #6]
 8005e16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e42:	d107      	bne.n	8005e54 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d007      	beq.n	8005e72 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e7a:	d94b      	bls.n	8005f14 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_SPI_Transmit+0xea>
 8005e84:	8afb      	ldrh	r3, [r7, #22]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d13e      	bne.n	8005f08 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	881a      	ldrh	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	1c9a      	adds	r2, r3, #2
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005eae:	e02b      	b.n	8005f08 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d112      	bne.n	8005ee4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	881a      	ldrh	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	1c9a      	adds	r2, r3, #2
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ee2:	e011      	b.n	8005f08 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ee4:	f7fc fa7e 	bl	80023e4 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d803      	bhi.n	8005efc <HAL_SPI_Transmit+0x15c>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efa:	d102      	bne.n	8005f02 <HAL_SPI_Transmit+0x162>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f06:	e0a4      	b.n	8006052 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1ce      	bne.n	8005eb0 <HAL_SPI_Transmit+0x110>
 8005f12:	e07c      	b.n	800600e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_SPI_Transmit+0x182>
 8005f1c:	8afb      	ldrh	r3, [r7, #22]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d170      	bne.n	8006004 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d912      	bls.n	8005f52 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	881a      	ldrh	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b02      	subs	r3, #2
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f50:	e058      	b.n	8006004 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f78:	e044      	b.n	8006004 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d12b      	bne.n	8005fe0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d912      	bls.n	8005fb8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	881a      	ldrh	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	1c9a      	adds	r2, r3, #2
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b02      	subs	r3, #2
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fb6:	e025      	b.n	8006004 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fde:	e011      	b.n	8006004 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fe0:	f7fc fa00 	bl	80023e4 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d803      	bhi.n	8005ff8 <HAL_SPI_Transmit+0x258>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff6:	d102      	bne.n	8005ffe <HAL_SPI_Transmit+0x25e>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006002:	e026      	b.n	8006052 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1b5      	bne.n	8005f7a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f901 	bl	800621a <SPI_EndRxTxTransaction>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e000      	b.n	8006052 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006062:	7ffb      	ldrb	r3, [r7, #31]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607c:	e04c      	b.n	8006118 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006084:	d048      	beq.n	8006118 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006086:	f7fc f9ad 	bl	80023e4 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d902      	bls.n	800609c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d13d      	bne.n	8006118 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b4:	d111      	bne.n	80060da <SPI_WaitFlagStateUntilTimeout+0x6e>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060be:	d004      	beq.n	80060ca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d107      	bne.n	80060da <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e2:	d10f      	bne.n	8006104 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006102:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e00f      	b.n	8006138 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	429a      	cmp	r2, r3
 8006134:	d1a3      	bne.n	800607e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800614e:	e057      	b.n	8006200 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006156:	d106      	bne.n	8006166 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800616c:	d048      	beq.n	8006200 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800616e:	f7fc f939 	bl	80023e4 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d902      	bls.n	8006184 <SPI_WaitFifoStateUntilTimeout+0x44>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d13d      	bne.n	8006200 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006192:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800619c:	d111      	bne.n	80061c2 <SPI_WaitFifoStateUntilTimeout+0x82>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a6:	d004      	beq.n	80061b2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b0:	d107      	bne.n	80061c2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ca:	d10f      	bne.n	80061ec <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e008      	b.n	8006212 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d19f      	bne.n	8006150 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af02      	add	r7, sp, #8
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff ff84 	bl	8006140 <SPI_WaitFifoStateUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e027      	b.n	800629e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2200      	movs	r2, #0
 8006256:	2180      	movs	r1, #128	; 0x80
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff ff07 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	f043 0220 	orr.w	r2, r3, #32
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e014      	b.n	800629e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ff5d 	bl	8006140 <SPI_WaitFifoStateUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e000      	b.n	800629e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e049      	b.n	800634c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7fb ff37 	bl	8002140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 fc23 	bl	8006b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d001      	beq.n	800636c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e019      	b.n	80063a0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <HAL_TIM_Base_Start+0x58>)
 800637c:	4013      	ands	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b06      	cmp	r3, #6
 8006384:	d00b      	beq.n	800639e <HAL_TIM_Base_Start+0x4a>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d007      	beq.n	800639e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	00010007 	.word	0x00010007

080063b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d001      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e021      	b.n	800640c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <HAL_TIM_Base_Start_IT+0x68>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b06      	cmp	r3, #6
 80063f0:	d00b      	beq.n	800640a <HAL_TIM_Base_Start_IT+0x5a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f8:	d007      	beq.n	800640a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0201 	orr.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	00010007 	.word	0x00010007

0800641c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e097      	b.n	8006560 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fb fe1f 	bl	8002088 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006460:	f023 0307 	bic.w	r3, r3, #7
 8006464:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3304      	adds	r3, #4
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f000 fb5d 	bl	8006b30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	4313      	orrs	r3, r2
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80064bc:	f023 030c 	bic.w	r3, r3, #12
 80064c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	4313      	orrs	r3, r2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	031b      	lsls	r3, r3, #12
 80064ec:	4313      	orrs	r3, r2
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006502:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	4313      	orrs	r3, r2
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d122      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b02      	cmp	r3, #2
 800658a:	d11b      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0202 	mvn.w	r2, #2
 8006594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 faa2 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa94 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 faa5 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d122      	bne.n	8006618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d11b      	bne.n	8006618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0204 	mvn.w	r2, #4
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa78 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa6a 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fa7b 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b08      	cmp	r3, #8
 8006624:	d122      	bne.n	800666c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b08      	cmp	r3, #8
 8006632:	d11b      	bne.n	800666c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0208 	mvn.w	r2, #8
 800663c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa4e 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 8006658:	e005      	b.n	8006666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa40 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa51 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b10      	cmp	r3, #16
 8006678:	d122      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b10      	cmp	r3, #16
 8006686:	d11b      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0210 	mvn.w	r2, #16
 8006690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2208      	movs	r2, #8
 8006696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa24 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa16 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fa27 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d10e      	bne.n	80066ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d107      	bne.n	80066ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0201 	mvn.w	r2, #1
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f9f0 	bl	8006acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b80      	cmp	r3, #128	; 0x80
 80066f8:	d10e      	bne.n	8006718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006704:	2b80      	cmp	r3, #128	; 0x80
 8006706:	d107      	bne.n	8006718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fd5e 	bl	80071d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d10e      	bne.n	8006746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b80      	cmp	r3, #128	; 0x80
 8006734:	d107      	bne.n	8006746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800673e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fd51 	bl	80071e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d10e      	bne.n	8006772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d107      	bne.n	8006772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800676a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f9d5 	bl	8006b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b20      	cmp	r3, #32
 800677e:	d10e      	bne.n	800679e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b20      	cmp	r3, #32
 800678c:	d107      	bne.n	800679e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0220 	mvn.w	r2, #32
 8006796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fd11 	bl	80071c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ac:	d10f      	bne.n	80067ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067bc:	d107      	bne.n	80067ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80067c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fd17 	bl	80071fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067dc:	d10f      	bne.n	80067fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ec:	d107      	bne.n	80067fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fd09 	bl	8007210 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800680c:	d10f      	bne.n	800682e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800681c:	d107      	bne.n	800682e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fcfb 	bl	8007224 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800683c:	d10f      	bne.n	800685e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800684c:	d107      	bne.n	800685e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fced 	bl	8007238 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIM_ConfigClockSource+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e0d2      	b.n	8006a26 <HAL_TIM_ConfigClockSource+0x1be>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800689e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068bc:	f000 80a9 	beq.w	8006a12 <HAL_TIM_ConfigClockSource+0x1aa>
 80068c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c4:	d81a      	bhi.n	80068fc <HAL_TIM_ConfigClockSource+0x94>
 80068c6:	2b30      	cmp	r3, #48	; 0x30
 80068c8:	f000 809a 	beq.w	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 80068cc:	2b30      	cmp	r3, #48	; 0x30
 80068ce:	d809      	bhi.n	80068e4 <HAL_TIM_ConfigClockSource+0x7c>
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	f000 8095 	beq.w	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	f000 8092 	beq.w	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 808f 	beq.w	8006a00 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80068e2:	e097      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80068e4:	2b50      	cmp	r3, #80	; 0x50
 80068e6:	d05b      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x138>
 80068e8:	2b50      	cmp	r3, #80	; 0x50
 80068ea:	d802      	bhi.n	80068f2 <HAL_TIM_ConfigClockSource+0x8a>
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d077      	beq.n	80069e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80068f0:	e090      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80068f2:	2b60      	cmp	r3, #96	; 0x60
 80068f4:	d064      	beq.n	80069c0 <HAL_TIM_ConfigClockSource+0x158>
 80068f6:	2b70      	cmp	r3, #112	; 0x70
 80068f8:	d028      	beq.n	800694c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80068fa:	e08b      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80068fc:	4a4c      	ldr	r2, [pc, #304]	; (8006a30 <HAL_TIM_ConfigClockSource+0x1c8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d07e      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 8006902:	4a4b      	ldr	r2, [pc, #300]	; (8006a30 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d810      	bhi.n	800692a <HAL_TIM_ConfigClockSource+0xc2>
 8006908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690c:	d078      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 800690e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006912:	d803      	bhi.n	800691c <HAL_TIM_ConfigClockSource+0xb4>
 8006914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006918:	d02f      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800691a:	e07b      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800691c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006920:	d06e      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 8006922:	4a44      	ldr	r2, [pc, #272]	; (8006a34 <HAL_TIM_ConfigClockSource+0x1cc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d06b      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006928:	e074      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800692a:	4a43      	ldr	r2, [pc, #268]	; (8006a38 <HAL_TIM_ConfigClockSource+0x1d0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d067      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 8006930:	4a41      	ldr	r2, [pc, #260]	; (8006a38 <HAL_TIM_ConfigClockSource+0x1d0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d803      	bhi.n	800693e <HAL_TIM_ConfigClockSource+0xd6>
 8006936:	4a41      	ldr	r2, [pc, #260]	; (8006a3c <HAL_TIM_ConfigClockSource+0x1d4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d061      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800693c:	e06a      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800693e:	4a40      	ldr	r2, [pc, #256]	; (8006a40 <HAL_TIM_ConfigClockSource+0x1d8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d05d      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
 8006944:	4a3f      	ldr	r2, [pc, #252]	; (8006a44 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d05a      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800694a:	e063      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6899      	ldr	r1, [r3, #8]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f000 fac8 	bl	8006ef0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800696e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	609a      	str	r2, [r3, #8]
      break;
 8006978:	e04c      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6899      	ldr	r1, [r3, #8]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f000 fab1 	bl	8006ef0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800699c:	609a      	str	r2, [r3, #8]
      break;
 800699e:	e039      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f000 fa23 	bl	8006df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2150      	movs	r1, #80	; 0x50
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fa7c 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 80069be:	e029      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	461a      	mov	r2, r3
 80069ce:	f000 fa42 	bl	8006e56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2160      	movs	r1, #96	; 0x60
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fa6c 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 80069de:	e019      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f000 fa03 	bl	8006df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2140      	movs	r1, #64	; 0x40
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fa5c 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 80069fe:	e009      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f000 fa53 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 8006a10:	e000      	b.n	8006a14 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8006a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	00100030 	.word	0x00100030
 8006a34:	00100020 	.word	0x00100020
 8006a38:	00100050 	.word	0x00100050
 8006a3c:	00100040 	.word	0x00100040
 8006a40:	00100060 	.word	0x00100060
 8006a44:	00100070 	.word	0x00100070

08006a48 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e031      	b.n	8006ac4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f904 	bl	8006c80 <TIM_SlaveTimer_SetConfig>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e018      	b.n	8006ac4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ab0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a46      	ldr	r2, [pc, #280]	; (8006c5c <TIM_Base_SetConfig+0x12c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d017      	beq.n	8006b78 <TIM_Base_SetConfig+0x48>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d013      	beq.n	8006b78 <TIM_Base_SetConfig+0x48>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a43      	ldr	r2, [pc, #268]	; (8006c60 <TIM_Base_SetConfig+0x130>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00f      	beq.n	8006b78 <TIM_Base_SetConfig+0x48>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a42      	ldr	r2, [pc, #264]	; (8006c64 <TIM_Base_SetConfig+0x134>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00b      	beq.n	8006b78 <TIM_Base_SetConfig+0x48>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a41      	ldr	r2, [pc, #260]	; (8006c68 <TIM_Base_SetConfig+0x138>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_Base_SetConfig+0x48>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a40      	ldr	r2, [pc, #256]	; (8006c6c <TIM_Base_SetConfig+0x13c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0x48>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a3f      	ldr	r2, [pc, #252]	; (8006c70 <TIM_Base_SetConfig+0x140>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a33      	ldr	r2, [pc, #204]	; (8006c5c <TIM_Base_SetConfig+0x12c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d023      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b98:	d01f      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a30      	ldr	r2, [pc, #192]	; (8006c60 <TIM_Base_SetConfig+0x130>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01b      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2f      	ldr	r2, [pc, #188]	; (8006c64 <TIM_Base_SetConfig+0x134>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d017      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2e      	ldr	r2, [pc, #184]	; (8006c68 <TIM_Base_SetConfig+0x138>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a2d      	ldr	r2, [pc, #180]	; (8006c6c <TIM_Base_SetConfig+0x13c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a2d      	ldr	r2, [pc, #180]	; (8006c74 <TIM_Base_SetConfig+0x144>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <TIM_Base_SetConfig+0x148>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2b      	ldr	r2, [pc, #172]	; (8006c7c <TIM_Base_SetConfig+0x14c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_Base_SetConfig+0xaa>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <TIM_Base_SetConfig+0x140>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d108      	bne.n	8006bec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <TIM_Base_SetConfig+0x12c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <TIM_Base_SetConfig+0x110>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <TIM_Base_SetConfig+0x13c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00f      	beq.n	8006c40 <TIM_Base_SetConfig+0x110>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <TIM_Base_SetConfig+0x144>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00b      	beq.n	8006c40 <TIM_Base_SetConfig+0x110>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <TIM_Base_SetConfig+0x148>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <TIM_Base_SetConfig+0x110>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a12      	ldr	r2, [pc, #72]	; (8006c7c <TIM_Base_SetConfig+0x14c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_Base_SetConfig+0x110>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a0d      	ldr	r2, [pc, #52]	; (8006c70 <TIM_Base_SetConfig+0x140>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d103      	bne.n	8006c48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	615a      	str	r2, [r3, #20]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	40012c00 	.word	0x40012c00
 8006c60:	40000400 	.word	0x40000400
 8006c64:	40000800 	.word	0x40000800
 8006c68:	40000c00 	.word	0x40000c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40015000 	.word	0x40015000
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40014400 	.word	0x40014400
 8006c7c:	40014800 	.word	0x40014800

08006c80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cae:	f023 0307 	bic.w	r3, r3, #7
 8006cb2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b70      	cmp	r3, #112	; 0x70
 8006ccc:	d034      	beq.n	8006d38 <TIM_SlaveTimer_SetConfig+0xb8>
 8006cce:	2b70      	cmp	r3, #112	; 0x70
 8006cd0:	d811      	bhi.n	8006cf6 <TIM_SlaveTimer_SetConfig+0x76>
 8006cd2:	2b30      	cmp	r3, #48	; 0x30
 8006cd4:	d07d      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006cd6:	2b30      	cmp	r3, #48	; 0x30
 8006cd8:	d806      	bhi.n	8006ce8 <TIM_SlaveTimer_SetConfig+0x68>
 8006cda:	2b10      	cmp	r3, #16
 8006cdc:	d079      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d077      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d075      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8006ce6:	e075      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006ce8:	2b50      	cmp	r3, #80	; 0x50
 8006cea:	d05e      	beq.n	8006daa <TIM_SlaveTimer_SetConfig+0x12a>
 8006cec:	2b60      	cmp	r3, #96	; 0x60
 8006cee:	d066      	beq.n	8006dbe <TIM_SlaveTimer_SetConfig+0x13e>
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d02c      	beq.n	8006d4e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006cf4:	e06e      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006cf6:	4a3a      	ldr	r2, [pc, #232]	; (8006de0 <TIM_SlaveTimer_SetConfig+0x160>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d06a      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006cfc:	4a38      	ldr	r2, [pc, #224]	; (8006de0 <TIM_SlaveTimer_SetConfig+0x160>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d809      	bhi.n	8006d16 <TIM_SlaveTimer_SetConfig+0x96>
 8006d02:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d06:	d064      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006d08:	4a36      	ldr	r2, [pc, #216]	; (8006de4 <TIM_SlaveTimer_SetConfig+0x164>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d061      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d12:	d05e      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006d14:	e05e      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006d16:	4a34      	ldr	r2, [pc, #208]	; (8006de8 <TIM_SlaveTimer_SetConfig+0x168>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d05a      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006d1c:	4a32      	ldr	r2, [pc, #200]	; (8006de8 <TIM_SlaveTimer_SetConfig+0x168>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d803      	bhi.n	8006d2a <TIM_SlaveTimer_SetConfig+0xaa>
 8006d22:	4a32      	ldr	r2, [pc, #200]	; (8006dec <TIM_SlaveTimer_SetConfig+0x16c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d054      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006d28:	e054      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006d2a:	4a31      	ldr	r2, [pc, #196]	; (8006df0 <TIM_SlaveTimer_SetConfig+0x170>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d050      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
 8006d30:	4a30      	ldr	r2, [pc, #192]	; (8006df4 <TIM_SlaveTimer_SetConfig+0x174>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d04d      	beq.n	8006dd2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006d36:	e04d      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68d9      	ldr	r1, [r3, #12]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f000 f8d2 	bl	8006ef0 <TIM_ETR_SetConfig>
      break;
 8006d4c:	e042      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	d004      	beq.n	8006d60 <TIM_SlaveTimer_SetConfig+0xe0>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006d5e:	d101      	bne.n	8006d64 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e038      	b.n	8006dd6 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0201 	bic.w	r2, r2, #1
 8006d7a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d8a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	621a      	str	r2, [r3, #32]
      break;
 8006da8:	e014      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6899      	ldr	r1, [r3, #8]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 f81e 	bl	8006df8 <TIM_TI1_ConfigInputStage>
      break;
 8006dbc:	e00a      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6899      	ldr	r1, [r3, #8]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f000 f843 	bl	8006e56 <TIM_TI2_ConfigInputStage>
      break;
 8006dd0:	e000      	b.n	8006dd4 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006dd2:	bf00      	nop
  }
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	00100030 	.word	0x00100030
 8006de4:	00100020 	.word	0x00100020
 8006de8:	00100050 	.word	0x00100050
 8006dec:	00100040 	.word	0x00100040
 8006df0:	00100060 	.word	0x00100060
 8006df4:	00100070 	.word	0x00100070

08006df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0201 	bic.w	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 030a 	bic.w	r3, r3, #10
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b087      	sub	sp, #28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f023 0210 	bic.w	r2, r3, #16
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f043 0307 	orr.w	r3, r3, #7
 8006edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	021a      	lsls	r2, r3, #8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e074      	b.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a34      	ldr	r2, [pc, #208]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d009      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a33      	ldr	r2, [pc, #204]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a31      	ldr	r2, [pc, #196]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d108      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a21      	ldr	r2, [pc, #132]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d022      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc8:	d01d      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1f      	ldr	r2, [pc, #124]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a11      	ldr	r2, [pc, #68]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10c      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4313      	orrs	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40013400 	.word	0x40013400
 8007048:	40015000 	.word	0x40015000
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40000c00 	.word	0x40000c00
 8007058:	40014000 	.word	0x40014000

0800705c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007074:	2302      	movs	r3, #2
 8007076:	e096      	b.n	80071a6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2f      	ldr	r2, [pc, #188]	; (80071b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d009      	beq.n	8007110 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2c      	ldr	r2, [pc, #176]	; (80071bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d106      	bne.n	800711e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a24      	ldr	r2, [pc, #144]	; (80071b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a21      	ldr	r2, [pc, #132]	; (80071bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d12b      	bne.n	8007194 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	051b      	lsls	r3, r3, #20
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a10      	ldr	r2, [pc, #64]	; (80071b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d004      	beq.n	8007186 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a0e      	ldr	r2, [pc, #56]	; (80071bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d106      	bne.n	8007194 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40013400 	.word	0x40013400
 80071bc:	40015000 	.word	0x40015000

080071c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <LL_EXTI_EnableIT_0_31>:
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <LL_EXTI_EnableIT_0_31+0x20>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4904      	ldr	r1, [pc, #16]	; (800726c <LL_EXTI_EnableIT_0_31+0x20>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4313      	orrs	r3, r2
 800725e:	600b      	str	r3, [r1, #0]
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40010400 	.word	0x40010400

08007270 <LL_EXTI_EnableIT_32_63>:
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <LL_EXTI_EnableIT_32_63+0x20>)
 800727a:	6a1a      	ldr	r2, [r3, #32]
 800727c:	4904      	ldr	r1, [pc, #16]	; (8007290 <LL_EXTI_EnableIT_32_63+0x20>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4313      	orrs	r3, r2
 8007282:	620b      	str	r3, [r1, #32]
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	40010400 	.word	0x40010400

08007294 <LL_EXTI_DisableIT_0_31>:
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	43db      	mvns	r3, r3
 80072a4:	4904      	ldr	r1, [pc, #16]	; (80072b8 <LL_EXTI_DisableIT_0_31+0x24>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40010400 	.word	0x40010400

080072bc <LL_EXTI_DisableIT_32_63>:
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80072c6:	6a1a      	ldr	r2, [r3, #32]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	43db      	mvns	r3, r3
 80072cc:	4904      	ldr	r1, [pc, #16]	; (80072e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80072ce:	4013      	ands	r3, r2
 80072d0:	620b      	str	r3, [r1, #32]
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010400 	.word	0x40010400

080072e4 <LL_EXTI_EnableEvent_0_31>:
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	4904      	ldr	r1, [pc, #16]	; (8007304 <LL_EXTI_EnableEvent_0_31+0x20>)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	604b      	str	r3, [r1, #4]
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40010400 	.word	0x40010400

08007308 <LL_EXTI_EnableEvent_32_63>:
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007314:	4904      	ldr	r1, [pc, #16]	; (8007328 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4313      	orrs	r3, r2
 800731a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40010400 	.word	0x40010400

0800732c <LL_EXTI_DisableEvent_0_31>:
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	43db      	mvns	r3, r3
 800733c:	4904      	ldr	r1, [pc, #16]	; (8007350 <LL_EXTI_DisableEvent_0_31+0x24>)
 800733e:	4013      	ands	r3, r2
 8007340:	604b      	str	r3, [r1, #4]
}
 8007342:	bf00      	nop
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40010400 	.word	0x40010400

08007354 <LL_EXTI_DisableEvent_32_63>:
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <LL_EXTI_DisableEvent_32_63+0x24>)
 800735e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	43db      	mvns	r3, r3
 8007364:	4904      	ldr	r1, [pc, #16]	; (8007378 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007366:	4013      	ands	r3, r2
 8007368:	624b      	str	r3, [r1, #36]	; 0x24
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40010400 	.word	0x40010400

0800737c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	4904      	ldr	r1, [pc, #16]	; (800739c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4313      	orrs	r3, r2
 800738e:	608b      	str	r3, [r1, #8]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40010400 	.word	0x40010400

080073a0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80073aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ac:	4904      	ldr	r1, [pc, #16]	; (80073c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	40010400 	.word	0x40010400

080073c4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	43db      	mvns	r3, r3
 80073d4:	4904      	ldr	r1, [pc, #16]	; (80073e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	608b      	str	r3, [r1, #8]
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40010400 	.word	0x40010400

080073ec <LL_EXTI_DisableRisingTrig_32_63>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80073f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	4904      	ldr	r1, [pc, #16]	; (8007410 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80073fe:	4013      	ands	r3, r2
 8007400:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010400 	.word	0x40010400

08007414 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	4904      	ldr	r1, [pc, #16]	; (8007434 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4313      	orrs	r3, r2
 8007426:	60cb      	str	r3, [r1, #12]
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40010400 	.word	0x40010400

08007438 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4904      	ldr	r1, [pc, #16]	; (8007458 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4313      	orrs	r3, r2
 800744a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40010400 	.word	0x40010400

0800745c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	43db      	mvns	r3, r3
 800746c:	4904      	ldr	r1, [pc, #16]	; (8007480 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800746e:	4013      	ands	r3, r2
 8007470:	60cb      	str	r3, [r1, #12]
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40010400 	.word	0x40010400

08007484 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	43db      	mvns	r3, r3
 8007494:	4904      	ldr	r1, [pc, #16]	; (80074a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007496:	4013      	ands	r3, r2
 8007498:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40010400 	.word	0x40010400

080074ac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	7a1b      	ldrb	r3, [r3, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80c8 	beq.w	8007652 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d05d      	beq.n	8007586 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	7a5b      	ldrb	r3, [r3, #9]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d00e      	beq.n	80074f0 <LL_EXTI_Init+0x44>
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d017      	beq.n	8007506 <LL_EXTI_Init+0x5a>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d120      	bne.n	800751c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff ff24 	bl	800732c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff feaf 	bl	800724c <LL_EXTI_EnableIT_0_31>
          break;
 80074ee:	e018      	b.n	8007522 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fecd 	bl	8007294 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fef0 	bl	80072e4 <LL_EXTI_EnableEvent_0_31>
          break;
 8007504:	e00d      	b.n	8007522 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fe9e 	bl	800724c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fee5 	bl	80072e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800751a:	e002      	b.n	8007522 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800751c:	2301      	movs	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
          break;
 8007520:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7a9b      	ldrb	r3, [r3, #10]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d02d      	beq.n	8007586 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7a9b      	ldrb	r3, [r3, #10]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d00e      	beq.n	8007550 <LL_EXTI_Init+0xa4>
 8007532:	2b03      	cmp	r3, #3
 8007534:	d017      	beq.n	8007566 <LL_EXTI_Init+0xba>
 8007536:	2b01      	cmp	r3, #1
 8007538:	d120      	bne.n	800757c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff ff8c 	bl	800745c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff ff17 	bl	800737c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800754e:	e01b      	b.n	8007588 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff ff35 	bl	80073c4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff ff58 	bl	8007414 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007564:	e010      	b.n	8007588 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ff06 	bl	800737c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff ff4d 	bl	8007414 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800757a:	e005      	b.n	8007588 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f043 0302 	orr.w	r3, r3, #2
 8007582:	60fb      	str	r3, [r7, #12]
            break;
 8007584:	e000      	b.n	8007588 <LL_EXTI_Init+0xdc>
        }
      }
 8007586:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d075      	beq.n	800767c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	7a5b      	ldrb	r3, [r3, #9]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d00e      	beq.n	80075b6 <LL_EXTI_Init+0x10a>
 8007598:	2b02      	cmp	r3, #2
 800759a:	d017      	beq.n	80075cc <LL_EXTI_Init+0x120>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d120      	bne.n	80075e2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff fed5 	bl	8007354 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fe5e 	bl	8007270 <LL_EXTI_EnableIT_32_63>
          break;
 80075b4:	e01a      	b.n	80075ec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fe7e 	bl	80072bc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fe9f 	bl	8007308 <LL_EXTI_EnableEvent_32_63>
          break;
 80075ca:	e00f      	b.n	80075ec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fe4d 	bl	8007270 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fe94 	bl	8007308 <LL_EXTI_EnableEvent_32_63>
          break;
 80075e0:	e004      	b.n	80075ec <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f043 0304 	orr.w	r3, r3, #4
 80075e8:	60fb      	str	r3, [r7, #12]
          break;
 80075ea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7a9b      	ldrb	r3, [r3, #10]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d043      	beq.n	800767c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7a9b      	ldrb	r3, [r3, #10]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d00e      	beq.n	800761a <LL_EXTI_Init+0x16e>
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d017      	beq.n	8007630 <LL_EXTI_Init+0x184>
 8007600:	2b01      	cmp	r3, #1
 8007602:	d120      	bne.n	8007646 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff ff3b 	bl	8007484 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fec4 	bl	80073a0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007618:	e031      	b.n	800767e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fee4 	bl	80073ec <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff ff05 	bl	8007438 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800762e:	e026      	b.n	800767e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff feb3 	bl	80073a0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fefa 	bl	8007438 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007644:	e01b      	b.n	800767e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f043 0305 	orr.w	r3, r3, #5
 800764c:	60fb      	str	r3, [r7, #12]
            break;
 800764e:	bf00      	nop
 8007650:	e015      	b.n	800767e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff fe1c 	bl	8007294 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fe63 	bl	800732c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff fe26 	bl	80072bc <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fe6d 	bl	8007354 <LL_EXTI_DisableEvent_32_63>
 800767a:	e000      	b.n	800767e <LL_EXTI_Init+0x1d2>
      }
 800767c:	bf00      	nop
  }

  return status;
 800767e:	68fb      	ldr	r3, [r7, #12]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <LL_GPIO_SetPinMode>:
{
 8007688:	b480      	push	{r7}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	fa93 f3a3 	rbit	r3, r3
 80076a2:	613b      	str	r3, [r7, #16]
  return result;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	fab3 f383 	clz	r3, r3
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	2103      	movs	r1, #3
 80076b0:	fa01 f303 	lsl.w	r3, r1, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	401a      	ands	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	fa93 f3a3 	rbit	r3, r3
 80076c2:	61bb      	str	r3, [r7, #24]
  return result;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	fab3 f383 	clz	r3, r3
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	fa01 f303 	lsl.w	r3, r1, r3
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]
}
 80076da:	bf00      	nop
 80076dc:	3724      	adds	r7, #36	; 0x24
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <LL_GPIO_SetPinOutputType>:
{
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	401a      	ands	r2, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	431a      	orrs	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]
}
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <LL_GPIO_SetPinSpeed>:
{
 8007716:	b480      	push	{r7}
 8007718:	b089      	sub	sp, #36	; 0x24
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	fa93 f3a3 	rbit	r3, r3
 8007730:	613b      	str	r3, [r7, #16]
  return result;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	fab3 f383 	clz	r3, r3
 8007738:	b2db      	uxtb	r3, r3
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	2103      	movs	r1, #3
 800773e:	fa01 f303 	lsl.w	r3, r1, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	401a      	ands	r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	fa93 f3a3 	rbit	r3, r3
 8007750:	61bb      	str	r3, [r7, #24]
  return result;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	fab3 f383 	clz	r3, r3
 8007758:	b2db      	uxtb	r3, r3
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	431a      	orrs	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	609a      	str	r2, [r3, #8]
}
 8007768:	bf00      	nop
 800776a:	3724      	adds	r7, #36	; 0x24
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <LL_GPIO_SetPinPull>:
{
 8007774:	b480      	push	{r7}
 8007776:	b089      	sub	sp, #36	; 0x24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	fa93 f3a3 	rbit	r3, r3
 800778e:	613b      	str	r3, [r7, #16]
  return result;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	fab3 f383 	clz	r3, r3
 8007796:	b2db      	uxtb	r3, r3
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	2103      	movs	r1, #3
 800779c:	fa01 f303 	lsl.w	r3, r1, r3
 80077a0:	43db      	mvns	r3, r3
 80077a2:	401a      	ands	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	fa93 f3a3 	rbit	r3, r3
 80077ae:	61bb      	str	r3, [r7, #24]
  return result;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	fab3 f383 	clz	r3, r3
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	60da      	str	r2, [r3, #12]
}
 80077c6:	bf00      	nop
 80077c8:	3724      	adds	r7, #36	; 0x24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <LL_GPIO_SetAFPin_0_7>:
{
 80077d2:	b480      	push	{r7}
 80077d4:	b089      	sub	sp, #36	; 0x24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1a      	ldr	r2, [r3, #32]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	fa93 f3a3 	rbit	r3, r3
 80077ec:	613b      	str	r3, [r7, #16]
  return result;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	fab3 f383 	clz	r3, r3
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	210f      	movs	r1, #15
 80077fa:	fa01 f303 	lsl.w	r3, r1, r3
 80077fe:	43db      	mvns	r3, r3
 8007800:	401a      	ands	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	fa93 f3a3 	rbit	r3, r3
 800780c:	61bb      	str	r3, [r7, #24]
  return result;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	fab3 f383 	clz	r3, r3
 8007814:	b2db      	uxtb	r3, r3
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	431a      	orrs	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	621a      	str	r2, [r3, #32]
}
 8007824:	bf00      	nop
 8007826:	3724      	adds	r7, #36	; 0x24
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <LL_GPIO_SetAFPin_8_15>:
{
 8007830:	b480      	push	{r7}
 8007832:	b089      	sub	sp, #36	; 0x24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	0a1b      	lsrs	r3, r3, #8
 8007844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	fa93 f3a3 	rbit	r3, r3
 800784c:	613b      	str	r3, [r7, #16]
  return result;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	fab3 f383 	clz	r3, r3
 8007854:	b2db      	uxtb	r3, r3
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	210f      	movs	r1, #15
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	43db      	mvns	r3, r3
 8007860:	401a      	ands	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	0a1b      	lsrs	r3, r3, #8
 8007866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	fa93 f3a3 	rbit	r3, r3
 800786e:	61bb      	str	r3, [r7, #24]
  return result;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	fab3 f383 	clz	r3, r3
 8007876:	b2db      	uxtb	r3, r3
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	fa01 f303 	lsl.w	r3, r1, r3
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007886:	bf00      	nop
 8007888:	3724      	adds	r7, #36	; 0x24
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	fa93 f3a3 	rbit	r3, r3
 80078a8:	60bb      	str	r3, [r7, #8]
  return result;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	fab3 f383 	clz	r3, r3
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80078b4:	e040      	b.n	8007938 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	2101      	movs	r1, #1
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	fa01 f303 	lsl.w	r3, r1, r3
 80078c2:	4013      	ands	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d032      	beq.n	8007932 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6939      	ldr	r1, [r7, #16]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff fed7 	bl	8007688 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d003      	beq.n	80078ea <LL_GPIO_Init+0x58>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d106      	bne.n	80078f8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6939      	ldr	r1, [r7, #16]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff ff0f 	bl	8007716 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6939      	ldr	r1, [r7, #16]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ff37 	bl	8007774 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b02      	cmp	r3, #2
 800790c:	d111      	bne.n	8007932 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2bff      	cmp	r3, #255	; 0xff
 8007912:	d807      	bhi.n	8007924 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	461a      	mov	r2, r3
 800791a:	6939      	ldr	r1, [r7, #16]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff58 	bl	80077d2 <LL_GPIO_SetAFPin_0_7>
 8007922:	e006      	b.n	8007932 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	461a      	mov	r2, r3
 800792a:	6939      	ldr	r1, [r7, #16]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ff7f 	bl	8007830 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	3301      	adds	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	fa22 f303 	lsr.w	r3, r2, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1b7      	bne.n	80078b6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d003      	beq.n	8007956 <LL_GPIO_Init+0xc4>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d107      	bne.n	8007966 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6819      	ldr	r1, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	461a      	mov	r2, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fec0 	bl	80076e6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8007970:	b590      	push	{r4, r7, lr}
 8007972:	b087      	sub	sp, #28
 8007974:	af02      	add	r7, sp, #8
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	461a      	mov	r2, r3
 800797e:	4623      	mov	r3, r4
 8007980:	80fb      	strh	r3, [r7, #6]
 8007982:	4603      	mov	r3, r0
 8007984:	80bb      	strh	r3, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	807b      	strh	r3, [r7, #2]
 800798a:	4613      	mov	r3, r2
 800798c:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8007992:	7bfa      	ldrb	r2, [r7, #15]
 8007994:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007998:	429a      	cmp	r2, r3
 800799a:	d93a      	bls.n	8007a12 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800799c:	88ba      	ldrh	r2, [r7, #4]
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	441a      	add	r2, r3
 80079a2:	88b9      	ldrh	r1, [r7, #4]
 80079a4:	883b      	ldrh	r3, [r7, #0]
 80079a6:	4419      	add	r1, r3
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	1acb      	subs	r3, r1, r3
 80079ac:	429a      	cmp	r2, r3
 80079ae:	f000 8090 	beq.w	8007ad2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	441a      	add	r2, r3
 80079b8:	88f9      	ldrh	r1, [r7, #6]
 80079ba:	887b      	ldrh	r3, [r7, #2]
 80079bc:	4419      	add	r1, r3
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	1acb      	subs	r3, r1, r3
 80079c2:	429a      	cmp	r2, r3
 80079c4:	f000 8085 	beq.w	8007ad2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	4413      	add	r3, r2
 80079d0:	b298      	uxth	r0, r3
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	88bb      	ldrh	r3, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	b299      	uxth	r1, r3
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	887a      	ldrh	r2, [r7, #2]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3301      	adds	r3, #1
 80079ec:	b29c      	uxth	r4, r3
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	883a      	ldrh	r2, [r7, #0]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3301      	adds	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	2304      	movs	r3, #4
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	8c3b      	ldrh	r3, [r7, #32]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	f000 fd32 	bl	8008474 <ILI9341_Draw_Rectangle>
				goto finish;
 8007a10:	e060      	b.n	8007ad4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	4413      	add	r3, r2
 8007a1a:	b298      	uxth	r0, r3
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	88bb      	ldrh	r3, [r7, #4]
 8007a22:	4413      	add	r3, r2
 8007a24:	b299      	uxth	r1, r3
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	887a      	ldrh	r2, [r7, #2]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f000 fda1 	bl	8008580 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	4413      	add	r3, r2
 8007a46:	b298      	uxth	r0, r3
										(y + h) - b,
 8007a48:	88ba      	ldrh	r2, [r7, #4]
 8007a4a:	883b      	ldrh	r3, [r7, #0]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	b299      	uxth	r1, r3
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	887a      	ldrh	r2, [r7, #2]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f000 fd8a 	bl	8008580 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	4413      	add	r3, r2
 8007a74:	b298      	uxth	r0, r3
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	88bb      	ldrh	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	b299      	uxth	r1, r3
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	883a      	ldrh	r2, [r7, #0]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f000 fdbc 	bl	8008610 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	887b      	ldrh	r3, [r7, #2]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	b298      	uxth	r0, r3
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	88bb      	ldrh	r3, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	b299      	uxth	r1, r3
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	883a      	ldrh	r2, [r7, #0]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f000 fda3 	bl	8008610 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	3301      	adds	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8007ad0:	e75f      	b.n	8007992 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8007ad2:	bf00      	nop
	// done
	return;
 8007ad4:	bf00      	nop
}
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd90      	pop	{r4, r7, pc}

08007adc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	4623      	mov	r3, r4
 8007aec:	71fb      	strb	r3, [r7, #7]
 8007aee:	4603      	mov	r3, r0
 8007af0:	80bb      	strh	r3, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	807b      	strh	r3, [r7, #2]
 8007af6:	4613      	mov	r3, r2
 8007af8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	2b1f      	cmp	r3, #31
 8007b02:	d802      	bhi.n	8007b0a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	71fb      	strb	r3, [r7, #7]
 8007b08:	e002      	b.n	8007b10 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	3b20      	subs	r3, #32
 8007b0e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007b10:	2300      	movs	r3, #0
 8007b12:	753b      	strb	r3, [r7, #20]
 8007b14:	e012      	b.n	8007b3c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8007b16:	7dfa      	ldrb	r2, [r7, #23]
 8007b18:	7d38      	ldrb	r0, [r7, #20]
 8007b1a:	7d39      	ldrb	r1, [r7, #20]
 8007b1c:	4c48      	ldr	r4, [pc, #288]	; (8007c40 <ILI9341_Draw_Char+0x164>)
 8007b1e:	4613      	mov	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	4413      	add	r3, r2
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4423      	add	r3, r4
 8007b28:	4403      	add	r3, r0
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	f107 0318 	add.w	r3, r7, #24
 8007b30:	440b      	add	r3, r1
 8007b32:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007b36:	7d3b      	ldrb	r3, [r7, #20]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	753b      	strb	r3, [r7, #20]
 8007b3c:	7d3b      	ldrb	r3, [r7, #20]
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	d9e9      	bls.n	8007b16 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8007b42:	2300      	movs	r3, #0
 8007b44:	757b      	strb	r3, [r7, #21]
 8007b46:	e074      	b.n	8007c32 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	75bb      	strb	r3, [r7, #22]
 8007b4c:	e06b      	b.n	8007c26 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8007b4e:	7d7b      	ldrb	r3, [r7, #21]
 8007b50:	f107 0218 	add.w	r2, r7, #24
 8007b54:	4413      	add	r3, r2
 8007b56:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	7dbb      	ldrb	r3, [r7, #22]
 8007b5e:	fa42 f303 	asr.w	r3, r2, r3
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d02d      	beq.n	8007bc6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8007b6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d10e      	bne.n	8007b8e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8007b70:	7d7b      	ldrb	r3, [r7, #21]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	88bb      	ldrh	r3, [r7, #4]
 8007b76:	4413      	add	r3, r2
 8007b78:	b298      	uxth	r0, r3
 8007b7a:	7dbb      	ldrb	r3, [r7, #22]
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	887b      	ldrh	r3, [r7, #2]
 8007b80:	4413      	add	r3, r2
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	883a      	ldrh	r2, [r7, #0]
 8007b86:	4619      	mov	r1, r3
 8007b88:	f000 fb9a 	bl	80082c0 <ILI9341_Draw_Pixel>
 8007b8c:	e048      	b.n	8007c20 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8007b8e:	7d7b      	ldrb	r3, [r7, #21]
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007b94:	fb12 f303 	smulbb	r3, r2, r3
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	88bb      	ldrh	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	b298      	uxth	r0, r3
 8007ba0:	7dbb      	ldrb	r3, [r7, #22]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007ba6:	fb12 f303 	smulbb	r3, r2, r3
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	4413      	add	r3, r2
 8007bb0:	b299      	uxth	r1, r3
 8007bb2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007bb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	883b      	ldrh	r3, [r7, #0]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	f000 fc58 	bl	8008474 <ILI9341_Draw_Rectangle>
 8007bc4:	e02c      	b.n	8007c20 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8007bc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d10e      	bne.n	8007bea <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8007bcc:	7d7b      	ldrb	r3, [r7, #21]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	88bb      	ldrh	r3, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	b298      	uxth	r0, r3
 8007bd6:	7dbb      	ldrb	r3, [r7, #22]
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	887b      	ldrh	r3, [r7, #2]
 8007bdc:	4413      	add	r3, r2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007be2:	4619      	mov	r1, r3
 8007be4:	f000 fb6c 	bl	80082c0 <ILI9341_Draw_Pixel>
 8007be8:	e01a      	b.n	8007c20 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8007bea:	7d7b      	ldrb	r3, [r7, #21]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007bf0:	fb12 f303 	smulbb	r3, r2, r3
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	88bb      	ldrh	r3, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	b298      	uxth	r0, r3
 8007bfc:	7dbb      	ldrb	r3, [r7, #22]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007c02:	fb12 f303 	smulbb	r3, r2, r3
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	887b      	ldrh	r3, [r7, #2]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	b299      	uxth	r1, r3
 8007c0e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007c10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007c12:	2301      	movs	r3, #1
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	f000 fc2a 	bl	8008474 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8007c20:	7dbb      	ldrb	r3, [r7, #22]
 8007c22:	3301      	adds	r3, #1
 8007c24:	75bb      	strb	r3, [r7, #22]
 8007c26:	7dbb      	ldrb	r3, [r7, #22]
 8007c28:	2b07      	cmp	r3, #7
 8007c2a:	d990      	bls.n	8007b4e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8007c2c:	7d7b      	ldrb	r3, [r7, #21]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	757b      	strb	r3, [r7, #21]
 8007c32:	7d7b      	ldrb	r3, [r7, #21]
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	d987      	bls.n	8007b48 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd90      	pop	{r4, r7, pc}
 8007c40:	08009bcc 	.word	0x08009bcc

08007c44 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	461a      	mov	r2, r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	817b      	strh	r3, [r7, #10]
 8007c56:	460b      	mov	r3, r1
 8007c58:	813b      	strh	r3, [r7, #8]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8007c5e:	e016      	b.n	8007c8e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	60fa      	str	r2, [r7, #12]
 8007c66:	7818      	ldrb	r0, [r3, #0]
 8007c68:	88fc      	ldrh	r4, [r7, #6]
 8007c6a:	893a      	ldrh	r2, [r7, #8]
 8007c6c:	8979      	ldrh	r1, [r7, #10]
 8007c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	8c3b      	ldrh	r3, [r7, #32]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4623      	mov	r3, r4
 8007c78:	f7ff ff30 	bl	8007adc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8007c7c:	8c3b      	ldrh	r3, [r7, #32]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	0052      	lsls	r2, r2, #1
 8007c82:	4413      	add	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	897b      	ldrh	r3, [r7, #10]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e4      	bne.n	8007c60 <ILI9341_Draw_Text+0x1c>
    }


}
 8007c96:	bf00      	nop
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd90      	pop	{r4, r7, pc}
	...

08007ca0 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <ILI9341_SPI_Init+0x1c>)
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	4a04      	ldr	r2, [pc, #16]	; (8007cbc <ILI9341_SPI_Init+0x1c>)
 8007caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cae:	6153      	str	r3, [r2, #20]
}
 8007cb0:	bf00      	nop
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	48000400 	.word	0x48000400

08007cc0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 8007cca:	1df9      	adds	r1, r7, #7
 8007ccc:	2301      	movs	r3, #1
 8007cce:	2201      	movs	r2, #1
 8007cd0:	4804      	ldr	r0, [pc, #16]	; (8007ce4 <ILI9341_SPI_Send+0x24>)
 8007cd2:	f7fe f865 	bl	8005da0 <HAL_SPI_Transmit>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	200006f4 	.word	0x200006f4

08007ce8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <ILI9341_Write_Command+0x40>)
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	4a0c      	ldr	r2, [pc, #48]	; (8007d28 <ILI9341_Write_Command+0x40>)
 8007cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfc:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <ILI9341_Write_Command+0x40>)
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <ILI9341_Write_Command+0x40>)
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff ffd7 	bl	8007cc0 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <ILI9341_Write_Command+0x40>)
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	4a04      	ldr	r2, [pc, #16]	; (8007d28 <ILI9341_Write_Command+0x40>)
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	6153      	str	r3, [r2, #20]
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	48000400 	.word	0x48000400

08007d2c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007d36:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <ILI9341_Write_Data+0x40>)
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	4a0c      	ldr	r2, [pc, #48]	; (8007d6c <ILI9341_Write_Data+0x40>)
 8007d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d40:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007d42:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <ILI9341_Write_Data+0x40>)
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	4a09      	ldr	r2, [pc, #36]	; (8007d6c <ILI9341_Write_Data+0x40>)
 8007d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d4c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff ffb5 	bl	8007cc0 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <ILI9341_Write_Data+0x40>)
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <ILI9341_Write_Data+0x40>)
 8007d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d60:	6153      	str	r3, [r2, #20]
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	48000400 	.word	0x48000400

08007d70 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4623      	mov	r3, r4
 8007d80:	80fb      	strh	r3, [r7, #6]
 8007d82:	4603      	mov	r3, r0
 8007d84:	80bb      	strh	r3, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	807b      	strh	r3, [r7, #2]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007d8e:	202a      	movs	r0, #42	; 0x2a
 8007d90:	f7ff ffaa 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	0a1b      	lsrs	r3, r3, #8
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff ffc5 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff ffc0 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff ffb9 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8007dba:	887b      	ldrh	r3, [r7, #2]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff ffb4 	bl	8007d2c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8007dc4:	202b      	movs	r0, #43	; 0x2b
 8007dc6:	f7ff ff8f 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8007dca:	88bb      	ldrh	r3, [r7, #4]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff ffaa 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8007dd8:	88bb      	ldrh	r3, [r7, #4]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff ffa5 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8007de2:	883b      	ldrh	r3, [r7, #0]
 8007de4:	0a1b      	lsrs	r3, r3, #8
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff ff9e 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8007df0:	883b      	ldrh	r3, [r7, #0]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff ff99 	bl	8007d2c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8007dfa:	202c      	movs	r0, #44	; 0x2c
 8007dfc:	f7ff ff74 	bl	8007ce8 <ILI9341_Write_Command>
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd90      	pop	{r4, r7, pc}

08007e08 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <ILI9341_Reset+0x38>)
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	4a0b      	ldr	r2, [pc, #44]	; (8007e40 <ILI9341_Reset+0x38>)
 8007e12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e16:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007e18:	20c8      	movs	r0, #200	; 0xc8
 8007e1a:	f7fa faef 	bl	80023fc <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007e1e:	4b08      	ldr	r3, [pc, #32]	; (8007e40 <ILI9341_Reset+0x38>)
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	4a07      	ldr	r2, [pc, #28]	; (8007e40 <ILI9341_Reset+0x38>)
 8007e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e28:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007e2a:	20c8      	movs	r0, #200	; 0xc8
 8007e2c:	f7fa fae6 	bl	80023fc <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007e30:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <ILI9341_Reset+0x38>)
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	4a02      	ldr	r2, [pc, #8]	; (8007e40 <ILI9341_Reset+0x38>)
 8007e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e3a:	6153      	str	r3, [r2, #20]
}
 8007e3c:	bf00      	nop
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	48000400 	.word	0x48000400

08007e44 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8007e52:	2036      	movs	r0, #54	; 0x36
 8007e54:	f7ff ff48 	bl	8007ce8 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d836      	bhi.n	8007ecc <ILI9341_Set_Rotation+0x88>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <ILI9341_Set_Rotation+0x20>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007e8b 	.word	0x08007e8b
 8007e6c:	08007ea1 	.word	0x08007ea1
 8007e70:	08007eb7 	.word	0x08007eb7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8007e74:	2048      	movs	r0, #72	; 0x48
 8007e76:	f7ff ff59 	bl	8007d2c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007e7a:	4b17      	ldr	r3, [pc, #92]	; (8007ed8 <ILI9341_Set_Rotation+0x94>)
 8007e7c:	22f0      	movs	r2, #240	; 0xf0
 8007e7e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007e80:	4b16      	ldr	r3, [pc, #88]	; (8007edc <ILI9341_Set_Rotation+0x98>)
 8007e82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007e86:	801a      	strh	r2, [r3, #0]
			break;
 8007e88:	e021      	b.n	8007ece <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007e8a:	2028      	movs	r0, #40	; 0x28
 8007e8c:	f7ff ff4e 	bl	8007d2c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <ILI9341_Set_Rotation+0x94>)
 8007e92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007e96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007e98:	4b10      	ldr	r3, [pc, #64]	; (8007edc <ILI9341_Set_Rotation+0x98>)
 8007e9a:	22f0      	movs	r2, #240	; 0xf0
 8007e9c:	801a      	strh	r2, [r3, #0]
			break;
 8007e9e:	e016      	b.n	8007ece <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007ea0:	2088      	movs	r0, #136	; 0x88
 8007ea2:	f7ff ff43 	bl	8007d2c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <ILI9341_Set_Rotation+0x94>)
 8007ea8:	22f0      	movs	r2, #240	; 0xf0
 8007eaa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007eac:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <ILI9341_Set_Rotation+0x98>)
 8007eae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007eb2:	801a      	strh	r2, [r3, #0]
			break;
 8007eb4:	e00b      	b.n	8007ece <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007eb6:	20e8      	movs	r0, #232	; 0xe8
 8007eb8:	f7ff ff38 	bl	8007d2c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007ebc:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <ILI9341_Set_Rotation+0x94>)
 8007ebe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007ec2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <ILI9341_Set_Rotation+0x98>)
 8007ec6:	22f0      	movs	r2, #240	; 0xf0
 8007ec8:	801a      	strh	r2, [r3, #0]
			break;
 8007eca:	e000      	b.n	8007ece <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007ecc:	bf00      	nop
	}
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200003da 	.word	0x200003da
 8007edc:	200003d8 	.word	0x200003d8

08007ee0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <ILI9341_Enable+0x1c>)
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	4a04      	ldr	r2, [pc, #16]	; (8007efc <ILI9341_Enable+0x1c>)
 8007eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007eee:	6153      	str	r3, [r2, #20]
}
 8007ef0:	bf00      	nop
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	48000400 	.word	0x48000400

08007f00 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8007f04:	f7ff ffec 	bl	8007ee0 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007f08:	f7ff feca 	bl	8007ca0 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007f0c:	f7ff ff7c 	bl	8007e08 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007f10:	2001      	movs	r0, #1
 8007f12:	f7ff fee9 	bl	8007ce8 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007f16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007f1a:	f7fa fa6f 	bl	80023fc <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007f1e:	20cb      	movs	r0, #203	; 0xcb
 8007f20:	f7ff fee2 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007f24:	2039      	movs	r0, #57	; 0x39
 8007f26:	f7ff ff01 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007f2a:	202c      	movs	r0, #44	; 0x2c
 8007f2c:	f7ff fefe 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007f30:	2000      	movs	r0, #0
 8007f32:	f7ff fefb 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007f36:	2034      	movs	r0, #52	; 0x34
 8007f38:	f7ff fef8 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007f3c:	2002      	movs	r0, #2
 8007f3e:	f7ff fef5 	bl	8007d2c <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007f42:	20cf      	movs	r0, #207	; 0xcf
 8007f44:	f7ff fed0 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007f48:	2000      	movs	r0, #0
 8007f4a:	f7ff feef 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007f4e:	20c1      	movs	r0, #193	; 0xc1
 8007f50:	f7ff feec 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007f54:	2030      	movs	r0, #48	; 0x30
 8007f56:	f7ff fee9 	bl	8007d2c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007f5a:	20e8      	movs	r0, #232	; 0xe8
 8007f5c:	f7ff fec4 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007f60:	2085      	movs	r0, #133	; 0x85
 8007f62:	f7ff fee3 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007f66:	2000      	movs	r0, #0
 8007f68:	f7ff fee0 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007f6c:	2078      	movs	r0, #120	; 0x78
 8007f6e:	f7ff fedd 	bl	8007d2c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007f72:	20ea      	movs	r0, #234	; 0xea
 8007f74:	f7ff feb8 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007f78:	2000      	movs	r0, #0
 8007f7a:	f7ff fed7 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007f7e:	2000      	movs	r0, #0
 8007f80:	f7ff fed4 	bl	8007d2c <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007f84:	20ed      	movs	r0, #237	; 0xed
 8007f86:	f7ff feaf 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007f8a:	2064      	movs	r0, #100	; 0x64
 8007f8c:	f7ff fece 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007f90:	2003      	movs	r0, #3
 8007f92:	f7ff fecb 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007f96:	2012      	movs	r0, #18
 8007f98:	f7ff fec8 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007f9c:	2081      	movs	r0, #129	; 0x81
 8007f9e:	f7ff fec5 	bl	8007d2c <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007fa2:	20f7      	movs	r0, #247	; 0xf7
 8007fa4:	f7ff fea0 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007fa8:	2020      	movs	r0, #32
 8007faa:	f7ff febf 	bl	8007d2c <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007fae:	20c0      	movs	r0, #192	; 0xc0
 8007fb0:	f7ff fe9a 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007fb4:	2023      	movs	r0, #35	; 0x23
 8007fb6:	f7ff feb9 	bl	8007d2c <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007fba:	20c1      	movs	r0, #193	; 0xc1
 8007fbc:	f7ff fe94 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007fc0:	2010      	movs	r0, #16
 8007fc2:	f7ff feb3 	bl	8007d2c <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007fc6:	20c5      	movs	r0, #197	; 0xc5
 8007fc8:	f7ff fe8e 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007fcc:	203e      	movs	r0, #62	; 0x3e
 8007fce:	f7ff fead 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007fd2:	2028      	movs	r0, #40	; 0x28
 8007fd4:	f7ff feaa 	bl	8007d2c <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007fd8:	20c7      	movs	r0, #199	; 0xc7
 8007fda:	f7ff fe85 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007fde:	2086      	movs	r0, #134	; 0x86
 8007fe0:	f7ff fea4 	bl	8007d2c <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007fe4:	2036      	movs	r0, #54	; 0x36
 8007fe6:	f7ff fe7f 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007fea:	2048      	movs	r0, #72	; 0x48
 8007fec:	f7ff fe9e 	bl	8007d2c <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007ff0:	203a      	movs	r0, #58	; 0x3a
 8007ff2:	f7ff fe79 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007ff6:	2055      	movs	r0, #85	; 0x55
 8007ff8:	f7ff fe98 	bl	8007d2c <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007ffc:	20b1      	movs	r0, #177	; 0xb1
 8007ffe:	f7ff fe73 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008002:	2000      	movs	r0, #0
 8008004:	f7ff fe92 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008008:	2018      	movs	r0, #24
 800800a:	f7ff fe8f 	bl	8007d2c <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800800e:	20b6      	movs	r0, #182	; 0xb6
 8008010:	f7ff fe6a 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008014:	2008      	movs	r0, #8
 8008016:	f7ff fe89 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 800801a:	2082      	movs	r0, #130	; 0x82
 800801c:	f7ff fe86 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008020:	2027      	movs	r0, #39	; 0x27
 8008022:	f7ff fe83 	bl	8007d2c <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008026:	20f2      	movs	r0, #242	; 0xf2
 8008028:	f7ff fe5e 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800802c:	2000      	movs	r0, #0
 800802e:	f7ff fe7d 	bl	8007d2c <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008032:	2026      	movs	r0, #38	; 0x26
 8008034:	f7ff fe58 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008038:	2001      	movs	r0, #1
 800803a:	f7ff fe77 	bl	8007d2c <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 800803e:	20e0      	movs	r0, #224	; 0xe0
 8008040:	f7ff fe52 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008044:	200f      	movs	r0, #15
 8008046:	f7ff fe71 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800804a:	2031      	movs	r0, #49	; 0x31
 800804c:	f7ff fe6e 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8008050:	202b      	movs	r0, #43	; 0x2b
 8008052:	f7ff fe6b 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008056:	200c      	movs	r0, #12
 8008058:	f7ff fe68 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800805c:	200e      	movs	r0, #14
 800805e:	f7ff fe65 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008062:	2008      	movs	r0, #8
 8008064:	f7ff fe62 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008068:	204e      	movs	r0, #78	; 0x4e
 800806a:	f7ff fe5f 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 800806e:	20f1      	movs	r0, #241	; 0xf1
 8008070:	f7ff fe5c 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008074:	2037      	movs	r0, #55	; 0x37
 8008076:	f7ff fe59 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800807a:	2007      	movs	r0, #7
 800807c:	f7ff fe56 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8008080:	2010      	movs	r0, #16
 8008082:	f7ff fe53 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008086:	2003      	movs	r0, #3
 8008088:	f7ff fe50 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800808c:	200e      	movs	r0, #14
 800808e:	f7ff fe4d 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8008092:	2009      	movs	r0, #9
 8008094:	f7ff fe4a 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008098:	2000      	movs	r0, #0
 800809a:	f7ff fe47 	bl	8007d2c <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 800809e:	20e1      	movs	r0, #225	; 0xe1
 80080a0:	f7ff fe22 	bl	8007ce8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80080a4:	2000      	movs	r0, #0
 80080a6:	f7ff fe41 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80080aa:	200e      	movs	r0, #14
 80080ac:	f7ff fe3e 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80080b0:	2014      	movs	r0, #20
 80080b2:	f7ff fe3b 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80080b6:	2003      	movs	r0, #3
 80080b8:	f7ff fe38 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80080bc:	2011      	movs	r0, #17
 80080be:	f7ff fe35 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80080c2:	2007      	movs	r0, #7
 80080c4:	f7ff fe32 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80080c8:	2031      	movs	r0, #49	; 0x31
 80080ca:	f7ff fe2f 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80080ce:	20c1      	movs	r0, #193	; 0xc1
 80080d0:	f7ff fe2c 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80080d4:	2048      	movs	r0, #72	; 0x48
 80080d6:	f7ff fe29 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80080da:	2008      	movs	r0, #8
 80080dc:	f7ff fe26 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80080e0:	200f      	movs	r0, #15
 80080e2:	f7ff fe23 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80080e6:	200c      	movs	r0, #12
 80080e8:	f7ff fe20 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80080ec:	2031      	movs	r0, #49	; 0x31
 80080ee:	f7ff fe1d 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 80080f2:	2036      	movs	r0, #54	; 0x36
 80080f4:	f7ff fe1a 	bl	8007d2c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80080f8:	200f      	movs	r0, #15
 80080fa:	f7ff fe17 	bl	8007d2c <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80080fe:	2011      	movs	r0, #17
 8008100:	f7ff fdf2 	bl	8007ce8 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008104:	20f0      	movs	r0, #240	; 0xf0
 8008106:	f7fa f979 	bl	80023fc <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800810a:	2029      	movs	r0, #41	; 0x29
 800810c:	f7ff fdec 	bl	8007ce8 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008110:	2000      	movs	r0, #0
 8008112:	f7ff fe97 	bl	8007e44 <ILI9341_Set_Rotation>
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800811c:	b5b0      	push	{r4, r5, r7, lr}
 800811e:	b08e      	sub	sp, #56	; 0x38
 8008120:	af00      	add	r7, sp, #0
 8008122:	607b      	str	r3, [r7, #4]
 8008124:	4603      	mov	r3, r0
 8008126:	81fb      	strh	r3, [r7, #14]
 8008128:	460b      	mov	r3, r1
 800812a:	81bb      	strh	r3, [r7, #12]
 800812c:	4613      	mov	r3, r2
 800812e:	817b      	strh	r3, [r7, #10]
 8008130:	466b      	mov	r3, sp
 8008132:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	4a48      	ldr	r2, [pc, #288]	; (8008260 <ILI9341_Draw_colour_Burst+0x144>)
 800813e:	8812      	ldrh	r2, [r2, #0]
 8008140:	4293      	cmp	r3, r2
 8008142:	d202      	bcs.n	800814a <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008148:	e002      	b.n	8008150 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800814a:	4b45      	ldr	r3, [pc, #276]	; (8008260 <ILI9341_Draw_colour_Burst+0x144>)
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8008150:	897b      	ldrh	r3, [r7, #10]
 8008152:	0a1b      	lsrs	r3, r3, #8
 8008154:	b29b      	uxth	r3, r3
 8008156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 800815a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800815c:	4603      	mov	r3, r0
 800815e:	3b01      	subs	r3, #1
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	4601      	mov	r1, r0
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	f04f 0400 	mov.w	r4, #0
 8008170:	00d4      	lsls	r4, r2, #3
 8008172:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008176:	00cb      	lsls	r3, r1, #3
 8008178:	4601      	mov	r1, r0
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	f04f 0400 	mov.w	r4, #0
 8008186:	00d4      	lsls	r4, r2, #3
 8008188:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800818c:	00cb      	lsls	r3, r1, #3
 800818e:	1dc3      	adds	r3, r0, #7
 8008190:	08db      	lsrs	r3, r3, #3
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	ebad 0d03 	sub.w	sp, sp, r3
 8008198:	466b      	mov	r3, sp
 800819a:	3300      	adds	r3, #0
 800819c:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800819e:	2300      	movs	r3, #0
 80081a0:	633b      	str	r3, [r7, #48]	; 0x30
 80081a2:	e00e      	b.n	80081c2 <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	4413      	add	r3, r2
 80081aa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80081ae:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	3301      	adds	r3, #1
 80081b4:	897a      	ldrh	r2, [r7, #10]
 80081b6:	b2d1      	uxtb	r1, r2
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	3302      	adds	r3, #2
 80081c0:	633b      	str	r3, [r7, #48]	; 0x30
 80081c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d3ec      	bcc.n	80081a4 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80081d0:	2301      	movs	r3, #1
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80081f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081f2:	fb01 f202 	mul.w	r2, r1, r2
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80081fa:	4b1a      	ldr	r3, [pc, #104]	; (8008264 <ILI9341_Draw_colour_Burst+0x148>)
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	4a19      	ldr	r2, [pc, #100]	; (8008264 <ILI9341_Draw_colour_Burst+0x148>)
 8008200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008204:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008206:	4b17      	ldr	r3, [pc, #92]	; (8008264 <ILI9341_Draw_colour_Burst+0x148>)
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	4a16      	ldr	r2, [pc, #88]	; (8008264 <ILI9341_Draw_colour_Burst+0x148>)
 800820c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008210:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	2b00      	cmp	r3, #0
 8008216:	d010      	beq.n	800823a <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008218:	2300      	movs	r3, #0
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
 800821c:	e009      	b.n	8008232 <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 800821e:	69b9      	ldr	r1, [r7, #24]
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	b29a      	uxth	r2, r3
 8008224:	2302      	movs	r3, #2
 8008226:	4810      	ldr	r0, [pc, #64]	; (8008268 <ILI9341_Draw_colour_Burst+0x14c>)
 8008228:	f7fd fdba 	bl	8005da0 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	3301      	adds	r3, #1
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
 8008232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008236:	429a      	cmp	r2, r3
 8008238:	d3f1      	bcc.n	800821e <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 800823a:	69b9      	ldr	r1, [r7, #24]
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	b29a      	uxth	r2, r3
 8008240:	2302      	movs	r3, #2
 8008242:	4809      	ldr	r0, [pc, #36]	; (8008268 <ILI9341_Draw_colour_Burst+0x14c>)
 8008244:	f7fd fdac 	bl	8005da0 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <ILI9341_Draw_colour_Burst+0x148>)
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	4a05      	ldr	r2, [pc, #20]	; (8008264 <ILI9341_Draw_colour_Burst+0x148>)
 800824e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008252:	6153      	str	r3, [r2, #20]
 8008254:	46ad      	mov	sp, r5


}
 8008256:	bf00      	nop
 8008258:	3738      	adds	r7, #56	; 0x38
 800825a:	46bd      	mov	sp, r7
 800825c:	bdb0      	pop	{r4, r5, r7, pc}
 800825e:	bf00      	nop
 8008260:	200003dc 	.word	0x200003dc
 8008264:	48000400 	.word	0x48000400
 8008268:	200006f4 	.word	0x200006f4

0800826c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af02      	add	r7, sp, #8
 8008272:	4603      	mov	r3, r0
 8008274:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008276:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <ILI9341_Fill_Screen+0x4c>)
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29a      	uxth	r2, r3
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <ILI9341_Fill_Screen+0x50>)
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	2100      	movs	r1, #0
 8008284:	2000      	movs	r0, #0
 8008286:	f7ff fd73 	bl	8007d70 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <ILI9341_Fill_Screen+0x4c>)
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	461a      	mov	r2, r3
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <ILI9341_Fill_Screen+0x50>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	fb03 f302 	mul.w	r3, r3, r2
 800829c:	4619      	mov	r1, r3
 800829e:	88fa      	ldrh	r2, [r7, #6]
 80082a0:	2304      	movs	r3, #4
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	460b      	mov	r3, r1
 80082a6:	2100      	movs	r1, #0
 80082a8:	2000      	movs	r0, #0
 80082aa:	f7ff ff37 	bl	800811c <ILI9341_Draw_colour_Burst>
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200003da 	.word	0x200003da
 80082bc:	200003d8 	.word	0x200003d8

080082c0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	80fb      	strh	r3, [r7, #6]
 80082ca:	460b      	mov	r3, r1
 80082cc:	80bb      	strh	r3, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80082d2:	4b64      	ldr	r3, [pc, #400]	; (8008464 <ILI9341_Draw_Pixel+0x1a4>)
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	88fa      	ldrh	r2, [r7, #6]
 80082da:	429a      	cmp	r2, r3
 80082dc:	f080 80be 	bcs.w	800845c <ILI9341_Draw_Pixel+0x19c>
 80082e0:	4b61      	ldr	r3, [pc, #388]	; (8008468 <ILI9341_Draw_Pixel+0x1a8>)
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	88ba      	ldrh	r2, [r7, #4]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	f080 80b7 	bcs.w	800845c <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80082ee:	4b5f      	ldr	r3, [pc, #380]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	4a5e      	ldr	r2, [pc, #376]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80082f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80082fa:	4b5c      	ldr	r3, [pc, #368]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4a5b      	ldr	r2, [pc, #364]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008304:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8008306:	202a      	movs	r0, #42	; 0x2a
 8008308:	f7ff fcda 	bl	8007cc0 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800830c:	4b57      	ldr	r3, [pc, #348]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	4a56      	ldr	r2, [pc, #344]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008316:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008318:	4b54      	ldr	r3, [pc, #336]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	4a53      	ldr	r2, [pc, #332]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800831e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008322:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008324:	4b51      	ldr	r3, [pc, #324]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	4a50      	ldr	r2, [pc, #320]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800832a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800832e:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	b29b      	uxth	r3, r3
 8008336:	b2db      	uxtb	r3, r3
 8008338:	753b      	strb	r3, [r7, #20]
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	757b      	strb	r3, [r7, #21]
 8008340:	88fb      	ldrh	r3, [r7, #6]
 8008342:	3301      	adds	r3, #1
 8008344:	121b      	asrs	r3, r3, #8
 8008346:	b2db      	uxtb	r3, r3
 8008348:	75bb      	strb	r3, [r7, #22]
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	b2db      	uxtb	r3, r3
 800834e:	3301      	adds	r3, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8008354:	f107 0114 	add.w	r1, r7, #20
 8008358:	2301      	movs	r3, #1
 800835a:	2204      	movs	r2, #4
 800835c:	4844      	ldr	r0, [pc, #272]	; (8008470 <ILI9341_Draw_Pixel+0x1b0>)
 800835e:	f7fd fd1f 	bl	8005da0 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008362:	4b42      	ldr	r3, [pc, #264]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	4a41      	ldr	r2, [pc, #260]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800836e:	4b3f      	ldr	r3, [pc, #252]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	4a3e      	ldr	r2, [pc, #248]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008378:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800837a:	4b3c      	ldr	r3, [pc, #240]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	4a3b      	ldr	r2, [pc, #236]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008384:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8008386:	202b      	movs	r0, #43	; 0x2b
 8008388:	f7ff fc9a 	bl	8007cc0 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800838c:	4b37      	ldr	r3, [pc, #220]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	4a36      	ldr	r2, [pc, #216]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008396:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008398:	4b34      	ldr	r3, [pc, #208]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	4a33      	ldr	r2, [pc, #204]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800839e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a2:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80083a4:	4b31      	ldr	r3, [pc, #196]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	4a30      	ldr	r2, [pc, #192]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80083aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ae:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80083b0:	88bb      	ldrh	r3, [r7, #4]
 80083b2:	0a1b      	lsrs	r3, r3, #8
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	743b      	strb	r3, [r7, #16]
 80083ba:	88bb      	ldrh	r3, [r7, #4]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	747b      	strb	r3, [r7, #17]
 80083c0:	88bb      	ldrh	r3, [r7, #4]
 80083c2:	3301      	adds	r3, #1
 80083c4:	121b      	asrs	r3, r3, #8
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	74bb      	strb	r3, [r7, #18]
 80083ca:	88bb      	ldrh	r3, [r7, #4]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	3301      	adds	r3, #1
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80083d4:	f107 0110 	add.w	r1, r7, #16
 80083d8:	2301      	movs	r3, #1
 80083da:	2204      	movs	r2, #4
 80083dc:	4824      	ldr	r0, [pc, #144]	; (8008470 <ILI9341_Draw_Pixel+0x1b0>)
 80083de:	f7fd fcdf 	bl	8005da0 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80083e2:	4b22      	ldr	r3, [pc, #136]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	4a21      	ldr	r2, [pc, #132]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80083e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ec:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	4a1e      	ldr	r2, [pc, #120]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80083f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80083fa:	4b1c      	ldr	r3, [pc, #112]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	4a1b      	ldr	r2, [pc, #108]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008404:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8008406:	202c      	movs	r0, #44	; 0x2c
 8008408:	f7ff fc5a 	bl	8007cc0 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800840c:	4b17      	ldr	r3, [pc, #92]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	4a16      	ldr	r2, [pc, #88]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008416:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008418:	4b14      	ldr	r3, [pc, #80]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	4a13      	ldr	r2, [pc, #76]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800841e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008422:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	4a10      	ldr	r2, [pc, #64]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 800842a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842e:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8008430:	887b      	ldrh	r3, [r7, #2]
 8008432:	0a1b      	lsrs	r3, r3, #8
 8008434:	b29b      	uxth	r3, r3
 8008436:	b2db      	uxtb	r3, r3
 8008438:	733b      	strb	r3, [r7, #12]
 800843a:	887b      	ldrh	r3, [r7, #2]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8008440:	f107 010c 	add.w	r1, r7, #12
 8008444:	2301      	movs	r3, #1
 8008446:	2202      	movs	r2, #2
 8008448:	4809      	ldr	r0, [pc, #36]	; (8008470 <ILI9341_Draw_Pixel+0x1b0>)
 800844a:	f7fd fca9 	bl	8005da0 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800844e:	4b07      	ldr	r3, [pc, #28]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	4a06      	ldr	r2, [pc, #24]	; (800846c <ILI9341_Draw_Pixel+0x1ac>)
 8008454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008458:	6153      	str	r3, [r2, #20]
 800845a:	e000      	b.n	800845e <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800845c:	bf00      	nop

	
}
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	200003da 	.word	0x200003da
 8008468:	200003d8 	.word	0x200003d8
 800846c:	48000400 	.word	0x48000400
 8008470:	200006f4 	.word	0x200006f4

08008474 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8008474:	b590      	push	{r4, r7, lr}
 8008476:	b087      	sub	sp, #28
 8008478:	af02      	add	r7, sp, #8
 800847a:	4604      	mov	r4, r0
 800847c:	4608      	mov	r0, r1
 800847e:	4611      	mov	r1, r2
 8008480:	461a      	mov	r2, r3
 8008482:	4623      	mov	r3, r4
 8008484:	80fb      	strh	r3, [r7, #6]
 8008486:	4603      	mov	r3, r0
 8008488:	80bb      	strh	r3, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	807b      	strh	r3, [r7, #2]
 800848e:	4613      	mov	r3, r2
 8008490:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008492:	4b39      	ldr	r3, [pc, #228]	; (8008578 <ILI9341_Draw_Rectangle+0x104>)
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	88fa      	ldrh	r2, [r7, #6]
 800849a:	429a      	cmp	r2, r3
 800849c:	d268      	bcs.n	8008570 <ILI9341_Draw_Rectangle+0xfc>
 800849e:	4b37      	ldr	r3, [pc, #220]	; (800857c <ILI9341_Draw_Rectangle+0x108>)
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	88ba      	ldrh	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d262      	bcs.n	8008570 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	887b      	ldrh	r3, [r7, #2]
 80084ae:	4413      	add	r3, r2
 80084b0:	3b01      	subs	r3, #1
 80084b2:	4a31      	ldr	r2, [pc, #196]	; (8008578 <ILI9341_Draw_Rectangle+0x104>)
 80084b4:	8812      	ldrh	r2, [r2, #0]
 80084b6:	b292      	uxth	r2, r2
 80084b8:	4293      	cmp	r3, r2
 80084ba:	db05      	blt.n	80084c8 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 80084bc:	4b2e      	ldr	r3, [pc, #184]	; (8008578 <ILI9341_Draw_Rectangle+0x104>)
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	88fb      	ldrh	r3, [r7, #6]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80084c8:	88ba      	ldrh	r2, [r7, #4]
 80084ca:	883b      	ldrh	r3, [r7, #0]
 80084cc:	4413      	add	r3, r2
 80084ce:	3b01      	subs	r3, #1
 80084d0:	4a2a      	ldr	r2, [pc, #168]	; (800857c <ILI9341_Draw_Rectangle+0x108>)
 80084d2:	8812      	ldrh	r2, [r2, #0]
 80084d4:	b292      	uxth	r2, r2
 80084d6:	4293      	cmp	r3, r2
 80084d8:	db05      	blt.n	80084e6 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 80084da:	4b28      	ldr	r3, [pc, #160]	; (800857c <ILI9341_Draw_Rectangle+0x108>)
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29a      	uxth	r2, r3
 80084e0:	88bb      	ldrh	r3, [r7, #4]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 80084e6:	88fa      	ldrh	r2, [r7, #6]
 80084e8:	887b      	ldrh	r3, [r7, #2]
 80084ea:	4413      	add	r3, r2
 80084ec:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80084f2:	88ba      	ldrh	r2, [r7, #4]
 80084f4:	883b      	ldrh	r3, [r7, #0]
 80084f6:	4413      	add	r3, r2
 80084f8:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	88b9      	ldrh	r1, [r7, #4]
 8008500:	88f8      	ldrh	r0, [r7, #6]
 8008502:	4622      	mov	r2, r4
 8008504:	f7ff fc34 	bl	8007d70 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8008508:	883a      	ldrh	r2, [r7, #0]
 800850a:	887b      	ldrh	r3, [r7, #2]
 800850c:	fb12 f303 	smulbb	r3, r2, r3
 8008510:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8008516:	89fb      	ldrh	r3, [r7, #14]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d009      	beq.n	8008534 <ILI9341_Draw_Rectangle+0xc0>
 8008520:	89fb      	ldrh	r3, [r7, #14]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d906      	bls.n	8008534 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8008526:	2301      	movs	r3, #1
 8008528:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800852a:	89fb      	ldrh	r3, [r7, #14]
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	b29b      	uxth	r3, r3
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 8008534:	89fc      	ldrh	r4, [r7, #14]
 8008536:	8c3a      	ldrh	r2, [r7, #32]
 8008538:	88b9      	ldrh	r1, [r7, #4]
 800853a:	88f8      	ldrh	r0, [r7, #6]
 800853c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	4623      	mov	r3, r4
 8008544:	f7ff fdea 	bl	800811c <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 8008548:	7b7b      	ldrb	r3, [r7, #13]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d011      	beq.n	8008572 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	887b      	ldrh	r3, [r7, #2]
 8008552:	4413      	add	r3, r2
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800855a:	88ba      	ldrh	r2, [r7, #4]
 800855c:	883b      	ldrh	r3, [r7, #0]
 800855e:	4413      	add	r3, r2
 8008560:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8008562:	3b01      	subs	r3, #1
 8008564:	b29b      	uxth	r3, r3
 8008566:	8c3a      	ldrh	r2, [r7, #32]
 8008568:	4619      	mov	r1, r3
 800856a:	f7ff fea9 	bl	80082c0 <ILI9341_Draw_Pixel>
 800856e:	e000      	b.n	8008572 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008570:	bf00      	nop
							colour);
	}
}
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	bd90      	pop	{r4, r7, pc}
 8008578:	200003da 	.word	0x200003da
 800857c:	200003d8 	.word	0x200003d8

08008580 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8008580:	b590      	push	{r4, r7, lr}
 8008582:	b085      	sub	sp, #20
 8008584:	af02      	add	r7, sp, #8
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	4611      	mov	r1, r2
 800858c:	461a      	mov	r2, r3
 800858e:	4623      	mov	r3, r4
 8008590:	80fb      	strh	r3, [r7, #6]
 8008592:	4603      	mov	r3, r0
 8008594:	80bb      	strh	r3, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	807b      	strh	r3, [r7, #2]
 800859a:	4613      	mov	r3, r2
 800859c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800859e:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <ILI9341_Draw_Horizontal_Line+0x88>)
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	88fa      	ldrh	r2, [r7, #6]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d229      	bcs.n	80085fe <ILI9341_Draw_Horizontal_Line+0x7e>
 80085aa:	4b18      	ldr	r3, [pc, #96]	; (800860c <ILI9341_Draw_Horizontal_Line+0x8c>)
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	88ba      	ldrh	r2, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d223      	bcs.n	80085fe <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 80085b6:	88fa      	ldrh	r2, [r7, #6]
 80085b8:	887b      	ldrh	r3, [r7, #2]
 80085ba:	4413      	add	r3, r2
 80085bc:	3b01      	subs	r3, #1
 80085be:	4a12      	ldr	r2, [pc, #72]	; (8008608 <ILI9341_Draw_Horizontal_Line+0x88>)
 80085c0:	8812      	ldrh	r2, [r2, #0]
 80085c2:	b292      	uxth	r2, r2
 80085c4:	4293      	cmp	r3, r2
 80085c6:	db05      	blt.n	80085d4 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <ILI9341_Draw_Horizontal_Line+0x88>)
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	887b      	ldrh	r3, [r7, #2]
 80085d8:	4413      	add	r3, r2
 80085da:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29a      	uxth	r2, r3
 80085e0:	88bb      	ldrh	r3, [r7, #4]
 80085e2:	88b9      	ldrh	r1, [r7, #4]
 80085e4:	88f8      	ldrh	r0, [r7, #6]
 80085e6:	f7ff fbc3 	bl	8007d70 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 80085ea:	887c      	ldrh	r4, [r7, #2]
 80085ec:	883a      	ldrh	r2, [r7, #0]
 80085ee:	88b9      	ldrh	r1, [r7, #4]
 80085f0:	88f8      	ldrh	r0, [r7, #6]
 80085f2:	2303      	movs	r3, #3
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	4623      	mov	r3, r4
 80085f8:	f7ff fd90 	bl	800811c <ILI9341_Draw_colour_Burst>
 80085fc:	e000      	b.n	8008600 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80085fe:	bf00      	nop
}
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	bd90      	pop	{r4, r7, pc}
 8008606:	bf00      	nop
 8008608:	200003da 	.word	0x200003da
 800860c:	200003d8 	.word	0x200003d8

08008610 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8008610:	b590      	push	{r4, r7, lr}
 8008612:	b085      	sub	sp, #20
 8008614:	af02      	add	r7, sp, #8
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4623      	mov	r3, r4
 8008620:	80fb      	strh	r3, [r7, #6]
 8008622:	4603      	mov	r3, r0
 8008624:	80bb      	strh	r3, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	807b      	strh	r3, [r7, #2]
 800862a:	4613      	mov	r3, r2
 800862c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800862e:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <ILI9341_Draw_Vertical_Line+0x88>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	429a      	cmp	r2, r3
 8008638:	d229      	bcs.n	800868e <ILI9341_Draw_Vertical_Line+0x7e>
 800863a:	4b18      	ldr	r3, [pc, #96]	; (800869c <ILI9341_Draw_Vertical_Line+0x8c>)
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	88ba      	ldrh	r2, [r7, #4]
 8008642:	429a      	cmp	r2, r3
 8008644:	d223      	bcs.n	800868e <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8008646:	88ba      	ldrh	r2, [r7, #4]
 8008648:	887b      	ldrh	r3, [r7, #2]
 800864a:	4413      	add	r3, r2
 800864c:	3b01      	subs	r3, #1
 800864e:	4a13      	ldr	r2, [pc, #76]	; (800869c <ILI9341_Draw_Vertical_Line+0x8c>)
 8008650:	8812      	ldrh	r2, [r2, #0]
 8008652:	b292      	uxth	r2, r2
 8008654:	4293      	cmp	r3, r2
 8008656:	db05      	blt.n	8008664 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 8008658:	4b10      	ldr	r3, [pc, #64]	; (800869c <ILI9341_Draw_Vertical_Line+0x8c>)
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29a      	uxth	r2, r3
 800865e:	88bb      	ldrh	r3, [r7, #4]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 8008664:	88ba      	ldrh	r2, [r7, #4]
 8008666:	887b      	ldrh	r3, [r7, #2]
 8008668:	4413      	add	r3, r2
 800866a:	b29b      	uxth	r3, r3
 800866c:	3b01      	subs	r3, #1
 800866e:	b29b      	uxth	r3, r3
 8008670:	88fa      	ldrh	r2, [r7, #6]
 8008672:	88b9      	ldrh	r1, [r7, #4]
 8008674:	88f8      	ldrh	r0, [r7, #6]
 8008676:	f7ff fb7b 	bl	8007d70 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 800867a:	887c      	ldrh	r4, [r7, #2]
 800867c:	883a      	ldrh	r2, [r7, #0]
 800867e:	88b9      	ldrh	r1, [r7, #4]
 8008680:	88f8      	ldrh	r0, [r7, #6]
 8008682:	2303      	movs	r3, #3
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	4623      	mov	r3, r4
 8008688:	f7ff fd48 	bl	800811c <ILI9341_Draw_colour_Burst>
 800868c:	e000      	b.n	8008690 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800868e:	bf00      	nop
}
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bd90      	pop	{r4, r7, pc}
 8008696:	bf00      	nop
 8008698:	200003da 	.word	0x200003da
 800869c:	200003d8 	.word	0x200003d8

080086a0 <_GetEmptyRegEntry>:
 * 	@Brief search registry for empty registry entry. Internal use only.
 *
 * 	@Returns index of next empty entry, -1 if no empty registry entries are available
 */
int _GetEmptyRegEntry()
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_REG_INDEX; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]
 80086aa:	e031      	b.n	8008710 <_GetEmptyRegEntry+0x70>
	{
		if(	(strcmp(STRINGREG[i].text, "") == 0)	&&
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2226      	movs	r2, #38	; 0x26
 80086b0:	fb02 f303 	mul.w	r3, r2, r3
 80086b4:	4a1c      	ldr	r2, [pc, #112]	; (8008728 <_GetEmptyRegEntry+0x88>)
 80086b6:	4413      	add	r3, r2
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d125      	bne.n	800870a <_GetEmptyRegEntry+0x6a>
			(STRINGREG[i].x 	== -1) 	&&
 80086be:	4a1a      	ldr	r2, [pc, #104]	; (8008728 <_GetEmptyRegEntry+0x88>)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2126      	movs	r1, #38	; 0x26
 80086c4:	fb01 f303 	mul.w	r3, r1, r3
 80086c8:	4413      	add	r3, r2
 80086ca:	3320      	adds	r3, #32
 80086cc:	f9b3 3000 	ldrsh.w	r3, [r3]
		if(	(strcmp(STRINGREG[i].text, "") == 0)	&&
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086d4:	d119      	bne.n	800870a <_GetEmptyRegEntry+0x6a>
			(STRINGREG[i].y 	== -1) 	&&
 80086d6:	4a14      	ldr	r2, [pc, #80]	; (8008728 <_GetEmptyRegEntry+0x88>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2126      	movs	r1, #38	; 0x26
 80086dc:	fb01 f303 	mul.w	r3, r1, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	3322      	adds	r3, #34	; 0x22
 80086e4:	f9b3 3000 	ldrsh.w	r3, [r3]
			(STRINGREG[i].x 	== -1) 	&&
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ec:	d10d      	bne.n	800870a <_GetEmptyRegEntry+0x6a>
			(STRINGREG[i].size == -1)
 80086ee:	4a0e      	ldr	r2, [pc, #56]	; (8008728 <_GetEmptyRegEntry+0x88>)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2126      	movs	r1, #38	; 0x26
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	4413      	add	r3, r2
 80086fa:	3324      	adds	r3, #36	; 0x24
 80086fc:	f993 3000 	ldrsb.w	r3, [r3]
			(STRINGREG[i].y 	== -1) 	&&
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008704:	d101      	bne.n	800870a <_GetEmptyRegEntry+0x6a>
		)
		{
			return i;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	e007      	b.n	800871a <_GetEmptyRegEntry+0x7a>
	for(int i = 0; i < MAX_REG_INDEX; i++)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3301      	adds	r3, #1
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b03      	cmp	r3, #3
 8008714:	ddca      	ble.n	80086ac <_GetEmptyRegEntry+0xc>
		}
	}
	return -1;	// no space left!
 8008716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	200003e0 	.word	0x200003e0

0800872c <TM_FindStringRegister>:
 * 	@Brief searches registry for matching text value
 *
 * 	@Returns index of found entry, -1 if no matching registry entries are found
 */
int TM_FindStringRegister(char* pSearch)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_REG_INDEX; i++)
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e011      	b.n	800875e <TM_FindStringRegister+0x32>
	{
		if(strcmp(pSearch, STRINGREG[i].text) == 0)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2226      	movs	r2, #38	; 0x26
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	4a0b      	ldr	r2, [pc, #44]	; (8008770 <TM_FindStringRegister+0x44>)
 8008744:	4413      	add	r3, r2
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7f7 fd69 	bl	8000220 <strcmp>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <TM_FindStringRegister+0x2c>
		{
			return i;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	e007      	b.n	8008768 <TM_FindStringRegister+0x3c>
	for(int i=0; i<MAX_REG_INDEX; i++)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b03      	cmp	r3, #3
 8008762:	ddea      	ble.n	800873a <TM_FindStringRegister+0xe>
		}

	}
	return -1;
 8008764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	200003e0 	.word	0x200003e0

08008774 <TM_RegisterString>:
 * 	@Brief allocates new data in registry
 *
 * 	@Returns index of new entry, -1 if no empty registry entries are available
 */
int TM_RegisterString(char* pText, int16_t pX, int16_t pY, int16_t pSize)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	4608      	mov	r0, r1
 800877e:	4611      	mov	r1, r2
 8008780:	461a      	mov	r2, r3
 8008782:	4603      	mov	r3, r0
 8008784:	817b      	strh	r3, [r7, #10]
 8008786:	460b      	mov	r3, r1
 8008788:	813b      	strh	r3, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	80fb      	strh	r3, [r7, #6]
	int res = _GetEmptyRegEntry();
 800878e:	f7ff ff87 	bl	80086a0 <_GetEmptyRegEntry>
 8008792:	6178      	str	r0, [r7, #20]
	if(res < 0)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	da02      	bge.n	80087a0 <TM_RegisterString+0x2c>
	{
		return -1;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800879e:	e028      	b.n	80087f2 <TM_RegisterString+0x7e>
	}
	else
	{
		snprintf(STRINGREG[res].text, sizeof(STRINGREG[res].text), "%s", pText);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2226      	movs	r2, #38	; 0x26
 80087a4:	fb02 f303 	mul.w	r3, r2, r3
 80087a8:	4a14      	ldr	r2, [pc, #80]	; (80087fc <TM_RegisterString+0x88>)
 80087aa:	1898      	adds	r0, r3, r2
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4a14      	ldr	r2, [pc, #80]	; (8008800 <TM_RegisterString+0x8c>)
 80087b0:	2120      	movs	r1, #32
 80087b2:	f000 f8d5 	bl	8008960 <sniprintf>
		STRINGREG[res].x = pX;
 80087b6:	4a11      	ldr	r2, [pc, #68]	; (80087fc <TM_RegisterString+0x88>)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2126      	movs	r1, #38	; 0x26
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	4413      	add	r3, r2
 80087c2:	3320      	adds	r3, #32
 80087c4:	897a      	ldrh	r2, [r7, #10]
 80087c6:	801a      	strh	r2, [r3, #0]
		STRINGREG[res].y = pY;
 80087c8:	4a0c      	ldr	r2, [pc, #48]	; (80087fc <TM_RegisterString+0x88>)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2126      	movs	r1, #38	; 0x26
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	4413      	add	r3, r2
 80087d4:	3322      	adds	r3, #34	; 0x22
 80087d6:	893a      	ldrh	r2, [r7, #8]
 80087d8:	801a      	strh	r2, [r3, #0]
		STRINGREG[res].size = pSize;
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	b258      	sxtb	r0, r3
 80087de:	4a07      	ldr	r2, [pc, #28]	; (80087fc <TM_RegisterString+0x88>)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2126      	movs	r1, #38	; 0x26
 80087e4:	fb01 f303 	mul.w	r3, r1, r3
 80087e8:	4413      	add	r3, r2
 80087ea:	3324      	adds	r3, #36	; 0x24
 80087ec:	4602      	mov	r2, r0
 80087ee:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80087f0:	697b      	ldr	r3, [r7, #20]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	200003e0 	.word	0x200003e0
 8008800:	08009bb8 	.word	0x08009bb8

08008804 <__errno>:
 8008804:	4b01      	ldr	r3, [pc, #4]	; (800880c <__errno+0x8>)
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	20000478 	.word	0x20000478

08008810 <__libc_init_array>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	4e0d      	ldr	r6, [pc, #52]	; (8008848 <__libc_init_array+0x38>)
 8008814:	4c0d      	ldr	r4, [pc, #52]	; (800884c <__libc_init_array+0x3c>)
 8008816:	1ba4      	subs	r4, r4, r6
 8008818:	10a4      	asrs	r4, r4, #2
 800881a:	2500      	movs	r5, #0
 800881c:	42a5      	cmp	r5, r4
 800881e:	d109      	bne.n	8008834 <__libc_init_array+0x24>
 8008820:	4e0b      	ldr	r6, [pc, #44]	; (8008850 <__libc_init_array+0x40>)
 8008822:	4c0c      	ldr	r4, [pc, #48]	; (8008854 <__libc_init_array+0x44>)
 8008824:	f001 f940 	bl	8009aa8 <_init>
 8008828:	1ba4      	subs	r4, r4, r6
 800882a:	10a4      	asrs	r4, r4, #2
 800882c:	2500      	movs	r5, #0
 800882e:	42a5      	cmp	r5, r4
 8008830:	d105      	bne.n	800883e <__libc_init_array+0x2e>
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008838:	4798      	blx	r3
 800883a:	3501      	adds	r5, #1
 800883c:	e7ee      	b.n	800881c <__libc_init_array+0xc>
 800883e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008842:	4798      	blx	r3
 8008844:	3501      	adds	r5, #1
 8008846:	e7f2      	b.n	800882e <__libc_init_array+0x1e>
 8008848:	08009ea4 	.word	0x08009ea4
 800884c:	08009ea4 	.word	0x08009ea4
 8008850:	08009ea4 	.word	0x08009ea4
 8008854:	08009ea8 	.word	0x08009ea8

08008858 <memset>:
 8008858:	4402      	add	r2, r0
 800885a:	4603      	mov	r3, r0
 800885c:	4293      	cmp	r3, r2
 800885e:	d100      	bne.n	8008862 <memset+0xa>
 8008860:	4770      	bx	lr
 8008862:	f803 1b01 	strb.w	r1, [r3], #1
 8008866:	e7f9      	b.n	800885c <memset+0x4>

08008868 <iprintf>:
 8008868:	b40f      	push	{r0, r1, r2, r3}
 800886a:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <iprintf+0x2c>)
 800886c:	b513      	push	{r0, r1, r4, lr}
 800886e:	681c      	ldr	r4, [r3, #0]
 8008870:	b124      	cbz	r4, 800887c <iprintf+0x14>
 8008872:	69a3      	ldr	r3, [r4, #24]
 8008874:	b913      	cbnz	r3, 800887c <iprintf+0x14>
 8008876:	4620      	mov	r0, r4
 8008878:	f000 fa56 	bl	8008d28 <__sinit>
 800887c:	ab05      	add	r3, sp, #20
 800887e:	9a04      	ldr	r2, [sp, #16]
 8008880:	68a1      	ldr	r1, [r4, #8]
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fd61 	bl	800934c <_vfiprintf_r>
 800888a:	b002      	add	sp, #8
 800888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008890:	b004      	add	sp, #16
 8008892:	4770      	bx	lr
 8008894:	20000478 	.word	0x20000478

08008898 <_puts_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	460e      	mov	r6, r1
 800889c:	4605      	mov	r5, r0
 800889e:	b118      	cbz	r0, 80088a8 <_puts_r+0x10>
 80088a0:	6983      	ldr	r3, [r0, #24]
 80088a2:	b90b      	cbnz	r3, 80088a8 <_puts_r+0x10>
 80088a4:	f000 fa40 	bl	8008d28 <__sinit>
 80088a8:	69ab      	ldr	r3, [r5, #24]
 80088aa:	68ac      	ldr	r4, [r5, #8]
 80088ac:	b913      	cbnz	r3, 80088b4 <_puts_r+0x1c>
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 fa3a 	bl	8008d28 <__sinit>
 80088b4:	4b23      	ldr	r3, [pc, #140]	; (8008944 <_puts_r+0xac>)
 80088b6:	429c      	cmp	r4, r3
 80088b8:	d117      	bne.n	80088ea <_puts_r+0x52>
 80088ba:	686c      	ldr	r4, [r5, #4]
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	071b      	lsls	r3, r3, #28
 80088c0:	d51d      	bpl.n	80088fe <_puts_r+0x66>
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	b1db      	cbz	r3, 80088fe <_puts_r+0x66>
 80088c6:	3e01      	subs	r6, #1
 80088c8:	68a3      	ldr	r3, [r4, #8]
 80088ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088ce:	3b01      	subs	r3, #1
 80088d0:	60a3      	str	r3, [r4, #8]
 80088d2:	b9e9      	cbnz	r1, 8008910 <_puts_r+0x78>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da2e      	bge.n	8008936 <_puts_r+0x9e>
 80088d8:	4622      	mov	r2, r4
 80088da:	210a      	movs	r1, #10
 80088dc:	4628      	mov	r0, r5
 80088de:	f000 f873 	bl	80089c8 <__swbuf_r>
 80088e2:	3001      	adds	r0, #1
 80088e4:	d011      	beq.n	800890a <_puts_r+0x72>
 80088e6:	200a      	movs	r0, #10
 80088e8:	e011      	b.n	800890e <_puts_r+0x76>
 80088ea:	4b17      	ldr	r3, [pc, #92]	; (8008948 <_puts_r+0xb0>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	d101      	bne.n	80088f4 <_puts_r+0x5c>
 80088f0:	68ac      	ldr	r4, [r5, #8]
 80088f2:	e7e3      	b.n	80088bc <_puts_r+0x24>
 80088f4:	4b15      	ldr	r3, [pc, #84]	; (800894c <_puts_r+0xb4>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	bf08      	it	eq
 80088fa:	68ec      	ldreq	r4, [r5, #12]
 80088fc:	e7de      	b.n	80088bc <_puts_r+0x24>
 80088fe:	4621      	mov	r1, r4
 8008900:	4628      	mov	r0, r5
 8008902:	f000 f8b3 	bl	8008a6c <__swsetup_r>
 8008906:	2800      	cmp	r0, #0
 8008908:	d0dd      	beq.n	80088c6 <_puts_r+0x2e>
 800890a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	2b00      	cmp	r3, #0
 8008912:	da04      	bge.n	800891e <_puts_r+0x86>
 8008914:	69a2      	ldr	r2, [r4, #24]
 8008916:	429a      	cmp	r2, r3
 8008918:	dc06      	bgt.n	8008928 <_puts_r+0x90>
 800891a:	290a      	cmp	r1, #10
 800891c:	d004      	beq.n	8008928 <_puts_r+0x90>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	7019      	strb	r1, [r3, #0]
 8008926:	e7cf      	b.n	80088c8 <_puts_r+0x30>
 8008928:	4622      	mov	r2, r4
 800892a:	4628      	mov	r0, r5
 800892c:	f000 f84c 	bl	80089c8 <__swbuf_r>
 8008930:	3001      	adds	r0, #1
 8008932:	d1c9      	bne.n	80088c8 <_puts_r+0x30>
 8008934:	e7e9      	b.n	800890a <_puts_r+0x72>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	200a      	movs	r0, #10
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	6022      	str	r2, [r4, #0]
 800893e:	7018      	strb	r0, [r3, #0]
 8008940:	e7e5      	b.n	800890e <_puts_r+0x76>
 8008942:	bf00      	nop
 8008944:	08009e30 	.word	0x08009e30
 8008948:	08009e50 	.word	0x08009e50
 800894c:	08009e10 	.word	0x08009e10

08008950 <puts>:
 8008950:	4b02      	ldr	r3, [pc, #8]	; (800895c <puts+0xc>)
 8008952:	4601      	mov	r1, r0
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	f7ff bf9f 	b.w	8008898 <_puts_r>
 800895a:	bf00      	nop
 800895c:	20000478 	.word	0x20000478

08008960 <sniprintf>:
 8008960:	b40c      	push	{r2, r3}
 8008962:	b530      	push	{r4, r5, lr}
 8008964:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <sniprintf+0x64>)
 8008966:	1e0c      	subs	r4, r1, #0
 8008968:	b09d      	sub	sp, #116	; 0x74
 800896a:	681d      	ldr	r5, [r3, #0]
 800896c:	da08      	bge.n	8008980 <sniprintf+0x20>
 800896e:	238b      	movs	r3, #139	; 0x8b
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008976:	b01d      	add	sp, #116	; 0x74
 8008978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800897c:	b002      	add	sp, #8
 800897e:	4770      	bx	lr
 8008980:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008984:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008988:	bf14      	ite	ne
 800898a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800898e:	4623      	moveq	r3, r4
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008998:	9002      	str	r0, [sp, #8]
 800899a:	9006      	str	r0, [sp, #24]
 800899c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80089a2:	ab21      	add	r3, sp, #132	; 0x84
 80089a4:	a902      	add	r1, sp, #8
 80089a6:	4628      	mov	r0, r5
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	f000 fbad 	bl	8009108 <_svfiprintf_r>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	bfbc      	itt	lt
 80089b2:	238b      	movlt	r3, #139	; 0x8b
 80089b4:	602b      	strlt	r3, [r5, #0]
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	d0dd      	beq.n	8008976 <sniprintf+0x16>
 80089ba:	9b02      	ldr	r3, [sp, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	e7d9      	b.n	8008976 <sniprintf+0x16>
 80089c2:	bf00      	nop
 80089c4:	20000478 	.word	0x20000478

080089c8 <__swbuf_r>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	460e      	mov	r6, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	4605      	mov	r5, r0
 80089d0:	b118      	cbz	r0, 80089da <__swbuf_r+0x12>
 80089d2:	6983      	ldr	r3, [r0, #24]
 80089d4:	b90b      	cbnz	r3, 80089da <__swbuf_r+0x12>
 80089d6:	f000 f9a7 	bl	8008d28 <__sinit>
 80089da:	4b21      	ldr	r3, [pc, #132]	; (8008a60 <__swbuf_r+0x98>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d12a      	bne.n	8008a36 <__swbuf_r+0x6e>
 80089e0:	686c      	ldr	r4, [r5, #4]
 80089e2:	69a3      	ldr	r3, [r4, #24]
 80089e4:	60a3      	str	r3, [r4, #8]
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	071a      	lsls	r2, r3, #28
 80089ea:	d52e      	bpl.n	8008a4a <__swbuf_r+0x82>
 80089ec:	6923      	ldr	r3, [r4, #16]
 80089ee:	b363      	cbz	r3, 8008a4a <__swbuf_r+0x82>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	6820      	ldr	r0, [r4, #0]
 80089f4:	1ac0      	subs	r0, r0, r3
 80089f6:	6963      	ldr	r3, [r4, #20]
 80089f8:	b2f6      	uxtb	r6, r6
 80089fa:	4283      	cmp	r3, r0
 80089fc:	4637      	mov	r7, r6
 80089fe:	dc04      	bgt.n	8008a0a <__swbuf_r+0x42>
 8008a00:	4621      	mov	r1, r4
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 f926 	bl	8008c54 <_fflush_r>
 8008a08:	bb28      	cbnz	r0, 8008a56 <__swbuf_r+0x8e>
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	60a3      	str	r3, [r4, #8]
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	6022      	str	r2, [r4, #0]
 8008a16:	701e      	strb	r6, [r3, #0]
 8008a18:	6963      	ldr	r3, [r4, #20]
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	4283      	cmp	r3, r0
 8008a1e:	d004      	beq.n	8008a2a <__swbuf_r+0x62>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	07db      	lsls	r3, r3, #31
 8008a24:	d519      	bpl.n	8008a5a <__swbuf_r+0x92>
 8008a26:	2e0a      	cmp	r6, #10
 8008a28:	d117      	bne.n	8008a5a <__swbuf_r+0x92>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f911 	bl	8008c54 <_fflush_r>
 8008a32:	b190      	cbz	r0, 8008a5a <__swbuf_r+0x92>
 8008a34:	e00f      	b.n	8008a56 <__swbuf_r+0x8e>
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <__swbuf_r+0x9c>)
 8008a38:	429c      	cmp	r4, r3
 8008a3a:	d101      	bne.n	8008a40 <__swbuf_r+0x78>
 8008a3c:	68ac      	ldr	r4, [r5, #8]
 8008a3e:	e7d0      	b.n	80089e2 <__swbuf_r+0x1a>
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <__swbuf_r+0xa0>)
 8008a42:	429c      	cmp	r4, r3
 8008a44:	bf08      	it	eq
 8008a46:	68ec      	ldreq	r4, [r5, #12]
 8008a48:	e7cb      	b.n	80089e2 <__swbuf_r+0x1a>
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f000 f80d 	bl	8008a6c <__swsetup_r>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d0cc      	beq.n	80089f0 <__swbuf_r+0x28>
 8008a56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	08009e30 	.word	0x08009e30
 8008a64:	08009e50 	.word	0x08009e50
 8008a68:	08009e10 	.word	0x08009e10

08008a6c <__swsetup_r>:
 8008a6c:	4b32      	ldr	r3, [pc, #200]	; (8008b38 <__swsetup_r+0xcc>)
 8008a6e:	b570      	push	{r4, r5, r6, lr}
 8008a70:	681d      	ldr	r5, [r3, #0]
 8008a72:	4606      	mov	r6, r0
 8008a74:	460c      	mov	r4, r1
 8008a76:	b125      	cbz	r5, 8008a82 <__swsetup_r+0x16>
 8008a78:	69ab      	ldr	r3, [r5, #24]
 8008a7a:	b913      	cbnz	r3, 8008a82 <__swsetup_r+0x16>
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 f953 	bl	8008d28 <__sinit>
 8008a82:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <__swsetup_r+0xd0>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	d10f      	bne.n	8008aa8 <__swsetup_r+0x3c>
 8008a88:	686c      	ldr	r4, [r5, #4]
 8008a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	0715      	lsls	r5, r2, #28
 8008a92:	d42c      	bmi.n	8008aee <__swsetup_r+0x82>
 8008a94:	06d0      	lsls	r0, r2, #27
 8008a96:	d411      	bmi.n	8008abc <__swsetup_r+0x50>
 8008a98:	2209      	movs	r2, #9
 8008a9a:	6032      	str	r2, [r6, #0]
 8008a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa6:	e03e      	b.n	8008b26 <__swsetup_r+0xba>
 8008aa8:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <__swsetup_r+0xd4>)
 8008aaa:	429c      	cmp	r4, r3
 8008aac:	d101      	bne.n	8008ab2 <__swsetup_r+0x46>
 8008aae:	68ac      	ldr	r4, [r5, #8]
 8008ab0:	e7eb      	b.n	8008a8a <__swsetup_r+0x1e>
 8008ab2:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <__swsetup_r+0xd8>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	bf08      	it	eq
 8008ab8:	68ec      	ldreq	r4, [r5, #12]
 8008aba:	e7e6      	b.n	8008a8a <__swsetup_r+0x1e>
 8008abc:	0751      	lsls	r1, r2, #29
 8008abe:	d512      	bpl.n	8008ae6 <__swsetup_r+0x7a>
 8008ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac2:	b141      	cbz	r1, 8008ad6 <__swsetup_r+0x6a>
 8008ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	d002      	beq.n	8008ad2 <__swsetup_r+0x66>
 8008acc:	4630      	mov	r0, r6
 8008ace:	f000 fa19 	bl	8008f04 <_free_r>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	f043 0308 	orr.w	r3, r3, #8
 8008aec:	81a3      	strh	r3, [r4, #12]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	b94b      	cbnz	r3, 8008b06 <__swsetup_r+0x9a>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008afc:	d003      	beq.n	8008b06 <__swsetup_r+0x9a>
 8008afe:	4621      	mov	r1, r4
 8008b00:	4630      	mov	r0, r6
 8008b02:	f000 f9bf 	bl	8008e84 <__smakebuf_r>
 8008b06:	89a2      	ldrh	r2, [r4, #12]
 8008b08:	f012 0301 	ands.w	r3, r2, #1
 8008b0c:	d00c      	beq.n	8008b28 <__swsetup_r+0xbc>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	6963      	ldr	r3, [r4, #20]
 8008b14:	425b      	negs	r3, r3
 8008b16:	61a3      	str	r3, [r4, #24]
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	b953      	cbnz	r3, 8008b32 <__swsetup_r+0xc6>
 8008b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008b24:	d1ba      	bne.n	8008a9c <__swsetup_r+0x30>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	0792      	lsls	r2, r2, #30
 8008b2a:	bf58      	it	pl
 8008b2c:	6963      	ldrpl	r3, [r4, #20]
 8008b2e:	60a3      	str	r3, [r4, #8]
 8008b30:	e7f2      	b.n	8008b18 <__swsetup_r+0xac>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e7f7      	b.n	8008b26 <__swsetup_r+0xba>
 8008b36:	bf00      	nop
 8008b38:	20000478 	.word	0x20000478
 8008b3c:	08009e30 	.word	0x08009e30
 8008b40:	08009e50 	.word	0x08009e50
 8008b44:	08009e10 	.word	0x08009e10

08008b48 <__sflush_r>:
 8008b48:	898a      	ldrh	r2, [r1, #12]
 8008b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	4605      	mov	r5, r0
 8008b50:	0710      	lsls	r0, r2, #28
 8008b52:	460c      	mov	r4, r1
 8008b54:	d458      	bmi.n	8008c08 <__sflush_r+0xc0>
 8008b56:	684b      	ldr	r3, [r1, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dc05      	bgt.n	8008b68 <__sflush_r+0x20>
 8008b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dc02      	bgt.n	8008b68 <__sflush_r+0x20>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d0f9      	beq.n	8008b62 <__sflush_r+0x1a>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b74:	682f      	ldr	r7, [r5, #0]
 8008b76:	6a21      	ldr	r1, [r4, #32]
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	d032      	beq.n	8008be2 <__sflush_r+0x9a>
 8008b7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	075a      	lsls	r2, r3, #29
 8008b82:	d505      	bpl.n	8008b90 <__sflush_r+0x48>
 8008b84:	6863      	ldr	r3, [r4, #4]
 8008b86:	1ac0      	subs	r0, r0, r3
 8008b88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b8a:	b10b      	cbz	r3, 8008b90 <__sflush_r+0x48>
 8008b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b8e:	1ac0      	subs	r0, r0, r3
 8008b90:	2300      	movs	r3, #0
 8008b92:	4602      	mov	r2, r0
 8008b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b96:	6a21      	ldr	r1, [r4, #32]
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b0      	blx	r6
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	d106      	bne.n	8008bb0 <__sflush_r+0x68>
 8008ba2:	6829      	ldr	r1, [r5, #0]
 8008ba4:	291d      	cmp	r1, #29
 8008ba6:	d848      	bhi.n	8008c3a <__sflush_r+0xf2>
 8008ba8:	4a29      	ldr	r2, [pc, #164]	; (8008c50 <__sflush_r+0x108>)
 8008baa:	40ca      	lsrs	r2, r1
 8008bac:	07d6      	lsls	r6, r2, #31
 8008bae:	d544      	bpl.n	8008c3a <__sflush_r+0xf2>
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	6062      	str	r2, [r4, #4]
 8008bb4:	04d9      	lsls	r1, r3, #19
 8008bb6:	6922      	ldr	r2, [r4, #16]
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	d504      	bpl.n	8008bc6 <__sflush_r+0x7e>
 8008bbc:	1c42      	adds	r2, r0, #1
 8008bbe:	d101      	bne.n	8008bc4 <__sflush_r+0x7c>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b903      	cbnz	r3, 8008bc6 <__sflush_r+0x7e>
 8008bc4:	6560      	str	r0, [r4, #84]	; 0x54
 8008bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bc8:	602f      	str	r7, [r5, #0]
 8008bca:	2900      	cmp	r1, #0
 8008bcc:	d0c9      	beq.n	8008b62 <__sflush_r+0x1a>
 8008bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bd2:	4299      	cmp	r1, r3
 8008bd4:	d002      	beq.n	8008bdc <__sflush_r+0x94>
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f000 f994 	bl	8008f04 <_free_r>
 8008bdc:	2000      	movs	r0, #0
 8008bde:	6360      	str	r0, [r4, #52]	; 0x34
 8008be0:	e7c0      	b.n	8008b64 <__sflush_r+0x1c>
 8008be2:	2301      	movs	r3, #1
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b0      	blx	r6
 8008be8:	1c41      	adds	r1, r0, #1
 8008bea:	d1c8      	bne.n	8008b7e <__sflush_r+0x36>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0c5      	beq.n	8008b7e <__sflush_r+0x36>
 8008bf2:	2b1d      	cmp	r3, #29
 8008bf4:	d001      	beq.n	8008bfa <__sflush_r+0xb2>
 8008bf6:	2b16      	cmp	r3, #22
 8008bf8:	d101      	bne.n	8008bfe <__sflush_r+0xb6>
 8008bfa:	602f      	str	r7, [r5, #0]
 8008bfc:	e7b1      	b.n	8008b62 <__sflush_r+0x1a>
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	e7ad      	b.n	8008b64 <__sflush_r+0x1c>
 8008c08:	690f      	ldr	r7, [r1, #16]
 8008c0a:	2f00      	cmp	r7, #0
 8008c0c:	d0a9      	beq.n	8008b62 <__sflush_r+0x1a>
 8008c0e:	0793      	lsls	r3, r2, #30
 8008c10:	680e      	ldr	r6, [r1, #0]
 8008c12:	bf08      	it	eq
 8008c14:	694b      	ldreq	r3, [r1, #20]
 8008c16:	600f      	str	r7, [r1, #0]
 8008c18:	bf18      	it	ne
 8008c1a:	2300      	movne	r3, #0
 8008c1c:	eba6 0807 	sub.w	r8, r6, r7
 8008c20:	608b      	str	r3, [r1, #8]
 8008c22:	f1b8 0f00 	cmp.w	r8, #0
 8008c26:	dd9c      	ble.n	8008b62 <__sflush_r+0x1a>
 8008c28:	4643      	mov	r3, r8
 8008c2a:	463a      	mov	r2, r7
 8008c2c:	6a21      	ldr	r1, [r4, #32]
 8008c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b0      	blx	r6
 8008c34:	2800      	cmp	r0, #0
 8008c36:	dc06      	bgt.n	8008c46 <__sflush_r+0xfe>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c44:	e78e      	b.n	8008b64 <__sflush_r+0x1c>
 8008c46:	4407      	add	r7, r0
 8008c48:	eba8 0800 	sub.w	r8, r8, r0
 8008c4c:	e7e9      	b.n	8008c22 <__sflush_r+0xda>
 8008c4e:	bf00      	nop
 8008c50:	20400001 	.word	0x20400001

08008c54 <_fflush_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	690b      	ldr	r3, [r1, #16]
 8008c58:	4605      	mov	r5, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b1db      	cbz	r3, 8008c96 <_fflush_r+0x42>
 8008c5e:	b118      	cbz	r0, 8008c68 <_fflush_r+0x14>
 8008c60:	6983      	ldr	r3, [r0, #24]
 8008c62:	b90b      	cbnz	r3, 8008c68 <_fflush_r+0x14>
 8008c64:	f000 f860 	bl	8008d28 <__sinit>
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <_fflush_r+0x48>)
 8008c6a:	429c      	cmp	r4, r3
 8008c6c:	d109      	bne.n	8008c82 <_fflush_r+0x2e>
 8008c6e:	686c      	ldr	r4, [r5, #4]
 8008c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c74:	b17b      	cbz	r3, 8008c96 <_fflush_r+0x42>
 8008c76:	4621      	mov	r1, r4
 8008c78:	4628      	mov	r0, r5
 8008c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c7e:	f7ff bf63 	b.w	8008b48 <__sflush_r>
 8008c82:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <_fflush_r+0x4c>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	d101      	bne.n	8008c8c <_fflush_r+0x38>
 8008c88:	68ac      	ldr	r4, [r5, #8]
 8008c8a:	e7f1      	b.n	8008c70 <_fflush_r+0x1c>
 8008c8c:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <_fflush_r+0x50>)
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	bf08      	it	eq
 8008c92:	68ec      	ldreq	r4, [r5, #12]
 8008c94:	e7ec      	b.n	8008c70 <_fflush_r+0x1c>
 8008c96:	2000      	movs	r0, #0
 8008c98:	bd38      	pop	{r3, r4, r5, pc}
 8008c9a:	bf00      	nop
 8008c9c:	08009e30 	.word	0x08009e30
 8008ca0:	08009e50 	.word	0x08009e50
 8008ca4:	08009e10 	.word	0x08009e10

08008ca8 <std>:
 8008ca8:	2300      	movs	r3, #0
 8008caa:	b510      	push	{r4, lr}
 8008cac:	4604      	mov	r4, r0
 8008cae:	e9c0 3300 	strd	r3, r3, [r0]
 8008cb2:	6083      	str	r3, [r0, #8]
 8008cb4:	8181      	strh	r1, [r0, #12]
 8008cb6:	6643      	str	r3, [r0, #100]	; 0x64
 8008cb8:	81c2      	strh	r2, [r0, #14]
 8008cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cbe:	6183      	str	r3, [r0, #24]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	2208      	movs	r2, #8
 8008cc4:	305c      	adds	r0, #92	; 0x5c
 8008cc6:	f7ff fdc7 	bl	8008858 <memset>
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <std+0x38>)
 8008ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <std+0x3c>)
 8008cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <std+0x40>)
 8008cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <std+0x44>)
 8008cd8:	6224      	str	r4, [r4, #32]
 8008cda:	6323      	str	r3, [r4, #48]	; 0x30
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	bf00      	nop
 8008ce0:	080098a9 	.word	0x080098a9
 8008ce4:	080098cb 	.word	0x080098cb
 8008ce8:	08009903 	.word	0x08009903
 8008cec:	08009927 	.word	0x08009927

08008cf0 <_cleanup_r>:
 8008cf0:	4901      	ldr	r1, [pc, #4]	; (8008cf8 <_cleanup_r+0x8>)
 8008cf2:	f000 b885 	b.w	8008e00 <_fwalk_reent>
 8008cf6:	bf00      	nop
 8008cf8:	08008c55 	.word	0x08008c55

08008cfc <__sfmoreglue>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	1e4a      	subs	r2, r1, #1
 8008d00:	2568      	movs	r5, #104	; 0x68
 8008d02:	4355      	muls	r5, r2
 8008d04:	460e      	mov	r6, r1
 8008d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d0a:	f000 f949 	bl	8008fa0 <_malloc_r>
 8008d0e:	4604      	mov	r4, r0
 8008d10:	b140      	cbz	r0, 8008d24 <__sfmoreglue+0x28>
 8008d12:	2100      	movs	r1, #0
 8008d14:	e9c0 1600 	strd	r1, r6, [r0]
 8008d18:	300c      	adds	r0, #12
 8008d1a:	60a0      	str	r0, [r4, #8]
 8008d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d20:	f7ff fd9a 	bl	8008858 <memset>
 8008d24:	4620      	mov	r0, r4
 8008d26:	bd70      	pop	{r4, r5, r6, pc}

08008d28 <__sinit>:
 8008d28:	6983      	ldr	r3, [r0, #24]
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	bb33      	cbnz	r3, 8008d7e <__sinit+0x56>
 8008d30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008d34:	6503      	str	r3, [r0, #80]	; 0x50
 8008d36:	4b12      	ldr	r3, [pc, #72]	; (8008d80 <__sinit+0x58>)
 8008d38:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <__sinit+0x5c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6282      	str	r2, [r0, #40]	; 0x28
 8008d3e:	4298      	cmp	r0, r3
 8008d40:	bf04      	itt	eq
 8008d42:	2301      	moveq	r3, #1
 8008d44:	6183      	streq	r3, [r0, #24]
 8008d46:	f000 f81f 	bl	8008d88 <__sfp>
 8008d4a:	6060      	str	r0, [r4, #4]
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 f81b 	bl	8008d88 <__sfp>
 8008d52:	60a0      	str	r0, [r4, #8]
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 f817 	bl	8008d88 <__sfp>
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	60e0      	str	r0, [r4, #12]
 8008d5e:	2104      	movs	r1, #4
 8008d60:	6860      	ldr	r0, [r4, #4]
 8008d62:	f7ff ffa1 	bl	8008ca8 <std>
 8008d66:	2201      	movs	r2, #1
 8008d68:	2109      	movs	r1, #9
 8008d6a:	68a0      	ldr	r0, [r4, #8]
 8008d6c:	f7ff ff9c 	bl	8008ca8 <std>
 8008d70:	2202      	movs	r2, #2
 8008d72:	2112      	movs	r1, #18
 8008d74:	68e0      	ldr	r0, [r4, #12]
 8008d76:	f7ff ff97 	bl	8008ca8 <std>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	61a3      	str	r3, [r4, #24]
 8008d7e:	bd10      	pop	{r4, pc}
 8008d80:	08009e0c 	.word	0x08009e0c
 8008d84:	08008cf1 	.word	0x08008cf1

08008d88 <__sfp>:
 8008d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <__sfp+0x70>)
 8008d8c:	681e      	ldr	r6, [r3, #0]
 8008d8e:	69b3      	ldr	r3, [r6, #24]
 8008d90:	4607      	mov	r7, r0
 8008d92:	b913      	cbnz	r3, 8008d9a <__sfp+0x12>
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff ffc7 	bl	8008d28 <__sinit>
 8008d9a:	3648      	adds	r6, #72	; 0x48
 8008d9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	d503      	bpl.n	8008dac <__sfp+0x24>
 8008da4:	6833      	ldr	r3, [r6, #0]
 8008da6:	b133      	cbz	r3, 8008db6 <__sfp+0x2e>
 8008da8:	6836      	ldr	r6, [r6, #0]
 8008daa:	e7f7      	b.n	8008d9c <__sfp+0x14>
 8008dac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008db0:	b16d      	cbz	r5, 8008dce <__sfp+0x46>
 8008db2:	3468      	adds	r4, #104	; 0x68
 8008db4:	e7f4      	b.n	8008da0 <__sfp+0x18>
 8008db6:	2104      	movs	r1, #4
 8008db8:	4638      	mov	r0, r7
 8008dba:	f7ff ff9f 	bl	8008cfc <__sfmoreglue>
 8008dbe:	6030      	str	r0, [r6, #0]
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d1f1      	bne.n	8008da8 <__sfp+0x20>
 8008dc4:	230c      	movs	r3, #12
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	4604      	mov	r4, r0
 8008dca:	4620      	mov	r0, r4
 8008dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dce:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <__sfp+0x74>)
 8008dd0:	6665      	str	r5, [r4, #100]	; 0x64
 8008dd2:	e9c4 5500 	strd	r5, r5, [r4]
 8008dd6:	60a5      	str	r5, [r4, #8]
 8008dd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008ddc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008de0:	2208      	movs	r2, #8
 8008de2:	4629      	mov	r1, r5
 8008de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008de8:	f7ff fd36 	bl	8008858 <memset>
 8008dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008df4:	e7e9      	b.n	8008dca <__sfp+0x42>
 8008df6:	bf00      	nop
 8008df8:	08009e0c 	.word	0x08009e0c
 8008dfc:	ffff0001 	.word	0xffff0001

08008e00 <_fwalk_reent>:
 8008e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e04:	4680      	mov	r8, r0
 8008e06:	4689      	mov	r9, r1
 8008e08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e0c:	2600      	movs	r6, #0
 8008e0e:	b914      	cbnz	r4, 8008e16 <_fwalk_reent+0x16>
 8008e10:	4630      	mov	r0, r6
 8008e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e16:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008e1a:	3f01      	subs	r7, #1
 8008e1c:	d501      	bpl.n	8008e22 <_fwalk_reent+0x22>
 8008e1e:	6824      	ldr	r4, [r4, #0]
 8008e20:	e7f5      	b.n	8008e0e <_fwalk_reent+0xe>
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d907      	bls.n	8008e38 <_fwalk_reent+0x38>
 8008e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	d003      	beq.n	8008e38 <_fwalk_reent+0x38>
 8008e30:	4629      	mov	r1, r5
 8008e32:	4640      	mov	r0, r8
 8008e34:	47c8      	blx	r9
 8008e36:	4306      	orrs	r6, r0
 8008e38:	3568      	adds	r5, #104	; 0x68
 8008e3a:	e7ee      	b.n	8008e1a <_fwalk_reent+0x1a>

08008e3c <__swhatbuf_r>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	460e      	mov	r6, r1
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	2900      	cmp	r1, #0
 8008e46:	b096      	sub	sp, #88	; 0x58
 8008e48:	4614      	mov	r4, r2
 8008e4a:	461d      	mov	r5, r3
 8008e4c:	da07      	bge.n	8008e5e <__swhatbuf_r+0x22>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	89b3      	ldrh	r3, [r6, #12]
 8008e54:	061a      	lsls	r2, r3, #24
 8008e56:	d410      	bmi.n	8008e7a <__swhatbuf_r+0x3e>
 8008e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5c:	e00e      	b.n	8008e7c <__swhatbuf_r+0x40>
 8008e5e:	466a      	mov	r2, sp
 8008e60:	f000 fd88 	bl	8009974 <_fstat_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	dbf2      	blt.n	8008e4e <__swhatbuf_r+0x12>
 8008e68:	9a01      	ldr	r2, [sp, #4]
 8008e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e72:	425a      	negs	r2, r3
 8008e74:	415a      	adcs	r2, r3
 8008e76:	602a      	str	r2, [r5, #0]
 8008e78:	e7ee      	b.n	8008e58 <__swhatbuf_r+0x1c>
 8008e7a:	2340      	movs	r3, #64	; 0x40
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	b016      	add	sp, #88	; 0x58
 8008e82:	bd70      	pop	{r4, r5, r6, pc}

08008e84 <__smakebuf_r>:
 8008e84:	898b      	ldrh	r3, [r1, #12]
 8008e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e88:	079d      	lsls	r5, r3, #30
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	d507      	bpl.n	8008ea0 <__smakebuf_r+0x1c>
 8008e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	2301      	movs	r3, #1
 8008e9a:	6163      	str	r3, [r4, #20]
 8008e9c:	b002      	add	sp, #8
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	ab01      	add	r3, sp, #4
 8008ea2:	466a      	mov	r2, sp
 8008ea4:	f7ff ffca 	bl	8008e3c <__swhatbuf_r>
 8008ea8:	9900      	ldr	r1, [sp, #0]
 8008eaa:	4605      	mov	r5, r0
 8008eac:	4630      	mov	r0, r6
 8008eae:	f000 f877 	bl	8008fa0 <_malloc_r>
 8008eb2:	b948      	cbnz	r0, 8008ec8 <__smakebuf_r+0x44>
 8008eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb8:	059a      	lsls	r2, r3, #22
 8008eba:	d4ef      	bmi.n	8008e9c <__smakebuf_r+0x18>
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	f043 0302 	orr.w	r3, r3, #2
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	e7e3      	b.n	8008e90 <__smakebuf_r+0xc>
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <__smakebuf_r+0x7c>)
 8008eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	6020      	str	r0, [r4, #0]
 8008ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	6163      	str	r3, [r4, #20]
 8008eda:	9b01      	ldr	r3, [sp, #4]
 8008edc:	6120      	str	r0, [r4, #16]
 8008ede:	b15b      	cbz	r3, 8008ef8 <__smakebuf_r+0x74>
 8008ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 fd57 	bl	8009998 <_isatty_r>
 8008eea:	b128      	cbz	r0, 8008ef8 <__smakebuf_r+0x74>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f023 0303 	bic.w	r3, r3, #3
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	431d      	orrs	r5, r3
 8008efc:	81a5      	strh	r5, [r4, #12]
 8008efe:	e7cd      	b.n	8008e9c <__smakebuf_r+0x18>
 8008f00:	08008cf1 	.word	0x08008cf1

08008f04 <_free_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4605      	mov	r5, r0
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	d045      	beq.n	8008f98 <_free_r+0x94>
 8008f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f10:	1f0c      	subs	r4, r1, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	bfb8      	it	lt
 8008f16:	18e4      	addlt	r4, r4, r3
 8008f18:	f000 fd84 	bl	8009a24 <__malloc_lock>
 8008f1c:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <_free_r+0x98>)
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	4610      	mov	r0, r2
 8008f22:	b933      	cbnz	r3, 8008f32 <_free_r+0x2e>
 8008f24:	6063      	str	r3, [r4, #4]
 8008f26:	6014      	str	r4, [r2, #0]
 8008f28:	4628      	mov	r0, r5
 8008f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f2e:	f000 bd7a 	b.w	8009a26 <__malloc_unlock>
 8008f32:	42a3      	cmp	r3, r4
 8008f34:	d90c      	bls.n	8008f50 <_free_r+0x4c>
 8008f36:	6821      	ldr	r1, [r4, #0]
 8008f38:	1862      	adds	r2, r4, r1
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	bf04      	itt	eq
 8008f3e:	681a      	ldreq	r2, [r3, #0]
 8008f40:	685b      	ldreq	r3, [r3, #4]
 8008f42:	6063      	str	r3, [r4, #4]
 8008f44:	bf04      	itt	eq
 8008f46:	1852      	addeq	r2, r2, r1
 8008f48:	6022      	streq	r2, [r4, #0]
 8008f4a:	6004      	str	r4, [r0, #0]
 8008f4c:	e7ec      	b.n	8008f28 <_free_r+0x24>
 8008f4e:	4613      	mov	r3, r2
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	b10a      	cbz	r2, 8008f58 <_free_r+0x54>
 8008f54:	42a2      	cmp	r2, r4
 8008f56:	d9fa      	bls.n	8008f4e <_free_r+0x4a>
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	1858      	adds	r0, r3, r1
 8008f5c:	42a0      	cmp	r0, r4
 8008f5e:	d10b      	bne.n	8008f78 <_free_r+0x74>
 8008f60:	6820      	ldr	r0, [r4, #0]
 8008f62:	4401      	add	r1, r0
 8008f64:	1858      	adds	r0, r3, r1
 8008f66:	4282      	cmp	r2, r0
 8008f68:	6019      	str	r1, [r3, #0]
 8008f6a:	d1dd      	bne.n	8008f28 <_free_r+0x24>
 8008f6c:	6810      	ldr	r0, [r2, #0]
 8008f6e:	6852      	ldr	r2, [r2, #4]
 8008f70:	605a      	str	r2, [r3, #4]
 8008f72:	4401      	add	r1, r0
 8008f74:	6019      	str	r1, [r3, #0]
 8008f76:	e7d7      	b.n	8008f28 <_free_r+0x24>
 8008f78:	d902      	bls.n	8008f80 <_free_r+0x7c>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	e7d3      	b.n	8008f28 <_free_r+0x24>
 8008f80:	6820      	ldr	r0, [r4, #0]
 8008f82:	1821      	adds	r1, r4, r0
 8008f84:	428a      	cmp	r2, r1
 8008f86:	bf04      	itt	eq
 8008f88:	6811      	ldreq	r1, [r2, #0]
 8008f8a:	6852      	ldreq	r2, [r2, #4]
 8008f8c:	6062      	str	r2, [r4, #4]
 8008f8e:	bf04      	itt	eq
 8008f90:	1809      	addeq	r1, r1, r0
 8008f92:	6021      	streq	r1, [r4, #0]
 8008f94:	605c      	str	r4, [r3, #4]
 8008f96:	e7c7      	b.n	8008f28 <_free_r+0x24>
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20000508 	.word	0x20000508

08008fa0 <_malloc_r>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	1ccd      	adds	r5, r1, #3
 8008fa4:	f025 0503 	bic.w	r5, r5, #3
 8008fa8:	3508      	adds	r5, #8
 8008faa:	2d0c      	cmp	r5, #12
 8008fac:	bf38      	it	cc
 8008fae:	250c      	movcc	r5, #12
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	db01      	blt.n	8008fba <_malloc_r+0x1a>
 8008fb6:	42a9      	cmp	r1, r5
 8008fb8:	d903      	bls.n	8008fc2 <_malloc_r+0x22>
 8008fba:	230c      	movs	r3, #12
 8008fbc:	6033      	str	r3, [r6, #0]
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	f000 fd2f 	bl	8009a24 <__malloc_lock>
 8008fc6:	4a21      	ldr	r2, [pc, #132]	; (800904c <_malloc_r+0xac>)
 8008fc8:	6814      	ldr	r4, [r2, #0]
 8008fca:	4621      	mov	r1, r4
 8008fcc:	b991      	cbnz	r1, 8008ff4 <_malloc_r+0x54>
 8008fce:	4c20      	ldr	r4, [pc, #128]	; (8009050 <_malloc_r+0xb0>)
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	b91b      	cbnz	r3, 8008fdc <_malloc_r+0x3c>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f000 fc57 	bl	8009888 <_sbrk_r>
 8008fda:	6020      	str	r0, [r4, #0]
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f000 fc52 	bl	8009888 <_sbrk_r>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d124      	bne.n	8009032 <_malloc_r+0x92>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	6033      	str	r3, [r6, #0]
 8008fec:	4630      	mov	r0, r6
 8008fee:	f000 fd1a 	bl	8009a26 <__malloc_unlock>
 8008ff2:	e7e4      	b.n	8008fbe <_malloc_r+0x1e>
 8008ff4:	680b      	ldr	r3, [r1, #0]
 8008ff6:	1b5b      	subs	r3, r3, r5
 8008ff8:	d418      	bmi.n	800902c <_malloc_r+0x8c>
 8008ffa:	2b0b      	cmp	r3, #11
 8008ffc:	d90f      	bls.n	800901e <_malloc_r+0x7e>
 8008ffe:	600b      	str	r3, [r1, #0]
 8009000:	50cd      	str	r5, [r1, r3]
 8009002:	18cc      	adds	r4, r1, r3
 8009004:	4630      	mov	r0, r6
 8009006:	f000 fd0e 	bl	8009a26 <__malloc_unlock>
 800900a:	f104 000b 	add.w	r0, r4, #11
 800900e:	1d23      	adds	r3, r4, #4
 8009010:	f020 0007 	bic.w	r0, r0, #7
 8009014:	1ac3      	subs	r3, r0, r3
 8009016:	d0d3      	beq.n	8008fc0 <_malloc_r+0x20>
 8009018:	425a      	negs	r2, r3
 800901a:	50e2      	str	r2, [r4, r3]
 800901c:	e7d0      	b.n	8008fc0 <_malloc_r+0x20>
 800901e:	428c      	cmp	r4, r1
 8009020:	684b      	ldr	r3, [r1, #4]
 8009022:	bf16      	itet	ne
 8009024:	6063      	strne	r3, [r4, #4]
 8009026:	6013      	streq	r3, [r2, #0]
 8009028:	460c      	movne	r4, r1
 800902a:	e7eb      	b.n	8009004 <_malloc_r+0x64>
 800902c:	460c      	mov	r4, r1
 800902e:	6849      	ldr	r1, [r1, #4]
 8009030:	e7cc      	b.n	8008fcc <_malloc_r+0x2c>
 8009032:	1cc4      	adds	r4, r0, #3
 8009034:	f024 0403 	bic.w	r4, r4, #3
 8009038:	42a0      	cmp	r0, r4
 800903a:	d005      	beq.n	8009048 <_malloc_r+0xa8>
 800903c:	1a21      	subs	r1, r4, r0
 800903e:	4630      	mov	r0, r6
 8009040:	f000 fc22 	bl	8009888 <_sbrk_r>
 8009044:	3001      	adds	r0, #1
 8009046:	d0cf      	beq.n	8008fe8 <_malloc_r+0x48>
 8009048:	6025      	str	r5, [r4, #0]
 800904a:	e7db      	b.n	8009004 <_malloc_r+0x64>
 800904c:	20000508 	.word	0x20000508
 8009050:	2000050c 	.word	0x2000050c

08009054 <__ssputs_r>:
 8009054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	688e      	ldr	r6, [r1, #8]
 800905a:	429e      	cmp	r6, r3
 800905c:	4682      	mov	sl, r0
 800905e:	460c      	mov	r4, r1
 8009060:	4690      	mov	r8, r2
 8009062:	4699      	mov	r9, r3
 8009064:	d837      	bhi.n	80090d6 <__ssputs_r+0x82>
 8009066:	898a      	ldrh	r2, [r1, #12]
 8009068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800906c:	d031      	beq.n	80090d2 <__ssputs_r+0x7e>
 800906e:	6825      	ldr	r5, [r4, #0]
 8009070:	6909      	ldr	r1, [r1, #16]
 8009072:	1a6f      	subs	r7, r5, r1
 8009074:	6965      	ldr	r5, [r4, #20]
 8009076:	2302      	movs	r3, #2
 8009078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800907c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009080:	f109 0301 	add.w	r3, r9, #1
 8009084:	443b      	add	r3, r7
 8009086:	429d      	cmp	r5, r3
 8009088:	bf38      	it	cc
 800908a:	461d      	movcc	r5, r3
 800908c:	0553      	lsls	r3, r2, #21
 800908e:	d530      	bpl.n	80090f2 <__ssputs_r+0x9e>
 8009090:	4629      	mov	r1, r5
 8009092:	f7ff ff85 	bl	8008fa0 <_malloc_r>
 8009096:	4606      	mov	r6, r0
 8009098:	b950      	cbnz	r0, 80090b0 <__ssputs_r+0x5c>
 800909a:	230c      	movs	r3, #12
 800909c:	f8ca 3000 	str.w	r3, [sl]
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b0:	463a      	mov	r2, r7
 80090b2:	6921      	ldr	r1, [r4, #16]
 80090b4:	f000 fc92 	bl	80099dc <memcpy>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c2:	81a3      	strh	r3, [r4, #12]
 80090c4:	6126      	str	r6, [r4, #16]
 80090c6:	6165      	str	r5, [r4, #20]
 80090c8:	443e      	add	r6, r7
 80090ca:	1bed      	subs	r5, r5, r7
 80090cc:	6026      	str	r6, [r4, #0]
 80090ce:	60a5      	str	r5, [r4, #8]
 80090d0:	464e      	mov	r6, r9
 80090d2:	454e      	cmp	r6, r9
 80090d4:	d900      	bls.n	80090d8 <__ssputs_r+0x84>
 80090d6:	464e      	mov	r6, r9
 80090d8:	4632      	mov	r2, r6
 80090da:	4641      	mov	r1, r8
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	f000 fc88 	bl	80099f2 <memmove>
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	1b9b      	subs	r3, r3, r6
 80090e6:	60a3      	str	r3, [r4, #8]
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	441e      	add	r6, r3
 80090ec:	6026      	str	r6, [r4, #0]
 80090ee:	2000      	movs	r0, #0
 80090f0:	e7dc      	b.n	80090ac <__ssputs_r+0x58>
 80090f2:	462a      	mov	r2, r5
 80090f4:	f000 fc98 	bl	8009a28 <_realloc_r>
 80090f8:	4606      	mov	r6, r0
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d1e2      	bne.n	80090c4 <__ssputs_r+0x70>
 80090fe:	6921      	ldr	r1, [r4, #16]
 8009100:	4650      	mov	r0, sl
 8009102:	f7ff feff 	bl	8008f04 <_free_r>
 8009106:	e7c8      	b.n	800909a <__ssputs_r+0x46>

08009108 <_svfiprintf_r>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	461d      	mov	r5, r3
 800910e:	898b      	ldrh	r3, [r1, #12]
 8009110:	061f      	lsls	r7, r3, #24
 8009112:	b09d      	sub	sp, #116	; 0x74
 8009114:	4680      	mov	r8, r0
 8009116:	460c      	mov	r4, r1
 8009118:	4616      	mov	r6, r2
 800911a:	d50f      	bpl.n	800913c <_svfiprintf_r+0x34>
 800911c:	690b      	ldr	r3, [r1, #16]
 800911e:	b96b      	cbnz	r3, 800913c <_svfiprintf_r+0x34>
 8009120:	2140      	movs	r1, #64	; 0x40
 8009122:	f7ff ff3d 	bl	8008fa0 <_malloc_r>
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	6120      	str	r0, [r4, #16]
 800912a:	b928      	cbnz	r0, 8009138 <_svfiprintf_r+0x30>
 800912c:	230c      	movs	r3, #12
 800912e:	f8c8 3000 	str.w	r3, [r8]
 8009132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009136:	e0c8      	b.n	80092ca <_svfiprintf_r+0x1c2>
 8009138:	2340      	movs	r3, #64	; 0x40
 800913a:	6163      	str	r3, [r4, #20]
 800913c:	2300      	movs	r3, #0
 800913e:	9309      	str	r3, [sp, #36]	; 0x24
 8009140:	2320      	movs	r3, #32
 8009142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009146:	2330      	movs	r3, #48	; 0x30
 8009148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800914c:	9503      	str	r5, [sp, #12]
 800914e:	f04f 0b01 	mov.w	fp, #1
 8009152:	4637      	mov	r7, r6
 8009154:	463d      	mov	r5, r7
 8009156:	f815 3b01 	ldrb.w	r3, [r5], #1
 800915a:	b10b      	cbz	r3, 8009160 <_svfiprintf_r+0x58>
 800915c:	2b25      	cmp	r3, #37	; 0x25
 800915e:	d13e      	bne.n	80091de <_svfiprintf_r+0xd6>
 8009160:	ebb7 0a06 	subs.w	sl, r7, r6
 8009164:	d00b      	beq.n	800917e <_svfiprintf_r+0x76>
 8009166:	4653      	mov	r3, sl
 8009168:	4632      	mov	r2, r6
 800916a:	4621      	mov	r1, r4
 800916c:	4640      	mov	r0, r8
 800916e:	f7ff ff71 	bl	8009054 <__ssputs_r>
 8009172:	3001      	adds	r0, #1
 8009174:	f000 80a4 	beq.w	80092c0 <_svfiprintf_r+0x1b8>
 8009178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917a:	4453      	add	r3, sl
 800917c:	9309      	str	r3, [sp, #36]	; 0x24
 800917e:	783b      	ldrb	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 809d 	beq.w	80092c0 <_svfiprintf_r+0x1b8>
 8009186:	2300      	movs	r3, #0
 8009188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800918c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	9307      	str	r3, [sp, #28]
 8009194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009198:	931a      	str	r3, [sp, #104]	; 0x68
 800919a:	462f      	mov	r7, r5
 800919c:	2205      	movs	r2, #5
 800919e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091a2:	4850      	ldr	r0, [pc, #320]	; (80092e4 <_svfiprintf_r+0x1dc>)
 80091a4:	f7f7 f84c 	bl	8000240 <memchr>
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	b9d0      	cbnz	r0, 80091e2 <_svfiprintf_r+0xda>
 80091ac:	06d9      	lsls	r1, r3, #27
 80091ae:	bf44      	itt	mi
 80091b0:	2220      	movmi	r2, #32
 80091b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091b6:	071a      	lsls	r2, r3, #28
 80091b8:	bf44      	itt	mi
 80091ba:	222b      	movmi	r2, #43	; 0x2b
 80091bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80091c0:	782a      	ldrb	r2, [r5, #0]
 80091c2:	2a2a      	cmp	r2, #42	; 0x2a
 80091c4:	d015      	beq.n	80091f2 <_svfiprintf_r+0xea>
 80091c6:	9a07      	ldr	r2, [sp, #28]
 80091c8:	462f      	mov	r7, r5
 80091ca:	2000      	movs	r0, #0
 80091cc:	250a      	movs	r5, #10
 80091ce:	4639      	mov	r1, r7
 80091d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d4:	3b30      	subs	r3, #48	; 0x30
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	d94d      	bls.n	8009276 <_svfiprintf_r+0x16e>
 80091da:	b1b8      	cbz	r0, 800920c <_svfiprintf_r+0x104>
 80091dc:	e00f      	b.n	80091fe <_svfiprintf_r+0xf6>
 80091de:	462f      	mov	r7, r5
 80091e0:	e7b8      	b.n	8009154 <_svfiprintf_r+0x4c>
 80091e2:	4a40      	ldr	r2, [pc, #256]	; (80092e4 <_svfiprintf_r+0x1dc>)
 80091e4:	1a80      	subs	r0, r0, r2
 80091e6:	fa0b f000 	lsl.w	r0, fp, r0
 80091ea:	4318      	orrs	r0, r3
 80091ec:	9004      	str	r0, [sp, #16]
 80091ee:	463d      	mov	r5, r7
 80091f0:	e7d3      	b.n	800919a <_svfiprintf_r+0x92>
 80091f2:	9a03      	ldr	r2, [sp, #12]
 80091f4:	1d11      	adds	r1, r2, #4
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	9103      	str	r1, [sp, #12]
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	db01      	blt.n	8009202 <_svfiprintf_r+0xfa>
 80091fe:	9207      	str	r2, [sp, #28]
 8009200:	e004      	b.n	800920c <_svfiprintf_r+0x104>
 8009202:	4252      	negs	r2, r2
 8009204:	f043 0302 	orr.w	r3, r3, #2
 8009208:	9207      	str	r2, [sp, #28]
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	783b      	ldrb	r3, [r7, #0]
 800920e:	2b2e      	cmp	r3, #46	; 0x2e
 8009210:	d10c      	bne.n	800922c <_svfiprintf_r+0x124>
 8009212:	787b      	ldrb	r3, [r7, #1]
 8009214:	2b2a      	cmp	r3, #42	; 0x2a
 8009216:	d133      	bne.n	8009280 <_svfiprintf_r+0x178>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	1d1a      	adds	r2, r3, #4
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	9203      	str	r2, [sp, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	bfb8      	it	lt
 8009224:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009228:	3702      	adds	r7, #2
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	4d2e      	ldr	r5, [pc, #184]	; (80092e8 <_svfiprintf_r+0x1e0>)
 800922e:	7839      	ldrb	r1, [r7, #0]
 8009230:	2203      	movs	r2, #3
 8009232:	4628      	mov	r0, r5
 8009234:	f7f7 f804 	bl	8000240 <memchr>
 8009238:	b138      	cbz	r0, 800924a <_svfiprintf_r+0x142>
 800923a:	2340      	movs	r3, #64	; 0x40
 800923c:	1b40      	subs	r0, r0, r5
 800923e:	fa03 f000 	lsl.w	r0, r3, r0
 8009242:	9b04      	ldr	r3, [sp, #16]
 8009244:	4303      	orrs	r3, r0
 8009246:	3701      	adds	r7, #1
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	7839      	ldrb	r1, [r7, #0]
 800924c:	4827      	ldr	r0, [pc, #156]	; (80092ec <_svfiprintf_r+0x1e4>)
 800924e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009252:	2206      	movs	r2, #6
 8009254:	1c7e      	adds	r6, r7, #1
 8009256:	f7f6 fff3 	bl	8000240 <memchr>
 800925a:	2800      	cmp	r0, #0
 800925c:	d038      	beq.n	80092d0 <_svfiprintf_r+0x1c8>
 800925e:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <_svfiprintf_r+0x1e8>)
 8009260:	bb13      	cbnz	r3, 80092a8 <_svfiprintf_r+0x1a0>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	3307      	adds	r3, #7
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	3308      	adds	r3, #8
 800926c:	9303      	str	r3, [sp, #12]
 800926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009270:	444b      	add	r3, r9
 8009272:	9309      	str	r3, [sp, #36]	; 0x24
 8009274:	e76d      	b.n	8009152 <_svfiprintf_r+0x4a>
 8009276:	fb05 3202 	mla	r2, r5, r2, r3
 800927a:	2001      	movs	r0, #1
 800927c:	460f      	mov	r7, r1
 800927e:	e7a6      	b.n	80091ce <_svfiprintf_r+0xc6>
 8009280:	2300      	movs	r3, #0
 8009282:	3701      	adds	r7, #1
 8009284:	9305      	str	r3, [sp, #20]
 8009286:	4619      	mov	r1, r3
 8009288:	250a      	movs	r5, #10
 800928a:	4638      	mov	r0, r7
 800928c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009290:	3a30      	subs	r2, #48	; 0x30
 8009292:	2a09      	cmp	r2, #9
 8009294:	d903      	bls.n	800929e <_svfiprintf_r+0x196>
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0c8      	beq.n	800922c <_svfiprintf_r+0x124>
 800929a:	9105      	str	r1, [sp, #20]
 800929c:	e7c6      	b.n	800922c <_svfiprintf_r+0x124>
 800929e:	fb05 2101 	mla	r1, r5, r1, r2
 80092a2:	2301      	movs	r3, #1
 80092a4:	4607      	mov	r7, r0
 80092a6:	e7f0      	b.n	800928a <_svfiprintf_r+0x182>
 80092a8:	ab03      	add	r3, sp, #12
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	4622      	mov	r2, r4
 80092ae:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <_svfiprintf_r+0x1ec>)
 80092b0:	a904      	add	r1, sp, #16
 80092b2:	4640      	mov	r0, r8
 80092b4:	f3af 8000 	nop.w
 80092b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80092bc:	4681      	mov	r9, r0
 80092be:	d1d6      	bne.n	800926e <_svfiprintf_r+0x166>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	065b      	lsls	r3, r3, #25
 80092c4:	f53f af35 	bmi.w	8009132 <_svfiprintf_r+0x2a>
 80092c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ca:	b01d      	add	sp, #116	; 0x74
 80092cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d0:	ab03      	add	r3, sp, #12
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4622      	mov	r2, r4
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <_svfiprintf_r+0x1ec>)
 80092d8:	a904      	add	r1, sp, #16
 80092da:	4640      	mov	r0, r8
 80092dc:	f000 f9c2 	bl	8009664 <_printf_i>
 80092e0:	e7ea      	b.n	80092b8 <_svfiprintf_r+0x1b0>
 80092e2:	bf00      	nop
 80092e4:	08009e70 	.word	0x08009e70
 80092e8:	08009e76 	.word	0x08009e76
 80092ec:	08009e7a 	.word	0x08009e7a
 80092f0:	00000000 	.word	0x00000000
 80092f4:	08009055 	.word	0x08009055

080092f8 <__sfputc_r>:
 80092f8:	6893      	ldr	r3, [r2, #8]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	b410      	push	{r4}
 8009300:	6093      	str	r3, [r2, #8]
 8009302:	da08      	bge.n	8009316 <__sfputc_r+0x1e>
 8009304:	6994      	ldr	r4, [r2, #24]
 8009306:	42a3      	cmp	r3, r4
 8009308:	db01      	blt.n	800930e <__sfputc_r+0x16>
 800930a:	290a      	cmp	r1, #10
 800930c:	d103      	bne.n	8009316 <__sfputc_r+0x1e>
 800930e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009312:	f7ff bb59 	b.w	80089c8 <__swbuf_r>
 8009316:	6813      	ldr	r3, [r2, #0]
 8009318:	1c58      	adds	r0, r3, #1
 800931a:	6010      	str	r0, [r2, #0]
 800931c:	7019      	strb	r1, [r3, #0]
 800931e:	4608      	mov	r0, r1
 8009320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009324:	4770      	bx	lr

08009326 <__sfputs_r>:
 8009326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009328:	4606      	mov	r6, r0
 800932a:	460f      	mov	r7, r1
 800932c:	4614      	mov	r4, r2
 800932e:	18d5      	adds	r5, r2, r3
 8009330:	42ac      	cmp	r4, r5
 8009332:	d101      	bne.n	8009338 <__sfputs_r+0x12>
 8009334:	2000      	movs	r0, #0
 8009336:	e007      	b.n	8009348 <__sfputs_r+0x22>
 8009338:	463a      	mov	r2, r7
 800933a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800933e:	4630      	mov	r0, r6
 8009340:	f7ff ffda 	bl	80092f8 <__sfputc_r>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d1f3      	bne.n	8009330 <__sfputs_r+0xa>
 8009348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800934c <_vfiprintf_r>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	460c      	mov	r4, r1
 8009352:	b09d      	sub	sp, #116	; 0x74
 8009354:	4617      	mov	r7, r2
 8009356:	461d      	mov	r5, r3
 8009358:	4606      	mov	r6, r0
 800935a:	b118      	cbz	r0, 8009364 <_vfiprintf_r+0x18>
 800935c:	6983      	ldr	r3, [r0, #24]
 800935e:	b90b      	cbnz	r3, 8009364 <_vfiprintf_r+0x18>
 8009360:	f7ff fce2 	bl	8008d28 <__sinit>
 8009364:	4b7c      	ldr	r3, [pc, #496]	; (8009558 <_vfiprintf_r+0x20c>)
 8009366:	429c      	cmp	r4, r3
 8009368:	d158      	bne.n	800941c <_vfiprintf_r+0xd0>
 800936a:	6874      	ldr	r4, [r6, #4]
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	0718      	lsls	r0, r3, #28
 8009370:	d55e      	bpl.n	8009430 <_vfiprintf_r+0xe4>
 8009372:	6923      	ldr	r3, [r4, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d05b      	beq.n	8009430 <_vfiprintf_r+0xe4>
 8009378:	2300      	movs	r3, #0
 800937a:	9309      	str	r3, [sp, #36]	; 0x24
 800937c:	2320      	movs	r3, #32
 800937e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009382:	2330      	movs	r3, #48	; 0x30
 8009384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009388:	9503      	str	r5, [sp, #12]
 800938a:	f04f 0b01 	mov.w	fp, #1
 800938e:	46b8      	mov	r8, r7
 8009390:	4645      	mov	r5, r8
 8009392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009396:	b10b      	cbz	r3, 800939c <_vfiprintf_r+0x50>
 8009398:	2b25      	cmp	r3, #37	; 0x25
 800939a:	d154      	bne.n	8009446 <_vfiprintf_r+0xfa>
 800939c:	ebb8 0a07 	subs.w	sl, r8, r7
 80093a0:	d00b      	beq.n	80093ba <_vfiprintf_r+0x6e>
 80093a2:	4653      	mov	r3, sl
 80093a4:	463a      	mov	r2, r7
 80093a6:	4621      	mov	r1, r4
 80093a8:	4630      	mov	r0, r6
 80093aa:	f7ff ffbc 	bl	8009326 <__sfputs_r>
 80093ae:	3001      	adds	r0, #1
 80093b0:	f000 80c2 	beq.w	8009538 <_vfiprintf_r+0x1ec>
 80093b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b6:	4453      	add	r3, sl
 80093b8:	9309      	str	r3, [sp, #36]	; 0x24
 80093ba:	f898 3000 	ldrb.w	r3, [r8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 80ba 	beq.w	8009538 <_vfiprintf_r+0x1ec>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ce:	9304      	str	r3, [sp, #16]
 80093d0:	9307      	str	r3, [sp, #28]
 80093d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093d6:	931a      	str	r3, [sp, #104]	; 0x68
 80093d8:	46a8      	mov	r8, r5
 80093da:	2205      	movs	r2, #5
 80093dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80093e0:	485e      	ldr	r0, [pc, #376]	; (800955c <_vfiprintf_r+0x210>)
 80093e2:	f7f6 ff2d 	bl	8000240 <memchr>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	bb78      	cbnz	r0, 800944a <_vfiprintf_r+0xfe>
 80093ea:	06d9      	lsls	r1, r3, #27
 80093ec:	bf44      	itt	mi
 80093ee:	2220      	movmi	r2, #32
 80093f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093f4:	071a      	lsls	r2, r3, #28
 80093f6:	bf44      	itt	mi
 80093f8:	222b      	movmi	r2, #43	; 0x2b
 80093fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093fe:	782a      	ldrb	r2, [r5, #0]
 8009400:	2a2a      	cmp	r2, #42	; 0x2a
 8009402:	d02a      	beq.n	800945a <_vfiprintf_r+0x10e>
 8009404:	9a07      	ldr	r2, [sp, #28]
 8009406:	46a8      	mov	r8, r5
 8009408:	2000      	movs	r0, #0
 800940a:	250a      	movs	r5, #10
 800940c:	4641      	mov	r1, r8
 800940e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009412:	3b30      	subs	r3, #48	; 0x30
 8009414:	2b09      	cmp	r3, #9
 8009416:	d969      	bls.n	80094ec <_vfiprintf_r+0x1a0>
 8009418:	b360      	cbz	r0, 8009474 <_vfiprintf_r+0x128>
 800941a:	e024      	b.n	8009466 <_vfiprintf_r+0x11a>
 800941c:	4b50      	ldr	r3, [pc, #320]	; (8009560 <_vfiprintf_r+0x214>)
 800941e:	429c      	cmp	r4, r3
 8009420:	d101      	bne.n	8009426 <_vfiprintf_r+0xda>
 8009422:	68b4      	ldr	r4, [r6, #8]
 8009424:	e7a2      	b.n	800936c <_vfiprintf_r+0x20>
 8009426:	4b4f      	ldr	r3, [pc, #316]	; (8009564 <_vfiprintf_r+0x218>)
 8009428:	429c      	cmp	r4, r3
 800942a:	bf08      	it	eq
 800942c:	68f4      	ldreq	r4, [r6, #12]
 800942e:	e79d      	b.n	800936c <_vfiprintf_r+0x20>
 8009430:	4621      	mov	r1, r4
 8009432:	4630      	mov	r0, r6
 8009434:	f7ff fb1a 	bl	8008a6c <__swsetup_r>
 8009438:	2800      	cmp	r0, #0
 800943a:	d09d      	beq.n	8009378 <_vfiprintf_r+0x2c>
 800943c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009440:	b01d      	add	sp, #116	; 0x74
 8009442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009446:	46a8      	mov	r8, r5
 8009448:	e7a2      	b.n	8009390 <_vfiprintf_r+0x44>
 800944a:	4a44      	ldr	r2, [pc, #272]	; (800955c <_vfiprintf_r+0x210>)
 800944c:	1a80      	subs	r0, r0, r2
 800944e:	fa0b f000 	lsl.w	r0, fp, r0
 8009452:	4318      	orrs	r0, r3
 8009454:	9004      	str	r0, [sp, #16]
 8009456:	4645      	mov	r5, r8
 8009458:	e7be      	b.n	80093d8 <_vfiprintf_r+0x8c>
 800945a:	9a03      	ldr	r2, [sp, #12]
 800945c:	1d11      	adds	r1, r2, #4
 800945e:	6812      	ldr	r2, [r2, #0]
 8009460:	9103      	str	r1, [sp, #12]
 8009462:	2a00      	cmp	r2, #0
 8009464:	db01      	blt.n	800946a <_vfiprintf_r+0x11e>
 8009466:	9207      	str	r2, [sp, #28]
 8009468:	e004      	b.n	8009474 <_vfiprintf_r+0x128>
 800946a:	4252      	negs	r2, r2
 800946c:	f043 0302 	orr.w	r3, r3, #2
 8009470:	9207      	str	r2, [sp, #28]
 8009472:	9304      	str	r3, [sp, #16]
 8009474:	f898 3000 	ldrb.w	r3, [r8]
 8009478:	2b2e      	cmp	r3, #46	; 0x2e
 800947a:	d10e      	bne.n	800949a <_vfiprintf_r+0x14e>
 800947c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009480:	2b2a      	cmp	r3, #42	; 0x2a
 8009482:	d138      	bne.n	80094f6 <_vfiprintf_r+0x1aa>
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	1d1a      	adds	r2, r3, #4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	9203      	str	r2, [sp, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	bfb8      	it	lt
 8009490:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009494:	f108 0802 	add.w	r8, r8, #2
 8009498:	9305      	str	r3, [sp, #20]
 800949a:	4d33      	ldr	r5, [pc, #204]	; (8009568 <_vfiprintf_r+0x21c>)
 800949c:	f898 1000 	ldrb.w	r1, [r8]
 80094a0:	2203      	movs	r2, #3
 80094a2:	4628      	mov	r0, r5
 80094a4:	f7f6 fecc 	bl	8000240 <memchr>
 80094a8:	b140      	cbz	r0, 80094bc <_vfiprintf_r+0x170>
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	1b40      	subs	r0, r0, r5
 80094ae:	fa03 f000 	lsl.w	r0, r3, r0
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	4303      	orrs	r3, r0
 80094b6:	f108 0801 	add.w	r8, r8, #1
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	f898 1000 	ldrb.w	r1, [r8]
 80094c0:	482a      	ldr	r0, [pc, #168]	; (800956c <_vfiprintf_r+0x220>)
 80094c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094c6:	2206      	movs	r2, #6
 80094c8:	f108 0701 	add.w	r7, r8, #1
 80094cc:	f7f6 feb8 	bl	8000240 <memchr>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d037      	beq.n	8009544 <_vfiprintf_r+0x1f8>
 80094d4:	4b26      	ldr	r3, [pc, #152]	; (8009570 <_vfiprintf_r+0x224>)
 80094d6:	bb1b      	cbnz	r3, 8009520 <_vfiprintf_r+0x1d4>
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	3307      	adds	r3, #7
 80094dc:	f023 0307 	bic.w	r3, r3, #7
 80094e0:	3308      	adds	r3, #8
 80094e2:	9303      	str	r3, [sp, #12]
 80094e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e6:	444b      	add	r3, r9
 80094e8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ea:	e750      	b.n	800938e <_vfiprintf_r+0x42>
 80094ec:	fb05 3202 	mla	r2, r5, r2, r3
 80094f0:	2001      	movs	r0, #1
 80094f2:	4688      	mov	r8, r1
 80094f4:	e78a      	b.n	800940c <_vfiprintf_r+0xc0>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f108 0801 	add.w	r8, r8, #1
 80094fc:	9305      	str	r3, [sp, #20]
 80094fe:	4619      	mov	r1, r3
 8009500:	250a      	movs	r5, #10
 8009502:	4640      	mov	r0, r8
 8009504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009508:	3a30      	subs	r2, #48	; 0x30
 800950a:	2a09      	cmp	r2, #9
 800950c:	d903      	bls.n	8009516 <_vfiprintf_r+0x1ca>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0c3      	beq.n	800949a <_vfiprintf_r+0x14e>
 8009512:	9105      	str	r1, [sp, #20]
 8009514:	e7c1      	b.n	800949a <_vfiprintf_r+0x14e>
 8009516:	fb05 2101 	mla	r1, r5, r1, r2
 800951a:	2301      	movs	r3, #1
 800951c:	4680      	mov	r8, r0
 800951e:	e7f0      	b.n	8009502 <_vfiprintf_r+0x1b6>
 8009520:	ab03      	add	r3, sp, #12
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	4622      	mov	r2, r4
 8009526:	4b13      	ldr	r3, [pc, #76]	; (8009574 <_vfiprintf_r+0x228>)
 8009528:	a904      	add	r1, sp, #16
 800952a:	4630      	mov	r0, r6
 800952c:	f3af 8000 	nop.w
 8009530:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009534:	4681      	mov	r9, r0
 8009536:	d1d5      	bne.n	80094e4 <_vfiprintf_r+0x198>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	065b      	lsls	r3, r3, #25
 800953c:	f53f af7e 	bmi.w	800943c <_vfiprintf_r+0xf0>
 8009540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009542:	e77d      	b.n	8009440 <_vfiprintf_r+0xf4>
 8009544:	ab03      	add	r3, sp, #12
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4622      	mov	r2, r4
 800954a:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <_vfiprintf_r+0x228>)
 800954c:	a904      	add	r1, sp, #16
 800954e:	4630      	mov	r0, r6
 8009550:	f000 f888 	bl	8009664 <_printf_i>
 8009554:	e7ec      	b.n	8009530 <_vfiprintf_r+0x1e4>
 8009556:	bf00      	nop
 8009558:	08009e30 	.word	0x08009e30
 800955c:	08009e70 	.word	0x08009e70
 8009560:	08009e50 	.word	0x08009e50
 8009564:	08009e10 	.word	0x08009e10
 8009568:	08009e76 	.word	0x08009e76
 800956c:	08009e7a 	.word	0x08009e7a
 8009570:	00000000 	.word	0x00000000
 8009574:	08009327 	.word	0x08009327

08009578 <_printf_common>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4691      	mov	r9, r2
 800957e:	461f      	mov	r7, r3
 8009580:	688a      	ldr	r2, [r1, #8]
 8009582:	690b      	ldr	r3, [r1, #16]
 8009584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009588:	4293      	cmp	r3, r2
 800958a:	bfb8      	it	lt
 800958c:	4613      	movlt	r3, r2
 800958e:	f8c9 3000 	str.w	r3, [r9]
 8009592:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009596:	4606      	mov	r6, r0
 8009598:	460c      	mov	r4, r1
 800959a:	b112      	cbz	r2, 80095a2 <_printf_common+0x2a>
 800959c:	3301      	adds	r3, #1
 800959e:	f8c9 3000 	str.w	r3, [r9]
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	0699      	lsls	r1, r3, #26
 80095a6:	bf42      	ittt	mi
 80095a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80095ac:	3302      	addmi	r3, #2
 80095ae:	f8c9 3000 	strmi.w	r3, [r9]
 80095b2:	6825      	ldr	r5, [r4, #0]
 80095b4:	f015 0506 	ands.w	r5, r5, #6
 80095b8:	d107      	bne.n	80095ca <_printf_common+0x52>
 80095ba:	f104 0a19 	add.w	sl, r4, #25
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	f8d9 2000 	ldr.w	r2, [r9]
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	42ab      	cmp	r3, r5
 80095c8:	dc28      	bgt.n	800961c <_printf_common+0xa4>
 80095ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80095ce:	6822      	ldr	r2, [r4, #0]
 80095d0:	3300      	adds	r3, #0
 80095d2:	bf18      	it	ne
 80095d4:	2301      	movne	r3, #1
 80095d6:	0692      	lsls	r2, r2, #26
 80095d8:	d42d      	bmi.n	8009636 <_printf_common+0xbe>
 80095da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095de:	4639      	mov	r1, r7
 80095e0:	4630      	mov	r0, r6
 80095e2:	47c0      	blx	r8
 80095e4:	3001      	adds	r0, #1
 80095e6:	d020      	beq.n	800962a <_printf_common+0xb2>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	68e5      	ldr	r5, [r4, #12]
 80095ec:	f8d9 2000 	ldr.w	r2, [r9]
 80095f0:	f003 0306 	and.w	r3, r3, #6
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	bf08      	it	eq
 80095f8:	1aad      	subeq	r5, r5, r2
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	6922      	ldr	r2, [r4, #16]
 80095fe:	bf0c      	ite	eq
 8009600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009604:	2500      	movne	r5, #0
 8009606:	4293      	cmp	r3, r2
 8009608:	bfc4      	itt	gt
 800960a:	1a9b      	subgt	r3, r3, r2
 800960c:	18ed      	addgt	r5, r5, r3
 800960e:	f04f 0900 	mov.w	r9, #0
 8009612:	341a      	adds	r4, #26
 8009614:	454d      	cmp	r5, r9
 8009616:	d11a      	bne.n	800964e <_printf_common+0xd6>
 8009618:	2000      	movs	r0, #0
 800961a:	e008      	b.n	800962e <_printf_common+0xb6>
 800961c:	2301      	movs	r3, #1
 800961e:	4652      	mov	r2, sl
 8009620:	4639      	mov	r1, r7
 8009622:	4630      	mov	r0, r6
 8009624:	47c0      	blx	r8
 8009626:	3001      	adds	r0, #1
 8009628:	d103      	bne.n	8009632 <_printf_common+0xba>
 800962a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800962e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009632:	3501      	adds	r5, #1
 8009634:	e7c3      	b.n	80095be <_printf_common+0x46>
 8009636:	18e1      	adds	r1, r4, r3
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	2030      	movs	r0, #48	; 0x30
 800963c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009640:	4422      	add	r2, r4
 8009642:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800964a:	3302      	adds	r3, #2
 800964c:	e7c5      	b.n	80095da <_printf_common+0x62>
 800964e:	2301      	movs	r3, #1
 8009650:	4622      	mov	r2, r4
 8009652:	4639      	mov	r1, r7
 8009654:	4630      	mov	r0, r6
 8009656:	47c0      	blx	r8
 8009658:	3001      	adds	r0, #1
 800965a:	d0e6      	beq.n	800962a <_printf_common+0xb2>
 800965c:	f109 0901 	add.w	r9, r9, #1
 8009660:	e7d8      	b.n	8009614 <_printf_common+0x9c>
	...

08009664 <_printf_i>:
 8009664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009668:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800966c:	460c      	mov	r4, r1
 800966e:	7e09      	ldrb	r1, [r1, #24]
 8009670:	b085      	sub	sp, #20
 8009672:	296e      	cmp	r1, #110	; 0x6e
 8009674:	4617      	mov	r7, r2
 8009676:	4606      	mov	r6, r0
 8009678:	4698      	mov	r8, r3
 800967a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800967c:	f000 80b3 	beq.w	80097e6 <_printf_i+0x182>
 8009680:	d822      	bhi.n	80096c8 <_printf_i+0x64>
 8009682:	2963      	cmp	r1, #99	; 0x63
 8009684:	d036      	beq.n	80096f4 <_printf_i+0x90>
 8009686:	d80a      	bhi.n	800969e <_printf_i+0x3a>
 8009688:	2900      	cmp	r1, #0
 800968a:	f000 80b9 	beq.w	8009800 <_printf_i+0x19c>
 800968e:	2958      	cmp	r1, #88	; 0x58
 8009690:	f000 8083 	beq.w	800979a <_printf_i+0x136>
 8009694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009698:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800969c:	e032      	b.n	8009704 <_printf_i+0xa0>
 800969e:	2964      	cmp	r1, #100	; 0x64
 80096a0:	d001      	beq.n	80096a6 <_printf_i+0x42>
 80096a2:	2969      	cmp	r1, #105	; 0x69
 80096a4:	d1f6      	bne.n	8009694 <_printf_i+0x30>
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	6813      	ldr	r3, [r2, #0]
 80096aa:	0605      	lsls	r5, r0, #24
 80096ac:	f103 0104 	add.w	r1, r3, #4
 80096b0:	d52a      	bpl.n	8009708 <_printf_i+0xa4>
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	da03      	bge.n	80096c2 <_printf_i+0x5e>
 80096ba:	222d      	movs	r2, #45	; 0x2d
 80096bc:	425b      	negs	r3, r3
 80096be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80096c2:	486f      	ldr	r0, [pc, #444]	; (8009880 <_printf_i+0x21c>)
 80096c4:	220a      	movs	r2, #10
 80096c6:	e039      	b.n	800973c <_printf_i+0xd8>
 80096c8:	2973      	cmp	r1, #115	; 0x73
 80096ca:	f000 809d 	beq.w	8009808 <_printf_i+0x1a4>
 80096ce:	d808      	bhi.n	80096e2 <_printf_i+0x7e>
 80096d0:	296f      	cmp	r1, #111	; 0x6f
 80096d2:	d020      	beq.n	8009716 <_printf_i+0xb2>
 80096d4:	2970      	cmp	r1, #112	; 0x70
 80096d6:	d1dd      	bne.n	8009694 <_printf_i+0x30>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	f043 0320 	orr.w	r3, r3, #32
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	e003      	b.n	80096ea <_printf_i+0x86>
 80096e2:	2975      	cmp	r1, #117	; 0x75
 80096e4:	d017      	beq.n	8009716 <_printf_i+0xb2>
 80096e6:	2978      	cmp	r1, #120	; 0x78
 80096e8:	d1d4      	bne.n	8009694 <_printf_i+0x30>
 80096ea:	2378      	movs	r3, #120	; 0x78
 80096ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096f0:	4864      	ldr	r0, [pc, #400]	; (8009884 <_printf_i+0x220>)
 80096f2:	e055      	b.n	80097a0 <_printf_i+0x13c>
 80096f4:	6813      	ldr	r3, [r2, #0]
 80096f6:	1d19      	adds	r1, r3, #4
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6011      	str	r1, [r2, #0]
 80096fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009704:	2301      	movs	r3, #1
 8009706:	e08c      	b.n	8009822 <_printf_i+0x1be>
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6011      	str	r1, [r2, #0]
 800970c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009710:	bf18      	it	ne
 8009712:	b21b      	sxthne	r3, r3
 8009714:	e7cf      	b.n	80096b6 <_printf_i+0x52>
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	6825      	ldr	r5, [r4, #0]
 800971a:	1d18      	adds	r0, r3, #4
 800971c:	6010      	str	r0, [r2, #0]
 800971e:	0628      	lsls	r0, r5, #24
 8009720:	d501      	bpl.n	8009726 <_printf_i+0xc2>
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	e002      	b.n	800972c <_printf_i+0xc8>
 8009726:	0668      	lsls	r0, r5, #25
 8009728:	d5fb      	bpl.n	8009722 <_printf_i+0xbe>
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	4854      	ldr	r0, [pc, #336]	; (8009880 <_printf_i+0x21c>)
 800972e:	296f      	cmp	r1, #111	; 0x6f
 8009730:	bf14      	ite	ne
 8009732:	220a      	movne	r2, #10
 8009734:	2208      	moveq	r2, #8
 8009736:	2100      	movs	r1, #0
 8009738:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800973c:	6865      	ldr	r5, [r4, #4]
 800973e:	60a5      	str	r5, [r4, #8]
 8009740:	2d00      	cmp	r5, #0
 8009742:	f2c0 8095 	blt.w	8009870 <_printf_i+0x20c>
 8009746:	6821      	ldr	r1, [r4, #0]
 8009748:	f021 0104 	bic.w	r1, r1, #4
 800974c:	6021      	str	r1, [r4, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d13d      	bne.n	80097ce <_printf_i+0x16a>
 8009752:	2d00      	cmp	r5, #0
 8009754:	f040 808e 	bne.w	8009874 <_printf_i+0x210>
 8009758:	4665      	mov	r5, ip
 800975a:	2a08      	cmp	r2, #8
 800975c:	d10b      	bne.n	8009776 <_printf_i+0x112>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	07db      	lsls	r3, r3, #31
 8009762:	d508      	bpl.n	8009776 <_printf_i+0x112>
 8009764:	6923      	ldr	r3, [r4, #16]
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	429a      	cmp	r2, r3
 800976a:	bfde      	ittt	le
 800976c:	2330      	movle	r3, #48	; 0x30
 800976e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009772:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009776:	ebac 0305 	sub.w	r3, ip, r5
 800977a:	6123      	str	r3, [r4, #16]
 800977c:	f8cd 8000 	str.w	r8, [sp]
 8009780:	463b      	mov	r3, r7
 8009782:	aa03      	add	r2, sp, #12
 8009784:	4621      	mov	r1, r4
 8009786:	4630      	mov	r0, r6
 8009788:	f7ff fef6 	bl	8009578 <_printf_common>
 800978c:	3001      	adds	r0, #1
 800978e:	d14d      	bne.n	800982c <_printf_i+0x1c8>
 8009790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009794:	b005      	add	sp, #20
 8009796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800979a:	4839      	ldr	r0, [pc, #228]	; (8009880 <_printf_i+0x21c>)
 800979c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80097a0:	6813      	ldr	r3, [r2, #0]
 80097a2:	6821      	ldr	r1, [r4, #0]
 80097a4:	1d1d      	adds	r5, r3, #4
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6015      	str	r5, [r2, #0]
 80097aa:	060a      	lsls	r2, r1, #24
 80097ac:	d50b      	bpl.n	80097c6 <_printf_i+0x162>
 80097ae:	07ca      	lsls	r2, r1, #31
 80097b0:	bf44      	itt	mi
 80097b2:	f041 0120 	orrmi.w	r1, r1, #32
 80097b6:	6021      	strmi	r1, [r4, #0]
 80097b8:	b91b      	cbnz	r3, 80097c2 <_printf_i+0x15e>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	f022 0220 	bic.w	r2, r2, #32
 80097c0:	6022      	str	r2, [r4, #0]
 80097c2:	2210      	movs	r2, #16
 80097c4:	e7b7      	b.n	8009736 <_printf_i+0xd2>
 80097c6:	064d      	lsls	r5, r1, #25
 80097c8:	bf48      	it	mi
 80097ca:	b29b      	uxthmi	r3, r3
 80097cc:	e7ef      	b.n	80097ae <_printf_i+0x14a>
 80097ce:	4665      	mov	r5, ip
 80097d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80097d4:	fb02 3311 	mls	r3, r2, r1, r3
 80097d8:	5cc3      	ldrb	r3, [r0, r3]
 80097da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80097de:	460b      	mov	r3, r1
 80097e0:	2900      	cmp	r1, #0
 80097e2:	d1f5      	bne.n	80097d0 <_printf_i+0x16c>
 80097e4:	e7b9      	b.n	800975a <_printf_i+0xf6>
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	6825      	ldr	r5, [r4, #0]
 80097ea:	6961      	ldr	r1, [r4, #20]
 80097ec:	1d18      	adds	r0, r3, #4
 80097ee:	6010      	str	r0, [r2, #0]
 80097f0:	0628      	lsls	r0, r5, #24
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	d501      	bpl.n	80097fa <_printf_i+0x196>
 80097f6:	6019      	str	r1, [r3, #0]
 80097f8:	e002      	b.n	8009800 <_printf_i+0x19c>
 80097fa:	066a      	lsls	r2, r5, #25
 80097fc:	d5fb      	bpl.n	80097f6 <_printf_i+0x192>
 80097fe:	8019      	strh	r1, [r3, #0]
 8009800:	2300      	movs	r3, #0
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	4665      	mov	r5, ip
 8009806:	e7b9      	b.n	800977c <_printf_i+0x118>
 8009808:	6813      	ldr	r3, [r2, #0]
 800980a:	1d19      	adds	r1, r3, #4
 800980c:	6011      	str	r1, [r2, #0]
 800980e:	681d      	ldr	r5, [r3, #0]
 8009810:	6862      	ldr	r2, [r4, #4]
 8009812:	2100      	movs	r1, #0
 8009814:	4628      	mov	r0, r5
 8009816:	f7f6 fd13 	bl	8000240 <memchr>
 800981a:	b108      	cbz	r0, 8009820 <_printf_i+0x1bc>
 800981c:	1b40      	subs	r0, r0, r5
 800981e:	6060      	str	r0, [r4, #4]
 8009820:	6863      	ldr	r3, [r4, #4]
 8009822:	6123      	str	r3, [r4, #16]
 8009824:	2300      	movs	r3, #0
 8009826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982a:	e7a7      	b.n	800977c <_printf_i+0x118>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	462a      	mov	r2, r5
 8009830:	4639      	mov	r1, r7
 8009832:	4630      	mov	r0, r6
 8009834:	47c0      	blx	r8
 8009836:	3001      	adds	r0, #1
 8009838:	d0aa      	beq.n	8009790 <_printf_i+0x12c>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	079b      	lsls	r3, r3, #30
 800983e:	d413      	bmi.n	8009868 <_printf_i+0x204>
 8009840:	68e0      	ldr	r0, [r4, #12]
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	4298      	cmp	r0, r3
 8009846:	bfb8      	it	lt
 8009848:	4618      	movlt	r0, r3
 800984a:	e7a3      	b.n	8009794 <_printf_i+0x130>
 800984c:	2301      	movs	r3, #1
 800984e:	464a      	mov	r2, r9
 8009850:	4639      	mov	r1, r7
 8009852:	4630      	mov	r0, r6
 8009854:	47c0      	blx	r8
 8009856:	3001      	adds	r0, #1
 8009858:	d09a      	beq.n	8009790 <_printf_i+0x12c>
 800985a:	3501      	adds	r5, #1
 800985c:	68e3      	ldr	r3, [r4, #12]
 800985e:	9a03      	ldr	r2, [sp, #12]
 8009860:	1a9b      	subs	r3, r3, r2
 8009862:	42ab      	cmp	r3, r5
 8009864:	dcf2      	bgt.n	800984c <_printf_i+0x1e8>
 8009866:	e7eb      	b.n	8009840 <_printf_i+0x1dc>
 8009868:	2500      	movs	r5, #0
 800986a:	f104 0919 	add.w	r9, r4, #25
 800986e:	e7f5      	b.n	800985c <_printf_i+0x1f8>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1ac      	bne.n	80097ce <_printf_i+0x16a>
 8009874:	7803      	ldrb	r3, [r0, #0]
 8009876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800987a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800987e:	e76c      	b.n	800975a <_printf_i+0xf6>
 8009880:	08009e81 	.word	0x08009e81
 8009884:	08009e92 	.word	0x08009e92

08009888 <_sbrk_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4c06      	ldr	r4, [pc, #24]	; (80098a4 <_sbrk_r+0x1c>)
 800988c:	2300      	movs	r3, #0
 800988e:	4605      	mov	r5, r0
 8009890:	4608      	mov	r0, r1
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	f7f8 f9a0 	bl	8001bd8 <_sbrk>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d102      	bne.n	80098a2 <_sbrk_r+0x1a>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	b103      	cbz	r3, 80098a2 <_sbrk_r+0x1a>
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	200009d0 	.word	0x200009d0

080098a8 <__sread>:
 80098a8:	b510      	push	{r4, lr}
 80098aa:	460c      	mov	r4, r1
 80098ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b0:	f000 f8e0 	bl	8009a74 <_read_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	bfab      	itete	ge
 80098b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ba:	89a3      	ldrhlt	r3, [r4, #12]
 80098bc:	181b      	addge	r3, r3, r0
 80098be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098c2:	bfac      	ite	ge
 80098c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098c6:	81a3      	strhlt	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__swrite>:
 80098ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ce:	461f      	mov	r7, r3
 80098d0:	898b      	ldrh	r3, [r1, #12]
 80098d2:	05db      	lsls	r3, r3, #23
 80098d4:	4605      	mov	r5, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	4616      	mov	r6, r2
 80098da:	d505      	bpl.n	80098e8 <__swrite+0x1e>
 80098dc:	2302      	movs	r3, #2
 80098de:	2200      	movs	r2, #0
 80098e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e4:	f000 f868 	bl	80099b8 <_lseek_r>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	4628      	mov	r0, r5
 80098fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	f000 b817 	b.w	8009930 <_write_r>

08009902 <__sseek>:
 8009902:	b510      	push	{r4, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990a:	f000 f855 	bl	80099b8 <_lseek_r>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	bf15      	itete	ne
 8009914:	6560      	strne	r0, [r4, #84]	; 0x54
 8009916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800991a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800991e:	81a3      	strheq	r3, [r4, #12]
 8009920:	bf18      	it	ne
 8009922:	81a3      	strhne	r3, [r4, #12]
 8009924:	bd10      	pop	{r4, pc}

08009926 <__sclose>:
 8009926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992a:	f000 b813 	b.w	8009954 <_close_r>
	...

08009930 <_write_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4c07      	ldr	r4, [pc, #28]	; (8009950 <_write_r+0x20>)
 8009934:	4605      	mov	r5, r0
 8009936:	4608      	mov	r0, r1
 8009938:	4611      	mov	r1, r2
 800993a:	2200      	movs	r2, #0
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	f7f7 fd21 	bl	8001386 <_write>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_write_r+0x1e>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	b103      	cbz	r3, 800994e <_write_r+0x1e>
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	200009d0 	.word	0x200009d0

08009954 <_close_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4c06      	ldr	r4, [pc, #24]	; (8009970 <_close_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4605      	mov	r5, r0
 800995c:	4608      	mov	r0, r1
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	f7f8 f905 	bl	8001b6e <_close>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_close_r+0x1a>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	b103      	cbz	r3, 800996e <_close_r+0x1a>
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	200009d0 	.word	0x200009d0

08009974 <_fstat_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4c07      	ldr	r4, [pc, #28]	; (8009994 <_fstat_r+0x20>)
 8009978:	2300      	movs	r3, #0
 800997a:	4605      	mov	r5, r0
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	f7f8 f900 	bl	8001b86 <_fstat>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d102      	bne.n	8009990 <_fstat_r+0x1c>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	b103      	cbz	r3, 8009990 <_fstat_r+0x1c>
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	200009d0 	.word	0x200009d0

08009998 <_isatty_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4c06      	ldr	r4, [pc, #24]	; (80099b4 <_isatty_r+0x1c>)
 800999c:	2300      	movs	r3, #0
 800999e:	4605      	mov	r5, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	6023      	str	r3, [r4, #0]
 80099a4:	f7f8 f8ff 	bl	8001ba6 <_isatty>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_isatty_r+0x1a>
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_isatty_r+0x1a>
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	200009d0 	.word	0x200009d0

080099b8 <_lseek_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4c07      	ldr	r4, [pc, #28]	; (80099d8 <_lseek_r+0x20>)
 80099bc:	4605      	mov	r5, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	6022      	str	r2, [r4, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f8 f8f8 	bl	8001bbc <_lseek>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_lseek_r+0x1e>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_lseek_r+0x1e>
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	200009d0 	.word	0x200009d0

080099dc <memcpy>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	1e43      	subs	r3, r0, #1
 80099e0:	440a      	add	r2, r1
 80099e2:	4291      	cmp	r1, r2
 80099e4:	d100      	bne.n	80099e8 <memcpy+0xc>
 80099e6:	bd10      	pop	{r4, pc}
 80099e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f0:	e7f7      	b.n	80099e2 <memcpy+0x6>

080099f2 <memmove>:
 80099f2:	4288      	cmp	r0, r1
 80099f4:	b510      	push	{r4, lr}
 80099f6:	eb01 0302 	add.w	r3, r1, r2
 80099fa:	d807      	bhi.n	8009a0c <memmove+0x1a>
 80099fc:	1e42      	subs	r2, r0, #1
 80099fe:	4299      	cmp	r1, r3
 8009a00:	d00a      	beq.n	8009a18 <memmove+0x26>
 8009a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a0a:	e7f8      	b.n	80099fe <memmove+0xc>
 8009a0c:	4283      	cmp	r3, r0
 8009a0e:	d9f5      	bls.n	80099fc <memmove+0xa>
 8009a10:	1881      	adds	r1, r0, r2
 8009a12:	1ad2      	subs	r2, r2, r3
 8009a14:	42d3      	cmn	r3, r2
 8009a16:	d100      	bne.n	8009a1a <memmove+0x28>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009a22:	e7f7      	b.n	8009a14 <memmove+0x22>

08009a24 <__malloc_lock>:
 8009a24:	4770      	bx	lr

08009a26 <__malloc_unlock>:
 8009a26:	4770      	bx	lr

08009a28 <_realloc_r>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	460e      	mov	r6, r1
 8009a30:	b921      	cbnz	r1, 8009a3c <_realloc_r+0x14>
 8009a32:	4611      	mov	r1, r2
 8009a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a38:	f7ff bab2 	b.w	8008fa0 <_malloc_r>
 8009a3c:	b922      	cbnz	r2, 8009a48 <_realloc_r+0x20>
 8009a3e:	f7ff fa61 	bl	8008f04 <_free_r>
 8009a42:	4625      	mov	r5, r4
 8009a44:	4628      	mov	r0, r5
 8009a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a48:	f000 f826 	bl	8009a98 <_malloc_usable_size_r>
 8009a4c:	42a0      	cmp	r0, r4
 8009a4e:	d20f      	bcs.n	8009a70 <_realloc_r+0x48>
 8009a50:	4621      	mov	r1, r4
 8009a52:	4638      	mov	r0, r7
 8009a54:	f7ff faa4 	bl	8008fa0 <_malloc_r>
 8009a58:	4605      	mov	r5, r0
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0f2      	beq.n	8009a44 <_realloc_r+0x1c>
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4622      	mov	r2, r4
 8009a62:	f7ff ffbb 	bl	80099dc <memcpy>
 8009a66:	4631      	mov	r1, r6
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff fa4b 	bl	8008f04 <_free_r>
 8009a6e:	e7e9      	b.n	8009a44 <_realloc_r+0x1c>
 8009a70:	4635      	mov	r5, r6
 8009a72:	e7e7      	b.n	8009a44 <_realloc_r+0x1c>

08009a74 <_read_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4c07      	ldr	r4, [pc, #28]	; (8009a94 <_read_r+0x20>)
 8009a78:	4605      	mov	r5, r0
 8009a7a:	4608      	mov	r0, r1
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	2200      	movs	r2, #0
 8009a80:	6022      	str	r2, [r4, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	f7f8 f856 	bl	8001b34 <_read>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	d102      	bne.n	8009a92 <_read_r+0x1e>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	b103      	cbz	r3, 8009a92 <_read_r+0x1e>
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	200009d0 	.word	0x200009d0

08009a98 <_malloc_usable_size_r>:
 8009a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a9c:	1f18      	subs	r0, r3, #4
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bfbc      	itt	lt
 8009aa2:	580b      	ldrlt	r3, [r1, r0]
 8009aa4:	18c0      	addlt	r0, r0, r3
 8009aa6:	4770      	bx	lr

08009aa8 <_init>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	bf00      	nop
 8009aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aae:	bc08      	pop	{r3}
 8009ab0:	469e      	mov	lr, r3
 8009ab2:	4770      	bx	lr

08009ab4 <_fini>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	bf00      	nop
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr
