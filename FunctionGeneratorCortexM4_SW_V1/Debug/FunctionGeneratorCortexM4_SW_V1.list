
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006364  08006364  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006364  08006364  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006364  08006364  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800636c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000074  080063e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080063e0  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e9f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c9  00000000  00000000  00039f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  0003d310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001400  00000000  00000000  0003e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a8d7  00000000  00000000  0003fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013847  00000000  00000000  0006a59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011468f  00000000  00000000  0007dde6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192475  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d0  00000000  00000000  001924f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006294 	.word	0x08006294

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006294 	.word	0x08006294

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f005 f88b 	bl	80053f4 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000306:	2204      	movs	r2, #4
 8000308:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000312:	2201      	movs	r2, #1
 8000314:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000332:	2201      	movs	r2, #1
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f001 f939 	bl	80015c0 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fc3c 	bl	8000bd0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f001 fec2 	bl	80020ec <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 fc2f 	bl	8000bd0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f001 fad6 	bl	8001940 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 fc19 	bl	8000bd0 <Error_Handler>
  }

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000a4 	.word	0x200000a4
 80003ac:	0c900008 	.word	0x0c900008

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d0:	d14f      	bne.n	8000472 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a29      	ldr	r2, [pc, #164]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
 8000408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f002 ff9a 	bl	8003350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xd4>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000424:	2205      	movs	r2, #5
 8000426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800044c:	2220      	movs	r2, #32
 800044e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000458:	f002 fdc0 	bl	8002fdc <HAL_DMA_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000462:	f000 fbb5 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046a:	655a      	str	r2, [r3, #84]	; 0x54
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	20000110 	.word	0x20000110
 8000484:	40020008 	.word	0x40020008

08000488 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_COMP1_Init+0x44>)
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <MX_COMP1_Init+0x48>)
 8000490:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_COMP1_Init+0x44>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_COMP1_Init+0x44>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_COMP1_Init+0x4c>)
 800049c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_COMP1_Init+0x44>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b8:	f002 f86c 	bl	8002594 <HAL_COMP_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80004c2:	f000 fb85 	bl	8000bd0 <Error_Handler>
  }

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000170 	.word	0x20000170
 80004d0:	40010200 	.word	0x40010200
 80004d4:	00800030 	.word	0x00800030

080004d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <HAL_COMP_MspInit+0x5c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d118      	bne.n	800052c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_COMP_MspInit+0x60>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	2302      	movs	r3, #2
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f002 ff12 	bl	8003350 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010200 	.word	0x40010200
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac2;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f004 ff53 	bl	80053f4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000550:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <MX_DAC1_Init+0xa4>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000554:	4821      	ldr	r0, [pc, #132]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000556:	f002 fac0 	bl	8002ada <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fb36 	bl	8000bd0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000574:	231e      	movs	r3, #30
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000590:	f002 fb40 	bl	8002c14 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fb19 	bl	8000bd0 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800059e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80005a2:	2100      	movs	r1, #0
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_DAC1_Init+0xa0>)
 80005a6:	f002 fce1 	bl	8002f6c <HAL_DACEx_TriangleWaveGenerate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80005b0:	f000 fb0e 	bl	8000bd0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2210      	movs	r2, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_DAC1_Init+0xa0>)
 80005c4:	f002 fb26 	bl	8002c14 <HAL_DAC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 80005ce:	f000 faff 	bl	8000bd0 <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	3730      	adds	r7, #48	; 0x30
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200001a8 	.word	0x200001a8
 80005e0:	50000800 	.word	0x50000800

080005e4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2230      	movs	r2, #48	; 0x30
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 feff 	bl	80053f4 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_DAC2_Init+0x80>)
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_DAC2_Init+0x84>)
 80005fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80005fc:	4819      	ldr	r0, [pc, #100]	; (8000664 <MX_DAC2_Init+0x80>)
 80005fe:	f002 fa6c 	bl	8002ada <HAL_DAC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000608:	f000 fae2 	bl	8000bd0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800060c:	2302      	movs	r3, #2
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800061c:	231e      	movs	r3, #30
 800061e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <MX_DAC2_Init+0x80>)
 8000638:	f002 faec 	bl	8002c14 <HAL_DAC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000642:	f000 fac5 	bl	8000bd0 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac2, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8000646:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800064a:	2100      	movs	r1, #0
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_DAC2_Init+0x80>)
 800064e:	f002 fc8d 	bl	8002f6c <HAL_DACEx_TriangleWaveGenerate>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_DAC2_Init+0x78>
  {
    Error_Handler();
 8000658:	f000 faba 	bl	8000bd0 <Error_Handler>
  }

}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000194 	.word	0x20000194
 8000668:	50000c00 	.word	0x50000c00

0800066c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a40      	ldr	r2, [pc, #256]	; (800078c <HAL_DAC_MspInit+0x120>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d125      	bne.n	80006da <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <HAL_DAC_MspInit+0x124>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a3f      	ldr	r2, [pc, #252]	; (8000790 <HAL_DAC_MspInit+0x124>)
 8000694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <HAL_DAC_MspInit+0x124>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a39      	ldr	r2, [pc, #228]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006be:	2330      	movs	r3, #48	; 0x30
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f002 fe3c 	bl	8003350 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80006d8:	e054      	b.n	8000784 <HAL_DAC_MspInit+0x118>
  else if(dacHandle->Instance==DAC2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <HAL_DAC_MspInit+0x128>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d14f      	bne.n	8000784 <HAL_DAC_MspInit+0x118>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e8:	4a29      	ldr	r2, [pc, #164]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000700:	4a23      	ldr	r2, [pc, #140]	; (8000790 <HAL_DAC_MspInit+0x124>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <HAL_DAC_MspInit+0x124>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f002 fe11 	bl	8003350 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel2;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <HAL_DAC_MspInit+0x130>)
 8000732:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000736:	2229      	movs	r2, #41	; 0x29
 8000738:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800073c:	2210      	movs	r2, #16
 800073e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800074e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000752:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800075e:	2220      	movs	r2, #32
 8000760:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800076a:	f002 fc37 	bl	8002fdc <HAL_DMA_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_DAC_MspInit+0x10c>
      Error_Handler();
 8000774:	f000 fa2c 	bl	8000bd0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	50000800 	.word	0x50000800
 8000790:	40021000 	.word	0x40021000
 8000794:	50000c00 	.word	0x50000c00
 8000798:	200001bc 	.word	0x200001bc
 800079c:	4002001c 	.word	0x4002001c

080007a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_DMA_Init+0x60>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_DMA_Init+0x60>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_DMA_Init+0x60>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DMA_Init+0x60>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_DMA_Init+0x60>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DMA_Init+0x60>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200b      	movs	r0, #11
 80007dc:	f002 f949 	bl	8002a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	200b      	movs	r0, #11
 80007e2:	f002 f960 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	200c      	movs	r0, #12
 80007ec:	f002 f941 	bl	8002a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007f0:	200c      	movs	r0, #12
 80007f2:	f002 f958 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <update_dc_bias_sweep+0x88>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d006      	beq.n	800081e <update_dc_bias_sweep+0x1a>
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800081a:	801a      	strh	r2, [r3, #0]
 800081c:	e005      	b.n	800082a <update_dc_bias_sweep+0x26>
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	3b01      	subs	r3, #1
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000828:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <update_dc_bias_sweep+0x90>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <update_dc_bias_sweep+0x3e>
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <update_dc_bias_sweep+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e002      	b.n	8000848 <update_dc_bias_sweep+0x44>
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <update_dc_bias_sweep+0x90>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <update_dc_bias_sweep+0x52>
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <update_dc_bias_sweep+0x88>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800085e:	d302      	bcc.n	8000866 <update_dc_bias_sweep+0x62>
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <update_dc_bias_sweep+0x88>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <update_dc_bias_sweep+0x90>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	2108      	movs	r1, #8
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f002 feee 	bl	8003654 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <update_dc_bias_sweep+0x94>)
 8000882:	f002 f99f 	bl	8002bc4 <HAL_DAC_SetValue>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000
 8000890:	20000090 	.word	0x20000090
 8000894:	20000094 	.word	0x20000094
 8000898:	200001a8 	.word	0x200001a8

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a38      	ldr	r2, [pc, #224]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a32      	ldr	r2, [pc, #200]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a2c      	ldr	r2, [pc, #176]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_GPIO_Init+0xfc>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_TEST_Pin|TRIGMODE_Pin|SG2_Pin|SG1_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0138 	movw	r1, #16440	; 0x4038
 8000900:	4826      	ldr	r0, [pc, #152]	; (800099c <MX_GPIO_Init+0x100>)
 8000902:	f002 fea7 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f002 fea1 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	4822      	ldr	r0, [pc, #136]	; (80009a0 <MX_GPIO_Init+0x104>)
 8000918:	f002 fe9c 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|SG2_Pin|SG1_Pin;
 800091c:	f244 0330 	movw	r3, #16432	; 0x4030
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4819      	ldr	r0, [pc, #100]	; (800099c <MX_GPIO_Init+0x100>)
 8000936:	f002 fd0b 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 800093a:	2308      	movs	r3, #8
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000942:	2302      	movs	r3, #2
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_GPIO_Init+0x100>)
 8000952:	f002 fcfd 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000956:	2308      	movs	r3, #8
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f002 fcee 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 8000974:	2301      	movs	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x104>)
 800098c:	f002 fce0 	bl	8003350 <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	48000800 	.word	0x48000800
 80009a0:	48000400 	.word	0x48000400

080009a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d013      	beq.n	80009e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00b      	beq.n	80009e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009cc:	e000      	b.n	80009d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f9      	beq.n	80009ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e009      	b.n	8000a1c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffc7 	bl	80009a4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf1      	blt.n	8000a08 <_write+0x16>
  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a34:	f000 fb6f 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a38:	f000 f860 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3c:	f7ff ff2e 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a40:	f7ff feae 	bl	80007a0 <MX_DMA_Init>
  MX_DAC1_Init();
 8000a44:	f7ff fd7a 	bl	800053c <MX_DAC1_Init>
  MX_TIM6_Init();
 8000a48:	f000 fa68 	bl	8000f1c <MX_TIM6_Init>
  MX_DAC2_Init();
 8000a4c:	f7ff fdca 	bl	80005e4 <MX_DAC2_Init>
  MX_ADC1_Init();
 8000a50:	f7ff fc36 	bl	80002c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000a54:	f7ff fd18 	bl	8000488 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000a58:	f000 f9f6 	bl	8000e48 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000a5c:	f000 fa94 	bl	8000f88 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000a60:	2100      	movs	r1, #0
 8000a62:	481f      	ldr	r0, [pc, #124]	; (8000ae0 <main+0xb0>)
 8000a64:	f002 f85b 	bl	8002b1e <HAL_DAC_Start>
  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000a68:	2110      	movs	r1, #16
 8000a6a:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <main+0xb0>)
 8000a6c:	f002 f857 	bl	8002b1e <HAL_DAC_Start>
  // auxilliary signal sync output (external)
  HAL_DAC_Start(&hdac2, DAC2_CHANNEL_1);
 8000a70:	2100      	movs	r1, #0
 8000a72:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <main+0xb4>)
 8000a74:	f002 f853 	bl	8002b1e <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim6);
 8000a78:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <main+0xb8>)
 8000a7a:	f003 fe6d 	bl	8004758 <HAL_TIM_Base_Start>

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2108      	movs	r1, #8
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f002 fde5 	bl	8003654 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <main+0xbc>)
 8000a90:	f002 fde0 	bl	8003654 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2120      	movs	r1, #32
 8000a98:	4815      	ldr	r0, [pc, #84]	; (8000af0 <main+0xc0>)
 8000a9a:	f002 fddb 	bl	8003654 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <main+0xc0>)
 8000aa4:	f002 fdd6 	bl	8003654 <HAL_GPIO_WritePin>


  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <main+0xc4>)
 8000aaa:	f003 fe83 	bl	80047b4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
#else
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <main+0xc0>)
 8000ab4:	f002 fdce 	bl	8003654 <HAL_GPIO_WritePin>

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac2:	f023 0307 	bic.w	r3, r3, #7
 8000ac6:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad2:	f043 0305 	orr.w	r3, r3, #5
 8000ad6:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

  HAL_TIM_Base_Start_IT(&htim2);
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <main+0xc8>)
 8000ada:	f003 fe6b 	bl	80047b4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0xae>
 8000ae0:	200001a8 	.word	0x200001a8
 8000ae4:	20000194 	.word	0x20000194
 8000ae8:	2000026c 	.word	0x2000026c
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48000800 	.word	0x48000800
 8000af4:	20000220 	.word	0x20000220
 8000af8:	200002b8 	.word	0x200002b8

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0a8      	sub	sp, #160	; 0xa0
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b06:	2238      	movs	r2, #56	; 0x38
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fc72 	bl	80053f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2254      	movs	r2, #84	; 0x54
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 fc64 	bl	80053f4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b30:	f002 fdc2 	bl	80036b8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b54:	2308      	movs	r3, #8
 8000b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fe45 	bl	8003800 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b7c:	f000 f828 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	230f      	movs	r3, #15
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2303      	movs	r3, #3
 8000b86:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 f948 	bl	8003e30 <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ba6:	f000 f813 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bb0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 fb29 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bc4:	f000 f804 	bl	8000bd0 <Error_Handler>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	37a0      	adds	r7, #160	; 0xa0
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6093      	str	r3, [r2, #8]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40007000 	.word	0x40007000

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6613      	str	r3, [r2, #96]	; 0x60
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x44>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000c36:	f7ff ffd3 	bl	8000be0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 fa8e 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	printf("Test\n");
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <DMA1_Channel1_IRQHandler+0x20>)
 8000caa:	f004 fc1f 	bl	80054ec <puts>
	printf("%lu\n", trigger_input[0]);
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <DMA1_Channel1_IRQHandler+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <DMA1_Channel1_IRQHandler+0x28>)
 8000cb6:	f004 fba5 	bl	8005404 <iprintf>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <DMA1_Channel1_IRQHandler+0x2c>)
 8000cbc:	f002 fa36 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	080062ac 	.word	0x080062ac
 8000cc8:	2000021c 	.word	0x2000021c
 8000ccc:	080062b4 	.word	0x080062b4
 8000cd0:	20000110 	.word	0x20000110

08000cd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Channel2_IRQHandler+0x10>)
 8000cda:	f002 fa27 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001bc 	.word	0x200001bc

08000ce8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8000cec:	f7ff fd8a 	bl	8000804 <update_dc_bias_sweep>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000cf2:	f003 fd95 	bl	8004820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000220 	.word	0x20000220

08000d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000d04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <TIM2_IRQHandler+0x18>)
 8000d0a:	f002 fcbb 	bl	8003684 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <TIM2_IRQHandler+0x1c>)
 8000d10:	f003 fd86 	bl	8004820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	200002b8 	.word	0x200002b8

08000d20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e00a      	b.n	8000d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d32:	f3af 8000 	nop.w
 8000d36:	4601      	mov	r1, r0
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf0      	blt.n	8000d32 <_read+0x12>
	}

return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x50>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x16>
		heap_end = &end;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <_sbrk+0x50>)
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <_sbrk+0x54>)
 8000dd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <_sbrk+0x50>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <_sbrk+0x50>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	466a      	mov	r2, sp
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d907      	bls.n	8000dfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000dee:	f004 fad7 	bl	80053a0 <__errno>
 8000df2:	4602      	mov	r2, r0
 8000df4:	230c      	movs	r3, #12
 8000df6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfc:	e006      	b.n	8000e0c <_sbrk+0x48>
	}

	heap_end += incr;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <_sbrk+0x50>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <_sbrk+0x50>)
 8000e08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000098 	.word	0x20000098
 8000e18:	20000310 	.word	0x20000310

08000e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <SystemInit+0x28>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <SystemInit+0x28>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SystemInit+0x28>)
 8000e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e36:	609a      	str	r2, [r3, #8]
#endif
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000e78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000e80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea0:	481d      	ldr	r0, [pc, #116]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000ea2:	f003 fc01 	bl	80046a8 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000eac:	f7ff fe90 	bl	8000bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4816      	ldr	r0, [pc, #88]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000ebe:	f003 fe2f 	bl	8004b20 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ec8:	f7ff fe82 	bl	8000bd0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ed0:	2350      	movs	r3, #80	; 0x50
 8000ed2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000ee4:	f003 ff0c 	bl	8004d00 <HAL_TIM_SlaveConfigSynchro>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000eee:	f7ff fe6f 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_TIM2_Init+0xd0>)
 8000f00:	f004 f972 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000f0a:	f7ff fe61 	bl	8000bd0 <Error_Handler>
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002b8 	.word	0x200002b8

08000f1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_TIM6_Init+0x64>)
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <MX_TIM6_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_TIM6_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_TIM6_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_TIM6_Init+0x64>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_TIM6_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_TIM6_Init+0x64>)
 8000f4c:	f003 fbac 	bl	80046a8 <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f56:	f7ff fe3b 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <MX_TIM6_Init+0x64>)
 8000f68:	f004 f93e 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f72:	f7ff fe2d 	bl	8000bd0 <Error_Handler>
  }

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000026c 	.word	0x2000026c
 8000f84:	40001000 	.word	0x40001000

08000f88 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <MX_TIM17_Init+0x48>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000f94:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f98:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 8;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_TIM17_Init+0x44>)
 8000fba:	f003 fb75 	bl	80046a8 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000fc4:	f7ff fe04 	bl	8000bd0 <Error_Handler>
  }

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000220 	.word	0x20000220
 8000fd0:	40014800 	.word	0x40014800

08000fd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d131      	bne.n	800105a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001036:	2301      	movs	r3, #1
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f002 f984 	bl	8003350 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	201c      	movs	r0, #28
 800104e:	f001 fd10 	bl	8002a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001052:	201c      	movs	r0, #28
 8001054:	f001 fd27 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001058:	e02a      	b.n	80010b0 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM6)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_TIM_Base_MspInit+0xe8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d10c      	bne.n	800107e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8001066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6593      	str	r3, [r2, #88]	; 0x58
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
}
 800107c:	e018      	b.n	80010b0 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM17)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_TIM_Base_MspInit+0xec>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d113      	bne.n	80010b0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 800108e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001092:	6613      	str	r3, [r2, #96]	; 0x60
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_TIM_Base_MspInit+0xe4>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	201a      	movs	r0, #26
 80010a6:	f001 fce4 	bl	8002a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010aa:	201a      	movs	r0, #26
 80010ac:	f001 fcfb 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 80010b0:	bf00      	nop
 80010b2:	3730      	adds	r7, #48	; 0x30
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40001000 	.word	0x40001000
 80010c0:	40014800 	.word	0x40014800

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ee:	f7ff fe95 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f004 f95b 	bl	80053ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff fc9b 	bl	8000a30 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001108:	0800636c 	.word	0x0800636c
  ldr r2, =_sbss
 800110c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001110:	2000030c 	.word	0x2000030c

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f001 fc9b 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f80e 	bl	8001148 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fd62 	bl	8000c00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]

}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_InitTick+0x68>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d022      	beq.n	80011a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_InitTick+0x6c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_InitTick+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001168:	fbb1 f3f3 	udiv	r3, r1, r3
 800116c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fca6 	bl	8002ac2 <HAL_SYSTICK_Config>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10f      	bne.n	800119c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d809      	bhi.n	8001196 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001182:	2200      	movs	r2, #0
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800118a:	f001 fc72 	bl	8002a72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_InitTick+0x70>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	e007      	b.n	80011a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e004      	b.n	80011a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	20000004 	.word	0x20000004
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x20>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_IncTick+0x1c>)
 80011cc:	6013      	str	r3, [r2, #0]
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000304 	.word	0x20000304
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000304 	.word	0x20000304

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001210:	d004      	beq.n	800121c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_Delay+0x40>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4413      	add	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121c:	bf00      	nop
 800121e:	f7ff ffdf 	bl	80011e0 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	429a      	cmp	r2, r3
 800122c:	d8f7      	bhi.n	800121e <HAL_Delay+0x26>
  {
  }
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000000c 	.word	0x2000000c

0800123c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012a4:	b490      	push	{r4, r7}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3360      	adds	r3, #96	; 0x60
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <LL_ADC_SetOffset+0x40>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	4313      	orrs	r3, r2
 80012d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc90      	pop	{r4, r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	03fff000 	.word	0x03fff000

080012e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012e8:	b490      	push	{r4, r7}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3360      	adds	r3, #96	; 0x60
 80012f6:	461a      	mov	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bc90      	pop	{r4, r7}
 800130e:	4770      	bx	lr

08001310 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001310:	b490      	push	{r4, r7}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3360      	adds	r3, #96	; 0x60
 8001320:	461a      	mov	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4313      	orrs	r3, r2
 8001334:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bc90      	pop	{r4, r7}
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001340:	b490      	push	{r4, r7}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3360      	adds	r3, #96	; 0x60
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4313      	orrs	r3, r2
 8001364:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bc90      	pop	{r4, r7}
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001370:	b490      	push	{r4, r7}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3360      	adds	r3, #96	; 0x60
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bc90      	pop	{r4, r7}
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	615a      	str	r2, [r3, #20]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013c6:	b490      	push	{r4, r7}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3330      	adds	r3, #48	; 0x30
 80013d6:	461a      	mov	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	4413      	add	r3, r2
 80013e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	211f      	movs	r1, #31
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0e9b      	lsrs	r3, r3, #26
 80013fc:	f003 011f 	and.w	r1, r3, #31
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bc90      	pop	{r4, r7}
 8001416:	4770      	bx	lr

08001418 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001418:	b490      	push	{r4, r7}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3314      	adds	r3, #20
 8001428:	461a      	mov	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0e5b      	lsrs	r3, r3, #25
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0d1b      	lsrs	r3, r3, #20
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2107      	movs	r1, #7
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	401a      	ands	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	0d1b      	lsrs	r3, r3, #20
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bc90      	pop	{r4, r7}
 8001466:	4770      	bx	lr

08001468 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0318 	and.w	r3, r3, #24
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800148c:	40d9      	lsrs	r1, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	400b      	ands	r3, r1
 8001492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001496:	431a      	orrs	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	0007ffff 	.word	0x0007ffff

080014b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6093      	str	r3, [r2, #8]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e8:	d101      	bne.n	80014ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800150c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001538:	d101      	bne.n	800153e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <LL_ADC_IsEnabled+0x18>
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <LL_ADC_IsEnabled+0x1a>
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b04      	cmp	r3, #4
 8001584:	d101      	bne.n	800158a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d101      	bne.n	80015b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1ad      	b.n	8001936 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7fe fee1 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff67 	bl	80014d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff4d 	bl	80014b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff82 	bl	8001524 <LL_ADC_IsInternalRegulatorEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d113      	bne.n	800164e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff66 	bl	80014fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001630:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <HAL_ADC_Init+0x2ec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	4a9e      	ldr	r2, [pc, #632]	; (80018b0 <HAL_ADC_Init+0x2f0>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	099b      	lsrs	r3, r3, #6
 800163e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001640:	e002      	b.n	8001648 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f9      	bne.n	8001642 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff66 	bl	8001524 <LL_ADC_IsInternalRegulatorEnabled>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	f043 0210 	orr.w	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff77 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 8001684:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 8148 	bne.w	8001924 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 8144 	bne.w	8001924 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016a4:	f043 0202 	orr.w	r2, r3, #2
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff4b 	bl	800154c <LL_ADC_IsEnabled>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d141      	bne.n	8001740 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c4:	d004      	beq.n	80016d0 <HAL_ADC_Init+0x110>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <HAL_ADC_Init+0x2f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d10f      	bne.n	80016f0 <HAL_ADC_Init+0x130>
 80016d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80016d4:	f7ff ff3a 	bl	800154c <LL_ADC_IsEnabled>
 80016d8:	4604      	mov	r4, r0
 80016da:	4876      	ldr	r0, [pc, #472]	; (80018b4 <HAL_ADC_Init+0x2f4>)
 80016dc:	f7ff ff36 	bl	800154c <LL_ADC_IsEnabled>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4323      	orrs	r3, r4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	e012      	b.n	8001716 <HAL_ADC_Init+0x156>
 80016f0:	4871      	ldr	r0, [pc, #452]	; (80018b8 <HAL_ADC_Init+0x2f8>)
 80016f2:	f7ff ff2b 	bl	800154c <LL_ADC_IsEnabled>
 80016f6:	4604      	mov	r4, r0
 80016f8:	4870      	ldr	r0, [pc, #448]	; (80018bc <HAL_ADC_Init+0x2fc>)
 80016fa:	f7ff ff27 	bl	800154c <LL_ADC_IsEnabled>
 80016fe:	4603      	mov	r3, r0
 8001700:	431c      	orrs	r4, r3
 8001702:	486f      	ldr	r0, [pc, #444]	; (80018c0 <HAL_ADC_Init+0x300>)
 8001704:	f7ff ff22 	bl	800154c <LL_ADC_IsEnabled>
 8001708:	4603      	mov	r3, r0
 800170a:	4323      	orrs	r3, r4
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d012      	beq.n	8001740 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001722:	d004      	beq.n	800172e <HAL_ADC_Init+0x16e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <HAL_ADC_Init+0x2f4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Init+0x172>
 800172e:	4a65      	ldr	r2, [pc, #404]	; (80018c4 <HAL_ADC_Init+0x304>)
 8001730:	e000      	b.n	8001734 <HAL_ADC_Init+0x174>
 8001732:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <HAL_ADC_Init+0x308>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4619      	mov	r1, r3
 800173a:	4610      	mov	r0, r2
 800173c:	f7ff fd7e 	bl	800123c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7f5b      	ldrb	r3, [r3, #29]
 8001744:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800174a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001750:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001756:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800176a:	2b01      	cmp	r3, #1
 800176c:	d106      	bne.n	800177c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	045b      	lsls	r3, r3, #17
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_ADC_Init+0x30c>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	69b9      	ldr	r1, [r7, #24]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fed3 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 80017cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fee0 	bl	8001598 <LL_ADC_INJ_IsConversionOngoing>
 80017d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d17f      	bne.n	80018e0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d17c      	bne.n	80018e0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001802:	f023 0302 	bic.w	r3, r3, #2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	430b      	orrs	r3, r1
 800180e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001826:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001830:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6911      	ldr	r1, [r2, #16]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	430b      	orrs	r3, r1
 8001842:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001846:	e013      	b.n	8001870 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001856:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800186c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001876:	2b01      	cmp	r3, #1
 8001878:	d12a      	bne.n	80018d0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800189c:	430a      	orrs	r2, r1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	e019      	b.n	80018e0 <HAL_ADC_Init+0x320>
 80018ac:	20000004 	.word	0x20000004
 80018b0:	053e2d63 	.word	0x053e2d63
 80018b4:	50000100 	.word	0x50000100
 80018b8:	50000400 	.word	0x50000400
 80018bc:	50000500 	.word	0x50000500
 80018c0:	50000600 	.word	0x50000600
 80018c4:	50000300 	.word	0x50000300
 80018c8:	50000700 	.word	0x50000700
 80018cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d10c      	bne.n	8001902 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f023 010f 	bic.w	r1, r3, #15
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	1e5a      	subs	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001900:	e007      	b.n	8001912 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 020f 	bic.w	r2, r2, #15
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
 8001922:	e007      	b.n	8001934 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	f043 0210 	orr.w	r2, r3, #16
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001934:	7ffb      	ldrb	r3, [r7, #31]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop

08001940 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0a6      	sub	sp, #152	; 0x98
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x22>
 800195e:	2302      	movs	r3, #2
 8001960:	e38e      	b.n	8002080 <HAL_ADC_ConfigChannel+0x740>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fdff 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 836f 	bne.w	800205a <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	f7ff fd1c 	bl	80013c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fded 	bl	8001572 <LL_ADC_REG_IsConversionOngoing>
 8001998:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fdf9 	bl	8001598 <LL_ADC_INJ_IsConversionOngoing>
 80019a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 817b 	bne.w	8001caa <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 8176 	bne.w	8001caa <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019c6:	d10f      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff fd20 	bl	8001418 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fcdd 	bl	80013a0 <LL_ADC_SetSamplingTimeCommonConfig>
 80019e6:	e00e      	b.n	8001a06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6819      	ldr	r1, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f7ff fd0f 	bl	8001418 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fccd 	bl	80013a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d022      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6919      	ldr	r1, [r3, #16]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a38:	f7ff fc34 	bl	80012a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6919      	ldr	r1, [r3, #16]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f7ff fc79 	bl	8001340 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6919      	ldr	r1, [r3, #16]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	7f1b      	ldrb	r3, [r3, #28]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d102      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x124>
 8001a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x126>
 8001a64:	2300      	movs	r3, #0
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7ff fc82 	bl	8001370 <LL_ADC_SetOffsetSaturation>
 8001a6c:	e11d      	b.n	8001caa <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc37 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x15a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc2c 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	e012      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x180>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fc21 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x198>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	e00a      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1ae>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d106      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc08 	bl	8001310 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fbee 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10a      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x1ec>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fbe3 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	0e9b      	lsrs	r3, r3, #26
 8001b26:	f003 021f 	and.w	r2, r3, #31
 8001b2a:	e010      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x20e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fbd8 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x226>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	e00a      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x23c>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d106      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fbc1 	bl	8001310 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2102      	movs	r1, #2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fba7 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x27a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fb9c 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	e010      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x29c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fb91 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x2b4>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	e00a      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x2ca>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d106      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2200      	movs	r2, #0
 8001c14:	2102      	movs	r1, #2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fb7a 	bl	8001310 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2103      	movs	r1, #3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fb60 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x308>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2103      	movs	r1, #3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fb55 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	f003 021f 	and.w	r2, r3, #31
 8001c46:	e010      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x32a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fb4a 	bl	80012e8 <LL_ADC_GetOffsetChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x342>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0e9b      	lsrs	r3, r3, #26
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	e00a      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x358>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fb33 	bl	8001310 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fc4c 	bl	800154c <LL_ADC_IsEnabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 810c 	bne.w	8001ed4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6819      	ldr	r1, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f7ff fbcd 	bl	8001468 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	4aaf      	ldr	r2, [pc, #700]	; (8001f90 <HAL_ADC_ConfigChannel+0x650>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	f040 80fd 	bne.w	8001ed4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10b      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x3c2>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0e9b      	lsrs	r3, r3, #26
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2b09      	cmp	r3, #9
 8001cf8:	bf94      	ite	ls
 8001cfa:	2301      	movls	r3, #1
 8001cfc:	2300      	movhi	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	e012      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x3e8>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	bf94      	ite	ls
 8001d22:	2301      	movls	r3, #1
 8001d24:	2300      	movhi	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d064      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d107      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x408>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	3301      	adds	r3, #1
 8001d40:	069b      	lsls	r3, r3, #26
 8001d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d46:	e00e      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x426>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	069b      	lsls	r3, r3, #26
 8001d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x446>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	e010      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x468>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	ea42 0103 	orr.w	r1, r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x48e>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	051b      	lsls	r3, r3, #20
 8001dcc:	e011      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x4b2>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	3301      	adds	r3, #1
 8001de6:	f003 021f 	and.w	r2, r3, #31
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df2:	430b      	orrs	r3, r1
 8001df4:	e069      	b.n	8001eca <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x4d2>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0e9b      	lsrs	r3, r3, #26
 8001e08:	3301      	adds	r3, #1
 8001e0a:	069b      	lsls	r3, r3, #26
 8001e0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e10:	e00e      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x4f0>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x510>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	e010      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x532>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	617b      	str	r3, [r7, #20]
  return result;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x55e>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0e9b      	lsrs	r3, r3, #26
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f003 021f 	and.w	r2, r3, #31
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	3b1e      	subs	r3, #30
 8001e96:	051b      	lsls	r3, r3, #20
 8001e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	e014      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x588>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	60fb      	str	r3, [r7, #12]
  return result;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f003 021f 	and.w	r2, r3, #31
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b1e      	subs	r3, #30
 8001ec2:	051b      	lsls	r3, r3, #20
 8001ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	6892      	ldr	r2, [r2, #8]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7ff faa2 	bl	8001418 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_ADC_ConfigChannel+0x654>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80c9 	beq.w	8002074 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eea:	d004      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x5b6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_ADC_ConfigChannel+0x658>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x5ba>
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_ADC_ConfigChannel+0x65c>)
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_ConfigChannel+0x5bc>
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_ADC_ConfigChannel+0x660>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f9c3 	bl	8001288 <LL_ADC_GetCommonPathInternalCh>
 8001f02:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <HAL_ADC_ConfigChannel+0x664>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_ADC_ConfigChannel+0x5da>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_ADC_ConfigChannel+0x668>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d14e      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d148      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f2e:	d005      	beq.n	8001f3c <HAL_ADC_ConfigChannel+0x5fc>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_ADC_ConfigChannel+0x66c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	f040 8099 	bne.w	800206e <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f44:	d004      	beq.n	8001f50 <HAL_ADC_ConfigChannel+0x610>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_ADC_ConfigChannel+0x658>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x614>
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_ADC_ConfigChannel+0x65c>)
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x616>
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_ADC_ConfigChannel+0x660>)
 8001f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4610      	mov	r0, r2
 8001f62:	f7ff f97e 	bl	8001262 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_ADC_ConfigChannel+0x670>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	099b      	lsrs	r3, r3, #6
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_ADC_ConfigChannel+0x674>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	099a      	lsrs	r2, r3, #6
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f7e:	e002      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f9      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f8c:	e06f      	b.n	800206e <HAL_ADC_ConfigChannel+0x72e>
 8001f8e:	bf00      	nop
 8001f90:	407f0000 	.word	0x407f0000
 8001f94:	80080000 	.word	0x80080000
 8001f98:	50000100 	.word	0x50000100
 8001f9c:	50000300 	.word	0x50000300
 8001fa0:	50000700 	.word	0x50000700
 8001fa4:	c3210000 	.word	0xc3210000
 8001fa8:	90c00010 	.word	0x90c00010
 8001fac:	50000600 	.word	0x50000600
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a32      	ldr	r2, [pc, #200]	; (8002088 <HAL_ADC_ConfigChannel+0x748>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d125      	bne.n	800200e <HAL_ADC_ConfigChannel+0x6ce>
 8001fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d11f      	bne.n	800200e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2e      	ldr	r2, [pc, #184]	; (800208c <HAL_ADC_ConfigChannel+0x74c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d104      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x6a2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	; (8002090 <HAL_ADC_ConfigChannel+0x750>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d047      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x6b6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_ADC_ConfigChannel+0x74c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x6ba>
 8001ff6:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_ADC_ConfigChannel+0x754>)
 8001ff8:	e000      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x6bc>
 8001ffa:	4a27      	ldr	r2, [pc, #156]	; (8002098 <HAL_ADC_ConfigChannel+0x758>)
 8001ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f7ff f92b 	bl	8001262 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800200c:	e031      	b.n	8002072 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_ADC_ConfigChannel+0x75c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d12d      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800201c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d127      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_ADC_ConfigChannel+0x74c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d022      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002036:	d004      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x702>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_ADC_ConfigChannel+0x74c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x706>
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_ADC_ConfigChannel+0x754>)
 8002044:	e000      	b.n	8002048 <HAL_ADC_ConfigChannel+0x708>
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_ADC_ConfigChannel+0x758>)
 8002048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800204c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002050:	4619      	mov	r1, r3
 8002052:	4610      	mov	r0, r2
 8002054:	f7ff f905 	bl	8001262 <LL_ADC_SetCommonPathInternalCh>
 8002058:	e00c      	b.n	8002074 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800206c:	e002      	b.n	8002074 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800206e:	bf00      	nop
 8002070:	e000      	b.n	8002074 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002072:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800207c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002080:	4618      	mov	r0, r3
 8002082:	3798      	adds	r7, #152	; 0x98
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	c7520000 	.word	0xc7520000
 800208c:	50000100 	.word	0x50000100
 8002090:	50000500 	.word	0x50000500
 8002094:	50000300 	.word	0x50000300
 8002098:	50000700 	.word	0x50000700
 800209c:	cb840000 	.word	0xcb840000

080020a0 <LL_ADC_IsEnabled>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_IsEnabled+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_IsEnabled+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d101      	bne.n	80020de <LL_ADC_REG_IsConversionOngoing+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b0a1      	sub	sp, #132	; 0x84
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002106:	2302      	movs	r3, #2
 8002108:	e0e3      	b.n	80022d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211a:	d102      	bne.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800211c:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	e009      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6e      	ldr	r2, [pc, #440]	; (80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d102      	bne.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800212c:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	e001      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0be      	b.n	80022d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ffb5 	bl	80020c6 <LL_ADC_REG_IsConversionOngoing>
 800215c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ffaf 	bl	80020c6 <LL_ADC_REG_IsConversionOngoing>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 80a0 	bne.w	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 809c 	bne.w	80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002180:	d004      	beq.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a55      	ldr	r2, [pc, #340]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800218c:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800218e:	e000      	b.n	8002192 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002190:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002192:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d04b      	beq.n	8002234 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800219c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021ae:	035b      	lsls	r3, r3, #13
 80021b0:	430b      	orrs	r3, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c0:	d004      	beq.n	80021cc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a45      	ldr	r2, [pc, #276]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d10f      	bne.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80021cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021d0:	f7ff ff66 	bl	80020a0 <LL_ADC_IsEnabled>
 80021d4:	4604      	mov	r4, r0
 80021d6:	4841      	ldr	r0, [pc, #260]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80021d8:	f7ff ff62 	bl	80020a0 <LL_ADC_IsEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	4323      	orrs	r3, r4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e012      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80021ec:	483c      	ldr	r0, [pc, #240]	; (80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80021ee:	f7ff ff57 	bl	80020a0 <LL_ADC_IsEnabled>
 80021f2:	4604      	mov	r4, r0
 80021f4:	483b      	ldr	r0, [pc, #236]	; (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80021f6:	f7ff ff53 	bl	80020a0 <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	431c      	orrs	r4, r3
 80021fe:	483c      	ldr	r0, [pc, #240]	; (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002200:	f7ff ff4e 	bl	80020a0 <LL_ADC_IsEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	4323      	orrs	r3, r4
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d056      	beq.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800221e:	f023 030f 	bic.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	6811      	ldr	r1, [r2, #0]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	6892      	ldr	r2, [r2, #8]
 800222a:	430a      	orrs	r2, r1
 800222c:	431a      	orrs	r2, r3
 800222e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002230:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002232:	e047      	b.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002248:	d004      	beq.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d10f      	bne.n	8002274 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002254:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002258:	f7ff ff22 	bl	80020a0 <LL_ADC_IsEnabled>
 800225c:	4604      	mov	r4, r0
 800225e:	481f      	ldr	r0, [pc, #124]	; (80022dc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002260:	f7ff ff1e 	bl	80020a0 <LL_ADC_IsEnabled>
 8002264:	4603      	mov	r3, r0
 8002266:	4323      	orrs	r3, r4
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e012      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002274:	481a      	ldr	r0, [pc, #104]	; (80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002276:	f7ff ff13 	bl	80020a0 <LL_ADC_IsEnabled>
 800227a:	4604      	mov	r4, r0
 800227c:	4819      	ldr	r0, [pc, #100]	; (80022e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800227e:	f7ff ff0f 	bl	80020a0 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	431c      	orrs	r4, r3
 8002286:	481a      	ldr	r0, [pc, #104]	; (80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002288:	f7ff ff0a 	bl	80020a0 <LL_ADC_IsEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	4323      	orrs	r3, r4
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d012      	beq.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800229e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022a6:	f023 030f 	bic.w	r3, r3, #15
 80022aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ae:	e009      	b.n	80022c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022c2:	e000      	b.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80022ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3784      	adds	r7, #132	; 0x84
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}
 80022da:	bf00      	nop
 80022dc:	50000100 	.word	0x50000100
 80022e0:	50000400 	.word	0x50000400
 80022e4:	50000500 	.word	0x50000500
 80022e8:	50000300 	.word	0x50000300
 80022ec:	50000700 	.word	0x50000700
 80022f0:	50000600 	.word	0x50000600

080022f4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <LL_EXTI_EnableIT_0_31+0x20>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4904      	ldr	r1, [pc, #16]	; (8002314 <LL_EXTI_EnableIT_0_31+0x20>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40010400 	.word	0x40010400

08002318 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <LL_EXTI_EnableIT_32_63+0x20>)
 8002322:	6a1a      	ldr	r2, [r3, #32]
 8002324:	4904      	ldr	r1, [pc, #16]	; (8002338 <LL_EXTI_EnableIT_32_63+0x20>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4313      	orrs	r3, r2
 800232a:	620b      	str	r3, [r1, #32]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40010400 	.word	0x40010400

0800233c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <LL_EXTI_DisableIT_0_31+0x24>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	43db      	mvns	r3, r3
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <LL_EXTI_DisableIT_0_31+0x24>)
 800234e:	4013      	ands	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010400 	.word	0x40010400

08002364 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <LL_EXTI_DisableIT_32_63+0x24>)
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	43db      	mvns	r3, r3
 8002374:	4904      	ldr	r1, [pc, #16]	; (8002388 <LL_EXTI_DisableIT_32_63+0x24>)
 8002376:	4013      	ands	r3, r2
 8002378:	620b      	str	r3, [r1, #32]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40010400 	.word	0x40010400

0800238c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4904      	ldr	r1, [pc, #16]	; (80023ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]

}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40010400 	.word	0x40010400

080023b0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80023ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023bc:	4904      	ldr	r1, [pc, #16]	; (80023d0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40010400 	.word	0x40010400

080023d4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4904      	ldr	r1, [pc, #16]	; (80023f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010400 	.word	0x40010400

080023fc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	43db      	mvns	r3, r3
 800240c:	4904      	ldr	r1, [pc, #16]	; (8002420 <LL_EXTI_DisableEvent_32_63+0x24>)
 800240e:	4013      	ands	r3, r2
 8002410:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40010400 	.word	0x40010400

08002424 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4904      	ldr	r1, [pc, #16]	; (8002444 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40010400 	.word	0x40010400

08002448 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40010400 	.word	0x40010400

0800246c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	43db      	mvns	r3, r3
 800247c:	4904      	ldr	r1, [pc, #16]	; (8002490 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800247e:	4013      	ands	r3, r2
 8002480:	608b      	str	r3, [r1, #8]

}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40010400 	.word	0x40010400

08002494 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800249e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	4904      	ldr	r1, [pc, #16]	; (80024b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	628b      	str	r3, [r1, #40]	; 0x28
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40010400 	.word	0x40010400

080024bc <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40010400 	.word	0x40010400

080024e0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ec:	4904      	ldr	r1, [pc, #16]	; (8002500 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40010400 	.word	0x40010400

08002504 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	43db      	mvns	r3, r3
 8002514:	4904      	ldr	r1, [pc, #16]	; (8002528 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002516:	4013      	ands	r3, r2
 8002518:	60cb      	str	r3, [r1, #12]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40010400 	.word	0x40010400

0800252c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	43db      	mvns	r3, r3
 800253c:	4904      	ldr	r1, [pc, #16]	; (8002550 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800253e:	4013      	ands	r3, r2
 8002540:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40010400 	.word	0x40010400

08002554 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6153      	str	r3, [r2, #20]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40010400 	.word	0x40010400

08002574 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	77fb      	strb	r3, [r7, #31]
 80025ae:	e180      	b.n	80028b2 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025be:	d102      	bne.n	80025c6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e175      	b.n	80028b2 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7f5b      	ldrb	r3, [r3, #29]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7fd ff7b 	bl	80004d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ec:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b98      	ldr	r3, [pc, #608]	; (8002874 <HAL_COMP_Init+0x2e0>)
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	6979      	ldr	r1, [r7, #20]
 800261c:	430b      	orrs	r3, r1
 800261e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d015      	beq.n	800265a <HAL_COMP_Init+0xc6>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d112      	bne.n	800265a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002634:	4b90      	ldr	r3, [pc, #576]	; (8002878 <HAL_COMP_Init+0x2e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	4a90      	ldr	r2, [pc, #576]	; (800287c <HAL_COMP_Init+0x2e8>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	099a      	lsrs	r2, r3, #6
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800264c:	e002      	b.n	8002654 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b01      	subs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a88      	ldr	r2, [pc, #544]	; (8002880 <HAL_COMP_Init+0x2ec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d028      	beq.n	80026b6 <HAL_COMP_Init+0x122>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a86      	ldr	r2, [pc, #536]	; (8002884 <HAL_COMP_Init+0x2f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d020      	beq.n	80026b0 <HAL_COMP_Init+0x11c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a85      	ldr	r2, [pc, #532]	; (8002888 <HAL_COMP_Init+0x2f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d018      	beq.n	80026aa <HAL_COMP_Init+0x116>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a83      	ldr	r2, [pc, #524]	; (800288c <HAL_COMP_Init+0x2f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d010      	beq.n	80026a4 <HAL_COMP_Init+0x110>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a82      	ldr	r2, [pc, #520]	; (8002890 <HAL_COMP_Init+0x2fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d008      	beq.n	800269e <HAL_COMP_Init+0x10a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a80      	ldr	r2, [pc, #512]	; (8002894 <HAL_COMP_Init+0x300>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_COMP_Init+0x106>
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <HAL_COMP_Init+0x126>
 800269a:	2302      	movs	r3, #2
 800269c:	e00d      	b.n	80026ba <HAL_COMP_Init+0x126>
 800269e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026a2:	e00a      	b.n	80026ba <HAL_COMP_Init+0x126>
 80026a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026a8:	e007      	b.n	80026ba <HAL_COMP_Init+0x126>
 80026aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026ae:	e004      	b.n	80026ba <HAL_COMP_Init+0x126>
 80026b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026b4:	e001      	b.n	80026ba <HAL_COMP_Init+0x126>
 80026b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026ba:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80b6 	beq.w	8002836 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d011      	beq.n	80026fa <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_COMP_Init+0x300>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_COMP_Init+0x156>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6c      	ldr	r2, [pc, #432]	; (8002898 <HAL_COMP_Init+0x304>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d103      	bne.n	80026f2 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80026ea:	6938      	ldr	r0, [r7, #16]
 80026ec:	f7ff feac 	bl	8002448 <LL_EXTI_EnableRisingTrig_32_63>
 80026f0:	e014      	b.n	800271c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80026f2:	6938      	ldr	r0, [r7, #16]
 80026f4:	f7ff fe96 	bl	8002424 <LL_EXTI_EnableRisingTrig_0_31>
 80026f8:	e010      	b.n	800271c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_COMP_Init+0x300>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_COMP_Init+0x17a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_COMP_Init+0x304>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d103      	bne.n	8002716 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800270e:	6938      	ldr	r0, [r7, #16]
 8002710:	f7ff fec0 	bl	8002494 <LL_EXTI_DisableRisingTrig_32_63>
 8002714:	e002      	b.n	800271c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002716:	6938      	ldr	r0, [r7, #16]
 8002718:	f7ff fea8 	bl	800246c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d011      	beq.n	800274c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a59      	ldr	r2, [pc, #356]	; (8002894 <HAL_COMP_Init+0x300>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_COMP_Init+0x1a8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_COMP_Init+0x304>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d103      	bne.n	8002744 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800273c:	6938      	ldr	r0, [r7, #16]
 800273e:	f7ff fecf 	bl	80024e0 <LL_EXTI_EnableFallingTrig_32_63>
 8002742:	e014      	b.n	800276e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f7ff feb9 	bl	80024bc <LL_EXTI_EnableFallingTrig_0_31>
 800274a:	e010      	b.n	800276e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_COMP_Init+0x300>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_COMP_Init+0x1cc>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a4f      	ldr	r2, [pc, #316]	; (8002898 <HAL_COMP_Init+0x304>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002760:	6938      	ldr	r0, [r7, #16]
 8002762:	f7ff fee3 	bl	800252c <LL_EXTI_DisableFallingTrig_32_63>
 8002766:	e002      	b.n	800276e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002768:	6938      	ldr	r0, [r7, #16]
 800276a:	f7ff fecb 	bl	8002504 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a48      	ldr	r2, [pc, #288]	; (8002894 <HAL_COMP_Init+0x300>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d004      	beq.n	8002782 <HAL_COMP_Init+0x1ee>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a46      	ldr	r2, [pc, #280]	; (8002898 <HAL_COMP_Init+0x304>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d103      	bne.n	800278a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002782:	6938      	ldr	r0, [r7, #16]
 8002784:	f7ff fef6 	bl	8002574 <LL_EXTI_ClearFlag_32_63>
 8002788:	e002      	b.n	8002790 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800278a:	6938      	ldr	r0, [r7, #16]
 800278c:	f7ff fee2 	bl	8002554 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d011      	beq.n	80027c0 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_COMP_Init+0x300>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_COMP_Init+0x21c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <HAL_COMP_Init+0x304>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d103      	bne.n	80027b8 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80027b0:	6938      	ldr	r0, [r7, #16]
 80027b2:	f7ff fdfd 	bl	80023b0 <LL_EXTI_EnableEvent_32_63>
 80027b6:	e014      	b.n	80027e2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80027b8:	6938      	ldr	r0, [r7, #16]
 80027ba:	f7ff fde7 	bl	800238c <LL_EXTI_EnableEvent_0_31>
 80027be:	e010      	b.n	80027e2 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a33      	ldr	r2, [pc, #204]	; (8002894 <HAL_COMP_Init+0x300>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_COMP_Init+0x240>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a32      	ldr	r2, [pc, #200]	; (8002898 <HAL_COMP_Init+0x304>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80027d4:	6938      	ldr	r0, [r7, #16]
 80027d6:	f7ff fe11 	bl	80023fc <LL_EXTI_DisableEvent_32_63>
 80027da:	e002      	b.n	80027e2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80027dc:	6938      	ldr	r0, [r7, #16]
 80027de:	f7ff fdf9 	bl	80023d4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d011      	beq.n	8002812 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a28      	ldr	r2, [pc, #160]	; (8002894 <HAL_COMP_Init+0x300>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_COMP_Init+0x26e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a26      	ldr	r2, [pc, #152]	; (8002898 <HAL_COMP_Init+0x304>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d103      	bne.n	800280a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8002802:	6938      	ldr	r0, [r7, #16]
 8002804:	f7ff fd88 	bl	8002318 <LL_EXTI_EnableIT_32_63>
 8002808:	e04b      	b.n	80028a2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800280a:	6938      	ldr	r0, [r7, #16]
 800280c:	f7ff fd72 	bl	80022f4 <LL_EXTI_EnableIT_0_31>
 8002810:	e047      	b.n	80028a2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_COMP_Init+0x300>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_COMP_Init+0x292>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_COMP_Init+0x304>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d103      	bne.n	800282e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8002826:	6938      	ldr	r0, [r7, #16]
 8002828:	f7ff fd9c 	bl	8002364 <LL_EXTI_DisableIT_32_63>
 800282c:	e039      	b.n	80028a2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800282e:	6938      	ldr	r0, [r7, #16]
 8002830:	f7ff fd84 	bl	800233c <LL_EXTI_DisableIT_0_31>
 8002834:	e035      	b.n	80028a2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_COMP_Init+0x300>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_COMP_Init+0x2b6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <HAL_COMP_Init+0x304>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d103      	bne.n	8002852 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800284a:	6938      	ldr	r0, [r7, #16]
 800284c:	f7ff fdd6 	bl	80023fc <LL_EXTI_DisableEvent_32_63>
 8002850:	e002      	b.n	8002858 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002852:	6938      	ldr	r0, [r7, #16]
 8002854:	f7ff fdbe 	bl	80023d4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_COMP_Init+0x300>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_COMP_Init+0x2d8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_COMP_Init+0x304>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d117      	bne.n	800289c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800286c:	6938      	ldr	r0, [r7, #16]
 800286e:	f7ff fd79 	bl	8002364 <LL_EXTI_DisableIT_32_63>
 8002872:	e016      	b.n	80028a2 <HAL_COMP_Init+0x30e>
 8002874:	ff007e0f 	.word	0xff007e0f
 8002878:	20000004 	.word	0x20000004
 800287c:	053e2d63 	.word	0x053e2d63
 8002880:	40010200 	.word	0x40010200
 8002884:	40010204 	.word	0x40010204
 8002888:	40010208 	.word	0x40010208
 800288c:	4001020c 	.word	0x4001020c
 8002890:	40010210 	.word	0x40010210
 8002894:	40010214 	.word	0x40010214
 8002898:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800289c:	6938      	ldr	r0, [r7, #16]
 800289e:	f7ff fd4d 	bl	800233c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7f5b      	ldrb	r3, [r3, #29]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <__NVIC_SetPriorityGrouping>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_GetPriorityGrouping>:
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_EnableIRQ>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0b      	blt.n	800294a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <__NVIC_EnableIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	; (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <NVIC_EncodePriority>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f1c3 0307 	rsb	r3, r3, #7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf28      	it	cs
 80029ce:	2304      	movcs	r3, #4
 80029d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d902      	bls.n	80029e0 <NVIC_EncodePriority+0x30>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3b03      	subs	r3, #3
 80029de:	e000      	b.n	80029e2 <NVIC_EncodePriority+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	401a      	ands	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	4313      	orrs	r3, r2
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <SysTick_Config>:
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a28:	d301      	bcc.n	8002a2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00f      	b.n	8002a4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <SysTick_Config+0x40>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a36:	210f      	movs	r1, #15
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a3c:	f7ff ff8e 	bl	800295c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SysTick_Config+0x40>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <SysTick_Config+0x40>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	e000e010 	.word	0xe000e010

08002a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff29 	bl	80028bc <__NVIC_SetPriorityGrouping>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff40 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff90 	bl	80029b0 <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5f 	bl	800295c <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff33 	bl	8002920 <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa4 	bl	8002a18 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e014      	b.n	8002b16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	791b      	ldrb	r3, [r3, #4]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fd fdb5 	bl	800066c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	795b      	ldrb	r3, [r3, #5]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_DAC_Start+0x16>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e043      	b.n	8002bbc <HAL_DAC_Start+0x9e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f7fe fb4d 	bl	80011f8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10f      	bne.n	8002b84 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d11d      	bne.n	8002bae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	e014      	b.n	8002bae <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2102      	movs	r1, #2
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d107      	bne.n	8002bae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0202 	orr.w	r2, r2, #2
 8002bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	3308      	adds	r3, #8
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e004      	b.n	8002bfe <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3314      	adds	r3, #20
 8002bfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	461a      	mov	r2, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	795b      	ldrb	r3, [r3, #5]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_DAC_ConfigChannel+0x1c>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e194      	b.n	8002f5a <HAL_DAC_ConfigChannel+0x346>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d174      	bne.n	8002d2e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d137      	bne.n	8002cba <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fac9 	bl	80011e0 <HAL_GetTick>
 8002c4e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c50:	e011      	b.n	8002c76 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c52:	f7fe fac5 	bl	80011e0 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d90a      	bls.n	8002c76 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f043 0208 	orr.w	r2, r3, #8
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e171      	b.n	8002f5a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e6      	bne.n	8002c52 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7fe fab7 	bl	80011f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
 8002c94:	e01e      	b.n	8002cd4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c96:	f7fe faa3 	bl	80011e0 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d90a      	bls.n	8002cba <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f043 0208 	orr.w	r2, r3, #8
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e14f      	b.n	8002f5a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	dbe8      	blt.n	8002c96 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7fe fa97 	bl	80011f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	ea02 0103 	and.w	r1, r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	21ff      	movs	r1, #255	; 0xff
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	ea02 0103 	and.w	r1, r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d11d      	bne.n	8002d72 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	221f      	movs	r2, #31
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	4013      	ands	r3, r2
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	4313      	orrs	r3, r2
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2207      	movs	r2, #7
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	e011      	b.n	8002dc4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002dac:	2301      	movs	r3, #1
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	e008      	b.n	8002dc4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	e001      	b.n	8002dc4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	6a3a      	ldr	r2, [r7, #32]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	4013      	ands	r3, r2
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	791b      	ldrb	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_DAC_ConfigChannel+0x1e4>
 8002df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df6:	e000      	b.n	8002dfa <HAL_DAC_ConfigChannel+0x1e6>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e12:	4013      	ands	r3, r2
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	795b      	ldrb	r3, [r3, #5]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_DAC_ConfigChannel+0x210>
 8002e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e22:	e000      	b.n	8002e26 <HAL_DAC_ConfigChannel+0x212>
 8002e24:	2300      	movs	r3, #0
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d114      	bne.n	8002e66 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e3c:	f001 f996 	bl	800416c <HAL_RCC_GetHCLKFreq>
 8002e40:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	4a47      	ldr	r2, [pc, #284]	; (8002f64 <HAL_DAC_ConfigChannel+0x350>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d904      	bls.n	8002e54 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	e00d      	b.n	8002e70 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	4a44      	ldr	r2, [pc, #272]	; (8002f68 <HAL_DAC_ConfigChannel+0x354>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d909      	bls.n	8002e70 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	e004      	b.n	8002e70 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	4313      	orrs	r3, r2
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	22c0      	movs	r2, #192	; 0xc0
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	400a      	ands	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	ea02 0103 	and.w	r1, r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	09896800 	.word	0x09896800
 8002f68:	04c4b400 	.word	0x04c4b400

08002f6c <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	795b      	ldrb	r3, [r3, #5]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e024      	b.n	8002fce <HAL_DACEx_TriangleWaveGenerate+0x62>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	ea02 0103 	and.w	r1, r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e08d      	b.n	800310a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_DMA_Init+0x138>)
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d80f      	bhi.n	800301a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b45      	ldr	r3, [pc, #276]	; (8003118 <HAL_DMA_Init+0x13c>)
 8003002:	4413      	add	r3, r2
 8003004:	4a45      	ldr	r2, [pc, #276]	; (800311c <HAL_DMA_Init+0x140>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	009a      	lsls	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a42      	ldr	r2, [pc, #264]	; (8003120 <HAL_DMA_Init+0x144>)
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
 8003018:	e00e      	b.n	8003038 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	4b40      	ldr	r3, [pc, #256]	; (8003124 <HAL_DMA_Init+0x148>)
 8003022:	4413      	add	r3, r2
 8003024:	4a3d      	ldr	r2, [pc, #244]	; (800311c <HAL_DMA_Init+0x140>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	009a      	lsls	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a3c      	ldr	r2, [pc, #240]	; (8003128 <HAL_DMA_Init+0x14c>)
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8fe 	bl	800328c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003098:	d102      	bne.n	80030a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_DMA_Init+0x104>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d80c      	bhi.n	80030e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f91e 	bl	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	e008      	b.n	80030f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40020407 	.word	0x40020407
 8003118:	bffdfff8 	.word	0xbffdfff8
 800311c:	cccccccd 	.word	0xcccccccd
 8003120:	40020000 	.word	0x40020000
 8003124:	bffdfbf8 	.word	0xbffdfbf8
 8003128:	40020400 	.word	0x40020400

0800312c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2204      	movs	r2, #4
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d026      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x7a>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d021      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2104      	movs	r1, #4
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	2b00      	cmp	r3, #0
 800319a:	d071      	beq.n	8003280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031a4:	e06c      	b.n	8003280 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2202      	movs	r2, #2
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d029      	beq.n	8003218 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 020a 	bic.w	r2, r2, #10
 80031e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 021f 	and.w	r2, r3, #31
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2102      	movs	r1, #2
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d038      	beq.n	8003280 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003216:	e033      	b.n	8003280 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2208      	movs	r2, #8
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02a      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d025      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 020e 	bic.w	r2, r2, #14
 8003244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 021f 	and.w	r2, r3, #31
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003280:	bf00      	nop
 8003282:	bf00      	nop
}
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800329c:	429a      	cmp	r2, r3
 800329e:	d802      	bhi.n	80032a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	e001      	b.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032a8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3b08      	subs	r3, #8
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2201      	movs	r2, #1
 80032e0:	409a      	lsls	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40020407 	.word	0x40020407
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020820 	.word	0x40020820
 8003300:	cccccccd 	.word	0xcccccccd
 8003304:	40020880 	.word	0x40020880

08003308 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a08      	ldr	r2, [pc, #32]	; (800334c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800332a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2201      	movs	r2, #1
 8003336:	409a      	lsls	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	1000823f 	.word	0x1000823f
 800334c:	40020940 	.word	0x40020940

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800335e:	e15a      	b.n	8003616 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 814c 	beq.w	8003610 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d00b      	beq.n	8003398 <HAL_GPIO_Init+0x48>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d007      	beq.n	8003398 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800338c:	2b11      	cmp	r3, #17
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b12      	cmp	r3, #18
 8003396:	d130      	bne.n	80033fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ce:	2201      	movs	r2, #1
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f003 0201 	and.w	r2, r3, #1
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0xea>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b12      	cmp	r3, #18
 8003438:	d123      	bne.n	8003482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	6939      	ldr	r1, [r7, #16]
 800347e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a6 	beq.w	8003610 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c4:	4b5b      	ldr	r3, [pc, #364]	; (8003634 <HAL_GPIO_Init+0x2e4>)
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	4a5a      	ldr	r2, [pc, #360]	; (8003634 <HAL_GPIO_Init+0x2e4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6613      	str	r3, [r2, #96]	; 0x60
 80034d0:	4b58      	ldr	r3, [pc, #352]	; (8003634 <HAL_GPIO_Init+0x2e4>)
 80034d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034dc:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_GPIO_Init+0x2e8>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003506:	d01f      	beq.n	8003548 <HAL_GPIO_Init+0x1f8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a4c      	ldr	r2, [pc, #304]	; (800363c <HAL_GPIO_Init+0x2ec>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d019      	beq.n	8003544 <HAL_GPIO_Init+0x1f4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a4b      	ldr	r2, [pc, #300]	; (8003640 <HAL_GPIO_Init+0x2f0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_GPIO_Init+0x1f0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a4a      	ldr	r2, [pc, #296]	; (8003644 <HAL_GPIO_Init+0x2f4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00d      	beq.n	800353c <HAL_GPIO_Init+0x1ec>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a49      	ldr	r2, [pc, #292]	; (8003648 <HAL_GPIO_Init+0x2f8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x1e8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_GPIO_Init+0x2fc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_GPIO_Init+0x1e4>
 8003530:	2305      	movs	r3, #5
 8003532:	e00a      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003534:	2306      	movs	r3, #6
 8003536:	e008      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003538:	2304      	movs	r3, #4
 800353a:	e006      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 800353c:	2303      	movs	r3, #3
 800353e:	e004      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003540:	2302      	movs	r3, #2
 8003542:	e002      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003548:	2300      	movs	r3, #0
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	f002 0203 	and.w	r2, r2, #3
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	4093      	lsls	r3, r2
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800355a:	4937      	ldr	r1, [pc, #220]	; (8003638 <HAL_GPIO_Init+0x2e8>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3302      	adds	r3, #2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003568:	4b39      	ldr	r3, [pc, #228]	; (8003650 <HAL_GPIO_Init+0x300>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800358c:	4a30      	ldr	r2, [pc, #192]	; (8003650 <HAL_GPIO_Init+0x300>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003592:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_GPIO_Init+0x300>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035b6:	4a26      	ldr	r2, [pc, #152]	; (8003650 <HAL_GPIO_Init+0x300>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <HAL_GPIO_Init+0x300>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_GPIO_Init+0x300>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035e6:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <HAL_GPIO_Init+0x300>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800360a:	4a11      	ldr	r2, [pc, #68]	; (8003650 <HAL_GPIO_Init+0x300>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f ae9d 	bne.w	8003360 <HAL_GPIO_Init+0x10>
  }
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	40010000 	.word	0x40010000
 800363c:	48000400 	.word	0x48000400
 8003640:	48000800 	.word	0x48000800
 8003644:	48000c00 	.word	0x48000c00
 8003648:	48001000 	.word	0x48001000
 800364c:	48001400 	.word	0x48001400
 8003650:	40010400 	.word	0x40010400

08003654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003670:	e002      	b.n	8003678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369c:	887a      	ldrh	r2, [r7, #2]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80036a2:	e002      	b.n	80036aa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d141      	bne.n	800374a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036c6:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d131      	bne.n	8003738 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d4:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036da:	4a46      	ldr	r2, [pc, #280]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036e4:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036ec:	4a41      	ldr	r2, [pc, #260]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036f4:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2232      	movs	r2, #50	; 0x32
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	4a3f      	ldr	r2, [pc, #252]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	0c9b      	lsrs	r3, r3, #18
 8003706:	3301      	adds	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800370a:	e002      	b.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3b01      	subs	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371e:	d102      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f2      	bne.n	800370c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003726:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d158      	bne.n	80037e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e057      	b.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003738:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373e:	4a2d      	ldr	r2, [pc, #180]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003748:	e04d      	b.n	80037e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d141      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d131      	bne.n	80037c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003760:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003766:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003778:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2232      	movs	r2, #50	; 0x32
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	0c9b      	lsrs	r3, r3, #18
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003796:	e002      	b.n	800379e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3b01      	subs	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d102      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f2      	bne.n	8003798 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d112      	bne.n	80037e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e011      	b.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037d4:	e007      	b.n	80037e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037de:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40007000 	.word	0x40007000
 80037f8:	20000004 	.word	0x20000004
 80037fc:	431bde83 	.word	0x431bde83

08003800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e308      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d075      	beq.n	800390a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	4ba3      	ldr	r3, [pc, #652]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003828:	4ba0      	ldr	r3, [pc, #640]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d102      	bne.n	800383e <HAL_RCC_OscConfig+0x3e>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d002      	beq.n	8003844 <HAL_RCC_OscConfig+0x44>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b99      	ldr	r3, [pc, #612]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05b      	beq.n	8003908 <HAL_RCC_OscConfig+0x108>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d157      	bne.n	8003908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e2e3      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x74>
 8003866:	4b91      	ldr	r3, [pc, #580]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a90      	ldr	r2, [pc, #576]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x98>
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a8a      	ldr	r2, [pc, #552]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a87      	ldr	r2, [pc, #540]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003898:	4b84      	ldr	r3, [pc, #528]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a83      	ldr	r2, [pc, #524]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a80      	ldr	r2, [pc, #512]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fc92 	bl	80011e0 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fd fc8e 	bl	80011e0 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e2a8      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d2:	4b76      	ldr	r3, [pc, #472]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0xc0>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd fc7e 	bl	80011e0 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fd fc7a 	bl	80011e0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e294      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0xe8>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d075      	beq.n	8003a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003920:	4b62      	ldr	r3, [pc, #392]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d102      	bne.n	8003936 <HAL_RCC_OscConfig+0x136>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d002      	beq.n	800393c <HAL_RCC_OscConfig+0x13c>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d11f      	bne.n	800397c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800393c:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_OscConfig+0x154>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e267      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b55      	ldr	r3, [pc, #340]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	4952      	ldr	r1, [pc, #328]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003968:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCC_OscConfig+0x2b0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd fbeb 	bl	8001148 <HAL_InitTick>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d043      	beq.n	8003a00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e253      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003984:	4b49      	ldr	r3, [pc, #292]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a48      	ldr	r2, [pc, #288]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd fc26 	bl	80011e0 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003998:	f7fd fc22 	bl	80011e0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e23c      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039aa:	4b40      	ldr	r3, [pc, #256]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	4939      	ldr	r1, [pc, #228]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
 80039ca:	e01a      	b.n	8003a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039cc:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a36      	ldr	r2, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fc02 	bl	80011e0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fd fbfe 	bl	80011e0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e218      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x1e0>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a16:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1c:	4a23      	ldr	r2, [pc, #140]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fd fbdb 	bl	80011e0 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fd fbd7 	bl	80011e0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1f1      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <HAL_RCC_OscConfig+0x22e>
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd fbbe 	bl	80011e0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fd fbba 	bl	80011e0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1d4      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ef      	bne.n	8003a68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80ab 	beq.w	8003bec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2b4>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e005      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2b6>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	20000008 	.word	0x20000008
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4baf      	ldr	r3, [pc, #700]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	4aae      	ldr	r2, [pc, #696]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac6:	4bac      	ldr	r3, [pc, #688]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad6:	4ba9      	ldr	r3, [pc, #676]	; (8003d7c <HAL_RCC_OscConfig+0x57c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae2:	4ba6      	ldr	r3, [pc, #664]	; (8003d7c <HAL_RCC_OscConfig+0x57c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4aa5      	ldr	r2, [pc, #660]	; (8003d7c <HAL_RCC_OscConfig+0x57c>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fb77 	bl	80011e0 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fd fb73 	bl	80011e0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e18d      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	4b9c      	ldr	r3, [pc, #624]	; (8003d7c <HAL_RCC_OscConfig+0x57c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_RCC_OscConfig+0x32e>
 8003b1c:	4b96      	ldr	r3, [pc, #600]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	4a95      	ldr	r2, [pc, #596]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b2c:	e024      	b.n	8003b78 <HAL_RCC_OscConfig+0x378>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d110      	bne.n	8003b58 <HAL_RCC_OscConfig+0x358>
 8003b36:	4b90      	ldr	r3, [pc, #576]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	4a8e      	ldr	r2, [pc, #568]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b46:	4b8c      	ldr	r3, [pc, #560]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	4a8a      	ldr	r2, [pc, #552]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b56:	e00f      	b.n	8003b78 <HAL_RCC_OscConfig+0x378>
 8003b58:	4b87      	ldr	r3, [pc, #540]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a86      	ldr	r2, [pc, #536]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b68:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	4a82      	ldr	r2, [pc, #520]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d016      	beq.n	8003bae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fd fb2e 	bl	80011e0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fd fb2a 	bl	80011e0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e142      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ed      	beq.n	8003b88 <HAL_RCC_OscConfig+0x388>
 8003bac:	e015      	b.n	8003bda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fd fb17 	bl	80011e0 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd fb13 	bl	80011e0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e12b      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ed      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a64      	ldr	r2, [pc, #400]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d03c      	beq.n	8003c72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c00:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c06:	4a5c      	ldr	r2, [pc, #368]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd fae6 	bl	80011e0 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c18:	f7fd fae2 	bl	80011e0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0fc      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c2a:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ef      	beq.n	8003c18 <HAL_RCC_OscConfig+0x418>
 8003c38:	e01b      	b.n	8003c72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c3a:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c40:	4a4d      	ldr	r2, [pc, #308]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fac9 	bl	80011e0 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c52:	f7fd fac5 	bl	80011e0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0df      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c64:	4b44      	ldr	r3, [pc, #272]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1ef      	bne.n	8003c52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80d3 	beq.w	8003e22 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	f000 808d 	beq.w	8003da4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d15a      	bne.n	8003d48 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a38      	ldr	r2, [pc, #224]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fa9f 	bl	80011e0 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fd fa9b 	bl	80011e0 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0b5      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc4:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCC_OscConfig+0x580>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6a11      	ldr	r1, [r2, #32]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003cde:	0212      	lsls	r2, r2, #8
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ce6:	0852      	lsrs	r2, r2, #1
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	0552      	lsls	r2, r2, #21
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf2:	0852      	lsrs	r2, r2, #1
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0652      	lsls	r2, r2, #25
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cfe:	06d2      	lsls	r2, r2, #27
 8003d00:	430a      	orrs	r2, r1
 8003d02:	491d      	ldr	r1, [pc, #116]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d14:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a17      	ldr	r2, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fa5e 	bl	80011e0 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fd fa5a 	bl	80011e0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e074      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x528>
 8003d46:	e06c      	b.n	8003e22 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <HAL_RCC_OscConfig+0x578>)
 8003d66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fa36 	bl	80011e0 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d76:	e00e      	b.n	8003d96 <HAL_RCC_OscConfig+0x596>
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd fa2c 	bl	80011e0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e046      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <HAL_RCC_OscConfig+0x62c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x584>
 8003da2:	e03e      	b.n	8003e22 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e039      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <HAL_RCC_OscConfig+0x62c>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d12c      	bne.n	8003e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d123      	bne.n	8003e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d11b      	bne.n	8003e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d113      	bne.n	8003e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	3b01      	subs	r3, #1
 8003e18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3720      	adds	r7, #32
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e11e      	b.n	8004086 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e48:	4b91      	ldr	r3, [pc, #580]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d910      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b8e      	ldr	r3, [pc, #568]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 020f 	bic.w	r2, r3, #15
 8003e5e:	498c      	ldr	r1, [pc, #560]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b8a      	ldr	r3, [pc, #552]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e106      	b.n	8004086 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d073      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d129      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8c:	4b81      	ldr	r3, [pc, #516]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0f4      	b.n	8004086 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e9c:	f000 f972 	bl	8004184 <RCC_GetSysClockFreqFromPLLSource>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <HAL_RCC_ClockConfig+0x268>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d93f      	bls.n	8003f2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003eaa:	4b7a      	ldr	r3, [pc, #488]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d033      	beq.n	8003f2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d12f      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eca:	4b72      	ldr	r3, [pc, #456]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed2:	4a70      	ldr	r2, [pc, #448]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e024      	b.n	8003f2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee8:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0c6      	b.n	8004086 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef8:	4b66      	ldr	r3, [pc, #408]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0be      	b.n	8004086 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f08:	f000 f8ce 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4a61      	ldr	r2, [pc, #388]	; (8004098 <HAL_RCC_ClockConfig+0x268>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d909      	bls.n	8003f2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f16:	4b5f      	ldr	r3, [pc, #380]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f1e:	4a5d      	ldr	r2, [pc, #372]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b5a      	ldr	r3, [pc, #360]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4957      	ldr	r1, [pc, #348]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fd f950 	bl	80011e0 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fd f94c 	bl	80011e0 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e095      	b.n	8004086 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d023      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f84:	4b43      	ldr	r3, [pc, #268]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a42      	ldr	r2, [pc, #264]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f9c:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fa4:	4a3b      	ldr	r2, [pc, #236]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003faa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fac:	4b39      	ldr	r3, [pc, #228]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4936      	ldr	r1, [pc, #216]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b80      	cmp	r3, #128	; 0x80
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fc6:	4b33      	ldr	r3, [pc, #204]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4a32      	ldr	r2, [pc, #200]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8003fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd2:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d21d      	bcs.n	800401c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 020f 	bic.w	r2, r3, #15
 8003fe8:	4929      	ldr	r1, [pc, #164]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd f8f6 	bl	80011e0 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fd f8f2 	bl	80011e0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e03b      	b.n	8004086 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_ClockConfig+0x260>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d1ed      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4917      	ldr	r1, [pc, #92]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490f      	ldr	r1, [pc, #60]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800405a:	f000 f825 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 800405e:	4601      	mov	r1, r0
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <HAL_RCC_ClockConfig+0x264>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	4a0c      	ldr	r2, [pc, #48]	; (800409c <HAL_RCC_ClockConfig+0x26c>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	fa21 f303 	lsr.w	r3, r1, r3
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <HAL_RCC_ClockConfig+0x270>)
 8004078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_RCC_ClockConfig+0x274>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd f862 	bl	8001148 <HAL_InitTick>
 8004084:	4603      	mov	r3, r0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000
 8004094:	40021000 	.word	0x40021000
 8004098:	04c4b400 	.word	0x04c4b400
 800409c:	080062bc 	.word	0x080062bc
 80040a0:	20000004 	.word	0x20000004
 80040a4:	20000008 	.word	0x20000008

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040ae:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d102      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040ba:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	e047      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	e03e      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80040d2:	4b23      	ldr	r3, [pc, #140]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d136      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e8:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	3301      	adds	r3, #1
 80040f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d10c      	bne.n	8004116 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040fc:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	4a16      	ldr	r2, [pc, #88]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004106:	68d2      	ldr	r2, [r2, #12]
 8004108:	0a12      	lsrs	r2, r2, #8
 800410a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	617b      	str	r3, [r7, #20]
      break;
 8004114:	e00c      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004116:	4a13      	ldr	r2, [pc, #76]	; (8004164 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004120:	68d2      	ldr	r2, [r2, #12]
 8004122:	0a12      	lsrs	r2, r2, #8
 8004124:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
      break;
 800412e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	0e5b      	lsrs	r3, r3, #25
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	3301      	adds	r3, #1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	e001      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004150:	693b      	ldr	r3, [r7, #16]
}
 8004152:	4618      	mov	r0, r3
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200

0800416c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCC_GetHCLKFreq+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000004 	.word	0x20000004

08004184 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d10c      	bne.n	80041c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041b2:	68d2      	ldr	r2, [r2, #12]
 80041b4:	0a12      	lsrs	r2, r2, #8
 80041b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	617b      	str	r3, [r7, #20]
    break;
 80041c0:	e00c      	b.n	80041dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c2:	4a12      	ldr	r2, [pc, #72]	; (800420c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041cc:	68d2      	ldr	r2, [r2, #12]
 80041ce:	0a12      	lsrs	r2, r2, #8
 80041d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
    break;
 80041da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	0e5b      	lsrs	r3, r3, #25
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	3301      	adds	r3, #1
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041f6:	687b      	ldr	r3, [r7, #4]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40021000 	.word	0x40021000
 8004208:	007a1200 	.word	0x007a1200
 800420c:	00f42400 	.word	0x00f42400

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004218:	2300      	movs	r3, #0
 800421a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800421c:	2300      	movs	r3, #0
 800421e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8098 	beq.w	800435e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b43      	ldr	r3, [pc, #268]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10d      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b40      	ldr	r3, [pc, #256]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	4a3f      	ldr	r2, [pc, #252]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	6593      	str	r3, [r2, #88]	; 0x58
 800424a:	4b3d      	ldr	r3, [pc, #244]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004256:	2301      	movs	r3, #1
 8004258:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425a:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a39      	ldr	r2, [pc, #228]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004266:	f7fc ffbb 	bl	80011e0 <HAL_GetTick>
 800426a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800426c:	e009      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fc ffb7 	bl	80011e0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d902      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	74fb      	strb	r3, [r7, #19]
        break;
 8004280:	e005      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004282:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ef      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d159      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01e      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d019      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042bc:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042cc:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042dc:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d016      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fc ff77 	bl	80011e0 <HAL_GetTick>
 80042f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f4:	e00b      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fc ff73 	bl	80011e0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d902      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	74fb      	strb	r3, [r7, #19]
            break;
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ec      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004330:	4903      	ldr	r1, [pc, #12]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004338:	e008      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	74bb      	strb	r3, [r7, #18]
 800433e:	e005      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004340:	40021000 	.word	0x40021000
 8004344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800434c:	7c7b      	ldrb	r3, [r7, #17]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d105      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4baf      	ldr	r3, [pc, #700]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	4aae      	ldr	r2, [pc, #696]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800436a:	4ba9      	ldr	r3, [pc, #676]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f023 0203 	bic.w	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	49a5      	ldr	r1, [pc, #660]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800438c:	4ba0      	ldr	r3, [pc, #640]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f023 020c 	bic.w	r2, r3, #12
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	499d      	ldr	r1, [pc, #628]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ae:	4b98      	ldr	r3, [pc, #608]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4994      	ldr	r1, [pc, #592]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043d0:	4b8f      	ldr	r3, [pc, #572]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	498c      	ldr	r1, [pc, #560]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043f2:	4b87      	ldr	r3, [pc, #540]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	4983      	ldr	r1, [pc, #524]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004414:	4b7e      	ldr	r3, [pc, #504]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	497b      	ldr	r1, [pc, #492]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004436:	4b76      	ldr	r3, [pc, #472]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4972      	ldr	r1, [pc, #456]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004458:	4b6d      	ldr	r3, [pc, #436]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	496a      	ldr	r1, [pc, #424]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	4961      	ldr	r1, [pc, #388]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800449c:	4b5c      	ldr	r3, [pc, #368]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800449e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044a2:	f023 0203 	bic.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	4959      	ldr	r1, [pc, #356]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044be:	4b54      	ldr	r3, [pc, #336]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	4950      	ldr	r1, [pc, #320]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e0:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4948      	ldr	r1, [pc, #288]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004500:	4b43      	ldr	r3, [pc, #268]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a42      	ldr	r2, [pc, #264]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004518:	4b3d      	ldr	r3, [pc, #244]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	493a      	ldr	r1, [pc, #232]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004536:	d105      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004538:	4b35      	ldr	r3, [pc, #212]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a34      	ldr	r2, [pc, #208]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800453e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004542:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d015      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004550:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	492c      	ldr	r1, [pc, #176]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456e:	d105      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4a26      	ldr	r2, [pc, #152]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d015      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004588:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	491e      	ldr	r1, [pc, #120]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a6:	d105      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a18      	ldr	r2, [pc, #96]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c0:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	4910      	ldr	r1, [pc, #64]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045de:	d105      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a0a      	ldr	r2, [pc, #40]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d018      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4902      	ldr	r1, [pc, #8]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800460e:	e001      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004610:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461c:	d105      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800461e:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4a20      	ldr	r2, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004628:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d015      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004644:	4917      	ldr	r1, [pc, #92]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d105      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467c:	4909      	ldr	r1, [pc, #36]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800468c:	d105      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004698:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800469a:	7cbb      	ldrb	r3, [r7, #18]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000

080046a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e049      	b.n	800474e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc fc80 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f000 fb7e 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e019      	b.n	80047a4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_TIM_Base_Start+0x58>)
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b06      	cmp	r3, #6
 8004788:	d00b      	beq.n	80047a2 <HAL_TIM_Base_Start+0x4a>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d007      	beq.n	80047a2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	00010007 	.word	0x00010007

080047b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e021      	b.n	8004810 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	4b0c      	ldr	r3, [pc, #48]	; (800481c <HAL_TIM_Base_Start_IT+0x68>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d00b      	beq.n	800480e <HAL_TIM_Base_Start_IT+0x5a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fc:	d007      	beq.n	800480e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	00010007 	.word	0x00010007

08004820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d122      	bne.n	800487c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d11b      	bne.n	800487c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0202 	mvn.w	r2, #2
 800484c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 faa2 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa94 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 faa5 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b04      	cmp	r3, #4
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0204 	mvn.w	r2, #4
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa78 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa6a 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa7b 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d122      	bne.n	8004924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d11b      	bne.n	8004924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0208 	mvn.w	r2, #8
 80048f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2204      	movs	r2, #4
 80048fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa4e 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa40 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa51 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b10      	cmp	r3, #16
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b10      	cmp	r3, #16
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0210 	mvn.w	r2, #16
 8004948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2208      	movs	r2, #8
 800494e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa24 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa16 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa27 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10e      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d107      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0201 	mvn.w	r2, #1
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9f0 	bl	8004d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	2b80      	cmp	r3, #128	; 0x80
 80049b0:	d10e      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b80      	cmp	r3, #128	; 0x80
 80049be:	d107      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fcac 	bl	8005328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049de:	d10e      	bne.n	80049fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d107      	bne.n	80049fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fc9f 	bl	800533c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d10e      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d107      	bne.n	8004a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f9d5 	bl	8004dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d10e      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d107      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0220 	mvn.w	r2, #32
 8004a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fc5f 	bl	8005314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a64:	d10f      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a74:	d107      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fc65 	bl	8005350 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a94:	d10f      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa4:	d107      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fc57 	bl	8005364 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad4:	d107      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fc49 	bl	8005378 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004af4:	d10f      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b04:	d107      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fc3b 	bl	800538c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_ConfigClockSource+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e0d2      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x1be>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	f000 80a9 	beq.w	8004cca <HAL_TIM_ConfigClockSource+0x1aa>
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d81a      	bhi.n	8004bb4 <HAL_TIM_ConfigClockSource+0x94>
 8004b7e:	2b30      	cmp	r3, #48	; 0x30
 8004b80:	f000 809a 	beq.w	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004b84:	2b30      	cmp	r3, #48	; 0x30
 8004b86:	d809      	bhi.n	8004b9c <HAL_TIM_ConfigClockSource+0x7c>
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	f000 8095 	beq.w	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	f000 8092 	beq.w	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 808f 	beq.w	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b9a:	e097      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8004b9c:	2b50      	cmp	r3, #80	; 0x50
 8004b9e:	d05b      	beq.n	8004c58 <HAL_TIM_ConfigClockSource+0x138>
 8004ba0:	2b50      	cmp	r3, #80	; 0x50
 8004ba2:	d802      	bhi.n	8004baa <HAL_TIM_ConfigClockSource+0x8a>
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d077      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ba8:	e090      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8004baa:	2b60      	cmp	r3, #96	; 0x60
 8004bac:	d064      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0x158>
 8004bae:	2b70      	cmp	r3, #112	; 0x70
 8004bb0:	d028      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8004bb2:	e08b      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8004bb4:	4a4c      	ldr	r2, [pc, #304]	; (8004ce8 <HAL_TIM_ConfigClockSource+0x1c8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d07e      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004bba:	4a4b      	ldr	r2, [pc, #300]	; (8004ce8 <HAL_TIM_ConfigClockSource+0x1c8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d810      	bhi.n	8004be2 <HAL_TIM_ConfigClockSource+0xc2>
 8004bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc4:	d078      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bca:	d803      	bhi.n	8004bd4 <HAL_TIM_ConfigClockSource+0xb4>
 8004bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd0:	d02f      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8004bd2:	e07b      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8004bd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004bd8:	d06e      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004bda:	4a44      	ldr	r2, [pc, #272]	; (8004cec <HAL_TIM_ConfigClockSource+0x1cc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d06b      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8004be0:	e074      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8004be2:	4a43      	ldr	r2, [pc, #268]	; (8004cf0 <HAL_TIM_ConfigClockSource+0x1d0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d067      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004be8:	4a41      	ldr	r2, [pc, #260]	; (8004cf0 <HAL_TIM_ConfigClockSource+0x1d0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d803      	bhi.n	8004bf6 <HAL_TIM_ConfigClockSource+0xd6>
 8004bee:	4a41      	ldr	r2, [pc, #260]	; (8004cf4 <HAL_TIM_ConfigClockSource+0x1d4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d061      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8004bf4:	e06a      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8004bf6:	4a40      	ldr	r2, [pc, #256]	; (8004cf8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d05d      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <HAL_TIM_ConfigClockSource+0x1dc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d05a      	beq.n	8004cb8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8004c02:	e063      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	6899      	ldr	r1, [r3, #8]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f000 fac8 	bl	80051a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]
      break;
 8004c30:	e04c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6899      	ldr	r1, [r3, #8]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f000 fab1 	bl	80051a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c54:	609a      	str	r2, [r3, #8]
      break;
 8004c56:	e039      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	461a      	mov	r2, r3
 8004c66:	f000 fa23 	bl	80050b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2150      	movs	r1, #80	; 0x50
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fa7c 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004c76:	e029      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6859      	ldr	r1, [r3, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f000 fa42 	bl	800510e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2160      	movs	r1, #96	; 0x60
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fa6c 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004c96:	e019      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6859      	ldr	r1, [r3, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f000 fa03 	bl	80050b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2140      	movs	r1, #64	; 0x40
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fa5c 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004cb6:	e009      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f000 fa53 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e000      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8004cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	00100030 	.word	0x00100030
 8004cec:	00100020 	.word	0x00100020
 8004cf0:	00100050 	.word	0x00100050
 8004cf4:	00100040 	.word	0x00100040
 8004cf8:	00100060 	.word	0x00100060
 8004cfc:	00100070 	.word	0x00100070

08004d00 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e031      	b.n	8004d7c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f904 	bl	8004f38 <TIM_SlaveTimer_SetConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e018      	b.n	8004d7c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d58:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d68:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a46      	ldr	r2, [pc, #280]	; (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d017      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d013      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a43      	ldr	r2, [pc, #268]	; (8004f18 <TIM_Base_SetConfig+0x130>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a42      	ldr	r2, [pc, #264]	; (8004f1c <TIM_Base_SetConfig+0x134>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a41      	ldr	r2, [pc, #260]	; (8004f20 <TIM_Base_SetConfig+0x138>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <TIM_Base_SetConfig+0x140>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a33      	ldr	r2, [pc, #204]	; (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d023      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d01f      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a30      	ldr	r2, [pc, #192]	; (8004f18 <TIM_Base_SetConfig+0x130>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01b      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	; (8004f1c <TIM_Base_SetConfig+0x134>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d017      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2e      	ldr	r2, [pc, #184]	; (8004f20 <TIM_Base_SetConfig+0x138>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00f      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2d      	ldr	r2, [pc, #180]	; (8004f2c <TIM_Base_SetConfig+0x144>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2c      	ldr	r2, [pc, #176]	; (8004f30 <TIM_Base_SetConfig+0x148>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <TIM_Base_SetConfig+0x14c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0x140>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d108      	bne.n	8004ea4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <TIM_Base_SetConfig+0x12c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <TIM_Base_SetConfig+0x13c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <TIM_Base_SetConfig+0x144>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <TIM_Base_SetConfig+0x148>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <TIM_Base_SetConfig+0x14c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <TIM_Base_SetConfig+0x140>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d103      	bne.n	8004f00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	615a      	str	r2, [r3, #20]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40000c00 	.word	0x40000c00
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40015000 	.word	0x40015000
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800

08004f38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f66:	f023 0307 	bic.w	r3, r3, #7
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b70      	cmp	r3, #112	; 0x70
 8004f84:	d034      	beq.n	8004ff0 <TIM_SlaveTimer_SetConfig+0xb8>
 8004f86:	2b70      	cmp	r3, #112	; 0x70
 8004f88:	d811      	bhi.n	8004fae <TIM_SlaveTimer_SetConfig+0x76>
 8004f8a:	2b30      	cmp	r3, #48	; 0x30
 8004f8c:	d07d      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004f8e:	2b30      	cmp	r3, #48	; 0x30
 8004f90:	d806      	bhi.n	8004fa0 <TIM_SlaveTimer_SetConfig+0x68>
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d079      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d077      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d075      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8004f9e:	e075      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8004fa0:	2b50      	cmp	r3, #80	; 0x50
 8004fa2:	d05e      	beq.n	8005062 <TIM_SlaveTimer_SetConfig+0x12a>
 8004fa4:	2b60      	cmp	r3, #96	; 0x60
 8004fa6:	d066      	beq.n	8005076 <TIM_SlaveTimer_SetConfig+0x13e>
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d02c      	beq.n	8005006 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8004fac:	e06e      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8004fae:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <TIM_SlaveTimer_SetConfig+0x160>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d06a      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004fb4:	4a38      	ldr	r2, [pc, #224]	; (8005098 <TIM_SlaveTimer_SetConfig+0x160>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d809      	bhi.n	8004fce <TIM_SlaveTimer_SetConfig+0x96>
 8004fba:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fbe:	d064      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004fc0:	4a36      	ldr	r2, [pc, #216]	; (800509c <TIM_SlaveTimer_SetConfig+0x164>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d061      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fca:	d05e      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8004fcc:	e05e      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8004fce:	4a34      	ldr	r2, [pc, #208]	; (80050a0 <TIM_SlaveTimer_SetConfig+0x168>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d05a      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004fd4:	4a32      	ldr	r2, [pc, #200]	; (80050a0 <TIM_SlaveTimer_SetConfig+0x168>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d803      	bhi.n	8004fe2 <TIM_SlaveTimer_SetConfig+0xaa>
 8004fda:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <TIM_SlaveTimer_SetConfig+0x16c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d054      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8004fe0:	e054      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8004fe2:	4a31      	ldr	r2, [pc, #196]	; (80050a8 <TIM_SlaveTimer_SetConfig+0x170>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d050      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
 8004fe8:	4a30      	ldr	r2, [pc, #192]	; (80050ac <TIM_SlaveTimer_SetConfig+0x174>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d04d      	beq.n	800508a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8004fee:	e04d      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68d9      	ldr	r1, [r3, #12]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f000 f8d2 	bl	80051a8 <TIM_ETR_SetConfig>
      break;
 8005004:	e042      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b05      	cmp	r3, #5
 800500c:	d004      	beq.n	8005018 <TIM_SlaveTimer_SetConfig+0xe0>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005016:	d101      	bne.n	800501c <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e038      	b.n	800508e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005042:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	621a      	str	r2, [r3, #32]
      break;
 8005060:	e014      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	461a      	mov	r2, r3
 8005070:	f000 f81e 	bl	80050b0 <TIM_TI1_ConfigInputStage>
      break;
 8005074:	e00a      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	461a      	mov	r2, r3
 8005084:	f000 f843 	bl	800510e <TIM_TI2_ConfigInputStage>
      break;
 8005088:	e000      	b.n	800508c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800508a:	bf00      	nop
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	00100030 	.word	0x00100030
 800509c:	00100020 	.word	0x00100020
 80050a0:	00100050 	.word	0x00100050
 80050a4:	00100040 	.word	0x00100040
 80050a8:	00100060 	.word	0x00100060
 80050ac:	00100070 	.word	0x00100070

080050b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 030a 	bic.w	r3, r3, #10
 80050ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0210 	bic.w	r2, r3, #16
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	031b      	lsls	r3, r3, #12
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800514a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	f043 0307 	orr.w	r3, r3, #7
 8005194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e074      	b.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a34      	ldr	r2, [pc, #208]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a33      	ldr	r2, [pc, #204]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a31      	ldr	r2, [pc, #196]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005244:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d01d      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1c      	ldr	r2, [pc, #112]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a11      	ldr	r2, [pc, #68]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d10c      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40013400 	.word	0x40013400
 8005300:	40015000 	.word	0x40015000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40014000 	.word	0x40014000

08005314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <__errno>:
 80053a0:	4b01      	ldr	r3, [pc, #4]	; (80053a8 <__errno+0x8>)
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000010 	.word	0x20000010

080053ac <__libc_init_array>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	4e0d      	ldr	r6, [pc, #52]	; (80053e4 <__libc_init_array+0x38>)
 80053b0:	4c0d      	ldr	r4, [pc, #52]	; (80053e8 <__libc_init_array+0x3c>)
 80053b2:	1ba4      	subs	r4, r4, r6
 80053b4:	10a4      	asrs	r4, r4, #2
 80053b6:	2500      	movs	r5, #0
 80053b8:	42a5      	cmp	r5, r4
 80053ba:	d109      	bne.n	80053d0 <__libc_init_array+0x24>
 80053bc:	4e0b      	ldr	r6, [pc, #44]	; (80053ec <__libc_init_array+0x40>)
 80053be:	4c0c      	ldr	r4, [pc, #48]	; (80053f0 <__libc_init_array+0x44>)
 80053c0:	f000 ff68 	bl	8006294 <_init>
 80053c4:	1ba4      	subs	r4, r4, r6
 80053c6:	10a4      	asrs	r4, r4, #2
 80053c8:	2500      	movs	r5, #0
 80053ca:	42a5      	cmp	r5, r4
 80053cc:	d105      	bne.n	80053da <__libc_init_array+0x2e>
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053d4:	4798      	blx	r3
 80053d6:	3501      	adds	r5, #1
 80053d8:	e7ee      	b.n	80053b8 <__libc_init_array+0xc>
 80053da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053de:	4798      	blx	r3
 80053e0:	3501      	adds	r5, #1
 80053e2:	e7f2      	b.n	80053ca <__libc_init_array+0x1e>
 80053e4:	08006364 	.word	0x08006364
 80053e8:	08006364 	.word	0x08006364
 80053ec:	08006364 	.word	0x08006364
 80053f0:	08006368 	.word	0x08006368

080053f4 <memset>:
 80053f4:	4402      	add	r2, r0
 80053f6:	4603      	mov	r3, r0
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d100      	bne.n	80053fe <memset+0xa>
 80053fc:	4770      	bx	lr
 80053fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005402:	e7f9      	b.n	80053f8 <memset+0x4>

08005404 <iprintf>:
 8005404:	b40f      	push	{r0, r1, r2, r3}
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <iprintf+0x2c>)
 8005408:	b513      	push	{r0, r1, r4, lr}
 800540a:	681c      	ldr	r4, [r3, #0]
 800540c:	b124      	cbz	r4, 8005418 <iprintf+0x14>
 800540e:	69a3      	ldr	r3, [r4, #24]
 8005410:	b913      	cbnz	r3, 8005418 <iprintf+0x14>
 8005412:	4620      	mov	r0, r4
 8005414:	f000 fa22 	bl	800585c <__sinit>
 8005418:	ab05      	add	r3, sp, #20
 800541a:	9a04      	ldr	r2, [sp, #16]
 800541c:	68a1      	ldr	r1, [r4, #8]
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	4620      	mov	r0, r4
 8005422:	f000 fbdb 	bl	8005bdc <_vfiprintf_r>
 8005426:	b002      	add	sp, #8
 8005428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800542c:	b004      	add	sp, #16
 800542e:	4770      	bx	lr
 8005430:	20000010 	.word	0x20000010

08005434 <_puts_r>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	460e      	mov	r6, r1
 8005438:	4605      	mov	r5, r0
 800543a:	b118      	cbz	r0, 8005444 <_puts_r+0x10>
 800543c:	6983      	ldr	r3, [r0, #24]
 800543e:	b90b      	cbnz	r3, 8005444 <_puts_r+0x10>
 8005440:	f000 fa0c 	bl	800585c <__sinit>
 8005444:	69ab      	ldr	r3, [r5, #24]
 8005446:	68ac      	ldr	r4, [r5, #8]
 8005448:	b913      	cbnz	r3, 8005450 <_puts_r+0x1c>
 800544a:	4628      	mov	r0, r5
 800544c:	f000 fa06 	bl	800585c <__sinit>
 8005450:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <_puts_r+0xac>)
 8005452:	429c      	cmp	r4, r3
 8005454:	d117      	bne.n	8005486 <_puts_r+0x52>
 8005456:	686c      	ldr	r4, [r5, #4]
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	071b      	lsls	r3, r3, #28
 800545c:	d51d      	bpl.n	800549a <_puts_r+0x66>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	b1db      	cbz	r3, 800549a <_puts_r+0x66>
 8005462:	3e01      	subs	r6, #1
 8005464:	68a3      	ldr	r3, [r4, #8]
 8005466:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800546a:	3b01      	subs	r3, #1
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	b9e9      	cbnz	r1, 80054ac <_puts_r+0x78>
 8005470:	2b00      	cmp	r3, #0
 8005472:	da2e      	bge.n	80054d2 <_puts_r+0x9e>
 8005474:	4622      	mov	r2, r4
 8005476:	210a      	movs	r1, #10
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f83f 	bl	80054fc <__swbuf_r>
 800547e:	3001      	adds	r0, #1
 8005480:	d011      	beq.n	80054a6 <_puts_r+0x72>
 8005482:	200a      	movs	r0, #10
 8005484:	e011      	b.n	80054aa <_puts_r+0x76>
 8005486:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <_puts_r+0xb0>)
 8005488:	429c      	cmp	r4, r3
 800548a:	d101      	bne.n	8005490 <_puts_r+0x5c>
 800548c:	68ac      	ldr	r4, [r5, #8]
 800548e:	e7e3      	b.n	8005458 <_puts_r+0x24>
 8005490:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <_puts_r+0xb4>)
 8005492:	429c      	cmp	r4, r3
 8005494:	bf08      	it	eq
 8005496:	68ec      	ldreq	r4, [r5, #12]
 8005498:	e7de      	b.n	8005458 <_puts_r+0x24>
 800549a:	4621      	mov	r1, r4
 800549c:	4628      	mov	r0, r5
 800549e:	f000 f87f 	bl	80055a0 <__swsetup_r>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d0dd      	beq.n	8005462 <_puts_r+0x2e>
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	da04      	bge.n	80054ba <_puts_r+0x86>
 80054b0:	69a2      	ldr	r2, [r4, #24]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	dc06      	bgt.n	80054c4 <_puts_r+0x90>
 80054b6:	290a      	cmp	r1, #10
 80054b8:	d004      	beq.n	80054c4 <_puts_r+0x90>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	6022      	str	r2, [r4, #0]
 80054c0:	7019      	strb	r1, [r3, #0]
 80054c2:	e7cf      	b.n	8005464 <_puts_r+0x30>
 80054c4:	4622      	mov	r2, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 f818 	bl	80054fc <__swbuf_r>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d1c9      	bne.n	8005464 <_puts_r+0x30>
 80054d0:	e7e9      	b.n	80054a6 <_puts_r+0x72>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	200a      	movs	r0, #10
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	6022      	str	r2, [r4, #0]
 80054da:	7018      	strb	r0, [r3, #0]
 80054dc:	e7e5      	b.n	80054aa <_puts_r+0x76>
 80054de:	bf00      	nop
 80054e0:	080062f0 	.word	0x080062f0
 80054e4:	08006310 	.word	0x08006310
 80054e8:	080062d0 	.word	0x080062d0

080054ec <puts>:
 80054ec:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <puts+0xc>)
 80054ee:	4601      	mov	r1, r0
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	f7ff bf9f 	b.w	8005434 <_puts_r>
 80054f6:	bf00      	nop
 80054f8:	20000010 	.word	0x20000010

080054fc <__swbuf_r>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	460e      	mov	r6, r1
 8005500:	4614      	mov	r4, r2
 8005502:	4605      	mov	r5, r0
 8005504:	b118      	cbz	r0, 800550e <__swbuf_r+0x12>
 8005506:	6983      	ldr	r3, [r0, #24]
 8005508:	b90b      	cbnz	r3, 800550e <__swbuf_r+0x12>
 800550a:	f000 f9a7 	bl	800585c <__sinit>
 800550e:	4b21      	ldr	r3, [pc, #132]	; (8005594 <__swbuf_r+0x98>)
 8005510:	429c      	cmp	r4, r3
 8005512:	d12a      	bne.n	800556a <__swbuf_r+0x6e>
 8005514:	686c      	ldr	r4, [r5, #4]
 8005516:	69a3      	ldr	r3, [r4, #24]
 8005518:	60a3      	str	r3, [r4, #8]
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	071a      	lsls	r2, r3, #28
 800551e:	d52e      	bpl.n	800557e <__swbuf_r+0x82>
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	b363      	cbz	r3, 800557e <__swbuf_r+0x82>
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	6820      	ldr	r0, [r4, #0]
 8005528:	1ac0      	subs	r0, r0, r3
 800552a:	6963      	ldr	r3, [r4, #20]
 800552c:	b2f6      	uxtb	r6, r6
 800552e:	4283      	cmp	r3, r0
 8005530:	4637      	mov	r7, r6
 8005532:	dc04      	bgt.n	800553e <__swbuf_r+0x42>
 8005534:	4621      	mov	r1, r4
 8005536:	4628      	mov	r0, r5
 8005538:	f000 f926 	bl	8005788 <_fflush_r>
 800553c:	bb28      	cbnz	r0, 800558a <__swbuf_r+0x8e>
 800553e:	68a3      	ldr	r3, [r4, #8]
 8005540:	3b01      	subs	r3, #1
 8005542:	60a3      	str	r3, [r4, #8]
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	6022      	str	r2, [r4, #0]
 800554a:	701e      	strb	r6, [r3, #0]
 800554c:	6963      	ldr	r3, [r4, #20]
 800554e:	3001      	adds	r0, #1
 8005550:	4283      	cmp	r3, r0
 8005552:	d004      	beq.n	800555e <__swbuf_r+0x62>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	07db      	lsls	r3, r3, #31
 8005558:	d519      	bpl.n	800558e <__swbuf_r+0x92>
 800555a:	2e0a      	cmp	r6, #10
 800555c:	d117      	bne.n	800558e <__swbuf_r+0x92>
 800555e:	4621      	mov	r1, r4
 8005560:	4628      	mov	r0, r5
 8005562:	f000 f911 	bl	8005788 <_fflush_r>
 8005566:	b190      	cbz	r0, 800558e <__swbuf_r+0x92>
 8005568:	e00f      	b.n	800558a <__swbuf_r+0x8e>
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <__swbuf_r+0x9c>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d101      	bne.n	8005574 <__swbuf_r+0x78>
 8005570:	68ac      	ldr	r4, [r5, #8]
 8005572:	e7d0      	b.n	8005516 <__swbuf_r+0x1a>
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <__swbuf_r+0xa0>)
 8005576:	429c      	cmp	r4, r3
 8005578:	bf08      	it	eq
 800557a:	68ec      	ldreq	r4, [r5, #12]
 800557c:	e7cb      	b.n	8005516 <__swbuf_r+0x1a>
 800557e:	4621      	mov	r1, r4
 8005580:	4628      	mov	r0, r5
 8005582:	f000 f80d 	bl	80055a0 <__swsetup_r>
 8005586:	2800      	cmp	r0, #0
 8005588:	d0cc      	beq.n	8005524 <__swbuf_r+0x28>
 800558a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800558e:	4638      	mov	r0, r7
 8005590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005592:	bf00      	nop
 8005594:	080062f0 	.word	0x080062f0
 8005598:	08006310 	.word	0x08006310
 800559c:	080062d0 	.word	0x080062d0

080055a0 <__swsetup_r>:
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <__swsetup_r+0xcc>)
 80055a2:	b570      	push	{r4, r5, r6, lr}
 80055a4:	681d      	ldr	r5, [r3, #0]
 80055a6:	4606      	mov	r6, r0
 80055a8:	460c      	mov	r4, r1
 80055aa:	b125      	cbz	r5, 80055b6 <__swsetup_r+0x16>
 80055ac:	69ab      	ldr	r3, [r5, #24]
 80055ae:	b913      	cbnz	r3, 80055b6 <__swsetup_r+0x16>
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 f953 	bl	800585c <__sinit>
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <__swsetup_r+0xd0>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d10f      	bne.n	80055dc <__swsetup_r+0x3c>
 80055bc:	686c      	ldr	r4, [r5, #4]
 80055be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	0715      	lsls	r5, r2, #28
 80055c6:	d42c      	bmi.n	8005622 <__swsetup_r+0x82>
 80055c8:	06d0      	lsls	r0, r2, #27
 80055ca:	d411      	bmi.n	80055f0 <__swsetup_r+0x50>
 80055cc:	2209      	movs	r2, #9
 80055ce:	6032      	str	r2, [r6, #0]
 80055d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055da:	e03e      	b.n	800565a <__swsetup_r+0xba>
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <__swsetup_r+0xd4>)
 80055de:	429c      	cmp	r4, r3
 80055e0:	d101      	bne.n	80055e6 <__swsetup_r+0x46>
 80055e2:	68ac      	ldr	r4, [r5, #8]
 80055e4:	e7eb      	b.n	80055be <__swsetup_r+0x1e>
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <__swsetup_r+0xd8>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	bf08      	it	eq
 80055ec:	68ec      	ldreq	r4, [r5, #12]
 80055ee:	e7e6      	b.n	80055be <__swsetup_r+0x1e>
 80055f0:	0751      	lsls	r1, r2, #29
 80055f2:	d512      	bpl.n	800561a <__swsetup_r+0x7a>
 80055f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f6:	b141      	cbz	r1, 800560a <__swsetup_r+0x6a>
 80055f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055fc:	4299      	cmp	r1, r3
 80055fe:	d002      	beq.n	8005606 <__swsetup_r+0x66>
 8005600:	4630      	mov	r0, r6
 8005602:	f000 fa19 	bl	8005a38 <_free_r>
 8005606:	2300      	movs	r3, #0
 8005608:	6363      	str	r3, [r4, #52]	; 0x34
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005610:	81a3      	strh	r3, [r4, #12]
 8005612:	2300      	movs	r3, #0
 8005614:	6063      	str	r3, [r4, #4]
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f043 0308 	orr.w	r3, r3, #8
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	b94b      	cbnz	r3, 800563a <__swsetup_r+0x9a>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800562c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005630:	d003      	beq.n	800563a <__swsetup_r+0x9a>
 8005632:	4621      	mov	r1, r4
 8005634:	4630      	mov	r0, r6
 8005636:	f000 f9bf 	bl	80059b8 <__smakebuf_r>
 800563a:	89a2      	ldrh	r2, [r4, #12]
 800563c:	f012 0301 	ands.w	r3, r2, #1
 8005640:	d00c      	beq.n	800565c <__swsetup_r+0xbc>
 8005642:	2300      	movs	r3, #0
 8005644:	60a3      	str	r3, [r4, #8]
 8005646:	6963      	ldr	r3, [r4, #20]
 8005648:	425b      	negs	r3, r3
 800564a:	61a3      	str	r3, [r4, #24]
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	b953      	cbnz	r3, 8005666 <__swsetup_r+0xc6>
 8005650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005654:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005658:	d1ba      	bne.n	80055d0 <__swsetup_r+0x30>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	0792      	lsls	r2, r2, #30
 800565e:	bf58      	it	pl
 8005660:	6963      	ldrpl	r3, [r4, #20]
 8005662:	60a3      	str	r3, [r4, #8]
 8005664:	e7f2      	b.n	800564c <__swsetup_r+0xac>
 8005666:	2000      	movs	r0, #0
 8005668:	e7f7      	b.n	800565a <__swsetup_r+0xba>
 800566a:	bf00      	nop
 800566c:	20000010 	.word	0x20000010
 8005670:	080062f0 	.word	0x080062f0
 8005674:	08006310 	.word	0x08006310
 8005678:	080062d0 	.word	0x080062d0

0800567c <__sflush_r>:
 800567c:	898a      	ldrh	r2, [r1, #12]
 800567e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	0710      	lsls	r0, r2, #28
 8005686:	460c      	mov	r4, r1
 8005688:	d458      	bmi.n	800573c <__sflush_r+0xc0>
 800568a:	684b      	ldr	r3, [r1, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dc05      	bgt.n	800569c <__sflush_r+0x20>
 8005690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	dc02      	bgt.n	800569c <__sflush_r+0x20>
 8005696:	2000      	movs	r0, #0
 8005698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800569c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800569e:	2e00      	cmp	r6, #0
 80056a0:	d0f9      	beq.n	8005696 <__sflush_r+0x1a>
 80056a2:	2300      	movs	r3, #0
 80056a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056a8:	682f      	ldr	r7, [r5, #0]
 80056aa:	6a21      	ldr	r1, [r4, #32]
 80056ac:	602b      	str	r3, [r5, #0]
 80056ae:	d032      	beq.n	8005716 <__sflush_r+0x9a>
 80056b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	075a      	lsls	r2, r3, #29
 80056b6:	d505      	bpl.n	80056c4 <__sflush_r+0x48>
 80056b8:	6863      	ldr	r3, [r4, #4]
 80056ba:	1ac0      	subs	r0, r0, r3
 80056bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056be:	b10b      	cbz	r3, 80056c4 <__sflush_r+0x48>
 80056c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056c2:	1ac0      	subs	r0, r0, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	4602      	mov	r2, r0
 80056c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ca:	6a21      	ldr	r1, [r4, #32]
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b0      	blx	r6
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	d106      	bne.n	80056e4 <__sflush_r+0x68>
 80056d6:	6829      	ldr	r1, [r5, #0]
 80056d8:	291d      	cmp	r1, #29
 80056da:	d848      	bhi.n	800576e <__sflush_r+0xf2>
 80056dc:	4a29      	ldr	r2, [pc, #164]	; (8005784 <__sflush_r+0x108>)
 80056de:	40ca      	lsrs	r2, r1
 80056e0:	07d6      	lsls	r6, r2, #31
 80056e2:	d544      	bpl.n	800576e <__sflush_r+0xf2>
 80056e4:	2200      	movs	r2, #0
 80056e6:	6062      	str	r2, [r4, #4]
 80056e8:	04d9      	lsls	r1, r3, #19
 80056ea:	6922      	ldr	r2, [r4, #16]
 80056ec:	6022      	str	r2, [r4, #0]
 80056ee:	d504      	bpl.n	80056fa <__sflush_r+0x7e>
 80056f0:	1c42      	adds	r2, r0, #1
 80056f2:	d101      	bne.n	80056f8 <__sflush_r+0x7c>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b903      	cbnz	r3, 80056fa <__sflush_r+0x7e>
 80056f8:	6560      	str	r0, [r4, #84]	; 0x54
 80056fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056fc:	602f      	str	r7, [r5, #0]
 80056fe:	2900      	cmp	r1, #0
 8005700:	d0c9      	beq.n	8005696 <__sflush_r+0x1a>
 8005702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005706:	4299      	cmp	r1, r3
 8005708:	d002      	beq.n	8005710 <__sflush_r+0x94>
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f994 	bl	8005a38 <_free_r>
 8005710:	2000      	movs	r0, #0
 8005712:	6360      	str	r0, [r4, #52]	; 0x34
 8005714:	e7c0      	b.n	8005698 <__sflush_r+0x1c>
 8005716:	2301      	movs	r3, #1
 8005718:	4628      	mov	r0, r5
 800571a:	47b0      	blx	r6
 800571c:	1c41      	adds	r1, r0, #1
 800571e:	d1c8      	bne.n	80056b2 <__sflush_r+0x36>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0c5      	beq.n	80056b2 <__sflush_r+0x36>
 8005726:	2b1d      	cmp	r3, #29
 8005728:	d001      	beq.n	800572e <__sflush_r+0xb2>
 800572a:	2b16      	cmp	r3, #22
 800572c:	d101      	bne.n	8005732 <__sflush_r+0xb6>
 800572e:	602f      	str	r7, [r5, #0]
 8005730:	e7b1      	b.n	8005696 <__sflush_r+0x1a>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	e7ad      	b.n	8005698 <__sflush_r+0x1c>
 800573c:	690f      	ldr	r7, [r1, #16]
 800573e:	2f00      	cmp	r7, #0
 8005740:	d0a9      	beq.n	8005696 <__sflush_r+0x1a>
 8005742:	0793      	lsls	r3, r2, #30
 8005744:	680e      	ldr	r6, [r1, #0]
 8005746:	bf08      	it	eq
 8005748:	694b      	ldreq	r3, [r1, #20]
 800574a:	600f      	str	r7, [r1, #0]
 800574c:	bf18      	it	ne
 800574e:	2300      	movne	r3, #0
 8005750:	eba6 0807 	sub.w	r8, r6, r7
 8005754:	608b      	str	r3, [r1, #8]
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	dd9c      	ble.n	8005696 <__sflush_r+0x1a>
 800575c:	4643      	mov	r3, r8
 800575e:	463a      	mov	r2, r7
 8005760:	6a21      	ldr	r1, [r4, #32]
 8005762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005764:	4628      	mov	r0, r5
 8005766:	47b0      	blx	r6
 8005768:	2800      	cmp	r0, #0
 800576a:	dc06      	bgt.n	800577a <__sflush_r+0xfe>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005772:	81a3      	strh	r3, [r4, #12]
 8005774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005778:	e78e      	b.n	8005698 <__sflush_r+0x1c>
 800577a:	4407      	add	r7, r0
 800577c:	eba8 0800 	sub.w	r8, r8, r0
 8005780:	e7e9      	b.n	8005756 <__sflush_r+0xda>
 8005782:	bf00      	nop
 8005784:	20400001 	.word	0x20400001

08005788 <_fflush_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	690b      	ldr	r3, [r1, #16]
 800578c:	4605      	mov	r5, r0
 800578e:	460c      	mov	r4, r1
 8005790:	b1db      	cbz	r3, 80057ca <_fflush_r+0x42>
 8005792:	b118      	cbz	r0, 800579c <_fflush_r+0x14>
 8005794:	6983      	ldr	r3, [r0, #24]
 8005796:	b90b      	cbnz	r3, 800579c <_fflush_r+0x14>
 8005798:	f000 f860 	bl	800585c <__sinit>
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <_fflush_r+0x48>)
 800579e:	429c      	cmp	r4, r3
 80057a0:	d109      	bne.n	80057b6 <_fflush_r+0x2e>
 80057a2:	686c      	ldr	r4, [r5, #4]
 80057a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a8:	b17b      	cbz	r3, 80057ca <_fflush_r+0x42>
 80057aa:	4621      	mov	r1, r4
 80057ac:	4628      	mov	r0, r5
 80057ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057b2:	f7ff bf63 	b.w	800567c <__sflush_r>
 80057b6:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <_fflush_r+0x4c>)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	d101      	bne.n	80057c0 <_fflush_r+0x38>
 80057bc:	68ac      	ldr	r4, [r5, #8]
 80057be:	e7f1      	b.n	80057a4 <_fflush_r+0x1c>
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <_fflush_r+0x50>)
 80057c2:	429c      	cmp	r4, r3
 80057c4:	bf08      	it	eq
 80057c6:	68ec      	ldreq	r4, [r5, #12]
 80057c8:	e7ec      	b.n	80057a4 <_fflush_r+0x1c>
 80057ca:	2000      	movs	r0, #0
 80057cc:	bd38      	pop	{r3, r4, r5, pc}
 80057ce:	bf00      	nop
 80057d0:	080062f0 	.word	0x080062f0
 80057d4:	08006310 	.word	0x08006310
 80057d8:	080062d0 	.word	0x080062d0

080057dc <std>:
 80057dc:	2300      	movs	r3, #0
 80057de:	b510      	push	{r4, lr}
 80057e0:	4604      	mov	r4, r0
 80057e2:	e9c0 3300 	strd	r3, r3, [r0]
 80057e6:	6083      	str	r3, [r0, #8]
 80057e8:	8181      	strh	r1, [r0, #12]
 80057ea:	6643      	str	r3, [r0, #100]	; 0x64
 80057ec:	81c2      	strh	r2, [r0, #14]
 80057ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057f2:	6183      	str	r3, [r0, #24]
 80057f4:	4619      	mov	r1, r3
 80057f6:	2208      	movs	r2, #8
 80057f8:	305c      	adds	r0, #92	; 0x5c
 80057fa:	f7ff fdfb 	bl	80053f4 <memset>
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <std+0x38>)
 8005800:	6263      	str	r3, [r4, #36]	; 0x24
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <std+0x3c>)
 8005804:	62a3      	str	r3, [r4, #40]	; 0x28
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <std+0x40>)
 8005808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <std+0x44>)
 800580c:	6224      	str	r4, [r4, #32]
 800580e:	6323      	str	r3, [r4, #48]	; 0x30
 8005810:	bd10      	pop	{r4, pc}
 8005812:	bf00      	nop
 8005814:	08006139 	.word	0x08006139
 8005818:	0800615b 	.word	0x0800615b
 800581c:	08006193 	.word	0x08006193
 8005820:	080061b7 	.word	0x080061b7

08005824 <_cleanup_r>:
 8005824:	4901      	ldr	r1, [pc, #4]	; (800582c <_cleanup_r+0x8>)
 8005826:	f000 b885 	b.w	8005934 <_fwalk_reent>
 800582a:	bf00      	nop
 800582c:	08005789 	.word	0x08005789

08005830 <__sfmoreglue>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	1e4a      	subs	r2, r1, #1
 8005834:	2568      	movs	r5, #104	; 0x68
 8005836:	4355      	muls	r5, r2
 8005838:	460e      	mov	r6, r1
 800583a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800583e:	f000 f949 	bl	8005ad4 <_malloc_r>
 8005842:	4604      	mov	r4, r0
 8005844:	b140      	cbz	r0, 8005858 <__sfmoreglue+0x28>
 8005846:	2100      	movs	r1, #0
 8005848:	e9c0 1600 	strd	r1, r6, [r0]
 800584c:	300c      	adds	r0, #12
 800584e:	60a0      	str	r0, [r4, #8]
 8005850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005854:	f7ff fdce 	bl	80053f4 <memset>
 8005858:	4620      	mov	r0, r4
 800585a:	bd70      	pop	{r4, r5, r6, pc}

0800585c <__sinit>:
 800585c:	6983      	ldr	r3, [r0, #24]
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	bb33      	cbnz	r3, 80058b2 <__sinit+0x56>
 8005864:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005868:	6503      	str	r3, [r0, #80]	; 0x50
 800586a:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <__sinit+0x58>)
 800586c:	4a12      	ldr	r2, [pc, #72]	; (80058b8 <__sinit+0x5c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6282      	str	r2, [r0, #40]	; 0x28
 8005872:	4298      	cmp	r0, r3
 8005874:	bf04      	itt	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	6183      	streq	r3, [r0, #24]
 800587a:	f000 f81f 	bl	80058bc <__sfp>
 800587e:	6060      	str	r0, [r4, #4]
 8005880:	4620      	mov	r0, r4
 8005882:	f000 f81b 	bl	80058bc <__sfp>
 8005886:	60a0      	str	r0, [r4, #8]
 8005888:	4620      	mov	r0, r4
 800588a:	f000 f817 	bl	80058bc <__sfp>
 800588e:	2200      	movs	r2, #0
 8005890:	60e0      	str	r0, [r4, #12]
 8005892:	2104      	movs	r1, #4
 8005894:	6860      	ldr	r0, [r4, #4]
 8005896:	f7ff ffa1 	bl	80057dc <std>
 800589a:	2201      	movs	r2, #1
 800589c:	2109      	movs	r1, #9
 800589e:	68a0      	ldr	r0, [r4, #8]
 80058a0:	f7ff ff9c 	bl	80057dc <std>
 80058a4:	2202      	movs	r2, #2
 80058a6:	2112      	movs	r1, #18
 80058a8:	68e0      	ldr	r0, [r4, #12]
 80058aa:	f7ff ff97 	bl	80057dc <std>
 80058ae:	2301      	movs	r3, #1
 80058b0:	61a3      	str	r3, [r4, #24]
 80058b2:	bd10      	pop	{r4, pc}
 80058b4:	080062cc 	.word	0x080062cc
 80058b8:	08005825 	.word	0x08005825

080058bc <__sfp>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	4b1b      	ldr	r3, [pc, #108]	; (800592c <__sfp+0x70>)
 80058c0:	681e      	ldr	r6, [r3, #0]
 80058c2:	69b3      	ldr	r3, [r6, #24]
 80058c4:	4607      	mov	r7, r0
 80058c6:	b913      	cbnz	r3, 80058ce <__sfp+0x12>
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff ffc7 	bl	800585c <__sinit>
 80058ce:	3648      	adds	r6, #72	; 0x48
 80058d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	d503      	bpl.n	80058e0 <__sfp+0x24>
 80058d8:	6833      	ldr	r3, [r6, #0]
 80058da:	b133      	cbz	r3, 80058ea <__sfp+0x2e>
 80058dc:	6836      	ldr	r6, [r6, #0]
 80058de:	e7f7      	b.n	80058d0 <__sfp+0x14>
 80058e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058e4:	b16d      	cbz	r5, 8005902 <__sfp+0x46>
 80058e6:	3468      	adds	r4, #104	; 0x68
 80058e8:	e7f4      	b.n	80058d4 <__sfp+0x18>
 80058ea:	2104      	movs	r1, #4
 80058ec:	4638      	mov	r0, r7
 80058ee:	f7ff ff9f 	bl	8005830 <__sfmoreglue>
 80058f2:	6030      	str	r0, [r6, #0]
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d1f1      	bne.n	80058dc <__sfp+0x20>
 80058f8:	230c      	movs	r3, #12
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4604      	mov	r4, r0
 80058fe:	4620      	mov	r0, r4
 8005900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <__sfp+0x74>)
 8005904:	6665      	str	r5, [r4, #100]	; 0x64
 8005906:	e9c4 5500 	strd	r5, r5, [r4]
 800590a:	60a5      	str	r5, [r4, #8]
 800590c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005910:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005914:	2208      	movs	r2, #8
 8005916:	4629      	mov	r1, r5
 8005918:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800591c:	f7ff fd6a 	bl	80053f4 <memset>
 8005920:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005924:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005928:	e7e9      	b.n	80058fe <__sfp+0x42>
 800592a:	bf00      	nop
 800592c:	080062cc 	.word	0x080062cc
 8005930:	ffff0001 	.word	0xffff0001

08005934 <_fwalk_reent>:
 8005934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005938:	4680      	mov	r8, r0
 800593a:	4689      	mov	r9, r1
 800593c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005940:	2600      	movs	r6, #0
 8005942:	b914      	cbnz	r4, 800594a <_fwalk_reent+0x16>
 8005944:	4630      	mov	r0, r6
 8005946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800594a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800594e:	3f01      	subs	r7, #1
 8005950:	d501      	bpl.n	8005956 <_fwalk_reent+0x22>
 8005952:	6824      	ldr	r4, [r4, #0]
 8005954:	e7f5      	b.n	8005942 <_fwalk_reent+0xe>
 8005956:	89ab      	ldrh	r3, [r5, #12]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d907      	bls.n	800596c <_fwalk_reent+0x38>
 800595c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005960:	3301      	adds	r3, #1
 8005962:	d003      	beq.n	800596c <_fwalk_reent+0x38>
 8005964:	4629      	mov	r1, r5
 8005966:	4640      	mov	r0, r8
 8005968:	47c8      	blx	r9
 800596a:	4306      	orrs	r6, r0
 800596c:	3568      	adds	r5, #104	; 0x68
 800596e:	e7ee      	b.n	800594e <_fwalk_reent+0x1a>

08005970 <__swhatbuf_r>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	460e      	mov	r6, r1
 8005974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005978:	2900      	cmp	r1, #0
 800597a:	b096      	sub	sp, #88	; 0x58
 800597c:	4614      	mov	r4, r2
 800597e:	461d      	mov	r5, r3
 8005980:	da07      	bge.n	8005992 <__swhatbuf_r+0x22>
 8005982:	2300      	movs	r3, #0
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	89b3      	ldrh	r3, [r6, #12]
 8005988:	061a      	lsls	r2, r3, #24
 800598a:	d410      	bmi.n	80059ae <__swhatbuf_r+0x3e>
 800598c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005990:	e00e      	b.n	80059b0 <__swhatbuf_r+0x40>
 8005992:	466a      	mov	r2, sp
 8005994:	f000 fc36 	bl	8006204 <_fstat_r>
 8005998:	2800      	cmp	r0, #0
 800599a:	dbf2      	blt.n	8005982 <__swhatbuf_r+0x12>
 800599c:	9a01      	ldr	r2, [sp, #4]
 800599e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059a6:	425a      	negs	r2, r3
 80059a8:	415a      	adcs	r2, r3
 80059aa:	602a      	str	r2, [r5, #0]
 80059ac:	e7ee      	b.n	800598c <__swhatbuf_r+0x1c>
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	2000      	movs	r0, #0
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	b016      	add	sp, #88	; 0x58
 80059b6:	bd70      	pop	{r4, r5, r6, pc}

080059b8 <__smakebuf_r>:
 80059b8:	898b      	ldrh	r3, [r1, #12]
 80059ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059bc:	079d      	lsls	r5, r3, #30
 80059be:	4606      	mov	r6, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	d507      	bpl.n	80059d4 <__smakebuf_r+0x1c>
 80059c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	2301      	movs	r3, #1
 80059ce:	6163      	str	r3, [r4, #20]
 80059d0:	b002      	add	sp, #8
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	ab01      	add	r3, sp, #4
 80059d6:	466a      	mov	r2, sp
 80059d8:	f7ff ffca 	bl	8005970 <__swhatbuf_r>
 80059dc:	9900      	ldr	r1, [sp, #0]
 80059de:	4605      	mov	r5, r0
 80059e0:	4630      	mov	r0, r6
 80059e2:	f000 f877 	bl	8005ad4 <_malloc_r>
 80059e6:	b948      	cbnz	r0, 80059fc <__smakebuf_r+0x44>
 80059e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ec:	059a      	lsls	r2, r3, #22
 80059ee:	d4ef      	bmi.n	80059d0 <__smakebuf_r+0x18>
 80059f0:	f023 0303 	bic.w	r3, r3, #3
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	81a3      	strh	r3, [r4, #12]
 80059fa:	e7e3      	b.n	80059c4 <__smakebuf_r+0xc>
 80059fc:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <__smakebuf_r+0x7c>)
 80059fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	6020      	str	r0, [r4, #0]
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	81a3      	strh	r3, [r4, #12]
 8005a0a:	9b00      	ldr	r3, [sp, #0]
 8005a0c:	6163      	str	r3, [r4, #20]
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	6120      	str	r0, [r4, #16]
 8005a12:	b15b      	cbz	r3, 8005a2c <__smakebuf_r+0x74>
 8005a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 fc05 	bl	8006228 <_isatty_r>
 8005a1e:	b128      	cbz	r0, 8005a2c <__smakebuf_r+0x74>
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	431d      	orrs	r5, r3
 8005a30:	81a5      	strh	r5, [r4, #12]
 8005a32:	e7cd      	b.n	80059d0 <__smakebuf_r+0x18>
 8005a34:	08005825 	.word	0x08005825

08005a38 <_free_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	d045      	beq.n	8005acc <_free_r+0x94>
 8005a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a44:	1f0c      	subs	r4, r1, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bfb8      	it	lt
 8005a4a:	18e4      	addlt	r4, r4, r3
 8005a4c:	f000 fc0e 	bl	800626c <__malloc_lock>
 8005a50:	4a1f      	ldr	r2, [pc, #124]	; (8005ad0 <_free_r+0x98>)
 8005a52:	6813      	ldr	r3, [r2, #0]
 8005a54:	4610      	mov	r0, r2
 8005a56:	b933      	cbnz	r3, 8005a66 <_free_r+0x2e>
 8005a58:	6063      	str	r3, [r4, #4]
 8005a5a:	6014      	str	r4, [r2, #0]
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a62:	f000 bc04 	b.w	800626e <__malloc_unlock>
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	d90c      	bls.n	8005a84 <_free_r+0x4c>
 8005a6a:	6821      	ldr	r1, [r4, #0]
 8005a6c:	1862      	adds	r2, r4, r1
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	bf04      	itt	eq
 8005a72:	681a      	ldreq	r2, [r3, #0]
 8005a74:	685b      	ldreq	r3, [r3, #4]
 8005a76:	6063      	str	r3, [r4, #4]
 8005a78:	bf04      	itt	eq
 8005a7a:	1852      	addeq	r2, r2, r1
 8005a7c:	6022      	streq	r2, [r4, #0]
 8005a7e:	6004      	str	r4, [r0, #0]
 8005a80:	e7ec      	b.n	8005a5c <_free_r+0x24>
 8005a82:	4613      	mov	r3, r2
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	b10a      	cbz	r2, 8005a8c <_free_r+0x54>
 8005a88:	42a2      	cmp	r2, r4
 8005a8a:	d9fa      	bls.n	8005a82 <_free_r+0x4a>
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	1858      	adds	r0, r3, r1
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d10b      	bne.n	8005aac <_free_r+0x74>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	4401      	add	r1, r0
 8005a98:	1858      	adds	r0, r3, r1
 8005a9a:	4282      	cmp	r2, r0
 8005a9c:	6019      	str	r1, [r3, #0]
 8005a9e:	d1dd      	bne.n	8005a5c <_free_r+0x24>
 8005aa0:	6810      	ldr	r0, [r2, #0]
 8005aa2:	6852      	ldr	r2, [r2, #4]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	6019      	str	r1, [r3, #0]
 8005aaa:	e7d7      	b.n	8005a5c <_free_r+0x24>
 8005aac:	d902      	bls.n	8005ab4 <_free_r+0x7c>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	e7d3      	b.n	8005a5c <_free_r+0x24>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	1821      	adds	r1, r4, r0
 8005ab8:	428a      	cmp	r2, r1
 8005aba:	bf04      	itt	eq
 8005abc:	6811      	ldreq	r1, [r2, #0]
 8005abe:	6852      	ldreq	r2, [r2, #4]
 8005ac0:	6062      	str	r2, [r4, #4]
 8005ac2:	bf04      	itt	eq
 8005ac4:	1809      	addeq	r1, r1, r0
 8005ac6:	6021      	streq	r1, [r4, #0]
 8005ac8:	605c      	str	r4, [r3, #4]
 8005aca:	e7c7      	b.n	8005a5c <_free_r+0x24>
 8005acc:	bd38      	pop	{r3, r4, r5, pc}
 8005ace:	bf00      	nop
 8005ad0:	2000009c 	.word	0x2000009c

08005ad4 <_malloc_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	1ccd      	adds	r5, r1, #3
 8005ad8:	f025 0503 	bic.w	r5, r5, #3
 8005adc:	3508      	adds	r5, #8
 8005ade:	2d0c      	cmp	r5, #12
 8005ae0:	bf38      	it	cc
 8005ae2:	250c      	movcc	r5, #12
 8005ae4:	2d00      	cmp	r5, #0
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	db01      	blt.n	8005aee <_malloc_r+0x1a>
 8005aea:	42a9      	cmp	r1, r5
 8005aec:	d903      	bls.n	8005af6 <_malloc_r+0x22>
 8005aee:	230c      	movs	r3, #12
 8005af0:	6033      	str	r3, [r6, #0]
 8005af2:	2000      	movs	r0, #0
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
 8005af6:	f000 fbb9 	bl	800626c <__malloc_lock>
 8005afa:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <_malloc_r+0xac>)
 8005afc:	6814      	ldr	r4, [r2, #0]
 8005afe:	4621      	mov	r1, r4
 8005b00:	b991      	cbnz	r1, 8005b28 <_malloc_r+0x54>
 8005b02:	4c20      	ldr	r4, [pc, #128]	; (8005b84 <_malloc_r+0xb0>)
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	b91b      	cbnz	r3, 8005b10 <_malloc_r+0x3c>
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 fb05 	bl	8006118 <_sbrk_r>
 8005b0e:	6020      	str	r0, [r4, #0]
 8005b10:	4629      	mov	r1, r5
 8005b12:	4630      	mov	r0, r6
 8005b14:	f000 fb00 	bl	8006118 <_sbrk_r>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d124      	bne.n	8005b66 <_malloc_r+0x92>
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	6033      	str	r3, [r6, #0]
 8005b20:	4630      	mov	r0, r6
 8005b22:	f000 fba4 	bl	800626e <__malloc_unlock>
 8005b26:	e7e4      	b.n	8005af2 <_malloc_r+0x1e>
 8005b28:	680b      	ldr	r3, [r1, #0]
 8005b2a:	1b5b      	subs	r3, r3, r5
 8005b2c:	d418      	bmi.n	8005b60 <_malloc_r+0x8c>
 8005b2e:	2b0b      	cmp	r3, #11
 8005b30:	d90f      	bls.n	8005b52 <_malloc_r+0x7e>
 8005b32:	600b      	str	r3, [r1, #0]
 8005b34:	50cd      	str	r5, [r1, r3]
 8005b36:	18cc      	adds	r4, r1, r3
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fb98 	bl	800626e <__malloc_unlock>
 8005b3e:	f104 000b 	add.w	r0, r4, #11
 8005b42:	1d23      	adds	r3, r4, #4
 8005b44:	f020 0007 	bic.w	r0, r0, #7
 8005b48:	1ac3      	subs	r3, r0, r3
 8005b4a:	d0d3      	beq.n	8005af4 <_malloc_r+0x20>
 8005b4c:	425a      	negs	r2, r3
 8005b4e:	50e2      	str	r2, [r4, r3]
 8005b50:	e7d0      	b.n	8005af4 <_malloc_r+0x20>
 8005b52:	428c      	cmp	r4, r1
 8005b54:	684b      	ldr	r3, [r1, #4]
 8005b56:	bf16      	itet	ne
 8005b58:	6063      	strne	r3, [r4, #4]
 8005b5a:	6013      	streq	r3, [r2, #0]
 8005b5c:	460c      	movne	r4, r1
 8005b5e:	e7eb      	b.n	8005b38 <_malloc_r+0x64>
 8005b60:	460c      	mov	r4, r1
 8005b62:	6849      	ldr	r1, [r1, #4]
 8005b64:	e7cc      	b.n	8005b00 <_malloc_r+0x2c>
 8005b66:	1cc4      	adds	r4, r0, #3
 8005b68:	f024 0403 	bic.w	r4, r4, #3
 8005b6c:	42a0      	cmp	r0, r4
 8005b6e:	d005      	beq.n	8005b7c <_malloc_r+0xa8>
 8005b70:	1a21      	subs	r1, r4, r0
 8005b72:	4630      	mov	r0, r6
 8005b74:	f000 fad0 	bl	8006118 <_sbrk_r>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d0cf      	beq.n	8005b1c <_malloc_r+0x48>
 8005b7c:	6025      	str	r5, [r4, #0]
 8005b7e:	e7db      	b.n	8005b38 <_malloc_r+0x64>
 8005b80:	2000009c 	.word	0x2000009c
 8005b84:	200000a0 	.word	0x200000a0

08005b88 <__sfputc_r>:
 8005b88:	6893      	ldr	r3, [r2, #8]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	b410      	push	{r4}
 8005b90:	6093      	str	r3, [r2, #8]
 8005b92:	da08      	bge.n	8005ba6 <__sfputc_r+0x1e>
 8005b94:	6994      	ldr	r4, [r2, #24]
 8005b96:	42a3      	cmp	r3, r4
 8005b98:	db01      	blt.n	8005b9e <__sfputc_r+0x16>
 8005b9a:	290a      	cmp	r1, #10
 8005b9c:	d103      	bne.n	8005ba6 <__sfputc_r+0x1e>
 8005b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba2:	f7ff bcab 	b.w	80054fc <__swbuf_r>
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	1c58      	adds	r0, r3, #1
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	7019      	strb	r1, [r3, #0]
 8005bae:	4608      	mov	r0, r1
 8005bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <__sfputs_r>:
 8005bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb8:	4606      	mov	r6, r0
 8005bba:	460f      	mov	r7, r1
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	18d5      	adds	r5, r2, r3
 8005bc0:	42ac      	cmp	r4, r5
 8005bc2:	d101      	bne.n	8005bc8 <__sfputs_r+0x12>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e007      	b.n	8005bd8 <__sfputs_r+0x22>
 8005bc8:	463a      	mov	r2, r7
 8005bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ffda 	bl	8005b88 <__sfputc_r>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d1f3      	bne.n	8005bc0 <__sfputs_r+0xa>
 8005bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bdc <_vfiprintf_r>:
 8005bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	460c      	mov	r4, r1
 8005be2:	b09d      	sub	sp, #116	; 0x74
 8005be4:	4617      	mov	r7, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	4606      	mov	r6, r0
 8005bea:	b118      	cbz	r0, 8005bf4 <_vfiprintf_r+0x18>
 8005bec:	6983      	ldr	r3, [r0, #24]
 8005bee:	b90b      	cbnz	r3, 8005bf4 <_vfiprintf_r+0x18>
 8005bf0:	f7ff fe34 	bl	800585c <__sinit>
 8005bf4:	4b7c      	ldr	r3, [pc, #496]	; (8005de8 <_vfiprintf_r+0x20c>)
 8005bf6:	429c      	cmp	r4, r3
 8005bf8:	d158      	bne.n	8005cac <_vfiprintf_r+0xd0>
 8005bfa:	6874      	ldr	r4, [r6, #4]
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	0718      	lsls	r0, r3, #28
 8005c00:	d55e      	bpl.n	8005cc0 <_vfiprintf_r+0xe4>
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d05b      	beq.n	8005cc0 <_vfiprintf_r+0xe4>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c12:	2330      	movs	r3, #48	; 0x30
 8005c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c18:	9503      	str	r5, [sp, #12]
 8005c1a:	f04f 0b01 	mov.w	fp, #1
 8005c1e:	46b8      	mov	r8, r7
 8005c20:	4645      	mov	r5, r8
 8005c22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c26:	b10b      	cbz	r3, 8005c2c <_vfiprintf_r+0x50>
 8005c28:	2b25      	cmp	r3, #37	; 0x25
 8005c2a:	d154      	bne.n	8005cd6 <_vfiprintf_r+0xfa>
 8005c2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005c30:	d00b      	beq.n	8005c4a <_vfiprintf_r+0x6e>
 8005c32:	4653      	mov	r3, sl
 8005c34:	463a      	mov	r2, r7
 8005c36:	4621      	mov	r1, r4
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f7ff ffbc 	bl	8005bb6 <__sfputs_r>
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f000 80c2 	beq.w	8005dc8 <_vfiprintf_r+0x1ec>
 8005c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c46:	4453      	add	r3, sl
 8005c48:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4a:	f898 3000 	ldrb.w	r3, [r8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80ba 	beq.w	8005dc8 <_vfiprintf_r+0x1ec>
 8005c54:	2300      	movs	r3, #0
 8005c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	9307      	str	r3, [sp, #28]
 8005c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c66:	931a      	str	r3, [sp, #104]	; 0x68
 8005c68:	46a8      	mov	r8, r5
 8005c6a:	2205      	movs	r2, #5
 8005c6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005c70:	485e      	ldr	r0, [pc, #376]	; (8005dec <_vfiprintf_r+0x210>)
 8005c72:	f7fa fad5 	bl	8000220 <memchr>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	bb78      	cbnz	r0, 8005cda <_vfiprintf_r+0xfe>
 8005c7a:	06d9      	lsls	r1, r3, #27
 8005c7c:	bf44      	itt	mi
 8005c7e:	2220      	movmi	r2, #32
 8005c80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c84:	071a      	lsls	r2, r3, #28
 8005c86:	bf44      	itt	mi
 8005c88:	222b      	movmi	r2, #43	; 0x2b
 8005c8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c8e:	782a      	ldrb	r2, [r5, #0]
 8005c90:	2a2a      	cmp	r2, #42	; 0x2a
 8005c92:	d02a      	beq.n	8005cea <_vfiprintf_r+0x10e>
 8005c94:	9a07      	ldr	r2, [sp, #28]
 8005c96:	46a8      	mov	r8, r5
 8005c98:	2000      	movs	r0, #0
 8005c9a:	250a      	movs	r5, #10
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ca2:	3b30      	subs	r3, #48	; 0x30
 8005ca4:	2b09      	cmp	r3, #9
 8005ca6:	d969      	bls.n	8005d7c <_vfiprintf_r+0x1a0>
 8005ca8:	b360      	cbz	r0, 8005d04 <_vfiprintf_r+0x128>
 8005caa:	e024      	b.n	8005cf6 <_vfiprintf_r+0x11a>
 8005cac:	4b50      	ldr	r3, [pc, #320]	; (8005df0 <_vfiprintf_r+0x214>)
 8005cae:	429c      	cmp	r4, r3
 8005cb0:	d101      	bne.n	8005cb6 <_vfiprintf_r+0xda>
 8005cb2:	68b4      	ldr	r4, [r6, #8]
 8005cb4:	e7a2      	b.n	8005bfc <_vfiprintf_r+0x20>
 8005cb6:	4b4f      	ldr	r3, [pc, #316]	; (8005df4 <_vfiprintf_r+0x218>)
 8005cb8:	429c      	cmp	r4, r3
 8005cba:	bf08      	it	eq
 8005cbc:	68f4      	ldreq	r4, [r6, #12]
 8005cbe:	e79d      	b.n	8005bfc <_vfiprintf_r+0x20>
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff fc6c 	bl	80055a0 <__swsetup_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d09d      	beq.n	8005c08 <_vfiprintf_r+0x2c>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd0:	b01d      	add	sp, #116	; 0x74
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd6:	46a8      	mov	r8, r5
 8005cd8:	e7a2      	b.n	8005c20 <_vfiprintf_r+0x44>
 8005cda:	4a44      	ldr	r2, [pc, #272]	; (8005dec <_vfiprintf_r+0x210>)
 8005cdc:	1a80      	subs	r0, r0, r2
 8005cde:	fa0b f000 	lsl.w	r0, fp, r0
 8005ce2:	4318      	orrs	r0, r3
 8005ce4:	9004      	str	r0, [sp, #16]
 8005ce6:	4645      	mov	r5, r8
 8005ce8:	e7be      	b.n	8005c68 <_vfiprintf_r+0x8c>
 8005cea:	9a03      	ldr	r2, [sp, #12]
 8005cec:	1d11      	adds	r1, r2, #4
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	9103      	str	r1, [sp, #12]
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	db01      	blt.n	8005cfa <_vfiprintf_r+0x11e>
 8005cf6:	9207      	str	r2, [sp, #28]
 8005cf8:	e004      	b.n	8005d04 <_vfiprintf_r+0x128>
 8005cfa:	4252      	negs	r2, r2
 8005cfc:	f043 0302 	orr.w	r3, r3, #2
 8005d00:	9207      	str	r2, [sp, #28]
 8005d02:	9304      	str	r3, [sp, #16]
 8005d04:	f898 3000 	ldrb.w	r3, [r8]
 8005d08:	2b2e      	cmp	r3, #46	; 0x2e
 8005d0a:	d10e      	bne.n	8005d2a <_vfiprintf_r+0x14e>
 8005d0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005d10:	2b2a      	cmp	r3, #42	; 0x2a
 8005d12:	d138      	bne.n	8005d86 <_vfiprintf_r+0x1aa>
 8005d14:	9b03      	ldr	r3, [sp, #12]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	9203      	str	r2, [sp, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bfb8      	it	lt
 8005d20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d24:	f108 0802 	add.w	r8, r8, #2
 8005d28:	9305      	str	r3, [sp, #20]
 8005d2a:	4d33      	ldr	r5, [pc, #204]	; (8005df8 <_vfiprintf_r+0x21c>)
 8005d2c:	f898 1000 	ldrb.w	r1, [r8]
 8005d30:	2203      	movs	r2, #3
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7fa fa74 	bl	8000220 <memchr>
 8005d38:	b140      	cbz	r0, 8005d4c <_vfiprintf_r+0x170>
 8005d3a:	2340      	movs	r3, #64	; 0x40
 8005d3c:	1b40      	subs	r0, r0, r5
 8005d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d42:	9b04      	ldr	r3, [sp, #16]
 8005d44:	4303      	orrs	r3, r0
 8005d46:	f108 0801 	add.w	r8, r8, #1
 8005d4a:	9304      	str	r3, [sp, #16]
 8005d4c:	f898 1000 	ldrb.w	r1, [r8]
 8005d50:	482a      	ldr	r0, [pc, #168]	; (8005dfc <_vfiprintf_r+0x220>)
 8005d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d56:	2206      	movs	r2, #6
 8005d58:	f108 0701 	add.w	r7, r8, #1
 8005d5c:	f7fa fa60 	bl	8000220 <memchr>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d037      	beq.n	8005dd4 <_vfiprintf_r+0x1f8>
 8005d64:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <_vfiprintf_r+0x224>)
 8005d66:	bb1b      	cbnz	r3, 8005db0 <_vfiprintf_r+0x1d4>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	3307      	adds	r3, #7
 8005d6c:	f023 0307 	bic.w	r3, r3, #7
 8005d70:	3308      	adds	r3, #8
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d76:	444b      	add	r3, r9
 8005d78:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7a:	e750      	b.n	8005c1e <_vfiprintf_r+0x42>
 8005d7c:	fb05 3202 	mla	r2, r5, r2, r3
 8005d80:	2001      	movs	r0, #1
 8005d82:	4688      	mov	r8, r1
 8005d84:	e78a      	b.n	8005c9c <_vfiprintf_r+0xc0>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f108 0801 	add.w	r8, r8, #1
 8005d8c:	9305      	str	r3, [sp, #20]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	250a      	movs	r5, #10
 8005d92:	4640      	mov	r0, r8
 8005d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d98:	3a30      	subs	r2, #48	; 0x30
 8005d9a:	2a09      	cmp	r2, #9
 8005d9c:	d903      	bls.n	8005da6 <_vfiprintf_r+0x1ca>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0c3      	beq.n	8005d2a <_vfiprintf_r+0x14e>
 8005da2:	9105      	str	r1, [sp, #20]
 8005da4:	e7c1      	b.n	8005d2a <_vfiprintf_r+0x14e>
 8005da6:	fb05 2101 	mla	r1, r5, r1, r2
 8005daa:	2301      	movs	r3, #1
 8005dac:	4680      	mov	r8, r0
 8005dae:	e7f0      	b.n	8005d92 <_vfiprintf_r+0x1b6>
 8005db0:	ab03      	add	r3, sp, #12
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	4622      	mov	r2, r4
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <_vfiprintf_r+0x228>)
 8005db8:	a904      	add	r1, sp, #16
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f3af 8000 	nop.w
 8005dc0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005dc4:	4681      	mov	r9, r0
 8005dc6:	d1d5      	bne.n	8005d74 <_vfiprintf_r+0x198>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	065b      	lsls	r3, r3, #25
 8005dcc:	f53f af7e 	bmi.w	8005ccc <_vfiprintf_r+0xf0>
 8005dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dd2:	e77d      	b.n	8005cd0 <_vfiprintf_r+0xf4>
 8005dd4:	ab03      	add	r3, sp, #12
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4622      	mov	r2, r4
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <_vfiprintf_r+0x228>)
 8005ddc:	a904      	add	r1, sp, #16
 8005dde:	4630      	mov	r0, r6
 8005de0:	f000 f888 	bl	8005ef4 <_printf_i>
 8005de4:	e7ec      	b.n	8005dc0 <_vfiprintf_r+0x1e4>
 8005de6:	bf00      	nop
 8005de8:	080062f0 	.word	0x080062f0
 8005dec:	08006330 	.word	0x08006330
 8005df0:	08006310 	.word	0x08006310
 8005df4:	080062d0 	.word	0x080062d0
 8005df8:	08006336 	.word	0x08006336
 8005dfc:	0800633a 	.word	0x0800633a
 8005e00:	00000000 	.word	0x00000000
 8005e04:	08005bb7 	.word	0x08005bb7

08005e08 <_printf_common>:
 8005e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	4691      	mov	r9, r2
 8005e0e:	461f      	mov	r7, r3
 8005e10:	688a      	ldr	r2, [r1, #8]
 8005e12:	690b      	ldr	r3, [r1, #16]
 8005e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bfb8      	it	lt
 8005e1c:	4613      	movlt	r3, r2
 8005e1e:	f8c9 3000 	str.w	r3, [r9]
 8005e22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e26:	4606      	mov	r6, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	b112      	cbz	r2, 8005e32 <_printf_common+0x2a>
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f8c9 3000 	str.w	r3, [r9]
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	0699      	lsls	r1, r3, #26
 8005e36:	bf42      	ittt	mi
 8005e38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005e3c:	3302      	addmi	r3, #2
 8005e3e:	f8c9 3000 	strmi.w	r3, [r9]
 8005e42:	6825      	ldr	r5, [r4, #0]
 8005e44:	f015 0506 	ands.w	r5, r5, #6
 8005e48:	d107      	bne.n	8005e5a <_printf_common+0x52>
 8005e4a:	f104 0a19 	add.w	sl, r4, #25
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	f8d9 2000 	ldr.w	r2, [r9]
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	42ab      	cmp	r3, r5
 8005e58:	dc28      	bgt.n	8005eac <_printf_common+0xa4>
 8005e5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	3300      	adds	r3, #0
 8005e62:	bf18      	it	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	0692      	lsls	r2, r2, #26
 8005e68:	d42d      	bmi.n	8005ec6 <_printf_common+0xbe>
 8005e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e6e:	4639      	mov	r1, r7
 8005e70:	4630      	mov	r0, r6
 8005e72:	47c0      	blx	r8
 8005e74:	3001      	adds	r0, #1
 8005e76:	d020      	beq.n	8005eba <_printf_common+0xb2>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	68e5      	ldr	r5, [r4, #12]
 8005e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e80:	f003 0306 	and.w	r3, r3, #6
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	bf08      	it	eq
 8005e88:	1aad      	subeq	r5, r5, r2
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	6922      	ldr	r2, [r4, #16]
 8005e8e:	bf0c      	ite	eq
 8005e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e94:	2500      	movne	r5, #0
 8005e96:	4293      	cmp	r3, r2
 8005e98:	bfc4      	itt	gt
 8005e9a:	1a9b      	subgt	r3, r3, r2
 8005e9c:	18ed      	addgt	r5, r5, r3
 8005e9e:	f04f 0900 	mov.w	r9, #0
 8005ea2:	341a      	adds	r4, #26
 8005ea4:	454d      	cmp	r5, r9
 8005ea6:	d11a      	bne.n	8005ede <_printf_common+0xd6>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e008      	b.n	8005ebe <_printf_common+0xb6>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4652      	mov	r2, sl
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d103      	bne.n	8005ec2 <_printf_common+0xba>
 8005eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	e7c3      	b.n	8005e4e <_printf_common+0x46>
 8005ec6:	18e1      	adds	r1, r4, r3
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	2030      	movs	r0, #48	; 0x30
 8005ecc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ed0:	4422      	add	r2, r4
 8005ed2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eda:	3302      	adds	r3, #2
 8005edc:	e7c5      	b.n	8005e6a <_printf_common+0x62>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	47c0      	blx	r8
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d0e6      	beq.n	8005eba <_printf_common+0xb2>
 8005eec:	f109 0901 	add.w	r9, r9, #1
 8005ef0:	e7d8      	b.n	8005ea4 <_printf_common+0x9c>
	...

08005ef4 <_printf_i>:
 8005ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ef8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005efc:	460c      	mov	r4, r1
 8005efe:	7e09      	ldrb	r1, [r1, #24]
 8005f00:	b085      	sub	sp, #20
 8005f02:	296e      	cmp	r1, #110	; 0x6e
 8005f04:	4617      	mov	r7, r2
 8005f06:	4606      	mov	r6, r0
 8005f08:	4698      	mov	r8, r3
 8005f0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f0c:	f000 80b3 	beq.w	8006076 <_printf_i+0x182>
 8005f10:	d822      	bhi.n	8005f58 <_printf_i+0x64>
 8005f12:	2963      	cmp	r1, #99	; 0x63
 8005f14:	d036      	beq.n	8005f84 <_printf_i+0x90>
 8005f16:	d80a      	bhi.n	8005f2e <_printf_i+0x3a>
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	f000 80b9 	beq.w	8006090 <_printf_i+0x19c>
 8005f1e:	2958      	cmp	r1, #88	; 0x58
 8005f20:	f000 8083 	beq.w	800602a <_printf_i+0x136>
 8005f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005f2c:	e032      	b.n	8005f94 <_printf_i+0xa0>
 8005f2e:	2964      	cmp	r1, #100	; 0x64
 8005f30:	d001      	beq.n	8005f36 <_printf_i+0x42>
 8005f32:	2969      	cmp	r1, #105	; 0x69
 8005f34:	d1f6      	bne.n	8005f24 <_printf_i+0x30>
 8005f36:	6820      	ldr	r0, [r4, #0]
 8005f38:	6813      	ldr	r3, [r2, #0]
 8005f3a:	0605      	lsls	r5, r0, #24
 8005f3c:	f103 0104 	add.w	r1, r3, #4
 8005f40:	d52a      	bpl.n	8005f98 <_printf_i+0xa4>
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6011      	str	r1, [r2, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da03      	bge.n	8005f52 <_printf_i+0x5e>
 8005f4a:	222d      	movs	r2, #45	; 0x2d
 8005f4c:	425b      	negs	r3, r3
 8005f4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005f52:	486f      	ldr	r0, [pc, #444]	; (8006110 <_printf_i+0x21c>)
 8005f54:	220a      	movs	r2, #10
 8005f56:	e039      	b.n	8005fcc <_printf_i+0xd8>
 8005f58:	2973      	cmp	r1, #115	; 0x73
 8005f5a:	f000 809d 	beq.w	8006098 <_printf_i+0x1a4>
 8005f5e:	d808      	bhi.n	8005f72 <_printf_i+0x7e>
 8005f60:	296f      	cmp	r1, #111	; 0x6f
 8005f62:	d020      	beq.n	8005fa6 <_printf_i+0xb2>
 8005f64:	2970      	cmp	r1, #112	; 0x70
 8005f66:	d1dd      	bne.n	8005f24 <_printf_i+0x30>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	f043 0320 	orr.w	r3, r3, #32
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	e003      	b.n	8005f7a <_printf_i+0x86>
 8005f72:	2975      	cmp	r1, #117	; 0x75
 8005f74:	d017      	beq.n	8005fa6 <_printf_i+0xb2>
 8005f76:	2978      	cmp	r1, #120	; 0x78
 8005f78:	d1d4      	bne.n	8005f24 <_printf_i+0x30>
 8005f7a:	2378      	movs	r3, #120	; 0x78
 8005f7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f80:	4864      	ldr	r0, [pc, #400]	; (8006114 <_printf_i+0x220>)
 8005f82:	e055      	b.n	8006030 <_printf_i+0x13c>
 8005f84:	6813      	ldr	r3, [r2, #0]
 8005f86:	1d19      	adds	r1, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6011      	str	r1, [r2, #0]
 8005f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f94:	2301      	movs	r3, #1
 8005f96:	e08c      	b.n	80060b2 <_printf_i+0x1be>
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6011      	str	r1, [r2, #0]
 8005f9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fa0:	bf18      	it	ne
 8005fa2:	b21b      	sxthne	r3, r3
 8005fa4:	e7cf      	b.n	8005f46 <_printf_i+0x52>
 8005fa6:	6813      	ldr	r3, [r2, #0]
 8005fa8:	6825      	ldr	r5, [r4, #0]
 8005faa:	1d18      	adds	r0, r3, #4
 8005fac:	6010      	str	r0, [r2, #0]
 8005fae:	0628      	lsls	r0, r5, #24
 8005fb0:	d501      	bpl.n	8005fb6 <_printf_i+0xc2>
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	e002      	b.n	8005fbc <_printf_i+0xc8>
 8005fb6:	0668      	lsls	r0, r5, #25
 8005fb8:	d5fb      	bpl.n	8005fb2 <_printf_i+0xbe>
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	4854      	ldr	r0, [pc, #336]	; (8006110 <_printf_i+0x21c>)
 8005fbe:	296f      	cmp	r1, #111	; 0x6f
 8005fc0:	bf14      	ite	ne
 8005fc2:	220a      	movne	r2, #10
 8005fc4:	2208      	moveq	r2, #8
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fcc:	6865      	ldr	r5, [r4, #4]
 8005fce:	60a5      	str	r5, [r4, #8]
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	f2c0 8095 	blt.w	8006100 <_printf_i+0x20c>
 8005fd6:	6821      	ldr	r1, [r4, #0]
 8005fd8:	f021 0104 	bic.w	r1, r1, #4
 8005fdc:	6021      	str	r1, [r4, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d13d      	bne.n	800605e <_printf_i+0x16a>
 8005fe2:	2d00      	cmp	r5, #0
 8005fe4:	f040 808e 	bne.w	8006104 <_printf_i+0x210>
 8005fe8:	4665      	mov	r5, ip
 8005fea:	2a08      	cmp	r2, #8
 8005fec:	d10b      	bne.n	8006006 <_printf_i+0x112>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	07db      	lsls	r3, r3, #31
 8005ff2:	d508      	bpl.n	8006006 <_printf_i+0x112>
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	bfde      	ittt	le
 8005ffc:	2330      	movle	r3, #48	; 0x30
 8005ffe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006002:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006006:	ebac 0305 	sub.w	r3, ip, r5
 800600a:	6123      	str	r3, [r4, #16]
 800600c:	f8cd 8000 	str.w	r8, [sp]
 8006010:	463b      	mov	r3, r7
 8006012:	aa03      	add	r2, sp, #12
 8006014:	4621      	mov	r1, r4
 8006016:	4630      	mov	r0, r6
 8006018:	f7ff fef6 	bl	8005e08 <_printf_common>
 800601c:	3001      	adds	r0, #1
 800601e:	d14d      	bne.n	80060bc <_printf_i+0x1c8>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006024:	b005      	add	sp, #20
 8006026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800602a:	4839      	ldr	r0, [pc, #228]	; (8006110 <_printf_i+0x21c>)
 800602c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006030:	6813      	ldr	r3, [r2, #0]
 8006032:	6821      	ldr	r1, [r4, #0]
 8006034:	1d1d      	adds	r5, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6015      	str	r5, [r2, #0]
 800603a:	060a      	lsls	r2, r1, #24
 800603c:	d50b      	bpl.n	8006056 <_printf_i+0x162>
 800603e:	07ca      	lsls	r2, r1, #31
 8006040:	bf44      	itt	mi
 8006042:	f041 0120 	orrmi.w	r1, r1, #32
 8006046:	6021      	strmi	r1, [r4, #0]
 8006048:	b91b      	cbnz	r3, 8006052 <_printf_i+0x15e>
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	f022 0220 	bic.w	r2, r2, #32
 8006050:	6022      	str	r2, [r4, #0]
 8006052:	2210      	movs	r2, #16
 8006054:	e7b7      	b.n	8005fc6 <_printf_i+0xd2>
 8006056:	064d      	lsls	r5, r1, #25
 8006058:	bf48      	it	mi
 800605a:	b29b      	uxthmi	r3, r3
 800605c:	e7ef      	b.n	800603e <_printf_i+0x14a>
 800605e:	4665      	mov	r5, ip
 8006060:	fbb3 f1f2 	udiv	r1, r3, r2
 8006064:	fb02 3311 	mls	r3, r2, r1, r3
 8006068:	5cc3      	ldrb	r3, [r0, r3]
 800606a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800606e:	460b      	mov	r3, r1
 8006070:	2900      	cmp	r1, #0
 8006072:	d1f5      	bne.n	8006060 <_printf_i+0x16c>
 8006074:	e7b9      	b.n	8005fea <_printf_i+0xf6>
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	6825      	ldr	r5, [r4, #0]
 800607a:	6961      	ldr	r1, [r4, #20]
 800607c:	1d18      	adds	r0, r3, #4
 800607e:	6010      	str	r0, [r2, #0]
 8006080:	0628      	lsls	r0, r5, #24
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	d501      	bpl.n	800608a <_printf_i+0x196>
 8006086:	6019      	str	r1, [r3, #0]
 8006088:	e002      	b.n	8006090 <_printf_i+0x19c>
 800608a:	066a      	lsls	r2, r5, #25
 800608c:	d5fb      	bpl.n	8006086 <_printf_i+0x192>
 800608e:	8019      	strh	r1, [r3, #0]
 8006090:	2300      	movs	r3, #0
 8006092:	6123      	str	r3, [r4, #16]
 8006094:	4665      	mov	r5, ip
 8006096:	e7b9      	b.n	800600c <_printf_i+0x118>
 8006098:	6813      	ldr	r3, [r2, #0]
 800609a:	1d19      	adds	r1, r3, #4
 800609c:	6011      	str	r1, [r2, #0]
 800609e:	681d      	ldr	r5, [r3, #0]
 80060a0:	6862      	ldr	r2, [r4, #4]
 80060a2:	2100      	movs	r1, #0
 80060a4:	4628      	mov	r0, r5
 80060a6:	f7fa f8bb 	bl	8000220 <memchr>
 80060aa:	b108      	cbz	r0, 80060b0 <_printf_i+0x1bc>
 80060ac:	1b40      	subs	r0, r0, r5
 80060ae:	6060      	str	r0, [r4, #4]
 80060b0:	6863      	ldr	r3, [r4, #4]
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	2300      	movs	r3, #0
 80060b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ba:	e7a7      	b.n	800600c <_printf_i+0x118>
 80060bc:	6923      	ldr	r3, [r4, #16]
 80060be:	462a      	mov	r2, r5
 80060c0:	4639      	mov	r1, r7
 80060c2:	4630      	mov	r0, r6
 80060c4:	47c0      	blx	r8
 80060c6:	3001      	adds	r0, #1
 80060c8:	d0aa      	beq.n	8006020 <_printf_i+0x12c>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	079b      	lsls	r3, r3, #30
 80060ce:	d413      	bmi.n	80060f8 <_printf_i+0x204>
 80060d0:	68e0      	ldr	r0, [r4, #12]
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	4298      	cmp	r0, r3
 80060d6:	bfb8      	it	lt
 80060d8:	4618      	movlt	r0, r3
 80060da:	e7a3      	b.n	8006024 <_printf_i+0x130>
 80060dc:	2301      	movs	r3, #1
 80060de:	464a      	mov	r2, r9
 80060e0:	4639      	mov	r1, r7
 80060e2:	4630      	mov	r0, r6
 80060e4:	47c0      	blx	r8
 80060e6:	3001      	adds	r0, #1
 80060e8:	d09a      	beq.n	8006020 <_printf_i+0x12c>
 80060ea:	3501      	adds	r5, #1
 80060ec:	68e3      	ldr	r3, [r4, #12]
 80060ee:	9a03      	ldr	r2, [sp, #12]
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	42ab      	cmp	r3, r5
 80060f4:	dcf2      	bgt.n	80060dc <_printf_i+0x1e8>
 80060f6:	e7eb      	b.n	80060d0 <_printf_i+0x1dc>
 80060f8:	2500      	movs	r5, #0
 80060fa:	f104 0919 	add.w	r9, r4, #25
 80060fe:	e7f5      	b.n	80060ec <_printf_i+0x1f8>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ac      	bne.n	800605e <_printf_i+0x16a>
 8006104:	7803      	ldrb	r3, [r0, #0]
 8006106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800610a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800610e:	e76c      	b.n	8005fea <_printf_i+0xf6>
 8006110:	08006341 	.word	0x08006341
 8006114:	08006352 	.word	0x08006352

08006118 <_sbrk_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4c06      	ldr	r4, [pc, #24]	; (8006134 <_sbrk_r+0x1c>)
 800611c:	2300      	movs	r3, #0
 800611e:	4605      	mov	r5, r0
 8006120:	4608      	mov	r0, r1
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	f7fa fe4e 	bl	8000dc4 <_sbrk>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_sbrk_r+0x1a>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	b103      	cbz	r3, 8006132 <_sbrk_r+0x1a>
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	20000308 	.word	0x20000308

08006138 <__sread>:
 8006138:	b510      	push	{r4, lr}
 800613a:	460c      	mov	r4, r1
 800613c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006140:	f000 f896 	bl	8006270 <_read_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	bfab      	itete	ge
 8006148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800614a:	89a3      	ldrhlt	r3, [r4, #12]
 800614c:	181b      	addge	r3, r3, r0
 800614e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006152:	bfac      	ite	ge
 8006154:	6563      	strge	r3, [r4, #84]	; 0x54
 8006156:	81a3      	strhlt	r3, [r4, #12]
 8006158:	bd10      	pop	{r4, pc}

0800615a <__swrite>:
 800615a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615e:	461f      	mov	r7, r3
 8006160:	898b      	ldrh	r3, [r1, #12]
 8006162:	05db      	lsls	r3, r3, #23
 8006164:	4605      	mov	r5, r0
 8006166:	460c      	mov	r4, r1
 8006168:	4616      	mov	r6, r2
 800616a:	d505      	bpl.n	8006178 <__swrite+0x1e>
 800616c:	2302      	movs	r3, #2
 800616e:	2200      	movs	r2, #0
 8006170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006174:	f000 f868 	bl	8006248 <_lseek_r>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800617e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006182:	81a3      	strh	r3, [r4, #12]
 8006184:	4632      	mov	r2, r6
 8006186:	463b      	mov	r3, r7
 8006188:	4628      	mov	r0, r5
 800618a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	f000 b817 	b.w	80061c0 <_write_r>

08006192 <__sseek>:
 8006192:	b510      	push	{r4, lr}
 8006194:	460c      	mov	r4, r1
 8006196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619a:	f000 f855 	bl	8006248 <_lseek_r>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	bf15      	itete	ne
 80061a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80061a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061ae:	81a3      	strheq	r3, [r4, #12]
 80061b0:	bf18      	it	ne
 80061b2:	81a3      	strhne	r3, [r4, #12]
 80061b4:	bd10      	pop	{r4, pc}

080061b6 <__sclose>:
 80061b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ba:	f000 b813 	b.w	80061e4 <_close_r>
	...

080061c0 <_write_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4c07      	ldr	r4, [pc, #28]	; (80061e0 <_write_r+0x20>)
 80061c4:	4605      	mov	r5, r0
 80061c6:	4608      	mov	r0, r1
 80061c8:	4611      	mov	r1, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f7fa fc0f 	bl	80009f2 <_write>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_write_r+0x1e>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	b103      	cbz	r3, 80061de <_write_r+0x1e>
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000308 	.word	0x20000308

080061e4 <_close_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4c06      	ldr	r4, [pc, #24]	; (8006200 <_close_r+0x1c>)
 80061e8:	2300      	movs	r3, #0
 80061ea:	4605      	mov	r5, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	f7fa fdb3 	bl	8000d5a <_close>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_close_r+0x1a>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_close_r+0x1a>
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20000308 	.word	0x20000308

08006204 <_fstat_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4c07      	ldr	r4, [pc, #28]	; (8006224 <_fstat_r+0x20>)
 8006208:	2300      	movs	r3, #0
 800620a:	4605      	mov	r5, r0
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	f7fa fdae 	bl	8000d72 <_fstat>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d102      	bne.n	8006220 <_fstat_r+0x1c>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	b103      	cbz	r3, 8006220 <_fstat_r+0x1c>
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	20000308 	.word	0x20000308

08006228 <_isatty_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4c06      	ldr	r4, [pc, #24]	; (8006244 <_isatty_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4605      	mov	r5, r0
 8006230:	4608      	mov	r0, r1
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	f7fa fdad 	bl	8000d92 <_isatty>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_isatty_r+0x1a>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	b103      	cbz	r3, 8006242 <_isatty_r+0x1a>
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	20000308 	.word	0x20000308

08006248 <_lseek_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4c07      	ldr	r4, [pc, #28]	; (8006268 <_lseek_r+0x20>)
 800624c:	4605      	mov	r5, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fa fda6 	bl	8000da8 <_lseek>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_lseek_r+0x1e>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	b103      	cbz	r3, 8006266 <_lseek_r+0x1e>
 8006264:	602b      	str	r3, [r5, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000308 	.word	0x20000308

0800626c <__malloc_lock>:
 800626c:	4770      	bx	lr

0800626e <__malloc_unlock>:
 800626e:	4770      	bx	lr

08006270 <_read_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4c07      	ldr	r4, [pc, #28]	; (8006290 <_read_r+0x20>)
 8006274:	4605      	mov	r5, r0
 8006276:	4608      	mov	r0, r1
 8006278:	4611      	mov	r1, r2
 800627a:	2200      	movs	r2, #0
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fa fd4e 	bl	8000d20 <_read>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_read_r+0x1e>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	b103      	cbz	r3, 800628e <_read_r+0x1e>
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20000308 	.word	0x20000308

08006294 <_init>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr

080062a0 <_fini>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	bf00      	nop
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr
