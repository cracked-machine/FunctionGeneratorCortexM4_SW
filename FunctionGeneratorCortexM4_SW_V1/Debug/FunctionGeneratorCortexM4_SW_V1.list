
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc4  08002cc4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc4  08002cc4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc4  08002cc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000074  08002d40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002d40  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff51  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000225d  00000000  00000000  0002fff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  00032258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026de2  00000000  00000000  00033e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2f0  00000000  00000000  0005ac02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f701f  00000000  00000000  00066ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015df11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004124  00000000  00000000  0015df8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002c30 	.word	0x08002c30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	08002c30 	.word	0x08002c30

08000218 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800021e:	463b      	mov	r3, r7
 8000220:	2230      	movs	r2, #48	; 0x30
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f002 f893 	bl	8002350 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <MX_DAC1_Init+0xa0>)
 800022c:	4a23      	ldr	r2, [pc, #140]	; (80002bc <MX_DAC1_Init+0xa4>)
 800022e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000230:	4821      	ldr	r0, [pc, #132]	; (80002b8 <MX_DAC1_Init+0xa0>)
 8000232:	f000 fcd8 	bl	8000be6 <HAL_DAC_Init>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800023c:	f000 f9e0 	bl	8000600 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000240:	2302      	movs	r3, #2
 8000242:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000244:	2300      	movs	r3, #0
 8000246:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000248:	2300      	movs	r3, #0
 800024a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800024c:	2300      	movs	r3, #0
 800024e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000250:	231e      	movs	r3, #30
 8000252:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800025c:	2301      	movs	r3, #1
 800025e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000260:	2300      	movs	r3, #0
 8000262:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	4619      	mov	r1, r3
 800026a:	4813      	ldr	r0, [pc, #76]	; (80002b8 <MX_DAC1_Init+0xa0>)
 800026c:	f000 fd58 	bl	8000d20 <HAL_DAC_ConfigChannel>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000276:	f000 f9c3 	bl	8000600 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800027a:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800027e:	2100      	movs	r1, #0
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_DAC1_Init+0xa0>)
 8000282:	f000 fef9 	bl	8001078 <HAL_DACEx_TriangleWaveGenerate>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800028c:	f000 f9b8 	bl	8000600 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	2210      	movs	r2, #16
 800029c:	4619      	mov	r1, r3
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <MX_DAC1_Init+0xa0>)
 80002a0:	f000 fd3e 	bl	8000d20 <HAL_DAC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 80002aa:	f000 f9a9 	bl	8000600 <Error_Handler>
  }

}
 80002ae:	bf00      	nop
 80002b0:	3730      	adds	r7, #48	; 0x30
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	50000800 	.word	0x50000800

080002c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a15      	ldr	r2, [pc, #84]	; (8000334 <HAL_DAC_MspInit+0x74>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d124      	bne.n	800032c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <HAL_DAC_MspInit+0x78>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4a14      	ldr	r2, [pc, #80]	; (8000338 <HAL_DAC_MspInit+0x78>)
 80002e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <HAL_DAC_MspInit+0x78>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002f6:	613b      	str	r3, [r7, #16]
 80002f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <HAL_DAC_MspInit+0x78>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <HAL_DAC_MspInit+0x78>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <HAL_DAC_MspInit+0x78>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000312:	2330      	movs	r3, #48	; 0x30
 8000314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000316:	2303      	movs	r3, #3
 8000318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f000 fede 	bl	80010e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800032c:	bf00      	nop
 800032e:	3728      	adds	r7, #40	; 0x28
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	50000800 	.word	0x50000800
 8000338:	40021000 	.word	0x40021000

0800033c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b31      	ldr	r3, [pc, #196]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	4a30      	ldr	r2, [pc, #192]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <MX_GPIO_Init+0xdc>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	4a2a      	ldr	r2, [pc, #168]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	f003 0304 	and.w	r3, r3, #4
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	4a24      	ldr	r2, [pc, #144]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000388:	f043 0302 	orr.w	r3, r3, #2
 800038c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <MX_GPIO_Init+0xdc>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	f003 0302 	and.w	r3, r3, #2
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2108      	movs	r1, #8
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f001 f823 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SG2_Pin|SG1_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2130      	movs	r1, #48	; 0x30
 80003aa:	481c      	ldr	r0, [pc, #112]	; (800041c <MX_GPIO_Init+0xe0>)
 80003ac:	f001 f81e 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2101      	movs	r1, #1
 80003b4:	481a      	ldr	r0, [pc, #104]	; (8000420 <MX_GPIO_Init+0xe4>)
 80003b6:	f001 f819 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80003ba:	2308      	movs	r3, #8
 80003bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f000 fe88 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SG2_Pin|SG1_Pin;
 80003d8:	2330      	movs	r3, #48	; 0x30
 80003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e8:	f107 030c 	add.w	r3, r7, #12
 80003ec:	4619      	mov	r1, r3
 80003ee:	480b      	ldr	r0, [pc, #44]	; (800041c <MX_GPIO_Init+0xe0>)
 80003f0:	f000 fe7a 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 80003f4:	2301      	movs	r3, #1
 80003f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4619      	mov	r1, r3
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_GPIO_Init+0xe4>)
 800040c:	f000 fe6c 	bl	80010e8 <HAL_GPIO_Init>

}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	48000800 	.word	0x48000800
 8000420:	48000400 	.word	0x48000400

08000424 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800042c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000430:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d013      	beq.n	8000464 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800043c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000440:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000444:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000448:	2b00      	cmp	r3, #0
 800044a:	d00b      	beq.n	8000464 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800044c:	e000      	b.n	8000450 <ITM_SendChar+0x2c>
    {
      __NOP();
 800044e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000450:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800045a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000464:	687b      	ldr	r3, [r7, #4]
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b086      	sub	sp, #24
 8000476:	af00      	add	r7, sp, #0
 8000478:	60f8      	str	r0, [r7, #12]
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	e009      	b.n	800049c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	60ba      	str	r2, [r7, #8]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ffc7 	bl	8000424 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	3301      	adds	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	dbf1      	blt.n	8000488 <_write+0x16>
  return len;
 80004a4:	687b      	ldr	r3, [r7, #4]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fa21 	bl	80008fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f862 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f7ff ff3e 	bl	800033c <MX_GPIO_Init>
  MX_DAC1_Init();
 80004c0:	f7ff feaa 	bl	8000218 <MX_DAC1_Init>
  MX_TIM6_Init();
 80004c4:	f000 f99a 	bl	80007fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80004c8:	2100      	movs	r1, #0
 80004ca:	4826      	ldr	r0, [pc, #152]	; (8000564 <main+0xb4>)
 80004cc:	f000 fbad 	bl	8000c2a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80004d0:	2110      	movs	r1, #16
 80004d2:	4824      	ldr	r0, [pc, #144]	; (8000564 <main+0xb4>)
 80004d4:	f000 fba9 	bl	8000c2a <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim6);
 80004d8:	4823      	ldr	r0, [pc, #140]	; (8000568 <main+0xb8>)
 80004da:	f001 fda3 	bl	8002024 <HAL_TIM_Base_Start>


  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2108      	movs	r1, #8
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f000 ff81 	bl	80013ec <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	481f      	ldr	r0, [pc, #124]	; (800056c <main+0xbc>)
 80004f0:	f000 ff7c 	bl	80013ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	481d      	ldr	r0, [pc, #116]	; (8000570 <main+0xc0>)
 80004fa:	f000 ff77 	bl	80013ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2110      	movs	r1, #16
 8000502:	481b      	ldr	r0, [pc, #108]	; (8000570 <main+0xc0>)
 8000504:	f000 ff72 	bl	80013ec <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Test\n");
 8000508:	481a      	ldr	r0, [pc, #104]	; (8000574 <main+0xc4>)
 800050a:	f001 ff85 	bl	8002418 <puts>

	  // up=1, down=0
	  if(dcbias_dir) { dcbias++; }
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <main+0xc8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d006      	beq.n	8000524 <main+0x74>
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <main+0xcc>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <main+0xcc>)
 8000520:	801a      	strh	r2, [r3, #0]
 8000522:	e005      	b.n	8000530 <main+0x80>
	  else { dcbias--; }
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <main+0xcc>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	b29a      	uxth	r2, r3
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0xcc>)
 800052e:	801a      	strh	r2, [r3, #0]
	  if(dcbias < 1) { dcbias_dir = 1; }
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0xcc>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <main+0x8e>
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0xc8>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) {dcbias_dir = 0; }
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <main+0xcc>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000546:	d302      	bcc.n	800054e <main+0x9e>
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <main+0xc8>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]


	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0xcc>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	2200      	movs	r2, #0
 8000554:	2110      	movs	r1, #16
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <main+0xb4>)
 8000558:	f000 fbba 	bl	8000cd0 <HAL_DAC_SetValue>
	  //HAL_GPIO_TogglePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
	  HAL_Delay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f000 fa3d 	bl	80009dc <HAL_Delay>
	  printf("Test\n");
 8000562:	e7d1      	b.n	8000508 <main+0x58>
 8000564:	200000a0 	.word	0x200000a0
 8000568:	200000b4 	.word	0x200000b4
 800056c:	48000400 	.word	0x48000400
 8000570:	48000800 	.word	0x48000800
 8000574:	08002c48 	.word	0x08002c48
 8000578:	20000000 	.word	0x20000000
 800057c:	20000090 	.word	0x20000090

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2238      	movs	r2, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fede 	bl	8002350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a6:	f000 ff39 	bl	800141c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2340      	movs	r3, #64	; 0x40
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0318 	add.w	r3, r7, #24
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 ffcf 	bl	8001564 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005cc:	f000 f818 	bl	8000600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fad3 	bl	8001b94 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005f4:	f000 f804 	bl	8000600 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6093      	str	r3, [r2, #8]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40007000 	.word	0x40007000

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x44>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x44>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6613      	str	r3, [r2, #96]	; 0x60
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x44>)
 8000644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x44>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_MspInit+0x44>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	6593      	str	r3, [r2, #88]	; 0x58
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_MspInit+0x44>)
 800065c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000666:	f7ff ffd3 	bl	8000610 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f968 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e00a      	b.n	80006fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006e6:	f3af 8000 	nop.w
 80006ea:	4601      	mov	r1, r0
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	b2ca      	uxtb	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbf0      	blt.n	80006e6 <_read+0x12>
	}

return len;
 8000704:	687b      	ldr	r3, [r7, #4]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_close>:
	}
	return len;
}

int _close(int file)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
	return -1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000736:	605a      	str	r2, [r3, #4]
	return 0;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <_isatty>:

int _isatty(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	return 1;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <_sbrk+0x50>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <_sbrk+0x16>
		heap_end = &end;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <_sbrk+0x50>)
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <_sbrk+0x54>)
 800078c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <_sbrk+0x50>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <_sbrk+0x50>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	466a      	mov	r2, sp
 800079e:	4293      	cmp	r3, r2
 80007a0:	d907      	bls.n	80007b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007a2:	f001 fdab 	bl	80022fc <__errno>
 80007a6:	4602      	mov	r2, r0
 80007a8:	230c      	movs	r3, #12
 80007aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b0:	e006      	b.n	80007c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <_sbrk+0x50>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <_sbrk+0x50>)
 80007bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000094 	.word	0x20000094
 80007cc:	20000108 	.word	0x20000108

080007d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <SystemInit+0x28>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <SystemInit+0x28>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SystemInit+0x28>)
 80007e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ea:	609a      	str	r2, [r3, #8]
#endif
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_TIM6_Init+0x64>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_TIM6_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_TIM6_Init+0x64>)
 8000814:	2201      	movs	r2, #1
 8000816:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_TIM6_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_TIM6_Init+0x64>)
 8000820:	2240      	movs	r2, #64	; 0x40
 8000822:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_TIM6_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_TIM6_Init+0x64>)
 800082c:	f001 fba2 	bl	8001f74 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000836:	f7ff fee3 	bl	8000600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800083a:	2320      	movs	r3, #32
 800083c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_TIM6_Init+0x64>)
 8000848:	f001 fcc2 	bl	80021d0 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000852:	f7ff fed5 	bl	8000600 <Error_Handler>
  }

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000b4 	.word	0x200000b4
 8000864:	40001000 	.word	0x40001000

08000868 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_TIM_Base_MspInit+0x38>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10b      	bne.n	8000892 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40001000 	.word	0x40001000
 80008a4:	40021000 	.word	0x40021000

080008a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ae:	490e      	ldr	r1, [pc, #56]	; (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c4:	4c0b      	ldr	r4, [pc, #44]	; (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d2:	f7ff ff7d 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d6:	f001 fd17 	bl	8002308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008da:	f7ff fde9 	bl	80004b0 <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   r0, =_estack
 80008e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008ec:	08002ccc 	.word	0x08002ccc
  ldr r2, =_sbss
 80008f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008f4:	20000108 	.word	0x20000108

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>

080008fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f93d 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f80e 	bl	800092c <HAL_InitTick>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	e001      	b.n	8000920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800091c:	f7ff fe88 	bl	8000630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000920:	79fb      	ldrb	r3, [r7, #7]

}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <HAL_InitTick+0x68>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d022      	beq.n	8000986 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_InitTick+0x6c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <HAL_InitTick+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800094c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000950:	fbb2 f3f3 	udiv	r3, r2, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f93a 	bl	8000bce <HAL_SYSTICK_Config>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10f      	bne.n	8000980 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d809      	bhi.n	800097a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000966:	2200      	movs	r2, #0
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800096e:	f000 f914 	bl	8000b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_InitTick+0x70>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	e007      	b.n	800098a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	e004      	b.n	800098a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
 8000984:	e001      	b.n	800098a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000000c 	.word	0x2000000c
 8000998:	20000004 	.word	0x20000004
 800099c:	20000008 	.word	0x20000008

080009a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x1c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x20>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x1c>)
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20000100 	.word	0x20000100
 80009c0:	2000000c 	.word	0x2000000c

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000100 	.word	0x20000100

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009f4:	d004      	beq.n	8000a00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_Delay+0x40>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a00:	bf00      	nop
 8000a02:	f7ff ffdf 	bl	80009c4 <HAL_GetTick>
 8000a06:	4602      	mov	r2, r0
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d8f7      	bhi.n	8000a02 <HAL_Delay+0x26>
  {
  }
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <__NVIC_SetPriorityGrouping>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_SetPriority>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <SysTick_Config>:
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b64:	f7ff ff8e 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff47 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff5e 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff90 	bl	8000ad8 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5f 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffb2 	bl	8000b40 <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e014      	b.n	8000c22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d105      	bne.n	8000c0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fb59 	bl	80002c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2202      	movs	r2, #2
 8000c12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d101      	bne.n	8000c40 <HAL_DAC_Start+0x16>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e043      	b.n	8000cc8 <HAL_DAC_Start+0x9e>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2202      	movs	r2, #2
 8000c4a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6819      	ldr	r1, [r3, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2201      	movs	r2, #1
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff feb9 	bl	80009dc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10f      	bne.n	8000c90 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d11d      	bne.n	8000cba <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 0201 	orr.w	r2, r2, #1
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	e014      	b.n	8000cba <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d107      	bne.n	8000cba <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0202 	orr.w	r2, r2, #2
 8000cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e004      	b.n	8000d0a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	3314      	adds	r3, #20
 8000d08:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	795b      	ldrb	r3, [r3, #5]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_DAC_ConfigChannel+0x1c>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e194      	b.n	8001066 <HAL_DAC_ConfigChannel+0x346>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2202      	movs	r2, #2
 8000d46:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d174      	bne.n	8000e3a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d137      	bne.n	8000dc6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000d56:	f7ff fe35 	bl	80009c4 <HAL_GetTick>
 8000d5a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000d5c:	e011      	b.n	8000d82 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000d5e:	f7ff fe31 	bl	80009c4 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d90a      	bls.n	8000d82 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	f043 0208 	orr.w	r2, r3, #8
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e171      	b.n	8001066 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1e6      	bne.n	8000d5e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fe23 	bl	80009dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000da0:	e01e      	b.n	8000de0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000da2:	f7ff fe0f 	bl	80009c4 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d90a      	bls.n	8000dc6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f043 0208 	orr.w	r2, r3, #8
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e14f      	b.n	8001066 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	dbe8      	blt.n	8000da2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fe03 	bl	80009dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	ea02 0103 	and.w	r1, r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	409a      	lsls	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	21ff      	movs	r1, #255	; 0xff
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	ea02 0103 	and.w	r1, r2, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	409a      	lsls	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d11d      	bne.n	8000e7e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	221f      	movs	r2, #31
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e72:	4313      	orrs	r3, r2
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e96:	4013      	ands	r3, r2
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	e011      	b.n	8000ed0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	e008      	b.n	8000ed0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
 8000eca:	e001      	b.n	8000ed0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	6a3a      	ldr	r2, [r7, #32]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	791b      	ldrb	r3, [r3, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d102      	bne.n	8000f04 <HAL_DAC_ConfigChannel+0x1e4>
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	e000      	b.n	8000f06 <HAL_DAC_ConfigChannel+0x1e6>
 8000f04:	2300      	movs	r3, #0
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f1e:	4013      	ands	r3, r2
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	795b      	ldrb	r3, [r3, #5]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d102      	bne.n	8000f30 <HAL_DAC_ConfigChannel+0x210>
 8000f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2e:	e000      	b.n	8000f32 <HAL_DAC_ConfigChannel+0x212>
 8000f30:	2300      	movs	r3, #0
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d114      	bne.n	8000f72 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8000f48:	f000 ffc2 	bl	8001ed0 <HAL_RCC_GetHCLKFreq>
 8000f4c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_DAC_ConfigChannel+0x350>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d904      	bls.n	8000f60 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5e:	e00d      	b.n	8000f7c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4a44      	ldr	r2, [pc, #272]	; (8001074 <HAL_DAC_ConfigChannel+0x354>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d909      	bls.n	8000f7c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f70:	e004      	b.n	8000f7c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6819      	ldr	r1, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fce:	4013      	ands	r3, r2
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6819      	ldr	r1, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	22c0      	movs	r2, #192	; 0xc0
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43da      	mvns	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	400a      	ands	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	f640 710f 	movw	r1, #3855	; 0xf0f
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	ea02 0103 	and.w	r1, r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	409a      	lsls	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2201      	movs	r2, #1
 800105c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	09896800 	.word	0x09896800
 8001074:	04c4b400 	.word	0x04c4b400

08001078 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	795b      	ldrb	r3, [r3, #5]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d101      	bne.n	8001090 <HAL_DACEx_TriangleWaveGenerate+0x18>
 800108c:	2302      	movs	r3, #2
 800108e:	e024      	b.n	80010da <HAL_DACEx_TriangleWaveGenerate+0x62>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2201      	movs	r2, #1
 8001094:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2202      	movs	r2, #2
 800109a:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	ea02 0103 	and.w	r1, r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	409a      	lsls	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2201      	movs	r2, #1
 80010d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010f6:	e15a      	b.n	80013ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 814c 	beq.w	80013a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00b      	beq.n	8001130 <HAL_GPIO_Init+0x48>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001124:	2b11      	cmp	r3, #17
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b12      	cmp	r3, #18
 800112e:	d130      	bne.n	8001192 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001166:	2201      	movs	r2, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	f003 0201 	and.w	r2, r3, #1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0xea>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b12      	cmp	r3, #18
 80011d0:	d123      	bne.n	800121a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	6939      	ldr	r1, [r7, #16]
 8001216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0203 	and.w	r2, r3, #3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80a6 	beq.w	80013a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125c:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_GPIO_Init+0x2e4>)
 800125e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001260:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <HAL_GPIO_Init+0x2e4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6613      	str	r3, [r2, #96]	; 0x60
 8001268:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_GPIO_Init+0x2e4>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001274:	4a56      	ldr	r2, [pc, #344]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	220f      	movs	r2, #15
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800129e:	d01f      	beq.n	80012e0 <HAL_GPIO_Init+0x1f8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <HAL_GPIO_Init+0x2ec>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d019      	beq.n	80012dc <HAL_GPIO_Init+0x1f4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <HAL_GPIO_Init+0x2f0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d013      	beq.n	80012d8 <HAL_GPIO_Init+0x1f0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a4a      	ldr	r2, [pc, #296]	; (80013dc <HAL_GPIO_Init+0x2f4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00d      	beq.n	80012d4 <HAL_GPIO_Init+0x1ec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a49      	ldr	r2, [pc, #292]	; (80013e0 <HAL_GPIO_Init+0x2f8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d007      	beq.n	80012d0 <HAL_GPIO_Init+0x1e8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_GPIO_Init+0x2fc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d101      	bne.n	80012cc <HAL_GPIO_Init+0x1e4>
 80012c8:	2305      	movs	r3, #5
 80012ca:	e00a      	b.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012cc:	2306      	movs	r3, #6
 80012ce:	e008      	b.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012d0:	2304      	movs	r3, #4
 80012d2:	e006      	b.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e004      	b.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012d8:	2302      	movs	r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x1fa>
 80012e0:	2300      	movs	r3, #0
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	f002 0203 	and.w	r2, r2, #3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4093      	lsls	r3, r2
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f2:	4937      	ldr	r1, [pc, #220]	; (80013d0 <HAL_GPIO_Init+0x2e8>)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001324:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_GPIO_Init+0x300>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800134e:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001378:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x300>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_GPIO_Init+0x300>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_GPIO_Init+0x300>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f ae9d 	bne.w	80010f8 <HAL_GPIO_Init+0x10>
  }
}
 80013be:	bf00      	nop
 80013c0:	371c      	adds	r7, #28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	48001000 	.word	0x48001000
 80013e4:	48001400 	.word	0x48001400
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e002      	b.n	8001410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d141      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800142a:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001436:	d131      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800143e:	4a46      	ldr	r2, [pc, #280]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001448:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001458:	4b40      	ldr	r3, [pc, #256]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2232      	movs	r2, #50	; 0x32
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4a3f      	ldr	r2, [pc, #252]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146e:	e002      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3b01      	subs	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001482:	d102      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f2      	bne.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001496:	d158      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e057      	b.n	800154c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a2:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014ac:	e04d      	b.n	800154a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b4:	d141      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c2:	d131      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ca:	4a23      	ldr	r2, [pc, #140]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014dc:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2232      	movs	r2, #50	; 0x32
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	0c9b      	lsrs	r3, r3, #18
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fa:	e002      	b.n	8001502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3b01      	subs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150e:	d102      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f2      	bne.n	80014fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001522:	d112      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e011      	b.n	800154c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001538:	e007      	b.n	800154a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001548:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40007000 	.word	0x40007000
 800155c:	20000004 	.word	0x20000004
 8001560:	431bde83 	.word	0x431bde83

08001564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e308      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d075      	beq.n	800166e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001582:	4ba3      	ldr	r3, [pc, #652]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800158c:	4ba0      	ldr	r3, [pc, #640]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d102      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3e>
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d002      	beq.n	80015a8 <HAL_RCC_OscConfig+0x44>
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d10b      	bne.n	80015c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	4b99      	ldr	r3, [pc, #612]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d05b      	beq.n	800166c <HAL_RCC_OscConfig+0x108>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d157      	bne.n	800166c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e2e3      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c8:	d106      	bne.n	80015d8 <HAL_RCC_OscConfig+0x74>
 80015ca:	4b91      	ldr	r3, [pc, #580]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a90      	ldr	r2, [pc, #576]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x98>
 80015e2:	4b8b      	ldr	r3, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a8a      	ldr	r2, [pc, #552]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b88      	ldr	r3, [pc, #544]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a87      	ldr	r2, [pc, #540]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xb0>
 80015fc:	4b84      	ldr	r3, [pc, #528]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a83      	ldr	r2, [pc, #524]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b81      	ldr	r3, [pc, #516]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a80      	ldr	r2, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff f9d2 	bl	80009c4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff f9ce 	bl	80009c4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e2a8      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001636:	4b76      	ldr	r3, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xc0>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff f9be 	bl	80009c4 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff f9ba 	bl	80009c4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e294      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0xe8>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d075      	beq.n	8001766 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001684:	4b62      	ldr	r3, [pc, #392]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0x136>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_OscConfig+0x13c>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d11f      	bne.n	80016e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x154>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e267      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b55      	ldr	r3, [pc, #340]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	4952      	ldr	r1, [pc, #328]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016cc:	4b51      	ldr	r3, [pc, #324]	; (8001814 <HAL_RCC_OscConfig+0x2b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f92b 	bl	800092c <HAL_InitTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d043      	beq.n	8001764 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e253      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b49      	ldr	r3, [pc, #292]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff f966 	bl	80009c4 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff f962 	bl	80009c4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e23c      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	061b      	lsls	r3, r3, #24
 8001728:	4939      	ldr	r1, [pc, #228]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
 800172e:	e01a      	b.n	8001766 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001730:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a36      	ldr	r2, [pc, #216]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff f942 	bl	80009c4 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff f93e 	bl	80009c4 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e218      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1e0>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d03c      	beq.n	80017ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01c      	beq.n	80017b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	4a23      	ldr	r2, [pc, #140]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff f91b 	bl	80009c4 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001792:	f7ff f917 	bl	80009c4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1f1      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0ef      	beq.n	8001792 <HAL_RCC_OscConfig+0x22e>
 80017b2:	e01b      	b.n	80017ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f8fe 	bl	80009c4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff f8fa 	bl	80009c4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1d4      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ef      	bne.n	80017cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80ab 	beq.w	8001950 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0x2b4>
 800180a:	2301      	movs	r3, #1
 800180c:	e005      	b.n	800181a <HAL_RCC_OscConfig+0x2b6>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	20000008 	.word	0x20000008
 8001818:	2300      	movs	r3, #0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00d      	beq.n	800183a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	4aae      	ldr	r2, [pc, #696]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6593      	str	r3, [r2, #88]	; 0x58
 800182a:	4bac      	ldr	r3, [pc, #688]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183a:	4ba9      	ldr	r3, [pc, #676]	; (8001ae0 <HAL_RCC_OscConfig+0x57c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001846:	4ba6      	ldr	r3, [pc, #664]	; (8001ae0 <HAL_RCC_OscConfig+0x57c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4aa5      	ldr	r2, [pc, #660]	; (8001ae0 <HAL_RCC_OscConfig+0x57c>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7ff f8b7 	bl	80009c4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff f8b3 	bl	80009c4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e18d      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4b9c      	ldr	r3, [pc, #624]	; (8001ae0 <HAL_RCC_OscConfig+0x57c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d108      	bne.n	8001892 <HAL_RCC_OscConfig+0x32e>
 8001880:	4b96      	ldr	r3, [pc, #600]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a95      	ldr	r2, [pc, #596]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	e024      	b.n	80018dc <HAL_RCC_OscConfig+0x378>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d110      	bne.n	80018bc <HAL_RCC_OscConfig+0x358>
 800189a:	4b90      	ldr	r3, [pc, #576]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	4a8e      	ldr	r2, [pc, #568]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018aa:	4b8c      	ldr	r3, [pc, #560]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	4a8a      	ldr	r2, [pc, #552]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ba:	e00f      	b.n	80018dc <HAL_RCC_OscConfig+0x378>
 80018bc:	4b87      	ldr	r3, [pc, #540]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	4a86      	ldr	r2, [pc, #536]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018cc:	4b83      	ldr	r3, [pc, #524]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a82      	ldr	r2, [pc, #520]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d016      	beq.n	8001912 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff f86e 	bl	80009c4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff f86a 	bl	80009c4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e142      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ed      	beq.n	80018ec <HAL_RCC_OscConfig+0x388>
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f857 	bl	80009c4 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff f853 	bl	80009c4 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e12b      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ed      	bne.n	800191a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b65      	ldr	r3, [pc, #404]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	4a64      	ldr	r2, [pc, #400]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 800194a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01c      	beq.n	800199e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001964:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800196a:	4a5c      	ldr	r2, [pc, #368]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff f826 	bl	80009c4 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197c:	f7ff f822 	bl	80009c4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e0fc      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800198e:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ef      	beq.n	800197c <HAL_RCC_OscConfig+0x418>
 800199c:	e01b      	b.n	80019d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800199e:	4b4f      	ldr	r3, [pc, #316]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80019a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a4:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff f809 	bl	80009c4 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b6:	f7ff f805 	bl	80009c4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0df      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c8:	4b44      	ldr	r3, [pc, #272]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80019ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ef      	bne.n	80019b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80d3 	beq.w	8001b86 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	f000 808d 	beq.w	8001b08 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d15a      	bne.n	8001aac <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b39      	ldr	r3, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a38      	ldr	r2, [pc, #224]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 80019fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7fe ffdf 	bl	80009c4 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7fe ffdb 	bl	80009c4 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0b5      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_RCC_OscConfig+0x580>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6a11      	ldr	r1, [r2, #32]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a38:	3a01      	subs	r2, #1
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a42:	0212      	lsls	r2, r2, #8
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a4a:	0852      	lsrs	r2, r2, #1
 8001a4c:	3a01      	subs	r2, #1
 8001a4e:	0552      	lsls	r2, r2, #21
 8001a50:	4311      	orrs	r1, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a56:	0852      	lsrs	r2, r2, #1
 8001a58:	3a01      	subs	r2, #1
 8001a5a:	0652      	lsls	r2, r2, #25
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a62:	06d2      	lsls	r2, r2, #27
 8001a64:	430a      	orrs	r2, r1
 8001a66:	491d      	ldr	r1, [pc, #116]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7fe ff9e 	bl	80009c4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7fe ff9a 	bl	80009c4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e074      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x528>
 8001aaa:	e06c      	b.n	8001b86 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001abe:	f023 0303 	bic.w	r3, r3, #3
 8001ac2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_RCC_OscConfig+0x578>)
 8001aca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7fe ff76 	bl	80009c4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ada:	e00e      	b.n	8001afa <HAL_RCC_OscConfig+0x596>
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7fe ff6c 	bl	80009c4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e046      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_OscConfig+0x62c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x584>
 8001b06:	e03e      	b.n	8001b86 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e039      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x62c>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d12c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	3b01      	subs	r3, #1
 8001b34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d123      	bne.n	8001b82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d113      	bne.n	8001b82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e11e      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bac:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d910      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b8e      	ldr	r3, [pc, #568]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 020f 	bic.w	r2, r3, #15
 8001bc2:	498c      	ldr	r1, [pc, #560]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b8a      	ldr	r3, [pc, #552]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e106      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d073      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d129      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf0:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0f4      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c00:	f000 f972 	bl	8001ee8 <RCC_GetSysClockFreqFromPLLSource>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4a7c      	ldr	r2, [pc, #496]	; (8001dfc <HAL_RCC_ClockConfig+0x268>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d93f      	bls.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d033      	beq.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d12f      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c2e:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c36:	4a70      	ldr	r2, [pc, #448]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e024      	b.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0c6      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0be      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c6c:	f000 f8ce 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001c70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4a61      	ldr	r2, [pc, #388]	; (8001dfc <HAL_RCC_ClockConfig+0x268>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d909      	bls.n	8001c8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c7a:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c82:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4957      	ldr	r1, [pc, #348]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca0:	f7fe fe90 	bl	80009c4 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7fe fe8c 	bl	80009c4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e095      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce8:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cf2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d08:	4a3b      	ldr	r2, [pc, #236]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4936      	ldr	r1, [pc, #216]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b80      	cmp	r3, #128	; 0x80
 8001d28:	d105      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d21d      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 020f 	bic.w	r2, r3, #15
 8001d4c:	4929      	ldr	r1, [pc, #164]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d54:	f7fe fe36 	bl	80009c4 <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f7fe fe32 	bl	80009c4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e03b      	b.n	8001dea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1ed      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4917      	ldr	r1, [pc, #92]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490f      	ldr	r1, [pc, #60]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dbe:	f000 f825 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_RCC_ClockConfig+0x264>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_RCC_ClockConfig+0x26c>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x270>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_ClockConfig+0x274>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fda2 	bl	800092c <HAL_InitTick>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	04c4b400 	.word	0x04c4b400
 8001e00:	08002c50 	.word	0x08002c50
 8001e04:	20000004 	.word	0x20000004
 8001e08:	20000008 	.word	0x20000008

08001e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e047      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d102      	bne.n	8001e36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e03e      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d136      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	3301      	adds	r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6a:	68d2      	ldr	r2, [r2, #12]
 8001e6c:	0a12      	lsrs	r2, r2, #8
 8001e6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e00c      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e7a:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e84:	68d2      	ldr	r2, [r2, #12]
 8001e86:	0a12      	lsrs	r2, r2, #8
 8001e88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
      break;
 8001e92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0e5b      	lsrs	r3, r3, #25
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e001      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001eb4:	693b      	ldr	r3, [r7, #16]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	007a1200 	.word	0x007a1200

08001ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d10c      	bne.n	8001f26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f16:	68d2      	ldr	r2, [r2, #12]
 8001f18:	0a12      	lsrs	r2, r2, #8
 8001f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
    break;
 8001f24:	e00c      	b.n	8001f40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	0a12      	lsrs	r2, r2, #8
 8001f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    break;
 8001f3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f5a:	687b      	ldr	r3, [r7, #4]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	00f42400 	.word	0x00f42400

08001f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e049      	b.n	800201a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fc64 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 f864 	bl	8002080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d001      	beq.n	800203c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e019      	b.n	8002070 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_TIM_Base_Start+0x58>)
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d00b      	beq.n	800206e <HAL_TIM_Base_Start+0x4a>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d007      	beq.n	800206e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	00010007 	.word	0x00010007

08002080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a46      	ldr	r2, [pc, #280]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d017      	beq.n	80020c8 <TIM_Base_SetConfig+0x48>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d013      	beq.n	80020c8 <TIM_Base_SetConfig+0x48>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a43      	ldr	r2, [pc, #268]	; (80021b0 <TIM_Base_SetConfig+0x130>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00f      	beq.n	80020c8 <TIM_Base_SetConfig+0x48>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a42      	ldr	r2, [pc, #264]	; (80021b4 <TIM_Base_SetConfig+0x134>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00b      	beq.n	80020c8 <TIM_Base_SetConfig+0x48>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a41      	ldr	r2, [pc, #260]	; (80021b8 <TIM_Base_SetConfig+0x138>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <TIM_Base_SetConfig+0x48>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a40      	ldr	r2, [pc, #256]	; (80021bc <TIM_Base_SetConfig+0x13c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d003      	beq.n	80020c8 <TIM_Base_SetConfig+0x48>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <TIM_Base_SetConfig+0x140>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a33      	ldr	r2, [pc, #204]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d023      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d01f      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <TIM_Base_SetConfig+0x130>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01b      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <TIM_Base_SetConfig+0x134>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d017      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <TIM_Base_SetConfig+0x138>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <TIM_Base_SetConfig+0x13c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00f      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2d      	ldr	r2, [pc, #180]	; (80021c4 <TIM_Base_SetConfig+0x144>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00b      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2c      	ldr	r2, [pc, #176]	; (80021c8 <TIM_Base_SetConfig+0x148>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <TIM_Base_SetConfig+0x14c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d003      	beq.n	800212a <TIM_Base_SetConfig+0xaa>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <TIM_Base_SetConfig+0x140>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d108      	bne.n	800213c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <TIM_Base_SetConfig+0x110>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <TIM_Base_SetConfig+0x13c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00f      	beq.n	8002190 <TIM_Base_SetConfig+0x110>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <TIM_Base_SetConfig+0x144>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00b      	beq.n	8002190 <TIM_Base_SetConfig+0x110>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <TIM_Base_SetConfig+0x148>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <TIM_Base_SetConfig+0x110>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <TIM_Base_SetConfig+0x14c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d003      	beq.n	8002190 <TIM_Base_SetConfig+0x110>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <TIM_Base_SetConfig+0x140>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d103      	bne.n	8002198 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	615a      	str	r2, [r3, #20]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40000c00 	.word	0x40000c00
 80021bc:	40013400 	.word	0x40013400
 80021c0:	40015000 	.word	0x40015000
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800

080021d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e074      	b.n	80022d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d004      	beq.n	8002226 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d108      	bne.n	8002238 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800222c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800223e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d01d      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d018      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00e      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10c      	bne.n	80022c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40013400 	.word	0x40013400
 80022e8:	40015000 	.word	0x40015000
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40014000 	.word	0x40014000

080022fc <__errno>:
 80022fc:	4b01      	ldr	r3, [pc, #4]	; (8002304 <__errno+0x8>)
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000010 	.word	0x20000010

08002308 <__libc_init_array>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	4e0d      	ldr	r6, [pc, #52]	; (8002340 <__libc_init_array+0x38>)
 800230c:	4c0d      	ldr	r4, [pc, #52]	; (8002344 <__libc_init_array+0x3c>)
 800230e:	1ba4      	subs	r4, r4, r6
 8002310:	10a4      	asrs	r4, r4, #2
 8002312:	2500      	movs	r5, #0
 8002314:	42a5      	cmp	r5, r4
 8002316:	d109      	bne.n	800232c <__libc_init_array+0x24>
 8002318:	4e0b      	ldr	r6, [pc, #44]	; (8002348 <__libc_init_array+0x40>)
 800231a:	4c0c      	ldr	r4, [pc, #48]	; (800234c <__libc_init_array+0x44>)
 800231c:	f000 fc88 	bl	8002c30 <_init>
 8002320:	1ba4      	subs	r4, r4, r6
 8002322:	10a4      	asrs	r4, r4, #2
 8002324:	2500      	movs	r5, #0
 8002326:	42a5      	cmp	r5, r4
 8002328:	d105      	bne.n	8002336 <__libc_init_array+0x2e>
 800232a:	bd70      	pop	{r4, r5, r6, pc}
 800232c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002330:	4798      	blx	r3
 8002332:	3501      	adds	r5, #1
 8002334:	e7ee      	b.n	8002314 <__libc_init_array+0xc>
 8002336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800233a:	4798      	blx	r3
 800233c:	3501      	adds	r5, #1
 800233e:	e7f2      	b.n	8002326 <__libc_init_array+0x1e>
 8002340:	08002cc4 	.word	0x08002cc4
 8002344:	08002cc4 	.word	0x08002cc4
 8002348:	08002cc4 	.word	0x08002cc4
 800234c:	08002cc8 	.word	0x08002cc8

08002350 <memset>:
 8002350:	4402      	add	r2, r0
 8002352:	4603      	mov	r3, r0
 8002354:	4293      	cmp	r3, r2
 8002356:	d100      	bne.n	800235a <memset+0xa>
 8002358:	4770      	bx	lr
 800235a:	f803 1b01 	strb.w	r1, [r3], #1
 800235e:	e7f9      	b.n	8002354 <memset+0x4>

08002360 <_puts_r>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	460e      	mov	r6, r1
 8002364:	4605      	mov	r5, r0
 8002366:	b118      	cbz	r0, 8002370 <_puts_r+0x10>
 8002368:	6983      	ldr	r3, [r0, #24]
 800236a:	b90b      	cbnz	r3, 8002370 <_puts_r+0x10>
 800236c:	f000 fa0c 	bl	8002788 <__sinit>
 8002370:	69ab      	ldr	r3, [r5, #24]
 8002372:	68ac      	ldr	r4, [r5, #8]
 8002374:	b913      	cbnz	r3, 800237c <_puts_r+0x1c>
 8002376:	4628      	mov	r0, r5
 8002378:	f000 fa06 	bl	8002788 <__sinit>
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <_puts_r+0xac>)
 800237e:	429c      	cmp	r4, r3
 8002380:	d117      	bne.n	80023b2 <_puts_r+0x52>
 8002382:	686c      	ldr	r4, [r5, #4]
 8002384:	89a3      	ldrh	r3, [r4, #12]
 8002386:	071b      	lsls	r3, r3, #28
 8002388:	d51d      	bpl.n	80023c6 <_puts_r+0x66>
 800238a:	6923      	ldr	r3, [r4, #16]
 800238c:	b1db      	cbz	r3, 80023c6 <_puts_r+0x66>
 800238e:	3e01      	subs	r6, #1
 8002390:	68a3      	ldr	r3, [r4, #8]
 8002392:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002396:	3b01      	subs	r3, #1
 8002398:	60a3      	str	r3, [r4, #8]
 800239a:	b9e9      	cbnz	r1, 80023d8 <_puts_r+0x78>
 800239c:	2b00      	cmp	r3, #0
 800239e:	da2e      	bge.n	80023fe <_puts_r+0x9e>
 80023a0:	4622      	mov	r2, r4
 80023a2:	210a      	movs	r1, #10
 80023a4:	4628      	mov	r0, r5
 80023a6:	f000 f83f 	bl	8002428 <__swbuf_r>
 80023aa:	3001      	adds	r0, #1
 80023ac:	d011      	beq.n	80023d2 <_puts_r+0x72>
 80023ae:	200a      	movs	r0, #10
 80023b0:	e011      	b.n	80023d6 <_puts_r+0x76>
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <_puts_r+0xb0>)
 80023b4:	429c      	cmp	r4, r3
 80023b6:	d101      	bne.n	80023bc <_puts_r+0x5c>
 80023b8:	68ac      	ldr	r4, [r5, #8]
 80023ba:	e7e3      	b.n	8002384 <_puts_r+0x24>
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <_puts_r+0xb4>)
 80023be:	429c      	cmp	r4, r3
 80023c0:	bf08      	it	eq
 80023c2:	68ec      	ldreq	r4, [r5, #12]
 80023c4:	e7de      	b.n	8002384 <_puts_r+0x24>
 80023c6:	4621      	mov	r1, r4
 80023c8:	4628      	mov	r0, r5
 80023ca:	f000 f87f 	bl	80024cc <__swsetup_r>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d0dd      	beq.n	800238e <_puts_r+0x2e>
 80023d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	2b00      	cmp	r3, #0
 80023da:	da04      	bge.n	80023e6 <_puts_r+0x86>
 80023dc:	69a2      	ldr	r2, [r4, #24]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dc06      	bgt.n	80023f0 <_puts_r+0x90>
 80023e2:	290a      	cmp	r1, #10
 80023e4:	d004      	beq.n	80023f0 <_puts_r+0x90>
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	6022      	str	r2, [r4, #0]
 80023ec:	7019      	strb	r1, [r3, #0]
 80023ee:	e7cf      	b.n	8002390 <_puts_r+0x30>
 80023f0:	4622      	mov	r2, r4
 80023f2:	4628      	mov	r0, r5
 80023f4:	f000 f818 	bl	8002428 <__swbuf_r>
 80023f8:	3001      	adds	r0, #1
 80023fa:	d1c9      	bne.n	8002390 <_puts_r+0x30>
 80023fc:	e7e9      	b.n	80023d2 <_puts_r+0x72>
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	200a      	movs	r0, #10
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	6022      	str	r2, [r4, #0]
 8002406:	7018      	strb	r0, [r3, #0]
 8002408:	e7e5      	b.n	80023d6 <_puts_r+0x76>
 800240a:	bf00      	nop
 800240c:	08002c84 	.word	0x08002c84
 8002410:	08002ca4 	.word	0x08002ca4
 8002414:	08002c64 	.word	0x08002c64

08002418 <puts>:
 8002418:	4b02      	ldr	r3, [pc, #8]	; (8002424 <puts+0xc>)
 800241a:	4601      	mov	r1, r0
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	f7ff bf9f 	b.w	8002360 <_puts_r>
 8002422:	bf00      	nop
 8002424:	20000010 	.word	0x20000010

08002428 <__swbuf_r>:
 8002428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242a:	460e      	mov	r6, r1
 800242c:	4614      	mov	r4, r2
 800242e:	4605      	mov	r5, r0
 8002430:	b118      	cbz	r0, 800243a <__swbuf_r+0x12>
 8002432:	6983      	ldr	r3, [r0, #24]
 8002434:	b90b      	cbnz	r3, 800243a <__swbuf_r+0x12>
 8002436:	f000 f9a7 	bl	8002788 <__sinit>
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <__swbuf_r+0x98>)
 800243c:	429c      	cmp	r4, r3
 800243e:	d12a      	bne.n	8002496 <__swbuf_r+0x6e>
 8002440:	686c      	ldr	r4, [r5, #4]
 8002442:	69a3      	ldr	r3, [r4, #24]
 8002444:	60a3      	str	r3, [r4, #8]
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	071a      	lsls	r2, r3, #28
 800244a:	d52e      	bpl.n	80024aa <__swbuf_r+0x82>
 800244c:	6923      	ldr	r3, [r4, #16]
 800244e:	b363      	cbz	r3, 80024aa <__swbuf_r+0x82>
 8002450:	6923      	ldr	r3, [r4, #16]
 8002452:	6820      	ldr	r0, [r4, #0]
 8002454:	1ac0      	subs	r0, r0, r3
 8002456:	6963      	ldr	r3, [r4, #20]
 8002458:	b2f6      	uxtb	r6, r6
 800245a:	4283      	cmp	r3, r0
 800245c:	4637      	mov	r7, r6
 800245e:	dc04      	bgt.n	800246a <__swbuf_r+0x42>
 8002460:	4621      	mov	r1, r4
 8002462:	4628      	mov	r0, r5
 8002464:	f000 f926 	bl	80026b4 <_fflush_r>
 8002468:	bb28      	cbnz	r0, 80024b6 <__swbuf_r+0x8e>
 800246a:	68a3      	ldr	r3, [r4, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60a3      	str	r3, [r4, #8]
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	6022      	str	r2, [r4, #0]
 8002476:	701e      	strb	r6, [r3, #0]
 8002478:	6963      	ldr	r3, [r4, #20]
 800247a:	3001      	adds	r0, #1
 800247c:	4283      	cmp	r3, r0
 800247e:	d004      	beq.n	800248a <__swbuf_r+0x62>
 8002480:	89a3      	ldrh	r3, [r4, #12]
 8002482:	07db      	lsls	r3, r3, #31
 8002484:	d519      	bpl.n	80024ba <__swbuf_r+0x92>
 8002486:	2e0a      	cmp	r6, #10
 8002488:	d117      	bne.n	80024ba <__swbuf_r+0x92>
 800248a:	4621      	mov	r1, r4
 800248c:	4628      	mov	r0, r5
 800248e:	f000 f911 	bl	80026b4 <_fflush_r>
 8002492:	b190      	cbz	r0, 80024ba <__swbuf_r+0x92>
 8002494:	e00f      	b.n	80024b6 <__swbuf_r+0x8e>
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <__swbuf_r+0x9c>)
 8002498:	429c      	cmp	r4, r3
 800249a:	d101      	bne.n	80024a0 <__swbuf_r+0x78>
 800249c:	68ac      	ldr	r4, [r5, #8]
 800249e:	e7d0      	b.n	8002442 <__swbuf_r+0x1a>
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <__swbuf_r+0xa0>)
 80024a2:	429c      	cmp	r4, r3
 80024a4:	bf08      	it	eq
 80024a6:	68ec      	ldreq	r4, [r5, #12]
 80024a8:	e7cb      	b.n	8002442 <__swbuf_r+0x1a>
 80024aa:	4621      	mov	r1, r4
 80024ac:	4628      	mov	r0, r5
 80024ae:	f000 f80d 	bl	80024cc <__swsetup_r>
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d0cc      	beq.n	8002450 <__swbuf_r+0x28>
 80024b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80024ba:	4638      	mov	r0, r7
 80024bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024be:	bf00      	nop
 80024c0:	08002c84 	.word	0x08002c84
 80024c4:	08002ca4 	.word	0x08002ca4
 80024c8:	08002c64 	.word	0x08002c64

080024cc <__swsetup_r>:
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <__swsetup_r+0xcc>)
 80024ce:	b570      	push	{r4, r5, r6, lr}
 80024d0:	681d      	ldr	r5, [r3, #0]
 80024d2:	4606      	mov	r6, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	b125      	cbz	r5, 80024e2 <__swsetup_r+0x16>
 80024d8:	69ab      	ldr	r3, [r5, #24]
 80024da:	b913      	cbnz	r3, 80024e2 <__swsetup_r+0x16>
 80024dc:	4628      	mov	r0, r5
 80024de:	f000 f953 	bl	8002788 <__sinit>
 80024e2:	4b2e      	ldr	r3, [pc, #184]	; (800259c <__swsetup_r+0xd0>)
 80024e4:	429c      	cmp	r4, r3
 80024e6:	d10f      	bne.n	8002508 <__swsetup_r+0x3c>
 80024e8:	686c      	ldr	r4, [r5, #4]
 80024ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	0715      	lsls	r5, r2, #28
 80024f2:	d42c      	bmi.n	800254e <__swsetup_r+0x82>
 80024f4:	06d0      	lsls	r0, r2, #27
 80024f6:	d411      	bmi.n	800251c <__swsetup_r+0x50>
 80024f8:	2209      	movs	r2, #9
 80024fa:	6032      	str	r2, [r6, #0]
 80024fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002500:	81a3      	strh	r3, [r4, #12]
 8002502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002506:	e03e      	b.n	8002586 <__swsetup_r+0xba>
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <__swsetup_r+0xd4>)
 800250a:	429c      	cmp	r4, r3
 800250c:	d101      	bne.n	8002512 <__swsetup_r+0x46>
 800250e:	68ac      	ldr	r4, [r5, #8]
 8002510:	e7eb      	b.n	80024ea <__swsetup_r+0x1e>
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <__swsetup_r+0xd8>)
 8002514:	429c      	cmp	r4, r3
 8002516:	bf08      	it	eq
 8002518:	68ec      	ldreq	r4, [r5, #12]
 800251a:	e7e6      	b.n	80024ea <__swsetup_r+0x1e>
 800251c:	0751      	lsls	r1, r2, #29
 800251e:	d512      	bpl.n	8002546 <__swsetup_r+0x7a>
 8002520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002522:	b141      	cbz	r1, 8002536 <__swsetup_r+0x6a>
 8002524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002528:	4299      	cmp	r1, r3
 800252a:	d002      	beq.n	8002532 <__swsetup_r+0x66>
 800252c:	4630      	mov	r0, r6
 800252e:	f000 fa19 	bl	8002964 <_free_r>
 8002532:	2300      	movs	r3, #0
 8002534:	6363      	str	r3, [r4, #52]	; 0x34
 8002536:	89a3      	ldrh	r3, [r4, #12]
 8002538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800253c:	81a3      	strh	r3, [r4, #12]
 800253e:	2300      	movs	r3, #0
 8002540:	6063      	str	r3, [r4, #4]
 8002542:	6923      	ldr	r3, [r4, #16]
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	81a3      	strh	r3, [r4, #12]
 800254e:	6923      	ldr	r3, [r4, #16]
 8002550:	b94b      	cbnz	r3, 8002566 <__swsetup_r+0x9a>
 8002552:	89a3      	ldrh	r3, [r4, #12]
 8002554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d003      	beq.n	8002566 <__swsetup_r+0x9a>
 800255e:	4621      	mov	r1, r4
 8002560:	4630      	mov	r0, r6
 8002562:	f000 f9bf 	bl	80028e4 <__smakebuf_r>
 8002566:	89a2      	ldrh	r2, [r4, #12]
 8002568:	f012 0301 	ands.w	r3, r2, #1
 800256c:	d00c      	beq.n	8002588 <__swsetup_r+0xbc>
 800256e:	2300      	movs	r3, #0
 8002570:	60a3      	str	r3, [r4, #8]
 8002572:	6963      	ldr	r3, [r4, #20]
 8002574:	425b      	negs	r3, r3
 8002576:	61a3      	str	r3, [r4, #24]
 8002578:	6923      	ldr	r3, [r4, #16]
 800257a:	b953      	cbnz	r3, 8002592 <__swsetup_r+0xc6>
 800257c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002580:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002584:	d1ba      	bne.n	80024fc <__swsetup_r+0x30>
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	0792      	lsls	r2, r2, #30
 800258a:	bf58      	it	pl
 800258c:	6963      	ldrpl	r3, [r4, #20]
 800258e:	60a3      	str	r3, [r4, #8]
 8002590:	e7f2      	b.n	8002578 <__swsetup_r+0xac>
 8002592:	2000      	movs	r0, #0
 8002594:	e7f7      	b.n	8002586 <__swsetup_r+0xba>
 8002596:	bf00      	nop
 8002598:	20000010 	.word	0x20000010
 800259c:	08002c84 	.word	0x08002c84
 80025a0:	08002ca4 	.word	0x08002ca4
 80025a4:	08002c64 	.word	0x08002c64

080025a8 <__sflush_r>:
 80025a8:	898a      	ldrh	r2, [r1, #12]
 80025aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ae:	4605      	mov	r5, r0
 80025b0:	0710      	lsls	r0, r2, #28
 80025b2:	460c      	mov	r4, r1
 80025b4:	d458      	bmi.n	8002668 <__sflush_r+0xc0>
 80025b6:	684b      	ldr	r3, [r1, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	dc05      	bgt.n	80025c8 <__sflush_r+0x20>
 80025bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	dc02      	bgt.n	80025c8 <__sflush_r+0x20>
 80025c2:	2000      	movs	r0, #0
 80025c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025ca:	2e00      	cmp	r6, #0
 80025cc:	d0f9      	beq.n	80025c2 <__sflush_r+0x1a>
 80025ce:	2300      	movs	r3, #0
 80025d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025d4:	682f      	ldr	r7, [r5, #0]
 80025d6:	6a21      	ldr	r1, [r4, #32]
 80025d8:	602b      	str	r3, [r5, #0]
 80025da:	d032      	beq.n	8002642 <__sflush_r+0x9a>
 80025dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	075a      	lsls	r2, r3, #29
 80025e2:	d505      	bpl.n	80025f0 <__sflush_r+0x48>
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	1ac0      	subs	r0, r0, r3
 80025e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025ea:	b10b      	cbz	r3, 80025f0 <__sflush_r+0x48>
 80025ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ee:	1ac0      	subs	r0, r0, r3
 80025f0:	2300      	movs	r3, #0
 80025f2:	4602      	mov	r2, r0
 80025f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025f6:	6a21      	ldr	r1, [r4, #32]
 80025f8:	4628      	mov	r0, r5
 80025fa:	47b0      	blx	r6
 80025fc:	1c43      	adds	r3, r0, #1
 80025fe:	89a3      	ldrh	r3, [r4, #12]
 8002600:	d106      	bne.n	8002610 <__sflush_r+0x68>
 8002602:	6829      	ldr	r1, [r5, #0]
 8002604:	291d      	cmp	r1, #29
 8002606:	d848      	bhi.n	800269a <__sflush_r+0xf2>
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <__sflush_r+0x108>)
 800260a:	40ca      	lsrs	r2, r1
 800260c:	07d6      	lsls	r6, r2, #31
 800260e:	d544      	bpl.n	800269a <__sflush_r+0xf2>
 8002610:	2200      	movs	r2, #0
 8002612:	6062      	str	r2, [r4, #4]
 8002614:	04d9      	lsls	r1, r3, #19
 8002616:	6922      	ldr	r2, [r4, #16]
 8002618:	6022      	str	r2, [r4, #0]
 800261a:	d504      	bpl.n	8002626 <__sflush_r+0x7e>
 800261c:	1c42      	adds	r2, r0, #1
 800261e:	d101      	bne.n	8002624 <__sflush_r+0x7c>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	b903      	cbnz	r3, 8002626 <__sflush_r+0x7e>
 8002624:	6560      	str	r0, [r4, #84]	; 0x54
 8002626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002628:	602f      	str	r7, [r5, #0]
 800262a:	2900      	cmp	r1, #0
 800262c:	d0c9      	beq.n	80025c2 <__sflush_r+0x1a>
 800262e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002632:	4299      	cmp	r1, r3
 8002634:	d002      	beq.n	800263c <__sflush_r+0x94>
 8002636:	4628      	mov	r0, r5
 8002638:	f000 f994 	bl	8002964 <_free_r>
 800263c:	2000      	movs	r0, #0
 800263e:	6360      	str	r0, [r4, #52]	; 0x34
 8002640:	e7c0      	b.n	80025c4 <__sflush_r+0x1c>
 8002642:	2301      	movs	r3, #1
 8002644:	4628      	mov	r0, r5
 8002646:	47b0      	blx	r6
 8002648:	1c41      	adds	r1, r0, #1
 800264a:	d1c8      	bne.n	80025de <__sflush_r+0x36>
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0c5      	beq.n	80025de <__sflush_r+0x36>
 8002652:	2b1d      	cmp	r3, #29
 8002654:	d001      	beq.n	800265a <__sflush_r+0xb2>
 8002656:	2b16      	cmp	r3, #22
 8002658:	d101      	bne.n	800265e <__sflush_r+0xb6>
 800265a:	602f      	str	r7, [r5, #0]
 800265c:	e7b1      	b.n	80025c2 <__sflush_r+0x1a>
 800265e:	89a3      	ldrh	r3, [r4, #12]
 8002660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002664:	81a3      	strh	r3, [r4, #12]
 8002666:	e7ad      	b.n	80025c4 <__sflush_r+0x1c>
 8002668:	690f      	ldr	r7, [r1, #16]
 800266a:	2f00      	cmp	r7, #0
 800266c:	d0a9      	beq.n	80025c2 <__sflush_r+0x1a>
 800266e:	0793      	lsls	r3, r2, #30
 8002670:	680e      	ldr	r6, [r1, #0]
 8002672:	bf08      	it	eq
 8002674:	694b      	ldreq	r3, [r1, #20]
 8002676:	600f      	str	r7, [r1, #0]
 8002678:	bf18      	it	ne
 800267a:	2300      	movne	r3, #0
 800267c:	eba6 0807 	sub.w	r8, r6, r7
 8002680:	608b      	str	r3, [r1, #8]
 8002682:	f1b8 0f00 	cmp.w	r8, #0
 8002686:	dd9c      	ble.n	80025c2 <__sflush_r+0x1a>
 8002688:	4643      	mov	r3, r8
 800268a:	463a      	mov	r2, r7
 800268c:	6a21      	ldr	r1, [r4, #32]
 800268e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002690:	4628      	mov	r0, r5
 8002692:	47b0      	blx	r6
 8002694:	2800      	cmp	r0, #0
 8002696:	dc06      	bgt.n	80026a6 <__sflush_r+0xfe>
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269e:	81a3      	strh	r3, [r4, #12]
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a4:	e78e      	b.n	80025c4 <__sflush_r+0x1c>
 80026a6:	4407      	add	r7, r0
 80026a8:	eba8 0800 	sub.w	r8, r8, r0
 80026ac:	e7e9      	b.n	8002682 <__sflush_r+0xda>
 80026ae:	bf00      	nop
 80026b0:	20400001 	.word	0x20400001

080026b4 <_fflush_r>:
 80026b4:	b538      	push	{r3, r4, r5, lr}
 80026b6:	690b      	ldr	r3, [r1, #16]
 80026b8:	4605      	mov	r5, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	b1db      	cbz	r3, 80026f6 <_fflush_r+0x42>
 80026be:	b118      	cbz	r0, 80026c8 <_fflush_r+0x14>
 80026c0:	6983      	ldr	r3, [r0, #24]
 80026c2:	b90b      	cbnz	r3, 80026c8 <_fflush_r+0x14>
 80026c4:	f000 f860 	bl	8002788 <__sinit>
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <_fflush_r+0x48>)
 80026ca:	429c      	cmp	r4, r3
 80026cc:	d109      	bne.n	80026e2 <_fflush_r+0x2e>
 80026ce:	686c      	ldr	r4, [r5, #4]
 80026d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d4:	b17b      	cbz	r3, 80026f6 <_fflush_r+0x42>
 80026d6:	4621      	mov	r1, r4
 80026d8:	4628      	mov	r0, r5
 80026da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026de:	f7ff bf63 	b.w	80025a8 <__sflush_r>
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <_fflush_r+0x4c>)
 80026e4:	429c      	cmp	r4, r3
 80026e6:	d101      	bne.n	80026ec <_fflush_r+0x38>
 80026e8:	68ac      	ldr	r4, [r5, #8]
 80026ea:	e7f1      	b.n	80026d0 <_fflush_r+0x1c>
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <_fflush_r+0x50>)
 80026ee:	429c      	cmp	r4, r3
 80026f0:	bf08      	it	eq
 80026f2:	68ec      	ldreq	r4, [r5, #12]
 80026f4:	e7ec      	b.n	80026d0 <_fflush_r+0x1c>
 80026f6:	2000      	movs	r0, #0
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
 80026fa:	bf00      	nop
 80026fc:	08002c84 	.word	0x08002c84
 8002700:	08002ca4 	.word	0x08002ca4
 8002704:	08002c64 	.word	0x08002c64

08002708 <std>:
 8002708:	2300      	movs	r3, #0
 800270a:	b510      	push	{r4, lr}
 800270c:	4604      	mov	r4, r0
 800270e:	e9c0 3300 	strd	r3, r3, [r0]
 8002712:	6083      	str	r3, [r0, #8]
 8002714:	8181      	strh	r1, [r0, #12]
 8002716:	6643      	str	r3, [r0, #100]	; 0x64
 8002718:	81c2      	strh	r2, [r0, #14]
 800271a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800271e:	6183      	str	r3, [r0, #24]
 8002720:	4619      	mov	r1, r3
 8002722:	2208      	movs	r2, #8
 8002724:	305c      	adds	r0, #92	; 0x5c
 8002726:	f7ff fe13 	bl	8002350 <memset>
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <std+0x38>)
 800272c:	6263      	str	r3, [r4, #36]	; 0x24
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <std+0x3c>)
 8002730:	62a3      	str	r3, [r4, #40]	; 0x28
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <std+0x40>)
 8002734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <std+0x44>)
 8002738:	6224      	str	r4, [r4, #32]
 800273a:	6323      	str	r3, [r4, #48]	; 0x30
 800273c:	bd10      	pop	{r4, pc}
 800273e:	bf00      	nop
 8002740:	08002ad5 	.word	0x08002ad5
 8002744:	08002af7 	.word	0x08002af7
 8002748:	08002b2f 	.word	0x08002b2f
 800274c:	08002b53 	.word	0x08002b53

08002750 <_cleanup_r>:
 8002750:	4901      	ldr	r1, [pc, #4]	; (8002758 <_cleanup_r+0x8>)
 8002752:	f000 b885 	b.w	8002860 <_fwalk_reent>
 8002756:	bf00      	nop
 8002758:	080026b5 	.word	0x080026b5

0800275c <__sfmoreglue>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	1e4a      	subs	r2, r1, #1
 8002760:	2568      	movs	r5, #104	; 0x68
 8002762:	4355      	muls	r5, r2
 8002764:	460e      	mov	r6, r1
 8002766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800276a:	f000 f949 	bl	8002a00 <_malloc_r>
 800276e:	4604      	mov	r4, r0
 8002770:	b140      	cbz	r0, 8002784 <__sfmoreglue+0x28>
 8002772:	2100      	movs	r1, #0
 8002774:	e9c0 1600 	strd	r1, r6, [r0]
 8002778:	300c      	adds	r0, #12
 800277a:	60a0      	str	r0, [r4, #8]
 800277c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002780:	f7ff fde6 	bl	8002350 <memset>
 8002784:	4620      	mov	r0, r4
 8002786:	bd70      	pop	{r4, r5, r6, pc}

08002788 <__sinit>:
 8002788:	6983      	ldr	r3, [r0, #24]
 800278a:	b510      	push	{r4, lr}
 800278c:	4604      	mov	r4, r0
 800278e:	bb33      	cbnz	r3, 80027de <__sinit+0x56>
 8002790:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002794:	6503      	str	r3, [r0, #80]	; 0x50
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <__sinit+0x58>)
 8002798:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <__sinit+0x5c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6282      	str	r2, [r0, #40]	; 0x28
 800279e:	4298      	cmp	r0, r3
 80027a0:	bf04      	itt	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	6183      	streq	r3, [r0, #24]
 80027a6:	f000 f81f 	bl	80027e8 <__sfp>
 80027aa:	6060      	str	r0, [r4, #4]
 80027ac:	4620      	mov	r0, r4
 80027ae:	f000 f81b 	bl	80027e8 <__sfp>
 80027b2:	60a0      	str	r0, [r4, #8]
 80027b4:	4620      	mov	r0, r4
 80027b6:	f000 f817 	bl	80027e8 <__sfp>
 80027ba:	2200      	movs	r2, #0
 80027bc:	60e0      	str	r0, [r4, #12]
 80027be:	2104      	movs	r1, #4
 80027c0:	6860      	ldr	r0, [r4, #4]
 80027c2:	f7ff ffa1 	bl	8002708 <std>
 80027c6:	2201      	movs	r2, #1
 80027c8:	2109      	movs	r1, #9
 80027ca:	68a0      	ldr	r0, [r4, #8]
 80027cc:	f7ff ff9c 	bl	8002708 <std>
 80027d0:	2202      	movs	r2, #2
 80027d2:	2112      	movs	r1, #18
 80027d4:	68e0      	ldr	r0, [r4, #12]
 80027d6:	f7ff ff97 	bl	8002708 <std>
 80027da:	2301      	movs	r3, #1
 80027dc:	61a3      	str	r3, [r4, #24]
 80027de:	bd10      	pop	{r4, pc}
 80027e0:	08002c60 	.word	0x08002c60
 80027e4:	08002751 	.word	0x08002751

080027e8 <__sfp>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <__sfp+0x70>)
 80027ec:	681e      	ldr	r6, [r3, #0]
 80027ee:	69b3      	ldr	r3, [r6, #24]
 80027f0:	4607      	mov	r7, r0
 80027f2:	b913      	cbnz	r3, 80027fa <__sfp+0x12>
 80027f4:	4630      	mov	r0, r6
 80027f6:	f7ff ffc7 	bl	8002788 <__sinit>
 80027fa:	3648      	adds	r6, #72	; 0x48
 80027fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	d503      	bpl.n	800280c <__sfp+0x24>
 8002804:	6833      	ldr	r3, [r6, #0]
 8002806:	b133      	cbz	r3, 8002816 <__sfp+0x2e>
 8002808:	6836      	ldr	r6, [r6, #0]
 800280a:	e7f7      	b.n	80027fc <__sfp+0x14>
 800280c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002810:	b16d      	cbz	r5, 800282e <__sfp+0x46>
 8002812:	3468      	adds	r4, #104	; 0x68
 8002814:	e7f4      	b.n	8002800 <__sfp+0x18>
 8002816:	2104      	movs	r1, #4
 8002818:	4638      	mov	r0, r7
 800281a:	f7ff ff9f 	bl	800275c <__sfmoreglue>
 800281e:	6030      	str	r0, [r6, #0]
 8002820:	2800      	cmp	r0, #0
 8002822:	d1f1      	bne.n	8002808 <__sfp+0x20>
 8002824:	230c      	movs	r3, #12
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4604      	mov	r4, r0
 800282a:	4620      	mov	r0, r4
 800282c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <__sfp+0x74>)
 8002830:	6665      	str	r5, [r4, #100]	; 0x64
 8002832:	e9c4 5500 	strd	r5, r5, [r4]
 8002836:	60a5      	str	r5, [r4, #8]
 8002838:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800283c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002840:	2208      	movs	r2, #8
 8002842:	4629      	mov	r1, r5
 8002844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002848:	f7ff fd82 	bl	8002350 <memset>
 800284c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002854:	e7e9      	b.n	800282a <__sfp+0x42>
 8002856:	bf00      	nop
 8002858:	08002c60 	.word	0x08002c60
 800285c:	ffff0001 	.word	0xffff0001

08002860 <_fwalk_reent>:
 8002860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002864:	4680      	mov	r8, r0
 8002866:	4689      	mov	r9, r1
 8002868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800286c:	2600      	movs	r6, #0
 800286e:	b914      	cbnz	r4, 8002876 <_fwalk_reent+0x16>
 8002870:	4630      	mov	r0, r6
 8002872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002876:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800287a:	3f01      	subs	r7, #1
 800287c:	d501      	bpl.n	8002882 <_fwalk_reent+0x22>
 800287e:	6824      	ldr	r4, [r4, #0]
 8002880:	e7f5      	b.n	800286e <_fwalk_reent+0xe>
 8002882:	89ab      	ldrh	r3, [r5, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d907      	bls.n	8002898 <_fwalk_reent+0x38>
 8002888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800288c:	3301      	adds	r3, #1
 800288e:	d003      	beq.n	8002898 <_fwalk_reent+0x38>
 8002890:	4629      	mov	r1, r5
 8002892:	4640      	mov	r0, r8
 8002894:	47c8      	blx	r9
 8002896:	4306      	orrs	r6, r0
 8002898:	3568      	adds	r5, #104	; 0x68
 800289a:	e7ee      	b.n	800287a <_fwalk_reent+0x1a>

0800289c <__swhatbuf_r>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	460e      	mov	r6, r1
 80028a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a4:	2900      	cmp	r1, #0
 80028a6:	b096      	sub	sp, #88	; 0x58
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	da07      	bge.n	80028be <__swhatbuf_r+0x22>
 80028ae:	2300      	movs	r3, #0
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	89b3      	ldrh	r3, [r6, #12]
 80028b4:	061a      	lsls	r2, r3, #24
 80028b6:	d410      	bmi.n	80028da <__swhatbuf_r+0x3e>
 80028b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028bc:	e00e      	b.n	80028dc <__swhatbuf_r+0x40>
 80028be:	466a      	mov	r2, sp
 80028c0:	f000 f96e 	bl	8002ba0 <_fstat_r>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	dbf2      	blt.n	80028ae <__swhatbuf_r+0x12>
 80028c8:	9a01      	ldr	r2, [sp, #4]
 80028ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80028ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80028d2:	425a      	negs	r2, r3
 80028d4:	415a      	adcs	r2, r3
 80028d6:	602a      	str	r2, [r5, #0]
 80028d8:	e7ee      	b.n	80028b8 <__swhatbuf_r+0x1c>
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	2000      	movs	r0, #0
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	b016      	add	sp, #88	; 0x58
 80028e2:	bd70      	pop	{r4, r5, r6, pc}

080028e4 <__smakebuf_r>:
 80028e4:	898b      	ldrh	r3, [r1, #12]
 80028e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028e8:	079d      	lsls	r5, r3, #30
 80028ea:	4606      	mov	r6, r0
 80028ec:	460c      	mov	r4, r1
 80028ee:	d507      	bpl.n	8002900 <__smakebuf_r+0x1c>
 80028f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	6123      	str	r3, [r4, #16]
 80028f8:	2301      	movs	r3, #1
 80028fa:	6163      	str	r3, [r4, #20]
 80028fc:	b002      	add	sp, #8
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	ab01      	add	r3, sp, #4
 8002902:	466a      	mov	r2, sp
 8002904:	f7ff ffca 	bl	800289c <__swhatbuf_r>
 8002908:	9900      	ldr	r1, [sp, #0]
 800290a:	4605      	mov	r5, r0
 800290c:	4630      	mov	r0, r6
 800290e:	f000 f877 	bl	8002a00 <_malloc_r>
 8002912:	b948      	cbnz	r0, 8002928 <__smakebuf_r+0x44>
 8002914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002918:	059a      	lsls	r2, r3, #22
 800291a:	d4ef      	bmi.n	80028fc <__smakebuf_r+0x18>
 800291c:	f023 0303 	bic.w	r3, r3, #3
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	81a3      	strh	r3, [r4, #12]
 8002926:	e7e3      	b.n	80028f0 <__smakebuf_r+0xc>
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <__smakebuf_r+0x7c>)
 800292a:	62b3      	str	r3, [r6, #40]	; 0x28
 800292c:	89a3      	ldrh	r3, [r4, #12]
 800292e:	6020      	str	r0, [r4, #0]
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	81a3      	strh	r3, [r4, #12]
 8002936:	9b00      	ldr	r3, [sp, #0]
 8002938:	6163      	str	r3, [r4, #20]
 800293a:	9b01      	ldr	r3, [sp, #4]
 800293c:	6120      	str	r0, [r4, #16]
 800293e:	b15b      	cbz	r3, 8002958 <__smakebuf_r+0x74>
 8002940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002944:	4630      	mov	r0, r6
 8002946:	f000 f93d 	bl	8002bc4 <_isatty_r>
 800294a:	b128      	cbz	r0, 8002958 <__smakebuf_r+0x74>
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	81a3      	strh	r3, [r4, #12]
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	431d      	orrs	r5, r3
 800295c:	81a5      	strh	r5, [r4, #12]
 800295e:	e7cd      	b.n	80028fc <__smakebuf_r+0x18>
 8002960:	08002751 	.word	0x08002751

08002964 <_free_r>:
 8002964:	b538      	push	{r3, r4, r5, lr}
 8002966:	4605      	mov	r5, r0
 8002968:	2900      	cmp	r1, #0
 800296a:	d045      	beq.n	80029f8 <_free_r+0x94>
 800296c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002970:	1f0c      	subs	r4, r1, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	bfb8      	it	lt
 8002976:	18e4      	addlt	r4, r4, r3
 8002978:	f000 f946 	bl	8002c08 <__malloc_lock>
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <_free_r+0x98>)
 800297e:	6813      	ldr	r3, [r2, #0]
 8002980:	4610      	mov	r0, r2
 8002982:	b933      	cbnz	r3, 8002992 <_free_r+0x2e>
 8002984:	6063      	str	r3, [r4, #4]
 8002986:	6014      	str	r4, [r2, #0]
 8002988:	4628      	mov	r0, r5
 800298a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800298e:	f000 b93c 	b.w	8002c0a <__malloc_unlock>
 8002992:	42a3      	cmp	r3, r4
 8002994:	d90c      	bls.n	80029b0 <_free_r+0x4c>
 8002996:	6821      	ldr	r1, [r4, #0]
 8002998:	1862      	adds	r2, r4, r1
 800299a:	4293      	cmp	r3, r2
 800299c:	bf04      	itt	eq
 800299e:	681a      	ldreq	r2, [r3, #0]
 80029a0:	685b      	ldreq	r3, [r3, #4]
 80029a2:	6063      	str	r3, [r4, #4]
 80029a4:	bf04      	itt	eq
 80029a6:	1852      	addeq	r2, r2, r1
 80029a8:	6022      	streq	r2, [r4, #0]
 80029aa:	6004      	str	r4, [r0, #0]
 80029ac:	e7ec      	b.n	8002988 <_free_r+0x24>
 80029ae:	4613      	mov	r3, r2
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	b10a      	cbz	r2, 80029b8 <_free_r+0x54>
 80029b4:	42a2      	cmp	r2, r4
 80029b6:	d9fa      	bls.n	80029ae <_free_r+0x4a>
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	1858      	adds	r0, r3, r1
 80029bc:	42a0      	cmp	r0, r4
 80029be:	d10b      	bne.n	80029d8 <_free_r+0x74>
 80029c0:	6820      	ldr	r0, [r4, #0]
 80029c2:	4401      	add	r1, r0
 80029c4:	1858      	adds	r0, r3, r1
 80029c6:	4282      	cmp	r2, r0
 80029c8:	6019      	str	r1, [r3, #0]
 80029ca:	d1dd      	bne.n	8002988 <_free_r+0x24>
 80029cc:	6810      	ldr	r0, [r2, #0]
 80029ce:	6852      	ldr	r2, [r2, #4]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	4401      	add	r1, r0
 80029d4:	6019      	str	r1, [r3, #0]
 80029d6:	e7d7      	b.n	8002988 <_free_r+0x24>
 80029d8:	d902      	bls.n	80029e0 <_free_r+0x7c>
 80029da:	230c      	movs	r3, #12
 80029dc:	602b      	str	r3, [r5, #0]
 80029de:	e7d3      	b.n	8002988 <_free_r+0x24>
 80029e0:	6820      	ldr	r0, [r4, #0]
 80029e2:	1821      	adds	r1, r4, r0
 80029e4:	428a      	cmp	r2, r1
 80029e6:	bf04      	itt	eq
 80029e8:	6811      	ldreq	r1, [r2, #0]
 80029ea:	6852      	ldreq	r2, [r2, #4]
 80029ec:	6062      	str	r2, [r4, #4]
 80029ee:	bf04      	itt	eq
 80029f0:	1809      	addeq	r1, r1, r0
 80029f2:	6021      	streq	r1, [r4, #0]
 80029f4:	605c      	str	r4, [r3, #4]
 80029f6:	e7c7      	b.n	8002988 <_free_r+0x24>
 80029f8:	bd38      	pop	{r3, r4, r5, pc}
 80029fa:	bf00      	nop
 80029fc:	20000098 	.word	0x20000098

08002a00 <_malloc_r>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	1ccd      	adds	r5, r1, #3
 8002a04:	f025 0503 	bic.w	r5, r5, #3
 8002a08:	3508      	adds	r5, #8
 8002a0a:	2d0c      	cmp	r5, #12
 8002a0c:	bf38      	it	cc
 8002a0e:	250c      	movcc	r5, #12
 8002a10:	2d00      	cmp	r5, #0
 8002a12:	4606      	mov	r6, r0
 8002a14:	db01      	blt.n	8002a1a <_malloc_r+0x1a>
 8002a16:	42a9      	cmp	r1, r5
 8002a18:	d903      	bls.n	8002a22 <_malloc_r+0x22>
 8002a1a:	230c      	movs	r3, #12
 8002a1c:	6033      	str	r3, [r6, #0]
 8002a1e:	2000      	movs	r0, #0
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	f000 f8f1 	bl	8002c08 <__malloc_lock>
 8002a26:	4a21      	ldr	r2, [pc, #132]	; (8002aac <_malloc_r+0xac>)
 8002a28:	6814      	ldr	r4, [r2, #0]
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	b991      	cbnz	r1, 8002a54 <_malloc_r+0x54>
 8002a2e:	4c20      	ldr	r4, [pc, #128]	; (8002ab0 <_malloc_r+0xb0>)
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	b91b      	cbnz	r3, 8002a3c <_malloc_r+0x3c>
 8002a34:	4630      	mov	r0, r6
 8002a36:	f000 f83d 	bl	8002ab4 <_sbrk_r>
 8002a3a:	6020      	str	r0, [r4, #0]
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4630      	mov	r0, r6
 8002a40:	f000 f838 	bl	8002ab4 <_sbrk_r>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d124      	bne.n	8002a92 <_malloc_r+0x92>
 8002a48:	230c      	movs	r3, #12
 8002a4a:	6033      	str	r3, [r6, #0]
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f000 f8dc 	bl	8002c0a <__malloc_unlock>
 8002a52:	e7e4      	b.n	8002a1e <_malloc_r+0x1e>
 8002a54:	680b      	ldr	r3, [r1, #0]
 8002a56:	1b5b      	subs	r3, r3, r5
 8002a58:	d418      	bmi.n	8002a8c <_malloc_r+0x8c>
 8002a5a:	2b0b      	cmp	r3, #11
 8002a5c:	d90f      	bls.n	8002a7e <_malloc_r+0x7e>
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	50cd      	str	r5, [r1, r3]
 8002a62:	18cc      	adds	r4, r1, r3
 8002a64:	4630      	mov	r0, r6
 8002a66:	f000 f8d0 	bl	8002c0a <__malloc_unlock>
 8002a6a:	f104 000b 	add.w	r0, r4, #11
 8002a6e:	1d23      	adds	r3, r4, #4
 8002a70:	f020 0007 	bic.w	r0, r0, #7
 8002a74:	1ac3      	subs	r3, r0, r3
 8002a76:	d0d3      	beq.n	8002a20 <_malloc_r+0x20>
 8002a78:	425a      	negs	r2, r3
 8002a7a:	50e2      	str	r2, [r4, r3]
 8002a7c:	e7d0      	b.n	8002a20 <_malloc_r+0x20>
 8002a7e:	428c      	cmp	r4, r1
 8002a80:	684b      	ldr	r3, [r1, #4]
 8002a82:	bf16      	itet	ne
 8002a84:	6063      	strne	r3, [r4, #4]
 8002a86:	6013      	streq	r3, [r2, #0]
 8002a88:	460c      	movne	r4, r1
 8002a8a:	e7eb      	b.n	8002a64 <_malloc_r+0x64>
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	6849      	ldr	r1, [r1, #4]
 8002a90:	e7cc      	b.n	8002a2c <_malloc_r+0x2c>
 8002a92:	1cc4      	adds	r4, r0, #3
 8002a94:	f024 0403 	bic.w	r4, r4, #3
 8002a98:	42a0      	cmp	r0, r4
 8002a9a:	d005      	beq.n	8002aa8 <_malloc_r+0xa8>
 8002a9c:	1a21      	subs	r1, r4, r0
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f000 f808 	bl	8002ab4 <_sbrk_r>
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	d0cf      	beq.n	8002a48 <_malloc_r+0x48>
 8002aa8:	6025      	str	r5, [r4, #0]
 8002aaa:	e7db      	b.n	8002a64 <_malloc_r+0x64>
 8002aac:	20000098 	.word	0x20000098
 8002ab0:	2000009c 	.word	0x2000009c

08002ab4 <_sbrk_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	4c06      	ldr	r4, [pc, #24]	; (8002ad0 <_sbrk_r+0x1c>)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4605      	mov	r5, r0
 8002abc:	4608      	mov	r0, r1
 8002abe:	6023      	str	r3, [r4, #0]
 8002ac0:	f7fd fe5a 	bl	8000778 <_sbrk>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d102      	bne.n	8002ace <_sbrk_r+0x1a>
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	b103      	cbz	r3, 8002ace <_sbrk_r+0x1a>
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	20000104 	.word	0x20000104

08002ad4 <__sread>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002adc:	f000 f896 	bl	8002c0c <_read_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	bfab      	itete	ge
 8002ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ae8:	181b      	addge	r3, r3, r0
 8002aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002aee:	bfac      	ite	ge
 8002af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002af2:	81a3      	strhlt	r3, [r4, #12]
 8002af4:	bd10      	pop	{r4, pc}

08002af6 <__swrite>:
 8002af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002afa:	461f      	mov	r7, r3
 8002afc:	898b      	ldrh	r3, [r1, #12]
 8002afe:	05db      	lsls	r3, r3, #23
 8002b00:	4605      	mov	r5, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	4616      	mov	r6, r2
 8002b06:	d505      	bpl.n	8002b14 <__swrite+0x1e>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b10:	f000 f868 	bl	8002be4 <_lseek_r>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b1e:	81a3      	strh	r3, [r4, #12]
 8002b20:	4632      	mov	r2, r6
 8002b22:	463b      	mov	r3, r7
 8002b24:	4628      	mov	r0, r5
 8002b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2a:	f000 b817 	b.w	8002b5c <_write_r>

08002b2e <__sseek>:
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	460c      	mov	r4, r1
 8002b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b36:	f000 f855 	bl	8002be4 <_lseek_r>
 8002b3a:	1c43      	adds	r3, r0, #1
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	bf15      	itete	ne
 8002b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b4a:	81a3      	strheq	r3, [r4, #12]
 8002b4c:	bf18      	it	ne
 8002b4e:	81a3      	strhne	r3, [r4, #12]
 8002b50:	bd10      	pop	{r4, pc}

08002b52 <__sclose>:
 8002b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b56:	f000 b813 	b.w	8002b80 <_close_r>
	...

08002b5c <_write_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4c07      	ldr	r4, [pc, #28]	; (8002b7c <_write_r+0x20>)
 8002b60:	4605      	mov	r5, r0
 8002b62:	4608      	mov	r0, r1
 8002b64:	4611      	mov	r1, r2
 8002b66:	2200      	movs	r2, #0
 8002b68:	6022      	str	r2, [r4, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f7fd fc81 	bl	8000472 <_write>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_write_r+0x1e>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_write_r+0x1e>
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	20000104 	.word	0x20000104

08002b80 <_close_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4c06      	ldr	r4, [pc, #24]	; (8002b9c <_close_r+0x1c>)
 8002b84:	2300      	movs	r3, #0
 8002b86:	4605      	mov	r5, r0
 8002b88:	4608      	mov	r0, r1
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	f7fd fdbf 	bl	800070e <_close>
 8002b90:	1c43      	adds	r3, r0, #1
 8002b92:	d102      	bne.n	8002b9a <_close_r+0x1a>
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	b103      	cbz	r3, 8002b9a <_close_r+0x1a>
 8002b98:	602b      	str	r3, [r5, #0]
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
 8002b9c:	20000104 	.word	0x20000104

08002ba0 <_fstat_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4c07      	ldr	r4, [pc, #28]	; (8002bc0 <_fstat_r+0x20>)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	f7fd fdba 	bl	8000726 <_fstat>
 8002bb2:	1c43      	adds	r3, r0, #1
 8002bb4:	d102      	bne.n	8002bbc <_fstat_r+0x1c>
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	b103      	cbz	r3, 8002bbc <_fstat_r+0x1c>
 8002bba:	602b      	str	r3, [r5, #0]
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000104 	.word	0x20000104

08002bc4 <_isatty_r>:
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4c06      	ldr	r4, [pc, #24]	; (8002be0 <_isatty_r+0x1c>)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	4605      	mov	r5, r0
 8002bcc:	4608      	mov	r0, r1
 8002bce:	6023      	str	r3, [r4, #0]
 8002bd0:	f7fd fdb9 	bl	8000746 <_isatty>
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	d102      	bne.n	8002bde <_isatty_r+0x1a>
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	b103      	cbz	r3, 8002bde <_isatty_r+0x1a>
 8002bdc:	602b      	str	r3, [r5, #0]
 8002bde:	bd38      	pop	{r3, r4, r5, pc}
 8002be0:	20000104 	.word	0x20000104

08002be4 <_lseek_r>:
 8002be4:	b538      	push	{r3, r4, r5, lr}
 8002be6:	4c07      	ldr	r4, [pc, #28]	; (8002c04 <_lseek_r+0x20>)
 8002be8:	4605      	mov	r5, r0
 8002bea:	4608      	mov	r0, r1
 8002bec:	4611      	mov	r1, r2
 8002bee:	2200      	movs	r2, #0
 8002bf0:	6022      	str	r2, [r4, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f7fd fdb2 	bl	800075c <_lseek>
 8002bf8:	1c43      	adds	r3, r0, #1
 8002bfa:	d102      	bne.n	8002c02 <_lseek_r+0x1e>
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	b103      	cbz	r3, 8002c02 <_lseek_r+0x1e>
 8002c00:	602b      	str	r3, [r5, #0]
 8002c02:	bd38      	pop	{r3, r4, r5, pc}
 8002c04:	20000104 	.word	0x20000104

08002c08 <__malloc_lock>:
 8002c08:	4770      	bx	lr

08002c0a <__malloc_unlock>:
 8002c0a:	4770      	bx	lr

08002c0c <_read_r>:
 8002c0c:	b538      	push	{r3, r4, r5, lr}
 8002c0e:	4c07      	ldr	r4, [pc, #28]	; (8002c2c <_read_r+0x20>)
 8002c10:	4605      	mov	r5, r0
 8002c12:	4608      	mov	r0, r1
 8002c14:	4611      	mov	r1, r2
 8002c16:	2200      	movs	r2, #0
 8002c18:	6022      	str	r2, [r4, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7fd fd5a 	bl	80006d4 <_read>
 8002c20:	1c43      	adds	r3, r0, #1
 8002c22:	d102      	bne.n	8002c2a <_read_r+0x1e>
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	b103      	cbz	r3, 8002c2a <_read_r+0x1e>
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
 8002c2c:	20000104 	.word	0x20000104

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
