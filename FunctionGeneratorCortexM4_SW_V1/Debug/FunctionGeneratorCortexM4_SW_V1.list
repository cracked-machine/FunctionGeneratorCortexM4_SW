
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fd4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d8  080141b8  080141b8  000241b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015590  08015590  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08015590  08015590  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015590  08015590  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015590  08015590  00025590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015594  08015594  00025594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08015598  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  20001e0c  080173a4  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cf4  080173a4  00032cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000494a5  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007de1  00000000  00000000  0007b2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022c0  00000000  00000000  000830c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e50  00000000  00000000  00085388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c02  00000000  00000000  000871d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003015e  00000000  00000000  000bcdda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001269b9  00000000  00000000  000ecf38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002138f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009988  00000000  00000000  0021396c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801419c 	.word	0x0801419c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	0801419c 	.word	0x0801419c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00e fae2 	bl	800f2d8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f902 	bl	8000f1c <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	080141b8 	.word	0x080141b8

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00e fb17 	bl	800f35a <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00e ff6d 	bl	800fc0c <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00e fd4f 	bl	800f7d8 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <DM_PostInit+0x30>)
 8000d58:	f00e fabe 	bl	800f2d8 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fcd6 	bl	8008710 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb9a 	bl	800149c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	080141c4 	.word	0x080141c4

08000d74 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d7a:	f003 ff35 	bl	8004be8 <ToplevelMenu_getStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d015      	beq.n	8000db0 <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000d84:	f003 ff30 	bl	8004be8 <ToplevelMenu_getStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d008      	beq.n	8000da0 <DM_UpdateDisplay+0x2c>
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d00a      	beq.n	8000da8 <DM_UpdateDisplay+0x34>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d96:	e07d      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 feb1 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000d9e:	e079      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fead 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000da6:	e075      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f002 fea9 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000dae:	e071      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000db0:	f003 fd32 	bl	8004818 <FuncMenu_getStatus>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d015      	beq.n	8000de6 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000dba:	f003 fd2d 	bl	8004818 <FuncMenu_getStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d008      	beq.n	8000dd6 <DM_UpdateDisplay+0x62>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00a      	beq.n	8000dde <DM_UpdateDisplay+0x6a>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d000      	beq.n	8000dce <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000dcc:	e062      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 f91c 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000dd4:	e05e      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f002 f918 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000ddc:	e05a      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f002 f914 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000de4:	e056      	b.n	8000e94 <DM_UpdateDisplay+0x120>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000de6:	f003 fe0d 	bl	8004a04 <GainMenu_getStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000df0:	f003 fe08 	bl	8004a04 <GainMenu_getStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d008      	beq.n	8000e0c <DM_UpdateDisplay+0x98>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d00a      	beq.n	8000e14 <DM_UpdateDisplay+0xa0>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d000      	beq.n	8000e04 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e02:	e047      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 fdd5 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e0a:	e043      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f002 fdd1 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e12:	e03f      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f002 fdcd 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e1a:	e03b      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e1c:	f003 fcf0 	bl	8004800 <FreqMenu_getStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d020      	beq.n	8000e68 <DM_UpdateDisplay+0xf4>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e26:	f003 fceb 	bl	8004800 <FreqMenu_getStatus>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d82f      	bhi.n	8000e92 <DM_UpdateDisplay+0x11e>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <DM_UpdateDisplay+0xc4>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e51 	.word	0x08000e51
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e61 	.word	0x08000e61
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fb8b 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e4e:	e021      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fb87 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e56:	e01d      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fb83 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e5e:	e019      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e60:	2004      	movs	r0, #4
 8000e62:	f000 fb7f 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e66:	e015      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e68:	f003 f838 	bl	8003edc <BiasMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <DM_UpdateDisplay+0x106>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff30 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e78:	e00c      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e7a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2301      	movs	r3, #1
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	210a      	movs	r1, #10
 8000e8a:	4820      	ldr	r0, [pc, #128]	; (8000f0c <DM_UpdateDisplay+0x198>)
 8000e8c:	f00e fa24 	bl	800f2d8 <ILI9341_Draw_Text>
 8000e90:	e000      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				break;
 8000e92:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
 8000e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9c:	222e      	movs	r2, #46	; 0x2e
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00f f8f5 	bl	8010090 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ea6:	f004 f8f9 	bl	800509c <BO_GetOutputBias>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <DM_UpdateDisplay+0x19c>)
 8000eb2:	2132      	movs	r1, #50	; 0x32
 8000eb4:	f00f fdcc 	bl	8010a50 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eb8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ebc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	220a      	movs	r2, #10
 8000eca:	21dc      	movs	r1, #220	; 0xdc
 8000ecc:	f00e fa04 	bl	800f2d8 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	222e      	movs	r2, #46	; 0x2e
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00f f8d8 	bl	8010090 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <DM_UpdateDisplay+0x1a0>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <DM_UpdateDisplay+0x1a4>)
 8000ee8:	2132      	movs	r1, #50	; 0x32
 8000eea:	f00f fdb1 	bl	8010a50 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	2214      	movs	r2, #20
 8000efe:	21dc      	movs	r1, #220	; 0xdc
 8000f00:	f00e f9ea 	bl	800f2d8 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG



}
 8000f04:	bf00      	nop
 8000f06:	3768      	adds	r7, #104	; 0x68
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	080141d4 	.word	0x080141d4
 8000f10:	080141f8 	.word	0x080141f8
 8000f14:	40012c00 	.word	0x40012c00
 8000f18:	08014208 	.word	0x08014208

08000f1c <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b09f      	sub	sp, #124	; 0x7c
 8000f20:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f3a:	238c      	movs	r3, #140	; 0x8c
 8000f3c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f40:	2328      	movs	r3, #40	; 0x28
 8000f42:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f58:	23af      	movs	r3, #175	; 0xaf
 8000f5a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f5e:	2346      	movs	r3, #70	; 0x46
 8000f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f76:	238a      	movs	r3, #138	; 0x8a
 8000f78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f82:	4bc4      	ldr	r3, [pc, #784]	; (8001294 <DM_DisplayFormattedOutput+0x378>)
 8000f84:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f94:	23a1      	movs	r3, #161	; 0xa1
 8000f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f9a:	2382      	movs	r3, #130	; 0x82
 8000f9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fa0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	2103      	movs	r1, #3
 8000fba:	48b7      	ldr	r0, [pc, #732]	; (8001298 <DM_DisplayFormattedOutput+0x37c>)
 8000fbc:	f00e f98c 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	2103      	movs	r1, #3
 8000fda:	48b0      	ldr	r0, [pc, #704]	; (800129c <DM_DisplayFormattedOutput+0x380>)
 8000fdc:	f00e f97c 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fe0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	48a9      	ldr	r0, [pc, #676]	; (80012a0 <DM_DisplayFormattedOutput+0x384>)
 8000ffc:	f00e f96c 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001000:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001004:	b299      	uxth	r1, r3
 8001006:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800100a:	b29b      	uxth	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001016:	460a      	mov	r2, r1
 8001018:	2103      	movs	r1, #3
 800101a:	48a2      	ldr	r0, [pc, #648]	; (80012a4 <DM_DisplayFormattedOutput+0x388>)
 800101c:	f00e f95c 	bl	800f2d8 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001020:	f005 fb78 	bl	8006714 <SM_GetOutputInHertz>
 8001024:	ee10 3a10 	vmov	r3, s0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fab5 	bl	8000598 <__aeabi_f2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001036:	e9cd 3400 	strd	r3, r4, [sp]
 800103a:	4a9b      	ldr	r2, [pc, #620]	; (80012a8 <DM_DisplayFormattedOutput+0x38c>)
 800103c:	210f      	movs	r1, #15
 800103e:	f00f fd07 	bl	8010a50 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001042:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001046:	b299      	uxth	r1, r3
 8001048:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800104c:	b29c      	uxth	r4, r3
 800104e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001052:	b29b      	uxth	r3, r3
 8001054:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001062:	4622      	mov	r2, r4
 8001064:	f00e f938 	bl	800f2d8 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001068:	2000      	movs	r0, #0
 800106a:	f005 f8bb 	bl	80061e4 <SM_GetOutputChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001074:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01d      	beq.n	80010b8 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 800107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a86      	ldr	r2, [pc, #536]	; (80012ac <DM_DisplayFormattedOutput+0x390>)
 8001094:	2112      	movs	r1, #18
 8001096:	f00f fcdb 	bl	8010a50 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 800109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa7a 	bl	8000598 <__aeabi_f2d>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	e9cd 3400 	strd	r3, r4, [sp]
 80010b0:	4a7f      	ldr	r2, [pc, #508]	; (80012b0 <DM_DisplayFormattedOutput+0x394>)
 80010b2:	2114      	movs	r1, #20
 80010b4:	f00f fccc 	bl	8010a50 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010bc:	b299      	uxth	r1, r3
 80010be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c2:	b29c      	uxth	r4, r3
 80010c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010ce:	2200      	movs	r2, #0
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010d8:	4622      	mov	r2, r4
 80010da:	f00e f8fd 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010de:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e2:	b299      	uxth	r1, r3
 80010e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010e8:	b29c      	uxth	r4, r3
 80010ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f107 0014 	add.w	r0, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010fe:	4622      	mov	r2, r4
 8001100:	f00e f8ea 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001104:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001108:	b29b      	uxth	r3, r3
 800110a:	3380      	adds	r3, #128	; 0x80
 800110c:	b299      	uxth	r1, r3
 800110e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001112:	b298      	uxth	r0, r3
 8001114:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001118:	b29b      	uxth	r3, r3
 800111a:	2200      	movs	r2, #0
 800111c:	9201      	str	r2, [sp, #4]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001124:	4602      	mov	r2, r0
 8001126:	4863      	ldr	r0, [pc, #396]	; (80012b4 <DM_DisplayFormattedOutput+0x398>)
 8001128:	f00e f8d6 	bl	800f2d8 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 800112c:	f003 ffb6 	bl	800509c <BO_GetOutputBias>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <DM_DisplayFormattedOutput+0x222>
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
 800113c:	e00b      	b.n	8001156 <DM_DisplayFormattedOutput+0x23a>
 800113e:	f003 ffad 	bl	800509c <BO_GetOutputBias>
 8001142:	ee07 0a90 	vmov	s15, r0
 8001146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001156:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001158:	f7ff fa1e 	bl	8000598 <__aeabi_f2d>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	f107 0008 	add.w	r0, r7, #8
 8001164:	e9cd 3400 	strd	r3, r4, [sp]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <DM_DisplayFormattedOutput+0x39c>)
 800116a:	210c      	movs	r1, #12
 800116c:	f00f fc70 	bl	8010a50 <sniprintf>
	if(BO_GetBiasPolarity())
 8001170:	f003 ff34 	bl	8004fdc <BO_GetBiasPolarity>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d022      	beq.n	80011c0 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 800117a:	4a50      	ldr	r2, [pc, #320]	; (80012bc <DM_DisplayFormattedOutput+0x3a0>)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	4611      	mov	r1, r2
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	0c12      	lsrs	r2, r2, #16
 8001188:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f00f fc90 	bl	8010ab8 <strcat>
 8001198:	4604      	mov	r4, r0
 800119a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800119e:	b299      	uxth	r1, r3
 80011a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011a4:	b298      	uxth	r0, r3
 80011a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b6:	4602      	mov	r2, r0
 80011b8:	4620      	mov	r0, r4
 80011ba:	f00e f88d 	bl	800f2d8 <ILI9341_Draw_Text>
 80011be:	e021      	b.n	8001204 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <DM_DisplayFormattedOutput+0x3a4>)
 80011c2:	463b      	mov	r3, r7
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4611      	mov	r1, r2
 80011c8:	8019      	strh	r1, [r3, #0]
 80011ca:	3302      	adds	r3, #2
 80011cc:	0c12      	lsrs	r2, r2, #16
 80011ce:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	463b      	mov	r3, r7
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f00f fc6d 	bl	8010ab8 <strcat>
 80011de:	4604      	mov	r4, r0
 80011e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011e4:	b299      	uxth	r1, r3
 80011e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011ea:	b298      	uxth	r0, r3
 80011ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011fc:	4602      	mov	r2, r0
 80011fe:	4620      	mov	r0, r4
 8001200:	f00e f86a 	bl	800f2d8 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001204:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001208:	b29b      	uxth	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	22aa      	movs	r2, #170	; 0xaa
 8001216:	2103      	movs	r1, #3
 8001218:	482a      	ldr	r0, [pc, #168]	; (80012c4 <DM_DisplayFormattedOutput+0x3a8>)
 800121a:	f00e f85d 	bl	800f2d8 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800121e:	2000      	movs	r0, #0
 8001220:	f004 ffe0 	bl	80061e4 <SM_GetOutputChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001234:	2b06      	cmp	r3, #6
 8001236:	f200 8091 	bhi.w	800135c <DM_DisplayFormattedOutput+0x440>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <DM_DisplayFormattedOutput+0x324>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	0800125d 	.word	0x0800125d
 8001244:	08001279 	.word	0x08001279
 8001248:	080012d1 	.word	0x080012d1
 800124c:	080012ed 	.word	0x080012ed
 8001250:	08001309 	.word	0x08001309
 8001254:	08001325 	.word	0x08001325
 8001258:	08001341 	.word	0x08001341
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800125c:	233c      	movs	r3, #60	; 0x3c
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <DM_DisplayFormattedOutput+0x3ac>)
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f240 23fd 	movw	r3, #765	; 0x2fd
 800126c:	2203      	movs	r2, #3
 800126e:	218c      	movs	r1, #140	; 0x8c
 8001270:	2050      	movs	r0, #80	; 0x50
 8001272:	f00d fe8d 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 8001276:	e071      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001278:	233c      	movs	r3, #60	; 0x3c
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <DM_DisplayFormattedOutput+0x3b0>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	23c8      	movs	r3, #200	; 0xc8
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001288:	2203      	movs	r2, #3
 800128a:	21a0      	movs	r1, #160	; 0xa0
 800128c:	2050      	movs	r0, #80	; 0x50
 800128e:	f00d fe7f 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 8001292:	e063      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
 8001294:	3a449ba6 	.word	0x3a449ba6
 8001298:	08014218 	.word	0x08014218
 800129c:	08014228 	.word	0x08014228
 80012a0:	08014238 	.word	0x08014238
 80012a4:	08014248 	.word	0x08014248
 80012a8:	08014258 	.word	0x08014258
 80012ac:	08014268 	.word	0x08014268
 80012b0:	08014274 	.word	0x08014274
 80012b4:	08014280 	.word	0x08014280
 80012b8:	08014288 	.word	0x08014288
 80012bc:	080142a8 	.word	0x080142a8
 80012c0:	080142ac 	.word	0x080142ac
 80012c4:	08014294 	.word	0x08014294
 80012c8:	20000e28 	.word	0x20000e28
 80012cc:	20000f18 	.word	0x20000f18
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00d fe53 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 80012ea:	e037      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012ec:	233c      	movs	r3, #60	; 0x3c
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	23c8      	movs	r3, #200	; 0xc8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012fc:	2203      	movs	r2, #3
 80012fe:	21a0      	movs	r1, #160	; 0xa0
 8001300:	2050      	movs	r0, #80	; 0x50
 8001302:	f00d fe45 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 8001306:	e029      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001308:	233c      	movs	r3, #60	; 0x3c
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23c8      	movs	r3, #200	; 0xc8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001318:	2203      	movs	r2, #3
 800131a:	21a0      	movs	r1, #160	; 0xa0
 800131c:	2050      	movs	r0, #80	; 0x50
 800131e:	f00d fe37 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 8001322:	e01b      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001324:	233c      	movs	r3, #60	; 0x3c
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	23c8      	movs	r3, #200	; 0xc8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001334:	2203      	movs	r2, #3
 8001336:	21a0      	movs	r1, #160	; 0xa0
 8001338:	2050      	movs	r0, #80	; 0x50
 800133a:	f00d fe29 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 800133e:	e00d      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001340:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001344:	b29b      	uxth	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001350:	22aa      	movs	r2, #170	; 0xaa
 8001352:	2150      	movs	r1, #80	; 0x50
 8001354:	484d      	ldr	r0, [pc, #308]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001356:	f00d ffbf 	bl	800f2d8 <ILI9341_Draw_Text>
			break;
 800135a:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800135c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001360:	b29b      	uxth	r3, r3
 8001362:	2200      	movs	r2, #0
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800136c:	22aa      	movs	r2, #170	; 0xaa
 800136e:	21b4      	movs	r1, #180	; 0xb4
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <DM_DisplayFormattedOutput+0x574>)
 8001372:	f00d ffb1 	bl	800f2d8 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001376:	2001      	movs	r0, #1
 8001378:	f004 ff34 	bl	80061e4 <SM_GetOutputChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001388:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800138c:	2b06      	cmp	r3, #6
 800138e:	d873      	bhi.n	8001478 <DM_DisplayFormattedOutput+0x55c>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <DM_DisplayFormattedOutput+0x47c>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	080013ed 	.word	0x080013ed
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001425 	.word	0x08001425
 80013ac:	08001441 	.word	0x08001441
 80013b0:	0800145d 	.word	0x0800145d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80013b4:	233c      	movs	r3, #60	; 0x3c
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <DM_DisplayFormattedOutput+0x578>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013c4:	2203      	movs	r2, #3
 80013c6:	218c      	movs	r1, #140	; 0x8c
 80013c8:	20f5      	movs	r0, #245	; 0xf5
 80013ca:	f00d fde1 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 80013ce:	e053      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013d0:	233c      	movs	r3, #60	; 0x3c
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <DM_DisplayFormattedOutput+0x57c>)
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	23c8      	movs	r3, #200	; 0xc8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013e0:	2203      	movs	r2, #3
 80013e2:	21a0      	movs	r1, #160	; 0xa0
 80013e4:	20f5      	movs	r0, #245	; 0xf5
 80013e6:	f00d fdd3 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 80013ea:	e045      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013ec:	233c      	movs	r3, #60	; 0x3c
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	23c8      	movs	r3, #200	; 0xc8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013fc:	2203      	movs	r2, #3
 80013fe:	21a0      	movs	r1, #160	; 0xa0
 8001400:	20f5      	movs	r0, #245	; 0xf5
 8001402:	f00d fdc5 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 8001406:	e037      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001408:	233c      	movs	r3, #60	; 0x3c
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	23c8      	movs	r3, #200	; 0xc8
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001418:	2203      	movs	r2, #3
 800141a:	21a0      	movs	r1, #160	; 0xa0
 800141c:	20f5      	movs	r0, #245	; 0xf5
 800141e:	f00d fdb7 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 8001422:	e029      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001424:	233c      	movs	r3, #60	; 0x3c
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	23c8      	movs	r3, #200	; 0xc8
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001434:	2203      	movs	r2, #3
 8001436:	21a0      	movs	r1, #160	; 0xa0
 8001438:	20f5      	movs	r0, #245	; 0xf5
 800143a:	f00d fda9 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 800143e:	e01b      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001440:	233c      	movs	r3, #60	; 0x3c
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	23c8      	movs	r3, #200	; 0xc8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001450:	2203      	movs	r2, #3
 8001452:	21a0      	movs	r1, #160	; 0xa0
 8001454:	20f5      	movs	r0, #245	; 0xf5
 8001456:	f00d fd9b 	bl	800ef90 <ILI9341_Draw_Wave>
			break;
 800145a:	e00d      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800145c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001460:	b29b      	uxth	r3, r3
 8001462:	2200      	movs	r2, #0
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800146c:	22aa      	movs	r2, #170	; 0xaa
 800146e:	21f5      	movs	r1, #245	; 0xf5
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001472:	f00d ff31 	bl	800f2d8 <ILI9341_Draw_Text>
			break;
 8001476:	bf00      	nop
	}



}
 8001478:	bf00      	nop
 800147a:	376c      	adds	r7, #108	; 0x6c
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	20000c48 	.word	0x20000c48
 8001484:	20000d38 	.word	0x20000d38
 8001488:	20001008 	.word	0x20001008
 800148c:	0801429c 	.word	0x0801429c
 8001490:	080142a0 	.word	0x080142a0
 8001494:	20000e28 	.word	0x20000e28
 8001498:	20000f18 	.word	0x20000f18

0800149c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <DM_RefreshScreen+0x88>)
 80014a4:	f00b fd62 	bl	800cf6c <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f00e f995 	bl	800f7d8 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80014ae:	2300      	movs	r3, #0
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2328      	movs	r3, #40	; 0x28
 80014be:	2250      	movs	r2, #80	; 0x50
 80014c0:	21c8      	movs	r1, #200	; 0xc8
 80014c2:	2000      	movs	r0, #0
 80014c4:	f00d fda5 	bl	800f012 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014c8:	2300      	movs	r3, #0
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2302      	movs	r3, #2
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2328      	movs	r3, #40	; 0x28
 80014d8:	2250      	movs	r2, #80	; 0x50
 80014da:	21c8      	movs	r1, #200	; 0xc8
 80014dc:	2050      	movs	r0, #80	; 0x50
 80014de:	f00d fd98 	bl	800f012 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014e2:	2300      	movs	r3, #0
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	2250      	movs	r2, #80	; 0x50
 80014f4:	21c8      	movs	r1, #200	; 0xc8
 80014f6:	20a0      	movs	r0, #160	; 0xa0
 80014f8:	f00d fd8b 	bl	800f012 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2302      	movs	r3, #2
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	2250      	movs	r2, #80	; 0x50
 800150e:	21c8      	movs	r1, #200	; 0xc8
 8001510:	20f0      	movs	r0, #240	; 0xf0
 8001512:	f00d fd7e 	bl	800f012 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <DM_RefreshScreen+0x88>)
 8001518:	f00b fcf2 	bl	800cf00 <HAL_TIM_Base_Start_IT>


}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20002b24 	.word	0x20002b24

08001528 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <DM_SetErrorDebugMsg+0x34>)
 8001534:	212d      	movs	r1, #45	; 0x2d
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 8001538:	f00f fa8a 	bl	8010a50 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800153c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	22be      	movs	r2, #190	; 0xbe
 800154a:	210a      	movs	r1, #10
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 800154e:	f00d fec3 	bl	800f2d8 <ILI9341_Draw_Text>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0801432c 	.word	0x0801432c
 8001560:	20001e28 	.word	0x20001e28

08001564 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3b01      	subs	r3, #1
 8001572:	2b03      	cmp	r3, #3
 8001574:	d816      	bhi.n	80015a4 <FreqMenu_DrawMenu+0x40>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <FreqMenu_DrawMenu+0x18>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	08001593 	.word	0x08001593
 8001584:	08001599 	.word	0x08001599
 8001588:	0800159f 	.word	0x0800159f
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800158c:	f000 f810 	bl	80015b0 <FreqMenu_DrawMainMenu>
			break;
 8001590:	e009      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001592:	f000 f849 	bl	8001628 <FreqMenu_DrawPresetMenu>
			break;
 8001596:	e006      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001598:	f001 faf4 	bl	8002b84 <FreqMenu_DrawAdjustMenu>
			break;
 800159c:	e003      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800159e:	f001 fb07 	bl	8002bb0 <FreqMenu_DrawSweepMenu>
			break;
 80015a2:	e000      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015a4:	bf00      	nop

	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2302      	movs	r3, #2
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	2105      	movs	r1, #5
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <FreqMenu_DrawMainMenu+0x68>)
 80015c8:	f00d fe86 	bl	800f2d8 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80015cc:	f7ff fca6 	bl	8000f1c <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80015d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	22d2      	movs	r2, #210	; 0xd2
 80015de:	2105      	movs	r1, #5
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <FreqMenu_DrawMainMenu+0x6c>)
 80015e2:	f00d fe79 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015e6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	22d2      	movs	r2, #210	; 0xd2
 80015f4:	2161      	movs	r1, #97	; 0x61
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <FreqMenu_DrawMainMenu+0x70>)
 80015f8:	f00d fe6e 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2302      	movs	r3, #2
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	22d2      	movs	r2, #210	; 0xd2
 800160a:	21ac      	movs	r1, #172	; 0xac
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <FreqMenu_DrawMainMenu+0x74>)
 800160e:	f00d fe63 	bl	800f2d8 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08014330 	.word	0x08014330
 800161c:	0801433c 	.word	0x0801433c
 8001620:	08014344 	.word	0x08014344
 8001624:	0801434c 	.word	0x0801434c

08001628 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	220a      	movs	r2, #10
 800163c:	2105      	movs	r1, #5
 800163e:	4886      	ldr	r0, [pc, #536]	; (8001858 <FreqMenu_DrawPresetMenu+0x230>)
 8001640:	f00d fe4a 	bl	800f2d8 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001644:	2328      	movs	r3, #40	; 0x28
 8001646:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001648:	233c      	movs	r3, #60	; 0x3c
 800164a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800164c:	2350      	movs	r3, #80	; 0x50
 800164e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001654:	2378      	movs	r3, #120	; 0x78
 8001656:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001658:	238c      	movs	r3, #140	; 0x8c
 800165a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001660:	f003 fe7a 	bl	8005358 <FreqO_GetFPresetObject>
 8001664:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f001 825d 	beq.w	8002b28 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001676:	4293      	cmp	r3, r2
 8001678:	f000 849a 	beq.w	8001fb0 <FreqMenu_DrawPresetMenu+0x988>
 800167c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001680:	4293      	cmp	r3, r2
 8001682:	d817      	bhi.n	80016b4 <FreqMenu_DrawPresetMenu+0x8c>
 8001684:	2b32      	cmp	r3, #50	; 0x32
 8001686:	f000 81b3 	beq.w	80019f0 <FreqMenu_DrawPresetMenu+0x3c8>
 800168a:	2b32      	cmp	r3, #50	; 0x32
 800168c:	d806      	bhi.n	800169c <FreqMenu_DrawPresetMenu+0x74>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d038      	beq.n	8001704 <FreqMenu_DrawPresetMenu+0xdc>
 8001692:	2b0a      	cmp	r3, #10
 8001694:	f000 8102 	beq.w	800189c <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001698:	f001 ba52 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800169c:	2bfa      	cmp	r3, #250	; 0xfa
 800169e:	f000 8317 	beq.w	8001cd0 <FreqMenu_DrawPresetMenu+0x6a8>
 80016a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a6:	f000 83d9 	beq.w	8001e5c <FreqMenu_DrawPresetMenu+0x834>
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	f000 8266 	beq.w	8001b7c <FreqMenu_DrawPresetMenu+0x554>
}
 80016b0:	f001 ba46 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016b8:	4293      	cmp	r3, r2
 80016ba:	f000 8758 	beq.w	800256e <FreqMenu_DrawPresetMenu+0xf46>
 80016be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d80f      	bhi.n	80016e6 <FreqMenu_DrawPresetMenu+0xbe>
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 85e0 	beq.w	8002290 <FreqMenu_DrawPresetMenu+0xc68>
 80016d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f000 86a1 	beq.w	800241c <FreqMenu_DrawPresetMenu+0xdf4>
 80016da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016de:	f000 852d 	beq.w	800213c <FreqMenu_DrawPresetMenu+0xb14>
}
 80016e2:	f001 ba2d 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <FreqMenu_DrawPresetMenu+0x234>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f001 80ae 	beq.w	800284a <FreqMenu_DrawPresetMenu+0x1222>
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <FreqMenu_DrawPresetMenu+0x238>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f001 816f 	beq.w	80029d4 <FreqMenu_DrawPresetMenu+0x13ac>
 80016f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f000 87fc 	beq.w	80026f8 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001700:	f001 ba1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	b29a      	uxth	r2, r3
 8001708:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2105      	movs	r1, #5
 8001716:	4853      	ldr	r0, [pc, #332]	; (8001864 <FreqMenu_DrawPresetMenu+0x23c>)
 8001718:	f00d fdde 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	b29a      	uxth	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2302      	movs	r3, #2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800172c:	2105      	movs	r1, #5
 800172e:	484e      	ldr	r0, [pc, #312]	; (8001868 <FreqMenu_DrawPresetMenu+0x240>)
 8001730:	f00d fdd2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2300      	movs	r3, #0
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001744:	2105      	movs	r1, #5
 8001746:	4849      	ldr	r0, [pc, #292]	; (800186c <FreqMenu_DrawPresetMenu+0x244>)
 8001748:	f00d fdc6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800174c:	7b3b      	ldrb	r3, [r7, #12]
 800174e:	b29a      	uxth	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800175c:	2105      	movs	r1, #5
 800175e:	4844      	ldr	r0, [pc, #272]	; (8001870 <FreqMenu_DrawPresetMenu+0x248>)
 8001760:	f00d fdba 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001774:	2105      	movs	r1, #5
 8001776:	483f      	ldr	r0, [pc, #252]	; (8001874 <FreqMenu_DrawPresetMenu+0x24c>)
 8001778:	f00d fdae 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2302      	movs	r3, #2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800178c:	2105      	movs	r1, #5
 800178e:	483a      	ldr	r0, [pc, #232]	; (8001878 <FreqMenu_DrawPresetMenu+0x250>)
 8001790:	f00d fda2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	b29a      	uxth	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a4:	2105      	movs	r1, #5
 80017a6:	4835      	ldr	r0, [pc, #212]	; (800187c <FreqMenu_DrawPresetMenu+0x254>)
 80017a8:	f00d fd96 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	2302      	movs	r3, #2
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017bc:	2178      	movs	r1, #120	; 0x78
 80017be:	4830      	ldr	r0, [pc, #192]	; (8001880 <FreqMenu_DrawPresetMenu+0x258>)
 80017c0:	f00d fd8a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d4:	2178      	movs	r1, #120	; 0x78
 80017d6:	482b      	ldr	r0, [pc, #172]	; (8001884 <FreqMenu_DrawPresetMenu+0x25c>)
 80017d8:	f00d fd7e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	4826      	ldr	r0, [pc, #152]	; (8001888 <FreqMenu_DrawPresetMenu+0x260>)
 80017f0:	f00d fd72 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2302      	movs	r3, #2
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <FreqMenu_DrawPresetMenu+0x264>)
 8001808:	f00d fd66 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	b29a      	uxth	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2302      	movs	r3, #2
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <FreqMenu_DrawPresetMenu+0x268>)
 8001820:	f00d fd5a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	b29a      	uxth	r2, r3
 8001828:	2300      	movs	r3, #0
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	2302      	movs	r3, #2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	4817      	ldr	r0, [pc, #92]	; (8001894 <FreqMenu_DrawPresetMenu+0x26c>)
 8001838:	f00d fd4e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <FreqMenu_DrawPresetMenu+0x270>)
 8001850:	f00d fd42 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8001854:	f001 b974 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001858:	08014354 	.word	0x08014354
 800185c:	000124f8 	.word	0x000124f8
 8001860:	000186a0 	.word	0x000186a0
 8001864:	08014368 	.word	0x08014368
 8001868:	08014370 	.word	0x08014370
 800186c:	08014378 	.word	0x08014378
 8001870:	08014380 	.word	0x08014380
 8001874:	08014388 	.word	0x08014388
 8001878:	08014390 	.word	0x08014390
 800187c:	08014398 	.word	0x08014398
 8001880:	080143a0 	.word	0x080143a0
 8001884:	080143a8 	.word	0x080143a8
 8001888:	080143b0 	.word	0x080143b0
 800188c:	080143b8 	.word	0x080143b8
 8001890:	080143c0 	.word	0x080143c0
 8001894:	080143c8 	.word	0x080143c8
 8001898:	080143d0 	.word	0x080143d0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	2302      	movs	r3, #2
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ac:	2105      	movs	r1, #5
 80018ae:	48a5      	ldr	r0, [pc, #660]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 80018b0:	f00d fd12 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2302      	movs	r3, #2
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	48a0      	ldr	r0, [pc, #640]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 80018c8:	f00d fd06 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018dc:	2105      	movs	r1, #5
 80018de:	489b      	ldr	r0, [pc, #620]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 80018e0:	f00d fcfa 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018f4:	2105      	movs	r1, #5
 80018f6:	4896      	ldr	r0, [pc, #600]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 80018f8:	f00d fcee 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800190c:	2105      	movs	r1, #5
 800190e:	4891      	ldr	r0, [pc, #580]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001910:	f00d fce2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001924:	2105      	movs	r1, #5
 8001926:	488c      	ldr	r0, [pc, #560]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001928:	f00d fcd6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800193c:	2105      	movs	r1, #5
 800193e:	4887      	ldr	r0, [pc, #540]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001940:	f00d fcca 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	b29a      	uxth	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001954:	2178      	movs	r1, #120	; 0x78
 8001956:	4882      	ldr	r0, [pc, #520]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001958:	f00d fcbe 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	b29a      	uxth	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800196c:	2178      	movs	r1, #120	; 0x78
 800196e:	487d      	ldr	r0, [pc, #500]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001970:	f00d fcb2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	b29a      	uxth	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001984:	2178      	movs	r1, #120	; 0x78
 8001986:	4878      	ldr	r0, [pc, #480]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001988:	f00d fca6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	b29a      	uxth	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800199c:	2178      	movs	r1, #120	; 0x78
 800199e:	4873      	ldr	r0, [pc, #460]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 80019a0:	f00d fc9a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019b4:	2178      	movs	r1, #120	; 0x78
 80019b6:	486e      	ldr	r0, [pc, #440]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 80019b8:	f00d fc8e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019bc:	7abb      	ldrb	r3, [r7, #10]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	4869      	ldr	r0, [pc, #420]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 80019d0:	f00d fc82 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d4:	7a7b      	ldrb	r3, [r7, #9]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e4:	2178      	movs	r1, #120	; 0x78
 80019e6:	4864      	ldr	r0, [pc, #400]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 80019e8:	f00d fc76 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 80019ec:	f001 b8a8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a00:	2105      	movs	r1, #5
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a04:	f00d fc68 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	484b      	ldr	r0, [pc, #300]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 8001a1c:	f00d fc5c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4846      	ldr	r0, [pc, #280]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 8001a34:	f00d fc50 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4841      	ldr	r0, [pc, #260]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 8001a4c:	f00d fc44 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a60:	2105      	movs	r1, #5
 8001a62:	483c      	ldr	r0, [pc, #240]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a64:	f00d fc38 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	4837      	ldr	r0, [pc, #220]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001a7c:	f00d fc2c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a80:	7a7b      	ldrb	r3, [r7, #9]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a90:	2105      	movs	r1, #5
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001a94:	f00d fc20 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa8:	2178      	movs	r1, #120	; 0x78
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001aac:	f00d fc14 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac0:	2178      	movs	r1, #120	; 0x78
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ac4:	f00d fc08 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad8:	2178      	movs	r1, #120	; 0x78
 8001ada:	4823      	ldr	r0, [pc, #140]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001adc:	f00d fbfc 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af0:	2178      	movs	r1, #120	; 0x78
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 8001af4:	f00d fbf0 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b08:	2178      	movs	r1, #120	; 0x78
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 8001b0c:	f00d fbe4 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b24:	f00d fbd8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b28:	7a7b      	ldrb	r3, [r7, #9]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 8001b3c:	f00d fbcc 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8001b40:	f000 bffe 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001b44:	08014368 	.word	0x08014368
 8001b48:	08014370 	.word	0x08014370
 8001b4c:	08014378 	.word	0x08014378
 8001b50:	08014380 	.word	0x08014380
 8001b54:	08014388 	.word	0x08014388
 8001b58:	08014390 	.word	0x08014390
 8001b5c:	08014398 	.word	0x08014398
 8001b60:	080143a0 	.word	0x080143a0
 8001b64:	080143a8 	.word	0x080143a8
 8001b68:	080143b0 	.word	0x080143b0
 8001b6c:	080143b8 	.word	0x080143b8
 8001b70:	080143c0 	.word	0x080143c0
 8001b74:	080143c8 	.word	0x080143c8
 8001b78:	080143d0 	.word	0x080143d0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2302      	movs	r3, #2
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	48a5      	ldr	r0, [pc, #660]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b90:	f00d fba2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	48a0      	ldr	r0, [pc, #640]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001ba8:	f00d fb96 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	489b      	ldr	r0, [pc, #620]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001bc0:	f00d fb8a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001bc4:	7b3b      	ldrb	r3, [r7, #12]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4896      	ldr	r0, [pc, #600]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001bd8:	f00d fb7e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bec:	2105      	movs	r1, #5
 8001bee:	4891      	ldr	r0, [pc, #580]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bf0:	f00d fb72 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf4:	7abb      	ldrb	r3, [r7, #10]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c04:	2105      	movs	r1, #5
 8001c06:	488c      	ldr	r0, [pc, #560]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001c08:	f00d fb66 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4887      	ldr	r0, [pc, #540]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001c20:	f00d fb5a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c34:	2178      	movs	r1, #120	; 0x78
 8001c36:	4882      	ldr	r0, [pc, #520]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001c38:	f00d fb4e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c4c:	2178      	movs	r1, #120	; 0x78
 8001c4e:	487d      	ldr	r0, [pc, #500]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c50:	f00d fb42 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c64:	2178      	movs	r1, #120	; 0x78
 8001c66:	4878      	ldr	r0, [pc, #480]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001c68:	f00d fb36 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c6c:	7b3b      	ldrb	r3, [r7, #12]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c7c:	2178      	movs	r1, #120	; 0x78
 8001c7e:	4873      	ldr	r0, [pc, #460]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001c80:	f00d fb2a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c94:	2178      	movs	r1, #120	; 0x78
 8001c96:	486e      	ldr	r0, [pc, #440]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001c98:	f00d fb1e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c9c:	7abb      	ldrb	r3, [r7, #10]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	4869      	ldr	r0, [pc, #420]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cb0:	f00d fb12 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb4:	7a7b      	ldrb	r3, [r7, #9]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc4:	2178      	movs	r1, #120	; 0x78
 8001cc6:	4864      	ldr	r0, [pc, #400]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001cc8:	f00d fb06 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8001ccc:	f000 bf38 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4850      	ldr	r0, [pc, #320]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ce4:	f00d faf8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	484b      	ldr	r0, [pc, #300]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001cfc:	f00d faec 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	4846      	ldr	r0, [pc, #280]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001d14:	f00d fae0 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7b3b      	ldrb	r3, [r7, #12]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4841      	ldr	r0, [pc, #260]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001d2c:	f00d fad4 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d44:	f00d fac8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	4837      	ldr	r0, [pc, #220]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001d5c:	f00d fabc 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7a7b      	ldrb	r3, [r7, #9]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2105      	movs	r1, #5
 8001d72:	4832      	ldr	r0, [pc, #200]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001d74:	f00d fab0 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001d8c:	f00d faa4 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	4828      	ldr	r0, [pc, #160]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001da4:	f00d fa98 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4823      	ldr	r0, [pc, #140]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001dbc:	f00d fa8c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7b3b      	ldrb	r3, [r7, #12]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001dd4:	f00d fa80 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2302      	movs	r3, #2
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de8:	2178      	movs	r1, #120	; 0x78
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001dec:	f00d fa74 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e00:	2178      	movs	r1, #120	; 0x78
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e04:	f00d fa68 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e08:	7a7b      	ldrb	r3, [r7, #9]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2302      	movs	r3, #2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e18:	2178      	movs	r1, #120	; 0x78
 8001e1a:	480f      	ldr	r0, [pc, #60]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001e1c:	f00d fa5c 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8001e20:	f000 be8e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001e24:	08014368 	.word	0x08014368
 8001e28:	08014370 	.word	0x08014370
 8001e2c:	08014378 	.word	0x08014378
 8001e30:	08014380 	.word	0x08014380
 8001e34:	08014388 	.word	0x08014388
 8001e38:	08014390 	.word	0x08014390
 8001e3c:	08014398 	.word	0x08014398
 8001e40:	080143a0 	.word	0x080143a0
 8001e44:	080143a8 	.word	0x080143a8
 8001e48:	080143b0 	.word	0x080143b0
 8001e4c:	080143b8 	.word	0x080143b8
 8001e50:	080143c0 	.word	0x080143c0
 8001e54:	080143c8 	.word	0x080143c8
 8001e58:	080143d0 	.word	0x080143d0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	48a5      	ldr	r0, [pc, #660]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e70:	f00d fa32 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e84:	2105      	movs	r1, #5
 8001e86:	48a0      	ldr	r0, [pc, #640]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001e88:	f00d fa26 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2302      	movs	r3, #2
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	489b      	ldr	r0, [pc, #620]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ea0:	f00d fa1a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4896      	ldr	r0, [pc, #600]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 8001eb8:	f00d fa0e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	4891      	ldr	r0, [pc, #580]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8001ed0:	f00d fa02 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ed4:	7abb      	ldrb	r3, [r7, #10]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	488c      	ldr	r0, [pc, #560]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001ee8:	f00d f9f6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001efc:	2105      	movs	r1, #5
 8001efe:	4887      	ldr	r0, [pc, #540]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f00:	f00d f9ea 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f14:	2178      	movs	r1, #120	; 0x78
 8001f16:	4882      	ldr	r0, [pc, #520]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f18:	f00d f9de 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	487d      	ldr	r0, [pc, #500]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f30:	f00d f9d2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	4878      	ldr	r0, [pc, #480]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f48:	f00d f9c6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	4873      	ldr	r0, [pc, #460]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 8001f60:	f00d f9ba 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f74:	2178      	movs	r1, #120	; 0x78
 8001f76:	486e      	ldr	r0, [pc, #440]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f78:	f00d f9ae 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2302      	movs	r3, #2
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f8c:	2178      	movs	r1, #120	; 0x78
 8001f8e:	4869      	ldr	r0, [pc, #420]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f90:	f00d f9a2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa4:	2178      	movs	r1, #120	; 0x78
 8001fa6:	4864      	ldr	r0, [pc, #400]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fa8:	f00d f996 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8001fac:	f000 bdc8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4850      	ldr	r0, [pc, #320]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001fc4:	f00d f988 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	484b      	ldr	r0, [pc, #300]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001fdc:	f00d f97c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	4846      	ldr	r0, [pc, #280]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ff4:	f00d f970 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7b3b      	ldrb	r3, [r7, #12]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 800200c:	f00d f964 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2105      	movs	r1, #5
 8002022:	483c      	ldr	r0, [pc, #240]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8002024:	f00d f958 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7abb      	ldrb	r3, [r7, #10]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2105      	movs	r1, #5
 800203a:	4837      	ldr	r0, [pc, #220]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 800203c:	f00d f94c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002040:	7a7b      	ldrb	r3, [r7, #9]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2302      	movs	r3, #2
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	2105      	movs	r1, #5
 8002052:	4832      	ldr	r0, [pc, #200]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002054:	f00d f940 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	482d      	ldr	r0, [pc, #180]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 800206c:	f00d f934 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8002084:	f00d f928 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7b7b      	ldrb	r3, [r7, #13]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 800209c:	f00d f91c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7b3b      	ldrb	r3, [r7, #12]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 80020b4:	f00d f910 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	2302      	movs	r3, #2
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c8:	2178      	movs	r1, #120	; 0x78
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 80020cc:	f00d f904 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d0:	7abb      	ldrb	r3, [r7, #10]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2302      	movs	r3, #2
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e0:	2178      	movs	r1, #120	; 0x78
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020e4:	f00d f8f8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	2302      	movs	r3, #2
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f8:	2178      	movs	r1, #120	; 0x78
 80020fa:	480f      	ldr	r0, [pc, #60]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 80020fc:	f00d f8ec 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8002100:	f000 bd1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002104:	08014368 	.word	0x08014368
 8002108:	08014370 	.word	0x08014370
 800210c:	08014378 	.word	0x08014378
 8002110:	08014380 	.word	0x08014380
 8002114:	08014388 	.word	0x08014388
 8002118:	08014390 	.word	0x08014390
 800211c:	08014398 	.word	0x08014398
 8002120:	080143a0 	.word	0x080143a0
 8002124:	080143a8 	.word	0x080143a8
 8002128:	080143b0 	.word	0x080143b0
 800212c:	080143b8 	.word	0x080143b8
 8002130:	080143c0 	.word	0x080143c0
 8002134:	080143c8 	.word	0x080143c8
 8002138:	080143d0 	.word	0x080143d0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29a      	uxth	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2302      	movs	r3, #2
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800214c:	2105      	movs	r1, #5
 800214e:	48a5      	ldr	r0, [pc, #660]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002150:	f00d f8c2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	b29a      	uxth	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002164:	2105      	movs	r1, #5
 8002166:	48a0      	ldr	r0, [pc, #640]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002168:	f00d f8b6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800217c:	2105      	movs	r1, #5
 800217e:	489b      	ldr	r0, [pc, #620]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 8002180:	f00d f8aa 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002184:	7b3b      	ldrb	r3, [r7, #12]
 8002186:	b29a      	uxth	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002194:	2105      	movs	r1, #5
 8002196:	4896      	ldr	r0, [pc, #600]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002198:	f00d f89e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ac:	2105      	movs	r1, #5
 80021ae:	4891      	ldr	r0, [pc, #580]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021b0:	f00d f892 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c4:	2105      	movs	r1, #5
 80021c6:	488c      	ldr	r0, [pc, #560]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 80021c8:	f00d f886 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021dc:	2105      	movs	r1, #5
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 80021e0:	f00d f87a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2302      	movs	r3, #2
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	4882      	ldr	r0, [pc, #520]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021f8:	f00d f86e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	487d      	ldr	r0, [pc, #500]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002210:	f00d f862 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002214:	7b7b      	ldrb	r3, [r7, #13]
 8002216:	b29a      	uxth	r2, r3
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2302      	movs	r3, #2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 8002228:	f00d f856 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800222c:	7b3b      	ldrb	r3, [r7, #12]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2302      	movs	r3, #2
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	4873      	ldr	r0, [pc, #460]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002240:	f00d f84a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	b29a      	uxth	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2302      	movs	r3, #2
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	486e      	ldr	r0, [pc, #440]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 8002258:	f00d f83e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	b29a      	uxth	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	4869      	ldr	r0, [pc, #420]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 8002270:	f00d f832 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002274:	7a7b      	ldrb	r3, [r7, #9]
 8002276:	b29a      	uxth	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2302      	movs	r3, #2
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	4864      	ldr	r0, [pc, #400]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002288:	f00d f826 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 800228c:	f000 bc58 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4850      	ldr	r0, [pc, #320]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022a4:	f00d f818 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022bc:	f00d f80c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d0:	2105      	movs	r1, #5
 80022d2:	4846      	ldr	r0, [pc, #280]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 80022d4:	f00d f800 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4841      	ldr	r0, [pc, #260]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022ec:	f00c fff4 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2105      	movs	r1, #5
 8002302:	483c      	ldr	r0, [pc, #240]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002304:	f00c ffe8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7abb      	ldrb	r3, [r7, #10]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2105      	movs	r1, #5
 800231a:	4837      	ldr	r0, [pc, #220]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 800231c:	f00c ffdc 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7a7b      	ldrb	r3, [r7, #9]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2105      	movs	r1, #5
 8002332:	4832      	ldr	r0, [pc, #200]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 8002334:	f00c ffd0 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	482d      	ldr	r0, [pc, #180]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 800234c:	f00c ffc4 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	b29a      	uxth	r2, r3
 8002354:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2302      	movs	r3, #2
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	4828      	ldr	r0, [pc, #160]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002364:	f00c ffb8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4823      	ldr	r0, [pc, #140]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 800237c:	f00c ffac 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7b3b      	ldrb	r3, [r7, #12]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	481e      	ldr	r0, [pc, #120]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002394:	f00c ffa0 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2300      	movs	r3, #0
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2302      	movs	r3, #2
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a8:	2178      	movs	r1, #120	; 0x78
 80023aa:	4819      	ldr	r0, [pc, #100]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ac:	f00c ff94 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2302      	movs	r3, #2
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c0:	2178      	movs	r1, #120	; 0x78
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 80023c4:	f00c ff88 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	2302      	movs	r3, #2
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d8:	2178      	movs	r1, #120	; 0x78
 80023da:	480f      	ldr	r0, [pc, #60]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 80023dc:	f00c ff7c 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 80023e0:	e3ae      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80023e2:	bf00      	nop
 80023e4:	08014368 	.word	0x08014368
 80023e8:	08014370 	.word	0x08014370
 80023ec:	08014378 	.word	0x08014378
 80023f0:	08014380 	.word	0x08014380
 80023f4:	08014388 	.word	0x08014388
 80023f8:	08014390 	.word	0x08014390
 80023fc:	08014398 	.word	0x08014398
 8002400:	080143a0 	.word	0x080143a0
 8002404:	080143a8 	.word	0x080143a8
 8002408:	080143b0 	.word	0x080143b0
 800240c:	080143b8 	.word	0x080143b8
 8002410:	080143c0 	.word	0x080143c0
 8002414:	080143c8 	.word	0x080143c8
 8002418:	080143d0 	.word	0x080143d0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	b29a      	uxth	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800242c:	2105      	movs	r1, #5
 800242e:	48a4      	ldr	r0, [pc, #656]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002430:	f00c ff52 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002444:	2105      	movs	r1, #5
 8002446:	489f      	ldr	r0, [pc, #636]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002448:	f00c ff46 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800244c:	7b7b      	ldrb	r3, [r7, #13]
 800244e:	b29a      	uxth	r2, r3
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800245c:	2105      	movs	r1, #5
 800245e:	489a      	ldr	r0, [pc, #616]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002460:	f00c ff3a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002464:	7b3b      	ldrb	r3, [r7, #12]
 8002466:	b29a      	uxth	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002474:	2105      	movs	r1, #5
 8002476:	4895      	ldr	r0, [pc, #596]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 8002478:	f00c ff2e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800248c:	2105      	movs	r1, #5
 800248e:	4890      	ldr	r0, [pc, #576]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002490:	f00c ff22 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002494:	7abb      	ldrb	r3, [r7, #10]
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a4:	2105      	movs	r1, #5
 80024a6:	488b      	ldr	r0, [pc, #556]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024a8:	f00c ff16 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ac:	7a7b      	ldrb	r3, [r7, #9]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024bc:	2105      	movs	r1, #5
 80024be:	4886      	ldr	r0, [pc, #536]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 80024c0:	f00c ff0a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d4:	2178      	movs	r1, #120	; 0x78
 80024d6:	4881      	ldr	r0, [pc, #516]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 80024d8:	f00c fefe 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	487c      	ldr	r0, [pc, #496]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024f0:	f00c fef2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024f4:	7b7b      	ldrb	r3, [r7, #13]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2302      	movs	r3, #2
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4877      	ldr	r0, [pc, #476]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002508:	f00c fee6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800250c:	7b3b      	ldrb	r3, [r7, #12]
 800250e:	b29a      	uxth	r2, r3
 8002510:	2300      	movs	r3, #0
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	4872      	ldr	r0, [pc, #456]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002520:	f00c feda 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	b29a      	uxth	r2, r3
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2302      	movs	r3, #2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002534:	2178      	movs	r1, #120	; 0x78
 8002536:	486d      	ldr	r0, [pc, #436]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 8002538:	f00c fece 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800253c:	7abb      	ldrb	r3, [r7, #10]
 800253e:	b29a      	uxth	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2302      	movs	r3, #2
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800254c:	2178      	movs	r1, #120	; 0x78
 800254e:	4868      	ldr	r0, [pc, #416]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002550:	f00c fec2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002554:	7a7b      	ldrb	r3, [r7, #9]
 8002556:	b29a      	uxth	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002564:	2178      	movs	r1, #120	; 0x78
 8002566:	4863      	ldr	r0, [pc, #396]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002568:	f00c feb6 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 800256c:	e2e8      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b29a      	uxth	r2, r3
 8002572:	2300      	movs	r3, #0
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2302      	movs	r3, #2
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800257e:	2105      	movs	r1, #5
 8002580:	484f      	ldr	r0, [pc, #316]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002582:	f00c fea9 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	b29a      	uxth	r2, r3
 800258a:	2300      	movs	r3, #0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2302      	movs	r3, #2
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002596:	2105      	movs	r1, #5
 8002598:	484a      	ldr	r0, [pc, #296]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 800259a:	f00c fe9d 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800259e:	7b7b      	ldrb	r3, [r7, #13]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2302      	movs	r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ae:	2105      	movs	r1, #5
 80025b0:	4845      	ldr	r0, [pc, #276]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025b2:	f00c fe91 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b6:	7b3b      	ldrb	r3, [r7, #12]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2302      	movs	r3, #2
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c6:	2105      	movs	r1, #5
 80025c8:	4840      	ldr	r0, [pc, #256]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 80025ca:	f00c fe85 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2302      	movs	r3, #2
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025de:	2105      	movs	r1, #5
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025e2:	f00c fe79 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e6:	7abb      	ldrb	r3, [r7, #10]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f6:	2105      	movs	r1, #5
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025fa:	f00c fe6d 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025fe:	7a7b      	ldrb	r3, [r7, #9]
 8002600:	b29a      	uxth	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2302      	movs	r3, #2
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800260e:	2105      	movs	r1, #5
 8002610:	4831      	ldr	r0, [pc, #196]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002612:	f00c fe61 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	b29a      	uxth	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2302      	movs	r3, #2
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002626:	2178      	movs	r1, #120	; 0x78
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 800262a:	f00c fe55 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	b29a      	uxth	r2, r3
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2302      	movs	r3, #2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800263e:	2178      	movs	r1, #120	; 0x78
 8002640:	4827      	ldr	r0, [pc, #156]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002642:	f00c fe49 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002646:	7b7b      	ldrb	r3, [r7, #13]
 8002648:	b29a      	uxth	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2302      	movs	r3, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 800265a:	f00c fe3d 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	b29a      	uxth	r2, r3
 8002662:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	481d      	ldr	r0, [pc, #116]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002672:	f00c fe31 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	b29a      	uxth	r2, r3
 800267a:	2300      	movs	r3, #0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2302      	movs	r3, #2
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002686:	2178      	movs	r1, #120	; 0x78
 8002688:	4818      	ldr	r0, [pc, #96]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 800268a:	f00c fe25 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800268e:	7abb      	ldrb	r3, [r7, #10]
 8002690:	b29a      	uxth	r2, r3
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2302      	movs	r3, #2
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800269e:	2178      	movs	r1, #120	; 0x78
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026a2:	f00c fe19 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a6:	7a7b      	ldrb	r3, [r7, #9]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2302      	movs	r3, #2
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b6:	2178      	movs	r1, #120	; 0x78
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026ba:	f00c fe0d 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 80026be:	e23f      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80026c0:	08014368 	.word	0x08014368
 80026c4:	08014370 	.word	0x08014370
 80026c8:	08014378 	.word	0x08014378
 80026cc:	08014380 	.word	0x08014380
 80026d0:	08014388 	.word	0x08014388
 80026d4:	08014390 	.word	0x08014390
 80026d8:	08014398 	.word	0x08014398
 80026dc:	080143a0 	.word	0x080143a0
 80026e0:	080143a8 	.word	0x080143a8
 80026e4:	080143b0 	.word	0x080143b0
 80026e8:	080143b8 	.word	0x080143b8
 80026ec:	080143c0 	.word	0x080143c0
 80026f0:	080143c8 	.word	0x080143c8
 80026f4:	080143d0 	.word	0x080143d0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002708:	2105      	movs	r1, #5
 800270a:	48a4      	ldr	r0, [pc, #656]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800270c:	f00c fde4 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	b29a      	uxth	r2, r3
 8002714:	2300      	movs	r3, #0
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2302      	movs	r3, #2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002720:	2105      	movs	r1, #5
 8002722:	489f      	ldr	r0, [pc, #636]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002724:	f00c fdd8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002728:	7b7b      	ldrb	r3, [r7, #13]
 800272a:	b29a      	uxth	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002738:	2105      	movs	r1, #5
 800273a:	489a      	ldr	r0, [pc, #616]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800273c:	f00c fdcc 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	b29a      	uxth	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002750:	2105      	movs	r1, #5
 8002752:	4895      	ldr	r0, [pc, #596]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002754:	f00c fdc0 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002758:	7afb      	ldrb	r3, [r7, #11]
 800275a:	b29a      	uxth	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002768:	2105      	movs	r1, #5
 800276a:	4890      	ldr	r0, [pc, #576]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 800276c:	f00c fdb4 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002770:	7abb      	ldrb	r3, [r7, #10]
 8002772:	b29a      	uxth	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002780:	2105      	movs	r1, #5
 8002782:	488b      	ldr	r0, [pc, #556]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002784:	f00c fda8 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	b29a      	uxth	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002798:	2105      	movs	r1, #5
 800279a:	4886      	ldr	r0, [pc, #536]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 800279c:	f00c fd9c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b0:	2178      	movs	r1, #120	; 0x78
 80027b2:	4881      	ldr	r0, [pc, #516]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027b4:	f00c fd90 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c8:	2178      	movs	r1, #120	; 0x78
 80027ca:	487c      	ldr	r0, [pc, #496]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 80027cc:	f00c fd84 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	4877      	ldr	r0, [pc, #476]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 80027e4:	f00c fd78 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e8:	7b3b      	ldrb	r3, [r7, #12]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	4872      	ldr	r0, [pc, #456]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 80027fc:	f00c fd6c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2302      	movs	r3, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2178      	movs	r1, #120	; 0x78
 8002812:	486d      	ldr	r0, [pc, #436]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002814:	f00c fd60 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002818:	7abb      	ldrb	r3, [r7, #10]
 800281a:	b29a      	uxth	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2302      	movs	r3, #2
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002828:	2178      	movs	r1, #120	; 0x78
 800282a:	4868      	ldr	r0, [pc, #416]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800282c:	f00c fd54 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002830:	7a7b      	ldrb	r3, [r7, #9]
 8002832:	b29a      	uxth	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2302      	movs	r3, #2
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002840:	2178      	movs	r1, #120	; 0x78
 8002842:	4863      	ldr	r0, [pc, #396]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002844:	f00c fd48 	bl	800f2d8 <ILI9341_Draw_Text>
			break;
 8002848:	e17a      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	b29a      	uxth	r2, r3
 800284e:	2300      	movs	r3, #0
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800285a:	2105      	movs	r1, #5
 800285c:	484f      	ldr	r0, [pc, #316]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800285e:	f00c fd3b 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	b29a      	uxth	r2, r3
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2302      	movs	r3, #2
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002872:	2105      	movs	r1, #5
 8002874:	484a      	ldr	r0, [pc, #296]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002876:	f00c fd2f 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	b29a      	uxth	r2, r3
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800288a:	2105      	movs	r1, #5
 800288c:	4845      	ldr	r0, [pc, #276]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800288e:	f00c fd23 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2302      	movs	r3, #2
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a2:	2105      	movs	r1, #5
 80028a4:	4840      	ldr	r0, [pc, #256]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028a6:	f00c fd17 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2302      	movs	r3, #2
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ba:	2105      	movs	r1, #5
 80028bc:	483b      	ldr	r0, [pc, #236]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 80028be:	f00c fd0b 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c2:	7abb      	ldrb	r3, [r7, #10]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2302      	movs	r3, #2
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d2:	2105      	movs	r1, #5
 80028d4:	4836      	ldr	r0, [pc, #216]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 80028d6:	f00c fcff 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028da:	7a7b      	ldrb	r3, [r7, #9]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2302      	movs	r3, #2
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ea:	2105      	movs	r1, #5
 80028ec:	4831      	ldr	r0, [pc, #196]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 80028ee:	f00c fcf3 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2302      	movs	r3, #2
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002902:	2178      	movs	r1, #120	; 0x78
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002906:	f00c fce7 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	b29a      	uxth	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2302      	movs	r3, #2
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800291a:	2178      	movs	r1, #120	; 0x78
 800291c:	4827      	ldr	r0, [pc, #156]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 800291e:	f00c fcdb 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002922:	7b7b      	ldrb	r3, [r7, #13]
 8002924:	b29a      	uxth	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002932:	2178      	movs	r1, #120	; 0x78
 8002934:	4822      	ldr	r0, [pc, #136]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002936:	f00c fccf 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800293a:	7b3b      	ldrb	r3, [r7, #12]
 800293c:	b29a      	uxth	r2, r3
 800293e:	2300      	movs	r3, #0
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2302      	movs	r3, #2
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800294a:	2178      	movs	r1, #120	; 0x78
 800294c:	481d      	ldr	r0, [pc, #116]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 800294e:	f00c fcc3 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	b29a      	uxth	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002962:	2178      	movs	r1, #120	; 0x78
 8002964:	4818      	ldr	r0, [pc, #96]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002966:	f00c fcb7 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800296a:	7abb      	ldrb	r3, [r7, #10]
 800296c:	b29a      	uxth	r2, r3
 800296e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	2178      	movs	r1, #120	; 0x78
 800297c:	4813      	ldr	r0, [pc, #76]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800297e:	f00c fcab 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	b29a      	uxth	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002996:	f00c fc9f 	bl	800f2d8 <ILI9341_Draw_Text>
			break;
 800299a:	e0d1      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 800299c:	08014368 	.word	0x08014368
 80029a0:	08014370 	.word	0x08014370
 80029a4:	08014378 	.word	0x08014378
 80029a8:	08014380 	.word	0x08014380
 80029ac:	08014388 	.word	0x08014388
 80029b0:	08014390 	.word	0x08014390
 80029b4:	08014398 	.word	0x08014398
 80029b8:	080143a0 	.word	0x080143a0
 80029bc:	080143a8 	.word	0x080143a8
 80029c0:	080143b0 	.word	0x080143b0
 80029c4:	080143b8 	.word	0x080143b8
 80029c8:	080143c0 	.word	0x080143c0
 80029cc:	080143c8 	.word	0x080143c8
 80029d0:	080143d0 	.word	0x080143d0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e4:	2105      	movs	r1, #5
 80029e6:	4858      	ldr	r0, [pc, #352]	; (8002b48 <FreqMenu_DrawPresetMenu+0x1520>)
 80029e8:	f00c fc76 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fc:	2105      	movs	r1, #5
 80029fe:	4853      	ldr	r0, [pc, #332]	; (8002b4c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a00:	f00c fc6a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a14:	2105      	movs	r1, #5
 8002a16:	484e      	ldr	r0, [pc, #312]	; (8002b50 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a18:	f00c fc5e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	4849      	ldr	r0, [pc, #292]	; (8002b54 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a30:	f00c fc52 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a44:	2105      	movs	r1, #5
 8002a46:	4844      	ldr	r0, [pc, #272]	; (8002b58 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a48:	f00c fc46 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4c:	7abb      	ldrb	r3, [r7, #10]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5c:	2105      	movs	r1, #5
 8002a5e:	483f      	ldr	r0, [pc, #252]	; (8002b5c <FreqMenu_DrawPresetMenu+0x1534>)
 8002a60:	f00c fc3a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a74:	2105      	movs	r1, #5
 8002a76:	483a      	ldr	r0, [pc, #232]	; (8002b60 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a78:	f00c fc2e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8c:	2178      	movs	r1, #120	; 0x78
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a90:	f00c fc22 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa4:	2178      	movs	r1, #120	; 0x78
 8002aa6:	4830      	ldr	r0, [pc, #192]	; (8002b68 <FreqMenu_DrawPresetMenu+0x1540>)
 8002aa8:	f00c fc16 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aac:	7b7b      	ldrb	r3, [r7, #13]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002abc:	2178      	movs	r1, #120	; 0x78
 8002abe:	482b      	ldr	r0, [pc, #172]	; (8002b6c <FreqMenu_DrawPresetMenu+0x1544>)
 8002ac0:	f00c fc0a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac4:	7b3b      	ldrb	r3, [r7, #12]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad4:	2178      	movs	r1, #120	; 0x78
 8002ad6:	4826      	ldr	r0, [pc, #152]	; (8002b70 <FreqMenu_DrawPresetMenu+0x1548>)
 8002ad8:	f00c fbfe 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aec:	2178      	movs	r1, #120	; 0x78
 8002aee:	4821      	ldr	r0, [pc, #132]	; (8002b74 <FreqMenu_DrawPresetMenu+0x154c>)
 8002af0:	f00c fbf2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af4:	7abb      	ldrb	r3, [r7, #10]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2302      	movs	r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b04:	2178      	movs	r1, #120	; 0x78
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b08:	f00c fbe6 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b0c:	7a7b      	ldrb	r3, [r7, #9]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2302      	movs	r3, #2
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2178      	movs	r1, #120	; 0x78
 8002b1e:	4817      	ldr	r0, [pc, #92]	; (8002b7c <FreqMenu_DrawPresetMenu+0x1554>)
 8002b20:	f00c fbda 	bl	800f2d8 <ILI9341_Draw_Text>
			break;
 8002b24:	bf00      	nop
 8002b26:	e00b      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b28:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	22b4      	movs	r2, #180	; 0xb4
 8002b36:	2105      	movs	r1, #5
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b3a:	f00c fbcd 	bl	800f2d8 <ILI9341_Draw_Text>
}
 8002b3e:	e7ff      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08014368 	.word	0x08014368
 8002b4c:	08014370 	.word	0x08014370
 8002b50:	08014378 	.word	0x08014378
 8002b54:	08014380 	.word	0x08014380
 8002b58:	08014388 	.word	0x08014388
 8002b5c:	08014390 	.word	0x08014390
 8002b60:	08014398 	.word	0x08014398
 8002b64:	080143a0 	.word	0x080143a0
 8002b68:	080143a8 	.word	0x080143a8
 8002b6c:	080143b0 	.word	0x080143b0
 8002b70:	080143b8 	.word	0x080143b8
 8002b74:	080143c0 	.word	0x080143c0
 8002b78:	080143c8 	.word	0x080143c8
 8002b7c:	080143d0 	.word	0x080143d0
 8002b80:	080143dc 	.word	0x080143dc

08002b84 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2302      	movs	r3, #2
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	220a      	movs	r2, #10
 8002b98:	2105      	movs	r1, #5
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <FreqMenu_DrawAdjustMenu+0x28>)
 8002b9c:	f00c fb9c 	bl	800f2d8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002ba0:	f7fe f9bc 	bl	8000f1c <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	0801440c 	.word	0x0801440c

08002bb0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b0a0      	sub	sp, #128	; 0x80
 8002bb4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	2105      	movs	r1, #5
 8002bc6:	48a2      	ldr	r0, [pc, #648]	; (8002e50 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002bc8:	f00c fb86 	bl	800f2d8 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002bcc:	2300      	movs	r3, #0
 8002bce:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002bde:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d109      	bne.n	8002bfe <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bee:	4a9a      	ldr	r2, [pc, #616]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4615      	mov	r5, r2
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	7023      	strb	r3, [r4, #0]
 8002bfc:	e008      	b.n	8002c10 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c02:	4a96      	ldr	r2, [pc, #600]	; (8002e5c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c04:	461c      	mov	r4, r3
 8002c06:	4615      	mov	r5, r2
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c10:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c14:	2300      	movs	r3, #0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c20:	2228      	movs	r2, #40	; 0x28
 8002c22:	2105      	movs	r1, #5
 8002c24:	f00c fb58 	bl	800f2d8 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c3e:	f003 fd69 	bl	8006714 <SM_GetOutputInHertz>
 8002c42:	ee10 3a10 	vmov	r3, s0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fca6 	bl	8000598 <__aeabi_f2d>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c54:	e9cd 3400 	strd	r3, r4, [sp]
 8002c58:	4a81      	ldr	r2, [pc, #516]	; (8002e60 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c5a:	2119      	movs	r1, #25
 8002c5c:	f00d fef8 	bl	8010a50 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c60:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c64:	2300      	movs	r3, #0
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c70:	223c      	movs	r2, #60	; 0x3c
 8002c72:	2105      	movs	r1, #5
 8002c74:	f00c fb30 	bl	800f2d8 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c84:	2264      	movs	r2, #100	; 0x64
 8002c86:	2105      	movs	r1, #5
 8002c88:	4876      	ldr	r0, [pc, #472]	; (8002e64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c8a:	f00c fb25 	bl	800f2d8 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c8e:	4b71      	ldr	r3, [pc, #452]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d117      	bne.n	8002cca <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2264      	movs	r2, #100	; 0x64
 8002ca8:	21eb      	movs	r1, #235	; 0xeb
 8002caa:	486f      	ldr	r0, [pc, #444]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cac:	f00c fb14 	bl	800f2d8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cb0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	f240 1109 	movw	r1, #265	; 0x109
 8002cc2:	486a      	ldr	r0, [pc, #424]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cc4:	f00c fb08 	bl	800f2d8 <ILI9341_Draw_Text>
 8002cc8:	e016      	b.n	8002cf8 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	f240 1109 	movw	r1, #265	; 0x109
 8002cdc:	4863      	ldr	r0, [pc, #396]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cde:	f00c fafb 	bl	800f2d8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ce2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	2264      	movs	r2, #100	; 0x64
 8002cf0:	21eb      	movs	r1, #235	; 0xeb
 8002cf2:	485d      	ldr	r0, [pc, #372]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cf4:	f00c faf0 	bl	800f2d8 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d00:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2278      	movs	r2, #120	; 0x78
 8002d0e:	2105      	movs	r1, #5
 8002d10:	4858      	ldr	r0, [pc, #352]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d12:	f00c fae1 	bl	800f2d8 <ILI9341_Draw_Text>
 8002d16:	e00a      	b.n	8002d2e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d24:	2278      	movs	r2, #120	; 0x78
 8002d26:	2105      	movs	r1, #5
 8002d28:	4852      	ldr	r0, [pc, #328]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d2a:	f00c fad5 	bl	800f2d8 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d44:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc25 	bl	8000598 <__aeabi_f2d>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d56:	e9cd 3400 	strd	r3, r4, [sp]
 8002d5a:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d5c:	2119      	movs	r1, #25
 8002d5e:	f00d fe77 	bl	8010a50 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d62:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	2278      	movs	r2, #120	; 0x78
 8002d74:	21b6      	movs	r1, #182	; 0xb6
 8002d76:	f00c faaf 	bl	800f2d8 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10f      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2302      	movs	r3, #2
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	228c      	movs	r2, #140	; 0x8c
 8002d98:	2105      	movs	r1, #5
 8002d9a:	483a      	ldr	r0, [pc, #232]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d9c:	f00c fa9c 	bl	800f2d8 <ILI9341_Draw_Text>
 8002da0:	e00a      	b.n	8002db8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	2300      	movs	r3, #0
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2302      	movs	r3, #2
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dae:	228c      	movs	r2, #140	; 0x8c
 8002db0:	2105      	movs	r1, #5
 8002db2:	4834      	ldr	r0, [pc, #208]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002db4:	f00c fa90 	bl	800f2d8 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	ee17 0a90 	vmov	r0, s15
 8002de2:	f003 fcdd 	bl	80067a0 <SM_ConvertPeriodToHertz>
 8002de6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dea:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e8c <FreqMenu_DrawSweepMenu+0x2dc>
 8002dee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002df2:	ee16 0a90 	vmov	r0, s13
 8002df6:	f7fd fbcf 	bl	8000598 <__aeabi_f2d>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	f107 0018 	add.w	r0, r7, #24
 8002e02:	e9cd 3400 	strd	r3, r4, [sp]
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e08:	2114      	movs	r1, #20
 8002e0a:	f00d fe21 	bl	8010a50 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e0e:	f107 0018 	add.w	r0, r7, #24
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e1e:	228c      	movs	r2, #140	; 0x8c
 8002e20:	219e      	movs	r1, #158	; 0x9e
 8002e22:	f00c fa59 	bl	800f2d8 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d134      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d130      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	22a0      	movs	r2, #160	; 0xa0
 8002e44:	2105      	movs	r1, #5
 8002e46:	4813      	ldr	r0, [pc, #76]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e48:	f00c fa46 	bl	800f2d8 <ILI9341_Draw_Text>
 8002e4c:	e02f      	b.n	8002eae <FreqMenu_DrawSweepMenu+0x2fe>
 8002e4e:	bf00      	nop
 8002e50:	08014420 	.word	0x08014420
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	08014434 	.word	0x08014434
 8002e5c:	08014448 	.word	0x08014448
 8002e60:	0801445c 	.word	0x0801445c
 8002e64:	08014470 	.word	0x08014470
 8002e68:	0801447c 	.word	0x0801447c
 8002e6c:	08014480 	.word	0x08014480
 8002e70:	20001e59 	.word	0x20001e59
 8002e74:	08014488 	.word	0x08014488
 8002e78:	2000226c 	.word	0x2000226c
 8002e7c:	08014498 	.word	0x08014498
 8002e80:	20001e58 	.word	0x20001e58
 8002e84:	080144a4 	.word	0x080144a4
 8002e88:	20000120 	.word	0x20000120
 8002e8c:	42f00000 	.word	0x42f00000
 8002e90:	080144b4 	.word	0x080144b4
 8002e94:	080144c0 	.word	0x080144c0
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea4:	22a0      	movs	r2, #160	; 0xa0
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	484d      	ldr	r0, [pc, #308]	; (8002fe0 <FreqMenu_DrawSweepMenu+0x430>)
 8002eaa:	f00c fa15 	bl	800f2d8 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <FreqMenu_DrawSweepMenu+0x434>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	ee17 0a90 	vmov	r0, s15
 8002ed8:	f003 fc62 	bl	80067a0 <SM_ConvertPeriodToHertz>
 8002edc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee0:	eddf 7a41 	vldr	s15, [pc, #260]	; 8002fe8 <FreqMenu_DrawSweepMenu+0x438>
 8002ee4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee8:	ee16 0a90 	vmov	r0, s13
 8002eec:	f7fd fb54 	bl	8000598 <__aeabi_f2d>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	1d38      	adds	r0, r7, #4
 8002ef6:	e9cd 3400 	strd	r3, r4, [sp]
 8002efa:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <FreqMenu_DrawSweepMenu+0x43c>)
 8002efc:	2114      	movs	r1, #20
 8002efe:	f00d fda7 	bl	8010a50 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f02:	1d38      	adds	r0, r7, #4
 8002f04:	2300      	movs	r3, #0
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f10:	22a0      	movs	r2, #160	; 0xa0
 8002f12:	21aa      	movs	r1, #170	; 0xaa
 8002f14:	f00c f9e0 	bl	800f2d8 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <FreqMenu_DrawSweepMenu+0x440>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10b      	bne.n	8002f3c <FreqMenu_DrawSweepMenu+0x38c>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f24:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	22d5      	movs	r2, #213	; 0xd5
 8002f32:	2106      	movs	r1, #6
 8002f34:	482f      	ldr	r0, [pc, #188]	; (8002ff4 <FreqMenu_DrawSweepMenu+0x444>)
 8002f36:	f00c f9cf 	bl	800f2d8 <ILI9341_Draw_Text>
 8002f3a:	e00a      	b.n	8002f52 <FreqMenu_DrawSweepMenu+0x3a2>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f3c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2302      	movs	r3, #2
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	22d5      	movs	r2, #213	; 0xd5
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	482a      	ldr	r0, [pc, #168]	; (8002ff8 <FreqMenu_DrawSweepMenu+0x448>)
 8002f4e:	f00c f9c3 	bl	800f2d8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f52:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	22cc      	movs	r2, #204	; 0xcc
 8002f60:	2168      	movs	r1, #104	; 0x68
 8002f62:	4826      	ldr	r0, [pc, #152]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f64:	f00c f9b8 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f68:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2300      	movs	r3, #0
 8002f74:	22de      	movs	r2, #222	; 0xde
 8002f76:	2161      	movs	r1, #97	; 0x61
 8002f78:	4821      	ldr	r0, [pc, #132]	; (8003000 <FreqMenu_DrawSweepMenu+0x450>)
 8002f7a:	f00c f9ad 	bl	800f2d8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	22cc      	movs	r2, #204	; 0xcc
 8002f8c:	21b7      	movs	r1, #183	; 0xb7
 8002f8e:	481b      	ldr	r0, [pc, #108]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f90:	f00c f9a2 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	22de      	movs	r2, #222	; 0xde
 8002fa2:	21ad      	movs	r1, #173	; 0xad
 8002fa4:	4817      	ldr	r0, [pc, #92]	; (8003004 <FreqMenu_DrawSweepMenu+0x454>)
 8002fa6:	f00c f997 	bl	800f2d8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002faa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	22cc      	movs	r2, #204	; 0xcc
 8002fb8:	f240 1107 	movw	r1, #263	; 0x107
 8002fbc:	480f      	ldr	r0, [pc, #60]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002fbe:	f00c f98b 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fc2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	22de      	movs	r2, #222	; 0xde
 8002fd0:	21fc      	movs	r1, #252	; 0xfc
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <FreqMenu_DrawSweepMenu+0x458>)
 8002fd4:	f00c f980 	bl	800f2d8 <ILI9341_Draw_Text>
}
 8002fd8:	bf00      	nop
 8002fda:	3778      	adds	r7, #120	; 0x78
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	080144c0 	.word	0x080144c0
 8002fe4:	20000124 	.word	0x20000124
 8002fe8:	42f00000 	.word	0x42f00000
 8002fec:	080144d0 	.word	0x080144d0
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	080144dc 	.word	0x080144dc
 8002ff8:	080144e4 	.word	0x080144e4
 8002ffc:	080144ec 	.word	0x080144ec
 8003000:	080144f0 	.word	0x080144f0
 8003004:	080144f8 	.word	0x080144f8
 8003008:	08014500 	.word	0x08014500

0800300c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d007      	beq.n	800302c <FuncMenu_DrawMenu+0x20>
 800301c:	2b03      	cmp	r3, #3
 800301e:	d009      	beq.n	8003034 <FuncMenu_DrawMenu+0x28>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d000      	beq.n	8003026 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003024:	e00a      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003026:	f000 f80d 	bl	8003044 <FuncMenu_DrawMainMenu>
			break;
 800302a:	e007      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f851 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 8003032:	e003      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 f84d 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 800303a:	bf00      	nop

	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800304a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	2302      	movs	r3, #2
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	220a      	movs	r2, #10
 8003058:	210a      	movs	r1, #10
 800305a:	481a      	ldr	r0, [pc, #104]	; (80030c4 <FuncMenu_DrawMainMenu+0x80>)
 800305c:	f00c f93c 	bl	800f2d8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003060:	f7fd ff5c 	bl	8000f1c <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003064:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	2302      	movs	r3, #2
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	22d2      	movs	r2, #210	; 0xd2
 8003072:	2105      	movs	r1, #5
 8003074:	4814      	ldr	r0, [pc, #80]	; (80030c8 <FuncMenu_DrawMainMenu+0x84>)
 8003076:	f00c f92f 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800307a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2302      	movs	r3, #2
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	22d2      	movs	r2, #210	; 0xd2
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	4810      	ldr	r0, [pc, #64]	; (80030cc <FuncMenu_DrawMainMenu+0x88>)
 800308c:	f00c f924 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003090:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	22d2      	movs	r2, #210	; 0xd2
 800309e:	21af      	movs	r1, #175	; 0xaf
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030a2:	f00c f919 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030a6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	22d2      	movs	r2, #210	; 0xd2
 80030b4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030ba:	f00c f90d 	bl	800f2d8 <ILI9341_Draw_Text>
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	08014508 	.word	0x08014508
 80030c8:	08014514 	.word	0x08014514
 80030cc:	0801451c 	.word	0x0801451c
 80030d0:	08014520 	.word	0x08014520

080030d4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2302      	movs	r3, #2
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	220a      	movs	r2, #10
 80030f2:	210a      	movs	r1, #10
 80030f4:	4896      	ldr	r0, [pc, #600]	; (8003350 <FuncMenu_DrawOutputMenu+0x27c>)
 80030f6:	f00c f8ef 	bl	800f2d8 <ILI9341_Draw_Text>
 80030fa:	e00a      	b.n	8003112 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	220a      	movs	r2, #10
 800310a:	210a      	movs	r1, #10
 800310c:	4891      	ldr	r0, [pc, #580]	; (8003354 <FuncMenu_DrawOutputMenu+0x280>)
 800310e:	f00c f8e3 	bl	800f2d8 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f003 f865 	bl	80061e4 <SM_GetOutputChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003120:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8424 	beq.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b06      	cmp	r3, #6
 8003130:	f200 841f 	bhi.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <FuncMenu_DrawOutputMenu+0x68>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003159 	.word	0x08003159
 8003140:	08003255 	.word	0x08003255
 8003144:	08003379 	.word	0x08003379
 8003148:	08003475 	.word	0x08003475
 800314c:	08003571 	.word	0x08003571
 8003150:	080036a9 	.word	0x080036a9
 8003154:	080037bb 	.word	0x080037bb
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003158:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2302      	movs	r3, #2
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	2232      	movs	r2, #50	; 0x32
 8003166:	210a      	movs	r1, #10
 8003168:	487b      	ldr	r0, [pc, #492]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 800316a:	f00c f8b5 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	2246      	movs	r2, #70	; 0x46
 800317c:	210a      	movs	r1, #10
 800317e:	4877      	ldr	r0, [pc, #476]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 8003180:	f00c f8aa 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003190:	225a      	movs	r2, #90	; 0x5a
 8003192:	210a      	movs	r1, #10
 8003194:	4872      	ldr	r0, [pc, #456]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003196:	f00c f89f 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031a6:	226e      	movs	r2, #110	; 0x6e
 80031a8:	210a      	movs	r1, #10
 80031aa:	486e      	ldr	r0, [pc, #440]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80031ac:	f00c f894 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b0:	2300      	movs	r3, #0
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	2302      	movs	r3, #2
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031bc:	2282      	movs	r2, #130	; 0x82
 80031be:	210a      	movs	r1, #10
 80031c0:	4869      	ldr	r0, [pc, #420]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80031c2:	f00c f889 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c6:	2300      	movs	r3, #0
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2302      	movs	r3, #2
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d2:	2296      	movs	r2, #150	; 0x96
 80031d4:	210a      	movs	r1, #10
 80031d6:	4865      	ldr	r0, [pc, #404]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80031d8:	f00c f87e 	bl	800f2d8 <ILI9341_Draw_Text>

				if(pOutChan)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e2:	2300      	movs	r3, #0
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	2302      	movs	r3, #2
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ee:	22aa      	movs	r2, #170	; 0xaa
 80031f0:	210a      	movs	r1, #10
 80031f2:	485f      	ldr	r0, [pc, #380]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80031f4:	f00c f870 	bl	800f2d8 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80031f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	2302      	movs	r3, #2
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	22d2      	movs	r2, #210	; 0xd2
 8003206:	2105      	movs	r1, #5
 8003208:	485a      	ldr	r0, [pc, #360]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800320a:	f00c f865 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800320e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	2302      	movs	r3, #2
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	22d2      	movs	r2, #210	; 0xd2
 800321c:	2161      	movs	r1, #97	; 0x61
 800321e:	4855      	ldr	r0, [pc, #340]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003220:	f00c f85a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003224:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	22d2      	movs	r2, #210	; 0xd2
 8003232:	21af      	movs	r1, #175	; 0xaf
 8003234:	484f      	ldr	r0, [pc, #316]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003236:	f00c f84f 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800323a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	2302      	movs	r3, #2
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	22d2      	movs	r2, #210	; 0xd2
 8003248:	f44f 7182 	mov.w	r1, #260	; 0x104
 800324c:	4849      	ldr	r0, [pc, #292]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800324e:	f00c f843 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8003252:	e38e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003254:	2300      	movs	r3, #0
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	2302      	movs	r3, #2
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003260:	2232      	movs	r2, #50	; 0x32
 8003262:	210a      	movs	r1, #10
 8003264:	483c      	ldr	r0, [pc, #240]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 8003266:	f00c f837 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800326a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2302      	movs	r3, #2
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	2246      	movs	r2, #70	; 0x46
 8003278:	210a      	movs	r1, #10
 800327a:	4838      	ldr	r0, [pc, #224]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 800327c:	f00c f82c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003280:	2300      	movs	r3, #0
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	2302      	movs	r3, #2
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800328c:	225a      	movs	r2, #90	; 0x5a
 800328e:	210a      	movs	r1, #10
 8003290:	4833      	ldr	r0, [pc, #204]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003292:	f00c f821 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003296:	2300      	movs	r3, #0
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2302      	movs	r3, #2
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a2:	226e      	movs	r2, #110	; 0x6e
 80032a4:	210a      	movs	r1, #10
 80032a6:	482f      	ldr	r0, [pc, #188]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80032a8:	f00c f816 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ac:	2300      	movs	r3, #0
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	2302      	movs	r3, #2
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032b8:	2282      	movs	r2, #130	; 0x82
 80032ba:	210a      	movs	r1, #10
 80032bc:	482a      	ldr	r0, [pc, #168]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80032be:	f00c f80b 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c2:	2300      	movs	r3, #0
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	2302      	movs	r3, #2
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ce:	2296      	movs	r2, #150	; 0x96
 80032d0:	210a      	movs	r1, #10
 80032d2:	4826      	ldr	r0, [pc, #152]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80032d4:	f00c f800 	bl	800f2d8 <ILI9341_Draw_Text>

				if(pOutChan)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032de:	2300      	movs	r3, #0
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ea:	22aa      	movs	r2, #170	; 0xaa
 80032ec:	210a      	movs	r1, #10
 80032ee:	4820      	ldr	r0, [pc, #128]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80032f0:	f00b fff2 	bl	800f2d8 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032f4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	22d2      	movs	r2, #210	; 0xd2
 8003302:	2105      	movs	r1, #5
 8003304:	481b      	ldr	r0, [pc, #108]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003306:	f00b ffe7 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800330a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	22d2      	movs	r2, #210	; 0xd2
 8003318:	2161      	movs	r1, #97	; 0x61
 800331a:	4816      	ldr	r0, [pc, #88]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800331c:	f00b ffdc 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003320:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2302      	movs	r3, #2
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2300      	movs	r3, #0
 800332c:	22d2      	movs	r2, #210	; 0xd2
 800332e:	21af      	movs	r1, #175	; 0xaf
 8003330:	4810      	ldr	r0, [pc, #64]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003332:	f00b ffd1 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003336:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2302      	movs	r3, #2
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	22d2      	movs	r2, #210	; 0xd2
 8003344:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003348:	480a      	ldr	r0, [pc, #40]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800334a:	f00b ffc5 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 800334e:	e310      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003350:	08014528 	.word	0x08014528
 8003354:	08014538 	.word	0x08014538
 8003358:	08014548 	.word	0x08014548
 800335c:	08014550 	.word	0x08014550
 8003360:	0801455c 	.word	0x0801455c
 8003364:	08014564 	.word	0x08014564
 8003368:	08014570 	.word	0x08014570
 800336c:	0801457c 	.word	0x0801457c
 8003370:	08014584 	.word	0x08014584
 8003374:	08014520 	.word	0x08014520
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003378:	2300      	movs	r3, #0
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2302      	movs	r3, #2
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003384:	2232      	movs	r2, #50	; 0x32
 8003386:	210a      	movs	r1, #10
 8003388:	48be      	ldr	r0, [pc, #760]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 800338a:	f00b ffa5 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800338e:	2300      	movs	r3, #0
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2302      	movs	r3, #2
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800339a:	2246      	movs	r2, #70	; 0x46
 800339c:	210a      	movs	r1, #10
 800339e:	48ba      	ldr	r0, [pc, #744]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 80033a0:	f00b ff9a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033a4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2302      	movs	r3, #2
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	225a      	movs	r2, #90	; 0x5a
 80033b2:	210a      	movs	r1, #10
 80033b4:	48b5      	ldr	r0, [pc, #724]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80033b6:	f00b ff8f 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ba:	2300      	movs	r3, #0
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	2302      	movs	r3, #2
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033c6:	226e      	movs	r2, #110	; 0x6e
 80033c8:	210a      	movs	r1, #10
 80033ca:	48b1      	ldr	r0, [pc, #708]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80033cc:	f00b ff84 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2302      	movs	r3, #2
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033dc:	2282      	movs	r2, #130	; 0x82
 80033de:	210a      	movs	r1, #10
 80033e0:	48ac      	ldr	r0, [pc, #688]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80033e2:	f00b ff79 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033e6:	2300      	movs	r3, #0
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2302      	movs	r3, #2
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033f2:	2296      	movs	r2, #150	; 0x96
 80033f4:	210a      	movs	r1, #10
 80033f6:	48a8      	ldr	r0, [pc, #672]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80033f8:	f00b ff6e 	bl	800f2d8 <ILI9341_Draw_Text>
				if(pOutChan)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003402:	2300      	movs	r3, #0
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2302      	movs	r3, #2
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800340e:	22aa      	movs	r2, #170	; 0xaa
 8003410:	210a      	movs	r1, #10
 8003412:	48a2      	ldr	r0, [pc, #648]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003414:	f00b ff60 	bl	800f2d8 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003418:	f240 23fd 	movw	r3, #765	; 0x2fd
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2302      	movs	r3, #2
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	22d2      	movs	r2, #210	; 0xd2
 8003426:	2105      	movs	r1, #5
 8003428:	489d      	ldr	r0, [pc, #628]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800342a:	f00b ff55 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800342e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2302      	movs	r3, #2
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2300      	movs	r3, #0
 800343a:	22d2      	movs	r2, #210	; 0xd2
 800343c:	2161      	movs	r1, #97	; 0x61
 800343e:	4898      	ldr	r0, [pc, #608]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003440:	f00b ff4a 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003444:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2302      	movs	r3, #2
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	22d2      	movs	r2, #210	; 0xd2
 8003452:	21af      	movs	r1, #175	; 0xaf
 8003454:	4892      	ldr	r0, [pc, #584]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003456:	f00b ff3f 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800345a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2302      	movs	r3, #2
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	22d2      	movs	r2, #210	; 0xd2
 8003468:	f44f 7182 	mov.w	r1, #260	; 0x104
 800346c:	488c      	ldr	r0, [pc, #560]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800346e:	f00b ff33 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8003472:	e27e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003480:	2232      	movs	r2, #50	; 0x32
 8003482:	210a      	movs	r1, #10
 8003484:	487f      	ldr	r0, [pc, #508]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003486:	f00b ff27 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348a:	2300      	movs	r3, #0
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003496:	2246      	movs	r2, #70	; 0x46
 8003498:	210a      	movs	r1, #10
 800349a:	487b      	ldr	r0, [pc, #492]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 800349c:	f00b ff1c 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a0:	2300      	movs	r3, #0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2302      	movs	r3, #2
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ac:	225a      	movs	r2, #90	; 0x5a
 80034ae:	210a      	movs	r1, #10
 80034b0:	4876      	ldr	r0, [pc, #472]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80034b2:	f00b ff11 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034b6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	226e      	movs	r2, #110	; 0x6e
 80034c4:	210a      	movs	r1, #10
 80034c6:	4872      	ldr	r0, [pc, #456]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80034c8:	f00b ff06 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034cc:	2300      	movs	r3, #0
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	2302      	movs	r3, #2
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034d8:	2282      	movs	r2, #130	; 0x82
 80034da:	210a      	movs	r1, #10
 80034dc:	486d      	ldr	r0, [pc, #436]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80034de:	f00b fefb 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e2:	2300      	movs	r3, #0
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	2302      	movs	r3, #2
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ee:	2296      	movs	r2, #150	; 0x96
 80034f0:	210a      	movs	r1, #10
 80034f2:	4869      	ldr	r0, [pc, #420]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80034f4:	f00b fef0 	bl	800f2d8 <ILI9341_Draw_Text>

				if(pOutChan)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2302      	movs	r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350a:	22aa      	movs	r2, #170	; 0xaa
 800350c:	210a      	movs	r1, #10
 800350e:	4863      	ldr	r0, [pc, #396]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003510:	f00b fee2 	bl	800f2d8 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003514:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2302      	movs	r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	22d2      	movs	r2, #210	; 0xd2
 8003522:	2105      	movs	r1, #5
 8003524:	485e      	ldr	r0, [pc, #376]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003526:	f00b fed7 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800352a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2302      	movs	r3, #2
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	22d2      	movs	r2, #210	; 0xd2
 8003538:	2161      	movs	r1, #97	; 0x61
 800353a:	4859      	ldr	r0, [pc, #356]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800353c:	f00b fecc 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003540:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	21af      	movs	r1, #175	; 0xaf
 8003550:	4853      	ldr	r0, [pc, #332]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003552:	f00b fec1 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003556:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003568:	484d      	ldr	r0, [pc, #308]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800356a:	f00b feb5 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 800356e:	e200      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003570:	2300      	movs	r3, #0
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	2302      	movs	r3, #2
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800357c:	2232      	movs	r2, #50	; 0x32
 800357e:	210a      	movs	r1, #10
 8003580:	4840      	ldr	r0, [pc, #256]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003582:	f00b fea9 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003586:	2300      	movs	r3, #0
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2302      	movs	r3, #2
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003592:	2246      	movs	r2, #70	; 0x46
 8003594:	210a      	movs	r1, #10
 8003596:	483c      	ldr	r0, [pc, #240]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003598:	f00b fe9e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	225a      	movs	r2, #90	; 0x5a
 80035aa:	210a      	movs	r1, #10
 80035ac:	4837      	ldr	r0, [pc, #220]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80035ae:	f00b fe93 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	226e      	movs	r2, #110	; 0x6e
 80035c0:	210a      	movs	r1, #10
 80035c2:	4833      	ldr	r0, [pc, #204]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80035c4:	f00b fe88 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2302      	movs	r3, #2
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2282      	movs	r2, #130	; 0x82
 80035d6:	210a      	movs	r1, #10
 80035d8:	482e      	ldr	r0, [pc, #184]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80035da:	f00b fe7d 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035de:	2300      	movs	r3, #0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2302      	movs	r3, #2
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ea:	2296      	movs	r2, #150	; 0x96
 80035ec:	210a      	movs	r1, #10
 80035ee:	482a      	ldr	r0, [pc, #168]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80035f0:	f00b fe72 	bl	800f2d8 <ILI9341_Draw_Text>

				if(pOutChan)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035fa:	2300      	movs	r3, #0
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	2302      	movs	r3, #2
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003606:	22aa      	movs	r2, #170	; 0xaa
 8003608:	210a      	movs	r1, #10
 800360a:	4824      	ldr	r0, [pc, #144]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 800360c:	f00b fe64 	bl	800f2d8 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003610:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	22d2      	movs	r2, #210	; 0xd2
 800361e:	2105      	movs	r1, #5
 8003620:	481f      	ldr	r0, [pc, #124]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003622:	f00b fe59 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003626:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	2302      	movs	r3, #2
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	22d2      	movs	r2, #210	; 0xd2
 8003634:	2161      	movs	r1, #97	; 0x61
 8003636:	481a      	ldr	r0, [pc, #104]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003638:	f00b fe4e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800363c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2302      	movs	r3, #2
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	22d2      	movs	r2, #210	; 0xd2
 800364a:	21af      	movs	r1, #175	; 0xaf
 800364c:	4814      	ldr	r0, [pc, #80]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800364e:	f00b fe43 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003652:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2302      	movs	r3, #2
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	22d2      	movs	r2, #210	; 0xd2
 8003660:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003664:	480e      	ldr	r0, [pc, #56]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003666:	f00b fe37 	bl	800f2d8 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2302      	movs	r3, #2
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003676:	2232      	movs	r2, #50	; 0x32
 8003678:	2196      	movs	r1, #150	; 0x96
 800367a:	480a      	ldr	r0, [pc, #40]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5d0>)
 800367c:	f00b fe2c 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 8003680:	e177      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003682:	bf00      	nop
 8003684:	08014548 	.word	0x08014548
 8003688:	08014550 	.word	0x08014550
 800368c:	0801455c 	.word	0x0801455c
 8003690:	08014564 	.word	0x08014564
 8003694:	08014570 	.word	0x08014570
 8003698:	0801457c 	.word	0x0801457c
 800369c:	08014584 	.word	0x08014584
 80036a0:	08014520 	.word	0x08014520
 80036a4:	0801458c 	.word	0x0801458c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a8:	2300      	movs	r3, #0
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2302      	movs	r3, #2
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036b4:	2232      	movs	r2, #50	; 0x32
 80036b6:	210a      	movs	r1, #10
 80036b8:	48b0      	ldr	r0, [pc, #704]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80036ba:	f00b fe0d 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036be:	2300      	movs	r3, #0
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2302      	movs	r3, #2
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ca:	2246      	movs	r2, #70	; 0x46
 80036cc:	210a      	movs	r1, #10
 80036ce:	48ac      	ldr	r0, [pc, #688]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80036d0:	f00b fe02 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036d4:	2300      	movs	r3, #0
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	2302      	movs	r3, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036e0:	225a      	movs	r2, #90	; 0x5a
 80036e2:	210a      	movs	r1, #10
 80036e4:	48a7      	ldr	r0, [pc, #668]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80036e6:	f00b fdf7 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036ea:	2300      	movs	r3, #0
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2302      	movs	r3, #2
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036f6:	226e      	movs	r2, #110	; 0x6e
 80036f8:	210a      	movs	r1, #10
 80036fa:	48a3      	ldr	r0, [pc, #652]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 80036fc:	f00b fdec 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003700:	2300      	movs	r3, #0
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	2302      	movs	r3, #2
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370c:	2282      	movs	r2, #130	; 0x82
 800370e:	210a      	movs	r1, #10
 8003710:	489e      	ldr	r0, [pc, #632]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003712:	f00b fde1 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003716:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2302      	movs	r3, #2
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	2296      	movs	r2, #150	; 0x96
 8003724:	210a      	movs	r1, #10
 8003726:	489a      	ldr	r0, [pc, #616]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003728:	f00b fdd6 	bl	800f2d8 <ILI9341_Draw_Text>

				if(pOutChan)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2302      	movs	r3, #2
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800373e:	22aa      	movs	r2, #170	; 0xaa
 8003740:	210a      	movs	r1, #10
 8003742:	4894      	ldr	r0, [pc, #592]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003744:	f00b fdc8 	bl	800f2d8 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003748:	f240 23fd 	movw	r3, #765	; 0x2fd
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2302      	movs	r3, #2
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	22d2      	movs	r2, #210	; 0xd2
 8003756:	2105      	movs	r1, #5
 8003758:	488f      	ldr	r0, [pc, #572]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800375a:	f00b fdbd 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800375e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2302      	movs	r3, #2
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	22d2      	movs	r2, #210	; 0xd2
 800376c:	2161      	movs	r1, #97	; 0x61
 800376e:	488a      	ldr	r0, [pc, #552]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003770:	f00b fdb2 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003774:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2302      	movs	r3, #2
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	22d2      	movs	r2, #210	; 0xd2
 8003782:	21af      	movs	r1, #175	; 0xaf
 8003784:	4884      	ldr	r0, [pc, #528]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003786:	f00b fda7 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800378a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	2302      	movs	r3, #2
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	22d2      	movs	r2, #210	; 0xd2
 8003798:	f44f 7182 	mov.w	r1, #260	; 0x104
 800379c:	487e      	ldr	r0, [pc, #504]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800379e:	f00b fd9b 	bl	800f2d8 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037a2:	2300      	movs	r3, #0
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2302      	movs	r3, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ae:	2232      	movs	r2, #50	; 0x32
 80037b0:	2196      	movs	r1, #150	; 0x96
 80037b2:	487a      	ldr	r0, [pc, #488]	; (800399c <FuncMenu_DrawOutputMenu+0x8c8>)
 80037b4:	f00b fd90 	bl	800f2d8 <ILI9341_Draw_Text>
				break;
 80037b8:	e0db      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ba:	2300      	movs	r3, #0
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2302      	movs	r3, #2
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037c6:	2232      	movs	r2, #50	; 0x32
 80037c8:	210a      	movs	r1, #10
 80037ca:	486c      	ldr	r0, [pc, #432]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80037cc:	f00b fd84 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d0:	2300      	movs	r3, #0
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2302      	movs	r3, #2
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037dc:	2246      	movs	r2, #70	; 0x46
 80037de:	210a      	movs	r1, #10
 80037e0:	4867      	ldr	r0, [pc, #412]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80037e2:	f00b fd79 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	2302      	movs	r3, #2
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f2:	225a      	movs	r2, #90	; 0x5a
 80037f4:	210a      	movs	r1, #10
 80037f6:	4863      	ldr	r0, [pc, #396]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80037f8:	f00b fd6e 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	2302      	movs	r3, #2
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003808:	226e      	movs	r2, #110	; 0x6e
 800380a:	210a      	movs	r1, #10
 800380c:	485e      	ldr	r0, [pc, #376]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 800380e:	f00b fd63 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003812:	2300      	movs	r3, #0
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2302      	movs	r3, #2
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800381e:	2282      	movs	r2, #130	; 0x82
 8003820:	210a      	movs	r1, #10
 8003822:	485a      	ldr	r0, [pc, #360]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003824:	f00b fd58 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2302      	movs	r3, #2
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003834:	2296      	movs	r2, #150	; 0x96
 8003836:	210a      	movs	r1, #10
 8003838:	4855      	ldr	r0, [pc, #340]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 800383a:	f00b fd4d 	bl	800f2d8 <ILI9341_Draw_Text>

				if(pOutChan)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2302      	movs	r3, #2
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	22aa      	movs	r2, #170	; 0xaa
 8003852:	210a      	movs	r1, #10
 8003854:	484f      	ldr	r0, [pc, #316]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003856:	f00b fd3f 	bl	800f2d8 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800385a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2302      	movs	r3, #2
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	22d2      	movs	r2, #210	; 0xd2
 8003868:	2105      	movs	r1, #5
 800386a:	484b      	ldr	r0, [pc, #300]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800386c:	f00b fd34 	bl	800f2d8 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003870:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2302      	movs	r3, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	22d2      	movs	r2, #210	; 0xd2
 800387e:	2161      	movs	r1, #97	; 0x61
 8003880:	4845      	ldr	r0, [pc, #276]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003882:	f00b fd29 	bl	800f2d8 <ILI9341_Draw_Text>

				if(pOutChan)
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05a      	beq.n	8003942 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800388c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2302      	movs	r3, #2
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	22d2      	movs	r2, #210	; 0xd2
 800389a:	21af      	movs	r1, #175	; 0xaf
 800389c:	4840      	ldr	r0, [pc, #256]	; (80039a0 <FuncMenu_DrawOutputMenu+0x8cc>)
 800389e:	f00b fd1b 	bl	800f2d8 <ILI9341_Draw_Text>
					char duty[10] = "";
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80039a8 <FuncMenu_DrawOutputMenu+0x8d4>
 80038d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d4:	ee17 0a90 	vmov	r0, s15
 80038d8:	f7fc fe5e 	bl	8000598 <__aeabi_f2d>
 80038dc:	4603      	mov	r3, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	f107 0008 	add.w	r0, r7, #8
 80038e4:	e9cd 3400 	strd	r3, r4, [sp]
 80038e8:	4a30      	ldr	r2, [pc, #192]	; (80039ac <FuncMenu_DrawOutputMenu+0x8d8>)
 80038ea:	210a      	movs	r1, #10
 80038ec:	f00d f8b0 	bl	8010a50 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f0:	f107 0008 	add.w	r0, r7, #8
 80038f4:	2300      	movs	r3, #0
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2302      	movs	r3, #2
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003900:	2232      	movs	r2, #50	; 0x32
 8003902:	21dc      	movs	r1, #220	; 0xdc
 8003904:	f00b fce8 	bl	800f2d8 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003908:	f002 ff70 	bl	80067ec <SM_IsFuncPwmDutyMode>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003912:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	2302      	movs	r3, #2
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2300      	movs	r3, #0
 800391e:	2232      	movs	r2, #50	; 0x32
 8003920:	2196      	movs	r1, #150	; 0x96
 8003922:	4823      	ldr	r0, [pc, #140]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003924:	f00b fcd8 	bl	800f2d8 <ILI9341_Draw_Text>
 8003928:	e016      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800392a:	2300      	movs	r3, #0
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	2302      	movs	r3, #2
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	2196      	movs	r1, #150	; 0x96
 800393a:	481d      	ldr	r0, [pc, #116]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 800393c:	f00b fccc 	bl	800f2d8 <ILI9341_Draw_Text>
 8003940:	e00a      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003942:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2302      	movs	r3, #2
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	22d2      	movs	r2, #210	; 0xd2
 8003950:	21af      	movs	r1, #175	; 0xaf
 8003952:	4811      	ldr	r0, [pc, #68]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003954:	f00b fcc0 	bl	800f2d8 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003958:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	2302      	movs	r3, #2
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	22d2      	movs	r2, #210	; 0xd2
 8003966:	f44f 7182 	mov.w	r1, #260	; 0x104
 800396a:	480b      	ldr	r0, [pc, #44]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800396c:	f00b fcb4 	bl	800f2d8 <ILI9341_Draw_Text>

				break;
 8003970:	bf00      	nop
				//
		}
	}
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	08014548 	.word	0x08014548
 8003980:	08014550 	.word	0x08014550
 8003984:	0801455c 	.word	0x0801455c
 8003988:	08014564 	.word	0x08014564
 800398c:	08014570 	.word	0x08014570
 8003990:	0801457c 	.word	0x0801457c
 8003994:	08014584 	.word	0x08014584
 8003998:	08014520 	.word	0x08014520
 800399c:	0801458c 	.word	0x0801458c
 80039a0:	0801459c 	.word	0x0801459c
 80039a4:	40000400 	.word	0x40000400
 80039a8:	42c80000 	.word	0x42c80000
 80039ac:	080145a4 	.word	0x080145a4
 80039b0:	080145ac 	.word	0x080145ac

080039b4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d007      	beq.n	80039d4 <GainMenu_DrawMenu+0x20>
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d008      	beq.n	80039da <GainMenu_DrawMenu+0x26>
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d000      	beq.n	80039ce <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 80039cc:	e008      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039ce:	f000 f80b 	bl	80039e8 <GainMenu_DrawMainMenu>
			break;
 80039d2:	e005      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039d4:	f000 f868 	bl	8003aa8 <GainMenu_DrawSignalMenu>
			break;
 80039d8:	e002      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 80039da:	f000 f87b 	bl	8003ad4 <GainMenu_DrawAuxMenu>
			break;
 80039de:	bf00      	nop

	}
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2302      	movs	r3, #2
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	220a      	movs	r2, #10
 80039fc:	210a      	movs	r1, #10
 80039fe:	4826      	ldr	r0, [pc, #152]	; (8003a98 <GainMenu_DrawMainMenu+0xb0>)
 8003a00:	f00b fc6a 	bl	800f2d8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a04:	f7fd fa8a 	bl	8000f1c <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a08:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	22d2      	movs	r2, #210	; 0xd2
 8003a16:	2105      	movs	r1, #5
 8003a18:	4820      	ldr	r0, [pc, #128]	; (8003a9c <GainMenu_DrawMainMenu+0xb4>)
 8003a1a:	f00b fc5d 	bl	800f2d8 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f002 fbe0 	bl	80061e4 <SM_GetOutputChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d10b      	bne.n	8003a4c <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a34:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	22d2      	movs	r2, #210	; 0xd2
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a46:	f00b fc47 	bl	800f2d8 <ILI9341_Draw_Text>
 8003a4a:	e00a      	b.n	8003a62 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a4c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2302      	movs	r3, #2
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	22d2      	movs	r2, #210	; 0xd2
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <GainMenu_DrawMainMenu+0xbc>)
 8003a5e:	f00b fc3b 	bl	800f2d8 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	22d2      	movs	r2, #210	; 0xd2
 8003a70:	21af      	movs	r1, #175	; 0xaf
 8003a72:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a74:	f00b fc30 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a78:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	22d2      	movs	r2, #210	; 0xd2
 8003a86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a8c:	f00b fc24 	bl	800f2d8 <ILI9341_Draw_Text>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	080145b4 	.word	0x080145b4
 8003a9c:	080145c0 	.word	0x080145c0
 8003aa0:	080145c8 	.word	0x080145c8
 8003aa4:	080145d0 	.word	0x080145d0

08003aa8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	220a      	movs	r2, #10
 8003abc:	210a      	movs	r1, #10
 8003abe:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <GainMenu_DrawSignalMenu+0x28>)
 8003ac0:	f00b fc0a 	bl	800f2d8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ac4:	f7fd fa2a 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	080145d4 	.word	0x080145d4

08003ad4 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	220a      	movs	r2, #10
 8003ae8:	210a      	movs	r1, #10
 8003aea:	4804      	ldr	r0, [pc, #16]	; (8003afc <GainMenu_DrawAuxMenu+0x28>)
 8003aec:	f00b fbf4 	bl	800f2d8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003af0:	f7fd fa14 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	080145e4 	.word	0x080145e4

08003b00 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d007      	beq.n	8003b20 <ToplevelMenu_DrawMenu+0x20>
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d008      	beq.n	8003b26 <ToplevelMenu_DrawMenu+0x26>
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d000      	beq.n	8003b1a <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003b18:	e008      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003b1a:	f000 f80b 	bl	8003b34 <ToplevelMenu_DrawMainMenu>
			break;
 8003b1e:	e005      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003b20:	f000 f844 	bl	8003bac <ToplevelMenu_DrawOutputMenu>
			break;
 8003b24:	e002      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003b26:	f000 f88b 	bl	8003c40 <ToplevelMenu_DrawInputMenu>
			break;
 8003b2a:	bf00      	nop

	}
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b3a:	f7fd f9ef 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b3e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2302      	movs	r3, #2
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	22d2      	movs	r2, #210	; 0xd2
 8003b4c:	2106      	movs	r1, #6
 8003b4e:	4814      	ldr	r0, [pc, #80]	; (8003ba0 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003b50:	f00b fbc2 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b54:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	22d2      	movs	r2, #210	; 0xd2
 8003b62:	215d      	movs	r1, #93	; 0x5d
 8003b64:	480f      	ldr	r0, [pc, #60]	; (8003ba4 <ToplevelMenu_DrawMainMenu+0x70>)
 8003b66:	f00b fbb7 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2302      	movs	r3, #2
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	22d2      	movs	r2, #210	; 0xd2
 8003b78:	21af      	movs	r1, #175	; 0xaf
 8003b7a:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b7c:	f00b fbac 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b80:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	2302      	movs	r3, #2
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	22d2      	movs	r2, #210	; 0xd2
 8003b8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b94:	f00b fba0 	bl	800f2d8 <ILI9341_Draw_Text>


}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	080145f4 	.word	0x080145f4
 8003ba4:	080145fc 	.word	0x080145fc
 8003ba8:	08014604 	.word	0x08014604

08003bac <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	210a      	movs	r1, #10
 8003bc2:	481a      	ldr	r0, [pc, #104]	; (8003c2c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003bc4:	f00b fb88 	bl	800f2d8 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bc8:	f7fd f9a8 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bcc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	22d2      	movs	r2, #210	; 0xd2
 8003bda:	210f      	movs	r1, #15
 8003bdc:	4814      	ldr	r0, [pc, #80]	; (8003c30 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003bde:	f00b fb7b 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003be2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	2302      	movs	r3, #2
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	22d2      	movs	r2, #210	; 0xd2
 8003bf0:	2162      	movs	r1, #98	; 0x62
 8003bf2:	4810      	ldr	r0, [pc, #64]	; (8003c34 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bf4:	f00b fb70 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bf8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2302      	movs	r3, #2
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	22d2      	movs	r2, #210	; 0xd2
 8003c06:	21b0      	movs	r1, #176	; 0xb0
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003c0a:	f00b fb65 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c0e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2302      	movs	r3, #2
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	22d2      	movs	r2, #210	; 0xd2
 8003c1c:	21f5      	movs	r1, #245	; 0xf5
 8003c1e:	4807      	ldr	r0, [pc, #28]	; (8003c3c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003c20:	f00b fb5a 	bl	800f2d8 <ILI9341_Draw_Text>
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	0801460c 	.word	0x0801460c
 8003c30:	08014614 	.word	0x08014614
 8003c34:	0801461c 	.word	0x0801461c
 8003c38:	08014624 	.word	0x08014624
 8003c3c:	0801462c 	.word	0x0801462c

08003c40 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	220a      	movs	r2, #10
 8003c54:	210a      	movs	r1, #10
 8003c56:	4892      	ldr	r0, [pc, #584]	; (8003ea0 <ToplevelMenu_DrawInputMenu+0x260>)
 8003c58:	f00b fb3e 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2302      	movs	r3, #2
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c68:	2232      	movs	r2, #50	; 0x32
 8003c6a:	210a      	movs	r1, #10
 8003c6c:	488d      	ldr	r0, [pc, #564]	; (8003ea4 <ToplevelMenu_DrawInputMenu+0x264>)
 8003c6e:	f00b fb33 	bl	800f2d8 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 8003c72:	f002 f94d 	bl	8005f10 <IT_GetTriggerStatus>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d016      	beq.n	8003caa <ToplevelMenu_DrawInputMenu+0x6a>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c7c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	2302      	movs	r3, #2
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	2232      	movs	r2, #50	; 0x32
 8003c8a:	2196      	movs	r1, #150	; 0x96
 8003c8c:	4886      	ldr	r0, [pc, #536]	; (8003ea8 <ToplevelMenu_DrawInputMenu+0x268>)
 8003c8e:	f00b fb23 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c92:	2300      	movs	r3, #0
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c9e:	2232      	movs	r2, #50	; 0x32
 8003ca0:	21c8      	movs	r1, #200	; 0xc8
 8003ca2:	4882      	ldr	r0, [pc, #520]	; (8003eac <ToplevelMenu_DrawInputMenu+0x26c>)
 8003ca4:	f00b fb18 	bl	800f2d8 <ILI9341_Draw_Text>
 8003ca8:	e015      	b.n	8003cd6 <ToplevelMenu_DrawInputMenu+0x96>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003caa:	2300      	movs	r3, #0
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	2302      	movs	r3, #2
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003cb6:	2232      	movs	r2, #50	; 0x32
 8003cb8:	2196      	movs	r1, #150	; 0x96
 8003cba:	487b      	ldr	r0, [pc, #492]	; (8003ea8 <ToplevelMenu_DrawInputMenu+0x268>)
 8003cbc:	f00b fb0c 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cc0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2232      	movs	r2, #50	; 0x32
 8003cce:	21c8      	movs	r1, #200	; 0xc8
 8003cd0:	4876      	ldr	r0, [pc, #472]	; (8003eac <ToplevelMenu_DrawInputMenu+0x26c>)
 8003cd2:	f00b fb01 	bl	800f2d8 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	2302      	movs	r3, #2
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ce2:	2246      	movs	r2, #70	; 0x46
 8003ce4:	210a      	movs	r1, #10
 8003ce6:	4872      	ldr	r0, [pc, #456]	; (8003eb0 <ToplevelMenu_DrawInputMenu+0x270>)
 8003ce8:	f00b faf6 	bl	800f2d8 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_TIM)
 8003cec:	f002 f8f4 	bl	8005ed8 <IT_GetActiveTriggerMode>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d12d      	bne.n	8003d52 <ToplevelMenu_DrawInputMenu+0x112>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cf6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2300      	movs	r3, #0
 8003d02:	2246      	movs	r2, #70	; 0x46
 8003d04:	2196      	movs	r1, #150	; 0x96
 8003d06:	486b      	ldr	r0, [pc, #428]	; (8003eb4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003d08:	f00b fae6 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	2302      	movs	r3, #2
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d18:	2246      	movs	r2, #70	; 0x46
 8003d1a:	21c8      	movs	r1, #200	; 0xc8
 8003d1c:	4866      	ldr	r0, [pc, #408]	; (8003eb8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003d1e:	f00b fadb 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d22:	2300      	movs	r3, #0
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	2302      	movs	r3, #2
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d2e:	2246      	movs	r2, #70	; 0x46
 8003d30:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d34:	4861      	ldr	r0, [pc, #388]	; (8003ebc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003d36:	f00b facf 	bl	800f2d8 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	2302      	movs	r3, #2
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d46:	2264      	movs	r2, #100	; 0x64
 8003d48:	2196      	movs	r1, #150	; 0x96
 8003d4a:	485d      	ldr	r0, [pc, #372]	; (8003ec0 <ToplevelMenu_DrawInputMenu+0x280>)
 8003d4c:	f00b fac4 	bl	800f2d8 <ILI9341_Draw_Text>
 8003d50:	e076      	b.n	8003e40 <ToplevelMenu_DrawInputMenu+0x200>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_COMP)
 8003d52:	f002 f8c1 	bl	8005ed8 <IT_GetActiveTriggerMode>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d13f      	bne.n	8003ddc <ToplevelMenu_DrawInputMenu+0x19c>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	2302      	movs	r3, #2
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d68:	2246      	movs	r2, #70	; 0x46
 8003d6a:	2196      	movs	r1, #150	; 0x96
 8003d6c:	4851      	ldr	r0, [pc, #324]	; (8003eb4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003d6e:	f00b fab3 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d72:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	2302      	movs	r3, #2
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2246      	movs	r2, #70	; 0x46
 8003d80:	21c8      	movs	r1, #200	; 0xc8
 8003d82:	484d      	ldr	r0, [pc, #308]	; (8003eb8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003d84:	f00b faa8 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d94:	2246      	movs	r2, #70	; 0x46
 8003d96:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d9a:	4848      	ldr	r0, [pc, #288]	; (8003ebc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003d9c:	f00b fa9c 	bl	800f2d8 <ILI9341_Draw_Text>

		char comp_text[20] = "";
 8003da0:	2300      	movs	r3, #0
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	f107 0308 	add.w	r3, r7, #8
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8003db2:	4844      	ldr	r0, [pc, #272]	; (8003ec4 <ToplevelMenu_DrawInputMenu+0x284>)
 8003db4:	f006 fcb6 	bl	800a724 <HAL_COMP_GetOutputLevel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	1d38      	adds	r0, r7, #4
 8003dbc:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <ToplevelMenu_DrawInputMenu+0x288>)
 8003dbe:	2114      	movs	r1, #20
 8003dc0:	f00c fe46 	bl	8010a50 <sniprintf>


		ILI9341_Draw_Text(comp_text, 150, 100,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003dc4:	1d38      	adds	r0, r7, #4
 8003dc6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	2302      	movs	r3, #2
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2264      	movs	r2, #100	; 0x64
 8003dd4:	2196      	movs	r1, #150	; 0x96
 8003dd6:	f00b fa7f 	bl	800f2d8 <ILI9341_Draw_Text>
 8003dda:	e031      	b.n	8003e40 <ToplevelMenu_DrawInputMenu+0x200>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_ADC)
 8003ddc:	f002 f87c 	bl	8005ed8 <IT_GetActiveTriggerMode>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d12c      	bne.n	8003e40 <ToplevelMenu_DrawInputMenu+0x200>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003de6:	2300      	movs	r3, #0
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	2302      	movs	r3, #2
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003df2:	2246      	movs	r2, #70	; 0x46
 8003df4:	2196      	movs	r1, #150	; 0x96
 8003df6:	482f      	ldr	r0, [pc, #188]	; (8003eb4 <ToplevelMenu_DrawInputMenu+0x274>)
 8003df8:	f00b fa6e 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	2302      	movs	r3, #2
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e08:	2246      	movs	r2, #70	; 0x46
 8003e0a:	21c8      	movs	r1, #200	; 0xc8
 8003e0c:	482a      	ldr	r0, [pc, #168]	; (8003eb8 <ToplevelMenu_DrawInputMenu+0x278>)
 8003e0e:	f00b fa63 	bl	800f2d8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e12:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	2302      	movs	r3, #2
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	2246      	movs	r2, #70	; 0x46
 8003e20:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003e24:	4825      	ldr	r0, [pc, #148]	; (8003ebc <ToplevelMenu_DrawInputMenu+0x27c>)
 8003e26:	f00b fa57 	bl	800f2d8 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e36:	2264      	movs	r2, #100	; 0x64
 8003e38:	2196      	movs	r1, #150	; 0x96
 8003e3a:	4821      	ldr	r0, [pc, #132]	; (8003ec0 <ToplevelMenu_DrawInputMenu+0x280>)
 8003e3c:	f00b fa4c 	bl	800f2d8 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e40:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2302      	movs	r3, #2
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	22cc      	movs	r2, #204	; 0xcc
 8003e4e:	2114      	movs	r1, #20
 8003e50:	481e      	ldr	r0, [pc, #120]	; (8003ecc <ToplevelMenu_DrawInputMenu+0x28c>)
 8003e52:	f00b fa41 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e56:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	22de      	movs	r2, #222	; 0xde
 8003e64:	2114      	movs	r1, #20
 8003e66:	481a      	ldr	r0, [pc, #104]	; (8003ed0 <ToplevelMenu_DrawInputMenu+0x290>)
 8003e68:	f00b fa36 	bl	800f2d8 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e6c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	22cc      	movs	r2, #204	; 0xcc
 8003e7a:	2168      	movs	r1, #104	; 0x68
 8003e7c:	4815      	ldr	r0, [pc, #84]	; (8003ed4 <ToplevelMenu_DrawInputMenu+0x294>)
 8003e7e:	f00b fa2b 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e82:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	22de      	movs	r2, #222	; 0xde
 8003e90:	2161      	movs	r1, #97	; 0x61
 8003e92:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <ToplevelMenu_DrawInputMenu+0x298>)
 8003e94:	f00b fa20 	bl	800f2d8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	08014634 	.word	0x08014634
 8003ea4:	0801463c 	.word	0x0801463c
 8003ea8:	08014648 	.word	0x08014648
 8003eac:	0801464c 	.word	0x0801464c
 8003eb0:	08014650 	.word	0x08014650
 8003eb4:	08014658 	.word	0x08014658
 8003eb8:	0801465c 	.word	0x0801465c
 8003ebc:	08014664 	.word	0x08014664
 8003ec0:	08014668 	.word	0x08014668
 8003ec4:	200029c8 	.word	0x200029c8
 8003ec8:	08014670 	.word	0x08014670
 8003ecc:	08014678 	.word	0x08014678
 8003ed0:	0801467c 	.word	0x0801467c
 8003ed4:	08014684 	.word	0x08014684
 8003ed8:	08014688 	.word	0x08014688

08003edc <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <BiasMenu_getStatus+0x14>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20001e55 	.word	0x20001e55

08003ef4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8003ef8:	f7fd fad0 	bl	800149c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <BiasMenuEntryHandler+0x30>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <BiasMenuEntryHandler+0x34>)
 8003f04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f08:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003f0a:	f001 f873 	bl	8004ff4 <BO_GetDcBiasEncoderValue>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <BiasMenuEntryHandler+0x34>)
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <BiasMenuEntryHandler+0x38>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003f1c:	230e      	movs	r3, #14
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20001e55 	.word	0x20001e55
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	20001e57 	.word	0x20001e57

08003f30 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8003f34:	2000      	movs	r0, #0
 8003f36:	f002 fbd1 	bl	80066dc <SM_GetEncoderValue>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f865 	bl	800500c <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003f42:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <BiasMenuInputHandler+0x20>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003f48:	230e      	movs	r3, #14
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20001e57 	.word	0x20001e57

08003f54 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <BiasMenuExitHandler+0x1c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003f5e:	f7fd fa9d 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <BiasMenuExitHandler+0x20>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20001e55 	.word	0x20001e55
 8003f74:	20001e57 	.word	0x20001e57

08003f78 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003f7e:	4baa      	ldr	r3, [pc, #680]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b0e      	cmp	r3, #14
 8003f84:	f200 8206 	bhi.w	8004394 <EM_ProcessEvent+0x41c>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <EM_ProcessEvent+0x18>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fcd 	.word	0x08003fcd
 8003f94:	08003ff9 	.word	0x08003ff9
 8003f98:	08004079 	.word	0x08004079
 8003f9c:	080040c5 	.word	0x080040c5
 8003fa0:	08004105 	.word	0x08004105
 8003fa4:	08004131 	.word	0x08004131
 8003fa8:	08004171 	.word	0x08004171
 8003fac:	080041cf 	.word	0x080041cf
 8003fb0:	080041fb 	.word	0x080041fb
 8003fb4:	08004395 	.word	0x08004395
 8003fb8:	08004231 	.word	0x08004231
 8003fbc:	0800428b 	.word	0x0800428b
 8003fc0:	080042b7 	.word	0x080042b7
 8003fc4:	080042e1 	.word	0x080042e1
 8003fc8:	08004365 	.word	0x08004365

			#ifdef EVENT_MENU_DEBUG
			  printf("Idle_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 8003fcc:	4b97      	ldr	r3, [pc, #604]	; (800422c <EM_ProcessEvent+0x2b4>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <EM_ProcessEvent+0x68>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003fd4:	f000 fe24 	bl	8004c20 <ToplevelOutputMenuEntryHandler>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b92      	ldr	r3, [pc, #584]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8003fde:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fe0:	4b92      	ldr	r3, [pc, #584]	; (800422c <EM_ProcessEvent+0x2b4>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	f040 81d7 	bne.w	8004398 <EM_ProcessEvent+0x420>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003fea:	f000 fe3d 	bl	8004c68 <ToplevelInputMenuEntryHandler>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b8d      	ldr	r3, [pc, #564]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8003ff4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003ff6:	e1cf      	b.n	8004398 <EM_ProcessEvent+0x420>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Output_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8003ff8:	4b8c      	ldr	r3, [pc, #560]	; (800422c <EM_ProcessEvent+0x2b4>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b06      	cmp	r3, #6
 8003ffe:	d105      	bne.n	800400c <EM_ProcessEvent+0x94>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8004000:	f000 fe20 	bl	8004c44 <ToplevelOutputMenuExitHandler>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	4b87      	ldr	r3, [pc, #540]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800400a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 800400c:	4b87      	ldr	r3, [pc, #540]	; (800422c <EM_ProcessEvent+0x2b4>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <EM_ProcessEvent+0xae>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004014:	2000      	movs	r0, #0
 8004016:	f000 fdf3 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 800401a:	f000 fc09 	bl	8004830 <FuncMainMenuEntryHandler>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	4b81      	ldr	r3, [pc, #516]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004024:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004026:	4b81      	ldr	r3, [pc, #516]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d108      	bne.n	8004040 <EM_ProcessEvent+0xc8>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800402e:	2000      	movs	r0, #0
 8004030:	f000 fde6 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8004034:	f000 fb30 	bl	8004698 <FreqMainMenuEntryHandler>
 8004038:	4603      	mov	r3, r0
 800403a:	461a      	mov	r2, r3
 800403c:	4b7a      	ldr	r3, [pc, #488]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800403e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004040:	4b7a      	ldr	r3, [pc, #488]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d108      	bne.n	800405a <EM_ProcessEvent+0xe2>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004048:	2000      	movs	r0, #0
 800404a:	f000 fdd9 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 800404e:	f000 fce5 	bl	8004a1c <GainMainMenuEntryHandler>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	4b74      	ldr	r3, [pc, #464]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004058:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <EM_ProcessEvent+0x2b4>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b04      	cmp	r3, #4
 8004060:	f040 819c 	bne.w	800439c <EM_ProcessEvent+0x424>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004064:	2000      	movs	r0, #0
 8004066:	f000 fdcb 	bl	8004c00 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 800406a:	f7ff ff43 	bl	8003ef4 <BiasMenuEntryHandler>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004074:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004076:	e191      	b.n	800439c <EM_ProcessEvent+0x424>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Input_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8004078:	4b6c      	ldr	r3, [pc, #432]	; (800422c <EM_ProcessEvent+0x2b4>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d105      	bne.n	800408c <EM_ProcessEvent+0x114>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8004080:	f000 fe26 	bl	8004cd0 <ToplevelInputMenuExitHandler>
 8004084:	4603      	mov	r3, r0
 8004086:	461a      	mov	r2, r3
 8004088:	4b67      	ldr	r3, [pc, #412]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800408a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 800408c:	4b67      	ldr	r3, [pc, #412]	; (800422c <EM_ProcessEvent+0x2b4>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d108      	bne.n	80040a6 <EM_ProcessEvent+0x12e>
			{
				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fdf7 	bl	8004c8c <ToplevelInputMenuInputHandler>
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b61      	ldr	r3, [pc, #388]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040a4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 8178 	bne.w	80043a0 <EM_ProcessEvent+0x428>
			{

				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 80040b0:	4b5e      	ldr	r3, [pc, #376]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fde9 	bl	8004c8c <ToplevelInputMenuInputHandler>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80040c2:	e16d      	b.n	80043a0 <EM_ProcessEvent+0x428>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d105      	bne.n	80040d8 <EM_ProcessEvent+0x160>
			{
				eNextState = FuncMainMenuExitHandler();
 80040cc:	f000 fbc2 	bl	8004854 <FuncMainMenuExitHandler>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b54      	ldr	r3, [pc, #336]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040d6:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <EM_ProcessEvent+0x174>
			{
				eNextState = FuncSignalMenuEntryHandler();
 80040e0:	f000 fbcc 	bl	800487c <FuncSignalMenuEntryHandler>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80040ea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80040ec:	4b4f      	ldr	r3, [pc, #316]	; (800422c <EM_ProcessEvent+0x2b4>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	f040 8157 	bne.w	80043a4 <EM_ProcessEvent+0x42c>
			{
				eNextState = FuncAuxMenuEntryHandler();
 80040f6:	f000 fc05 	bl	8004904 <FuncAuxMenuEntryHandler>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b4a      	ldr	r3, [pc, #296]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004100:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004102:	e14f      	b.n	80043a4 <EM_ProcessEvent+0x42c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004104:	4b49      	ldr	r3, [pc, #292]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b05      	cmp	r3, #5
 800410a:	d105      	bne.n	8004118 <EM_ProcessEvent+0x1a0>
			{
				eNextState = FuncSignalMenuInputHandler();
 800410c:	f000 fbd4 	bl	80048b8 <FuncSignalMenuInputHandler>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4b44      	ldr	r3, [pc, #272]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004116:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004118:	4b44      	ldr	r3, [pc, #272]	; (800422c <EM_ProcessEvent+0x2b4>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b06      	cmp	r3, #6
 800411e:	f040 8143 	bne.w	80043a8 <EM_ProcessEvent+0x430>
			{
				eNextState = FuncSignalMenuExitHandler();
 8004122:	f000 fbdb 	bl	80048dc <FuncSignalMenuExitHandler>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800412c:	701a      	strb	r2, [r3, #0]
			}


			break;
 800412e:	e13b      	b.n	80043a8 <EM_ProcessEvent+0x430>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d105      	bne.n	8004144 <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncAuxMenuInputHandler();
 8004138:	f000 fc02 	bl	8004940 <FuncAuxMenuInputHandler>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004142:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004144:	4b39      	ldr	r3, [pc, #228]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b06      	cmp	r3, #6
 800414a:	d105      	bne.n	8004158 <EM_ProcessEvent+0x1e0>
			{
				eNextState = FuncAuxMenuExitHandler();
 800414c:	f000 fc46 	bl	80049dc <FuncAuxMenuExitHandler>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	4b34      	ldr	r3, [pc, #208]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004156:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004158:	4b34      	ldr	r3, [pc, #208]	; (800422c <EM_ProcessEvent+0x2b4>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b03      	cmp	r3, #3
 800415e:	f040 8125 	bne.w	80043ac <EM_ProcessEvent+0x434>
			{
				eNextState = FuncAuxToggleDutyMode();
 8004162:	f000 fc29 	bl	80049b8 <FuncAuxToggleDutyMode>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800416c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800416e:	e11d      	b.n	80043ac <EM_ProcessEvent+0x434>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8004170:	4b2e      	ldr	r3, [pc, #184]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b06      	cmp	r3, #6
 8004176:	d108      	bne.n	800418a <EM_ProcessEvent+0x212>
			{
				eNextState = GainMainMenuExitHandler();
 8004178:	f000 fc62 	bl	8004a40 <GainMainMenuExitHandler>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004182:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004184:	2002      	movs	r0, #2
 8004186:	f000 fd3b 	bl	8004c00 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <EM_ProcessEvent+0x2b4>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <EM_ProcessEvent+0x226>
			{
				eNextState = GainSignalMenuEntryHandler();
 8004192:	f000 fc67 	bl	8004a64 <GainSignalMenuEntryHandler>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800419c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	f040 8104 	bne.w	80043b0 <EM_ProcessEvent+0x438>
			{
				eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80041a8:	2001      	movs	r0, #1
 80041aa:	f002 f81b 	bl	80061e4 <SM_GetOutputChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
				if(aux_output_func != PWM_FUNC_MODE)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	f000 80f8 	beq.w	80043b0 <EM_ProcessEvent+0x438>
					eNextState = GainAuxMenuEntryHandler();
 80041c0:	f000 fcbe 	bl	8004b40 <GainAuxMenuEntryHandler>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80041ca:	701a      	strb	r2, [r3, #0]
			}

			break;
 80041cc:	e0f0      	b.n	80043b0 <EM_ProcessEvent+0x438>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80041ce:	4b17      	ldr	r3, [pc, #92]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d105      	bne.n	80041e2 <EM_ProcessEvent+0x26a>
			{
				eNextState = GainSignalMenuInputHandler();
 80041d6:	f000 fc77 	bl	8004ac8 <GainSignalMenuInputHandler>
 80041da:	4603      	mov	r3, r0
 80041dc:	461a      	mov	r2, r3
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80041e0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	f040 80e4 	bne.w	80043b4 <EM_ProcessEvent+0x43c>
			{
				eNextState = GainSignalMenuExitHandler();
 80041ec:	f000 fc96 	bl	8004b1c <GainSignalMenuExitHandler>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <EM_ProcessEvent+0x2b0>)
 80041f6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80041f8:	e0dc      	b.n	80043b4 <EM_ProcessEvent+0x43c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <EM_ProcessEvent+0x2b4>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d105      	bne.n	800420e <EM_ProcessEvent+0x296>
			{
				eNextState = GainAuxMenuInputHandler();
 8004202:	f000 fccd 	bl	8004ba0 <GainAuxMenuInputHandler>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <EM_ProcessEvent+0x2b0>)
 800420c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <EM_ProcessEvent+0x2b4>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b06      	cmp	r3, #6
 8004214:	f040 80d0 	bne.w	80043b8 <EM_ProcessEvent+0x440>
			{
				eNextState = GainAuxMenuExitHandler();
 8004218:	f000 fcd4 	bl	8004bc4 <GainAuxMenuExitHandler>
 800421c:	4603      	mov	r3, r0
 800421e:	461a      	mov	r2, r3
 8004220:	4b01      	ldr	r3, [pc, #4]	; (8004228 <EM_ProcessEvent+0x2b0>)
 8004222:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004224:	e0c8      	b.n	80043b8 <EM_ProcessEvent+0x440>
 8004226:	bf00      	nop
 8004228:	20001e56 	.word	0x20001e56
 800422c:	20001e57 	.word	0x20001e57

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Main_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8004230:	4b69      	ldr	r3, [pc, #420]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d108      	bne.n	800424a <EM_ProcessEvent+0x2d2>
			{
				eNextState = FreqMainMenuExitHandler();
 8004238:	f000 fa40 	bl	80046bc <FreqMainMenuExitHandler>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	4b66      	ldr	r3, [pc, #408]	; (80043dc <EM_ProcessEvent+0x464>)
 8004242:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004244:	2002      	movs	r0, #2
 8004246:	f000 fcdb 	bl	8004c00 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <EM_ProcessEvent+0x460>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <EM_ProcessEvent+0x2e6>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8004252:	f000 fa4b 	bl	80046ec <FreqPresetMenuEntryHandler>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	4b60      	ldr	r3, [pc, #384]	; (80043dc <EM_ProcessEvent+0x464>)
 800425c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800425e:	4b5e      	ldr	r3, [pc, #376]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d105      	bne.n	8004272 <EM_ProcessEvent+0x2fa>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8004266:	f000 fa91 	bl	800478c <FreqAdjustMenuEntryHandler>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	4b5b      	ldr	r3, [pc, #364]	; (80043dc <EM_ProcessEvent+0x464>)
 8004270:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004272:	4b59      	ldr	r3, [pc, #356]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b03      	cmp	r3, #3
 8004278:	f040 80a0 	bne.w	80043bc <EM_ProcessEvent+0x444>
			{
				eNextState = FreqSweepMenuEntryHandler();
 800427c:	f000 f8c0 	bl	8004400 <FreqSweepMenuEntryHandler>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	4b55      	ldr	r3, [pc, #340]	; (80043dc <EM_ProcessEvent+0x464>)
 8004286:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004288:	e098      	b.n	80043bc <EM_ProcessEvent+0x444>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Preset_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <EM_ProcessEvent+0x460>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d105      	bne.n	800429e <EM_ProcessEvent+0x326>
			{
				eNextState = FreqPresetMenuInputHandler();
 8004292:	f000 fa57 	bl	8004744 <FreqPresetMenuInputHandler>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	4b50      	ldr	r3, [pc, #320]	; (80043dc <EM_ProcessEvent+0x464>)
 800429c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	f040 808c 	bne.w	80043c0 <EM_ProcessEvent+0x448>
			{
				eNextState = FreqPresetMenuExitHandler();
 80042a8:	f000 fa5e 	bl	8004768 <FreqPresetMenuExitHandler>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <EM_ProcessEvent+0x464>)
 80042b2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80042b4:	e084      	b.n	80043c0 <EM_ProcessEvent+0x448>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Adjust_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80042b6:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d105      	bne.n	80042ca <EM_ProcessEvent+0x352>
			{
				eNextState = FreqAdjustMenuInputHandler();
 80042be:	f000 fa81 	bl	80047c4 <FreqAdjustMenuInputHandler>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b45      	ldr	r3, [pc, #276]	; (80043dc <EM_ProcessEvent+0x464>)
 80042c8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80042ca:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d178      	bne.n	80043c4 <EM_ProcessEvent+0x44c>
			{
				eNextState = FreqAdjustMenuExitHandler();
 80042d2:	f000 fa83 	bl	80047dc <FreqAdjustMenuExitHandler>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4b40      	ldr	r3, [pc, #256]	; (80043dc <EM_ProcessEvent+0x464>)
 80042dc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80042de:	e071      	b.n	80043c4 <EM_ProcessEvent+0x44c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Sweep_Menu_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 80042e0:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d106      	bne.n	80042f6 <EM_ProcessEvent+0x37e>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 80042e8:	2007      	movs	r0, #7
 80042ea:	f000 f8df 	bl	80044ac <FreqSweepMenuInputHandler>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4b3a      	ldr	r3, [pc, #232]	; (80043dc <EM_ProcessEvent+0x464>)
 80042f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <EM_ProcessEvent+0x460>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d106      	bne.n	800430c <EM_ProcessEvent+0x394>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80042fe:	2008      	movs	r0, #8
 8004300:	f000 f8d4 	bl	80044ac <FreqSweepMenuInputHandler>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <EM_ProcessEvent+0x464>)
 800430a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <EM_ProcessEvent+0x460>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d106      	bne.n	8004322 <EM_ProcessEvent+0x3aa>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004314:	2009      	movs	r0, #9
 8004316:	f000 f8c9 	bl	80044ac <FreqSweepMenuInputHandler>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	4b2f      	ldr	r3, [pc, #188]	; (80043dc <EM_ProcessEvent+0x464>)
 8004320:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8004322:	4b2d      	ldr	r3, [pc, #180]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d106      	bne.n	8004338 <EM_ProcessEvent+0x3c0>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 800432a:	200a      	movs	r0, #10
 800432c:	f000 f8be 	bl	80044ac <FreqSweepMenuInputHandler>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	4b29      	ldr	r3, [pc, #164]	; (80043dc <EM_ProcessEvent+0x464>)
 8004336:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <EM_ProcessEvent+0x460>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b05      	cmp	r3, #5
 800433e:	d106      	bne.n	800434e <EM_ProcessEvent+0x3d6>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8004340:	200b      	movs	r0, #11
 8004342:	f000 f8b3 	bl	80044ac <FreqSweepMenuInputHandler>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <EM_ProcessEvent+0x464>)
 800434c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b06      	cmp	r3, #6
 8004354:	d138      	bne.n	80043c8 <EM_ProcessEvent+0x450>
			{
				eNextState = FreqSweepMenuExitHandler();
 8004356:	f000 f97f 	bl	8004658 <FreqSweepMenuExitHandler>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <EM_ProcessEvent+0x464>)
 8004360:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004362:	e031      	b.n	80043c8 <EM_ProcessEvent+0x450>

			#ifdef EVENT_MENU_DEBUG
				  printf("Bias_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <EM_ProcessEvent+0x460>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d105      	bne.n	8004378 <EM_ProcessEvent+0x400>
			{
				eNextState = BiasMenuInputHandler();
 800436c:	f7ff fde0 	bl	8003f30 <BiasMenuInputHandler>
 8004370:	4603      	mov	r3, r0
 8004372:	461a      	mov	r2, r3
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <EM_ProcessEvent+0x464>)
 8004376:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <EM_ProcessEvent+0x460>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b06      	cmp	r3, #6
 800437e:	d125      	bne.n	80043cc <EM_ProcessEvent+0x454>
			{
				eNextState = BiasMenuExitHandler();
 8004380:	f7ff fde8 	bl	8003f54 <BiasMenuExitHandler>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <EM_ProcessEvent+0x464>)
 800438a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800438c:	2002      	movs	r0, #2
 800438e:	f000 fc37 	bl	8004c00 <ToplevelMenu_setStatus>
			}

			break;
 8004392:	e01b      	b.n	80043cc <EM_ProcessEvent+0x454>

		default:
			break;
 8004394:	bf00      	nop
 8004396:	e01a      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 8004398:	bf00      	nop
 800439a:	e018      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 800439c:	bf00      	nop
 800439e:	e016      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043a0:	bf00      	nop
 80043a2:	e014      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043a4:	bf00      	nop
 80043a6:	e012      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043a8:	bf00      	nop
 80043aa:	e010      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043ac:	bf00      	nop
 80043ae:	e00e      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043b0:	bf00      	nop
 80043b2:	e00c      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043b4:	bf00      	nop
 80043b6:	e00a      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043b8:	bf00      	nop
 80043ba:	e008      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043bc:	bf00      	nop
 80043be:	e006      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043c0:	bf00      	nop
 80043c2:	e004      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <EM_ProcessEvent+0x456>
			break;
 80043cc:	bf00      	nop
	}

}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20001e57 	.word	0x20001e57
 80043dc:	20001e56 	.word	0x20001e56

080043e0 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80043ea:	4a04      	ldr	r2, [pc, #16]	; (80043fc <EM_SetNewEvent+0x1c>)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	7013      	strb	r3, [r2, #0]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20001e57 	.word	0x20001e57

08004400 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004404:	f7fd f84a 	bl	800149c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <FreqSweepMenuEntryHandler+0x98>)
 8004418:	edd3 7a00 	vldr	s15, [r3]
 800441c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d009      	beq.n	800443a <FreqSweepMenuEntryHandler+0x3a>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <FreqSweepMenuEntryHandler+0x98>)
 8004436:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <FreqSweepMenuEntryHandler+0x98>)
 800443c:	edd3 7a00 	vldr	s15, [r3]
 8004440:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004444:	eef4 7a47 	vcmp.f32	s15, s14
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	d101      	bne.n	8004452 <FreqSweepMenuEntryHandler+0x52>
	{
		FS_SetSweepModeDown();
 800444e:	f000 ffdd 	bl	800540c <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004452:	2000      	movs	r0, #0
 8004454:	f001 f830 	bl	80054b8 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004458:	2000      	movs	r0, #0
 800445a:	f001 f88d 	bl	8005578 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 800445e:	f001 f8c7 	bl	80055f0 <FS_GetCalculatedSweepFrequencyInHertz>
 8004462:	eef0 7a40 	vmov.f32	s15, s0
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <FreqSweepMenuEntryHandler+0x9c>)
 8004468:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <FreqSweepMenuEntryHandler+0xa0>)
 800446e:	2200      	movs	r2, #0
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004472:	2009      	movs	r0, #9
 8004474:	f000 f81a 	bl	80044ac <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <FreqSweepMenuEntryHandler+0xa0>)
 800447a:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <FreqSweepMenuEntryHandler+0xa0>)
 8004482:	2200      	movs	r2, #0
 8004484:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <FreqSweepMenuEntryHandler+0xa4>)
 8004488:	2204      	movs	r2, #4
 800448a:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <FreqSweepMenuEntryHandler+0xa8>)
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004492:	230d      	movs	r3, #13
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000124 	.word	0x20000124
 800449c:	2000226c 	.word	0x2000226c
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	20001e5a 	.word	0x20001e5a
 80044a8:	20001e57 	.word	0x20001e57

080044ac <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	3b07      	subs	r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	f200 80b2 	bhi.w	8004624 <FreqSweepMenuInputHandler+0x178>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <FreqSweepMenuInputHandler+0x1c>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044dd 	.word	0x080044dd
 80044cc:	080044f7 	.word	0x080044f7
 80044d0:	08004615 	.word	0x08004615
 80044d4:	0800461d 	.word	0x0800461d
 80044d8:	08004531 	.word	0x08004531
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 80044dc:	4b56      	ldr	r3, [pc, #344]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a55      	ldr	r2, [pc, #340]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044e2:	f083 0301 	eor.w	r3, r3, #1
 80044e6:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 80044e8:	4b53      	ldr	r3, [pc, #332]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <FreqSweepMenuInputHandler+0x18c>)
 80044ee:	f083 0301 	eor.w	r3, r3, #1
 80044f2:	6013      	str	r3, [r2, #0]
			break;
 80044f4:	e097      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80044f6:	4b51      	ldr	r3, [pc, #324]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	4b4e      	ldr	r3, [pc, #312]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 8004502:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004504:	4b4d      	ldr	r3, [pc, #308]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d004      	beq.n	8004516 <FreqSweepMenuInputHandler+0x6a>
 800450c:	2b02      	cmp	r3, #2
 800450e:	d008      	beq.n	8004522 <FreqSweepMenuInputHandler+0x76>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <FreqSweepMenuInputHandler+0x70>
 8004514:	e006      	b.n	8004524 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004516:	f000 ff79 	bl	800540c <FS_SetSweepModeDown>
					break;
 800451a:	e003      	b.n	8004524 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 800451c:	f000 ffa4 	bl	8005468 <FS_SetSweepModeUp>
					break;
 8004520:	e000      	b.n	8004524 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004522:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004524:	4b46      	ldr	r3, [pc, #280]	; (8004640 <FreqSweepMenuInputHandler+0x194>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 ffc5 	bl	80054b8 <FS_SetEncoderControlMode>

			break;
 800452e:	e07a      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004530:	4b43      	ldr	r3, [pc, #268]	; (8004640 <FreqSweepMenuInputHandler+0x194>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <FreqSweepMenuInputHandler+0x92>
 8004538:	2b01      	cmp	r3, #1
 800453a:	d00b      	beq.n	8004554 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 800453c:	e073      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800453e:	2000      	movs	r0, #0
 8004540:	f001 f81a 	bl	8005578 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004544:	f001 f854 	bl	80055f0 <FS_GetCalculatedSweepFrequencyInHertz>
 8004548:	eef0 7a40 	vmov.f32	s15, s0
 800454c:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <FreqSweepMenuInputHandler+0x198>)
 800454e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004552:	e05e      	b.n	8004612 <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <FreqSweepMenuInputHandler+0x190>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <FreqSweepMenuInputHandler+0xb6>
 800455c:	2b01      	cmp	r3, #1
 800455e:	d02a      	beq.n	80045b6 <FreqSweepMenuInputHandler+0x10a>
							break;
 8004560:	e056      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d803      	bhi.n	8004572 <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 800456c:	220d      	movs	r2, #13
 800456e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004570:	e04e      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004572:	4b35      	ldr	r3, [pc, #212]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800457e:	4b33      	ldr	r3, [pc, #204]	; (800464c <FreqSweepMenuInputHandler+0x1a0>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	dd09      	ble.n	80045a2 <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 800458e:	4b2f      	ldr	r3, [pc, #188]	; (800464c <FreqSweepMenuInputHandler+0x1a0>)
 8004590:	edd3 7a00 	vldr	s15, [r3]
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 2a90 	vmov	r2, s15
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80045a0:	e036      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	4b28      	ldr	r3, [pc, #160]	; (8004650 <FreqSweepMenuInputHandler+0x1a4>)
 80045b0:	edc3 7a00 	vstr	s15, [r3]
							break;
 80045b4:	e02c      	b.n	8004610 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80045be:	4293      	cmp	r3, r2
 80045c0:	d904      	bls.n	80045cc <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80045ca:	e020      	b.n	800460e <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <FreqSweepMenuInputHandler+0x1a4>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	d509      	bpl.n	80045fc <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <FreqSweepMenuInputHandler+0x1a4>)
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f4:	ee17 2a90 	vmov	r2, s15
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80045fa:	e008      	b.n	800460e <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <FreqSweepMenuInputHandler+0x19c>)
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004608:	4b10      	ldr	r3, [pc, #64]	; (800464c <FreqSweepMenuInputHandler+0x1a0>)
 800460a:	edc3 7a00 	vstr	s15, [r3]
							break;
 800460e:	bf00      	nop
					break;
 8004610:	bf00      	nop
			break;
 8004612:	e008      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004614:	2000      	movs	r0, #0
 8004616:	f000 ff4f 	bl	80054b8 <FS_SetEncoderControlMode>

			break;
 800461a:	e004      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 800461c:	2001      	movs	r0, #1
 800461e:	f000 ff4b 	bl	80054b8 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004622:	e000      	b.n	8004626 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004624:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <FreqSweepMenuInputHandler+0x1a8>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800462c:	230d      	movs	r3, #13
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40000c00 	.word	0x40000c00
 800463c:	20001e58 	.word	0x20001e58
 8004640:	20001e59 	.word	0x20001e59
 8004644:	2000226c 	.word	0x2000226c
 8004648:	40012c00 	.word	0x40012c00
 800464c:	20000124 	.word	0x20000124
 8004650:	20000120 	.word	0x20000120
 8004654:	20001e57 	.word	0x20001e57

08004658 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800465c:	f7fc ff1e 	bl	800149c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a09      	ldr	r2, [pc, #36]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 800466c:	4b07      	ldr	r3, [pc, #28]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a06      	ldr	r2, [pc, #24]	; (800468c <FreqSweepMenuExitHandler+0x34>)
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <FreqSweepMenuExitHandler+0x38>)
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <FreqSweepMenuExitHandler+0x3c>)
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004684:	230a      	movs	r3, #10
}
 8004686:	4618      	mov	r0, r3
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40000c00 	.word	0x40000c00
 8004690:	20001e5a 	.word	0x20001e5a
 8004694:	20001e57 	.word	0x20001e57

08004698 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800469c:	f7fc fefe 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <FreqMainMenuEntryHandler+0x1c>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 80046a6:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <FreqMainMenuEntryHandler+0x20>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80046ac:	230a      	movs	r3, #10
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20001e5a 	.word	0x20001e5a
 80046b8:	20001e57 	.word	0x20001e57

080046bc <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <FreqMainMenuExitHandler+0x24>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <FreqMainMenuExitHandler+0x28>)
 80046c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80046ce:	f7fc fee5 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <FreqMainMenuExitHandler+0x2c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80046d8:	2301      	movs	r3, #1
}
 80046da:	4618      	mov	r0, r3
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20001e5a 	.word	0x20001e5a
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	20001e57 	.word	0x20001e57

080046ec <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80046f2:	f7fc fed3 	bl	800149c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 80046f6:	f000 fe7d 	bl	80053f4 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <FreqPresetMenuEntryHandler+0x48>)
 80046fc:	2202      	movs	r2, #2
 80046fe:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004700:	f000 fe2a 	bl	8005358 <FreqO_GetFPresetObject>
 8004704:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <FreqPresetMenuEntryHandler+0x4c>)
 800470e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004712:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <FreqPresetMenuEntryHandler+0x4c>)
 8004716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c
 800471c:	e002      	b.n	8004724 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 800471e:	4807      	ldr	r0, [pc, #28]	; (800473c <FreqPresetMenuEntryHandler+0x50>)
 8004720:	f7fc ff02 	bl	8001528 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <FreqPresetMenuEntryHandler+0x54>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800472a:	230b      	movs	r3, #11
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20001e5a 	.word	0x20001e5a
 8004738:	40012c00 	.word	0x40012c00
 800473c:	08014690 	.word	0x08014690
 8004740:	20001e57 	.word	0x20001e57

08004744 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004748:	2000      	movs	r0, #0
 800474a:	f001 ffc7 	bl	80066dc <SM_GetEncoderValue>
 800474e:	4603      	mov	r3, r0
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fd2f 	bl	80051b4 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004756:	4b03      	ldr	r3, [pc, #12]	; (8004764 <FreqPresetMenuInputHandler+0x20>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800475c:	230b      	movs	r3, #11
}
 800475e:	4618      	mov	r0, r3
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20001e57 	.word	0x20001e57

08004768 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800476c:	f7fc fe96 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <FreqPresetMenuExitHandler+0x1c>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <FreqPresetMenuExitHandler+0x20>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800477c:	230a      	movs	r3, #10
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20001e5a 	.word	0x20001e5a
 8004788:	20001e57 	.word	0x20001e57

0800478c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004790:	f7fc fe84 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004794:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <FreqAdjustMenuEntryHandler+0x2c>)
 8004796:	2203      	movs	r2, #3
 8004798:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800479a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <FreqAdjustMenuEntryHandler+0x30>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <FreqAdjustMenuEntryHandler+0x30>)
 80047a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <FreqAdjustMenuEntryHandler+0x34>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80047b2:	230c      	movs	r3, #12
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20001e5a 	.word	0x20001e5a
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	20001e57 	.word	0x20001e57

080047c4 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 80047c8:	f000 fd9a 	bl	8005300 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <FreqAdjustMenuInputHandler+0x14>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80047d2:	230c      	movs	r3, #12
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20001e57 	.word	0x20001e57

080047dc <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80047e0:	f7fc fe5c 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <FreqAdjustMenuExitHandler+0x1c>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <FreqAdjustMenuExitHandler+0x20>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80047f0:	230a      	movs	r3, #10
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20001e5a 	.word	0x20001e5a
 80047fc:	20001e57 	.word	0x20001e57

08004800 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <FreqMenu_getStatus+0x14>)
 8004806:	781b      	ldrb	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20001e5a 	.word	0x20001e5a

08004818 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <FuncMenu_getStatus+0x14>)
 800481e:	781b      	ldrb	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20001e5b 	.word	0x20001e5b

08004830 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004834:	f7fc fe32 	bl	800149c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <FuncMainMenuEntryHandler+0x1c>)
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <FuncMainMenuEntryHandler+0x20>)
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004844:	2303      	movs	r3, #3
}
 8004846:	4618      	mov	r0, r3
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20001e5b 	.word	0x20001e5b
 8004850:	20001e57 	.word	0x20001e57

08004854 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <FuncMainMenuExitHandler+0x20>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800485e:	2002      	movs	r0, #2
 8004860:	f000 f9ce 	bl	8004c00 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8004864:	f7fc fe1a 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <FuncMainMenuExitHandler+0x24>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800486e:	2301      	movs	r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20001e5b 	.word	0x20001e5b
 8004878:	20001e57 	.word	0x20001e57

0800487c <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004880:	f7fc fe0c 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004884:	f000 fee2 	bl	800564c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <FuncSignalMenuEntryHandler+0x30>)
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <FuncSignalMenuEntryHandler+0x34>)
 8004890:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <FuncSignalMenuEntryHandler+0x34>)
 8004898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <FuncSignalMenuEntryHandler+0x38>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80048a4:	2304      	movs	r3, #4
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20001e5b 	.word	0x20001e5b
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	20001e57 	.word	0x20001e57

080048b8 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80048bc:	2000      	movs	r0, #0
 80048be:	f001 ff0d 	bl	80066dc <SM_GetEncoderValue>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fecd 	bl	8005664 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 80048ca:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <FuncSignalMenuInputHandler+0x20>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80048d0:	2304      	movs	r3, #4
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20001e57 	.word	0x20001e57

080048dc <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <FuncSignalMenuExitHandler+0x20>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80048e6:	f7fc fdd9 	bl	800149c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 80048ea:	f001 ff9b 	bl	8006824 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 80048ee:	4b04      	ldr	r3, [pc, #16]	; (8004900 <FuncSignalMenuExitHandler+0x24>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80048f4:	2303      	movs	r3, #3
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20001e5b 	.word	0x20001e5b
 8004900:	20001e57 	.word	0x20001e57

08004904 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004908:	f7fc fdc8 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 800490c:	f000 fe9e 	bl	800564c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <FuncAuxMenuEntryHandler+0x30>)
 8004912:	2203      	movs	r2, #3
 8004914:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <FuncAuxMenuEntryHandler+0x34>)
 8004918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <FuncAuxMenuEntryHandler+0x34>)
 8004920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <FuncAuxMenuEntryHandler+0x38>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800492c:	2305      	movs	r3, #5
}
 800492e:	4618      	mov	r0, r3
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20001e5b 	.word	0x20001e5b
 8004938:	40012c00 	.word	0x40012c00
 800493c:	20001e57 	.word	0x20001e57

08004940 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004940:	b590      	push	{r4, r7, lr}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004946:	f001 ff51 	bl	80067ec <SM_IsFuncPwmDutyMode>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004950:	2000      	movs	r0, #0
 8004952:	f001 fec3 	bl	80066dc <SM_GetEncoderValue>
 8004956:	4603      	mov	r3, r0
 8004958:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	4618      	mov	r0, r3
 800495e:	f7fb fdf9 	bl	8000554 <__aeabi_ui2d>
 8004962:	4603      	mov	r3, r0
 8004964:	460c      	mov	r4, r1
 8004966:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80049a8 <FuncAuxMenuInputHandler+0x68>
 800496a:	ec44 3b10 	vmov	d0, r3, r4
 800496e:	f00e f97f 	bl	8012c70 <pow>
 8004972:	ec53 2b10 	vmov	r2, r3, d0
 8004976:	4c0e      	ldr	r4, [pc, #56]	; (80049b0 <FuncAuxMenuInputHandler+0x70>)
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f7fc f93c 	bl	8000bf8 <__aeabi_d2uiz>
 8004980:	4603      	mov	r3, r0
 8004982:	6363      	str	r3, [r4, #52]	; 0x34
 8004984:	e006      	b.n	8004994 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004986:	2000      	movs	r0, #0
 8004988:	f001 fea8 	bl	80066dc <SM_GetEncoderValue>
 800498c:	4603      	mov	r3, r0
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fea2 	bl	80056d8 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <FuncAuxMenuInputHandler+0x74>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800499a:	2305      	movs	r3, #5
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}
 80049a4:	f3af 8000 	nop.w
 80049a8:	00000000 	.word	0x00000000
 80049ac:	40000000 	.word	0x40000000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	20001e57 	.word	0x20001e57

080049b8 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 80049bc:	f001 ff22 	bl	8006804 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <FuncAuxToggleDutyMode+0x1c>)
 80049c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <FuncAuxToggleDutyMode+0x20>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80049ce:	2305      	movs	r3, #5
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	20001e57 	.word	0x20001e57

080049dc <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <FuncAuxMenuExitHandler+0x20>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 80049e6:	f001 ff1d 	bl	8006824 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 80049ea:	f7fc fd57 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <FuncAuxMenuExitHandler+0x24>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80049f4:	2303      	movs	r3, #3
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20001e5b 	.word	0x20001e5b
 8004a00:	20001e57 	.word	0x20001e57

08004a04 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <GainMenu_getStatus+0x14>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20001e5c 	.word	0x20001e5c

08004a1c <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a20:	f7fc fd3c 	bl	800149c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <GainMainMenuEntryHandler+0x1c>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004a2a:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <GainMainMenuEntryHandler+0x20>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004a30:	2306      	movs	r3, #6
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20001e5c 	.word	0x20001e5c
 8004a3c:	20001e57 	.word	0x20001e57

08004a40 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <GainMainMenuExitHandler+0x1c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004a4a:	f7fc fd27 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <GainMainMenuExitHandler+0x20>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004a54:	2301      	movs	r3, #1
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20001e5c 	.word	0x20001e5c
 8004a60:	20001e57 	.word	0x20001e57

08004a64 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a6a:	f7fc fd17 	bl	800149c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004a6e:	f001 f82b 	bl	8005ac8 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004a72:	f001 fee3 	bl	800683c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <GainSignalMenuEntryHandler+0x54>)
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f001 fbb1 	bl	80061e4 <SM_GetOutputChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a88:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <GainSignalMenuEntryHandler+0x58>)
 8004a92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <GainSignalMenuEntryHandler+0x58>)
 8004a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aa0:	e002      	b.n	8004aa8 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004aa2:	4807      	ldr	r0, [pc, #28]	; (8004ac0 <GainSignalMenuEntryHandler+0x5c>)
 8004aa4:	f7fc fd40 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <GainSignalMenuEntryHandler+0x60>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004aae:	2307      	movs	r3, #7
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20001e5c 	.word	0x20001e5c
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	080146cc 	.word	0x080146cc
 8004ac4:	20001e57 	.word	0x20001e57

08004ac8 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f001 fb88 	bl	80061e4 <SM_GetOutputChannel>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004ada:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d012      	beq.n	8004b08 <GainSignalMenuInputHandler+0x40>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d107      	bne.n	8004afa <GainSignalMenuInputHandler+0x32>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8004aea:	2001      	movs	r0, #1
 8004aec:	f001 fdf6 	bl	80066dc <SM_GetEncoderValue>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fff4 	bl	8005ae0 <GO_MapEncoderPositionToSignalOutput>
 8004af8:	e006      	b.n	8004b08 <GainSignalMenuInputHandler+0x40>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004afa:	2000      	movs	r0, #0
 8004afc:	f001 fdee 	bl	80066dc <SM_GetEncoderValue>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f002 f80c 	bl	8006b20 <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evYellowBtn;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <GainSignalMenuInputHandler+0x50>)
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004b0e:	2307      	movs	r3, #7
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20001e57 	.word	0x20001e57

08004b1c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <GainSignalMenuExitHandler+0x1c>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b26:	f7fc fcb9 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <GainSignalMenuExitHandler+0x20>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b30:	2306      	movs	r3, #6
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20001e5c 	.word	0x20001e5c
 8004b3c:	20001e57 	.word	0x20001e57

08004b40 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b46:	f7fc fca9 	bl	800149c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004b4a:	f001 fe77 	bl	800683c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <GainAuxMenuEntryHandler+0x50>)
 8004b50:	2203      	movs	r2, #3
 8004b52:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004b54:	2001      	movs	r0, #1
 8004b56:	f001 fb45 	bl	80061e4 <SM_GetOutputChannel>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004b60:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <GainAuxMenuEntryHandler+0x54>)
 8004b6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <GainAuxMenuEntryHandler+0x54>)
 8004b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b76:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b78:	e002      	b.n	8004b80 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004b7a:	4807      	ldr	r0, [pc, #28]	; (8004b98 <GainAuxMenuEntryHandler+0x58>)
 8004b7c:	f7fc fcd4 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <GainAuxMenuEntryHandler+0x5c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004b86:	2308      	movs	r3, #8
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20001e5c 	.word	0x20001e5c
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	080146cc 	.word	0x080146cc
 8004b9c:	20001e57 	.word	0x20001e57

08004ba0 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f001 fd99 	bl	80066dc <SM_GetEncoderValue>
 8004baa:	4603      	mov	r3, r0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fff1 	bl	8006b94 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004bb2:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <GainAuxMenuInputHandler+0x20>)
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004bb8:	2308      	movs	r3, #8
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20001e57 	.word	0x20001e57

08004bc4 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <GainAuxMenuExitHandler+0x1c>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004bce:	f7fc fc65 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <GainAuxMenuExitHandler+0x20>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004bd8:	2306      	movs	r3, #6
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20001e5c 	.word	0x20001e5c
 8004be4:	20001e57 	.word	0x20001e57

08004be8 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <ToplevelMenu_getStatus+0x14>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000000 	.word	0x20000000

08004c00 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004c0a:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <ToplevelMenu_setStatus+0x1c>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	7013      	strb	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000000 	.word	0x20000000

08004c20 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c24:	f7fc fc3a 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <ToplevelOutputMenuEntryHandler+0x1c>)
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004c2e:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <ToplevelOutputMenuEntryHandler+0x20>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004c34:	2301      	movs	r3, #1
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	20001e57 	.word	0x20001e57

08004c44 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c48:	f7fc fc28 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <ToplevelOutputMenuExitHandler+0x1c>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <ToplevelOutputMenuExitHandler+0x20>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000000 	.word	0x20000000
 8004c64:	20001e57 	.word	0x20001e57

08004c68 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c6c:	f7fc fc16 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <ToplevelInputMenuEntryHandler+0x1c>)
 8004c72:	2203      	movs	r2, #3
 8004c74:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004c76:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <ToplevelInputMenuEntryHandler+0x20>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004c7c:	2302      	movs	r3, #2
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000000 	.word	0x20000000
 8004c88:	20001e57 	.word	0x20001e57

08004c8c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d002      	beq.n	8004ca2 <ToplevelInputMenuInputHandler+0x16>
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d003      	beq.n	8004ca8 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8004ca0:	e00b      	b.n	8004cba <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8004ca2:	f001 f809 	bl	8005cb8 <IT_ArbitrateInputTrigger>
				break;
 8004ca6:	e008      	b.n	8004cba <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8004ca8:	f001 f8fc 	bl	8005ea4 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004cac:	2001      	movs	r0, #1
 8004cae:	f7ff ffed 	bl	8004c8c <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f7ff ffea 	bl	8004c8c <ToplevelInputMenuInputHandler>
				break;
 8004cb8:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 8004cba:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <ToplevelInputMenuInputHandler+0x40>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004cc0:	2302      	movs	r3, #2
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20001e57 	.word	0x20001e57

08004cd0 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004cd4:	f7fc fbe2 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <ToplevelInputMenuExitHandler+0x1c>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <ToplevelInputMenuExitHandler+0x20>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	20001e57 	.word	0x20001e57

08004cf4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004cfc:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4013      	ands	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d101      	bne.n	8004d0e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40010400 	.word	0x40010400

08004d20 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <IM_Init+0x1c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <IM_Init+0x1c>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40014400 	.word	0x40014400

08004d40 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004d44:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d11f      	bne.n	8004d90 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x50>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d5e:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004d60:	edd3 7a00 	vldr	s15, [r3]
 8004d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6c:	db0a      	blt.n	8004d84 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x44>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004d6e:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004d70:	edd3 7a00 	vldr	s15, [r3]
 8004d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7c:	ee17 2a90 	vmov	r2, s15
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004d82:	e02f      	b.n	8004de4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			OUTPUT_TIMER->ARR++;
 8004d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d8e:	e029      	b.n	8004de4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x66>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004da4:	e01e      	b.n	8004de4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	ee07 3a90 	vmov	s15, r3
 8004db0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004db6:	edd3 7a00 	vldr	s15, [r3]
 8004dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	d80a      	bhi.n	8004dda <IM_SWEEP_UPDATE_TIM_IRQHandler+0x9a>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004dc6:	edd3 7a00 	vldr	s15, [r3]
 8004dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd2:	ee17 2a90 	vmov	r2, s15
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dd8:	e004      	b.n	8004de4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
				OUTPUT_TIMER->ARR--;
 8004dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	3a01      	subs	r2, #1
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	20000124 	.word	0x20000124
 8004df8:	20000120 	.word	0x20000120

08004dfc <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <IM_BTN1_EXTI14_Handler+0x44>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <IM_BTN1_EXTI14_Handler+0x48>)
 8004e0c:	8812      	ldrh	r2, [r2, #0]
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e14:	dd0c      	ble.n	8004e30 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004e16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e1a:	f7ff ff6b 	bl	8004cf4 <LL_EXTI_IsActiveFlag_0_31>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004e24:	2001      	movs	r0, #1
 8004e26:	f7ff fadb 	bl	80043e0 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004e2a:	4807      	ldr	r0, [pc, #28]	; (8004e48 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004e2c:	f00b fe08 	bl	8010a40 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <IM_BTN1_EXTI14_Handler+0x48>)
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	8013      	strh	r3, [r2, #0]


}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40014400 	.word	0x40014400
 8004e44:	20001e5e 	.word	0x20001e5e
 8004e48:	08014704 	.word	0x08014704

08004e4c <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <IM_BTN2_EXTI15_Handler+0x44>)
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <IM_BTN2_EXTI15_Handler+0x48>)
 8004e5c:	8812      	ldrh	r2, [r2, #0]
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e64:	dd0c      	ble.n	8004e80 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004e66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e6a:	f7ff ff43 	bl	8004cf4 <LL_EXTI_IsActiveFlag_0_31>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004e74:	2003      	movs	r0, #3
 8004e76:	f7ff fab3 	bl	80043e0 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004e7a:	4807      	ldr	r0, [pc, #28]	; (8004e98 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004e7c:	f00b fde0 	bl	8010a40 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <IM_BTN2_EXTI15_Handler+0x48>)
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	8013      	strh	r3, [r2, #0]


}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40014400 	.word	0x40014400
 8004e94:	20001e60 	.word	0x20001e60
 8004e98:	0801471c 	.word	0x0801471c

08004e9c <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <IM_BTN3_EXTI0_Handler+0x40>)
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <IM_BTN3_EXTI0_Handler+0x44>)
 8004eac:	8812      	ldrh	r2, [r2, #0]
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb4:	dd0b      	ble.n	8004ece <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f7ff ff1c 	bl	8004cf4 <LL_EXTI_IsActiveFlag_0_31>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004ec2:	2004      	movs	r0, #4
 8004ec4:	f7ff fa8c 	bl	80043e0 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004ec8:	4806      	ldr	r0, [pc, #24]	; (8004ee4 <IM_BTN3_EXTI0_Handler+0x48>)
 8004eca:	f00b fdb9 	bl	8010a40 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <IM_BTN3_EXTI0_Handler+0x44>)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	8013      	strh	r3, [r2, #0]


}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	20001e62 	.word	0x20001e62
 8004ee4:	08014738 	.word	0x08014738

08004ee8 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <IM_BTN4_EXTI1_Handler+0x40>)
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <IM_BTN4_EXTI1_Handler+0x44>)
 8004ef8:	8812      	ldrh	r2, [r2, #0]
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f00:	dd0b      	ble.n	8004f1a <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004f02:	2002      	movs	r0, #2
 8004f04:	f7ff fef6 	bl	8004cf4 <LL_EXTI_IsActiveFlag_0_31>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004f0e:	2002      	movs	r0, #2
 8004f10:	f7ff fa66 	bl	80043e0 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004f14:	4806      	ldr	r0, [pc, #24]	; (8004f30 <IM_BTN4_EXTI1_Handler+0x48>)
 8004f16:	f00b fd93 	bl	8010a40 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <IM_BTN4_EXTI1_Handler+0x44>)
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	8013      	strh	r3, [r2, #0]


}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	20001e64 	.word	0x20001e64
 8004f30:	08014750 	.word	0x08014750

08004f34 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <IM_ENC_EXTI2_Handler+0x40>)
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <IM_ENC_EXTI2_Handler+0x44>)
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f4c:	dd0b      	ble.n	8004f66 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004f4e:	2004      	movs	r0, #4
 8004f50:	f7ff fed0 	bl	8004cf4 <LL_EXTI_IsActiveFlag_0_31>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004f5a:	2006      	movs	r0, #6
 8004f5c:	f7ff fa40 	bl	80043e0 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004f60:	4806      	ldr	r0, [pc, #24]	; (8004f7c <IM_ENC_EXTI2_Handler+0x48>)
 8004f62:	f00b fd6d 	bl	8010a40 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <IM_ENC_EXTI2_Handler+0x44>)
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	8013      	strh	r3, [r2, #0]


}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40014400 	.word	0x40014400
 8004f78:	20001e66 	.word	0x20001e66
 8004f7c:	08014768 	.word	0x08014768

08004f80 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004f86:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <IM_ENC_DIRF_Handler+0x4c>)
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f92:	d117      	bne.n	8004fc4 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <IM_ENC_DIRF_Handler+0x50>)
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8004f9a:	88fb      	ldrh	r3, [r7, #6]
 8004f9c:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <IM_ENC_DIRF_Handler+0x54>)
 8004f9e:	8812      	ldrh	r2, [r2, #0]
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dd0b      	ble.n	8004fbe <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8004fa6:	2005      	movs	r0, #5
 8004fa8:	f7ff fa1a 	bl	80043e0 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8004fac:	480a      	ldr	r0, [pc, #40]	; (8004fd8 <IM_ENC_DIRF_Handler+0x58>)
 8004fae:	f00b fd47 	bl	8010a40 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <IM_ENC_DIRF_Handler+0x4c>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	4a05      	ldr	r2, [pc, #20]	; (8004fcc <IM_ENC_DIRF_Handler+0x4c>)
 8004fb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fbc:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 8004fbe:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <IM_ENC_DIRF_Handler+0x54>)
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	8013      	strh	r3, [r2, #0]


	}


}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	20001e68 	.word	0x20001e68
 8004fd8:	08014784 	.word	0x08014784

08004fdc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <BO_GetBiasPolarity+0x14>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000001 	.word	0x20000001

08004ff4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <BO_GetDcBiasEncoderValue+0x14>)
 8004ffa:	881b      	ldrh	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000002 	.word	0x20000002

0800500c <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005016:	2000      	movs	r0, #0
 8005018:	f001 fb60 	bl	80066dc <SM_GetEncoderValue>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005022:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800502a:	d214      	bcs.n	8005056 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005040:	2200      	movs	r2, #0
 8005042:	2110      	movs	r1, #16
 8005044:	4814      	ldr	r0, [pc, #80]	; (8005098 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005046:	f005 fe49 	bl	800acdc <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800504a:	2201      	movs	r2, #1
 800504c:	2108      	movs	r1, #8
 800504e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005052:	f006 fe05 	bl	800bc60 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800505c:	d314      	bcc.n	8005088 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005072:	2200      	movs	r2, #0
 8005074:	2110      	movs	r1, #16
 8005076:	4808      	ldr	r0, [pc, #32]	; (8005098 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005078:	f005 fe30 	bl	800acdc <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800507c:	2200      	movs	r2, #0
 800507e:	2108      	movs	r1, #8
 8005080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005084:	f006 fdec 	bl	800bc60 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000002 	.word	0x20000002
 8005094:	20000001 	.word	0x20000001
 8005098:	20002a00 	.word	0x20002a00

0800509c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80050a0:	2110      	movs	r1, #16
 80050a2:	4803      	ldr	r0, [pc, #12]	; (80050b0 <BO_GetOutputBias+0x14>)
 80050a4:	f005 fe60 	bl	800ad68 <HAL_DAC_GetValue>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20002a00 	.word	0x20002a00

080050b4 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	e06b      	b.n	8005198 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80050c0:	493a      	ldr	r1, [pc, #232]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	3308      	adds	r3, #8
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d129      	bne.n	800512a <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 80050d6:	4935      	ldr	r1, [pc, #212]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	3304      	adds	r3, #4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a31      	ldr	r2, [pc, #196]	; (80051b0 <FreqO_InitFreqProfiles+0xfc>)
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050f6:	492d      	ldr	r1, [pc, #180]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	3310      	adds	r3, #16
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005112:	ee17 0a90 	vmov	r0, s15
 8005116:	4925      	ldr	r1, [pc, #148]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	330c      	adds	r3, #12
 8005126:	6018      	str	r0, [r3, #0]
 8005128:	e033      	b.n	8005192 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800512a:	4920      	ldr	r1, [pc, #128]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3304      	adds	r3, #4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <FreqO_InitFreqProfiles+0xfc>)
 800513e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005142:	481a      	ldr	r0, [pc, #104]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4403      	add	r3, r0
 8005150:	3308      	adds	r3, #8
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fbb1 f3f3 	udiv	r3, r1, r3
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005160:	4912      	ldr	r1, [pc, #72]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3310      	adds	r3, #16
 8005170:	edd3 7a00 	vldr	s15, [r3]
 8005174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517c:	ee17 0a90 	vmov	r0, s15
 8005180:	490a      	ldr	r1, [pc, #40]	; (80051ac <FreqO_InitFreqProfiles+0xf8>)
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	330c      	adds	r3, #12
 8005190:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3301      	adds	r3, #1
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b0d      	cmp	r3, #13
 800519c:	dd90      	ble.n	80050c0 <FreqO_InitFreqProfiles+0xc>
	}
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000004 	.word	0x20000004
 80051b0:	00155cc0 	.word	0x00155cc0

080051b4 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <FreqO_MapEncoderPositionCoarse+0x78>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d910      	bls.n	80051f2 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b0d      	cmp	r3, #13
 80051da:	d901      	bls.n	80051e0 <FreqO_MapEncoderPositionCoarse+0x2c>
 80051dc:	230d      	movs	r3, #13
 80051de:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f8f3 	bl	80053cc <FreqO_GetProfileByIndex>
 80051e6:	4603      	mov	r3, r0
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f848 	bl	8005280 <FreqO_ApplyProfile>
 80051f0:	e014      	b.n	800521c <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 80051f2:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d20f      	bcs.n	800521c <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3b01      	subs	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b0d      	cmp	r3, #13
 8005206:	d901      	bls.n	800520c <FreqO_MapEncoderPositionCoarse+0x58>
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f8dd 	bl	80053cc <FreqO_GetProfileByIndex>
 8005212:	4603      	mov	r3, r0
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f832 	bl	8005280 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 800521c:	4a04      	ldr	r2, [pc, #16]	; (8005230 <FreqO_MapEncoderPositionCoarse+0x7c>)
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	8013      	strh	r3, [r2, #0]

}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	2000011c 	.word	0x2000011c
 8005230:	20001e6a 	.word	0x20001e6a

08005234 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <FreqO_MapEncoderPositionFine+0x48>)
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	429a      	cmp	r2, r3
 8005246:	d905      	bls.n	8005254 <FreqO_MapEncoderPositionFine+0x20>
	{
		OUTPUT_TIMER->ARR++;
 8005248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	3201      	adds	r2, #1
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c
 8005252:	e009      	b.n	8005268 <FreqO_MapEncoderPositionFine+0x34>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <FreqO_MapEncoderPositionFine+0x48>)
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	429a      	cmp	r2, r3
 800525c:	d204      	bcs.n	8005268 <FreqO_MapEncoderPositionFine+0x34>
	{
		OUTPUT_TIMER->ARR--;
 800525e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	3a01      	subs	r2, #1
 8005266:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005268:	4a04      	ldr	r2, [pc, #16]	; (800527c <FreqO_MapEncoderPositionFine+0x48>)
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	8013      	strh	r3, [r2, #0]

}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20001e6a 	.word	0x20001e6a

08005280 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f871 	bl	8005370 <FreqO_FindFPresetObject>
 800528e:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d026      	beq.n	80052e4 <FreqO_ApplyProfile+0x64>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80052a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80052aa:	2001      	movs	r0, #1
 80052ac:	f000 ff9a 	bl	80061e4 <SM_GetOutputChannel>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	2b06      	cmp	r3, #6
 80052be:	d10d      	bne.n	80052dc <FreqO_ApplyProfile+0x5c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <FreqO_ApplyProfile+0x74>)
 80052c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <FreqO_ApplyProfile+0x74>)
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <FreqO_ApplyProfile+0x74>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <FreqO_ApplyProfile+0x74>)
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 80052dc:	4a06      	ldr	r2, [pc, #24]	; (80052f8 <FreqO_ApplyProfile+0x78>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 80052e2:	e002      	b.n	80052ea <FreqO_ApplyProfile+0x6a>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 80052e4:	4805      	ldr	r0, [pc, #20]	; (80052fc <FreqO_ApplyProfile+0x7c>)
 80052e6:	f7fc f91f 	bl	8001528 <DM_SetErrorDebugMsg>
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40000400 	.word	0x40000400
 80052f8:	2000011c 	.word	0x2000011c
 80052fc:	0801479c 	.word	0x0801479c

08005300 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 8005306:	2000      	movs	r0, #0
 8005308:	f001 f9e8 	bl	80066dc <SM_GetEncoderValue>
 800530c:	4603      	mov	r3, r0
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ff90 	bl	8005234 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005314:	2001      	movs	r0, #1
 8005316:	f000 ff65 	bl	80061e4 <SM_GetOutputChannel>
 800531a:	4603      	mov	r3, r0
 800531c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	2b06      	cmp	r3, #6
 8005328:	d110      	bne.n	800534c <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <FreqO_AdjustFreq+0x54>)
 800532c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005332:	2000      	movs	r0, #0
 8005334:	f001 f9d2 	bl	80066dc <SM_GetEncoderValue>
 8005338:	4603      	mov	r3, r0
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	4b05      	ldr	r3, [pc, #20]	; (8005354 <FreqO_AdjustFreq+0x54>)
 8005340:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005342:	4b04      	ldr	r3, [pc, #16]	; (8005354 <FreqO_AdjustFreq+0x54>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a03      	ldr	r2, [pc, #12]	; (8005354 <FreqO_AdjustFreq+0x54>)
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40000400 	.word	0x40000400

08005358 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
	return freq_profile;
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <FreqO_GetFPresetObject+0x14>)
 800535e:	681b      	ldr	r3, [r3, #0]
}
 8005360:	4618      	mov	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	2000011c 	.word	0x2000011c

08005370 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	e016      	b.n	80053ac <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800537e:	4911      	ldr	r1, [pc, #68]	; (80053c4 <FreqO_FindFPresetObject+0x54>)
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3304      	adds	r3, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d107      	bne.n	80053a6 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <FreqO_FindFPresetObject+0x54>)
 80053a2:	4413      	add	r3, r2
 80053a4:	e009      	b.n	80053ba <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b0d      	cmp	r3, #13
 80053b0:	dde5      	ble.n	800537e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80053b2:	4805      	ldr	r0, [pc, #20]	; (80053c8 <FreqO_FindFPresetObject+0x58>)
 80053b4:	f7fc f8b8 	bl	8001528 <DM_SetErrorDebugMsg>
	return 0;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000004 	.word	0x20000004
 80053c8:	080147c4 	.word	0x080147c4

080053cc <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <FreqO_GetProfileByIndex+0x24>)
 80053e0:	4413      	add	r3, r2
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000004 	.word	0x20000004

080053f4 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <FreqO_ResetLastEncoderValue+0x14>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	801a      	strh	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20001e6a 	.word	0x20001e6a

0800540c <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <FS_SetSweepModeDown+0x48>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0f      	ldr	r2, [pc, #60]	; (8005454 <FS_SetSweepModeDown+0x48>)
 8005416:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800541a:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <FS_SetSweepModeDown+0x48>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0c      	ldr	r2, [pc, #48]	; (8005454 <FS_SetSweepModeDown+0x48>)
 8005422:	f043 0310 	orr.w	r3, r3, #16
 8005426:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <FS_SetSweepModeDown+0x4c>)
 8005438:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <FS_SetSweepModeDown+0x50>)
 800543e:	4a08      	ldr	r2, [pc, #32]	; (8005460 <FS_SetSweepModeDown+0x54>)
 8005440:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <FS_SetSweepModeDown+0x58>)
 8005444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005448:	625a      	str	r2, [r3, #36]	; 0x24

}
 800544a:	bf00      	nop
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	40000c00 	.word	0x40000c00
 8005458:	20000120 	.word	0x20000120
 800545c:	20000124 	.word	0x20000124
 8005460:	477fff00 	.word	0x477fff00
 8005464:	40012c00 	.word	0x40012c00

08005468 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <FS_SetSweepModeUp+0x40>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <FS_SetSweepModeUp+0x40>)
 8005472:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005476:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <FS_SetSweepModeUp+0x40>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a0a      	ldr	r2, [pc, #40]	; (80054a8 <FS_SetSweepModeUp+0x40>)
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <FS_SetSweepModeUp+0x44>)
 8005494:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <FS_SetSweepModeUp+0x48>)
 800549a:	4a06      	ldr	r2, [pc, #24]	; (80054b4 <FS_SetSweepModeUp+0x4c>)
 800549c:	601a      	str	r2, [r3, #0]


}
 800549e:	bf00      	nop
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	20000124 	.word	0x20000124
 80054b0:	20000120 	.word	0x20000120
 80054b4:	41500000 	.word	0x41500000

080054b8 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d03a      	beq.n	800553e <FS_SetEncoderControlMode+0x86>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80054c8:	4a25      	ldr	r2, [pc, #148]	; (8005560 <FS_SetEncoderControlMode+0xa8>)
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80054ce:	4b25      	ldr	r3, [pc, #148]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 80054d0:	220d      	movs	r2, #13
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 80054d4:	4b23      	ldr	r3, [pc, #140]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 80054d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054da:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 80054dc:	4b22      	ldr	r3, [pc, #136]	; (8005568 <FS_SetEncoderControlMode+0xb0>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <FS_SetEncoderControlMode+0x32>
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d015      	beq.n	8005514 <FS_SetEncoderControlMode+0x5c>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80054e8:	e033      	b.n	8005552 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80054ea:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054f6:	4b1d      	ldr	r3, [pc, #116]	; (800556c <FS_SetEncoderControlMode+0xb4>)
 80054f8:	edd3 7a00 	vldr	s15, [r3]
 80054fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	dc00      	bgt.n	8005508 <FS_SetEncoderControlMode+0x50>
				break;
 8005506:	e024      	b.n	8005552 <FS_SetEncoderControlMode+0x9a>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005512:	e01e      	b.n	8005552 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005520:	4b13      	ldr	r3, [pc, #76]	; (8005570 <FS_SetEncoderControlMode+0xb8>)
 8005522:	edd3 7a00 	vldr	s15, [r3]
 8005526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800552a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552e:	d400      	bmi.n	8005532 <FS_SetEncoderControlMode+0x7a>
				break;
 8005530:	e00f      	b.n	8005552 <FS_SetEncoderControlMode+0x9a>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005536:	4a0b      	ldr	r2, [pc, #44]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 800553c:	e009      	b.n	8005552 <FS_SetEncoderControlMode+0x9a>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800553e:	4a08      	ldr	r2, [pc, #32]	; (8005560 <FS_SetEncoderControlMode+0xa8>)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 8005546:	2201      	movs	r2, #1
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <FS_SetEncoderControlMode+0xac>)
 800554c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005550:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	20001e59 	.word	0x20001e59
 8005564:	40012c00 	.word	0x40012c00
 8005568:	20001e58 	.word	0x20001e58
 800556c:	20000124 	.word	0x20000124
 8005570:	20000120 	.word	0x20000120
 8005574:	00000000 	.word	0x00000000

08005578 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d122      	bne.n	80055ce <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005588:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa ffe1 	bl	8000554 <__aeabi_ui2d>
 8005592:	4603      	mov	r3, r0
 8005594:	460c      	mov	r4, r1
 8005596:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80055d8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 800559a:	ec44 3b10 	vmov	d0, r3, r4
 800559e:	f00d fb67 	bl	8012c70 <pow>
 80055a2:	ec51 0b10 	vmov	r0, r1, d0
 80055a6:	a30e      	add	r3, pc, #56	; (adr r3, 80055e0 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f7fa fe96 	bl	80002dc <__adddf3>
 80055b0:	4603      	mov	r3, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	4618      	mov	r0, r3
 80055b6:	4621      	mov	r1, r4
 80055b8:	f7fb fb1e 	bl	8000bf8 <__aeabi_d2uiz>
 80055bc:	4603      	mov	r3, r0
 80055be:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c6:	d002      	beq.n	80055ce <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	00000000 	.word	0x00000000
 80055dc:	40080000 	.word	0x40080000
 80055e0:	00000000 	.word	0x00000000
 80055e4:	40d06800 	.word	0x40d06800
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40000c00 	.word	0x40000c00

080055f0 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80055fc:	4b11      	ldr	r3, [pc, #68]	; (8005644 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005608:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005648 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 800560c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005610:	e011      	b.n	8005636 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800561e:	4b09      	ldr	r3, [pc, #36]	; (8005644 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800562e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005648 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005632:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005636:	eeb0 0a67 	vmov.f32	s0, s15
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40000c00 	.word	0x40000c00
 8005648:	4d2037a0 	.word	0x4d2037a0

0800564c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <FuncO_ResetLastEncoderValue+0x14>)
 8005652:	2200      	movs	r2, #0
 8005654:	801a      	strh	r2, [r3, #0]
}
 8005656:	bf00      	nop
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20001e96 	.word	0x20001e96

08005664 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800566e:	2000      	movs	r0, #0
 8005670:	f000 fdb8 	bl	80061e4 <SM_GetOutputChannel>
 8005674:	4603      	mov	r3, r0
 8005676:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	429a      	cmp	r2, r3
 8005686:	d90c      	bls.n	80056a2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	3301      	adds	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b05      	cmp	r3, #5
 8005692:	d901      	bls.n	8005698 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005694:	2305      	movs	r3, #5
 8005696:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f856 	bl	800574c <FuncO_ApplyProfileToSignal>
 80056a0:	e010      	b.n	80056c4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d20b      	bcs.n	80056c4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d901      	bls.n	80056bc <FuncO_MapEncoderPositionToSignalOutput+0x58>
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f844 	bl	800574c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 80056c4:	4a03      	ldr	r2, [pc, #12]	; (80056d4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	8013      	strh	r3, [r2, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20001e96 	.word	0x20001e96

080056d8 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80056e2:	2001      	movs	r0, #1
 80056e4:	f000 fd7e 	bl	80061e4 <SM_GetOutputChannel>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d90c      	bls.n	8005716 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	3301      	adds	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b06      	cmp	r3, #6
 8005706:	d901      	bls.n	800570c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005708:	2306      	movs	r3, #6
 800570a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f882 	bl	8005818 <FuncO_ApplyProfileToAux>
 8005714:	e010      	b.n	8005738 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	429a      	cmp	r2, r3
 800571e:	d20b      	bcs.n	8005738 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	3b01      	subs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	2b06      	cmp	r3, #6
 800572a:	d901      	bls.n	8005730 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f870 	bl	8005818 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005738:	4a03      	ldr	r2, [pc, #12]	; (8005748 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	8013      	strh	r3, [r2, #0]
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20001e96 	.word	0x20001e96

0800574c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 800574c:	b590      	push	{r4, r7, lr}
 800574e:	b087      	sub	sp, #28
 8005750:	af02      	add	r7, sp, #8
 8005752:	4603      	mov	r3, r0
 8005754:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005756:	79fc      	ldrb	r4, [r7, #7]
 8005758:	2000      	movs	r0, #0
 800575a:	f000 fd43 	bl	80061e4 <SM_GetOutputChannel>
 800575e:	4601      	mov	r1, r0
 8005760:	00e3      	lsls	r3, r4, #3
 8005762:	4a29      	ldr	r2, [pc, #164]	; (8005808 <FuncO_ApplyProfileToSignal+0xbc>)
 8005764:	4413      	add	r3, r2
 8005766:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 800576a:	4828      	ldr	r0, [pc, #160]	; (800580c <FuncO_ApplyProfileToSignal+0xc0>)
 800576c:	f00b f968 	bl	8010a40 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005770:	79fc      	ldrb	r4, [r7, #7]
 8005772:	2000      	movs	r0, #0
 8005774:	f000 fd36 	bl	80061e4 <SM_GetOutputChannel>
 8005778:	4601      	mov	r1, r0
 800577a:	4a23      	ldr	r2, [pc, #140]	; (8005808 <FuncO_ApplyProfileToSignal+0xbc>)
 800577c:	00e3      	lsls	r3, r4, #3
 800577e:	4413      	add	r3, r2
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005784:	2000      	movs	r0, #0
 8005786:	f000 fd2d 	bl	80061e4 <SM_GetOutputChannel>
 800578a:	4603      	mov	r3, r0
 800578c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	4618      	mov	r0, r3
 8005798:	f001 f85c 	bl	8006854 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800579c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80057ac:	2100      	movs	r1, #0
 80057ae:	4818      	ldr	r0, [pc, #96]	; (8005810 <FuncO_ApplyProfileToSignal+0xc4>)
 80057b0:	f005 fa3e 	bl	800ac30 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80057b4:	2000      	movs	r0, #0
 80057b6:	f000 fd15 	bl	80061e4 <SM_GetOutputChannel>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f103 0208 	add.w	r2, r3, #8
 80057c0:	2300      	movs	r3, #0
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	2378      	movs	r3, #120	; 0x78
 80057c6:	2100      	movs	r1, #0
 80057c8:	4811      	ldr	r0, [pc, #68]	; (8005810 <FuncO_ApplyProfileToSignal+0xc4>)
 80057ca:	f005 f96f 	bl	800aaac <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80057ce:	2100      	movs	r1, #0
 80057d0:	4810      	ldr	r0, [pc, #64]	; (8005814 <FuncO_ApplyProfileToSignal+0xc8>)
 80057d2:	f005 fa2d 	bl	800ac30 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80057d6:	2001      	movs	r0, #1
 80057d8:	f000 fd04 	bl	80061e4 <SM_GetOutputChannel>
 80057dc:	4603      	mov	r3, r0
 80057de:	f103 0208 	add.w	r2, r3, #8
 80057e2:	2300      	movs	r3, #0
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	2378      	movs	r3, #120	; 0x78
 80057e8:	2100      	movs	r1, #0
 80057ea:	480a      	ldr	r0, [pc, #40]	; (8005814 <FuncO_ApplyProfileToSignal+0xc8>)
 80057ec:	f005 f95e 	bl	800aaac <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80057f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6013      	str	r3, [r2, #0]



}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bd90      	pop	{r4, r7, pc}
 8005808:	20000128 	.word	0x20000128
 800580c:	080147f4 	.word	0x080147f4
 8005810:	20002a00 	.word	0x20002a00
 8005814:	200029ec 	.word	0x200029ec

08005818 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b087      	sub	sp, #28
 800581c:	af02      	add	r7, sp, #8
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005822:	79fc      	ldrb	r4, [r7, #7]
 8005824:	2001      	movs	r0, #1
 8005826:	f000 fcdd 	bl	80061e4 <SM_GetOutputChannel>
 800582a:	4601      	mov	r1, r0
 800582c:	00e3      	lsls	r3, r4, #3
 800582e:	4a96      	ldr	r2, [pc, #600]	; (8005a88 <FuncO_ApplyProfileToAux+0x270>)
 8005830:	4413      	add	r3, r2
 8005832:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2b06      	cmp	r3, #6
 800583a:	d10a      	bne.n	8005852 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 800583c:	4893      	ldr	r0, [pc, #588]	; (8005a8c <FuncO_ApplyProfileToAux+0x274>)
 800583e:	f00b f8ff 	bl	8010a40 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005842:	f000 ff37 	bl	80066b4 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005846:	f000 fce3 	bl	8006210 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 800584a:	4b91      	ldr	r3, [pc, #580]	; (8005a90 <FuncO_ApplyProfileToAux+0x278>)
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim2);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005850:	e115      	b.n	8005a7e <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005852:	4b8f      	ldr	r3, [pc, #572]	; (8005a90 <FuncO_ApplyProfileToAux+0x278>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 808e 	beq.w	8005978 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 800585c:	488d      	ldr	r0, [pc, #564]	; (8005a94 <FuncO_ApplyProfileToAux+0x27c>)
 800585e:	f00b f8ef 	bl	8010a40 <puts>
		SM_DisablePwmToAux();
 8005862:	f000 fe11 	bl	8006488 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005866:	f000 fe4b 	bl	8006500 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 800586a:	488b      	ldr	r0, [pc, #556]	; (8005a98 <FuncO_ApplyProfileToAux+0x280>)
 800586c:	f00b f8e8 	bl	8010a40 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005870:	79fc      	ldrb	r4, [r7, #7]
 8005872:	2001      	movs	r0, #1
 8005874:	f000 fcb6 	bl	80061e4 <SM_GetOutputChannel>
 8005878:	4601      	mov	r1, r0
 800587a:	4a83      	ldr	r2, [pc, #524]	; (8005a88 <FuncO_ApplyProfileToAux+0x270>)
 800587c:	00e3      	lsls	r3, r4, #3
 800587e:	4413      	add	r3, r2
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005884:	4884      	ldr	r0, [pc, #528]	; (8005a98 <FuncO_ApplyProfileToAux+0x280>)
 8005886:	f00b f8db 	bl	8010a40 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800588a:	2001      	movs	r0, #1
 800588c:	f000 fcaa 	bl	80061e4 <SM_GetOutputChannel>
 8005890:	4603      	mov	r3, r0
 8005892:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 800589a:	4880      	ldr	r0, [pc, #512]	; (8005a9c <FuncO_ApplyProfileToAux+0x284>)
 800589c:	f00b f85c 	bl	8010958 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80058a0:	7b7b      	ldrb	r3, [r7, #13]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f804 	bl	80068b0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80058a8:	487d      	ldr	r0, [pc, #500]	; (8005aa0 <FuncO_ApplyProfileToAux+0x288>)
 80058aa:	f00b f8c9 	bl	8010a40 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 80058ae:	487d      	ldr	r0, [pc, #500]	; (8005aa4 <FuncO_ApplyProfileToAux+0x28c>)
 80058b0:	f007 fafe 	bl	800ceb0 <HAL_TIM_Base_Stop>
 80058b4:	4603      	mov	r3, r0
 80058b6:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	4619      	mov	r1, r3
 80058bc:	487a      	ldr	r0, [pc, #488]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 80058be:	f00b f84b 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80058c2:	487a      	ldr	r0, [pc, #488]	; (8005aac <FuncO_ApplyProfileToAux+0x294>)
 80058c4:	f00b f8bc 	bl	8010a40 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80058c8:	2100      	movs	r1, #0
 80058ca:	4879      	ldr	r0, [pc, #484]	; (8005ab0 <FuncO_ApplyProfileToAux+0x298>)
 80058cc:	f005 f9b0 	bl	800ac30 <HAL_DAC_Stop_DMA>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	4619      	mov	r1, r3
 80058d8:	4873      	ldr	r0, [pc, #460]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 80058da:	f00b f83d 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80058de:	4875      	ldr	r0, [pc, #468]	; (8005ab4 <FuncO_ApplyProfileToAux+0x29c>)
 80058e0:	f00b f8ae 	bl	8010a40 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80058e4:	2001      	movs	r0, #1
 80058e6:	f000 fc7d 	bl	80061e4 <SM_GetOutputChannel>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f103 0208 	add.w	r2, r3, #8
 80058f0:	2300      	movs	r3, #0
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	2378      	movs	r3, #120	; 0x78
 80058f6:	2100      	movs	r1, #0
 80058f8:	486d      	ldr	r0, [pc, #436]	; (8005ab0 <FuncO_ApplyProfileToAux+0x298>)
 80058fa:	f005 f8d7 	bl	800aaac <HAL_DAC_Start_DMA>
 80058fe:	4603      	mov	r3, r0
 8005900:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	4619      	mov	r1, r3
 8005906:	4868      	ldr	r0, [pc, #416]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 8005908:	f00b f826 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 800590c:	486a      	ldr	r0, [pc, #424]	; (8005ab8 <FuncO_ApplyProfileToAux+0x2a0>)
 800590e:	f00b f897 	bl	8010a40 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005912:	2100      	movs	r1, #0
 8005914:	4869      	ldr	r0, [pc, #420]	; (8005abc <FuncO_ApplyProfileToAux+0x2a4>)
 8005916:	f005 f98b 	bl	800ac30 <HAL_DAC_Stop_DMA>
 800591a:	4603      	mov	r3, r0
 800591c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	4619      	mov	r1, r3
 8005922:	4861      	ldr	r0, [pc, #388]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 8005924:	f00b f818 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005928:	4865      	ldr	r0, [pc, #404]	; (8005ac0 <FuncO_ApplyProfileToAux+0x2a8>)
 800592a:	f00b f889 	bl	8010a40 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800592e:	2000      	movs	r0, #0
 8005930:	f000 fc58 	bl	80061e4 <SM_GetOutputChannel>
 8005934:	4603      	mov	r3, r0
 8005936:	f103 0208 	add.w	r2, r3, #8
 800593a:	2300      	movs	r3, #0
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2378      	movs	r3, #120	; 0x78
 8005940:	2100      	movs	r1, #0
 8005942:	485e      	ldr	r0, [pc, #376]	; (8005abc <FuncO_ApplyProfileToAux+0x2a4>)
 8005944:	f005 f8b2 	bl	800aaac <HAL_DAC_Start_DMA>
 8005948:	4603      	mov	r3, r0
 800594a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	4619      	mov	r1, r3
 8005950:	4855      	ldr	r0, [pc, #340]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 8005952:	f00b f801 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005956:	485b      	ldr	r0, [pc, #364]	; (8005ac4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005958:	f00b f872 	bl	8010a40 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 800595c:	4851      	ldr	r0, [pc, #324]	; (8005aa4 <FuncO_ApplyProfileToAux+0x28c>)
 800595e:	f007 fa79 	bl	800ce54 <HAL_TIM_Base_Start>
 8005962:	4603      	mov	r3, r0
 8005964:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	4619      	mov	r1, r3
 800596a:	484f      	ldr	r0, [pc, #316]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 800596c:	f00a fff4 	bl	8010958 <iprintf>
		last_output_mode_was_pwm = 0;
 8005970:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <FuncO_ApplyProfileToAux+0x278>)
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
}
 8005976:	e082      	b.n	8005a7e <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005978:	4847      	ldr	r0, [pc, #284]	; (8005a98 <FuncO_ApplyProfileToAux+0x280>)
 800597a:	f00b f861 	bl	8010a40 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800597e:	79fc      	ldrb	r4, [r7, #7]
 8005980:	2001      	movs	r0, #1
 8005982:	f000 fc2f 	bl	80061e4 <SM_GetOutputChannel>
 8005986:	4601      	mov	r1, r0
 8005988:	4a3f      	ldr	r2, [pc, #252]	; (8005a88 <FuncO_ApplyProfileToAux+0x270>)
 800598a:	00e3      	lsls	r3, r4, #3
 800598c:	4413      	add	r3, r2
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005992:	4841      	ldr	r0, [pc, #260]	; (8005a98 <FuncO_ApplyProfileToAux+0x280>)
 8005994:	f00b f854 	bl	8010a40 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005998:	2001      	movs	r0, #1
 800599a:	f000 fc23 	bl	80061e4 <SM_GetOutputChannel>
 800599e:	4603      	mov	r3, r0
 80059a0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 80059a8:	483c      	ldr	r0, [pc, #240]	; (8005a9c <FuncO_ApplyProfileToAux+0x284>)
 80059aa:	f00a ffd5 	bl	8010958 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 ff7d 	bl	80068b0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80059b6:	483a      	ldr	r0, [pc, #232]	; (8005aa0 <FuncO_ApplyProfileToAux+0x288>)
 80059b8:	f00b f842 	bl	8010a40 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 80059bc:	4839      	ldr	r0, [pc, #228]	; (8005aa4 <FuncO_ApplyProfileToAux+0x28c>)
 80059be:	f007 fa77 	bl	800ceb0 <HAL_TIM_Base_Stop>
 80059c2:	4603      	mov	r3, r0
 80059c4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	4619      	mov	r1, r3
 80059ca:	4837      	ldr	r0, [pc, #220]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 80059cc:	f00a ffc4 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80059d0:	4836      	ldr	r0, [pc, #216]	; (8005aac <FuncO_ApplyProfileToAux+0x294>)
 80059d2:	f00b f835 	bl	8010a40 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80059d6:	2100      	movs	r1, #0
 80059d8:	4835      	ldr	r0, [pc, #212]	; (8005ab0 <FuncO_ApplyProfileToAux+0x298>)
 80059da:	f005 f929 	bl	800ac30 <HAL_DAC_Stop_DMA>
 80059de:	4603      	mov	r3, r0
 80059e0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	4619      	mov	r1, r3
 80059e6:	4830      	ldr	r0, [pc, #192]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 80059e8:	f00a ffb6 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80059ec:	4831      	ldr	r0, [pc, #196]	; (8005ab4 <FuncO_ApplyProfileToAux+0x29c>)
 80059ee:	f00b f827 	bl	8010a40 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80059f2:	2001      	movs	r0, #1
 80059f4:	f000 fbf6 	bl	80061e4 <SM_GetOutputChannel>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f103 0208 	add.w	r2, r3, #8
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	2378      	movs	r3, #120	; 0x78
 8005a04:	2100      	movs	r1, #0
 8005a06:	482a      	ldr	r0, [pc, #168]	; (8005ab0 <FuncO_ApplyProfileToAux+0x298>)
 8005a08:	f005 f850 	bl	800aaac <HAL_DAC_Start_DMA>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	4619      	mov	r1, r3
 8005a14:	4824      	ldr	r0, [pc, #144]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 8005a16:	f00a ff9f 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005a1a:	4827      	ldr	r0, [pc, #156]	; (8005ab8 <FuncO_ApplyProfileToAux+0x2a0>)
 8005a1c:	f00b f810 	bl	8010a40 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005a20:	2100      	movs	r1, #0
 8005a22:	4826      	ldr	r0, [pc, #152]	; (8005abc <FuncO_ApplyProfileToAux+0x2a4>)
 8005a24:	f005 f904 	bl	800ac30 <HAL_DAC_Stop_DMA>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	481d      	ldr	r0, [pc, #116]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 8005a32:	f00a ff91 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005a36:	4822      	ldr	r0, [pc, #136]	; (8005ac0 <FuncO_ApplyProfileToAux+0x2a8>)
 8005a38:	f00b f802 	bl	8010a40 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f000 fbd1 	bl	80061e4 <SM_GetOutputChannel>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f103 0208 	add.w	r2, r3, #8
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2378      	movs	r3, #120	; 0x78
 8005a4e:	2100      	movs	r1, #0
 8005a50:	481a      	ldr	r0, [pc, #104]	; (8005abc <FuncO_ApplyProfileToAux+0x2a4>)
 8005a52:	f005 f82b 	bl	800aaac <HAL_DAC_Start_DMA>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a5a:	7bbb      	ldrb	r3, [r7, #14]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4812      	ldr	r0, [pc, #72]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 8005a60:	f00a ff7a 	bl	8010958 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005a64:	4817      	ldr	r0, [pc, #92]	; (8005ac4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005a66:	f00a ffeb 	bl	8010a40 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005a6a:	480e      	ldr	r0, [pc, #56]	; (8005aa4 <FuncO_ApplyProfileToAux+0x28c>)
 8005a6c:	f007 f9f2 	bl	800ce54 <HAL_TIM_Base_Start>
 8005a70:	4603      	mov	r3, r0
 8005a72:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	4619      	mov	r1, r3
 8005a78:	480b      	ldr	r0, [pc, #44]	; (8005aa8 <FuncO_ApplyProfileToAux+0x290>)
 8005a7a:	f00a ff6d 	bl	8010958 <iprintf>
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd90      	pop	{r4, r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000128 	.word	0x20000128
 8005a8c:	08014808 	.word	0x08014808
 8005a90:	20001e94 	.word	0x20001e94
 8005a94:	08014830 	.word	0x08014830
 8005a98:	0801485c 	.word	0x0801485c
 8005a9c:	08014888 	.word	0x08014888
 8005aa0:	080148a0 	.word	0x080148a0
 8005aa4:	20002c54 	.word	0x20002c54
 8005aa8:	080148d4 	.word	0x080148d4
 8005aac:	080148e0 	.word	0x080148e0
 8005ab0:	200029ec 	.word	0x200029ec
 8005ab4:	08014924 	.word	0x08014924
 8005ab8:	08014968 	.word	0x08014968
 8005abc:	20002a00 	.word	0x20002a00
 8005ac0:	080149ac 	.word	0x080149ac
 8005ac4:	080149f0 	.word	0x080149f0

08005ac8 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <GO_ResetLastEncoderValue+0x14>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	801a      	strh	r2, [r3, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	20001e98 	.word	0x20001e98

08005ae0 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005aea:	2000      	movs	r0, #0
 8005aec:	f000 fb7a 	bl	80061e4 <SM_GetOutputChannel>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005afa:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d90c      	bls.n	8005b1e <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	3301      	adds	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b07      	cmp	r3, #7
 8005b0e:	d901      	bls.n	8005b14 <GO_MapEncoderPositionToSignalOutput+0x34>
 8005b10:	2307      	movs	r3, #7
 8005b12:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f81c 	bl	8005b54 <GO_ApplyPresetToSignal>
 8005b1c:	e010      	b.n	8005b40 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d20b      	bcs.n	8005b40 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b07      	cmp	r3, #7
 8005b32:	d901      	bls.n	8005b38 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f80a 	bl	8005b54 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005b40:	4a03      	ldr	r2, [pc, #12]	; (8005b50 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20001e98 	.word	0x20001e98

08005b54 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005b5e:	79fc      	ldrb	r4, [r7, #7]
 8005b60:	2000      	movs	r0, #0
 8005b62:	f000 fb3f 	bl	80061e4 <SM_GetOutputChannel>
 8005b66:	4601      	mov	r1, r0
 8005b68:	4623      	mov	r3, r4
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4423      	add	r3, r4
 8005b6e:	4a4f      	ldr	r2, [pc, #316]	; (8005cac <GO_ApplyPresetToSignal+0x158>)
 8005b70:	4413      	add	r3, r2
 8005b72:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	2b07      	cmp	r3, #7
 8005b7a:	f200 8093 	bhi.w	8005ca4 <GO_ApplyPresetToSignal+0x150>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <GO_ApplyPresetToSignal+0x30>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005ba5 	.word	0x08005ba5
 8005b88:	08005bc5 	.word	0x08005bc5
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005c05 	.word	0x08005c05
 8005b94:	08005c25 	.word	0x08005c25
 8005b98:	08005c45 	.word	0x08005c45
 8005b9c:	08005c65 	.word	0x08005c65
 8005ba0:	08005c85 	.word	0x08005c85
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4841      	ldr	r0, [pc, #260]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005baa:	f006 f859 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	4840      	ldr	r0, [pc, #256]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005bb4:	f006 f854 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2110      	movs	r1, #16
 8005bbc:	483d      	ldr	r0, [pc, #244]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005bbe:	f006 f84f 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005bc2:	e06f      	b.n	8005ca4 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4839      	ldr	r0, [pc, #228]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005bca:	f006 f849 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2120      	movs	r1, #32
 8005bd2:	4838      	ldr	r0, [pc, #224]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005bd4:	f006 f844 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2110      	movs	r1, #16
 8005bdc:	4835      	ldr	r0, [pc, #212]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005bde:	f006 f83f 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005be2:	e05f      	b.n	8005ca4 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005be4:	2200      	movs	r2, #0
 8005be6:	2101      	movs	r1, #1
 8005be8:	4831      	ldr	r0, [pc, #196]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005bea:	f006 f839 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005bee:	2201      	movs	r2, #1
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	4830      	ldr	r0, [pc, #192]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005bf4:	f006 f834 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2110      	movs	r1, #16
 8005bfc:	482d      	ldr	r0, [pc, #180]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005bfe:	f006 f82f 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005c02:	e04f      	b.n	8005ca4 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005c04:	2201      	movs	r2, #1
 8005c06:	2101      	movs	r1, #1
 8005c08:	4829      	ldr	r0, [pc, #164]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005c0a:	f006 f829 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005c0e:	2201      	movs	r2, #1
 8005c10:	2120      	movs	r1, #32
 8005c12:	4828      	ldr	r0, [pc, #160]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c14:	f006 f824 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	4825      	ldr	r0, [pc, #148]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c1e:	f006 f81f 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005c22:	e03f      	b.n	8005ca4 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005c24:	2200      	movs	r2, #0
 8005c26:	2101      	movs	r1, #1
 8005c28:	4821      	ldr	r0, [pc, #132]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005c2a:	f006 f819 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2120      	movs	r1, #32
 8005c32:	4820      	ldr	r0, [pc, #128]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c34:	f006 f814 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005c38:	2201      	movs	r2, #1
 8005c3a:	2110      	movs	r1, #16
 8005c3c:	481d      	ldr	r0, [pc, #116]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c3e:	f006 f80f 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005c42:	e02f      	b.n	8005ca4 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005c44:	2201      	movs	r2, #1
 8005c46:	2101      	movs	r1, #1
 8005c48:	4819      	ldr	r0, [pc, #100]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005c4a:	f006 f809 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2120      	movs	r1, #32
 8005c52:	4818      	ldr	r0, [pc, #96]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c54:	f006 f804 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2110      	movs	r1, #16
 8005c5c:	4815      	ldr	r0, [pc, #84]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c5e:	f005 ffff 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005c62:	e01f      	b.n	8005ca4 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8005c64:	2200      	movs	r2, #0
 8005c66:	2101      	movs	r1, #1
 8005c68:	4811      	ldr	r0, [pc, #68]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005c6a:	f005 fff9 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2120      	movs	r1, #32
 8005c72:	4810      	ldr	r0, [pc, #64]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c74:	f005 fff4 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2110      	movs	r1, #16
 8005c7c:	480d      	ldr	r0, [pc, #52]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c7e:	f005 ffef 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005c82:	e00f      	b.n	8005ca4 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8005c84:	2201      	movs	r2, #1
 8005c86:	2101      	movs	r1, #1
 8005c88:	4809      	ldr	r0, [pc, #36]	; (8005cb0 <GO_ApplyPresetToSignal+0x15c>)
 8005c8a:	f005 ffe9 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8005c8e:	2201      	movs	r2, #1
 8005c90:	2120      	movs	r1, #32
 8005c92:	4808      	ldr	r0, [pc, #32]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c94:	f005 ffe4 	bl	800bc60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8005c98:	2201      	movs	r2, #1
 8005c9a:	2110      	movs	r1, #16
 8005c9c:	4805      	ldr	r0, [pc, #20]	; (8005cb4 <GO_ApplyPresetToSignal+0x160>)
 8005c9e:	f005 ffdf 	bl	800bc60 <HAL_GPIO_WritePin>
			break;
 8005ca2:	bf00      	nop
	}

}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd90      	pop	{r4, r7, pc}
 8005cac:	20000160 	.word	0x20000160
 8005cb0:	48000400 	.word	0x48000400
 8005cb4:	48000800 	.word	0x48000800

08005cb8 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 8005cbe:	f000 f927 	bl	8005f10 <IT_GetTriggerStatus>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d034      	beq.n	8005d32 <IT_ArbitrateInputTrigger+0x7a>
	{
		// disable timer external clock source
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 8005cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd6:	6093      	str	r3, [r2, #8]
		// disable timer enable "Filtered timer input 1" (tim_ti1fp1)
		OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 8005cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ce2:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8005ce6:	6093      	str	r3, [r2, #8]
		// disable timer reset trigger mode
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 8005ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cf2:	f023 0304 	bic.w	r3, r3, #4
 8005cf6:	6093      	str	r3, [r2, #8]
		// set status to disabled

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 8005cf8:	4863      	ldr	r0, [pc, #396]	; (8005e88 <IT_ArbitrateInputTrigger+0x1d0>)
 8005cfa:	f004 fc6d 	bl	800a5d8 <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 8005cfe:	4863      	ldr	r0, [pc, #396]	; (8005e8c <IT_ArbitrateInputTrigger+0x1d4>)
 8005d00:	f003 fa10 	bl	8009124 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 8005d04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8005d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005d1e:	f023 0308 	bic.w	r3, r3, #8
 8005d22:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 8005d24:	2000      	movs	r0, #0
 8005d26:	f000 f8ff 	bl	8005f28 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f7ff fd0e 	bl	800574c <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 8005d30:	e0a6      	b.n	8005e80 <IT_ArbitrateInputTrigger+0x1c8>
		switch(IT_GetActiveTriggerMode())
 8005d32:	f000 f8d1 	bl	8005ed8 <IT_GetActiveTriggerMode>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d04a      	beq.n	8005dd2 <IT_ArbitrateInputTrigger+0x11a>
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	f000 8087 	beq.w	8005e50 <IT_ArbitrateInputTrigger+0x198>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d000      	beq.n	8005d48 <IT_ArbitrateInputTrigger+0x90>
				break;
 8005d46:	e098      	b.n	8005e7a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d4e:	4850      	ldr	r0, [pc, #320]	; (8005e90 <IT_ArbitrateInputTrigger+0x1d8>)
 8005d50:	f005 ff86 	bl	800bc60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8005d54:	2200      	movs	r2, #0
 8005d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d5a:	484d      	ldr	r0, [pc, #308]	; (8005e90 <IT_ArbitrateInputTrigger+0x1d8>)
 8005d5c:	f005 ff80 	bl	800bc60 <HAL_GPIO_WritePin>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset
 8005d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 8005d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005d7a:	f043 0302 	orr.w	r3, r3, #2
 8005d7e:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8005d80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005d8a:	f023 031e 	bic.w	r3, r3, #30
 8005d8e:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;	// set alt pin function to TIM2 CH1
 8005d90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);		// enable timer external clock source
 8005da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dae:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);		// enable timer "Filtered timer input 1" (tim_ti1fp1)
 8005db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005dba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005dbe:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);		// enable timer reset trigger mode
 8005dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005dca:	f043 0304 	orr.w	r3, r3, #4
 8005dce:	6093      	str	r3, [r2, #8]
				break;
 8005dd0:	e053      	b.n	8005e7a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dd8:	482d      	ldr	r0, [pc, #180]	; (8005e90 <IT_ArbitrateInputTrigger+0x1d8>)
 8005dda:	f005 ff41 	bl	800bc60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 8005dde:	2201      	movs	r2, #1
 8005de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005de4:	482a      	ldr	r0, [pc, #168]	; (8005e90 <IT_ArbitrateInputTrigger+0x1d8>)
 8005de6:	f005 ff3b 	bl	800bc60 <HAL_GPIO_WritePin>
				COMP1->CSR |= COMP_CSR_EN;
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <IT_ArbitrateInputTrigger+0x1dc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a29      	ldr	r2, [pc, #164]	; (8005e94 <IT_ArbitrateInputTrigger+0x1dc>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8005df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005e00:	f023 031e 	bic.w	r3, r3, #30
 8005e04:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 8005e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005e10:	f043 0308 	orr.w	r3, r3, #8
 8005e14:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005e26:	2100      	movs	r1, #0
 8005e28:	481b      	ldr	r0, [pc, #108]	; (8005e98 <IT_ArbitrateInputTrigger+0x1e0>)
 8005e2a:	f004 ff01 	bl	800ac30 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2301      	movs	r3, #1
 8005e34:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <IT_ArbitrateInputTrigger+0x1e4>)
 8005e36:	2100      	movs	r1, #0
 8005e38:	4817      	ldr	r0, [pc, #92]	; (8005e98 <IT_ArbitrateInputTrigger+0x1e0>)
 8005e3a:	f004 fe37 	bl	800aaac <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	6013      	str	r3, [r2, #0]
				break;
 8005e4e:	e014      	b.n	8005e7a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8005e50:	2201      	movs	r2, #1
 8005e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e56:	480e      	ldr	r0, [pc, #56]	; (8005e90 <IT_ArbitrateInputTrigger+0x1d8>)
 8005e58:	f005 ff02 	bl	800bc60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e62:	480b      	ldr	r0, [pc, #44]	; (8005e90 <IT_ArbitrateInputTrigger+0x1d8>)
 8005e64:	f005 fefc 	bl	800bc60 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 8005e68:	22f0      	movs	r2, #240	; 0xf0
 8005e6a:	490d      	ldr	r1, [pc, #52]	; (8005ea0 <IT_ArbitrateInputTrigger+0x1e8>)
 8005e6c:	4807      	ldr	r0, [pc, #28]	; (8005e8c <IT_ArbitrateInputTrigger+0x1d4>)
 8005e6e:	f003 f88b 	bl	8008f88 <HAL_ADC_Start_DMA>
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8005e72:	2000      	movs	r0, #0
 8005e74:	f7ff fc6a 	bl	800574c <FuncO_ApplyProfileToSignal>
				break;
 8005e78:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	f000 f854 	bl	8005f28 <IT_SetTriggerStatus>
}
 8005e80:	bf00      	nop
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200029c8 	.word	0x200029c8
 8005e8c:	200028fc 	.word	0x200028fc
 8005e90:	48000800 	.word	0x48000800
 8005e94:	40010200 	.word	0x40010200
 8005e98:	20002a00 	.word	0x20002a00
 8005e9c:	2000232c 	.word	0x2000232c
 8005ea0:	20001e9c 	.word	0x20001e9c

08005ea4 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 8005ea8:	f000 f816 	bl	8005ed8 <IT_GetActiveTriggerMode>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d008      	beq.n	8005ec4 <IT_CycleInputTriggerMode+0x20>
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d00a      	beq.n	8005ecc <IT_CycleInputTriggerMode+0x28>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d000      	beq.n	8005ebc <IT_CycleInputTriggerMode+0x18>
		case INPUT_TRIGGER_ADC:
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
			break;

		default:
			break;
 8005eba:	e00b      	b.n	8005ed4 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_COMP);
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	f000 f817 	bl	8005ef0 <IT_SetActiveTriggerMode>
			break;
 8005ec2:	e007      	b.n	8005ed4 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_ADC);
 8005ec4:	2002      	movs	r0, #2
 8005ec6:	f000 f813 	bl	8005ef0 <IT_SetActiveTriggerMode>
			break;
 8005eca:	e003      	b.n	8005ed4 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f000 f80f 	bl	8005ef0 <IT_SetActiveTriggerMode>
			break;
 8005ed2:	bf00      	nop
	}
}
 8005ed4:	bf00      	nop
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <IT_GetActiveTriggerMode+0x14>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20000178 	.word	0x20000178

08005ef0 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 8005efa:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <IT_SetActiveTriggerMode+0x1c>)
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	7013      	strb	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	20000178 	.word	0x20000178

08005f10 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <IT_GetTriggerStatus+0x14>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20001e9a 	.word	0x20001e9a

08005f28 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 8005f32:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <IT_SetTriggerStatus+0x1c>)
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	7013      	strb	r3, [r2, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	20001e9a 	.word	0x20001e9a

08005f48 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 8005f50:	4808      	ldr	r0, [pc, #32]	; (8005f74 <HAL_COMP_TriggerCallback+0x2c>)
 8005f52:	f004 fbe7 	bl	800a724 <HAL_COMP_GetOutputLevel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_COMP_TriggerCallback+0x30>)
 8005f5e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 8005f64:	e002      	b.n	8005f6c <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <HAL_COMP_TriggerCallback+0x30>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200029c8 	.word	0x200029c8
 8005f78:	2000232c 	.word	0x2000232c

08005f7c <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	if(trigger_input[0] == 0)
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_ADC_ConvCpltCallback+0x38>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_ADC_ConvCpltCallback+0x1a>
		OUTPUT_TIMER->ARR = 1;
 8005f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f90:	2201      	movs	r2, #1
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f94:	e004      	b.n	8005fa0 <HAL_ADC_ConvCpltCallback+0x24>
	else
		OUTPUT_TIMER->ARR = trigger_input[0];
 8005f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f9a:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <HAL_ADC_ConvCpltCallback+0x38>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	62d3      	str	r3, [r2, #44]	; 0x2c
	printf("%lu\n", trigger_input[0]);
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <HAL_ADC_ConvCpltCallback+0x38>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4804      	ldr	r0, [pc, #16]	; (8005fb8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8005fa8:	f00a fcd6 	bl	8010958 <iprintf>
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20001e9c 	.word	0x20001e9c
 8005fb8:	08014a54 	.word	0x08014a54

08005fbc <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8005fc0:	f7ff f878 	bl	80050b4 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 8005fc4:	f000 f8ae 	bl	8006124 <_InitOutputChannels>
	_InitAmpProfiles();
 8005fc8:	f000 f824 	bl	8006014 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005fcc:	2110      	movs	r1, #16
 8005fce:	4810      	ldr	r0, [pc, #64]	; (8006010 <SM_Init+0x54>)
 8005fd0:	f004 fd19 	bl	800aa06 <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	2108      	movs	r1, #8
 8005fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fdc:	f005 fe40 	bl	800bc60 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f7ff fbab 	bl	800574c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8005ff6:	2059      	movs	r0, #89	; 0x59
 8005ff8:	f000 fc2c 	bl	8006854 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f7ff fc0b 	bl	8005818 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8006002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006006:	f7ff f93b 	bl	8005280 <FreqO_ApplyProfile>

}
 800600a:	bf00      	nop
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20002a00 	.word	0x20002a00

08006014 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b08b      	sub	sp, #44	; 0x2c
 8006018:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800601a:	2300      	movs	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
 800601e:	e033      	b.n	8006088 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006020:	493c      	ldr	r1, [pc, #240]	; (8006114 <_InitAmpProfiles+0x100>)
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3304      	adds	r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8006034:	4b38      	ldr	r3, [pc, #224]	; (8006118 <_InitAmpProfiles+0x104>)
 8006036:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8006038:	4936      	ldr	r1, [pc, #216]	; (8006114 <_InitAmpProfiles+0x100>)
 800603a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603c:	4613      	mov	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	3308      	adds	r3, #8
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8006056:	ed97 7a04 	vldr	s14, [r7, #16]
 800605a:	edd7 7a03 	vldr	s15, [r7, #12]
 800605e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006062:	ed97 7a02 	vldr	s14, [r7, #8]
 8006066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 800606e:	4929      	ldr	r1, [pc, #164]	; (8006114 <_InitAmpProfiles+0x100>)
 8006070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006072:	4613      	mov	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	3310      	adds	r3, #16
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	3301      	adds	r3, #1
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	2b61      	cmp	r3, #97	; 0x61
 800608c:	ddc8      	ble.n	8006020 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
 8006092:	e037      	b.n	8006104 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8006094:	4b21      	ldr	r3, [pc, #132]	; (800611c <_InitAmpProfiles+0x108>)
 8006096:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006098:	491e      	ldr	r1, [pc, #120]	; (8006114 <_InitAmpProfiles+0x100>)
 800609a:	6a3a      	ldr	r2, [r7, #32]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3304      	adds	r3, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80060ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80060b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80060b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80060b8:	ee16 0a90 	vmov	r0, s13
 80060bc:	f7fa fa6c 	bl	8000598 <__aeabi_f2d>
 80060c0:	4603      	mov	r3, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	ec44 3b10 	vmov	d0, r3, r4
 80060c8:	f00c fd52 	bl	8012b70 <log10>
 80060cc:	ec51 0b10 	vmov	r0, r1, d0
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	4b12      	ldr	r3, [pc, #72]	; (8006120 <_InitAmpProfiles+0x10c>)
 80060d6:	f7fa fab7 	bl	8000648 <__aeabi_dmul>
 80060da:	4603      	mov	r3, r0
 80060dc:	460c      	mov	r4, r1
 80060de:	4618      	mov	r0, r3
 80060e0:	4621      	mov	r1, r4
 80060e2:	f7fa fda9 	bl	8000c38 <__aeabi_d2f>
 80060e6:	4603      	mov	r3, r0
 80060e8:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80060ea:	490a      	ldr	r1, [pc, #40]	; (8006114 <_InitAmpProfiles+0x100>)
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	330c      	adds	r3, #12
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	3301      	adds	r3, #1
 8006102:	623b      	str	r3, [r7, #32]
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	2b61      	cmp	r3, #97	; 0x61
 8006108:	ddc4      	ble.n	8006094 <_InitAmpProfiles+0x80>

	}
}
 800610a:	bf00      	nop
 800610c:	372c      	adds	r7, #44	; 0x2c
 800610e:	46bd      	mov	sp, r7
 8006110:	bd90      	pop	{r4, r7, pc}
 8006112:	bf00      	nop
 8006114:	2000017c 	.word	0x2000017c
 8006118:	402ccccd 	.word	0x402ccccd
 800611c:	3a83126f 	.word	0x3a83126f
 8006120:	40340000 	.word	0x40340000

08006124 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 800612a:	4b28      	ldr	r3, [pc, #160]	; (80061cc <_InitOutputChannels+0xa8>)
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <_InitOutputChannels+0xac>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4a25      	ldr	r2, [pc, #148]	; (80061cc <_InitOutputChannels+0xa8>)
 8006136:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006138:	4b24      	ldr	r3, [pc, #144]	; (80061cc <_InitOutputChannels+0xa8>)
 800613a:	4a25      	ldr	r2, [pc, #148]	; (80061d0 <_InitOutputChannels+0xac>)
 800613c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	e00b      	b.n	800615e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006146:	4a23      	ldr	r2, [pc, #140]	; (80061d4 <_InitOutputChannels+0xb0>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800614e:	491f      	ldr	r1, [pc, #124]	; (80061cc <_InitOutputChannels+0xa8>)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3302      	adds	r3, #2
 8006154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3301      	adds	r3, #1
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b77      	cmp	r3, #119	; 0x77
 8006162:	ddf0      	ble.n	8006146 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006164:	4b19      	ldr	r3, [pc, #100]	; (80061cc <_InitOutputChannels+0xa8>)
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <_InitOutputChannels+0xb4>)
 8006168:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800616c:	4b17      	ldr	r3, [pc, #92]	; (80061cc <_InitOutputChannels+0xa8>)
 800616e:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <_InitOutputChannels+0xb8>)
 8006170:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006174:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <_InitOutputChannels+0xbc>)
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <_InitOutputChannels+0xac>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <_InitOutputChannels+0xbc>)
 8006180:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <_InitOutputChannels+0xbc>)
 8006184:	4a12      	ldr	r2, [pc, #72]	; (80061d0 <_InitOutputChannels+0xac>)
 8006186:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800618a:	2300      	movs	r3, #0
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	e00b      	b.n	80061a8 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006190:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <_InitOutputChannels+0xb0>)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006198:	4911      	ldr	r1, [pc, #68]	; (80061e0 <_InitOutputChannels+0xbc>)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	3302      	adds	r3, #2
 800619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b77      	cmp	r3, #119	; 0x77
 80061ac:	ddf0      	ble.n	8006190 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <_InitOutputChannels+0xbc>)
 80061b0:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <_InitOutputChannels+0xb4>)
 80061b2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <_InitOutputChannels+0xbc>)
 80061b8:	4a08      	ldr	r2, [pc, #32]	; (80061dc <_InitOutputChannels+0xb8>)
 80061ba:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20002334 	.word	0x20002334
 80061d0:	20000128 	.word	0x20000128
 80061d4:	200014b8 	.word	0x200014b8
 80061d8:	20000b38 	.word	0x20000b38
 80061dc:	20000175 	.word	0x20000175
 80061e0:	20002528 	.word	0x20002528

080061e4 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <SM_GetOutputChannel+0x24>)
 80061f6:	e000      	b.n	80061fa <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 80061f8:	4b04      	ldr	r3, [pc, #16]	; (800620c <SM_GetOutputChannel+0x28>)
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20002334 	.word	0x20002334
 800620c:	20002528 	.word	0x20002528

08006210 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b096      	sub	sp, #88	; 0x58
 8006214:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006216:	4889      	ldr	r0, [pc, #548]	; (800643c <SM_EnablePwmToAux+0x22c>)
 8006218:	f00a fc12 	bl	8010a40 <puts>

	HAL_StatusTypeDef res = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006222:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	609a      	str	r2, [r3, #8]
 800622e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006230:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800623c:	f107 031c 	add.w	r3, r7, #28
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	611a      	str	r2, [r3, #16]
 800624c:	615a      	str	r2, [r3, #20]
 800624e:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006250:	f107 0308 	add.w	r3, r7, #8
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006260:	4b77      	ldr	r3, [pc, #476]	; (8006440 <SM_EnablePwmToAux+0x230>)
 8006262:	4a78      	ldr	r2, [pc, #480]	; (8006444 <SM_EnablePwmToAux+0x234>)
 8006264:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006266:	4b76      	ldr	r3, [pc, #472]	; (8006440 <SM_EnablePwmToAux+0x230>)
 8006268:	2200      	movs	r2, #0
 800626a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800626c:	4b74      	ldr	r3, [pc, #464]	; (8006440 <SM_EnablePwmToAux+0x230>)
 800626e:	2210      	movs	r2, #16
 8006270:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006272:	4b73      	ldr	r3, [pc, #460]	; (8006440 <SM_EnablePwmToAux+0x230>)
 8006274:	2201      	movs	r2, #1
 8006276:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006278:	4b71      	ldr	r3, [pc, #452]	; (8006440 <SM_EnablePwmToAux+0x230>)
 800627a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006280:	4b6f      	ldr	r3, [pc, #444]	; (8006440 <SM_EnablePwmToAux+0x230>)
 8006282:	2280      	movs	r2, #128	; 0x80
 8006284:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006286:	486e      	ldr	r0, [pc, #440]	; (8006440 <SM_EnablePwmToAux+0x230>)
 8006288:	f006 fd8c 	bl	800cda4 <HAL_TIM_Base_Init>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006294:	4293      	cmp	r3, r2
 8006296:	d107      	bne.n	80062a8 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800629c:	4619      	mov	r1, r3
 800629e:	486a      	ldr	r0, [pc, #424]	; (8006448 <SM_EnablePwmToAux+0x238>)
 80062a0:	f00a fb5a 	bl	8010958 <iprintf>
		Error_Handler();
 80062a4:	f001 fb94 	bl	80079d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ac:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 80062ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062b2:	4619      	mov	r1, r3
 80062b4:	4862      	ldr	r0, [pc, #392]	; (8006440 <SM_EnablePwmToAux+0x230>)
 80062b6:	f007 fb95 	bl	800d9e4 <HAL_TIM_ConfigClockSource>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d107      	bne.n	80062d6 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 80062c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ca:	4619      	mov	r1, r3
 80062cc:	485f      	ldr	r0, [pc, #380]	; (800644c <SM_EnablePwmToAux+0x23c>)
 80062ce:	f00a fb43 	bl	8010958 <iprintf>
		Error_Handler();
 80062d2:	f001 fb7d 	bl	80079d0 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 80062d6:	485a      	ldr	r0, [pc, #360]	; (8006440 <SM_EnablePwmToAux+0x230>)
 80062d8:	f006 fe77 	bl	800cfca <HAL_TIM_PWM_Init>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d107      	bne.n	80062f8 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 80062e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ec:	4619      	mov	r1, r3
 80062ee:	4858      	ldr	r0, [pc, #352]	; (8006450 <SM_EnablePwmToAux+0x240>)
 80062f0:	f00a fb32 	bl	8010958 <iprintf>
		Error_Handler();
 80062f4:	f001 fb6c 	bl	80079d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80062f8:	2320      	movs	r3, #32
 80062fa:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062fc:	2300      	movs	r3, #0
 80062fe:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006304:	4619      	mov	r1, r3
 8006306:	484e      	ldr	r0, [pc, #312]	; (8006440 <SM_EnablePwmToAux+0x230>)
 8006308:	f008 f922 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 800630c:	4603      	mov	r3, r0
 800630e:	461a      	mov	r2, r3
 8006310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006314:	4293      	cmp	r3, r2
 8006316:	d107      	bne.n	8006328 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800631c:	4619      	mov	r1, r3
 800631e:	484d      	ldr	r0, [pc, #308]	; (8006454 <SM_EnablePwmToAux+0x244>)
 8006320:	f00a fb1a 	bl	8010958 <iprintf>
		Error_Handler();
 8006324:	f001 fb54 	bl	80079d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006328:	2360      	movs	r3, #96	; 0x60
 800632a:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006330:	2300      	movs	r3, #0
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006334:	2300      	movs	r3, #0
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006338:	f107 031c 	add.w	r3, r7, #28
 800633c:	2200      	movs	r2, #0
 800633e:	4619      	mov	r1, r3
 8006340:	483f      	ldr	r0, [pc, #252]	; (8006440 <SM_EnablePwmToAux+0x230>)
 8006342:	f007 fa3f 	bl	800d7c4 <HAL_TIM_PWM_ConfigChannel>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800634e:	4293      	cmp	r3, r2
 8006350:	d107      	bne.n	8006362 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006356:	4619      	mov	r1, r3
 8006358:	483f      	ldr	r0, [pc, #252]	; (8006458 <SM_EnablePwmToAux+0x248>)
 800635a:	f00a fafd 	bl	8010958 <iprintf>
		Error_Handler();
 800635e:	f001 fb37 	bl	80079d0 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006362:	483e      	ldr	r0, [pc, #248]	; (800645c <SM_EnablePwmToAux+0x24c>)
 8006364:	f00a fb6c 	bl	8010a40 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006368:	4b3d      	ldr	r3, [pc, #244]	; (8006460 <SM_EnablePwmToAux+0x250>)
 800636a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636c:	4a3c      	ldr	r2, [pc, #240]	; (8006460 <SM_EnablePwmToAux+0x250>)
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006374:	4b3a      	ldr	r3, [pc, #232]	; (8006460 <SM_EnablePwmToAux+0x250>)
 8006376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006384:	2302      	movs	r3, #2
 8006386:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006390:	2302      	movs	r3, #2
 8006392:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006394:	4833      	ldr	r0, [pc, #204]	; (8006464 <SM_EnablePwmToAux+0x254>)
 8006396:	f00a fb53 	bl	8010a40 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800639a:	f107 0308 	add.w	r3, r7, #8
 800639e:	4619      	mov	r1, r3
 80063a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a4:	f005 f9f8 	bl	800b798 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 80063a8:	482f      	ldr	r0, [pc, #188]	; (8006468 <SM_EnablePwmToAux+0x258>)
 80063aa:	f00a fb49 	bl	8010a40 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 80063ae:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <SM_EnablePwmToAux+0x250>)
 80063b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b2:	4a2b      	ldr	r2, [pc, #172]	; (8006460 <SM_EnablePwmToAux+0x250>)
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	6593      	str	r3, [r2, #88]	; 0x58
 80063ba:	4b29      	ldr	r3, [pc, #164]	; (8006460 <SM_EnablePwmToAux+0x250>)
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 80063c6:	4829      	ldr	r0, [pc, #164]	; (800646c <SM_EnablePwmToAux+0x25c>)
 80063c8:	f00a fb3a 	bl	8010a40 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80063cc:	2200      	movs	r2, #0
 80063ce:	2100      	movs	r1, #0
 80063d0:	201d      	movs	r0, #29
 80063d2:	f004 fab4 	bl	800a93e <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 80063d6:	4826      	ldr	r0, [pc, #152]	; (8006470 <SM_EnablePwmToAux+0x260>)
 80063d8:	f00a fb32 	bl	8010a40 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80063dc:	201d      	movs	r0, #29
 80063de:	f004 fac8 	bl	800a972 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 80063e2:	4824      	ldr	r0, [pc, #144]	; (8006474 <SM_EnablePwmToAux+0x264>)
 80063e4:	f00a fb2c 	bl	8010a40 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80063e8:	2100      	movs	r1, #0
 80063ea:	4815      	ldr	r0, [pc, #84]	; (8006440 <SM_EnablePwmToAux+0x230>)
 80063ec:	f006 fe4e 	bl	800d08c <HAL_TIM_PWM_Start>
 80063f0:	4603      	mov	r3, r0
 80063f2:	461a      	mov	r2, r3
 80063f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d107      	bne.n	800640c <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 80063fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006400:	4619      	mov	r1, r3
 8006402:	481d      	ldr	r0, [pc, #116]	; (8006478 <SM_EnablePwmToAux+0x268>)
 8006404:	f00a faa8 	bl	8010958 <iprintf>
		Error_Handler();
 8006408:	f001 fae2 	bl	80079d0 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 800640c:	481b      	ldr	r0, [pc, #108]	; (800647c <SM_EnablePwmToAux+0x26c>)
 800640e:	f00a fb17 	bl	8010a40 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006412:	2007      	movs	r0, #7
 8006414:	f7ff fb9e 	bl	8005b54 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006418:	4819      	ldr	r0, [pc, #100]	; (8006480 <SM_EnablePwmToAux+0x270>)
 800641a:	f00a fb11 	bl	8010a40 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <SM_EnablePwmToAux+0x234>)
 8006420:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006424:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006426:	4817      	ldr	r0, [pc, #92]	; (8006484 <SM_EnablePwmToAux+0x274>)
 8006428:	f00a fb0a 	bl	8010a40 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <SM_EnablePwmToAux+0x234>)
 800642e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006432:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006434:	bf00      	nop
 8006436:	3758      	adds	r7, #88	; 0x58
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	08014aa4 	.word	0x08014aa4
 8006440:	200022dc 	.word	0x200022dc
 8006444:	40000400 	.word	0x40000400
 8006448:	08014ab8 	.word	0x08014ab8
 800644c:	08014aec 	.word	0x08014aec
 8006450:	08014b28 	.word	0x08014b28
 8006454:	08014b58 	.word	0x08014b58
 8006458:	08014ba0 	.word	0x08014ba0
 800645c:	08014bdc 	.word	0x08014bdc
 8006460:	40021000 	.word	0x40021000
 8006464:	08014c0c 	.word	0x08014c0c
 8006468:	08014c30 	.word	0x08014c30
 800646c:	08014c68 	.word	0x08014c68
 8006470:	08014c90 	.word	0x08014c90
 8006474:	08014cb8 	.word	0x08014cb8
 8006478:	08014ce0 	.word	0x08014ce0
 800647c:	08014d14 	.word	0x08014d14
 8006480:	08014d40 	.word	0x08014d40
 8006484:	08014d74 	.word	0x08014d74

08006488 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 800648e:	4815      	ldr	r0, [pc, #84]	; (80064e4 <SM_DisablePwmToAux+0x5c>)
 8006490:	f00a fa62 	bl	8010958 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006498:	4813      	ldr	r0, [pc, #76]	; (80064e8 <SM_DisablePwmToAux+0x60>)
 800649a:	f00a fad1 	bl	8010a40 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 800649e:	2100      	movs	r1, #0
 80064a0:	4812      	ldr	r0, [pc, #72]	; (80064ec <SM_DisablePwmToAux+0x64>)
 80064a2:	f006 fecd 	bl	800d240 <HAL_TIM_PWM_Stop>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d106      	bne.n	80064be <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	4619      	mov	r1, r3
 80064b4:	480e      	ldr	r0, [pc, #56]	; (80064f0 <SM_DisablePwmToAux+0x68>)
 80064b6:	f00a fa4f 	bl	8010958 <iprintf>
		Error_Handler();
 80064ba:	f001 fa89 	bl	80079d0 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 80064be:	480d      	ldr	r0, [pc, #52]	; (80064f4 <SM_DisablePwmToAux+0x6c>)
 80064c0:	f00a fabe 	bl	8010a40 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <SM_DisablePwmToAux+0x70>)
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	4a0b      	ldr	r2, [pc, #44]	; (80064f8 <SM_DisablePwmToAux+0x70>)
 80064ca:	f023 0302 	bic.w	r3, r3, #2
 80064ce:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 80064d0:	480a      	ldr	r0, [pc, #40]	; (80064fc <SM_DisablePwmToAux+0x74>)
 80064d2:	f00a fab5 	bl	8010a40 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80064d6:	201d      	movs	r0, #29
 80064d8:	f004 fa59 	bl	800a98e <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	08014da4 	.word	0x08014da4
 80064e8:	08014db8 	.word	0x08014db8
 80064ec:	200022dc 	.word	0x200022dc
 80064f0:	08014de0 	.word	0x08014de0
 80064f4:	08014e14 	.word	0x08014e14
 80064f8:	40021000 	.word	0x40021000
 80064fc:	08014e50 	.word	0x08014e50

08006500 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b0b2      	sub	sp, #200	; 0xc8
 8006504:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006506:	4860      	ldr	r0, [pc, #384]	; (8006688 <SM_EnableDacToAux+0x188>)
 8006508:	f00a fa26 	bl	8010958 <iprintf>

	HAL_StatusTypeDef res = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006512:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006516:	2230      	movs	r2, #48	; 0x30
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f009 fdb8 	bl	8010090 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006520:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	609a      	str	r2, [r3, #8]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006530:	4b56      	ldr	r3, [pc, #344]	; (800668c <SM_EnableDacToAux+0x18c>)
 8006532:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006534:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006538:	4618      	mov	r0, r3
 800653a:	f004 fa42 	bl	800a9c2 <HAL_DAC_Init>
 800653e:	4603      	mov	r3, r0
 8006540:	461a      	mov	r2, r3
 8006542:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006546:	4293      	cmp	r3, r2
 8006548:	d107      	bne.n	800655a <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 800654a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800654e:	4619      	mov	r1, r3
 8006550:	484f      	ldr	r0, [pc, #316]	; (8006690 <SM_EnableDacToAux+0x190>)
 8006552:	f00a fa01 	bl	8010958 <iprintf>
		Error_Handler();
 8006556:	f001 fa3b 	bl	80079d0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800655a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800655e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006562:	2300      	movs	r3, #0
 8006564:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800656e:	2300      	movs	r3, #0
 8006570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_TRGO;
 8006574:	2312      	movs	r3, #18
 8006576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800657a:	2300      	movs	r3, #0
 800657c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006586:	2301      	movs	r3, #1
 8006588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800658c:	2300      	movs	r3, #0
 800658e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006592:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006596:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800659a:	2200      	movs	r2, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f004 fbf9 	bl	800ad94 <HAL_DAC_ConfigChannel>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d107      	bne.n	80065be <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 80065ae:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80065b2:	4619      	mov	r1, r3
 80065b4:	4837      	ldr	r0, [pc, #220]	; (8006694 <SM_EnableDacToAux+0x194>)
 80065b6:	f00a f9cf 	bl	8010958 <iprintf>
		Error_Handler();
 80065ba:	f001 fa09 	bl	80079d0 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 80065be:	4836      	ldr	r0, [pc, #216]	; (8006698 <SM_EnableDacToAux+0x198>)
 80065c0:	f00a fa3e 	bl	8010a40 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 80065c4:	4b35      	ldr	r3, [pc, #212]	; (800669c <SM_EnableDacToAux+0x19c>)
 80065c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c8:	4a34      	ldr	r2, [pc, #208]	; (800669c <SM_EnableDacToAux+0x19c>)
 80065ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065d0:	4b32      	ldr	r3, [pc, #200]	; (800669c <SM_EnableDacToAux+0x19c>)
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 80065dc:	4830      	ldr	r0, [pc, #192]	; (80066a0 <SM_EnableDacToAux+0x1a0>)
 80065de:	f00a fa2f 	bl	8010a40 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80065e2:	4b2e      	ldr	r3, [pc, #184]	; (800669c <SM_EnableDacToAux+0x19c>)
 80065e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e6:	4a2d      	ldr	r2, [pc, #180]	; (800669c <SM_EnableDacToAux+0x19c>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065ee:	4b2b      	ldr	r3, [pc, #172]	; (800669c <SM_EnableDacToAux+0x19c>)
 80065f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80065fa:	2340      	movs	r3, #64	; 0x40
 80065fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006600:	2303      	movs	r3, #3
 8006602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006606:	2300      	movs	r3, #0
 8006608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 800660c:	4825      	ldr	r0, [pc, #148]	; (80066a4 <SM_EnableDacToAux+0x1a4>)
 800660e:	f00a fa17 	bl	8010a40 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006612:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006616:	4619      	mov	r1, r3
 8006618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800661c:	f005 f8bc 	bl	800b798 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006620:	4b21      	ldr	r3, [pc, #132]	; (80066a8 <SM_EnableDacToAux+0x1a8>)
 8006622:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006624:	2329      	movs	r3, #41	; 0x29
 8006626:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006628:	2310      	movs	r3, #16
 800662a:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800662c:	2300      	movs	r3, #0
 800662e:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006638:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800663a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006640:	2320      	movs	r3, #32
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006644:	2300      	movs	r3, #0
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006648:	f107 030c 	add.w	r3, r7, #12
 800664c:	4618      	mov	r0, r3
 800664e:	f004 fdd7 	bl	800b200 <HAL_DMA_Init>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800665a:	4293      	cmp	r3, r2
 800665c:	d107      	bne.n	800666e <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 800665e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006662:	4619      	mov	r1, r3
 8006664:	4811      	ldr	r0, [pc, #68]	; (80066ac <SM_EnableDacToAux+0x1ac>)
 8006666:	f00a f977 	bl	8010958 <iprintf>
		Error_Handler();
 800666a:	f001 f9b1 	bl	80079d0 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 800666e:	4810      	ldr	r0, [pc, #64]	; (80066b0 <SM_EnableDacToAux+0x1b0>)
 8006670:	f00a f9e6 	bl	8010a40 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006674:	f107 030c 	add.w	r3, r7, #12
 8006678:	677b      	str	r3, [r7, #116]	; 0x74
 800667a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800667e:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006680:	bf00      	nop
 8006682:	37c8      	adds	r7, #200	; 0xc8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	08014e78 	.word	0x08014e78
 800668c:	50000c00 	.word	0x50000c00
 8006690:	08014e8c 	.word	0x08014e8c
 8006694:	08014eb8 	.word	0x08014eb8
 8006698:	08014ef0 	.word	0x08014ef0
 800669c:	40021000 	.word	0x40021000
 80066a0:	08014f20 	.word	0x08014f20
 80066a4:	08014f50 	.word	0x08014f50
 80066a8:	40020030 	.word	0x40020030
 80066ac:	08014f74 	.word	0x08014f74
 80066b0:	08014fa0 	.word	0x08014fa0

080066b4 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 80066b8:	4806      	ldr	r0, [pc, #24]	; (80066d4 <SM_DisableDacToAux+0x20>)
 80066ba:	f00a f9c1 	bl	8010a40 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 80066be:	4806      	ldr	r0, [pc, #24]	; (80066d8 <SM_DisableDacToAux+0x24>)
 80066c0:	f00a f9be 	bl	8010a40 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80066c4:	2140      	movs	r1, #64	; 0x40
 80066c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066ca:	f005 f9e7 	bl	800ba9c <HAL_GPIO_DeInit>

}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	08014fc4 	.word	0x08014fc4
 80066d8:	08014fd8 	.word	0x08014fd8

080066dc <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80066ec:	4b08      	ldr	r3, [pc, #32]	; (8006710 <SM_GetEncoderValue+0x34>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <SM_GetEncoderValue+0x34>)
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	e002      	b.n	8006704 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80066fe:	4b04      	ldr	r3, [pc, #16]	; (8006710 <SM_GetEncoderValue+0x34>)
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	b29b      	uxth	r3, r3
	}
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	40012c00 	.word	0x40012c00

08006714 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 800671a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <SM_GetOutputInHertz+0x18>
 8006724:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006728:	60bb      	str	r3, [r7, #8]
 800672a:	e008      	b.n	800673e <SM_GetOutputInHertz+0x2a>
 800672c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800673e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d103      	bne.n	8006750 <SM_GetOutputInHertz+0x3c>
 8006748:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	e008      	b.n	8006762 <SM_GetOutputInHertz+0x4e>
 8006750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006762:	ed97 7a02 	vldr	s14, [r7, #8]
 8006766:	edd7 7a01 	vldr	s15, [r7, #4]
 800676a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800676e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006798 <SM_GetOutputInHertz+0x84>
 8006772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006776:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 800677a:	edd7 7a03 	vldr	s15, [r7, #12]
 800677e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800679c <SM_GetOutputInHertz+0x88>
 8006782:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006786:	eef0 7a66 	vmov.f32	s15, s13
}
 800678a:	eeb0 0a67 	vmov.f32	s0, s15
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	4d2037a0 	.word	0x4d2037a0
 800679c:	42f00000 	.word	0x42f00000

080067a0 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 80067ac:	887b      	ldrh	r3, [r7, #2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <SM_ConvertPeriodToHertz+0x16>
 80067b2:	2301      	movs	r3, #1
 80067b4:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80067e8 <SM_ConvertPeriodToHertz+0x48>
 80067d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80067d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80067da:	eeb0 0a67 	vmov.f32	s0, s15
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	4d2037a0 	.word	0x4d2037a0

080067ec <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 80067f0:	4b03      	ldr	r3, [pc, #12]	; (8006800 <SM_IsFuncPwmDutyMode+0x14>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	2000225c 	.word	0x2000225c

08006804 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <SM_ToggleFuncPwmDutyMode+0x1c>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f083 0301 	eor.w	r3, r3, #1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4b03      	ldr	r3, [pc, #12]	; (8006820 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006814:	701a      	strb	r2, [r3, #0]
}
 8006816:	bf00      	nop
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	2000225c 	.word	0x2000225c

08006824 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006828:	4b03      	ldr	r3, [pc, #12]	; (8006838 <SM_ResetFuncPwmDutyMode+0x14>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]

}
 800682e:	bf00      	nop
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	2000225c 	.word	0x2000225c

0800683c <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <VPP_ResetLastEncoderValue+0x14>)
 8006842:	2200      	movs	r2, #0
 8006844:	801a      	strh	r2, [r3, #0]
}
 8006846:	bf00      	nop
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	2000225e 	.word	0x2000225e

08006854 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800685e:	79fa      	ldrb	r2, [r7, #7]
 8006860:	4613      	mov	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	1a9b      	subs	r3, r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4a10      	ldr	r2, [pc, #64]	; (80068ac <VPP_ApplyProfileToSignal+0x58>)
 800686a:	4413      	add	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 800686e:	2000      	movs	r0, #0
 8006870:	f7ff fcb8 	bl	80061e4 <SM_GetOutputChannel>
 8006874:	4602      	mov	r2, r0
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	7a1b      	ldrb	r3, [r3, #8]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff f967 	bl	8005b54 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	edd3 7a04 	vldr	s15, [r3, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	ed93 7a05 	vldr	s14, [r3, #20]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8b1b      	ldrh	r3, [r3, #24]
 8006896:	4618      	mov	r0, r3
 8006898:	eef0 0a47 	vmov.f32	s1, s14
 800689c:	eeb0 0a67 	vmov.f32	s0, s15
 80068a0:	f000 f830 	bl	8006904 <_ProcessSignalDataTable>


}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	2000017c 	.word	0x2000017c

080068b0 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80068ba:	79fa      	ldrb	r2, [r7, #7]
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <VPP_ApplyProfileToAux+0x50>)
 80068c6:	4413      	add	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 80068ca:	2001      	movs	r0, #1
 80068cc:	f7ff fc8a 	bl	80061e4 <SM_GetOutputChannel>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	edd3 7a04 	vldr	s15, [r3, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8b1b      	ldrh	r3, [r3, #24]
 80068e8:	4618      	mov	r0, r3
 80068ea:	eef0 0a47 	vmov.f32	s1, s14
 80068ee:	eeb0 0a67 	vmov.f32	s0, s15
 80068f2:	f000 f88d 	bl	8006a10 <_ProcessAuxDataTable>



}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	2000017c 	.word	0x2000017c

08006904 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08a      	sub	sp, #40	; 0x28
 8006908:	af00      	add	r7, sp, #0
 800690a:	ed87 0a03 	vstr	s0, [r7, #12]
 800690e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006912:	4603      	mov	r3, r0
 8006914:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006916:	2000      	movs	r0, #0
 8006918:	f7ff fc64 	bl	80061e4 <SM_GetOutputChannel>
 800691c:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b06      	cmp	r3, #6
 8006928:	d06b      	beq.n	8006a02 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
 800692e:	e00c      	b.n	800694a <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4933      	ldr	r1, [pc, #204]	; (8006a0c <_ProcessSignalDataTable+0x108>)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	3301      	adds	r3, #1
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b77      	cmp	r3, #119	; 0x77
 800694e:	ddef      	ble.n	8006930 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006950:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006954:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	089b      	lsrs	r3, r3, #2
 8006960:	b29b      	uxth	r3, r3
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800696a:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	e02e      	b.n	80069d2 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006974:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <_ProcessSignalDataTable+0x108>)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006984:	edd7 7a03 	vldr	s15, [r7, #12]
 8006988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006990:	ee17 1a90 	vmov	r1, s15
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <_ProcessSignalDataTable+0x108>)
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800699c:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <_ProcessSignalDataTable+0x108>)
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80069b0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80069b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069c0:	ee17 1a90 	vmov	r1, s15
 80069c4:	4a11      	ldr	r2, [pc, #68]	; (8006a0c <_ProcessSignalDataTable+0x108>)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	3301      	adds	r3, #1
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	2b77      	cmp	r3, #119	; 0x77
 80069d6:	ddcd      	ble.n	8006974 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e00e      	b.n	80069fc <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80069de:	2000      	movs	r0, #0
 80069e0:	f7ff fc00 	bl	80061e4 <SM_GetOutputChannel>
 80069e4:	4601      	mov	r1, r0
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <_ProcessSignalDataTable+0x108>)
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	3302      	adds	r3, #2
 80069f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	3301      	adds	r3, #1
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b77      	cmp	r3, #119	; 0x77
 8006a00:	dded      	ble.n	80069de <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006a02:	bf00      	nop
 8006a04:	3728      	adds	r7, #40	; 0x28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000271c 	.word	0x2000271c

08006a10 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	ed87 0a03 	vstr	s0, [r7, #12]
 8006a1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8006a1e:	4603      	mov	r3, r0
 8006a20:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006a22:	2001      	movs	r0, #1
 8006a24:	f7ff fbde 	bl	80061e4 <SM_GetOutputChannel>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	d059      	beq.n	8006ae8 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	61fb      	str	r3, [r7, #28]
 8006a38:	e00f      	b.n	8006a5a <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f7ff fbd2 	bl	80061e4 <SM_GetOutputChannel>
 8006a40:	4603      	mov	r3, r0
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	4933      	ldr	r1, [pc, #204]	; (8006b1c <_ProcessAuxDataTable+0x10c>)
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3301      	adds	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b77      	cmp	r3, #119	; 0x77
 8006a5e:	ddec      	ble.n	8006a3a <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006a60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006a64:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	089b      	lsrs	r3, r3, #2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a7a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e02e      	b.n	8006ae2 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006a84:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <_ProcessAuxDataTable+0x10c>)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a8c:	ee07 3a90 	vmov	s15, r3
 8006a90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa0:	ee17 1a90 	vmov	r1, s15
 8006aa4:	4a1d      	ldr	r2, [pc, #116]	; (8006b1c <_ProcessAuxDataTable+0x10c>)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006aac:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <_ProcessAuxDataTable+0x10c>)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ac0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ad0:	ee17 1a90 	vmov	r1, s15
 8006ad4:	4a11      	ldr	r2, [pc, #68]	; (8006b1c <_ProcessAuxDataTable+0x10c>)
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b77      	cmp	r3, #119	; 0x77
 8006ae6:	ddcd      	ble.n	8006a84 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	e00e      	b.n	8006b0c <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006aee:	2001      	movs	r0, #1
 8006af0:	f7ff fb78 	bl	80061e4 <SM_GetOutputChannel>
 8006af4:	4601      	mov	r1, r0
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <_ProcessAuxDataTable+0x10c>)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3302      	adds	r3, #2
 8006b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b77      	cmp	r3, #119	; 0x77
 8006b10:	dded      	ble.n	8006aee <_ProcessAuxDataTable+0xde>
	}
}
 8006b12:	bf00      	nop
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	2000271c 	.word	0x2000271c

08006b20 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	f7ff fb5a 	bl	80061e4 <SM_GetOutputChannel>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	88fa      	ldrh	r2, [r7, #6]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d90c      	bls.n	8006b5e <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	3301      	adds	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b61      	cmp	r3, #97	; 0x61
 8006b4e:	d901      	bls.n	8006b54 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006b50:	2361      	movs	r3, #97	; 0x61
 8006b52:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fe7c 	bl	8006854 <VPP_ApplyProfileToSignal>
 8006b5c:	e010      	b.n	8006b80 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	88fa      	ldrh	r2, [r7, #6]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d20b      	bcs.n	8006b80 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	2b61      	cmp	r3, #97	; 0x61
 8006b72:	d901      	bls.n	8006b78 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff fe6a 	bl	8006854 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8006b80:	4a03      	ldr	r2, [pc, #12]	; (8006b90 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	8013      	strh	r3, [r2, #0]

}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	2000225e 	.word	0x2000225e

08006b94 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	f7ff fb20 	bl	80061e4 <SM_GetOutputChannel>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006bae:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d90c      	bls.n	8006bd2 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b61      	cmp	r3, #97	; 0x61
 8006bc2:	d901      	bls.n	8006bc8 <VPP_MapEncoderPositionToAuxOutput+0x34>
 8006bc4:	2361      	movs	r3, #97	; 0x61
 8006bc6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fe70 	bl	80068b0 <VPP_ApplyProfileToAux>
 8006bd0:	e010      	b.n	8006bf4 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d20b      	bcs.n	8006bf4 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b61      	cmp	r3, #97	; 0x61
 8006be6:	d901      	bls.n	8006bec <VPP_MapEncoderPositionToAuxOutput+0x58>
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fe5e 	bl	80068b0 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8006bf4:	4a03      	ldr	r2, [pc, #12]	; (8006c04 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	8013      	strh	r3, [r2, #0]

}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	2000225e 	.word	0x2000225e

08006c08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f009 fa35 	bl	8010090 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006c26:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006c34:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006c40:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006c46:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c4c:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c4e:	2204      	movs	r2, #4
 8006c50:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006c52:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006c58:	4b25      	ldr	r3, [pc, #148]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006c64:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c72:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006c78:	4b1d      	ldr	r3, [pc, #116]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006c80:	4b1b      	ldr	r3, [pc, #108]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006c88:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006c90:	4817      	ldr	r0, [pc, #92]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006c92:	f001 ffb9 	bl	8008c08 <HAL_ADC_Init>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8006c9c:	f000 fe98 	bl	80079d0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4811      	ldr	r0, [pc, #68]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006cac:	f003 f880 	bl	8009db0 <HAL_ADCEx_MultiModeConfigChannel>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8006cb6:	f000 fe8b 	bl	80079d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006cba:	4b0e      	ldr	r3, [pc, #56]	; (8006cf4 <MX_ADC1_Init+0xec>)
 8006cbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006cc6:	237f      	movs	r3, #127	; 0x7f
 8006cc8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006cca:	2304      	movs	r3, #4
 8006ccc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4806      	ldr	r0, [pc, #24]	; (8006cf0 <MX_ADC1_Init+0xe8>)
 8006cd8:	f002 fa9a 	bl	8009210 <HAL_ADC_ConfigChannel>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8006ce2:	f000 fe75 	bl	80079d0 <Error_Handler>
  }

}
 8006ce6:	bf00      	nop
 8006ce8:	3730      	adds	r7, #48	; 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200028fc 	.word	0x200028fc
 8006cf4:	0c900008 	.word	0x0c900008

08006cf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d18:	d14f      	bne.n	8006dba <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006d1a:	4b2a      	ldr	r3, [pc, #168]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1e:	4a29      	ldr	r2, [pc, #164]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d3e:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <HAL_ADC_MspInit+0xcc>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d60:	f004 fd1a 	bl	800b798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006d64:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <HAL_ADC_MspInit+0xd4>)
 8006d68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006d6a:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d70:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006d92:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d94:	2220      	movs	r2, #32
 8006d96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006d9e:	480a      	ldr	r0, [pc, #40]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006da0:	f004 fa2e 	bl	800b200 <HAL_DMA_Init>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006daa:	f000 fe11 	bl	80079d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a05      	ldr	r2, [pc, #20]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54
 8006db4:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <HAL_ADC_MspInit+0xd0>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006dba:	bf00      	nop
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	20002968 	.word	0x20002968
 8006dcc:	40020008 	.word	0x40020008

08006dd0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006dd4:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006dd6:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <MX_COMP1_Init+0x48>)
 8006dd8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006dda:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006de2:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <MX_COMP1_Init+0x4c>)
 8006de4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006dee:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8006df2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006df4:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006dfc:	2231      	movs	r2, #49	; 0x31
 8006dfe:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006e00:	4804      	ldr	r0, [pc, #16]	; (8006e14 <MX_COMP1_Init+0x44>)
 8006e02:	f003 fa55 	bl	800a2b0 <HAL_COMP_Init>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8006e0c:	f000 fde0 	bl	80079d0 <Error_Handler>
  }

}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	200029c8 	.word	0x200029c8
 8006e18:	40010200 	.word	0x40010200
 8006e1c:	00800030 	.word	0x00800030

08006e20 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	605a      	str	r2, [r3, #4]
 8006e32:	609a      	str	r2, [r3, #8]
 8006e34:	60da      	str	r2, [r3, #12]
 8006e36:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a13      	ldr	r2, [pc, #76]	; (8006e8c <HAL_COMP_MspInit+0x6c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d120      	bne.n	8006e84 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e42:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <HAL_COMP_MspInit+0x70>)
 8006e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e46:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <HAL_COMP_MspInit+0x70>)
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e4e:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <HAL_COMP_MspInit+0x70>)
 8006e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e66:	f107 030c 	add.w	r3, r7, #12
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e70:	f004 fc92 	bl	800b798 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8006e74:	2200      	movs	r2, #0
 8006e76:	2100      	movs	r1, #0
 8006e78:	2040      	movs	r0, #64	; 0x40
 8006e7a:	f003 fd60 	bl	800a93e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8006e7e:	2040      	movs	r0, #64	; 0x40
 8006e80:	f003 fd77 	bl	800a972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006e84:	bf00      	nop
 8006e86:	3720      	adds	r7, #32
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40010200 	.word	0x40010200
 8006e90:	40021000 	.word	0x40021000

08006e94 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08c      	sub	sp, #48	; 0x30
 8006e98:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	2230      	movs	r2, #48	; 0x30
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f009 f8f5 	bl	8010090 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006ea6:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <MX_DAC1_Init+0x8c>)
 8006ea8:	4a1e      	ldr	r2, [pc, #120]	; (8006f24 <MX_DAC1_Init+0x90>)
 8006eaa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006eac:	481c      	ldr	r0, [pc, #112]	; (8006f20 <MX_DAC1_Init+0x8c>)
 8006eae:	f003 fd88 	bl	800a9c2 <HAL_DAC_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006eb8:	f000 fd8a 	bl	80079d0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006ebc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ec0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006ece:	2312      	movs	r3, #18
 8006ed0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	480d      	ldr	r0, [pc, #52]	; (8006f20 <MX_DAC1_Init+0x8c>)
 8006eea:	f003 ff53 	bl	800ad94 <HAL_DAC_ConfigChannel>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006ef4:	f000 fd6c 	bl	80079d0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006f00:	463b      	mov	r3, r7
 8006f02:	2210      	movs	r2, #16
 8006f04:	4619      	mov	r1, r3
 8006f06:	4806      	ldr	r0, [pc, #24]	; (8006f20 <MX_DAC1_Init+0x8c>)
 8006f08:	f003 ff44 	bl	800ad94 <HAL_DAC_ConfigChannel>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006f12:	f000 fd5d 	bl	80079d0 <Error_Handler>
  }

}
 8006f16:	bf00      	nop
 8006f18:	3730      	adds	r7, #48	; 0x30
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20002a00 	.word	0x20002a00
 8006f24:	50000800 	.word	0x50000800

08006f28 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08c      	sub	sp, #48	; 0x30
 8006f2c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006f2e:	463b      	mov	r3, r7
 8006f30:	2230      	movs	r2, #48	; 0x30
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f009 f8ab 	bl	8010090 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006f3a:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <MX_DAC2_Init+0x6c>)
 8006f3c:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <MX_DAC2_Init+0x70>)
 8006f3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006f40:	4814      	ldr	r0, [pc, #80]	; (8006f94 <MX_DAC2_Init+0x6c>)
 8006f42:	f003 fd3e 	bl	800a9c2 <HAL_DAC_Init>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006f4c:	f000 fd40 	bl	80079d0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f54:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006f62:	2312      	movs	r3, #18
 8006f64:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006f76:	463b      	mov	r3, r7
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4805      	ldr	r0, [pc, #20]	; (8006f94 <MX_DAC2_Init+0x6c>)
 8006f7e:	f003 ff09 	bl	800ad94 <HAL_DAC_ConfigChannel>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006f88:	f000 fd22 	bl	80079d0 <Error_Handler>
  }

}
 8006f8c:	bf00      	nop
 8006f8e:	3730      	adds	r7, #48	; 0x30
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	200029ec 	.word	0x200029ec
 8006f98:	50000c00 	.word	0x50000c00

08006f9c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	; 0x30
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa4:	f107 031c 	add.w	r3, r7, #28
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	609a      	str	r2, [r3, #8]
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a56      	ldr	r2, [pc, #344]	; (8007114 <HAL_DAC_MspInit+0x178>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d150      	bne.n	8007060 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006fbe:	4b56      	ldr	r3, [pc, #344]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8006fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc2:	4a55      	ldr	r2, [pc, #340]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8006fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fca:	4b53      	ldr	r3, [pc, #332]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fd6:	4b50      	ldr	r3, [pc, #320]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	4a4f      	ldr	r2, [pc, #316]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fe2:	4b4d      	ldr	r3, [pc, #308]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006fee:	2330      	movs	r3, #48	; 0x30
 8006ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ffa:	f107 031c 	add.w	r3, r7, #28
 8006ffe:	4619      	mov	r1, r3
 8007000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007004:	f004 fbc8 	bl	800b798 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007008:	4b44      	ldr	r3, [pc, #272]	; (800711c <HAL_DAC_MspInit+0x180>)
 800700a:	4a45      	ldr	r2, [pc, #276]	; (8007120 <HAL_DAC_MspInit+0x184>)
 800700c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800700e:	4b43      	ldr	r3, [pc, #268]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007010:	2206      	movs	r2, #6
 8007012:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007014:	4b41      	ldr	r3, [pc, #260]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007016:	2210      	movs	r2, #16
 8007018:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800701a:	4b40      	ldr	r3, [pc, #256]	; (800711c <HAL_DAC_MspInit+0x180>)
 800701c:	2200      	movs	r2, #0
 800701e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007020:	4b3e      	ldr	r3, [pc, #248]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007022:	2280      	movs	r2, #128	; 0x80
 8007024:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007026:	4b3d      	ldr	r3, [pc, #244]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800702c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800702e:	4b3b      	ldr	r3, [pc, #236]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007034:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007036:	4b39      	ldr	r3, [pc, #228]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007038:	2220      	movs	r2, #32
 800703a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800703c:	4b37      	ldr	r3, [pc, #220]	; (800711c <HAL_DAC_MspInit+0x180>)
 800703e:	2200      	movs	r2, #0
 8007040:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007042:	4836      	ldr	r0, [pc, #216]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007044:	f004 f8dc 	bl	800b200 <HAL_DMA_Init>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800704e:	f000 fcbf 	bl	80079d0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a31      	ldr	r2, [pc, #196]	; (800711c <HAL_DAC_MspInit+0x180>)
 8007056:	609a      	str	r2, [r3, #8]
 8007058:	4a30      	ldr	r2, [pc, #192]	; (800711c <HAL_DAC_MspInit+0x180>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800705e:	e054      	b.n	800710a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a2f      	ldr	r2, [pc, #188]	; (8007124 <HAL_DAC_MspInit+0x188>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d14f      	bne.n	800710a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800706a:	4b2b      	ldr	r3, [pc, #172]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 800706c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706e:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8007070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007076:	4b28      	ldr	r3, [pc, #160]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007082:	4b25      	ldr	r3, [pc, #148]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	4a24      	ldr	r2, [pc, #144]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800708e:	4b22      	ldr	r3, [pc, #136]	; (8007118 <HAL_DAC_MspInit+0x17c>)
 8007090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800709a:	2340      	movs	r3, #64	; 0x40
 800709c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800709e:	2303      	movs	r3, #3
 80070a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070a6:	f107 031c 	add.w	r3, r7, #28
 80070aa:	4619      	mov	r1, r3
 80070ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070b0:	f004 fb72 	bl	800b798 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80070b4:	4b1c      	ldr	r3, [pc, #112]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070b6:	4a1d      	ldr	r2, [pc, #116]	; (800712c <HAL_DAC_MspInit+0x190>)
 80070b8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80070ba:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070bc:	2229      	movs	r2, #41	; 0x29
 80070be:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070c0:	4b19      	ldr	r3, [pc, #100]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070c2:	2210      	movs	r2, #16
 80070c4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070c6:	4b18      	ldr	r3, [pc, #96]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80070cc:	4b16      	ldr	r3, [pc, #88]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070ce:	2280      	movs	r2, #128	; 0x80
 80070d0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80070e2:	4b11      	ldr	r3, [pc, #68]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070e4:	2220      	movs	r2, #32
 80070e6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80070e8:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80070ee:	480e      	ldr	r0, [pc, #56]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 80070f0:	f004 f886 	bl	800b200 <HAL_DMA_Init>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80070fa:	f000 fc69 	bl	80079d0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a09      	ldr	r2, [pc, #36]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 8007102:	609a      	str	r2, [r3, #8]
 8007104:	4a08      	ldr	r2, [pc, #32]	; (8007128 <HAL_DAC_MspInit+0x18c>)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6293      	str	r3, [r2, #40]	; 0x28
}
 800710a:	bf00      	nop
 800710c:	3730      	adds	r7, #48	; 0x30
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	50000800 	.word	0x50000800
 8007118:	40021000 	.word	0x40021000
 800711c:	20002270 	.word	0x20002270
 8007120:	4002001c 	.word	0x4002001c
 8007124:	50000c00 	.word	0x50000c00
 8007128:	20002a14 	.word	0x20002a14
 800712c:	40020030 	.word	0x40020030

08007130 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007136:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <MX_DMA_Init+0x70>)
 8007138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713a:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <MX_DMA_Init+0x70>)
 800713c:	f043 0304 	orr.w	r3, r3, #4
 8007140:	6493      	str	r3, [r2, #72]	; 0x48
 8007142:	4b17      	ldr	r3, [pc, #92]	; (80071a0 <MX_DMA_Init+0x70>)
 8007144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	607b      	str	r3, [r7, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800714e:	4b14      	ldr	r3, [pc, #80]	; (80071a0 <MX_DMA_Init+0x70>)
 8007150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007152:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <MX_DMA_Init+0x70>)
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	6493      	str	r3, [r2, #72]	; 0x48
 800715a:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <MX_DMA_Init+0x70>)
 800715c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007166:	2200      	movs	r2, #0
 8007168:	2101      	movs	r1, #1
 800716a:	200b      	movs	r0, #11
 800716c:	f003 fbe7 	bl	800a93e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007170:	200b      	movs	r0, #11
 8007172:	f003 fbfe 	bl	800a972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007176:	2200      	movs	r2, #0
 8007178:	2100      	movs	r1, #0
 800717a:	200c      	movs	r0, #12
 800717c:	f003 fbdf 	bl	800a93e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007180:	200c      	movs	r0, #12
 8007182:	f003 fbf6 	bl	800a972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007186:	2200      	movs	r2, #0
 8007188:	2100      	movs	r1, #0
 800718a:	200d      	movs	r0, #13
 800718c:	f003 fbd7 	bl	800a93e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007190:	200d      	movs	r0, #13
 8007192:	f003 fbee 	bl	800a972 <HAL_NVIC_EnableIRQ>

}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40021000 	.word	0x40021000

080071a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <__NVIC_GetPriorityGrouping+0x18>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	0a1b      	lsrs	r3, r3, #8
 80071ae:	f003 0307 	and.w	r3, r3, #7
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	e000ed00 	.word	0xe000ed00

080071c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	db0b      	blt.n	80071ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071d2:	79fb      	ldrb	r3, [r7, #7]
 80071d4:	f003 021f 	and.w	r2, r3, #31
 80071d8:	4907      	ldr	r1, [pc, #28]	; (80071f8 <__NVIC_EnableIRQ+0x38>)
 80071da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	2001      	movs	r0, #1
 80071e2:	fa00 f202 	lsl.w	r2, r0, r2
 80071e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071ea:	bf00      	nop
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	e000e100 	.word	0xe000e100

080071fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	6039      	str	r1, [r7, #0]
 8007206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800720c:	2b00      	cmp	r3, #0
 800720e:	db0a      	blt.n	8007226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	490c      	ldr	r1, [pc, #48]	; (8007248 <__NVIC_SetPriority+0x4c>)
 8007216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721a:	0112      	lsls	r2, r2, #4
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	440b      	add	r3, r1
 8007220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007224:	e00a      	b.n	800723c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	b2da      	uxtb	r2, r3
 800722a:	4908      	ldr	r1, [pc, #32]	; (800724c <__NVIC_SetPriority+0x50>)
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	3b04      	subs	r3, #4
 8007234:	0112      	lsls	r2, r2, #4
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	440b      	add	r3, r1
 800723a:	761a      	strb	r2, [r3, #24]
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	e000e100 	.word	0xe000e100
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007250:	b480      	push	{r7}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f1c3 0307 	rsb	r3, r3, #7
 800726a:	2b04      	cmp	r3, #4
 800726c:	bf28      	it	cs
 800726e:	2304      	movcs	r3, #4
 8007270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	3304      	adds	r3, #4
 8007276:	2b06      	cmp	r3, #6
 8007278:	d902      	bls.n	8007280 <NVIC_EncodePriority+0x30>
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3b03      	subs	r3, #3
 800727e:	e000      	b.n	8007282 <NVIC_EncodePriority+0x32>
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43da      	mvns	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	401a      	ands	r2, r3
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	fa01 f303 	lsl.w	r3, r1, r3
 80072a2:	43d9      	mvns	r1, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a8:	4313      	orrs	r3, r2
         );
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3724      	adds	r7, #36	; 0x24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80072c2:	4a14      	ldr	r2, [pc, #80]	; (8007314 <LL_SYSCFG_SetEXTISource+0x5c>)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	3302      	adds	r3, #2
 80072cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	43db      	mvns	r3, r3
 80072d6:	ea02 0103 	and.w	r1, r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	fa93 f3a3 	rbit	r3, r3
 80072e6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	409a      	lsls	r2, r3
 80072f8:	4806      	ldr	r0, [pc, #24]	; (8007314 <LL_SYSCFG_SetEXTISource+0x5c>)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	430a      	orrs	r2, r1
 8007302:	3302      	adds	r3, #2
 8007304:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	40010000 	.word	0x40010000

08007318 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007318:	b480      	push	{r7}
 800731a:	b089      	sub	sp, #36	; 0x24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	fa93 f3a3 	rbit	r3, r3
 8007332:	613b      	str	r3, [r7, #16]
  return result;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	fab3 f383 	clz	r3, r3
 800733a:	b2db      	uxtb	r3, r3
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	2103      	movs	r1, #3
 8007340:	fa01 f303 	lsl.w	r3, r1, r3
 8007344:	43db      	mvns	r3, r3
 8007346:	401a      	ands	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	fa93 f3a3 	rbit	r3, r3
 8007352:	61bb      	str	r3, [r7, #24]
  return result;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	fab3 f383 	clz	r3, r3
 800735a:	b2db      	uxtb	r3, r3
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	431a      	orrs	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	601a      	str	r2, [r3, #0]
}
 800736a:	bf00      	nop
 800736c:	3724      	adds	r7, #36	; 0x24
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007376:	b480      	push	{r7}
 8007378:	b089      	sub	sp, #36	; 0x24
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	fa93 f3a3 	rbit	r3, r3
 8007390:	613b      	str	r3, [r7, #16]
  return result;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	fab3 f383 	clz	r3, r3
 8007398:	b2db      	uxtb	r3, r3
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	2103      	movs	r1, #3
 800739e:	fa01 f303 	lsl.w	r3, r1, r3
 80073a2:	43db      	mvns	r3, r3
 80073a4:	401a      	ands	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	fa93 f3a3 	rbit	r3, r3
 80073b0:	61bb      	str	r3, [r7, #24]
  return result;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	fab3 f383 	clz	r3, r3
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	fa01 f303 	lsl.w	r3, r1, r3
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	60da      	str	r2, [r3, #12]
}
 80073c8:	bf00      	nop
 80073ca:	3724      	adds	r7, #36	; 0x24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073fc:	4907      	ldr	r1, [pc, #28]	; (800741c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4313      	orrs	r3, r2
 8007402:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4013      	ands	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	40021000 	.word	0x40021000

08007420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007426:	f107 031c 	add.w	r3, r7, #28
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	605a      	str	r2, [r3, #4]
 8007430:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007432:	1d3b      	adds	r3, r7, #4
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	609a      	str	r2, [r3, #8]
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	611a      	str	r2, [r3, #16]
 8007440:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007442:	2004      	movs	r0, #4
 8007444:	f7ff ffd4 	bl	80073f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007448:	2020      	movs	r0, #32
 800744a:	f7ff ffd1 	bl	80073f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800744e:	2001      	movs	r0, #1
 8007450:	f7ff ffce 	bl	80073f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007454:	2002      	movs	r0, #2
 8007456:	f7ff ffcb 	bl	80073f0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800745a:	2108      	movs	r1, #8
 800745c:	48d3      	ldr	r0, [pc, #844]	; (80077ac <MX_GPIO_Init+0x38c>)
 800745e:	f7ff ffb9 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007462:	2108      	movs	r1, #8
 8007464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007468:	f7ff ffb4 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 800746c:	2110      	movs	r1, #16
 800746e:	48cf      	ldr	r0, [pc, #828]	; (80077ac <MX_GPIO_Init+0x38c>)
 8007470:	f7ff ffb0 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007474:	2120      	movs	r1, #32
 8007476:	48cd      	ldr	r0, [pc, #820]	; (80077ac <MX_GPIO_Init+0x38c>)
 8007478:	f7ff ffac 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 800747c:	2101      	movs	r1, #1
 800747e:	48cc      	ldr	r0, [pc, #816]	; (80077b0 <MX_GPIO_Init+0x390>)
 8007480:	f7ff ffa8 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007488:	48c8      	ldr	r0, [pc, #800]	; (80077ac <MX_GPIO_Init+0x38c>)
 800748a:	f7ff ffa3 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800748e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007492:	48c6      	ldr	r0, [pc, #792]	; (80077ac <MX_GPIO_Init+0x38c>)
 8007494:	f7ff ff9e 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007498:	2140      	movs	r1, #64	; 0x40
 800749a:	48c5      	ldr	r0, [pc, #788]	; (80077b0 <MX_GPIO_Init+0x390>)
 800749c:	f7ff ff9a 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80074a0:	2180      	movs	r1, #128	; 0x80
 80074a2:	48c3      	ldr	r0, [pc, #780]	; (80077b0 <MX_GPIO_Init+0x390>)
 80074a4:	f7ff ff96 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80074a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ac:	48c0      	ldr	r0, [pc, #768]	; (80077b0 <MX_GPIO_Init+0x390>)
 80074ae:	f7ff ff91 	bl	80073d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80074b2:	49c0      	ldr	r1, [pc, #768]	; (80077b4 <MX_GPIO_Init+0x394>)
 80074b4:	2002      	movs	r0, #2
 80074b6:	f7ff feff 	bl	80072b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80074ba:	49bf      	ldr	r1, [pc, #764]	; (80077b8 <MX_GPIO_Init+0x398>)
 80074bc:	2002      	movs	r0, #2
 80074be:	f7ff fefb 	bl	80072b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80074c2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80074c6:	2005      	movs	r0, #5
 80074c8:	f7ff fef6 	bl	80072b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80074cc:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80074d0:	2005      	movs	r0, #5
 80074d2:	f7ff fef1 	bl	80072b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80074d6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80074da:	2002      	movs	r0, #2
 80074dc:	f7ff feec 	bl	80072b8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80074e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074e4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80074ec:	2300      	movs	r3, #0
 80074ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80074f2:	2302      	movs	r3, #2
 80074f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80074f8:	f107 031c 	add.w	r3, r7, #28
 80074fc:	4618      	mov	r0, r3
 80074fe:	f007 fae5 	bl	800eacc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007506:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800750e:	2300      	movs	r3, #0
 8007510:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007514:	2302      	movs	r3, #2
 8007516:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800751a:	f107 031c 	add.w	r3, r7, #28
 800751e:	4618      	mov	r0, r3
 8007520:	f007 fad4 	bl	800eacc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007524:	2301      	movs	r3, #1
 8007526:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007528:	2301      	movs	r3, #1
 800752a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800752e:	2300      	movs	r3, #0
 8007530:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007534:	2302      	movs	r3, #2
 8007536:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800753a:	f107 031c 	add.w	r3, r7, #28
 800753e:	4618      	mov	r0, r3
 8007540:	f007 fac4 	bl	800eacc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007544:	2302      	movs	r3, #2
 8007546:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800754e:	2300      	movs	r3, #0
 8007550:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007554:	2302      	movs	r3, #2
 8007556:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800755a:	f107 031c 	add.w	r3, r7, #28
 800755e:	4618      	mov	r0, r3
 8007560:	f007 fab4 	bl	800eacc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007564:	2304      	movs	r3, #4
 8007566:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800756e:	2300      	movs	r3, #0
 8007570:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007574:	2302      	movs	r3, #2
 8007576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800757a:	f107 031c 	add.w	r3, r7, #28
 800757e:	4618      	mov	r0, r3
 8007580:	f007 faa4 	bl	800eacc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007584:	2201      	movs	r2, #1
 8007586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800758a:	4888      	ldr	r0, [pc, #544]	; (80077ac <MX_GPIO_Init+0x38c>)
 800758c:	f7ff fef3 	bl	8007376 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007590:	2201      	movs	r2, #1
 8007592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007596:	4885      	ldr	r0, [pc, #532]	; (80077ac <MX_GPIO_Init+0x38c>)
 8007598:	f7ff feed 	bl	8007376 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 800759c:	2201      	movs	r2, #1
 800759e:	2101      	movs	r1, #1
 80075a0:	4886      	ldr	r0, [pc, #536]	; (80077bc <MX_GPIO_Init+0x39c>)
 80075a2:	f7ff fee8 	bl	8007376 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80075a6:	2201      	movs	r2, #1
 80075a8:	2102      	movs	r1, #2
 80075aa:	4884      	ldr	r0, [pc, #528]	; (80077bc <MX_GPIO_Init+0x39c>)
 80075ac:	f7ff fee3 	bl	8007376 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 80075b0:	2201      	movs	r2, #1
 80075b2:	2104      	movs	r1, #4
 80075b4:	487d      	ldr	r0, [pc, #500]	; (80077ac <MX_GPIO_Init+0x38c>)
 80075b6:	f7ff fede 	bl	8007376 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80075ba:	2200      	movs	r2, #0
 80075bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075c0:	487a      	ldr	r0, [pc, #488]	; (80077ac <MX_GPIO_Init+0x38c>)
 80075c2:	f7ff fea9 	bl	8007318 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80075c6:	2200      	movs	r2, #0
 80075c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075cc:	4877      	ldr	r0, [pc, #476]	; (80077ac <MX_GPIO_Init+0x38c>)
 80075ce:	f7ff fea3 	bl	8007318 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80075d2:	2200      	movs	r2, #0
 80075d4:	2101      	movs	r1, #1
 80075d6:	4879      	ldr	r0, [pc, #484]	; (80077bc <MX_GPIO_Init+0x39c>)
 80075d8:	f7ff fe9e 	bl	8007318 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80075dc:	2200      	movs	r2, #0
 80075de:	2102      	movs	r1, #2
 80075e0:	4876      	ldr	r0, [pc, #472]	; (80077bc <MX_GPIO_Init+0x39c>)
 80075e2:	f7ff fe99 	bl	8007318 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 80075e6:	2200      	movs	r2, #0
 80075e8:	2104      	movs	r1, #4
 80075ea:	4870      	ldr	r0, [pc, #448]	; (80077ac <MX_GPIO_Init+0x38c>)
 80075ec:	f7ff fe94 	bl	8007318 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80075f0:	2308      	movs	r3, #8
 80075f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80075f4:	2301      	movs	r3, #1
 80075f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007600:	2302      	movs	r3, #2
 8007602:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007604:	1d3b      	adds	r3, r7, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4868      	ldr	r0, [pc, #416]	; (80077ac <MX_GPIO_Init+0x38c>)
 800760a:	f007 fc52 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 800760e:	2308      	movs	r3, #8
 8007610:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007612:	2301      	movs	r3, #1
 8007614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	4619      	mov	r1, r3
 8007626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800762a:	f007 fc42 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 800762e:	2310      	movs	r3, #16
 8007630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007632:	2301      	movs	r3, #1
 8007634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800763a:	2300      	movs	r3, #0
 800763c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007642:	1d3b      	adds	r3, r7, #4
 8007644:	4619      	mov	r1, r3
 8007646:	4859      	ldr	r0, [pc, #356]	; (80077ac <MX_GPIO_Init+0x38c>)
 8007648:	f007 fc33 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 800764c:	2320      	movs	r3, #32
 800764e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007650:	2301      	movs	r3, #1
 8007652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4851      	ldr	r0, [pc, #324]	; (80077ac <MX_GPIO_Init+0x38c>)
 8007666:	f007 fc24 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 800766a:	2301      	movs	r3, #1
 800766c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800766e:	2301      	movs	r3, #1
 8007670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007676:	2300      	movs	r3, #0
 8007678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 800767e:	1d3b      	adds	r3, r7, #4
 8007680:	4619      	mov	r1, r3
 8007682:	484b      	ldr	r0, [pc, #300]	; (80077b0 <MX_GPIO_Init+0x390>)
 8007684:	f007 fc15 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800768c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800768e:	2301      	movs	r3, #1
 8007690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4842      	ldr	r0, [pc, #264]	; (80077ac <MX_GPIO_Init+0x38c>)
 80076a4:	f007 fc05 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80076a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076ae:	2301      	movs	r3, #1
 80076b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80076be:	1d3b      	adds	r3, r7, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	483a      	ldr	r0, [pc, #232]	; (80077ac <MX_GPIO_Init+0x38c>)
 80076c4:	f007 fbf5 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80076c8:	2340      	movs	r3, #64	; 0x40
 80076ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076cc:	2301      	movs	r3, #1
 80076ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076d0:	2303      	movs	r3, #3
 80076d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80076dc:	1d3b      	adds	r3, r7, #4
 80076de:	4619      	mov	r1, r3
 80076e0:	4833      	ldr	r0, [pc, #204]	; (80077b0 <MX_GPIO_Init+0x390>)
 80076e2:	f007 fbe6 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80076e6:	2380      	movs	r3, #128	; 0x80
 80076e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076ea:	2301      	movs	r3, #1
 80076ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80076ee:	2303      	movs	r3, #3
 80076f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	482c      	ldr	r0, [pc, #176]	; (80077b0 <MX_GPIO_Init+0x390>)
 8007700:	f007 fbd7 	bl	800eeb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800770a:	2301      	movs	r3, #1
 800770c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800770e:	2303      	movs	r3, #3
 8007710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007712:	2300      	movs	r3, #0
 8007714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800771a:	1d3b      	adds	r3, r7, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4824      	ldr	r0, [pc, #144]	; (80077b0 <MX_GPIO_Init+0x390>)
 8007720:	f007 fbc7 	bl	800eeb2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007724:	f7ff fd3e 	bl	80071a4 <__NVIC_GetPriorityGrouping>
 8007728:	4603      	mov	r3, r0
 800772a:	2200      	movs	r2, #0
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fd8e 	bl	8007250 <NVIC_EncodePriority>
 8007734:	4603      	mov	r3, r0
 8007736:	4619      	mov	r1, r3
 8007738:	2006      	movs	r0, #6
 800773a:	f7ff fd5f 	bl	80071fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800773e:	2006      	movs	r0, #6
 8007740:	f7ff fd3e 	bl	80071c0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007744:	f7ff fd2e 	bl	80071a4 <__NVIC_GetPriorityGrouping>
 8007748:	4603      	mov	r3, r0
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff fd7e 	bl	8007250 <NVIC_EncodePriority>
 8007754:	4603      	mov	r3, r0
 8007756:	4619      	mov	r1, r3
 8007758:	2007      	movs	r0, #7
 800775a:	f7ff fd4f 	bl	80071fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800775e:	2007      	movs	r0, #7
 8007760:	f7ff fd2e 	bl	80071c0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007764:	f7ff fd1e 	bl	80071a4 <__NVIC_GetPriorityGrouping>
 8007768:	4603      	mov	r3, r0
 800776a:	2200      	movs	r2, #0
 800776c:	2100      	movs	r1, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fd6e 	bl	8007250 <NVIC_EncodePriority>
 8007774:	4603      	mov	r3, r0
 8007776:	4619      	mov	r1, r3
 8007778:	2008      	movs	r0, #8
 800777a:	f7ff fd3f 	bl	80071fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800777e:	2008      	movs	r0, #8
 8007780:	f7ff fd1e 	bl	80071c0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007784:	f7ff fd0e 	bl	80071a4 <__NVIC_GetPriorityGrouping>
 8007788:	4603      	mov	r3, r0
 800778a:	2200      	movs	r2, #0
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff fd5e 	bl	8007250 <NVIC_EncodePriority>
 8007794:	4603      	mov	r3, r0
 8007796:	4619      	mov	r1, r3
 8007798:	2028      	movs	r0, #40	; 0x28
 800779a:	f7ff fd2f 	bl	80071fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800779e:	2028      	movs	r0, #40	; 0x28
 80077a0:	f7ff fd0e 	bl	80071c0 <__NVIC_EnableIRQ>

}
 80077a4:	bf00      	nop
 80077a6:	3728      	adds	r7, #40	; 0x28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	e009      	b.n	80077c0 <MX_GPIO_Init+0x3a0>
 80077ac:	48000800 	.word	0x48000800
 80077b0:	48000400 	.word	0x48000400
 80077b4:	0f000003 	.word	0x0f000003
 80077b8:	f0000003 	.word	0xf0000003
 80077bc:	48001400 	.word	0x48001400
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop

080077c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d013      	beq.n	8007804 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80077dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80077e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80077ec:	e000      	b.n	80077f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80077ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80077f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0f9      	beq.n	80077ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80077fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007804:	687b      	ldr	r3, [r7, #4]
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b086      	sub	sp, #24
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  int i=0;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	e009      	b.n	800783c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	60ba      	str	r2, [r7, #8]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff ffc7 	bl	80077c4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	3301      	adds	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	dbf1      	blt.n	8007828 <_write+0x16>
  return len;
 8007844:	687b      	ldr	r3, [r7, #4]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007854:	f000 feeb 	bl	800862e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007858:	f000 f84c 	bl	80078f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800785c:	f7ff fde0 	bl	8007420 <MX_GPIO_Init>
  MX_DMA_Init();
 8007860:	f7ff fc66 	bl	8007130 <MX_DMA_Init>
  MX_DAC1_Init();
 8007864:	f7ff fb16 	bl	8006e94 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007868:	f7ff f9ce 	bl	8006c08 <MX_ADC1_Init>
  MX_COMP1_Init();
 800786c:	f7ff fab0 	bl	8006dd0 <MX_COMP1_Init>
  MX_SPI3_Init();
 8007870:	f000 f8ec 	bl	8007a4c <MX_SPI3_Init>
  MX_RNG_Init();
 8007874:	f000 f8dc 	bl	8007a30 <MX_RNG_Init>
  MX_TIM1_Init();
 8007878:	f000 fb46 	bl	8007f08 <MX_TIM1_Init>
  MX_TIM8_Init();
 800787c:	f000 fc9c 	bl	80081b8 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007880:	f000 fd54 	bl	800832c <MX_TIM16_Init>
  MX_TIM15_Init();
 8007884:	f000 fd00 	bl	8008288 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007888:	f000 fc48 	bl	800811c <MX_TIM5_Init>
  MX_TIM3_Init();
 800788c:	f000 fbf8 	bl	8008080 <MX_TIM3_Init>
  MX_DAC2_Init();
 8007890:	f7ff fb4a 	bl	8006f28 <MX_DAC2_Init>
  MX_TIM17_Init();
 8007894:	f000 fd72 	bl	800837c <MX_TIM17_Init>
  MX_TIM2_Init();
 8007898:	f000 fba6 	bl	8007fe8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 800789c:	f7fe fb8e 	bl	8005fbc <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 80078a0:	4810      	ldr	r0, [pc, #64]	; (80078e4 <main+0x94>)
 80078a2:	f005 fb2d 	bl	800cf00 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80078a6:	2200      	movs	r2, #0
 80078a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078ac:	480e      	ldr	r0, [pc, #56]	; (80078e8 <main+0x98>)
 80078ae:	f004 f9d7 	bl	800bc60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80078b2:	2200      	movs	r2, #0
 80078b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078b8:	480b      	ldr	r0, [pc, #44]	; (80078e8 <main+0x98>)
 80078ba:	f004 f9d1 	bl	800bc60 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80078be:	480b      	ldr	r0, [pc, #44]	; (80078ec <main+0x9c>)
 80078c0:	f005 fac8 	bl	800ce54 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <main+0xa0>)
 80078c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078ca:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80078cc:	4b08      	ldr	r3, [pc, #32]	; (80078f0 <main+0xa0>)
 80078ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078d2:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 80078d4:	f7f9 fa26 	bl	8000d24 <DM_Init>
  DM_PostInit();
 80078d8:	f7f9 fa32 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80078dc:	f7fd fa20 	bl	8004d20 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80078e0:	e7fe      	b.n	80078e0 <main+0x90>
 80078e2:	bf00      	nop
 80078e4:	20002b70 	.word	0x20002b70
 80078e8:	48000800 	.word	0x48000800
 80078ec:	20002c08 	.word	0x20002c08
 80078f0:	40001000 	.word	0x40001000

080078f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b0a8      	sub	sp, #160	; 0xa0
 80078f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80078fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80078fe:	2238      	movs	r2, #56	; 0x38
 8007900:	2100      	movs	r1, #0
 8007902:	4618      	mov	r0, r3
 8007904:	f008 fbc4 	bl	8010090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007918:	463b      	mov	r3, r7
 800791a:	2254      	movs	r2, #84	; 0x54
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f008 fbb6 	bl	8010090 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007924:	2000      	movs	r0, #0
 8007926:	f004 f9b3 	bl	800bc90 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800792a:	2322      	movs	r3, #34	; 0x22
 800792c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800792e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007932:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007934:	2340      	movs	r3, #64	; 0x40
 8007936:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007938:	2301      	movs	r3, #1
 800793a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800793e:	2302      	movs	r3, #2
 8007940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007944:	2302      	movs	r3, #2
 8007946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800794a:	2302      	movs	r3, #2
 800794c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007950:	232a      	movs	r3, #42	; 0x2a
 8007952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007956:	2302      	movs	r3, #2
 8007958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800795c:	2304      	movs	r3, #4
 800795e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007962:	2302      	movs	r3, #2
 8007964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007968:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800796c:	4618      	mov	r0, r3
 800796e:	f004 fa33 	bl	800bdd8 <HAL_RCC_OscConfig>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007978:	f000 f82a 	bl	80079d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800797c:	230f      	movs	r3, #15
 800797e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007980:	2303      	movs	r3, #3
 8007982:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007984:	2300      	movs	r3, #0
 8007986:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007988:	2300      	movs	r3, #0
 800798a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800798c:	2300      	movs	r3, #0
 800798e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007990:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007994:	2108      	movs	r1, #8
 8007996:	4618      	mov	r0, r3
 8007998:	f004 fd36 	bl	800c408 <HAL_RCC_ClockConfig>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80079a2:	f000 f815 	bl	80079d0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80079a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80079aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80079ac:	2300      	movs	r3, #0
 80079ae:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80079b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079b6:	463b      	mov	r3, r7
 80079b8:	4618      	mov	r0, r3
 80079ba:	f004 ff15 	bl	800c7e8 <HAL_RCCEx_PeriphCLKConfig>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80079c4:	f000 f804 	bl	80079d0 <Error_Handler>
  }
}
 80079c8:	bf00      	nop
 80079ca:	37a0      	adds	r7, #160	; 0xa0
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f043 0204 	orr.w	r2, r3, #4
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <LL_AHB2_GRP1_EnableClock>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a08:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a0c:	4907      	ldr	r1, [pc, #28]	; (8007a2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a14:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	bf00      	nop
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	40021000 	.word	0x40021000

08007a30 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007a34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007a38:	f7ff ffe2 	bl	8007a00 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007a3c:	4802      	ldr	r0, [pc, #8]	; (8007a48 <MX_RNG_Init+0x18>)
 8007a3e:	f7ff ffce 	bl	80079de <LL_RNG_Enable>

}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	50060800 	.word	0x50060800

08007a4c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007a50:	4b1b      	ldr	r3, [pc, #108]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a52:	4a1c      	ldr	r2, [pc, #112]	; (8007ac4 <MX_SPI3_Init+0x78>)
 8007a54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007a56:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007a5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007a5e:	4b18      	ldr	r3, [pc, #96]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007a64:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007a6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a6c:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007a78:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007a80:	4b0f      	ldr	r3, [pc, #60]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a82:	2210      	movs	r2, #16
 8007a84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007a86:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007a9a:	2207      	movs	r2, #7
 8007a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007a9e:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007aa4:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007aaa:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <MX_SPI3_Init+0x74>)
 8007aac:	f005 f8e8 	bl	800cc80 <HAL_SPI_Init>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007ab6:	f7ff ff8b 	bl	80079d0 <Error_Handler>
  }

}
 8007aba:	bf00      	nop
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20002a74 	.word	0x20002a74
 8007ac4:	40003c00 	.word	0x40003c00

08007ac8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad0:	f107 0314 	add.w	r3, r7, #20
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	609a      	str	r2, [r3, #8]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <HAL_SPI_MspInit+0x7c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d128      	bne.n	8007b3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007aea:	4b17      	ldr	r3, [pc, #92]	; (8007b48 <HAL_SPI_MspInit+0x80>)
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	4a16      	ldr	r2, [pc, #88]	; (8007b48 <HAL_SPI_MspInit+0x80>)
 8007af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af4:	6593      	str	r3, [r2, #88]	; 0x58
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <HAL_SPI_MspInit+0x80>)
 8007af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <HAL_SPI_MspInit+0x80>)
 8007b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b06:	4a10      	ldr	r2, [pc, #64]	; (8007b48 <HAL_SPI_MspInit+0x80>)
 8007b08:	f043 0304 	orr.w	r3, r3, #4
 8007b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b0e:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <HAL_SPI_MspInit+0x80>)
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007b1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b20:	2302      	movs	r3, #2
 8007b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007b2c:	2306      	movs	r3, #6
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	4619      	mov	r1, r3
 8007b36:	4805      	ldr	r0, [pc, #20]	; (8007b4c <HAL_SPI_MspInit+0x84>)
 8007b38:	f003 fe2e 	bl	800b798 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3728      	adds	r7, #40	; 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40003c00 	.word	0x40003c00
 8007b48:	40021000 	.word	0x40021000
 8007b4c:	48000800 	.word	0x48000800

08007b50 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b54:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4a04      	ldr	r2, [pc, #16]	; (8007b6c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b5e:	6093      	str	r3, [r2, #8]
}
 8007b60:	bf00      	nop
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40007000 	.word	0x40007000

08007b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b76:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <HAL_MspInit+0x44>)
 8007b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7a:	4a0e      	ldr	r2, [pc, #56]	; (8007bb4 <HAL_MspInit+0x44>)
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	6613      	str	r3, [r2, #96]	; 0x60
 8007b82:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <HAL_MspInit+0x44>)
 8007b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	607b      	str	r3, [r7, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <HAL_MspInit+0x44>)
 8007b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b92:	4a08      	ldr	r2, [pc, #32]	; (8007bb4 <HAL_MspInit+0x44>)
 8007b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b98:	6593      	str	r3, [r2, #88]	; 0x58
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_MspInit+0x44>)
 8007b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007ba6:	f7ff ffd3 	bl	8007b50 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40021000 	.word	0x40021000

08007bb8 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d101      	bne.n	8007bd2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	40010400 	.word	0x40010400

08007be4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007bec:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6153      	str	r3, [r2, #20]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40010400 	.word	0x40010400

08007c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c08:	bf00      	nop
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8007c18:	4801      	ldr	r0, [pc, #4]	; (8007c20 <HardFault_Handler+0xc>)
 8007c1a:	f7f9 fc85 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c1e:	e7fe      	b.n	8007c1e <HardFault_Handler+0xa>
 8007c20:	08014ffc 	.word	0x08014ffc

08007c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8007c28:	4801      	ldr	r0, [pc, #4]	; (8007c30 <MemManage_Handler+0xc>)
 8007c2a:	f7f9 fc7d 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c2e:	e7fe      	b.n	8007c2e <MemManage_Handler+0xa>
 8007c30:	08015008 	.word	0x08015008

08007c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <BusFault_Handler+0xc>)
 8007c3a:	f7f9 fc75 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c3e:	e7fe      	b.n	8007c3e <BusFault_Handler+0xa>
 8007c40:	08015018 	.word	0x08015018

08007c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <UsageFault_Handler+0xc>)
 8007c4a:	f7f9 fc6d 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c4e:	e7fe      	b.n	8007c4e <UsageFault_Handler+0xa>
 8007c50:	08015024 	.word	0x08015024

08007c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c58:	bf00      	nop
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c62:	b480      	push	{r7}
 8007c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c66:	bf00      	nop
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c82:	f000 fd27 	bl	80086d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c86:	bf00      	nop
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007c8e:	f7fd f905 	bl	8004e9c <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007c92:	2001      	movs	r0, #1
 8007c94:	f7ff ff90 	bl	8007bb8 <LL_EXTI_IsActiveFlag_0_31>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	f7ff ffa0 	bl	8007be4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007ca4:	bf00      	nop
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007cac:	f7fd f91c 	bl	8004ee8 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007cb0:	2002      	movs	r0, #2
 8007cb2:	f7ff ff81 	bl	8007bb8 <LL_EXTI_IsActiveFlag_0_31>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007cbc:	2002      	movs	r0, #2
 8007cbe:	f7ff ff91 	bl	8007be4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007cc2:	bf00      	nop
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007cca:	f7fd f933 	bl	8004f34 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007cce:	2004      	movs	r0, #4
 8007cd0:	f7ff ff72 	bl	8007bb8 <LL_EXTI_IsActiveFlag_0_31>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007cda:	2004      	movs	r0, #4
 8007cdc:	f7ff ff82 	bl	8007be4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007ce0:	bf00      	nop
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007ce8:	4802      	ldr	r0, [pc, #8]	; (8007cf4 <DMA1_Channel1_IRQHandler+0x10>)
 8007cea:	f003 fc05 	bl	800b4f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007cee:	bf00      	nop
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20002968 	.word	0x20002968

08007cf8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007cfc:	4802      	ldr	r0, [pc, #8]	; (8007d08 <DMA1_Channel2_IRQHandler+0x10>)
 8007cfe:	f003 fbfb 	bl	800b4f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20002270 	.word	0x20002270

08007d0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007d10:	4802      	ldr	r0, [pc, #8]	; (8007d1c <DMA1_Channel3_IRQHandler+0x10>)
 8007d12:	f003 fbf1 	bl	800b4f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007d16:	bf00      	nop
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20002a14 	.word	0x20002a14

08007d20 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007d24:	f7f9 f826 	bl	8000d74 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007d28:	f7fd f92a 	bl	8004f80 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d2c:	4803      	ldr	r0, [pc, #12]	; (8007d3c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007d2e:	f005 fbc9 	bl	800d4c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007d32:	4803      	ldr	r0, [pc, #12]	; (8007d40 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007d34:	f005 fbc6 	bl	800d4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007d38:	bf00      	nop
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20002c08 	.word	0x20002c08
 8007d40:	20002b24 	.word	0x20002b24

08007d44 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8007d48:	f7fc f916 	bl	8003f78 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d4c:	4803      	ldr	r0, [pc, #12]	; (8007d5c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8007d4e:	f005 fbb9 	bl	800d4c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8007d52:	4803      	ldr	r0, [pc, #12]	; (8007d60 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8007d54:	f005 fbb6 	bl	800d4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007d58:	bf00      	nop
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20002c08 	.word	0x20002c08
 8007d60:	20002b70 	.word	0x20002b70

08007d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007d68:	4802      	ldr	r0, [pc, #8]	; (8007d74 <TIM3_IRQHandler+0x10>)
 8007d6a:	f005 fbab 	bl	800d4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d6e:	bf00      	nop
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	200022dc 	.word	0x200022dc

08007d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007d7c:	f7fd f83e 	bl	8004dfc <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007d80:	f7fd f864 	bl	8004e4c <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007d84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d88:	f7ff ff16 	bl	8007bb8 <LL_EXTI_IsActiveFlag_0_31>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007d92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007d96:	f7ff ff25 	bl	8007be4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007d9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d9e:	f7ff ff0b 	bl	8007bb8 <LL_EXTI_IsActiveFlag_0_31>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007da8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007dac:	f7ff ff1a 	bl	8007be4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007db0:	bf00      	nop
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007db8:	f7fc ffc2 	bl	8004d40 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007dbc:	4802      	ldr	r0, [pc, #8]	; (8007dc8 <TIM5_IRQHandler+0x14>)
 8007dbe:	f005 fb81 	bl	800d4c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007dc2:	bf00      	nop
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20002bbc 	.word	0x20002bbc

08007dcc <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8007dd0:	4802      	ldr	r0, [pc, #8]	; (8007ddc <COMP1_2_3_IRQHandler+0x10>)
 8007dd2:	f002 fc33 	bl	800a63c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8007dd6:	bf00      	nop
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200029c8 	.word	0x200029c8

08007de0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	e00a      	b.n	8007e08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007df2:	f3af 8000 	nop.w
 8007df6:	4601      	mov	r1, r0
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	60ba      	str	r2, [r7, #8]
 8007dfe:	b2ca      	uxtb	r2, r1
 8007e00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	3301      	adds	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	dbf0      	blt.n	8007df2 <_read+0x12>
	}

return len;
 8007e10:	687b      	ldr	r3, [r7, #4]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
	return -1;
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e42:	605a      	str	r2, [r3, #4]
	return 0;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <_isatty>:

int _isatty(int file)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
	return 1;
 8007e5a:	2301      	movs	r3, #1
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
	return 0;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007e8c:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <_sbrk+0x50>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <_sbrk+0x16>
		heap_end = &end;
 8007e94:	4b0f      	ldr	r3, [pc, #60]	; (8007ed4 <_sbrk+0x50>)
 8007e96:	4a10      	ldr	r2, [pc, #64]	; (8007ed8 <_sbrk+0x54>)
 8007e98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007e9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <_sbrk+0x50>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <_sbrk+0x50>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	466a      	mov	r2, sp
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d907      	bls.n	8007ebe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007eae:	f008 f8c5 	bl	801003c <__errno>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	230c      	movs	r3, #12
 8007eb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ebc:	e006      	b.n	8007ecc <_sbrk+0x48>
	}

	heap_end += incr;
 8007ebe:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <_sbrk+0x50>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	4a03      	ldr	r2, [pc, #12]	; (8007ed4 <_sbrk+0x50>)
 8007ec8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007eca:	68fb      	ldr	r3, [r7, #12]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20002260 	.word	0x20002260
 8007ed8:	20002cf8 	.word	0x20002cf8

08007edc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007ee0:	4b08      	ldr	r3, [pc, #32]	; (8007f04 <SystemInit+0x28>)
 8007ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee6:	4a07      	ldr	r2, [pc, #28]	; (8007f04 <SystemInit+0x28>)
 8007ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ef0:	4b04      	ldr	r3, [pc, #16]	; (8007f04 <SystemInit+0x28>)
 8007ef2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ef6:	609a      	str	r2, [r3, #8]
#endif
}
 8007ef8:	bf00      	nop
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	e000ed00 	.word	0xe000ed00

08007f08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b09a      	sub	sp, #104	; 0x68
 8007f0c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007f0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f12:	2224      	movs	r2, #36	; 0x24
 8007f14:	2100      	movs	r1, #0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f008 f8ba 	bl	8010090 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	605a      	str	r2, [r3, #4]
 8007f26:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007f28:	1d3b      	adds	r3, r7, #4
 8007f2a:	2234      	movs	r2, #52	; 0x34
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f008 f8ae 	bl	8010090 <memset>

  htim1.Instance = TIM1;
 8007f34:	4b2a      	ldr	r3, [pc, #168]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f36:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <MX_TIM1_Init+0xdc>)
 8007f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007f3a:	4b29      	ldr	r3, [pc, #164]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8007f40:	4b27      	ldr	r3, [pc, #156]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f42:	2260      	movs	r2, #96	; 0x60
 8007f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007f46:	4b26      	ldr	r3, [pc, #152]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f4e:	4b24      	ldr	r3, [pc, #144]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f54:	4b22      	ldr	r3, [pc, #136]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f5a:	4b21      	ldr	r3, [pc, #132]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f5c:	2280      	movs	r2, #128	; 0x80
 8007f5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007f60:	2302      	movs	r3, #2
 8007f62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007f64:	2300      	movs	r3, #0
 8007f66:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007f74:	2300      	movs	r3, #0
 8007f76:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007f84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4815      	ldr	r0, [pc, #84]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007f8c:	f005 f9f4 	bl	800d378 <HAL_TIM_Encoder_Init>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007f96:	f7ff fd1b 	bl	80079d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007f9a:	2320      	movs	r3, #32
 8007f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007fa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007faa:	4619      	mov	r1, r3
 8007fac:	480c      	ldr	r0, [pc, #48]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007fae:	f006 facf 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007fb8:	f7ff fd0a 	bl	80079d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007fc4:	1d3b      	adds	r3, r7, #4
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <MX_TIM1_Init+0xd8>)
 8007fca:	f006 fb57 	bl	800e67c <HAL_TIMEx_ConfigBreakDeadTime>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007fd4:	f7ff fcfc 	bl	80079d0 <Error_Handler>
  }

}
 8007fd8:	bf00      	nop
 8007fda:	3768      	adds	r7, #104	; 0x68
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20002c08 	.word	0x20002c08
 8007fe4:	40012c00 	.word	0x40012c00

08007fe8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fee:	f107 0310 	add.w	r3, r7, #16
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	605a      	str	r2, [r3, #4]
 8007ff8:	609a      	str	r2, [r3, #8]
 8007ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ffc:	1d3b      	adds	r3, r7, #4
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	605a      	str	r2, [r3, #4]
 8008004:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8008006:	4b1d      	ldr	r3, [pc, #116]	; (800807c <MX_TIM2_Init+0x94>)
 8008008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800800c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800800e:	4b1b      	ldr	r3, [pc, #108]	; (800807c <MX_TIM2_Init+0x94>)
 8008010:	2200      	movs	r2, #0
 8008012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008014:	4b19      	ldr	r3, [pc, #100]	; (800807c <MX_TIM2_Init+0x94>)
 8008016:	2200      	movs	r2, #0
 8008018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800801a:	4b18      	ldr	r3, [pc, #96]	; (800807c <MX_TIM2_Init+0x94>)
 800801c:	2201      	movs	r2, #1
 800801e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008020:	4b16      	ldr	r3, [pc, #88]	; (800807c <MX_TIM2_Init+0x94>)
 8008022:	2200      	movs	r2, #0
 8008024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008026:	4b15      	ldr	r3, [pc, #84]	; (800807c <MX_TIM2_Init+0x94>)
 8008028:	2280      	movs	r2, #128	; 0x80
 800802a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800802c:	4813      	ldr	r0, [pc, #76]	; (800807c <MX_TIM2_Init+0x94>)
 800802e:	f004 feb9 	bl	800cda4 <HAL_TIM_Base_Init>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008038:	f7ff fcca 	bl	80079d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800803c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008040:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008042:	f107 0310 	add.w	r3, r7, #16
 8008046:	4619      	mov	r1, r3
 8008048:	480c      	ldr	r0, [pc, #48]	; (800807c <MX_TIM2_Init+0x94>)
 800804a:	f005 fccb 	bl	800d9e4 <HAL_TIM_ConfigClockSource>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008054:	f7ff fcbc 	bl	80079d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008058:	2320      	movs	r3, #32
 800805a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008060:	1d3b      	adds	r3, r7, #4
 8008062:	4619      	mov	r1, r3
 8008064:	4805      	ldr	r0, [pc, #20]	; (800807c <MX_TIM2_Init+0x94>)
 8008066:	f006 fa73 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008070:	f7ff fcae 	bl	80079d0 <Error_Handler>
  }

}
 8008074:	bf00      	nop
 8008076:	3720      	adds	r7, #32
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20002c54 	.word	0x20002c54

08008080 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008086:	f107 0310 	add.w	r3, r7, #16
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	605a      	str	r2, [r3, #4]
 8008090:	609a      	str	r2, [r3, #8]
 8008092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008094:	1d3b      	adds	r3, r7, #4
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	605a      	str	r2, [r3, #4]
 800809c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800809e:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <MX_TIM3_Init+0x94>)
 80080a0:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <MX_TIM3_Init+0x98>)
 80080a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80080a4:	4b1b      	ldr	r3, [pc, #108]	; (8008114 <MX_TIM3_Init+0x94>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80080aa:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <MX_TIM3_Init+0x94>)
 80080ac:	2210      	movs	r2, #16
 80080ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80080b0:	4b18      	ldr	r3, [pc, #96]	; (8008114 <MX_TIM3_Init+0x94>)
 80080b2:	2201      	movs	r2, #1
 80080b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80080b6:	4b17      	ldr	r3, [pc, #92]	; (8008114 <MX_TIM3_Init+0x94>)
 80080b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080be:	4b15      	ldr	r3, [pc, #84]	; (8008114 <MX_TIM3_Init+0x94>)
 80080c0:	2280      	movs	r2, #128	; 0x80
 80080c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80080c4:	4813      	ldr	r0, [pc, #76]	; (8008114 <MX_TIM3_Init+0x94>)
 80080c6:	f004 fe6d 	bl	800cda4 <HAL_TIM_Base_Init>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80080d0:	f7ff fc7e 	bl	80079d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80080da:	f107 0310 	add.w	r3, r7, #16
 80080de:	4619      	mov	r1, r3
 80080e0:	480c      	ldr	r0, [pc, #48]	; (8008114 <MX_TIM3_Init+0x94>)
 80080e2:	f005 fc7f 	bl	800d9e4 <HAL_TIM_ConfigClockSource>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80080ec:	f7ff fc70 	bl	80079d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80080f0:	2320      	movs	r3, #32
 80080f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80080f8:	1d3b      	adds	r3, r7, #4
 80080fa:	4619      	mov	r1, r3
 80080fc:	4805      	ldr	r0, [pc, #20]	; (8008114 <MX_TIM3_Init+0x94>)
 80080fe:	f006 fa27 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008108:	f7ff fc62 	bl	80079d0 <Error_Handler>
  }

}
 800810c:	bf00      	nop
 800810e:	3720      	adds	r7, #32
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	200022dc 	.word	0x200022dc
 8008118:	40000400 	.word	0x40000400

0800811c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008122:	f107 0310 	add.w	r3, r7, #16
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	609a      	str	r2, [r3, #8]
 800812e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008130:	1d3b      	adds	r3, r7, #4
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	605a      	str	r2, [r3, #4]
 8008138:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800813a:	4b1d      	ldr	r3, [pc, #116]	; (80081b0 <MX_TIM5_Init+0x94>)
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <MX_TIM5_Init+0x98>)
 800813e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008140:	4b1b      	ldr	r3, [pc, #108]	; (80081b0 <MX_TIM5_Init+0x94>)
 8008142:	2200      	movs	r2, #0
 8008144:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008146:	4b1a      	ldr	r3, [pc, #104]	; (80081b0 <MX_TIM5_Init+0x94>)
 8008148:	2200      	movs	r2, #0
 800814a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800814c:	4b18      	ldr	r3, [pc, #96]	; (80081b0 <MX_TIM5_Init+0x94>)
 800814e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008152:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008154:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <MX_TIM5_Init+0x94>)
 8008156:	2200      	movs	r2, #0
 8008158:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <MX_TIM5_Init+0x94>)
 800815c:	2280      	movs	r2, #128	; 0x80
 800815e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008160:	4813      	ldr	r0, [pc, #76]	; (80081b0 <MX_TIM5_Init+0x94>)
 8008162:	f004 fe1f 	bl	800cda4 <HAL_TIM_Base_Init>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800816c:	f7ff fc30 	bl	80079d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008176:	f107 0310 	add.w	r3, r7, #16
 800817a:	4619      	mov	r1, r3
 800817c:	480c      	ldr	r0, [pc, #48]	; (80081b0 <MX_TIM5_Init+0x94>)
 800817e:	f005 fc31 	bl	800d9e4 <HAL_TIM_ConfigClockSource>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008188:	f7ff fc22 	bl	80079d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800818c:	2300      	movs	r3, #0
 800818e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008194:	1d3b      	adds	r3, r7, #4
 8008196:	4619      	mov	r1, r3
 8008198:	4805      	ldr	r0, [pc, #20]	; (80081b0 <MX_TIM5_Init+0x94>)
 800819a:	f006 f9d9 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80081a4:	f7ff fc14 	bl	80079d0 <Error_Handler>
  }

}
 80081a8:	bf00      	nop
 80081aa:	3720      	adds	r7, #32
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20002bbc 	.word	0x20002bbc
 80081b4:	40000c00 	.word	0x40000c00

080081b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b094      	sub	sp, #80	; 0x50
 80081bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	605a      	str	r2, [r3, #4]
 80081c8:	609a      	str	r2, [r3, #8]
 80081ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80081d8:	463b      	mov	r3, r7
 80081da:	2234      	movs	r2, #52	; 0x34
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f007 ff56 	bl	8010090 <memset>

  htim8.Instance = TIM8;
 80081e4:	4b26      	ldr	r3, [pc, #152]	; (8008280 <MX_TIM8_Init+0xc8>)
 80081e6:	4a27      	ldr	r2, [pc, #156]	; (8008284 <MX_TIM8_Init+0xcc>)
 80081e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80081ea:	4b25      	ldr	r3, [pc, #148]	; (8008280 <MX_TIM8_Init+0xc8>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081f0:	4b23      	ldr	r3, [pc, #140]	; (8008280 <MX_TIM8_Init+0xc8>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80081f6:	4b22      	ldr	r3, [pc, #136]	; (8008280 <MX_TIM8_Init+0xc8>)
 80081f8:	2201      	movs	r2, #1
 80081fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081fc:	4b20      	ldr	r3, [pc, #128]	; (8008280 <MX_TIM8_Init+0xc8>)
 80081fe:	2200      	movs	r2, #0
 8008200:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008202:	4b1f      	ldr	r3, [pc, #124]	; (8008280 <MX_TIM8_Init+0xc8>)
 8008204:	2200      	movs	r2, #0
 8008206:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008208:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <MX_TIM8_Init+0xc8>)
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800820e:	481c      	ldr	r0, [pc, #112]	; (8008280 <MX_TIM8_Init+0xc8>)
 8008210:	f004 fdc8 	bl	800cda4 <HAL_TIM_Base_Init>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800821a:	f7ff fbd9 	bl	80079d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800821e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008222:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008224:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008228:	4619      	mov	r1, r3
 800822a:	4815      	ldr	r0, [pc, #84]	; (8008280 <MX_TIM8_Init+0xc8>)
 800822c:	f005 fbda 	bl	800d9e4 <HAL_TIM_ConfigClockSource>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008236:	f7ff fbcb 	bl	80079d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800823a:	2320      	movs	r3, #32
 800823c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800823e:	2300      	movs	r3, #0
 8008240:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008242:	2300      	movs	r3, #0
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008246:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800824a:	4619      	mov	r1, r3
 800824c:	480c      	ldr	r0, [pc, #48]	; (8008280 <MX_TIM8_Init+0xc8>)
 800824e:	f006 f97f 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008258:	f7ff fbba 	bl	80079d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800825c:	2300      	movs	r3, #0
 800825e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008260:	2300      	movs	r3, #0
 8008262:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008264:	463b      	mov	r3, r7
 8008266:	4619      	mov	r1, r3
 8008268:	4805      	ldr	r0, [pc, #20]	; (8008280 <MX_TIM8_Init+0xc8>)
 800826a:	f006 fa07 	bl	800e67c <HAL_TIMEx_ConfigBreakDeadTime>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008274:	f7ff fbac 	bl	80079d0 <Error_Handler>
  }

}
 8008278:	bf00      	nop
 800827a:	3750      	adds	r7, #80	; 0x50
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20002ad8 	.word	0x20002ad8
 8008284:	40013400 	.word	0x40013400

08008288 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800828e:	f107 0310 	add.w	r3, r7, #16
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	605a      	str	r2, [r3, #4]
 8008298:	609a      	str	r2, [r3, #8]
 800829a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800829c:	1d3b      	adds	r3, r7, #4
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80082a6:	4b1f      	ldr	r3, [pc, #124]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082a8:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <MX_TIM15_Init+0xa0>)
 80082aa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80082ac:	4b1d      	ldr	r3, [pc, #116]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082b2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082b4:	4b1b      	ldr	r3, [pc, #108]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80082ba:	4b1a      	ldr	r3, [pc, #104]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082c0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082c2:	4b18      	ldr	r3, [pc, #96]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80082c8:	4b16      	ldr	r3, [pc, #88]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082ce:	4b15      	ldr	r3, [pc, #84]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80082d4:	4813      	ldr	r0, [pc, #76]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082d6:	f004 fd65 	bl	800cda4 <HAL_TIM_Base_Init>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80082e0:	f7ff fb76 	bl	80079d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80082ea:	f107 0310 	add.w	r3, r7, #16
 80082ee:	4619      	mov	r1, r3
 80082f0:	480c      	ldr	r0, [pc, #48]	; (8008324 <MX_TIM15_Init+0x9c>)
 80082f2:	f005 fb77 	bl	800d9e4 <HAL_TIM_ConfigClockSource>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80082fc:	f7ff fb68 	bl	80079d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008300:	2300      	movs	r3, #0
 8008302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008308:	1d3b      	adds	r3, r7, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4805      	ldr	r0, [pc, #20]	; (8008324 <MX_TIM15_Init+0x9c>)
 800830e:	f006 f91f 	bl	800e550 <HAL_TIMEx_MasterConfigSynchronization>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008318:	f7ff fb5a 	bl	80079d0 <Error_Handler>
  }

}
 800831c:	bf00      	nop
 800831e:	3720      	adds	r7, #32
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20002b24 	.word	0x20002b24
 8008328:	40014000 	.word	0x40014000

0800832c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008330:	4b10      	ldr	r3, [pc, #64]	; (8008374 <MX_TIM16_Init+0x48>)
 8008332:	4a11      	ldr	r2, [pc, #68]	; (8008378 <MX_TIM16_Init+0x4c>)
 8008334:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008336:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <MX_TIM16_Init+0x48>)
 8008338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800833c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800833e:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <MX_TIM16_Init+0x48>)
 8008340:	2200      	movs	r2, #0
 8008342:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008344:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <MX_TIM16_Init+0x48>)
 8008346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800834a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800834c:	4b09      	ldr	r3, [pc, #36]	; (8008374 <MX_TIM16_Init+0x48>)
 800834e:	2200      	movs	r2, #0
 8008350:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008352:	4b08      	ldr	r3, [pc, #32]	; (8008374 <MX_TIM16_Init+0x48>)
 8008354:	2200      	movs	r2, #0
 8008356:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <MX_TIM16_Init+0x48>)
 800835a:	2200      	movs	r2, #0
 800835c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800835e:	4805      	ldr	r0, [pc, #20]	; (8008374 <MX_TIM16_Init+0x48>)
 8008360:	f004 fd20 	bl	800cda4 <HAL_TIM_Base_Init>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800836a:	f7ff fb31 	bl	80079d0 <Error_Handler>
  }

}
 800836e:	bf00      	nop
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20002ca0 	.word	0x20002ca0
 8008378:	40014400 	.word	0x40014400

0800837c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008380:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <MX_TIM17_Init+0x48>)
 8008382:	4a11      	ldr	r2, [pc, #68]	; (80083c8 <MX_TIM17_Init+0x4c>)
 8008384:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008386:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <MX_TIM17_Init+0x48>)
 8008388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800838c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <MX_TIM17_Init+0x48>)
 8008390:	2200      	movs	r2, #0
 8008392:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <MX_TIM17_Init+0x48>)
 8008396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800839a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <MX_TIM17_Init+0x48>)
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <MX_TIM17_Init+0x48>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <MX_TIM17_Init+0x48>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80083ae:	4805      	ldr	r0, [pc, #20]	; (80083c4 <MX_TIM17_Init+0x48>)
 80083b0:	f004 fcf8 	bl	800cda4 <HAL_TIM_Base_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80083ba:	f7ff fb09 	bl	80079d0 <Error_Handler>
  }

}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20002b70 	.word	0x20002b70
 80083c8:	40014800 	.word	0x40014800

080083cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08a      	sub	sp, #40	; 0x28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d4:	f107 0314 	add.w	r3, r7, #20
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	605a      	str	r2, [r3, #4]
 80083de:	609a      	str	r2, [r3, #8]
 80083e0:	60da      	str	r2, [r3, #12]
 80083e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <HAL_TIM_Encoder_MspInit+0x9c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d137      	bne.n	800845e <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <HAL_TIM_Encoder_MspInit+0xa0>)
 80083f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f2:	4a1e      	ldr	r2, [pc, #120]	; (800846c <HAL_TIM_Encoder_MspInit+0xa0>)
 80083f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083f8:	6613      	str	r3, [r2, #96]	; 0x60
 80083fa:	4b1c      	ldr	r3, [pc, #112]	; (800846c <HAL_TIM_Encoder_MspInit+0xa0>)
 80083fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008406:	4b19      	ldr	r3, [pc, #100]	; (800846c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840a:	4a18      	ldr	r2, [pc, #96]	; (800846c <HAL_TIM_Encoder_MspInit+0xa0>)
 800840c:	f043 0304 	orr.w	r3, r3, #4
 8008410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008412:	4b16      	ldr	r3, [pc, #88]	; (800846c <HAL_TIM_Encoder_MspInit+0xa0>)
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800841e:	2303      	movs	r3, #3
 8008420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008422:	2302      	movs	r3, #2
 8008424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008426:	2300      	movs	r3, #0
 8008428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800842a:	2300      	movs	r3, #0
 800842c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800842e:	2302      	movs	r3, #2
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008432:	f107 0314 	add.w	r3, r7, #20
 8008436:	4619      	mov	r1, r3
 8008438:	480d      	ldr	r0, [pc, #52]	; (8008470 <HAL_TIM_Encoder_MspInit+0xa4>)
 800843a:	f003 f9ad 	bl	800b798 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	2018      	movs	r0, #24
 8008444:	f002 fa7b 	bl	800a93e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008448:	2018      	movs	r0, #24
 800844a:	f002 fa92 	bl	800a972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800844e:	2200      	movs	r2, #0
 8008450:	2101      	movs	r1, #1
 8008452:	201a      	movs	r0, #26
 8008454:	f002 fa73 	bl	800a93e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008458:	201a      	movs	r0, #26
 800845a:	f002 fa8a 	bl	800a972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800845e:	bf00      	nop
 8008460:	3728      	adds	r7, #40	; 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40021000 	.word	0x40021000
 8008470:	48000800 	.word	0x48000800

08008474 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08a      	sub	sp, #40	; 0x28
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008484:	d10c      	bne.n	80084a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008486:	4b4e      	ldr	r3, [pc, #312]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848a:	4a4d      	ldr	r2, [pc, #308]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 800848c:	f043 0301 	orr.w	r3, r3, #1
 8008490:	6593      	str	r3, [r2, #88]	; 0x58
 8008492:	4b4b      	ldr	r3, [pc, #300]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800849e:	e08a      	b.n	80085b6 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM3)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a47      	ldr	r2, [pc, #284]	; (80085c4 <HAL_TIM_Base_MspInit+0x150>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d114      	bne.n	80084d4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80084aa:	4b45      	ldr	r3, [pc, #276]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	4a44      	ldr	r2, [pc, #272]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 80084b0:	f043 0302 	orr.w	r3, r3, #2
 80084b4:	6593      	str	r3, [r2, #88]	; 0x58
 80084b6:	4b42      	ldr	r3, [pc, #264]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 80084b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	623b      	str	r3, [r7, #32]
 80084c0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	201d      	movs	r0, #29
 80084c8:	f002 fa39 	bl	800a93e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80084cc:	201d      	movs	r0, #29
 80084ce:	f002 fa50 	bl	800a972 <HAL_NVIC_EnableIRQ>
}
 80084d2:	e070      	b.n	80085b6 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM5)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a3b      	ldr	r2, [pc, #236]	; (80085c8 <HAL_TIM_Base_MspInit+0x154>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d114      	bne.n	8008508 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80084de:	4b38      	ldr	r3, [pc, #224]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 80084e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e2:	4a37      	ldr	r2, [pc, #220]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 80084e4:	f043 0308 	orr.w	r3, r3, #8
 80084e8:	6593      	str	r3, [r2, #88]	; 0x58
 80084ea:	4b35      	ldr	r3, [pc, #212]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 80084ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	61fb      	str	r3, [r7, #28]
 80084f4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2102      	movs	r1, #2
 80084fa:	2032      	movs	r0, #50	; 0x32
 80084fc:	f002 fa1f 	bl	800a93e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008500:	2032      	movs	r0, #50	; 0x32
 8008502:	f002 fa36 	bl	800a972 <HAL_NVIC_EnableIRQ>
}
 8008506:	e056      	b.n	80085b6 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM8)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a2f      	ldr	r2, [pc, #188]	; (80085cc <HAL_TIM_Base_MspInit+0x158>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d10c      	bne.n	800852c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008512:	4b2b      	ldr	r3, [pc, #172]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008516:	4a2a      	ldr	r2, [pc, #168]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800851c:	6613      	str	r3, [r2, #96]	; 0x60
 800851e:	4b28      	ldr	r3, [pc, #160]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008526:	61bb      	str	r3, [r7, #24]
 8008528:	69bb      	ldr	r3, [r7, #24]
}
 800852a:	e044      	b.n	80085b6 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM15)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a27      	ldr	r2, [pc, #156]	; (80085d0 <HAL_TIM_Base_MspInit+0x15c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d114      	bne.n	8008560 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008536:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853a:	4a21      	ldr	r2, [pc, #132]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 800853c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008540:	6613      	str	r3, [r2, #96]	; 0x60
 8008542:	4b1f      	ldr	r3, [pc, #124]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800854e:	2200      	movs	r2, #0
 8008550:	2100      	movs	r1, #0
 8008552:	2018      	movs	r0, #24
 8008554:	f002 f9f3 	bl	800a93e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008558:	2018      	movs	r0, #24
 800855a:	f002 fa0a 	bl	800a972 <HAL_NVIC_EnableIRQ>
}
 800855e:	e02a      	b.n	80085b6 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM16)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a1b      	ldr	r2, [pc, #108]	; (80085d4 <HAL_TIM_Base_MspInit+0x160>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d10c      	bne.n	8008584 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800856a:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 800856c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856e:	4a14      	ldr	r2, [pc, #80]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008574:	6613      	str	r3, [r2, #96]	; 0x60
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	693b      	ldr	r3, [r7, #16]
}
 8008582:	e018      	b.n	80085b6 <HAL_TIM_Base_MspInit+0x142>
  else if(tim_baseHandle->Instance==TIM17)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <HAL_TIM_Base_MspInit+0x164>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d113      	bne.n	80085b6 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800858e:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008592:	4a0b      	ldr	r2, [pc, #44]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 8008594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008598:	6613      	str	r3, [r2, #96]	; 0x60
 800859a:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <HAL_TIM_Base_MspInit+0x14c>)
 800859c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80085a6:	2200      	movs	r2, #0
 80085a8:	2101      	movs	r1, #1
 80085aa:	201a      	movs	r0, #26
 80085ac:	f002 f9c7 	bl	800a93e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80085b0:	201a      	movs	r0, #26
 80085b2:	f002 f9de 	bl	800a972 <HAL_NVIC_EnableIRQ>
}
 80085b6:	bf00      	nop
 80085b8:	3728      	adds	r7, #40	; 0x28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40021000 	.word	0x40021000
 80085c4:	40000400 	.word	0x40000400
 80085c8:	40000c00 	.word	0x40000c00
 80085cc:	40013400 	.word	0x40013400
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40014400 	.word	0x40014400
 80085d8:	40014800 	.word	0x40014800

080085dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80085dc:	480d      	ldr	r0, [pc, #52]	; (8008614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80085de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80085e0:	480d      	ldr	r0, [pc, #52]	; (8008618 <LoopForever+0x6>)
  ldr r1, =_edata
 80085e2:	490e      	ldr	r1, [pc, #56]	; (800861c <LoopForever+0xa>)
  ldr r2, =_sidata
 80085e4:	4a0e      	ldr	r2, [pc, #56]	; (8008620 <LoopForever+0xe>)
  movs r3, #0
 80085e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80085e8:	e002      	b.n	80085f0 <LoopCopyDataInit>

080085ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085ee:	3304      	adds	r3, #4

080085f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085f4:	d3f9      	bcc.n	80085ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085f6:	4a0b      	ldr	r2, [pc, #44]	; (8008624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80085f8:	4c0b      	ldr	r4, [pc, #44]	; (8008628 <LoopForever+0x16>)
  movs r3, #0
 80085fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085fc:	e001      	b.n	8008602 <LoopFillZerobss>

080085fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008600:	3204      	adds	r2, #4

08008602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008604:	d3fb      	bcc.n	80085fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008606:	f7ff fc69 	bl	8007edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800860a:	f007 fd1d 	bl	8010048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800860e:	f7ff f91f 	bl	8007850 <main>

08008612 <LoopForever>:

LoopForever:
    b LoopForever
 8008612:	e7fe      	b.n	8008612 <LoopForever>
  ldr   r0, =_estack
 8008614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800861c:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 8008620:	08015598 	.word	0x08015598
  ldr r2, =_sbss
 8008624:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 8008628:	20002cf4 	.word	0x20002cf4

0800862c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800862c:	e7fe      	b.n	800862c <ADC1_2_IRQHandler>

0800862e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008638:	2003      	movs	r0, #3
 800863a:	f002 f975 	bl	800a928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800863e:	2000      	movs	r0, #0
 8008640:	f000 f80e 	bl	8008660 <HAL_InitTick>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	71fb      	strb	r3, [r7, #7]
 800864e:	e001      	b.n	8008654 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008650:	f7ff fa8e 	bl	8007b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008654:	79fb      	ldrb	r3, [r7, #7]

}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_InitTick+0x68>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d022      	beq.n	80086ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008674:	4b15      	ldr	r3, [pc, #84]	; (80086cc <HAL_InitTick+0x6c>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <HAL_InitTick+0x68>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008680:	fbb1 f3f3 	udiv	r3, r1, r3
 8008684:	fbb2 f3f3 	udiv	r3, r2, r3
 8008688:	4618      	mov	r0, r3
 800868a:	f002 f98e 	bl	800a9aa <HAL_SYSTICK_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10f      	bne.n	80086b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b0f      	cmp	r3, #15
 8008698:	d809      	bhi.n	80086ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800869a:	2200      	movs	r2, #0
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a2:	f002 f94c 	bl	800a93e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80086a6:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <HAL_InitTick+0x70>)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	e007      	b.n	80086be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	73fb      	strb	r3, [r7, #15]
 80086b2:	e004      	b.n	80086be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
 80086b8:	e001      	b.n	80086be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000c3c 	.word	0x20000c3c
 80086cc:	20000c34 	.word	0x20000c34
 80086d0:	20000c38 	.word	0x20000c38

080086d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <HAL_IncTick+0x1c>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <HAL_IncTick+0x20>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4413      	add	r3, r2
 80086e2:	4a03      	ldr	r2, [pc, #12]	; (80086f0 <HAL_IncTick+0x1c>)
 80086e4:	6013      	str	r3, [r2, #0]
}
 80086e6:	bf00      	nop
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	20002cec 	.word	0x20002cec
 80086f4:	20000c3c 	.word	0x20000c3c

080086f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return uwTick;
 80086fc:	4b03      	ldr	r3, [pc, #12]	; (800870c <HAL_GetTick+0x14>)
 80086fe:	681b      	ldr	r3, [r3, #0]
}
 8008700:	4618      	mov	r0, r3
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	20002cec 	.word	0x20002cec

08008710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008718:	f7ff ffee 	bl	80086f8 <HAL_GetTick>
 800871c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008728:	d004      	beq.n	8008734 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <HAL_Delay+0x40>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008734:	bf00      	nop
 8008736:	f7ff ffdf 	bl	80086f8 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d8f7      	bhi.n	8008736 <HAL_Delay+0x26>
  {
  }
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000c3c 	.word	0x20000c3c

08008754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	609a      	str	r2, [r3, #8]
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	431a      	orrs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	609a      	str	r2, [r3, #8]
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80087bc:	b490      	push	{r4, r7}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3360      	adds	r3, #96	; 0x60
 80087ce:	461a      	mov	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	4b08      	ldr	r3, [pc, #32]	; (80087fc <LL_ADC_SetOffset+0x40>)
 80087dc:	4013      	ands	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087ee:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc90      	pop	{r4, r7}
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	03fff000 	.word	0x03fff000

08008800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008800:	b490      	push	{r4, r7}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3360      	adds	r3, #96	; 0x60
 800880e:	461a      	mov	r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bc90      	pop	{r4, r7}
 8008826:	4770      	bx	lr

08008828 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008828:	b490      	push	{r4, r7}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3360      	adds	r3, #96	; 0x60
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4313      	orrs	r3, r2
 800884c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bc90      	pop	{r4, r7}
 8008856:	4770      	bx	lr

08008858 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008858:	b490      	push	{r4, r7}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3360      	adds	r3, #96	; 0x60
 8008868:	461a      	mov	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4313      	orrs	r3, r2
 800887c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bc90      	pop	{r4, r7}
 8008886:	4770      	bx	lr

08008888 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008888:	b490      	push	{r4, r7}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3360      	adds	r3, #96	; 0x60
 8008898:	461a      	mov	r2, r3
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc90      	pop	{r4, r7}
 80088b6:	4770      	bx	lr

080088b8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	431a      	orrs	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	615a      	str	r2, [r3, #20]
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e000      	b.n	80088f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008904:	b490      	push	{r4, r7}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3330      	adds	r3, #48	; 0x30
 8008914:	461a      	mov	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	f003 030c 	and.w	r3, r3, #12
 8008920:	4413      	add	r3, r2
 8008922:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	211f      	movs	r1, #31
 800892e:	fa01 f303 	lsl.w	r3, r1, r3
 8008932:	43db      	mvns	r3, r3
 8008934:	401a      	ands	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	0e9b      	lsrs	r3, r3, #26
 800893a:	f003 011f 	and.w	r1, r3, #31
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f003 031f 	and.w	r3, r3, #31
 8008944:	fa01 f303 	lsl.w	r3, r1, r3
 8008948:	4313      	orrs	r3, r2
 800894a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800894c:	bf00      	nop
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bc90      	pop	{r4, r7}
 8008954:	4770      	bx	lr

08008956 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008956:	b490      	push	{r4, r7}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3314      	adds	r3, #20
 8008966:	461a      	mov	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	0e5b      	lsrs	r3, r3, #25
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	4413      	add	r3, r2
 8008974:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008976:	6822      	ldr	r2, [r4, #0]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	0d1b      	lsrs	r3, r3, #20
 800897c:	f003 031f 	and.w	r3, r3, #31
 8008980:	2107      	movs	r1, #7
 8008982:	fa01 f303 	lsl.w	r3, r1, r3
 8008986:	43db      	mvns	r3, r3
 8008988:	401a      	ands	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	0d1b      	lsrs	r3, r3, #20
 800898e:	f003 031f 	and.w	r3, r3, #31
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	fa01 f303 	lsl.w	r3, r1, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bc90      	pop	{r4, r7}
 80089a4:	4770      	bx	lr
	...

080089a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c0:	43db      	mvns	r3, r3
 80089c2:	401a      	ands	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f003 0318 	and.w	r3, r3, #24
 80089ca:	4908      	ldr	r1, [pc, #32]	; (80089ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80089cc:	40d9      	lsrs	r1, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	400b      	ands	r3, r1
 80089d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d6:	431a      	orrs	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	0007ffff 	.word	0x0007ffff

080089f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 031f 	and.w	r3, r3, #31
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6093      	str	r3, [r2, #8]
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a44:	d101      	bne.n	8008a4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e000      	b.n	8008a4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a94:	d101      	bne.n	8008a9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008abc:	f043 0201 	orr.w	r2, r3, #1
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ae4:	f043 0202 	orr.w	r2, r3, #2
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <LL_ADC_IsEnabled+0x18>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <LL_ADC_IsEnabled+0x1a>
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d101      	bne.n	8008b36 <LL_ADC_IsDisableOngoing+0x18>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <LL_ADC_IsDisableOngoing+0x1a>
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b58:	f043 0204 	orr.w	r2, r3, #4
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b80:	f043 0210 	orr.w	r2, r3, #16
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d101      	bne.n	8008bac <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008bce:	f043 0220 	orr.w	r2, r3, #32
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d101      	bne.n	8008bfa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e000      	b.n	8008bfc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008c08:	b590      	push	{r4, r7, lr}
 8008c0a:	b089      	sub	sp, #36	; 0x24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e1ad      	b.n	8008f7e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d109      	bne.n	8008c44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7fe f861 	bl	8006cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fef1 	bl	8008a30 <LL_ADC_IsDeepPowerDownEnabled>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d004      	beq.n	8008c5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fed7 	bl	8008a0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff ff0c 	bl	8008a80 <LL_ADC_IsInternalRegulatorEnabled>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d113      	bne.n	8008c96 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff fef0 	bl	8008a58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008c78:	4b9e      	ldr	r3, [pc, #632]	; (8008ef4 <HAL_ADC_Init+0x2ec>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	099b      	lsrs	r3, r3, #6
 8008c7e:	4a9e      	ldr	r2, [pc, #632]	; (8008ef8 <HAL_ADC_Init+0x2f0>)
 8008c80:	fba2 2303 	umull	r2, r3, r2, r3
 8008c84:	099b      	lsrs	r3, r3, #6
 8008c86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c88:	e002      	b.n	8008c90 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f9      	bne.n	8008c8a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff fef0 	bl	8008a80 <LL_ADC_IsInternalRegulatorEnabled>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10d      	bne.n	8008cc2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008caa:	f043 0210 	orr.w	r2, r3, #16
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb6:	f043 0201 	orr.w	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff ff64 	bl	8008b94 <LL_ADC_REG_IsConversionOngoing>
 8008ccc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd2:	f003 0310 	and.w	r3, r3, #16
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f040 8148 	bne.w	8008f6c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f040 8144 	bne.w	8008f6c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008cec:	f043 0202 	orr.w	r2, r3, #2
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff fefd 	bl	8008af8 <LL_ADC_IsEnabled>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d141      	bne.n	8008d88 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d0c:	d004      	beq.n	8008d18 <HAL_ADC_Init+0x110>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a7a      	ldr	r2, [pc, #488]	; (8008efc <HAL_ADC_Init+0x2f4>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d10f      	bne.n	8008d38 <HAL_ADC_Init+0x130>
 8008d18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008d1c:	f7ff feec 	bl	8008af8 <LL_ADC_IsEnabled>
 8008d20:	4604      	mov	r4, r0
 8008d22:	4876      	ldr	r0, [pc, #472]	; (8008efc <HAL_ADC_Init+0x2f4>)
 8008d24:	f7ff fee8 	bl	8008af8 <LL_ADC_IsEnabled>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	4323      	orrs	r3, r4
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf0c      	ite	eq
 8008d30:	2301      	moveq	r3, #1
 8008d32:	2300      	movne	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	e012      	b.n	8008d5e <HAL_ADC_Init+0x156>
 8008d38:	4871      	ldr	r0, [pc, #452]	; (8008f00 <HAL_ADC_Init+0x2f8>)
 8008d3a:	f7ff fedd 	bl	8008af8 <LL_ADC_IsEnabled>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4870      	ldr	r0, [pc, #448]	; (8008f04 <HAL_ADC_Init+0x2fc>)
 8008d42:	f7ff fed9 	bl	8008af8 <LL_ADC_IsEnabled>
 8008d46:	4603      	mov	r3, r0
 8008d48:	431c      	orrs	r4, r3
 8008d4a:	486f      	ldr	r0, [pc, #444]	; (8008f08 <HAL_ADC_Init+0x300>)
 8008d4c:	f7ff fed4 	bl	8008af8 <LL_ADC_IsEnabled>
 8008d50:	4603      	mov	r3, r0
 8008d52:	4323      	orrs	r3, r4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bf0c      	ite	eq
 8008d58:	2301      	moveq	r3, #1
 8008d5a:	2300      	movne	r3, #0
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d012      	beq.n	8008d88 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d6a:	d004      	beq.n	8008d76 <HAL_ADC_Init+0x16e>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a62      	ldr	r2, [pc, #392]	; (8008efc <HAL_ADC_Init+0x2f4>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d101      	bne.n	8008d7a <HAL_ADC_Init+0x172>
 8008d76:	4a65      	ldr	r2, [pc, #404]	; (8008f0c <HAL_ADC_Init+0x304>)
 8008d78:	e000      	b.n	8008d7c <HAL_ADC_Init+0x174>
 8008d7a:	4a65      	ldr	r2, [pc, #404]	; (8008f10 <HAL_ADC_Init+0x308>)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7ff fce6 	bl	8008754 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7f5b      	ldrb	r3, [r3, #29]
 8008d8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008d98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008d9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008da6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008da8:	4313      	orrs	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d106      	bne.n	8008dc4 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	045b      	lsls	r3, r3, #17
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d009      	beq.n	8008de0 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	4b4b      	ldr	r3, [pc, #300]	; (8008f14 <HAL_ADC_Init+0x30c>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6812      	ldr	r2, [r2, #0]
 8008dee:	69b9      	ldr	r1, [r7, #24]
 8008df0:	430b      	orrs	r3, r1
 8008df2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff fec0 	bl	8008b94 <LL_ADC_REG_IsConversionOngoing>
 8008e14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fee1 	bl	8008be2 <LL_ADC_INJ_IsConversionOngoing>
 8008e20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d17f      	bne.n	8008f28 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d17c      	bne.n	8008f28 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008e32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e3a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e4a:	f023 0302 	bic.w	r3, r3, #2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	69b9      	ldr	r1, [r7, #24]
 8008e54:	430b      	orrs	r3, r1
 8008e56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d017      	beq.n	8008e90 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691a      	ldr	r2, [r3, #16]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	6911      	ldr	r1, [r2, #16]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6812      	ldr	r2, [r2, #0]
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008e8e:	e013      	b.n	8008eb8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	691a      	ldr	r2, [r3, #16]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008eb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d12a      	bne.n	8008f18 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ecc:	f023 0304 	bic.w	r3, r3, #4
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ed8:	4311      	orrs	r1, r2
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008ede:	4311      	orrs	r1, r2
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0201 	orr.w	r2, r2, #1
 8008ef0:	611a      	str	r2, [r3, #16]
 8008ef2:	e019      	b.n	8008f28 <HAL_ADC_Init+0x320>
 8008ef4:	20000c34 	.word	0x20000c34
 8008ef8:	053e2d63 	.word	0x053e2d63
 8008efc:	50000100 	.word	0x50000100
 8008f00:	50000400 	.word	0x50000400
 8008f04:	50000500 	.word	0x50000500
 8008f08:	50000600 	.word	0x50000600
 8008f0c:	50000300 	.word	0x50000300
 8008f10:	50000700 	.word	0x50000700
 8008f14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f022 0201 	bic.w	r2, r2, #1
 8008f26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d10c      	bne.n	8008f4a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	f023 010f 	bic.w	r1, r3, #15
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	1e5a      	subs	r2, r3, #1
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	631a      	str	r2, [r3, #48]	; 0x30
 8008f48:	e007      	b.n	8008f5a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 020f 	bic.w	r2, r2, #15
 8008f58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f5e:	f023 0303 	bic.w	r3, r3, #3
 8008f62:	f043 0201 	orr.w	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f6a:	e007      	b.n	8008f7c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f70:	f043 0210 	orr.w	r2, r3, #16
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008f7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3724      	adds	r7, #36	; 0x24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd90      	pop	{r4, r7, pc}
 8008f86:	bf00      	nop

08008f88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f9c:	d004      	beq.n	8008fa8 <HAL_ADC_Start_DMA+0x20>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a58      	ldr	r2, [pc, #352]	; (8009104 <HAL_ADC_Start_DMA+0x17c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d101      	bne.n	8008fac <HAL_ADC_Start_DMA+0x24>
 8008fa8:	4b57      	ldr	r3, [pc, #348]	; (8009108 <HAL_ADC_Start_DMA+0x180>)
 8008faa:	e000      	b.n	8008fae <HAL_ADC_Start_DMA+0x26>
 8008fac:	4b57      	ldr	r3, [pc, #348]	; (800910c <HAL_ADC_Start_DMA+0x184>)
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff fd1e 	bl	80089f0 <LL_ADC_GetMultimode>
 8008fb4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff fdea 	bl	8008b94 <LL_ADC_REG_IsConversionOngoing>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f040 8096 	bne.w	80090f4 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d101      	bne.n	8008fd6 <HAL_ADC_Start_DMA+0x4e>
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e091      	b.n	80090fa <HAL_ADC_Start_DMA+0x172>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d002      	beq.n	8008ff0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	d17a      	bne.n	80090e6 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fd71 	bl	8009ad8 <ADC_Enable>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d16d      	bne.n	80090dc <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a3a      	ldr	r2, [pc, #232]	; (8009104 <HAL_ADC_Start_DMA+0x17c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d009      	beq.n	8009032 <HAL_ADC_Start_DMA+0xaa>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a3b      	ldr	r2, [pc, #236]	; (8009110 <HAL_ADC_Start_DMA+0x188>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d002      	beq.n	800902e <HAL_ADC_Start_DMA+0xa6>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	e003      	b.n	8009036 <HAL_ADC_Start_DMA+0xae>
 800902e:	4b39      	ldr	r3, [pc, #228]	; (8009114 <HAL_ADC_Start_DMA+0x18c>)
 8009030:	e001      	b.n	8009036 <HAL_ADC_Start_DMA+0xae>
 8009032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	6812      	ldr	r2, [r2, #0]
 800903a:	4293      	cmp	r3, r2
 800903c:	d002      	beq.n	8009044 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d105      	bne.n	8009050 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009048:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d006      	beq.n	800906a <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009060:	f023 0206 	bic.w	r2, r3, #6
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	661a      	str	r2, [r3, #96]	; 0x60
 8009068:	e002      	b.n	8009070 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009074:	4a28      	ldr	r2, [pc, #160]	; (8009118 <HAL_ADC_Start_DMA+0x190>)
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	4a27      	ldr	r2, [pc, #156]	; (800911c <HAL_ADC_Start_DMA+0x194>)
 800907e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009084:	4a26      	ldr	r2, [pc, #152]	; (8009120 <HAL_ADC_Start_DMA+0x198>)
 8009086:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	221c      	movs	r2, #28
 800908e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f042 0210 	orr.w	r2, r2, #16
 80090a6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3340      	adds	r3, #64	; 0x40
 80090c2:	4619      	mov	r1, r3
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f002 f942 	bl	800b350 <HAL_DMA_Start_IT>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fd35 	bl	8008b44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80090da:	e00d      	b.n	80090f8 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80090e4:	e008      	b.n	80090f8 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80090f2:	e001      	b.n	80090f8 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80090f4:	2302      	movs	r3, #2
 80090f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	50000100 	.word	0x50000100
 8009108:	50000300 	.word	0x50000300
 800910c:	50000700 	.word	0x50000700
 8009110:	50000500 	.word	0x50000500
 8009114:	50000400 	.word	0x50000400
 8009118:	08009c3d 	.word	0x08009c3d
 800911c:	08009d15 	.word	0x08009d15
 8009120:	08009d31 	.word	0x08009d31

08009124 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <HAL_ADC_Stop_DMA+0x16>
 8009136:	2302      	movs	r3, #2
 8009138:	e051      	b.n	80091de <HAL_ADC_Stop_DMA+0xba>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009142:	2103      	movs	r1, #3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fc13 	bl	8009970 <ADC_ConversionStop>
 800914a:	4603      	mov	r3, r0
 800914c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800914e:	7bfb      	ldrb	r3, [r7, #15]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d13f      	bne.n	80091d4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 0201 	bic.w	r2, r2, #1
 8009162:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009168:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d10f      	bne.n	8009192 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009176:	4618      	mov	r0, r3
 8009178:	f002 f965 	bl	800b446 <HAL_DMA_Abort>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800918a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0210 	bic.w	r2, r2, #16
 80091a0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d105      	bne.n	80091b4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fcef 	bl	8009b8c <ADC_Disable>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]
 80091b2:	e002      	b.n	80091ba <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fce9 	bl	8009b8c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d109      	bne.n	80091d4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	f043 0201 	orr.w	r2, r3, #1
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
	...

08009210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b0a6      	sub	sp, #152	; 0x98
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_ADC_ConfigChannel+0x22>
 800922e:	2302      	movs	r3, #2
 8009230:	e38e      	b.n	8009950 <HAL_ADC_ConfigChannel+0x740>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff fca8 	bl	8008b94 <LL_ADC_REG_IsConversionOngoing>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	f040 836f 	bne.w	800992a <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	6859      	ldr	r1, [r3, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	f7ff fb53 	bl	8008904 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff fc96 	bl	8008b94 <LL_ADC_REG_IsConversionOngoing>
 8009268:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff fcb6 	bl	8008be2 <LL_ADC_INJ_IsConversionOngoing>
 8009276:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800927a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800927e:	2b00      	cmp	r3, #0
 8009280:	f040 817b 	bne.w	800957a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009288:	2b00      	cmp	r3, #0
 800928a:	f040 8176 	bne.w	800957a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009296:	d10f      	bne.n	80092b8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2200      	movs	r2, #0
 80092a2:	4619      	mov	r1, r3
 80092a4:	f7ff fb57 	bl	8008956 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff fb01 	bl	80088b8 <LL_ADC_SetSamplingTimeCommonConfig>
 80092b6:	e00e      	b.n	80092d6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6819      	ldr	r1, [r3, #0]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	461a      	mov	r2, r3
 80092c6:	f7ff fb46 	bl	8008956 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff faf1 	bl	80088b8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	695a      	ldr	r2, [r3, #20]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	08db      	lsrs	r3, r3, #3
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	d022      	beq.n	800933e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6919      	ldr	r1, [r3, #16]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009308:	f7ff fa58 	bl	80087bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	6919      	ldr	r1, [r3, #16]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	461a      	mov	r2, r3
 800931a:	f7ff fa9d 	bl	8008858 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6919      	ldr	r1, [r3, #16]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	7f1b      	ldrb	r3, [r3, #28]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d102      	bne.n	8009334 <HAL_ADC_ConfigChannel+0x124>
 800932e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009332:	e000      	b.n	8009336 <HAL_ADC_ConfigChannel+0x126>
 8009334:	2300      	movs	r3, #0
 8009336:	461a      	mov	r2, r3
 8009338:	f7ff faa6 	bl	8008888 <LL_ADC_SetOffsetSaturation>
 800933c:	e11d      	b.n	800957a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fa5b 	bl	8008800 <LL_ADC_GetOffsetChannel>
 800934a:	4603      	mov	r3, r0
 800934c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <HAL_ADC_ConfigChannel+0x15a>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fa50 	bl	8008800 <LL_ADC_GetOffsetChannel>
 8009360:	4603      	mov	r3, r0
 8009362:	0e9b      	lsrs	r3, r3, #26
 8009364:	f003 021f 	and.w	r2, r3, #31
 8009368:	e012      	b.n	8009390 <HAL_ADC_ConfigChannel+0x180>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2100      	movs	r1, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff fa45 	bl	8008800 <LL_ADC_GetOffsetChannel>
 8009376:	4603      	mov	r3, r0
 8009378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800937c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009380:	fa93 f3a3 	rbit	r3, r3
 8009384:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009386:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009388:	fab3 f383 	clz	r3, r3
 800938c:	b2db      	uxtb	r3, r3
 800938e:	461a      	mov	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009398:	2b00      	cmp	r3, #0
 800939a:	d105      	bne.n	80093a8 <HAL_ADC_ConfigChannel+0x198>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	0e9b      	lsrs	r3, r3, #26
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	e00a      	b.n	80093be <HAL_ADC_ConfigChannel+0x1ae>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093b0:	fa93 f3a3 	rbit	r3, r3
 80093b4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80093b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b8:	fab3 f383 	clz	r3, r3
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	429a      	cmp	r2, r3
 80093c0:	d106      	bne.n	80093d0 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2200      	movs	r2, #0
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff fa2c 	bl	8008828 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2101      	movs	r1, #1
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fa12 	bl	8008800 <LL_ADC_GetOffsetChannel>
 80093dc:	4603      	mov	r3, r0
 80093de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <HAL_ADC_ConfigChannel+0x1ec>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2101      	movs	r1, #1
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fa07 	bl	8008800 <LL_ADC_GetOffsetChannel>
 80093f2:	4603      	mov	r3, r0
 80093f4:	0e9b      	lsrs	r3, r3, #26
 80093f6:	f003 021f 	and.w	r2, r3, #31
 80093fa:	e010      	b.n	800941e <HAL_ADC_ConfigChannel+0x20e>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2101      	movs	r1, #1
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff f9fc 	bl	8008800 <LL_ADC_GetOffsetChannel>
 8009408:	4603      	mov	r3, r0
 800940a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800940e:	fa93 f3a3 	rbit	r3, r3
 8009412:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009416:	fab3 f383 	clz	r3, r3
 800941a:	b2db      	uxtb	r3, r3
 800941c:	461a      	mov	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <HAL_ADC_ConfigChannel+0x226>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	0e9b      	lsrs	r3, r3, #26
 8009430:	f003 031f 	and.w	r3, r3, #31
 8009434:	e00a      	b.n	800944c <HAL_ADC_ConfigChannel+0x23c>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800943e:	fa93 f3a3 	rbit	r3, r3
 8009442:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009446:	fab3 f383 	clz	r3, r3
 800944a:	b2db      	uxtb	r3, r3
 800944c:	429a      	cmp	r2, r3
 800944e:	d106      	bne.n	800945e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2200      	movs	r2, #0
 8009456:	2101      	movs	r1, #1
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff f9e5 	bl	8008828 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2102      	movs	r1, #2
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff f9cb 	bl	8008800 <LL_ADC_GetOffsetChannel>
 800946a:	4603      	mov	r3, r0
 800946c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <HAL_ADC_ConfigChannel+0x27a>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2102      	movs	r1, #2
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff f9c0 	bl	8008800 <LL_ADC_GetOffsetChannel>
 8009480:	4603      	mov	r3, r0
 8009482:	0e9b      	lsrs	r3, r3, #26
 8009484:	f003 021f 	and.w	r2, r3, #31
 8009488:	e010      	b.n	80094ac <HAL_ADC_ConfigChannel+0x29c>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2102      	movs	r1, #2
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff f9b5 	bl	8008800 <LL_ADC_GetOffsetChannel>
 8009496:	4603      	mov	r3, r0
 8009498:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800949a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800949c:	fa93 f3a3 	rbit	r3, r3
 80094a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80094a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094a4:	fab3 f383 	clz	r3, r3
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <HAL_ADC_ConfigChannel+0x2b4>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	0e9b      	lsrs	r3, r3, #26
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	e00a      	b.n	80094da <HAL_ADC_ConfigChannel+0x2ca>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094cc:	fa93 f3a3 	rbit	r3, r3
 80094d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80094d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094d4:	fab3 f383 	clz	r3, r3
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	429a      	cmp	r2, r3
 80094dc:	d106      	bne.n	80094ec <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2200      	movs	r2, #0
 80094e4:	2102      	movs	r1, #2
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff f99e 	bl	8008828 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2103      	movs	r1, #3
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff f984 	bl	8008800 <LL_ADC_GetOffsetChannel>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <HAL_ADC_ConfigChannel+0x308>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2103      	movs	r1, #3
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff f979 	bl	8008800 <LL_ADC_GetOffsetChannel>
 800950e:	4603      	mov	r3, r0
 8009510:	0e9b      	lsrs	r3, r3, #26
 8009512:	f003 021f 	and.w	r2, r3, #31
 8009516:	e010      	b.n	800953a <HAL_ADC_ConfigChannel+0x32a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2103      	movs	r1, #3
 800951e:	4618      	mov	r0, r3
 8009520:	f7ff f96e 	bl	8008800 <LL_ADC_GetOffsetChannel>
 8009524:	4603      	mov	r3, r0
 8009526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800952a:	fa93 f3a3 	rbit	r3, r3
 800952e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009532:	fab3 f383 	clz	r3, r3
 8009536:	b2db      	uxtb	r3, r3
 8009538:	461a      	mov	r2, r3
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009542:	2b00      	cmp	r3, #0
 8009544:	d105      	bne.n	8009552 <HAL_ADC_ConfigChannel+0x342>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	0e9b      	lsrs	r3, r3, #26
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	e00a      	b.n	8009568 <HAL_ADC_ConfigChannel+0x358>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800955a:	fa93 f3a3 	rbit	r3, r3
 800955e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009562:	fab3 f383 	clz	r3, r3
 8009566:	b2db      	uxtb	r3, r3
 8009568:	429a      	cmp	r2, r3
 800956a:	d106      	bne.n	800957a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2200      	movs	r2, #0
 8009572:	2103      	movs	r1, #3
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff f957 	bl	8008828 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff faba 	bl	8008af8 <LL_ADC_IsEnabled>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	f040 810c 	bne.w	80097a4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	461a      	mov	r2, r3
 800959a:	f7ff fa05 	bl	80089a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	4aaf      	ldr	r2, [pc, #700]	; (8009860 <HAL_ADC_ConfigChannel+0x650>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	f040 80fd 	bne.w	80097a4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10b      	bne.n	80095d2 <HAL_ADC_ConfigChannel+0x3c2>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	0e9b      	lsrs	r3, r3, #26
 80095c0:	3301      	adds	r3, #1
 80095c2:	f003 031f 	and.w	r3, r3, #31
 80095c6:	2b09      	cmp	r3, #9
 80095c8:	bf94      	ite	ls
 80095ca:	2301      	movls	r3, #1
 80095cc:	2300      	movhi	r3, #0
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	e012      	b.n	80095f8 <HAL_ADC_ConfigChannel+0x3e8>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095da:	fa93 f3a3 	rbit	r3, r3
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80095e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e2:	fab3 f383 	clz	r3, r3
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	3301      	adds	r3, #1
 80095ea:	f003 031f 	and.w	r3, r3, #31
 80095ee:	2b09      	cmp	r3, #9
 80095f0:	bf94      	ite	ls
 80095f2:	2301      	movls	r3, #1
 80095f4:	2300      	movhi	r3, #0
 80095f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d064      	beq.n	80096c6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009604:	2b00      	cmp	r3, #0
 8009606:	d107      	bne.n	8009618 <HAL_ADC_ConfigChannel+0x408>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	0e9b      	lsrs	r3, r3, #26
 800960e:	3301      	adds	r3, #1
 8009610:	069b      	lsls	r3, r3, #26
 8009612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009616:	e00e      	b.n	8009636 <HAL_ADC_ConfigChannel+0x426>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	fa93 f3a3 	rbit	r3, r3
 8009624:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	fab3 f383 	clz	r3, r3
 800962c:	b2db      	uxtb	r3, r3
 800962e:	3301      	adds	r3, #1
 8009630:	069b      	lsls	r3, r3, #26
 8009632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <HAL_ADC_ConfigChannel+0x446>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	0e9b      	lsrs	r3, r3, #26
 8009648:	3301      	adds	r3, #1
 800964a:	f003 031f 	and.w	r3, r3, #31
 800964e:	2101      	movs	r1, #1
 8009650:	fa01 f303 	lsl.w	r3, r1, r3
 8009654:	e010      	b.n	8009678 <HAL_ADC_ConfigChannel+0x468>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	fa93 f3a3 	rbit	r3, r3
 8009662:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	fab3 f383 	clz	r3, r3
 800966a:	b2db      	uxtb	r3, r3
 800966c:	3301      	adds	r3, #1
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	2101      	movs	r1, #1
 8009674:	fa01 f303 	lsl.w	r3, r1, r3
 8009678:	ea42 0103 	orr.w	r1, r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <HAL_ADC_ConfigChannel+0x48e>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	0e9b      	lsrs	r3, r3, #26
 800968e:	3301      	adds	r3, #1
 8009690:	f003 021f 	and.w	r2, r3, #31
 8009694:	4613      	mov	r3, r2
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	4413      	add	r3, r2
 800969a:	051b      	lsls	r3, r3, #20
 800969c:	e011      	b.n	80096c2 <HAL_ADC_ConfigChannel+0x4b2>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	fa93 f3a3 	rbit	r3, r3
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	fab3 f383 	clz	r3, r3
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	3301      	adds	r3, #1
 80096b6:	f003 021f 	and.w	r2, r3, #31
 80096ba:	4613      	mov	r3, r2
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	4413      	add	r3, r2
 80096c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80096c2:	430b      	orrs	r3, r1
 80096c4:	e069      	b.n	800979a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d107      	bne.n	80096e2 <HAL_ADC_ConfigChannel+0x4d2>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	0e9b      	lsrs	r3, r3, #26
 80096d8:	3301      	adds	r3, #1
 80096da:	069b      	lsls	r3, r3, #26
 80096dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80096e0:	e00e      	b.n	8009700 <HAL_ADC_ConfigChannel+0x4f0>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	fa93 f3a3 	rbit	r3, r3
 80096ee:	61fb      	str	r3, [r7, #28]
  return result;
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	fab3 f383 	clz	r3, r3
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	3301      	adds	r3, #1
 80096fa:	069b      	lsls	r3, r3, #26
 80096fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <HAL_ADC_ConfigChannel+0x510>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	0e9b      	lsrs	r3, r3, #26
 8009712:	3301      	adds	r3, #1
 8009714:	f003 031f 	and.w	r3, r3, #31
 8009718:	2101      	movs	r1, #1
 800971a:	fa01 f303 	lsl.w	r3, r1, r3
 800971e:	e010      	b.n	8009742 <HAL_ADC_ConfigChannel+0x532>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	fa93 f3a3 	rbit	r3, r3
 800972c:	617b      	str	r3, [r7, #20]
  return result;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	fab3 f383 	clz	r3, r3
 8009734:	b2db      	uxtb	r3, r3
 8009736:	3301      	adds	r3, #1
 8009738:	f003 031f 	and.w	r3, r3, #31
 800973c:	2101      	movs	r1, #1
 800973e:	fa01 f303 	lsl.w	r3, r1, r3
 8009742:	ea42 0103 	orr.w	r1, r2, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10d      	bne.n	800976e <HAL_ADC_ConfigChannel+0x55e>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	0e9b      	lsrs	r3, r3, #26
 8009758:	3301      	adds	r3, #1
 800975a:	f003 021f 	and.w	r2, r3, #31
 800975e:	4613      	mov	r3, r2
 8009760:	005b      	lsls	r3, r3, #1
 8009762:	4413      	add	r3, r2
 8009764:	3b1e      	subs	r3, #30
 8009766:	051b      	lsls	r3, r3, #20
 8009768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800976c:	e014      	b.n	8009798 <HAL_ADC_ConfigChannel+0x588>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	fa93 f3a3 	rbit	r3, r3
 800977a:	60fb      	str	r3, [r7, #12]
  return result;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	fab3 f383 	clz	r3, r3
 8009782:	b2db      	uxtb	r3, r3
 8009784:	3301      	adds	r3, #1
 8009786:	f003 021f 	and.w	r2, r3, #31
 800978a:	4613      	mov	r3, r2
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	4413      	add	r3, r2
 8009790:	3b1e      	subs	r3, #30
 8009792:	051b      	lsls	r3, r3, #20
 8009794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009798:	430b      	orrs	r3, r1
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	6892      	ldr	r2, [r2, #8]
 800979e:	4619      	mov	r1, r3
 80097a0:	f7ff f8d9 	bl	8008956 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	4b2e      	ldr	r3, [pc, #184]	; (8009864 <HAL_ADC_ConfigChannel+0x654>)
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 80c9 	beq.w	8009944 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ba:	d004      	beq.n	80097c6 <HAL_ADC_ConfigChannel+0x5b6>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a29      	ldr	r2, [pc, #164]	; (8009868 <HAL_ADC_ConfigChannel+0x658>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d101      	bne.n	80097ca <HAL_ADC_ConfigChannel+0x5ba>
 80097c6:	4b29      	ldr	r3, [pc, #164]	; (800986c <HAL_ADC_ConfigChannel+0x65c>)
 80097c8:	e000      	b.n	80097cc <HAL_ADC_ConfigChannel+0x5bc>
 80097ca:	4b29      	ldr	r3, [pc, #164]	; (8009870 <HAL_ADC_ConfigChannel+0x660>)
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe ffe7 	bl	80087a0 <LL_ADC_GetCommonPathInternalCh>
 80097d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a26      	ldr	r2, [pc, #152]	; (8009874 <HAL_ADC_ConfigChannel+0x664>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d004      	beq.n	80097ea <HAL_ADC_ConfigChannel+0x5da>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a24      	ldr	r2, [pc, #144]	; (8009878 <HAL_ADC_ConfigChannel+0x668>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d14e      	bne.n	8009888 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80097ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d148      	bne.n	8009888 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097fe:	d005      	beq.n	800980c <HAL_ADC_ConfigChannel+0x5fc>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a1d      	ldr	r2, [pc, #116]	; (800987c <HAL_ADC_ConfigChannel+0x66c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	f040 8099 	bne.w	800993e <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009814:	d004      	beq.n	8009820 <HAL_ADC_ConfigChannel+0x610>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a13      	ldr	r2, [pc, #76]	; (8009868 <HAL_ADC_ConfigChannel+0x658>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d101      	bne.n	8009824 <HAL_ADC_ConfigChannel+0x614>
 8009820:	4a12      	ldr	r2, [pc, #72]	; (800986c <HAL_ADC_ConfigChannel+0x65c>)
 8009822:	e000      	b.n	8009826 <HAL_ADC_ConfigChannel+0x616>
 8009824:	4a12      	ldr	r2, [pc, #72]	; (8009870 <HAL_ADC_ConfigChannel+0x660>)
 8009826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800982a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f7fe ffa2 	bl	800877a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009836:	4b12      	ldr	r3, [pc, #72]	; (8009880 <HAL_ADC_ConfigChannel+0x670>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	099b      	lsrs	r3, r3, #6
 800983c:	4a11      	ldr	r2, [pc, #68]	; (8009884 <HAL_ADC_ConfigChannel+0x674>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	099a      	lsrs	r2, r3, #6
 8009844:	4613      	mov	r3, r2
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800984e:	e002      	b.n	8009856 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	3b01      	subs	r3, #1
 8009854:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f9      	bne.n	8009850 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800985c:	e06f      	b.n	800993e <HAL_ADC_ConfigChannel+0x72e>
 800985e:	bf00      	nop
 8009860:	407f0000 	.word	0x407f0000
 8009864:	80080000 	.word	0x80080000
 8009868:	50000100 	.word	0x50000100
 800986c:	50000300 	.word	0x50000300
 8009870:	50000700 	.word	0x50000700
 8009874:	c3210000 	.word	0xc3210000
 8009878:	90c00010 	.word	0x90c00010
 800987c:	50000600 	.word	0x50000600
 8009880:	20000c34 	.word	0x20000c34
 8009884:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a32      	ldr	r2, [pc, #200]	; (8009958 <HAL_ADC_ConfigChannel+0x748>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d125      	bne.n	80098de <HAL_ADC_ConfigChannel+0x6ce>
 8009892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11f      	bne.n	80098de <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a2e      	ldr	r2, [pc, #184]	; (800995c <HAL_ADC_ConfigChannel+0x74c>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d104      	bne.n	80098b2 <HAL_ADC_ConfigChannel+0x6a2>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a2c      	ldr	r2, [pc, #176]	; (8009960 <HAL_ADC_ConfigChannel+0x750>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d047      	beq.n	8009942 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098ba:	d004      	beq.n	80098c6 <HAL_ADC_ConfigChannel+0x6b6>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a26      	ldr	r2, [pc, #152]	; (800995c <HAL_ADC_ConfigChannel+0x74c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d101      	bne.n	80098ca <HAL_ADC_ConfigChannel+0x6ba>
 80098c6:	4a27      	ldr	r2, [pc, #156]	; (8009964 <HAL_ADC_ConfigChannel+0x754>)
 80098c8:	e000      	b.n	80098cc <HAL_ADC_ConfigChannel+0x6bc>
 80098ca:	4a27      	ldr	r2, [pc, #156]	; (8009968 <HAL_ADC_ConfigChannel+0x758>)
 80098cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fe ff4f 	bl	800877a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80098dc:	e031      	b.n	8009942 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a22      	ldr	r2, [pc, #136]	; (800996c <HAL_ADC_ConfigChannel+0x75c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d12d      	bne.n	8009944 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80098e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d127      	bne.n	8009944 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a18      	ldr	r2, [pc, #96]	; (800995c <HAL_ADC_ConfigChannel+0x74c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d022      	beq.n	8009944 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009906:	d004      	beq.n	8009912 <HAL_ADC_ConfigChannel+0x702>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a13      	ldr	r2, [pc, #76]	; (800995c <HAL_ADC_ConfigChannel+0x74c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d101      	bne.n	8009916 <HAL_ADC_ConfigChannel+0x706>
 8009912:	4a14      	ldr	r2, [pc, #80]	; (8009964 <HAL_ADC_ConfigChannel+0x754>)
 8009914:	e000      	b.n	8009918 <HAL_ADC_ConfigChannel+0x708>
 8009916:	4a14      	ldr	r2, [pc, #80]	; (8009968 <HAL_ADC_ConfigChannel+0x758>)
 8009918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800991c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009920:	4619      	mov	r1, r3
 8009922:	4610      	mov	r0, r2
 8009924:	f7fe ff29 	bl	800877a <LL_ADC_SetCommonPathInternalCh>
 8009928:	e00c      	b.n	8009944 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992e:	f043 0220 	orr.w	r2, r3, #32
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800993c:	e002      	b.n	8009944 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800993e:	bf00      	nop
 8009940:	e000      	b.n	8009944 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009942:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800994c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009950:	4618      	mov	r0, r3
 8009952:	3798      	adds	r7, #152	; 0x98
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	c7520000 	.word	0xc7520000
 800995c:	50000100 	.word	0x50000100
 8009960:	50000500 	.word	0x50000500
 8009964:	50000300 	.word	0x50000300
 8009968:	50000700 	.word	0x50000700
 800996c:	cb840000 	.word	0xcb840000

08009970 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800997a:	2300      	movs	r3, #0
 800997c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff f904 	bl	8008b94 <LL_ADC_REG_IsConversionOngoing>
 800998c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff f925 	bl	8008be2 <LL_ADC_INJ_IsConversionOngoing>
 8009998:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d103      	bne.n	80099a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8090 	beq.w	8009ac8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d02a      	beq.n	8009a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	7f5b      	ldrb	r3, [r3, #29]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d126      	bne.n	8009a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7f1b      	ldrb	r3, [r3, #28]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d122      	bne.n	8009a0c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80099c6:	2301      	movs	r3, #1
 80099c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80099ca:	e014      	b.n	80099f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4a41      	ldr	r2, [pc, #260]	; (8009ad4 <ADC_ConversionStop+0x164>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d90d      	bls.n	80099f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d8:	f043 0210 	orr.w	r2, r3, #16
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e4:	f043 0201 	orr.w	r2, r3, #1
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e06c      	b.n	8009aca <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	3301      	adds	r3, #1
 80099f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a00:	2b40      	cmp	r3, #64	; 0x40
 8009a02:	d1e3      	bne.n	80099cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2240      	movs	r2, #64	; 0x40
 8009a0a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d014      	beq.n	8009a3c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff f8bc 	bl	8008b94 <LL_ADC_REG_IsConversionOngoing>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00c      	beq.n	8009a3c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff f879 	bl	8008b1e <LL_ADC_IsDisableOngoing>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d104      	bne.n	8009a3c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff f898 	bl	8008b6c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d014      	beq.n	8009a6c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7ff f8cb 	bl	8008be2 <LL_ADC_INJ_IsConversionOngoing>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00c      	beq.n	8009a6c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff f861 	bl	8008b1e <LL_ADC_IsDisableOngoing>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d104      	bne.n	8009a6c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7ff f8a7 	bl	8008bba <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d004      	beq.n	8009a7c <ADC_ConversionStop+0x10c>
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d105      	bne.n	8009a82 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009a76:	230c      	movs	r3, #12
 8009a78:	617b      	str	r3, [r7, #20]
        break;
 8009a7a:	e005      	b.n	8009a88 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	617b      	str	r3, [r7, #20]
        break;
 8009a80:	e002      	b.n	8009a88 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009a82:	2304      	movs	r3, #4
 8009a84:	617b      	str	r3, [r7, #20]
        break;
 8009a86:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8009a88:	f7fe fe36 	bl	80086f8 <HAL_GetTick>
 8009a8c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009a8e:	e014      	b.n	8009aba <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009a90:	f7fe fe32 	bl	80086f8 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d90d      	bls.n	8009aba <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa2:	f043 0210 	orr.w	r2, r3, #16
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aae:	f043 0201 	orr.w	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e007      	b.n	8009aca <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e3      	bne.n	8009a90 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	a33fffff 	.word	0xa33fffff

08009ad8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff f807 	bl	8008af8 <LL_ADC_IsEnabled>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d146      	bne.n	8009b7e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <ADC_Enable+0xb0>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00d      	beq.n	8009b1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b02:	f043 0210 	orr.w	r2, r3, #16
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b0e:	f043 0201 	orr.w	r2, r3, #1
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e032      	b.n	8009b80 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe ffc2 	bl	8008aa8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009b24:	f7fe fde8 	bl	80086f8 <HAL_GetTick>
 8009b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009b2a:	e021      	b.n	8009b70 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe ffe1 	bl	8008af8 <LL_ADC_IsEnabled>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d104      	bne.n	8009b46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe ffb1 	bl	8008aa8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009b46:	f7fe fdd7 	bl	80086f8 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d90d      	bls.n	8009b70 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b58:	f043 0210 	orr.w	r2, r3, #16
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b64:	f043 0201 	orr.w	r2, r3, #1
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e007      	b.n	8009b80 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d1d6      	bne.n	8009b2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	8000003f 	.word	0x8000003f

08009b8c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe ffc0 	bl	8008b1e <LL_ADC_IsDisableOngoing>
 8009b9e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fe ffa7 	bl	8008af8 <LL_ADC_IsEnabled>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d040      	beq.n	8009c32 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d13d      	bne.n	8009c32 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f003 030d 	and.w	r3, r3, #13
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d10c      	bne.n	8009bde <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fe ff81 	bl	8008ad0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009bd6:	f7fe fd8f 	bl	80086f8 <HAL_GetTick>
 8009bda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009bdc:	e022      	b.n	8009c24 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be2:	f043 0210 	orr.w	r2, r3, #16
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bee:	f043 0201 	orr.w	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e01c      	b.n	8009c34 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009bfa:	f7fe fd7d 	bl	80086f8 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d90d      	bls.n	8009c24 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0c:	f043 0210 	orr.w	r2, r3, #16
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c18:	f043 0201 	orr.w	r2, r3, #1
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e007      	b.n	8009c34 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e3      	bne.n	8009bfa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d14b      	bne.n	8009cee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0308 	and.w	r3, r3, #8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d021      	beq.n	8009cb4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fe32 	bl	80088de <LL_ADC_REG_IsTriggerSourceSWStart>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d032      	beq.n	8009ce6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d12b      	bne.n	8009ce6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d11f      	bne.n	8009ce6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009caa:	f043 0201 	orr.w	r2, r3, #1
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8009cb2:	e018      	b.n	8009ce6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d111      	bne.n	8009ce6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cde:	f043 0201 	orr.w	r2, r3, #1
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f7fc f948 	bl	8005f7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009cec:	e00e      	b.n	8009d0c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf2:	f003 0310 	and.w	r3, r3, #16
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff fa7d 	bl	80091fa <HAL_ADC_ErrorCallback>
}
 8009d00:	e004      	b.n	8009d0c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4798      	blx	r3
}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d20:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff fa5f 	bl	80091e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d4e:	f043 0204 	orr.w	r2, r3, #4
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7ff fa4f 	bl	80091fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <LL_ADC_IsEnabled>:
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d101      	bne.n	8009d7c <LL_ADC_IsEnabled+0x18>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e000      	b.n	8009d7e <LL_ADC_IsEnabled+0x1a>
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <LL_ADC_REG_IsConversionOngoing>:
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d101      	bne.n	8009da2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e000      	b.n	8009da4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009db0:	b590      	push	{r4, r7, lr}
 8009db2:	b0a1      	sub	sp, #132	; 0x84
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e0e3      	b.n	8009f96 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dde:	d102      	bne.n	8009de6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009de0:	4b6f      	ldr	r3, [pc, #444]	; (8009fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009de2:	60bb      	str	r3, [r7, #8]
 8009de4:	e009      	b.n	8009dfa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a6e      	ldr	r2, [pc, #440]	; (8009fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d102      	bne.n	8009df6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009df0:	4b6d      	ldr	r3, [pc, #436]	; (8009fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009df2:	60bb      	str	r3, [r7, #8]
 8009df4:	e001      	b.n	8009dfa <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009df6:	2300      	movs	r3, #0
 8009df8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10b      	bne.n	8009e18 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e04:	f043 0220 	orr.w	r2, r3, #32
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0be      	b.n	8009f96 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff ffb5 	bl	8009d8a <LL_ADC_REG_IsConversionOngoing>
 8009e20:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7ff ffaf 	bl	8009d8a <LL_ADC_REG_IsConversionOngoing>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f040 80a0 	bne.w	8009f74 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 809c 	bne.w	8009f74 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e44:	d004      	beq.n	8009e50 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a55      	ldr	r2, [pc, #340]	; (8009fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d101      	bne.n	8009e54 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009e50:	4b56      	ldr	r3, [pc, #344]	; (8009fac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009e52:	e000      	b.n	8009e56 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009e54:	4b56      	ldr	r3, [pc, #344]	; (8009fb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009e56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d04b      	beq.n	8009ef8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	6859      	ldr	r1, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e72:	035b      	lsls	r3, r3, #13
 8009e74:	430b      	orrs	r3, r1
 8009e76:	431a      	orrs	r2, r3
 8009e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e84:	d004      	beq.n	8009e90 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a45      	ldr	r2, [pc, #276]	; (8009fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10f      	bne.n	8009eb0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009e90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009e94:	f7ff ff66 	bl	8009d64 <LL_ADC_IsEnabled>
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4841      	ldr	r0, [pc, #260]	; (8009fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009e9c:	f7ff ff62 	bl	8009d64 <LL_ADC_IsEnabled>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	4323      	orrs	r3, r4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bf0c      	ite	eq
 8009ea8:	2301      	moveq	r3, #1
 8009eaa:	2300      	movne	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	e012      	b.n	8009ed6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009eb0:	483c      	ldr	r0, [pc, #240]	; (8009fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009eb2:	f7ff ff57 	bl	8009d64 <LL_ADC_IsEnabled>
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	483b      	ldr	r0, [pc, #236]	; (8009fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009eba:	f7ff ff53 	bl	8009d64 <LL_ADC_IsEnabled>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	431c      	orrs	r4, r3
 8009ec2:	483c      	ldr	r0, [pc, #240]	; (8009fb4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009ec4:	f7ff ff4e 	bl	8009d64 <LL_ADC_IsEnabled>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4323      	orrs	r3, r4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	bf0c      	ite	eq
 8009ed0:	2301      	moveq	r3, #1
 8009ed2:	2300      	movne	r3, #0
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d056      	beq.n	8009f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009ee2:	f023 030f 	bic.w	r3, r3, #15
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	6811      	ldr	r1, [r2, #0]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	6892      	ldr	r2, [r2, #8]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	431a      	orrs	r2, r3
 8009ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ef4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009ef6:	e047      	b.n	8009f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f0c:	d004      	beq.n	8009f18 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a23      	ldr	r2, [pc, #140]	; (8009fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d10f      	bne.n	8009f38 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009f18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009f1c:	f7ff ff22 	bl	8009d64 <LL_ADC_IsEnabled>
 8009f20:	4604      	mov	r4, r0
 8009f22:	481f      	ldr	r0, [pc, #124]	; (8009fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009f24:	f7ff ff1e 	bl	8009d64 <LL_ADC_IsEnabled>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	4323      	orrs	r3, r4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bf0c      	ite	eq
 8009f30:	2301      	moveq	r3, #1
 8009f32:	2300      	movne	r3, #0
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	e012      	b.n	8009f5e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009f38:	481a      	ldr	r0, [pc, #104]	; (8009fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009f3a:	f7ff ff13 	bl	8009d64 <LL_ADC_IsEnabled>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4819      	ldr	r0, [pc, #100]	; (8009fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009f42:	f7ff ff0f 	bl	8009d64 <LL_ADC_IsEnabled>
 8009f46:	4603      	mov	r3, r0
 8009f48:	431c      	orrs	r4, r3
 8009f4a:	481a      	ldr	r0, [pc, #104]	; (8009fb4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009f4c:	f7ff ff0a 	bl	8009d64 <LL_ADC_IsEnabled>
 8009f50:	4603      	mov	r3, r0
 8009f52:	4323      	orrs	r3, r4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	bf0c      	ite	eq
 8009f58:	2301      	moveq	r3, #1
 8009f5a:	2300      	movne	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d012      	beq.n	8009f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009f6a:	f023 030f 	bic.w	r3, r3, #15
 8009f6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009f70:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009f72:	e009      	b.n	8009f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f78:	f043 0220 	orr.w	r2, r3, #32
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009f86:	e000      	b.n	8009f8a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009f88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009f92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3784      	adds	r7, #132	; 0x84
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd90      	pop	{r4, r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	50000100 	.word	0x50000100
 8009fa4:	50000400 	.word	0x50000400
 8009fa8:	50000500 	.word	0x50000500
 8009fac:	50000300 	.word	0x50000300
 8009fb0:	50000700 	.word	0x50000700
 8009fb4:	50000600 	.word	0x50000600

08009fb8 <LL_EXTI_EnableIT_0_31>:
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009fc0:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <LL_EXTI_EnableIT_0_31+0x20>)
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	4904      	ldr	r1, [pc, #16]	; (8009fd8 <LL_EXTI_EnableIT_0_31+0x20>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	600b      	str	r3, [r1, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	40010400 	.word	0x40010400

08009fdc <LL_EXTI_EnableIT_32_63>:
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009fe4:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <LL_EXTI_EnableIT_32_63+0x20>)
 8009fe6:	6a1a      	ldr	r2, [r3, #32]
 8009fe8:	4904      	ldr	r1, [pc, #16]	; (8009ffc <LL_EXTI_EnableIT_32_63+0x20>)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	620b      	str	r3, [r1, #32]
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	40010400 	.word	0x40010400

0800a000 <LL_EXTI_DisableIT_0_31>:
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a008:	4b06      	ldr	r3, [pc, #24]	; (800a024 <LL_EXTI_DisableIT_0_31+0x24>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	43db      	mvns	r3, r3
 800a010:	4904      	ldr	r1, [pc, #16]	; (800a024 <LL_EXTI_DisableIT_0_31+0x24>)
 800a012:	4013      	ands	r3, r2
 800a014:	600b      	str	r3, [r1, #0]
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40010400 	.word	0x40010400

0800a028 <LL_EXTI_DisableIT_32_63>:
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <LL_EXTI_DisableIT_32_63+0x24>)
 800a032:	6a1a      	ldr	r2, [r3, #32]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	43db      	mvns	r3, r3
 800a038:	4904      	ldr	r1, [pc, #16]	; (800a04c <LL_EXTI_DisableIT_32_63+0x24>)
 800a03a:	4013      	ands	r3, r2
 800a03c:	620b      	str	r3, [r1, #32]
}
 800a03e:	bf00      	nop
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	40010400 	.word	0x40010400

0800a050 <LL_EXTI_EnableEvent_0_31>:
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a058:	4b05      	ldr	r3, [pc, #20]	; (800a070 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	4904      	ldr	r1, [pc, #16]	; (800a070 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4313      	orrs	r3, r2
 800a062:	604b      	str	r3, [r1, #4]
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	40010400 	.word	0x40010400

0800a074 <LL_EXTI_EnableEvent_32_63>:
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a07e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a080:	4904      	ldr	r1, [pc, #16]	; (800a094 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4313      	orrs	r3, r2
 800a086:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	40010400 	.word	0x40010400

0800a098 <LL_EXTI_DisableEvent_0_31>:
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a0a0:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <LL_EXTI_DisableEvent_0_31+0x24>)
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	43db      	mvns	r3, r3
 800a0a8:	4904      	ldr	r1, [pc, #16]	; (800a0bc <LL_EXTI_DisableEvent_0_31+0x24>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	604b      	str	r3, [r1, #4]
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	40010400 	.word	0x40010400

0800a0c0 <LL_EXTI_DisableEvent_32_63>:
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a0ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	43db      	mvns	r3, r3
 800a0d0:	4904      	ldr	r1, [pc, #16]	; (800a0e4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a0d6:	bf00      	nop
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	40010400 	.word	0x40010400

0800a0e8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	4904      	ldr	r1, [pc, #16]	; (800a108 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	608b      	str	r3, [r1, #8]
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	40010400 	.word	0x40010400

0800a10c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a114:	4b05      	ldr	r3, [pc, #20]	; (800a12c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a118:	4904      	ldr	r1, [pc, #16]	; (800a12c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	40010400 	.word	0x40010400

0800a130 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a138:	4b06      	ldr	r3, [pc, #24]	; (800a154 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	43db      	mvns	r3, r3
 800a140:	4904      	ldr	r1, [pc, #16]	; (800a154 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a142:	4013      	ands	r3, r2
 800a144:	608b      	str	r3, [r1, #8]
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	40010400 	.word	0x40010400

0800a158 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a160:	4b06      	ldr	r3, [pc, #24]	; (800a17c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	43db      	mvns	r3, r3
 800a168:	4904      	ldr	r1, [pc, #16]	; (800a17c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a16a:	4013      	ands	r3, r2
 800a16c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	40010400 	.word	0x40010400

0800a180 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a188:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	4904      	ldr	r1, [pc, #16]	; (800a1a0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4313      	orrs	r3, r2
 800a192:	60cb      	str	r3, [r1, #12]
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	40010400 	.word	0x40010400

0800a1a4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b0:	4904      	ldr	r1, [pc, #16]	; (800a1c4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	40010400 	.word	0x40010400

0800a1c8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a1d0:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a1d2:	68da      	ldr	r2, [r3, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	43db      	mvns	r3, r3
 800a1d8:	4904      	ldr	r1, [pc, #16]	; (800a1ec <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a1da:	4013      	ands	r3, r2
 800a1dc:	60cb      	str	r3, [r1, #12]
}
 800a1de:	bf00      	nop
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	40010400 	.word	0x40010400

0800a1f0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	43db      	mvns	r3, r3
 800a200:	4904      	ldr	r1, [pc, #16]	; (800a214 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a202:	4013      	ands	r3, r2
 800a204:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	40010400 	.word	0x40010400

0800a218 <LL_EXTI_IsActiveFlag_0_31>:
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4013      	ands	r3, r2
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d101      	bne.n	800a232 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	40010400 	.word	0x40010400

0800a244 <LL_EXTI_IsActiveFlag_32_63>:
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a24c:	4b07      	ldr	r3, [pc, #28]	; (800a26c <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a24e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4013      	ands	r3, r2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	429a      	cmp	r2, r3
 800a258:	d101      	bne.n	800a25e <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	40010400 	.word	0x40010400

0800a270 <LL_EXTI_ClearFlag_0_31>:
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a278:	4a04      	ldr	r2, [pc, #16]	; (800a28c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6153      	str	r3, [r2, #20]
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	40010400 	.word	0x40010400

0800a290 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a298:	4a04      	ldr	r2, [pc, #16]	; (800a2ac <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	40010400 	.word	0x40010400

0800a2b0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	77fb      	strb	r3, [r7, #31]
 800a2ca:	e180      	b.n	800a5ce <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2da:	d102      	bne.n	800a2e2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	77fb      	strb	r3, [r7, #31]
 800a2e0:	e175      	b.n	800a5ce <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	7f5b      	ldrb	r3, [r3, #29]
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d108      	bne.n	800a2fe <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7fc fd91 	bl	8006e20 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a308:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	4b98      	ldr	r3, [pc, #608]	; (800a590 <HAL_COMP_Init+0x2e0>)
 800a330:	4013      	ands	r3, r2
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	6979      	ldr	r1, [r7, #20]
 800a338:	430b      	orrs	r3, r1
 800a33a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d015      	beq.n	800a376 <HAL_COMP_Init+0xc6>
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d112      	bne.n	800a376 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a350:	4b90      	ldr	r3, [pc, #576]	; (800a594 <HAL_COMP_Init+0x2e4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	099b      	lsrs	r3, r3, #6
 800a356:	4a90      	ldr	r2, [pc, #576]	; (800a598 <HAL_COMP_Init+0x2e8>)
 800a358:	fba2 2303 	umull	r2, r3, r2, r3
 800a35c:	099a      	lsrs	r2, r3, #6
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a368:	e002      	b.n	800a370 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1f9      	bne.n	800a36a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a88      	ldr	r2, [pc, #544]	; (800a59c <HAL_COMP_Init+0x2ec>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d028      	beq.n	800a3d2 <HAL_COMP_Init+0x122>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a86      	ldr	r2, [pc, #536]	; (800a5a0 <HAL_COMP_Init+0x2f0>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d020      	beq.n	800a3cc <HAL_COMP_Init+0x11c>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a85      	ldr	r2, [pc, #532]	; (800a5a4 <HAL_COMP_Init+0x2f4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d018      	beq.n	800a3c6 <HAL_COMP_Init+0x116>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a83      	ldr	r2, [pc, #524]	; (800a5a8 <HAL_COMP_Init+0x2f8>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d010      	beq.n	800a3c0 <HAL_COMP_Init+0x110>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a82      	ldr	r2, [pc, #520]	; (800a5ac <HAL_COMP_Init+0x2fc>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d008      	beq.n	800a3ba <HAL_COMP_Init+0x10a>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a80      	ldr	r2, [pc, #512]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d101      	bne.n	800a3b6 <HAL_COMP_Init+0x106>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e00f      	b.n	800a3d6 <HAL_COMP_Init+0x126>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	e00d      	b.n	800a3d6 <HAL_COMP_Init+0x126>
 800a3ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3be:	e00a      	b.n	800a3d6 <HAL_COMP_Init+0x126>
 800a3c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3c4:	e007      	b.n	800a3d6 <HAL_COMP_Init+0x126>
 800a3c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a3ca:	e004      	b.n	800a3d6 <HAL_COMP_Init+0x126>
 800a3cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a3d0:	e001      	b.n	800a3d6 <HAL_COMP_Init+0x126>
 800a3d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a3d6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 80b6 	beq.w	800a552 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	f003 0310 	and.w	r3, r3, #16
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d011      	beq.n	800a416 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a6e      	ldr	r2, [pc, #440]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d004      	beq.n	800a406 <HAL_COMP_Init+0x156>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a6c      	ldr	r2, [pc, #432]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d103      	bne.n	800a40e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800a406:	6938      	ldr	r0, [r7, #16]
 800a408:	f7ff fe80 	bl	800a10c <LL_EXTI_EnableRisingTrig_32_63>
 800a40c:	e014      	b.n	800a438 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800a40e:	6938      	ldr	r0, [r7, #16]
 800a410:	f7ff fe6a 	bl	800a0e8 <LL_EXTI_EnableRisingTrig_0_31>
 800a414:	e010      	b.n	800a438 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a65      	ldr	r2, [pc, #404]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d004      	beq.n	800a42a <HAL_COMP_Init+0x17a>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a63      	ldr	r2, [pc, #396]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d103      	bne.n	800a432 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f7ff fe94 	bl	800a158 <LL_EXTI_DisableRisingTrig_32_63>
 800a430:	e002      	b.n	800a438 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800a432:	6938      	ldr	r0, [r7, #16]
 800a434:	f7ff fe7c 	bl	800a130 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	699b      	ldr	r3, [r3, #24]
 800a43c:	f003 0320 	and.w	r3, r3, #32
 800a440:	2b00      	cmp	r3, #0
 800a442:	d011      	beq.n	800a468 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a59      	ldr	r2, [pc, #356]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d004      	beq.n	800a458 <HAL_COMP_Init+0x1a8>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a58      	ldr	r2, [pc, #352]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d103      	bne.n	800a460 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800a458:	6938      	ldr	r0, [r7, #16]
 800a45a:	f7ff fea3 	bl	800a1a4 <LL_EXTI_EnableFallingTrig_32_63>
 800a45e:	e014      	b.n	800a48a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800a460:	6938      	ldr	r0, [r7, #16]
 800a462:	f7ff fe8d 	bl	800a180 <LL_EXTI_EnableFallingTrig_0_31>
 800a466:	e010      	b.n	800a48a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a50      	ldr	r2, [pc, #320]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d004      	beq.n	800a47c <HAL_COMP_Init+0x1cc>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a4f      	ldr	r2, [pc, #316]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d103      	bne.n	800a484 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800a47c:	6938      	ldr	r0, [r7, #16]
 800a47e:	f7ff feb7 	bl	800a1f0 <LL_EXTI_DisableFallingTrig_32_63>
 800a482:	e002      	b.n	800a48a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800a484:	6938      	ldr	r0, [r7, #16]
 800a486:	f7ff fe9f 	bl	800a1c8 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a48      	ldr	r2, [pc, #288]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d004      	beq.n	800a49e <HAL_COMP_Init+0x1ee>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a46      	ldr	r2, [pc, #280]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d103      	bne.n	800a4a6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a49e:	6938      	ldr	r0, [r7, #16]
 800a4a0:	f7ff fef6 	bl	800a290 <LL_EXTI_ClearFlag_32_63>
 800a4a4:	e002      	b.n	800a4ac <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a4a6:	6938      	ldr	r0, [r7, #16]
 800a4a8:	f7ff fee2 	bl	800a270 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d011      	beq.n	800a4dc <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a3c      	ldr	r2, [pc, #240]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d004      	beq.n	800a4cc <HAL_COMP_Init+0x21c>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a3b      	ldr	r2, [pc, #236]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d103      	bne.n	800a4d4 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800a4cc:	6938      	ldr	r0, [r7, #16]
 800a4ce:	f7ff fdd1 	bl	800a074 <LL_EXTI_EnableEvent_32_63>
 800a4d2:	e014      	b.n	800a4fe <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800a4d4:	6938      	ldr	r0, [r7, #16]
 800a4d6:	f7ff fdbb 	bl	800a050 <LL_EXTI_EnableEvent_0_31>
 800a4da:	e010      	b.n	800a4fe <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a33      	ldr	r2, [pc, #204]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d004      	beq.n	800a4f0 <HAL_COMP_Init+0x240>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a32      	ldr	r2, [pc, #200]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d103      	bne.n	800a4f8 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800a4f0:	6938      	ldr	r0, [r7, #16]
 800a4f2:	f7ff fde5 	bl	800a0c0 <LL_EXTI_DisableEvent_32_63>
 800a4f6:	e002      	b.n	800a4fe <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800a4f8:	6938      	ldr	r0, [r7, #16]
 800a4fa:	f7ff fdcd 	bl	800a098 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	d011      	beq.n	800a52e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a28      	ldr	r2, [pc, #160]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d004      	beq.n	800a51e <HAL_COMP_Init+0x26e>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a26      	ldr	r2, [pc, #152]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d103      	bne.n	800a526 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800a51e:	6938      	ldr	r0, [r7, #16]
 800a520:	f7ff fd5c 	bl	8009fdc <LL_EXTI_EnableIT_32_63>
 800a524:	e04b      	b.n	800a5be <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800a526:	6938      	ldr	r0, [r7, #16]
 800a528:	f7ff fd46 	bl	8009fb8 <LL_EXTI_EnableIT_0_31>
 800a52c:	e047      	b.n	800a5be <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a1f      	ldr	r2, [pc, #124]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d004      	beq.n	800a542 <HAL_COMP_Init+0x292>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a1d      	ldr	r2, [pc, #116]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d103      	bne.n	800a54a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800a542:	6938      	ldr	r0, [r7, #16]
 800a544:	f7ff fd70 	bl	800a028 <LL_EXTI_DisableIT_32_63>
 800a548:	e039      	b.n	800a5be <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800a54a:	6938      	ldr	r0, [r7, #16]
 800a54c:	f7ff fd58 	bl	800a000 <LL_EXTI_DisableIT_0_31>
 800a550:	e035      	b.n	800a5be <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a16      	ldr	r2, [pc, #88]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d004      	beq.n	800a566 <HAL_COMP_Init+0x2b6>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a14      	ldr	r2, [pc, #80]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d103      	bne.n	800a56e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800a566:	6938      	ldr	r0, [r7, #16]
 800a568:	f7ff fdaa 	bl	800a0c0 <LL_EXTI_DisableEvent_32_63>
 800a56c:	e002      	b.n	800a574 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800a56e:	6938      	ldr	r0, [r7, #16]
 800a570:	f7ff fd92 	bl	800a098 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a0d      	ldr	r2, [pc, #52]	; (800a5b0 <HAL_COMP_Init+0x300>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d004      	beq.n	800a588 <HAL_COMP_Init+0x2d8>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a0c      	ldr	r2, [pc, #48]	; (800a5b4 <HAL_COMP_Init+0x304>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d117      	bne.n	800a5b8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800a588:	6938      	ldr	r0, [r7, #16]
 800a58a:	f7ff fd4d 	bl	800a028 <LL_EXTI_DisableIT_32_63>
 800a58e:	e016      	b.n	800a5be <HAL_COMP_Init+0x30e>
 800a590:	ff007e0f 	.word	0xff007e0f
 800a594:	20000c34 	.word	0x20000c34
 800a598:	053e2d63 	.word	0x053e2d63
 800a59c:	40010200 	.word	0x40010200
 800a5a0:	40010204 	.word	0x40010204
 800a5a4:	40010208 	.word	0x40010208
 800a5a8:	4001020c 	.word	0x4001020c
 800a5ac:	40010210 	.word	0x40010210
 800a5b0:	40010214 	.word	0x40010214
 800a5b4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800a5b8:	6938      	ldr	r0, [r7, #16]
 800a5ba:	f7ff fd21 	bl	800a000 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	7f5b      	ldrb	r3, [r3, #29]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800a5ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3720      	adds	r7, #32
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	73fb      	strb	r3, [r7, #15]
 800a5ee:	e01d      	b.n	800a62c <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5fe:	d102      	bne.n	800a606 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
 800a604:	e012      	b.n	800a62c <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	7f5b      	ldrb	r3, [r3, #29]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00b      	beq.n	800a628 <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f022 0201 	bic.w	r2, r2, #1
 800a61e:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	775a      	strb	r2, [r3, #29]
 800a626:	e001      	b.n	800a62c <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
	...

0800a63c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a2f      	ldr	r2, [pc, #188]	; (800a708 <HAL_COMP_IRQHandler+0xcc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d028      	beq.n	800a6a0 <HAL_COMP_IRQHandler+0x64>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a2e      	ldr	r2, [pc, #184]	; (800a70c <HAL_COMP_IRQHandler+0xd0>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d020      	beq.n	800a69a <HAL_COMP_IRQHandler+0x5e>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a2c      	ldr	r2, [pc, #176]	; (800a710 <HAL_COMP_IRQHandler+0xd4>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d018      	beq.n	800a694 <HAL_COMP_IRQHandler+0x58>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a2b      	ldr	r2, [pc, #172]	; (800a714 <HAL_COMP_IRQHandler+0xd8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d010      	beq.n	800a68e <HAL_COMP_IRQHandler+0x52>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a29      	ldr	r2, [pc, #164]	; (800a718 <HAL_COMP_IRQHandler+0xdc>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d008      	beq.n	800a688 <HAL_COMP_IRQHandler+0x4c>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a28      	ldr	r2, [pc, #160]	; (800a71c <HAL_COMP_IRQHandler+0xe0>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d101      	bne.n	800a684 <HAL_COMP_IRQHandler+0x48>
 800a680:	2301      	movs	r3, #1
 800a682:	e00f      	b.n	800a6a4 <HAL_COMP_IRQHandler+0x68>
 800a684:	2302      	movs	r3, #2
 800a686:	e00d      	b.n	800a6a4 <HAL_COMP_IRQHandler+0x68>
 800a688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a68c:	e00a      	b.n	800a6a4 <HAL_COMP_IRQHandler+0x68>
 800a68e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a692:	e007      	b.n	800a6a4 <HAL_COMP_IRQHandler+0x68>
 800a694:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a698:	e004      	b.n	800a6a4 <HAL_COMP_IRQHandler+0x68>
 800a69a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a69e:	e001      	b.n	800a6a4 <HAL_COMP_IRQHandler+0x68>
 800a6a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6a4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a1b      	ldr	r2, [pc, #108]	; (800a71c <HAL_COMP_IRQHandler+0xe0>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d004      	beq.n	800a6be <HAL_COMP_IRQHandler+0x82>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a19      	ldr	r2, [pc, #100]	; (800a720 <HAL_COMP_IRQHandler+0xe4>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d108      	bne.n	800a6d0 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800a6be:	68b8      	ldr	r0, [r7, #8]
 800a6c0:	f7ff fdc0 	bl	800a244 <LL_EXTI_IsActiveFlag_32_63>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00a      	beq.n	800a6e0 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800a6ce:	e007      	b.n	800a6e0 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800a6d0:	68b8      	ldr	r0, [r7, #8]
 800a6d2:	f7ff fda1 	bl	800a218 <LL_EXTI_IsActiveFlag_0_31>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00c      	beq.n	800a700 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d103      	bne.n	800a6f4 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a6ec:	68b8      	ldr	r0, [r7, #8]
 800a6ee:	f7ff fdcf 	bl	800a290 <LL_EXTI_ClearFlag_32_63>
 800a6f2:	e002      	b.n	800a6fa <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a6f4:	68b8      	ldr	r0, [r7, #8]
 800a6f6:	f7ff fdbb 	bl	800a270 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7fb fc24 	bl	8005f48 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800a700:	bf00      	nop
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	40010200 	.word	0x40010200
 800a70c:	40010204 	.word	0x40010204
 800a710:	40010208 	.word	0x40010208
 800a714:	4001020c 	.word	0x4001020c
 800a718:	40010210 	.word	0x40010210
 800a71c:	40010214 	.word	0x40010214
 800a720:	40010218 	.word	0x40010218

0800a724 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	0f9b      	lsrs	r3, r3, #30
 800a734:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800a738:	4618      	mov	r0, r3
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <__NVIC_SetPriorityGrouping>:
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a754:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <__NVIC_SetPriorityGrouping+0x44>)
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a760:	4013      	ands	r3, r2
 800a762:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a76c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a776:	4a04      	ldr	r2, [pc, #16]	; (800a788 <__NVIC_SetPriorityGrouping+0x44>)
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	60d3      	str	r3, [r2, #12]
}
 800a77c:	bf00      	nop
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	e000ed00 	.word	0xe000ed00

0800a78c <__NVIC_GetPriorityGrouping>:
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <__NVIC_GetPriorityGrouping+0x18>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	0a1b      	lsrs	r3, r3, #8
 800a796:	f003 0307 	and.w	r3, r3, #7
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	e000ed00 	.word	0xe000ed00

0800a7a8 <__NVIC_EnableIRQ>:
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	db0b      	blt.n	800a7d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	f003 021f 	and.w	r2, r3, #31
 800a7c0:	4907      	ldr	r1, [pc, #28]	; (800a7e0 <__NVIC_EnableIRQ+0x38>)
 800a7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c6:	095b      	lsrs	r3, r3, #5
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	fa00 f202 	lsl.w	r2, r0, r2
 800a7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a7d2:	bf00      	nop
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	e000e100 	.word	0xe000e100

0800a7e4 <__NVIC_DisableIRQ>:
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	db10      	blt.n	800a818 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7f6:	79fb      	ldrb	r3, [r7, #7]
 800a7f8:	f003 021f 	and.w	r2, r3, #31
 800a7fc:	4909      	ldr	r1, [pc, #36]	; (800a824 <__NVIC_DisableIRQ+0x40>)
 800a7fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a802:	095b      	lsrs	r3, r3, #5
 800a804:	2001      	movs	r0, #1
 800a806:	fa00 f202 	lsl.w	r2, r0, r2
 800a80a:	3320      	adds	r3, #32
 800a80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a814:	f3bf 8f6f 	isb	sy
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	e000e100 	.word	0xe000e100

0800a828 <__NVIC_SetPriority>:
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4603      	mov	r3, r0
 800a830:	6039      	str	r1, [r7, #0]
 800a832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	db0a      	blt.n	800a852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	490c      	ldr	r1, [pc, #48]	; (800a874 <__NVIC_SetPriority+0x4c>)
 800a842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a846:	0112      	lsls	r2, r2, #4
 800a848:	b2d2      	uxtb	r2, r2
 800a84a:	440b      	add	r3, r1
 800a84c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a850:	e00a      	b.n	800a868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	4908      	ldr	r1, [pc, #32]	; (800a878 <__NVIC_SetPriority+0x50>)
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	f003 030f 	and.w	r3, r3, #15
 800a85e:	3b04      	subs	r3, #4
 800a860:	0112      	lsls	r2, r2, #4
 800a862:	b2d2      	uxtb	r2, r2
 800a864:	440b      	add	r3, r1
 800a866:	761a      	strb	r2, [r3, #24]
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	e000e100 	.word	0xe000e100
 800a878:	e000ed00 	.word	0xe000ed00

0800a87c <NVIC_EncodePriority>:
{
 800a87c:	b480      	push	{r7}
 800a87e:	b089      	sub	sp, #36	; 0x24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	f1c3 0307 	rsb	r3, r3, #7
 800a896:	2b04      	cmp	r3, #4
 800a898:	bf28      	it	cs
 800a89a:	2304      	movcs	r3, #4
 800a89c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	2b06      	cmp	r3, #6
 800a8a4:	d902      	bls.n	800a8ac <NVIC_EncodePriority+0x30>
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	3b03      	subs	r3, #3
 800a8aa:	e000      	b.n	800a8ae <NVIC_EncodePriority+0x32>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ba:	43da      	mvns	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	401a      	ands	r2, r3
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a8c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ce:	43d9      	mvns	r1, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8d4:	4313      	orrs	r3, r2
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3724      	adds	r7, #36	; 0x24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
	...

0800a8e4 <SysTick_Config>:
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8f4:	d301      	bcc.n	800a8fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e00f      	b.n	800a91a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a8fa:	4a0a      	ldr	r2, [pc, #40]	; (800a924 <SysTick_Config+0x40>)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a902:	210f      	movs	r1, #15
 800a904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a908:	f7ff ff8e 	bl	800a828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <SysTick_Config+0x40>)
 800a90e:	2200      	movs	r2, #0
 800a910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a912:	4b04      	ldr	r3, [pc, #16]	; (800a924 <SysTick_Config+0x40>)
 800a914:	2207      	movs	r2, #7
 800a916:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	e000e010 	.word	0xe000e010

0800a928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff ff07 	bl	800a744 <__NVIC_SetPriorityGrouping>
}
 800a936:	bf00      	nop
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b086      	sub	sp, #24
 800a942:	af00      	add	r7, sp, #0
 800a944:	4603      	mov	r3, r0
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
 800a94a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a94c:	f7ff ff1e 	bl	800a78c <__NVIC_GetPriorityGrouping>
 800a950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	6978      	ldr	r0, [r7, #20]
 800a958:	f7ff ff90 	bl	800a87c <NVIC_EncodePriority>
 800a95c:	4602      	mov	r2, r0
 800a95e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a962:	4611      	mov	r1, r2
 800a964:	4618      	mov	r0, r3
 800a966:	f7ff ff5f 	bl	800a828 <__NVIC_SetPriority>
}
 800a96a:	bf00      	nop
 800a96c:	3718      	adds	r7, #24
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	4603      	mov	r3, r0
 800a97a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a97c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff ff11 	bl	800a7a8 <__NVIC_EnableIRQ>
}
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	4603      	mov	r3, r0
 800a996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff ff21 	bl	800a7e4 <__NVIC_DisableIRQ>
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff ff96 	bl	800a8e4 <SysTick_Config>
 800a9b8:	4603      	mov	r3, r0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e014      	b.n	800a9fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	791b      	ldrb	r3, [r3, #4]
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d105      	bne.n	800a9ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7fc fad9 	bl	8006f9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b082      	sub	sp, #8
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	795b      	ldrb	r3, [r3, #5]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <HAL_DAC_Start+0x16>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e043      	b.n	800aaa4 <HAL_DAC_Start+0x9e>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2202      	movs	r2, #2
 800aa26:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6819      	ldr	r1, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	f003 0310 	and.w	r3, r3, #16
 800aa34:	2201      	movs	r2, #1
 800aa36:	409a      	lsls	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800aa40:	2001      	movs	r0, #1
 800aa42:	f7fd fe65 	bl	8008710 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10f      	bne.n	800aa6c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d11d      	bne.n	800aa96 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f042 0201 	orr.w	r2, r2, #1
 800aa68:	605a      	str	r2, [r3, #4]
 800aa6a:	e014      	b.n	800aa96 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	f003 0310 	and.w	r3, r3, #16
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d107      	bne.n	800aa96 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f042 0202 	orr.w	r2, r2, #2
 800aa94:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800aaba:	2300      	movs	r3, #0
 800aabc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	795b      	ldrb	r3, [r3, #5]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d101      	bne.n	800aaca <HAL_DAC_Start_DMA+0x1e>
 800aac6:	2302      	movs	r3, #2
 800aac8:	e0a1      	b.n	800ac0e <HAL_DAC_Start_DMA+0x162>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2201      	movs	r2, #1
 800aace:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2202      	movs	r2, #2
 800aad4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d12a      	bne.n	800ab32 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	4a4d      	ldr	r2, [pc, #308]	; (800ac18 <HAL_DAC_Start_DMA+0x16c>)
 800aae2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	4a4c      	ldr	r2, [pc, #304]	; (800ac1c <HAL_DAC_Start_DMA+0x170>)
 800aaea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	4a4b      	ldr	r2, [pc, #300]	; (800ac20 <HAL_DAC_Start_DMA+0x174>)
 800aaf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab02:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d009      	beq.n	800ab1e <HAL_DAC_Start_DMA+0x72>
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	d00c      	beq.n	800ab28 <HAL_DAC_Start_DMA+0x7c>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d000      	beq.n	800ab14 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800ab12:	e039      	b.n	800ab88 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3308      	adds	r3, #8
 800ab1a:	613b      	str	r3, [r7, #16]
        break;
 800ab1c:	e034      	b.n	800ab88 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	330c      	adds	r3, #12
 800ab24:	613b      	str	r3, [r7, #16]
        break;
 800ab26:	e02f      	b.n	800ab88 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3310      	adds	r3, #16
 800ab2e:	613b      	str	r3, [r7, #16]
        break;
 800ab30:	e02a      	b.n	800ab88 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	4a3b      	ldr	r2, [pc, #236]	; (800ac24 <HAL_DAC_Start_DMA+0x178>)
 800ab38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	4a3a      	ldr	r2, [pc, #232]	; (800ac28 <HAL_DAC_Start_DMA+0x17c>)
 800ab40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	4a39      	ldr	r2, [pc, #228]	; (800ac2c <HAL_DAC_Start_DMA+0x180>)
 800ab48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ab58:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	2b04      	cmp	r3, #4
 800ab5e:	d009      	beq.n	800ab74 <HAL_DAC_Start_DMA+0xc8>
 800ab60:	2b08      	cmp	r3, #8
 800ab62:	d00c      	beq.n	800ab7e <HAL_DAC_Start_DMA+0xd2>
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d000      	beq.n	800ab6a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800ab68:	e00e      	b.n	800ab88 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3314      	adds	r3, #20
 800ab70:	613b      	str	r3, [r7, #16]
        break;
 800ab72:	e009      	b.n	800ab88 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3318      	adds	r3, #24
 800ab7a:	613b      	str	r3, [r7, #16]
        break;
 800ab7c:	e004      	b.n	800ab88 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	331c      	adds	r3, #28
 800ab84:	613b      	str	r3, [r7, #16]
        break;
 800ab86:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d111      	bne.n	800abb2 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6898      	ldr	r0, [r3, #8]
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	f000 fbd2 	bl	800b350 <HAL_DMA_Start_IT>
 800abac:	4603      	mov	r3, r0
 800abae:	75fb      	strb	r3, [r7, #23]
 800abb0:	e010      	b.n	800abd4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800abc0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	68d8      	ldr	r0, [r3, #12]
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	f000 fbc0 	bl	800b350 <HAL_DMA_Start_IT>
 800abd0:	4603      	mov	r3, r0
 800abd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800abda:	7dfb      	ldrb	r3, [r7, #23]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10f      	bne.n	800ac00 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6819      	ldr	r1, [r3, #0]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	f003 0310 	and.w	r3, r3, #16
 800abec:	2201      	movs	r2, #1
 800abee:	409a      	lsls	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	430a      	orrs	r2, r1
 800abf6:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800abf8:	2001      	movs	r0, #1
 800abfa:	f7fd fd89 	bl	8008710 <HAL_Delay>
 800abfe:	e005      	b.n	800ac0c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	f043 0204 	orr.w	r2, r3, #4
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	0800b0ed 	.word	0x0800b0ed
 800ac1c:	0800b10f 	.word	0x0800b10f
 800ac20:	0800b12b 	.word	0x0800b12b
 800ac24:	0800b195 	.word	0x0800b195
 800ac28:	0800b1b7 	.word	0x0800b1b7
 800ac2c:	0800b1d3 	.word	0x0800b1d3

0800ac30 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6819      	ldr	r1, [r3, #0]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	f003 0310 	and.w	r3, r3, #16
 800ac46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	43da      	mvns	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	400a      	ands	r2, r1
 800ac56:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6819      	ldr	r1, [r3, #0]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2201      	movs	r2, #1
 800ac66:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6a:	43da      	mvns	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	400a      	ands	r2, r1
 800ac72:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800ac74:	2001      	movs	r0, #1
 800ac76:	f7fd fd4b 	bl	8008710 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10f      	bne.n	800aca0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fbde 	bl	800b446 <HAL_DMA_Abort>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	e00e      	b.n	800acbe <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fbce 	bl	800b446 <HAL_DMA_Abort>
 800acaa:	4603      	mov	r3, r0
 800acac:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800acbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d003      	beq.n	800accc <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2204      	movs	r2, #4
 800acc8:	711a      	strb	r2, [r3, #4]
 800acca:	e002      	b.n	800acd2 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d105      	bne.n	800ad0c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4413      	add	r3, r2
 800ad06:	3308      	adds	r3, #8
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	e004      	b.n	800ad16 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4413      	add	r3, r2
 800ad12:	3314      	adds	r3, #20
 800ad14:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	371c      	adds	r7, #28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d103      	bne.n	800ad80 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	e002      	b.n	800ad86 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
	...

0800ad94 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	; 0x28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	795b      	ldrb	r3, [r3, #5]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_DAC_ConfigChannel+0x1c>
 800adac:	2302      	movs	r3, #2
 800adae:	e194      	b.n	800b0da <HAL_DAC_ConfigChannel+0x346>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2201      	movs	r2, #1
 800adb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2202      	movs	r2, #2
 800adba:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	d174      	bne.n	800aeae <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d137      	bne.n	800ae3a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800adca:	f7fd fc95 	bl	80086f8 <HAL_GetTick>
 800adce:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800add0:	e011      	b.n	800adf6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800add2:	f7fd fc91 	bl	80086f8 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	2b01      	cmp	r3, #1
 800adde:	d90a      	bls.n	800adf6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	f043 0208 	orr.w	r2, r3, #8
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2203      	movs	r2, #3
 800adf0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e171      	b.n	800b0da <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e6      	bne.n	800add2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800ae04:	2001      	movs	r0, #1
 800ae06:	f7fd fc83 	bl	8008710 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae12:	641a      	str	r2, [r3, #64]	; 0x40
 800ae14:	e01e      	b.n	800ae54 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800ae16:	f7fd fc6f 	bl	80086f8 <HAL_GetTick>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d90a      	bls.n	800ae3a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	f043 0208 	orr.w	r2, r3, #8
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2203      	movs	r2, #3
 800ae34:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e14f      	b.n	800b0da <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dbe8      	blt.n	800ae16 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800ae44:	2001      	movs	r0, #1
 800ae46:	f7fd fc63 	bl	8008710 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f003 0310 	and.w	r3, r3, #16
 800ae60:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ae64:	fa01 f303 	lsl.w	r3, r1, r3
 800ae68:	43db      	mvns	r3, r3
 800ae6a:	ea02 0103 	and.w	r1, r2, r3
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f003 0310 	and.w	r3, r3, #16
 800ae78:	409a      	lsls	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f003 0310 	and.w	r3, r3, #16
 800ae8e:	21ff      	movs	r1, #255	; 0xff
 800ae90:	fa01 f303 	lsl.w	r3, r1, r3
 800ae94:	43db      	mvns	r3, r3
 800ae96:	ea02 0103 	and.w	r1, r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f003 0310 	and.w	r3, r3, #16
 800aea4:	409a      	lsls	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d11d      	bne.n	800aef2 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f003 0310 	and.w	r3, r3, #16
 800aec4:	221f      	movs	r2, #31
 800aec6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeca:	43db      	mvns	r3, r3
 800aecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aece:	4013      	ands	r3, r2
 800aed0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f003 0310 	and.w	r3, r3, #16
 800aede:	69ba      	ldr	r2, [r7, #24]
 800aee0:	fa02 f303 	lsl.w	r3, r2, r3
 800aee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee6:	4313      	orrs	r3, r2
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f003 0310 	and.w	r3, r3, #16
 800af00:	2207      	movs	r2, #7
 800af02:	fa02 f303 	lsl.w	r3, r2, r3
 800af06:	43db      	mvns	r3, r3
 800af08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af0a:	4013      	ands	r3, r2
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	623b      	str	r3, [r7, #32]
 800af1e:	e011      	b.n	800af44 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	f003 0302 	and.w	r3, r3, #2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800af2c:	2301      	movs	r3, #1
 800af2e:	623b      	str	r3, [r7, #32]
 800af30:	e008      	b.n	800af44 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800af3a:	2301      	movs	r3, #1
 800af3c:	623b      	str	r3, [r7, #32]
 800af3e:	e001      	b.n	800af44 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800af40:	2300      	movs	r3, #0
 800af42:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	689a      	ldr	r2, [r3, #8]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	6a3a      	ldr	r2, [r7, #32]
 800af50:	4313      	orrs	r3, r2
 800af52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f003 0310 	and.w	r3, r3, #16
 800af5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af5e:	fa02 f303 	lsl.w	r3, r2, r3
 800af62:	43db      	mvns	r3, r3
 800af64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af66:	4013      	ands	r3, r2
 800af68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	791b      	ldrb	r3, [r3, #4]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d102      	bne.n	800af78 <HAL_DAC_ConfigChannel+0x1e4>
 800af72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af76:	e000      	b.n	800af7a <HAL_DAC_ConfigChannel+0x1e6>
 800af78:	2300      	movs	r3, #0
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f003 0310 	and.w	r3, r3, #16
 800af86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	43db      	mvns	r3, r3
 800af90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af92:	4013      	ands	r3, r2
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	795b      	ldrb	r3, [r3, #5]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d102      	bne.n	800afa4 <HAL_DAC_ConfigChannel+0x210>
 800af9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afa2:	e000      	b.n	800afa6 <HAL_DAC_ConfigChannel+0x212>
 800afa4:	2300      	movs	r3, #0
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800afb2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d114      	bne.n	800afe6 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800afbc:	f001 fbc2 	bl	800c744 <HAL_RCC_GetHCLKFreq>
 800afc0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	4a47      	ldr	r2, [pc, #284]	; (800b0e4 <HAL_DAC_ConfigChannel+0x350>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d904      	bls.n	800afd4 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
 800afd2:	e00d      	b.n	800aff0 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	4a44      	ldr	r2, [pc, #272]	; (800b0e8 <HAL_DAC_ConfigChannel+0x354>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d909      	bls.n	800aff0 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afe2:	627b      	str	r3, [r7, #36]	; 0x24
 800afe4:	e004      	b.n	800aff0 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afec:	4313      	orrs	r3, r2
 800afee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f003 0310 	and.w	r3, r3, #16
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	fa02 f303 	lsl.w	r3, r2, r3
 800affc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affe:	4313      	orrs	r3, r2
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6819      	ldr	r1, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f003 0310 	and.w	r3, r3, #16
 800b016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b01a:	fa02 f303 	lsl.w	r3, r2, r3
 800b01e:	43da      	mvns	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	400a      	ands	r2, r1
 800b026:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f003 0310 	and.w	r3, r3, #16
 800b036:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b03a:	fa02 f303 	lsl.w	r3, r2, r3
 800b03e:	43db      	mvns	r3, r3
 800b040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b042:	4013      	ands	r3, r2
 800b044:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f003 0310 	and.w	r3, r3, #16
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	fa02 f303 	lsl.w	r3, r2, r3
 800b058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b05a:	4313      	orrs	r3, r2
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b064:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6819      	ldr	r1, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	22c0      	movs	r2, #192	; 0xc0
 800b074:	fa02 f303 	lsl.w	r3, r2, r3
 800b078:	43da      	mvns	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	400a      	ands	r2, r1
 800b080:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	089b      	lsrs	r3, r3, #2
 800b088:	f003 030f 	and.w	r3, r3, #15
 800b08c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	089b      	lsrs	r3, r3, #2
 800b094:	021b      	lsls	r3, r3, #8
 800b096:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b09a:	69ba      	ldr	r2, [r7, #24]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b0b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0b4:	43db      	mvns	r3, r3
 800b0b6:	ea02 0103 	and.w	r1, r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f003 0310 	and.w	r3, r3, #16
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	409a      	lsls	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3728      	adds	r7, #40	; 0x28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	09896800 	.word	0x09896800
 800b0e8:	04c4b400 	.word	0x04c4b400

0800b0ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7ff fe16 	bl	800ad2c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2201      	movs	r2, #1
 800b104:	711a      	strb	r2, [r3, #4]
}
 800b106:	bf00      	nop
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7ff fe0f 	bl	800ad40 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b084      	sub	sp, #16
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b136:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	f043 0204 	orr.w	r2, r3, #4
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7ff fe05 	bl	800ad54 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2201      	movs	r2, #1
 800b14e:	711a      	strb	r2, [r3, #4]
}
 800b150:	bf00      	nop
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f7ff ffd8 	bl	800b158 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	711a      	strb	r2, [r3, #4]
}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f7ff ffd1 	bl	800b16c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	f043 0204 	orr.w	r2, r3, #4
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff ffc7 	bl	800b180 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	711a      	strb	r2, [r3, #4]
}
 800b1f8:	bf00      	nop
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e08d      	b.n	800b32e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	4b47      	ldr	r3, [pc, #284]	; (800b338 <HAL_DMA_Init+0x138>)
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d80f      	bhi.n	800b23e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	4b45      	ldr	r3, [pc, #276]	; (800b33c <HAL_DMA_Init+0x13c>)
 800b226:	4413      	add	r3, r2
 800b228:	4a45      	ldr	r2, [pc, #276]	; (800b340 <HAL_DMA_Init+0x140>)
 800b22a:	fba2 2303 	umull	r2, r3, r2, r3
 800b22e:	091b      	lsrs	r3, r3, #4
 800b230:	009a      	lsls	r2, r3, #2
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a42      	ldr	r2, [pc, #264]	; (800b344 <HAL_DMA_Init+0x144>)
 800b23a:	641a      	str	r2, [r3, #64]	; 0x40
 800b23c:	e00e      	b.n	800b25c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	461a      	mov	r2, r3
 800b244:	4b40      	ldr	r3, [pc, #256]	; (800b348 <HAL_DMA_Init+0x148>)
 800b246:	4413      	add	r3, r2
 800b248:	4a3d      	ldr	r2, [pc, #244]	; (800b340 <HAL_DMA_Init+0x140>)
 800b24a:	fba2 2303 	umull	r2, r3, r2, r3
 800b24e:	091b      	lsrs	r3, r3, #4
 800b250:	009a      	lsls	r2, r3, #2
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a3c      	ldr	r2, [pc, #240]	; (800b34c <HAL_DMA_Init+0x14c>)
 800b25a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b276:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b28c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fa10 	bl	800b6d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2bc:	d102      	bne.n	800b2c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2cc:	b2d2      	uxtb	r2, r2
 800b2ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b2d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d010      	beq.n	800b304 <HAL_DMA_Init+0x104>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2b04      	cmp	r3, #4
 800b2e8:	d80c      	bhi.n	800b304 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fa30 	bl	800b750 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b300:	605a      	str	r2, [r3, #4]
 800b302:	e008      	b.n	800b316 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	40020407 	.word	0x40020407
 800b33c:	bffdfff8 	.word	0xbffdfff8
 800b340:	cccccccd 	.word	0xcccccccd
 800b344:	40020000 	.word	0x40020000
 800b348:	bffdfbf8 	.word	0xbffdfbf8
 800b34c:	40020400 	.word	0x40020400

0800b350 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d101      	bne.n	800b370 <HAL_DMA_Start_IT+0x20>
 800b36c:	2302      	movs	r3, #2
 800b36e:	e066      	b.n	800b43e <HAL_DMA_Start_IT+0xee>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b01      	cmp	r3, #1
 800b382:	d155      	bne.n	800b430 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2202      	movs	r2, #2
 800b388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 0201 	bic.w	r2, r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 f954 	bl	800b656 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d008      	beq.n	800b3c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f042 020e 	orr.w	r2, r2, #14
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	e00f      	b.n	800b3e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f022 0204 	bic.w	r2, r2, #4
 800b3d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f042 020a 	orr.w	r2, r2, #10
 800b3e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b404:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d007      	beq.n	800b41e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b41c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f042 0201 	orr.w	r2, r2, #1
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	e005      	b.n	800b43c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b438:	2302      	movs	r3, #2
 800b43a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b446:	b480      	push	{r7}
 800b448:	b085      	sub	sp, #20
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d005      	beq.n	800b46a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2204      	movs	r2, #4
 800b462:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
 800b468:	e037      	b.n	800b4da <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f022 020e 	bic.w	r2, r2, #14
 800b478:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b488:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f022 0201 	bic.w	r2, r2, #1
 800b498:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b49e:	f003 021f 	and.w	r2, r3, #31
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	fa01 f202 	lsl.w	r2, r1, r2
 800b4ac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4b6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00c      	beq.n	800b4da <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4ce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b4d8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b514:	f003 031f 	and.w	r3, r3, #31
 800b518:	2204      	movs	r2, #4
 800b51a:	409a      	lsls	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	4013      	ands	r3, r2
 800b520:	2b00      	cmp	r3, #0
 800b522:	d026      	beq.n	800b572 <HAL_DMA_IRQHandler+0x7a>
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f003 0304 	and.w	r3, r3, #4
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d021      	beq.n	800b572 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0320 	and.w	r3, r3, #32
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d107      	bne.n	800b54c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0204 	bic.w	r2, r2, #4
 800b54a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b550:	f003 021f 	and.w	r2, r3, #31
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b558:	2104      	movs	r1, #4
 800b55a:	fa01 f202 	lsl.w	r2, r1, r2
 800b55e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b564:	2b00      	cmp	r3, #0
 800b566:	d071      	beq.n	800b64c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b570:	e06c      	b.n	800b64c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b576:	f003 031f 	and.w	r3, r3, #31
 800b57a:	2202      	movs	r2, #2
 800b57c:	409a      	lsls	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4013      	ands	r3, r2
 800b582:	2b00      	cmp	r3, #0
 800b584:	d02e      	beq.n	800b5e4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d029      	beq.n	800b5e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 0320 	and.w	r3, r3, #32
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10b      	bne.n	800b5b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f022 020a 	bic.w	r2, r2, #10
 800b5ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ba:	f003 021f 	and.w	r2, r3, #31
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c2:	2102      	movs	r1, #2
 800b5c4:	fa01 f202 	lsl.w	r2, r1, r2
 800b5c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d038      	beq.n	800b64c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b5e2:	e033      	b.n	800b64c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5e8:	f003 031f 	and.w	r3, r3, #31
 800b5ec:	2208      	movs	r2, #8
 800b5ee:	409a      	lsls	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d02a      	beq.n	800b64e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d025      	beq.n	800b64e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f022 020e 	bic.w	r2, r2, #14
 800b610:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b616:	f003 021f 	and.w	r2, r3, #31
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	2101      	movs	r1, #1
 800b620:	fa01 f202 	lsl.w	r2, r1, r2
 800b624:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b640:	2b00      	cmp	r3, #0
 800b642:	d004      	beq.n	800b64e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
}
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	607a      	str	r2, [r7, #4]
 800b662:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b66c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b672:	2b00      	cmp	r3, #0
 800b674:	d004      	beq.n	800b680 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b67e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b684:	f003 021f 	and.w	r2, r3, #31
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68c:	2101      	movs	r1, #1
 800b68e:	fa01 f202 	lsl.w	r2, r1, r2
 800b692:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	2b10      	cmp	r3, #16
 800b6a2:	d108      	bne.n	800b6b6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b6b4:	e007      	b.n	800b6c6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	60da      	str	r2, [r3, #12]
}
 800b6c6:	bf00      	nop
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
	...

0800b6d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b087      	sub	sp, #28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	4b16      	ldr	r3, [pc, #88]	; (800b73c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d802      	bhi.n	800b6ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800b6e8:	4b15      	ldr	r3, [pc, #84]	; (800b740 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	e001      	b.n	800b6f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800b6ee:	4b15      	ldr	r3, [pc, #84]	; (800b744 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b6f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	3b08      	subs	r3, #8
 800b6fe:	4a12      	ldr	r2, [pc, #72]	; (800b748 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b700:	fba2 2303 	umull	r2, r3, r2, r3
 800b704:	091b      	lsrs	r3, r3, #4
 800b706:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b70c:	089b      	lsrs	r3, r3, #2
 800b70e:	009a      	lsls	r2, r3, #2
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	4413      	add	r3, r2
 800b714:	461a      	mov	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a0b      	ldr	r2, [pc, #44]	; (800b74c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b71e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f003 031f 	and.w	r3, r3, #31
 800b726:	2201      	movs	r2, #1
 800b728:	409a      	lsls	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b72e:	bf00      	nop
 800b730:	371c      	adds	r7, #28
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	40020407 	.word	0x40020407
 800b740:	40020800 	.word	0x40020800
 800b744:	40020820 	.word	0x40020820
 800b748:	cccccccd 	.word	0xcccccccd
 800b74c:	40020880 	.word	0x40020880

0800b750 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b764:	4413      	add	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	461a      	mov	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a08      	ldr	r2, [pc, #32]	; (800b794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b772:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3b01      	subs	r3, #1
 800b778:	f003 031f 	and.w	r3, r3, #31
 800b77c:	2201      	movs	r2, #1
 800b77e:	409a      	lsls	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b784:	bf00      	nop
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	1000823f 	.word	0x1000823f
 800b794:	40020940 	.word	0x40020940

0800b798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b7a6:	e15a      	b.n	800ba5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 814c 	beq.w	800ba58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d00b      	beq.n	800b7e0 <HAL_GPIO_Init+0x48>
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d007      	beq.n	800b7e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7d4:	2b11      	cmp	r3, #17
 800b7d6:	d003      	beq.n	800b7e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	2b12      	cmp	r3, #18
 800b7de:	d130      	bne.n	800b842 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	2203      	movs	r2, #3
 800b7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f0:	43db      	mvns	r3, r3
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	4013      	ands	r3, r2
 800b7f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	005b      	lsls	r3, r3, #1
 800b800:	fa02 f303 	lsl.w	r3, r2, r3
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	4313      	orrs	r3, r2
 800b808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b816:	2201      	movs	r2, #1
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	43db      	mvns	r3, r3
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	4013      	ands	r3, r2
 800b824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	091b      	lsrs	r3, r3, #4
 800b82c:	f003 0201 	and.w	r2, r3, #1
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	fa02 f303 	lsl.w	r3, r2, r3
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	4313      	orrs	r3, r2
 800b83a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	005b      	lsls	r3, r3, #1
 800b84c:	2203      	movs	r2, #3
 800b84e:	fa02 f303 	lsl.w	r3, r2, r3
 800b852:	43db      	mvns	r3, r3
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4013      	ands	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	689a      	ldr	r2, [r3, #8]
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	fa02 f303 	lsl.w	r3, r2, r3
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	2b02      	cmp	r3, #2
 800b878:	d003      	beq.n	800b882 <HAL_GPIO_Init+0xea>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	2b12      	cmp	r3, #18
 800b880:	d123      	bne.n	800b8ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	08da      	lsrs	r2, r3, #3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3208      	adds	r2, #8
 800b88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	220f      	movs	r2, #15
 800b89a:	fa02 f303 	lsl.w	r3, r2, r3
 800b89e:	43db      	mvns	r3, r3
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	691a      	ldr	r2, [r3, #16]
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f003 0307 	and.w	r3, r3, #7
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	08da      	lsrs	r2, r3, #3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3208      	adds	r2, #8
 800b8c4:	6939      	ldr	r1, [r7, #16]
 800b8c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8da:	43db      	mvns	r3, r3
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	4013      	ands	r3, r2
 800b8e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f003 0203 	and.w	r2, r3, #3
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	005b      	lsls	r3, r3, #1
 800b8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 80a6 	beq.w	800ba58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b90c:	4b5b      	ldr	r3, [pc, #364]	; (800ba7c <HAL_GPIO_Init+0x2e4>)
 800b90e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b910:	4a5a      	ldr	r2, [pc, #360]	; (800ba7c <HAL_GPIO_Init+0x2e4>)
 800b912:	f043 0301 	orr.w	r3, r3, #1
 800b916:	6613      	str	r3, [r2, #96]	; 0x60
 800b918:	4b58      	ldr	r3, [pc, #352]	; (800ba7c <HAL_GPIO_Init+0x2e4>)
 800b91a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	60bb      	str	r3, [r7, #8]
 800b922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b924:	4a56      	ldr	r2, [pc, #344]	; (800ba80 <HAL_GPIO_Init+0x2e8>)
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	089b      	lsrs	r3, r3, #2
 800b92a:	3302      	adds	r3, #2
 800b92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	f003 0303 	and.w	r3, r3, #3
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	220f      	movs	r2, #15
 800b93c:	fa02 f303 	lsl.w	r3, r2, r3
 800b940:	43db      	mvns	r3, r3
 800b942:	693a      	ldr	r2, [r7, #16]
 800b944:	4013      	ands	r3, r2
 800b946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b94e:	d01f      	beq.n	800b990 <HAL_GPIO_Init+0x1f8>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a4c      	ldr	r2, [pc, #304]	; (800ba84 <HAL_GPIO_Init+0x2ec>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d019      	beq.n	800b98c <HAL_GPIO_Init+0x1f4>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a4b      	ldr	r2, [pc, #300]	; (800ba88 <HAL_GPIO_Init+0x2f0>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d013      	beq.n	800b988 <HAL_GPIO_Init+0x1f0>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a4a      	ldr	r2, [pc, #296]	; (800ba8c <HAL_GPIO_Init+0x2f4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00d      	beq.n	800b984 <HAL_GPIO_Init+0x1ec>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a49      	ldr	r2, [pc, #292]	; (800ba90 <HAL_GPIO_Init+0x2f8>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d007      	beq.n	800b980 <HAL_GPIO_Init+0x1e8>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a48      	ldr	r2, [pc, #288]	; (800ba94 <HAL_GPIO_Init+0x2fc>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d101      	bne.n	800b97c <HAL_GPIO_Init+0x1e4>
 800b978:	2305      	movs	r3, #5
 800b97a:	e00a      	b.n	800b992 <HAL_GPIO_Init+0x1fa>
 800b97c:	2306      	movs	r3, #6
 800b97e:	e008      	b.n	800b992 <HAL_GPIO_Init+0x1fa>
 800b980:	2304      	movs	r3, #4
 800b982:	e006      	b.n	800b992 <HAL_GPIO_Init+0x1fa>
 800b984:	2303      	movs	r3, #3
 800b986:	e004      	b.n	800b992 <HAL_GPIO_Init+0x1fa>
 800b988:	2302      	movs	r3, #2
 800b98a:	e002      	b.n	800b992 <HAL_GPIO_Init+0x1fa>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e000      	b.n	800b992 <HAL_GPIO_Init+0x1fa>
 800b990:	2300      	movs	r3, #0
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	f002 0203 	and.w	r2, r2, #3
 800b998:	0092      	lsls	r2, r2, #2
 800b99a:	4093      	lsls	r3, r2
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b9a2:	4937      	ldr	r1, [pc, #220]	; (800ba80 <HAL_GPIO_Init+0x2e8>)
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	089b      	lsrs	r3, r3, #2
 800b9a8:	3302      	adds	r3, #2
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b9b0:	4b39      	ldr	r3, [pc, #228]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	43db      	mvns	r3, r3
 800b9ba:	693a      	ldr	r2, [r7, #16]
 800b9bc:	4013      	ands	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b9d4:	4a30      	ldr	r2, [pc, #192]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b9da:	4b2f      	ldr	r3, [pc, #188]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	43db      	mvns	r3, r3
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b9fe:	4a26      	ldr	r2, [pc, #152]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ba04:	4b24      	ldr	r3, [pc, #144]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	43db      	mvns	r3, r3
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	4013      	ands	r3, r2
 800ba12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ba28:	4a1b      	ldr	r2, [pc, #108]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ba2e:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	43db      	mvns	r3, r3
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ba52:	4a11      	ldr	r2, [pc, #68]	; (800ba98 <HAL_GPIO_Init+0x300>)
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	fa22 f303 	lsr.w	r3, r2, r3
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f47f ae9d 	bne.w	800b7a8 <HAL_GPIO_Init+0x10>
  }
}
 800ba6e:	bf00      	nop
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	40021000 	.word	0x40021000
 800ba80:	40010000 	.word	0x40010000
 800ba84:	48000400 	.word	0x48000400
 800ba88:	48000800 	.word	0x48000800
 800ba8c:	48000c00 	.word	0x48000c00
 800ba90:	48001000 	.word	0x48001000
 800ba94:	48001400 	.word	0x48001400
 800ba98:	40010400 	.word	0x40010400

0800ba9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800baaa:	e0bd      	b.n	800bc28 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800baac:	2201      	movs	r2, #1
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	fa02 f303 	lsl.w	r3, r2, r3
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	4013      	ands	r3, r2
 800bab8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 80b0 	beq.w	800bc22 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800bac2:	4a60      	ldr	r2, [pc, #384]	; (800bc44 <HAL_GPIO_DeInit+0x1a8>)
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	089b      	lsrs	r3, r3, #2
 800bac8:	3302      	adds	r3, #2
 800baca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bace:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f003 0303 	and.w	r3, r3, #3
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	220f      	movs	r2, #15
 800bada:	fa02 f303 	lsl.w	r3, r2, r3
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	4013      	ands	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800baea:	d01f      	beq.n	800bb2c <HAL_GPIO_DeInit+0x90>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a56      	ldr	r2, [pc, #344]	; (800bc48 <HAL_GPIO_DeInit+0x1ac>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d019      	beq.n	800bb28 <HAL_GPIO_DeInit+0x8c>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a55      	ldr	r2, [pc, #340]	; (800bc4c <HAL_GPIO_DeInit+0x1b0>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d013      	beq.n	800bb24 <HAL_GPIO_DeInit+0x88>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a54      	ldr	r2, [pc, #336]	; (800bc50 <HAL_GPIO_DeInit+0x1b4>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d00d      	beq.n	800bb20 <HAL_GPIO_DeInit+0x84>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a53      	ldr	r2, [pc, #332]	; (800bc54 <HAL_GPIO_DeInit+0x1b8>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d007      	beq.n	800bb1c <HAL_GPIO_DeInit+0x80>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4a52      	ldr	r2, [pc, #328]	; (800bc58 <HAL_GPIO_DeInit+0x1bc>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d101      	bne.n	800bb18 <HAL_GPIO_DeInit+0x7c>
 800bb14:	2305      	movs	r3, #5
 800bb16:	e00a      	b.n	800bb2e <HAL_GPIO_DeInit+0x92>
 800bb18:	2306      	movs	r3, #6
 800bb1a:	e008      	b.n	800bb2e <HAL_GPIO_DeInit+0x92>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	e006      	b.n	800bb2e <HAL_GPIO_DeInit+0x92>
 800bb20:	2303      	movs	r3, #3
 800bb22:	e004      	b.n	800bb2e <HAL_GPIO_DeInit+0x92>
 800bb24:	2302      	movs	r3, #2
 800bb26:	e002      	b.n	800bb2e <HAL_GPIO_DeInit+0x92>
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e000      	b.n	800bb2e <HAL_GPIO_DeInit+0x92>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	f002 0203 	and.w	r2, r2, #3
 800bb34:	0092      	lsls	r2, r2, #2
 800bb36:	4093      	lsls	r3, r2
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d132      	bne.n	800bba4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800bb3e:	4b47      	ldr	r3, [pc, #284]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	43db      	mvns	r3, r3
 800bb46:	4945      	ldr	r1, [pc, #276]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb48:	4013      	ands	r3, r2
 800bb4a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800bb4c:	4b43      	ldr	r3, [pc, #268]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	43db      	mvns	r3, r3
 800bb54:	4941      	ldr	r1, [pc, #260]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb56:	4013      	ands	r3, r2
 800bb58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bb5a:	4b40      	ldr	r3, [pc, #256]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb5c:	689a      	ldr	r2, [r3, #8]
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	43db      	mvns	r3, r3
 800bb62:	493e      	ldr	r1, [pc, #248]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800bb68:	4b3c      	ldr	r3, [pc, #240]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb6a:	68da      	ldr	r2, [r3, #12]
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	43db      	mvns	r3, r3
 800bb70:	493a      	ldr	r1, [pc, #232]	; (800bc5c <HAL_GPIO_DeInit+0x1c0>)
 800bb72:	4013      	ands	r3, r2
 800bb74:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f003 0303 	and.w	r3, r3, #3
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	220f      	movs	r2, #15
 800bb80:	fa02 f303 	lsl.w	r3, r2, r3
 800bb84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bb86:	4a2f      	ldr	r2, [pc, #188]	; (800bc44 <HAL_GPIO_DeInit+0x1a8>)
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	089b      	lsrs	r3, r3, #2
 800bb8c:	3302      	adds	r3, #2
 800bb8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	43da      	mvns	r2, r3
 800bb96:	482b      	ldr	r0, [pc, #172]	; (800bc44 <HAL_GPIO_DeInit+0x1a8>)
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	089b      	lsrs	r3, r3, #2
 800bb9c:	400a      	ands	r2, r1
 800bb9e:	3302      	adds	r3, #2
 800bba0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	2103      	movs	r1, #3
 800bbae:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	08da      	lsrs	r2, r3, #3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	3208      	adds	r2, #8
 800bbc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	220f      	movs	r2, #15
 800bbce:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd2:	43db      	mvns	r3, r3
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	08d2      	lsrs	r2, r2, #3
 800bbd8:	4019      	ands	r1, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3208      	adds	r2, #8
 800bbde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	2103      	movs	r1, #3
 800bbec:	fa01 f303 	lsl.w	r3, r1, r3
 800bbf0:	43db      	mvns	r3, r3
 800bbf2:	401a      	ands	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	fa01 f303 	lsl.w	r3, r1, r3
 800bc04:	43db      	mvns	r3, r3
 800bc06:	401a      	ands	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	2103      	movs	r1, #3
 800bc16:	fa01 f303 	lsl.w	r3, r1, r3
 800bc1a:	43db      	mvns	r3, r3
 800bc1c:	401a      	ands	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	609a      	str	r2, [r3, #8]
    }

    position++;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	3301      	adds	r3, #1
 800bc26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f47f af3b 	bne.w	800baac <HAL_GPIO_DeInit+0x10>
  }
}
 800bc36:	bf00      	nop
 800bc38:	371c      	adds	r7, #28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	40010000 	.word	0x40010000
 800bc48:	48000400 	.word	0x48000400
 800bc4c:	48000800 	.word	0x48000800
 800bc50:	48000c00 	.word	0x48000c00
 800bc54:	48001000 	.word	0x48001000
 800bc58:	48001400 	.word	0x48001400
 800bc5c:	40010400 	.word	0x40010400

0800bc60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	807b      	strh	r3, [r7, #2]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bc70:	787b      	ldrb	r3, [r7, #1]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bc76:	887a      	ldrh	r2, [r7, #2]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bc7c:	e002      	b.n	800bc84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bc7e:	887a      	ldrh	r2, [r7, #2]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d141      	bne.n	800bd22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bc9e:	4b4b      	ldr	r3, [pc, #300]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcaa:	d131      	bne.n	800bd10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bcac:	4b47      	ldr	r3, [pc, #284]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcb2:	4a46      	ldr	r2, [pc, #280]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bcbc:	4b43      	ldr	r3, [pc, #268]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bcc4:	4a41      	ldr	r2, [pc, #260]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bccc:	4b40      	ldr	r3, [pc, #256]	; (800bdd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2232      	movs	r2, #50	; 0x32
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
 800bcd6:	4a3f      	ldr	r2, [pc, #252]	; (800bdd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800bcd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcdc:	0c9b      	lsrs	r3, r3, #18
 800bcde:	3301      	adds	r3, #1
 800bce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bce2:	e002      	b.n	800bcea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bcea:	4b38      	ldr	r3, [pc, #224]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf6:	d102      	bne.n	800bcfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1f2      	bne.n	800bce4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bcfe:	4b33      	ldr	r3, [pc, #204]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd0a:	d158      	bne.n	800bdbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800bd0c:	2303      	movs	r3, #3
 800bd0e:	e057      	b.n	800bdc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bd10:	4b2e      	ldr	r3, [pc, #184]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd16:	4a2d      	ldr	r2, [pc, #180]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800bd20:	e04d      	b.n	800bdbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd28:	d141      	bne.n	800bdae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800bd2a:	4b28      	ldr	r3, [pc, #160]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bd32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd36:	d131      	bne.n	800bd9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bd38:	4b24      	ldr	r3, [pc, #144]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd3e:	4a23      	ldr	r2, [pc, #140]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bd48:	4b20      	ldr	r3, [pc, #128]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bd50:	4a1e      	ldr	r2, [pc, #120]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bd58:	4b1d      	ldr	r3, [pc, #116]	; (800bdd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2232      	movs	r2, #50	; 0x32
 800bd5e:	fb02 f303 	mul.w	r3, r2, r3
 800bd62:	4a1c      	ldr	r2, [pc, #112]	; (800bdd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800bd64:	fba2 2303 	umull	r2, r3, r2, r3
 800bd68:	0c9b      	lsrs	r3, r3, #18
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bd6e:	e002      	b.n	800bd76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bd76:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd82:	d102      	bne.n	800bd8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1f2      	bne.n	800bd70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bd8a:	4b10      	ldr	r3, [pc, #64]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd96:	d112      	bne.n	800bdbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e011      	b.n	800bdc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bda2:	4a0a      	ldr	r2, [pc, #40]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bda4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bda8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800bdac:	e007      	b.n	800bdbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bdae:	4b07      	ldr	r3, [pc, #28]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bdb6:	4a05      	ldr	r2, [pc, #20]	; (800bdcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800bdb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bdbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	40007000 	.word	0x40007000
 800bdd0:	20000c34 	.word	0x20000c34
 800bdd4:	431bde83 	.word	0x431bde83

0800bdd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b088      	sub	sp, #32
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d101      	bne.n	800bdea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e308      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d075      	beq.n	800bee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bdf6:	4ba3      	ldr	r3, [pc, #652]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f003 030c 	and.w	r3, r3, #12
 800bdfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800be00:	4ba0      	ldr	r3, [pc, #640]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	f003 0303 	and.w	r3, r3, #3
 800be08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	2b0c      	cmp	r3, #12
 800be0e:	d102      	bne.n	800be16 <HAL_RCC_OscConfig+0x3e>
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	2b03      	cmp	r3, #3
 800be14:	d002      	beq.n	800be1c <HAL_RCC_OscConfig+0x44>
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	2b08      	cmp	r3, #8
 800be1a:	d10b      	bne.n	800be34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be1c:	4b99      	ldr	r3, [pc, #612]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d05b      	beq.n	800bee0 <HAL_RCC_OscConfig+0x108>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d157      	bne.n	800bee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e2e3      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be3c:	d106      	bne.n	800be4c <HAL_RCC_OscConfig+0x74>
 800be3e:	4b91      	ldr	r3, [pc, #580]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a90      	ldr	r2, [pc, #576]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	e01d      	b.n	800be88 <HAL_RCC_OscConfig+0xb0>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800be54:	d10c      	bne.n	800be70 <HAL_RCC_OscConfig+0x98>
 800be56:	4b8b      	ldr	r3, [pc, #556]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a8a      	ldr	r2, [pc, #552]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	4b88      	ldr	r3, [pc, #544]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a87      	ldr	r2, [pc, #540]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	e00b      	b.n	800be88 <HAL_RCC_OscConfig+0xb0>
 800be70:	4b84      	ldr	r3, [pc, #528]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a83      	ldr	r2, [pc, #524]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	4b81      	ldr	r3, [pc, #516]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a80      	ldr	r2, [pc, #512]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800be82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d013      	beq.n	800beb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be90:	f7fc fc32 	bl	80086f8 <HAL_GetTick>
 800be94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be96:	e008      	b.n	800beaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be98:	f7fc fc2e 	bl	80086f8 <HAL_GetTick>
 800be9c:	4602      	mov	r2, r0
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	2b64      	cmp	r3, #100	; 0x64
 800bea4:	d901      	bls.n	800beaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e2a8      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800beaa:	4b76      	ldr	r3, [pc, #472]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d0f0      	beq.n	800be98 <HAL_RCC_OscConfig+0xc0>
 800beb6:	e014      	b.n	800bee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beb8:	f7fc fc1e 	bl	80086f8 <HAL_GetTick>
 800bebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bebe:	e008      	b.n	800bed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bec0:	f7fc fc1a 	bl	80086f8 <HAL_GetTick>
 800bec4:	4602      	mov	r2, r0
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	2b64      	cmp	r3, #100	; 0x64
 800becc:	d901      	bls.n	800bed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bece:	2303      	movs	r3, #3
 800bed0:	e294      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bed2:	4b6c      	ldr	r3, [pc, #432]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1f0      	bne.n	800bec0 <HAL_RCC_OscConfig+0xe8>
 800bede:	e000      	b.n	800bee2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 0302 	and.w	r3, r3, #2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d075      	beq.n	800bfda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800beee:	4b65      	ldr	r3, [pc, #404]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f003 030c 	and.w	r3, r3, #12
 800bef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bef8:	4b62      	ldr	r3, [pc, #392]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f003 0303 	and.w	r3, r3, #3
 800bf00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	2b0c      	cmp	r3, #12
 800bf06:	d102      	bne.n	800bf0e <HAL_RCC_OscConfig+0x136>
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d002      	beq.n	800bf14 <HAL_RCC_OscConfig+0x13c>
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	2b04      	cmp	r3, #4
 800bf12:	d11f      	bne.n	800bf54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bf14:	4b5b      	ldr	r3, [pc, #364]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <HAL_RCC_OscConfig+0x154>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e267      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf2c:	4b55      	ldr	r3, [pc, #340]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	061b      	lsls	r3, r3, #24
 800bf3a:	4952      	ldr	r1, [pc, #328]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bf40:	4b51      	ldr	r3, [pc, #324]	; (800c088 <HAL_RCC_OscConfig+0x2b0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fc fb8b 	bl	8008660 <HAL_InitTick>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d043      	beq.n	800bfd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e253      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d023      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf5c:	4b49      	ldr	r3, [pc, #292]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a48      	ldr	r2, [pc, #288]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf68:	f7fc fbc6 	bl	80086f8 <HAL_GetTick>
 800bf6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf6e:	e008      	b.n	800bf82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf70:	f7fc fbc2 	bl	80086f8 <HAL_GetTick>
 800bf74:	4602      	mov	r2, r0
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d901      	bls.n	800bf82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e23c      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf82:	4b40      	ldr	r3, [pc, #256]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0f0      	beq.n	800bf70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf8e:	4b3d      	ldr	r3, [pc, #244]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	061b      	lsls	r3, r3, #24
 800bf9c:	4939      	ldr	r1, [pc, #228]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	604b      	str	r3, [r1, #4]
 800bfa2:	e01a      	b.n	800bfda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bfa4:	4b37      	ldr	r3, [pc, #220]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a36      	ldr	r2, [pc, #216]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bfaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfb0:	f7fc fba2 	bl	80086f8 <HAL_GetTick>
 800bfb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bfb6:	e008      	b.n	800bfca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfb8:	f7fc fb9e 	bl	80086f8 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d901      	bls.n	800bfca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e218      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bfca:	4b2e      	ldr	r3, [pc, #184]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1f0      	bne.n	800bfb8 <HAL_RCC_OscConfig+0x1e0>
 800bfd6:	e000      	b.n	800bfda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bfd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f003 0308 	and.w	r3, r3, #8
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d03c      	beq.n	800c060 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d01c      	beq.n	800c028 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bfee:	4b25      	ldr	r3, [pc, #148]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bff4:	4a23      	ldr	r2, [pc, #140]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800bff6:	f043 0301 	orr.w	r3, r3, #1
 800bffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bffe:	f7fc fb7b 	bl	80086f8 <HAL_GetTick>
 800c002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c004:	e008      	b.n	800c018 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c006:	f7fc fb77 	bl	80086f8 <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	2b02      	cmp	r3, #2
 800c012:	d901      	bls.n	800c018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e1f1      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c018:	4b1a      	ldr	r3, [pc, #104]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800c01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0ef      	beq.n	800c006 <HAL_RCC_OscConfig+0x22e>
 800c026:	e01b      	b.n	800c060 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c028:	4b16      	ldr	r3, [pc, #88]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800c02a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c02e:	4a15      	ldr	r2, [pc, #84]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800c030:	f023 0301 	bic.w	r3, r3, #1
 800c034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c038:	f7fc fb5e 	bl	80086f8 <HAL_GetTick>
 800c03c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c03e:	e008      	b.n	800c052 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c040:	f7fc fb5a 	bl	80086f8 <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e1d4      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c052:	4b0c      	ldr	r3, [pc, #48]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800c054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1ef      	bne.n	800c040 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 80ab 	beq.w	800c1c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c06e:	2300      	movs	r3, #0
 800c070:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c072:	4b04      	ldr	r3, [pc, #16]	; (800c084 <HAL_RCC_OscConfig+0x2ac>)
 800c074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d106      	bne.n	800c08c <HAL_RCC_OscConfig+0x2b4>
 800c07e:	2301      	movs	r3, #1
 800c080:	e005      	b.n	800c08e <HAL_RCC_OscConfig+0x2b6>
 800c082:	bf00      	nop
 800c084:	40021000 	.word	0x40021000
 800c088:	20000c38 	.word	0x20000c38
 800c08c:	2300      	movs	r3, #0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00d      	beq.n	800c0ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c092:	4baf      	ldr	r3, [pc, #700]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c096:	4aae      	ldr	r2, [pc, #696]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c09c:	6593      	str	r3, [r2, #88]	; 0x58
 800c09e:	4bac      	ldr	r3, [pc, #688]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0ae:	4ba9      	ldr	r3, [pc, #676]	; (800c354 <HAL_RCC_OscConfig+0x57c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d118      	bne.n	800c0ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c0ba:	4ba6      	ldr	r3, [pc, #664]	; (800c354 <HAL_RCC_OscConfig+0x57c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4aa5      	ldr	r2, [pc, #660]	; (800c354 <HAL_RCC_OscConfig+0x57c>)
 800c0c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c0c6:	f7fc fb17 	bl	80086f8 <HAL_GetTick>
 800c0ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0cc:	e008      	b.n	800c0e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0ce:	f7fc fb13 	bl	80086f8 <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d901      	bls.n	800c0e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e18d      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0e0:	4b9c      	ldr	r3, [pc, #624]	; (800c354 <HAL_RCC_OscConfig+0x57c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d0f0      	beq.n	800c0ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d108      	bne.n	800c106 <HAL_RCC_OscConfig+0x32e>
 800c0f4:	4b96      	ldr	r3, [pc, #600]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0fa:	4a95      	ldr	r2, [pc, #596]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c0fc:	f043 0301 	orr.w	r3, r3, #1
 800c100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c104:	e024      	b.n	800c150 <HAL_RCC_OscConfig+0x378>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	2b05      	cmp	r3, #5
 800c10c:	d110      	bne.n	800c130 <HAL_RCC_OscConfig+0x358>
 800c10e:	4b90      	ldr	r3, [pc, #576]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c114:	4a8e      	ldr	r2, [pc, #568]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c116:	f043 0304 	orr.w	r3, r3, #4
 800c11a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c11e:	4b8c      	ldr	r3, [pc, #560]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c124:	4a8a      	ldr	r2, [pc, #552]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c126:	f043 0301 	orr.w	r3, r3, #1
 800c12a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c12e:	e00f      	b.n	800c150 <HAL_RCC_OscConfig+0x378>
 800c130:	4b87      	ldr	r3, [pc, #540]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c136:	4a86      	ldr	r2, [pc, #536]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c138:	f023 0301 	bic.w	r3, r3, #1
 800c13c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c140:	4b83      	ldr	r3, [pc, #524]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c146:	4a82      	ldr	r2, [pc, #520]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c148:	f023 0304 	bic.w	r3, r3, #4
 800c14c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d016      	beq.n	800c186 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c158:	f7fc face 	bl	80086f8 <HAL_GetTick>
 800c15c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c15e:	e00a      	b.n	800c176 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c160:	f7fc faca 	bl	80086f8 <HAL_GetTick>
 800c164:	4602      	mov	r2, r0
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c16e:	4293      	cmp	r3, r2
 800c170:	d901      	bls.n	800c176 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e142      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c176:	4b76      	ldr	r3, [pc, #472]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17c:	f003 0302 	and.w	r3, r3, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	d0ed      	beq.n	800c160 <HAL_RCC_OscConfig+0x388>
 800c184:	e015      	b.n	800c1b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c186:	f7fc fab7 	bl	80086f8 <HAL_GetTick>
 800c18a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c18c:	e00a      	b.n	800c1a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c18e:	f7fc fab3 	bl	80086f8 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	f241 3288 	movw	r2, #5000	; 0x1388
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d901      	bls.n	800c1a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e12b      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c1a4:	4b6a      	ldr	r3, [pc, #424]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1aa:	f003 0302 	and.w	r3, r3, #2
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1ed      	bne.n	800c18e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c1b2:	7ffb      	ldrb	r3, [r7, #31]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d105      	bne.n	800c1c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1b8:	4b65      	ldr	r3, [pc, #404]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1bc:	4a64      	ldr	r2, [pc, #400]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c1be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f003 0320 	and.w	r3, r3, #32
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d03c      	beq.n	800c24a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01c      	beq.n	800c212 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c1d8:	4b5d      	ldr	r3, [pc, #372]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c1da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1de:	4a5c      	ldr	r2, [pc, #368]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c1e0:	f043 0301 	orr.w	r3, r3, #1
 800c1e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1e8:	f7fc fa86 	bl	80086f8 <HAL_GetTick>
 800c1ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c1ee:	e008      	b.n	800c202 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c1f0:	f7fc fa82 	bl	80086f8 <HAL_GetTick>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d901      	bls.n	800c202 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c1fe:	2303      	movs	r3, #3
 800c200:	e0fc      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c202:	4b53      	ldr	r3, [pc, #332]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d0ef      	beq.n	800c1f0 <HAL_RCC_OscConfig+0x418>
 800c210:	e01b      	b.n	800c24a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c212:	4b4f      	ldr	r3, [pc, #316]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c218:	4a4d      	ldr	r2, [pc, #308]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c21a:	f023 0301 	bic.w	r3, r3, #1
 800c21e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c222:	f7fc fa69 	bl	80086f8 <HAL_GetTick>
 800c226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c228:	e008      	b.n	800c23c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c22a:	f7fc fa65 	bl	80086f8 <HAL_GetTick>
 800c22e:	4602      	mov	r2, r0
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	2b02      	cmp	r3, #2
 800c236:	d901      	bls.n	800c23c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e0df      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c23c:	4b44      	ldr	r3, [pc, #272]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c23e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c242:	f003 0302 	and.w	r3, r3, #2
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1ef      	bne.n	800c22a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 80d3 	beq.w	800c3fa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c254:	4b3e      	ldr	r3, [pc, #248]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 030c 	and.w	r3, r3, #12
 800c25c:	2b0c      	cmp	r3, #12
 800c25e:	f000 808d 	beq.w	800c37c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d15a      	bne.n	800c320 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c26a:	4b39      	ldr	r3, [pc, #228]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a38      	ldr	r2, [pc, #224]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c276:	f7fc fa3f 	bl	80086f8 <HAL_GetTick>
 800c27a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c27c:	e008      	b.n	800c290 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c27e:	f7fc fa3b 	bl	80086f8 <HAL_GetTick>
 800c282:	4602      	mov	r2, r0
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d901      	bls.n	800c290 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e0b5      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c290:	4b2f      	ldr	r3, [pc, #188]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1f0      	bne.n	800c27e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c29c:	4b2c      	ldr	r3, [pc, #176]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	4b2d      	ldr	r3, [pc, #180]	; (800c358 <HAL_RCC_OscConfig+0x580>)
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	6a11      	ldr	r1, [r2, #32]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c2ac:	3a01      	subs	r2, #1
 800c2ae:	0112      	lsls	r2, r2, #4
 800c2b0:	4311      	orrs	r1, r2
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c2b6:	0212      	lsls	r2, r2, #8
 800c2b8:	4311      	orrs	r1, r2
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c2be:	0852      	lsrs	r2, r2, #1
 800c2c0:	3a01      	subs	r2, #1
 800c2c2:	0552      	lsls	r2, r2, #21
 800c2c4:	4311      	orrs	r1, r2
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c2ca:	0852      	lsrs	r2, r2, #1
 800c2cc:	3a01      	subs	r2, #1
 800c2ce:	0652      	lsls	r2, r2, #25
 800c2d0:	4311      	orrs	r1, r2
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c2d6:	06d2      	lsls	r2, r2, #27
 800c2d8:	430a      	orrs	r2, r1
 800c2da:	491d      	ldr	r1, [pc, #116]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c2e0:	4b1b      	ldr	r3, [pc, #108]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a1a      	ldr	r2, [pc, #104]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c2e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c2ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c2ec:	4b18      	ldr	r3, [pc, #96]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	4a17      	ldr	r2, [pc, #92]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c2f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c2f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2f8:	f7fc f9fe 	bl	80086f8 <HAL_GetTick>
 800c2fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2fe:	e008      	b.n	800c312 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c300:	f7fc f9fa 	bl	80086f8 <HAL_GetTick>
 800c304:	4602      	mov	r2, r0
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d901      	bls.n	800c312 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e074      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c312:	4b0f      	ldr	r3, [pc, #60]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d0f0      	beq.n	800c300 <HAL_RCC_OscConfig+0x528>
 800c31e:	e06c      	b.n	800c3fa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c320:	4b0b      	ldr	r3, [pc, #44]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a0a      	ldr	r2, [pc, #40]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c32a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c32c:	4b08      	ldr	r3, [pc, #32]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	4a07      	ldr	r2, [pc, #28]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c332:	f023 0303 	bic.w	r3, r3, #3
 800c336:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	4a04      	ldr	r2, [pc, #16]	; (800c350 <HAL_RCC_OscConfig+0x578>)
 800c33e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c348:	f7fc f9d6 	bl	80086f8 <HAL_GetTick>
 800c34c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c34e:	e00e      	b.n	800c36e <HAL_RCC_OscConfig+0x596>
 800c350:	40021000 	.word	0x40021000
 800c354:	40007000 	.word	0x40007000
 800c358:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c35c:	f7fc f9cc 	bl	80086f8 <HAL_GetTick>
 800c360:	4602      	mov	r2, r0
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	2b02      	cmp	r3, #2
 800c368:	d901      	bls.n	800c36e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c36a:	2303      	movs	r3, #3
 800c36c:	e046      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c36e:	4b25      	ldr	r3, [pc, #148]	; (800c404 <HAL_RCC_OscConfig+0x62c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1f0      	bne.n	800c35c <HAL_RCC_OscConfig+0x584>
 800c37a:	e03e      	b.n	800c3fa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	69db      	ldr	r3, [r3, #28]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d101      	bne.n	800c388 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	e039      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c388:	4b1e      	ldr	r3, [pc, #120]	; (800c404 <HAL_RCC_OscConfig+0x62c>)
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f003 0203 	and.w	r2, r3, #3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6a1b      	ldr	r3, [r3, #32]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d12c      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d123      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d11b      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d113      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d8:	085b      	lsrs	r3, r3, #1
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d109      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ec:	085b      	lsrs	r3, r3, #1
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d001      	beq.n	800c3fa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e000      	b.n	800c3fc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3720      	adds	r7, #32
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	40021000 	.word	0x40021000

0800c408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c412:	2300      	movs	r3, #0
 800c414:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e11e      	b.n	800c65e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c420:	4b91      	ldr	r3, [pc, #580]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 030f 	and.w	r3, r3, #15
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d910      	bls.n	800c450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c42e:	4b8e      	ldr	r3, [pc, #568]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f023 020f 	bic.w	r2, r3, #15
 800c436:	498c      	ldr	r1, [pc, #560]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c43e:	4b8a      	ldr	r3, [pc, #552]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f003 030f 	and.w	r3, r3, #15
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d001      	beq.n	800c450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e106      	b.n	800c65e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d073      	beq.n	800c544 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	2b03      	cmp	r3, #3
 800c462:	d129      	bne.n	800c4b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c464:	4b81      	ldr	r3, [pc, #516]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e0f4      	b.n	800c65e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c474:	f000 f972 	bl	800c75c <RCC_GetSysClockFreqFromPLLSource>
 800c478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	4a7c      	ldr	r2, [pc, #496]	; (800c670 <HAL_RCC_ClockConfig+0x268>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d93f      	bls.n	800c502 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c482:	4b7a      	ldr	r3, [pc, #488]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d009      	beq.n	800c4a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c496:	2b00      	cmp	r3, #0
 800c498:	d033      	beq.n	800c502 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d12f      	bne.n	800c502 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c4a2:	4b72      	ldr	r3, [pc, #456]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4aa:	4a70      	ldr	r2, [pc, #448]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c4b2:	2380      	movs	r3, #128	; 0x80
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	e024      	b.n	800c502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d107      	bne.n	800c4d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c4c0:	4b6a      	ldr	r3, [pc, #424]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d109      	bne.n	800c4e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e0c6      	b.n	800c65e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c4d0:	4b66      	ldr	r3, [pc, #408]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d101      	bne.n	800c4e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e0be      	b.n	800c65e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c4e0:	f000 f8ce 	bl	800c680 <HAL_RCC_GetSysClockFreq>
 800c4e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	4a61      	ldr	r2, [pc, #388]	; (800c670 <HAL_RCC_ClockConfig+0x268>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d909      	bls.n	800c502 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c4ee:	4b5f      	ldr	r3, [pc, #380]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4f6:	4a5d      	ldr	r2, [pc, #372]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c4fe:	2380      	movs	r3, #128	; 0x80
 800c500:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c502:	4b5a      	ldr	r3, [pc, #360]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	f023 0203 	bic.w	r2, r3, #3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	4957      	ldr	r1, [pc, #348]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c510:	4313      	orrs	r3, r2
 800c512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c514:	f7fc f8f0 	bl	80086f8 <HAL_GetTick>
 800c518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c51a:	e00a      	b.n	800c532 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c51c:	f7fc f8ec 	bl	80086f8 <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	f241 3288 	movw	r2, #5000	; 0x1388
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d901      	bls.n	800c532 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c52e:	2303      	movs	r3, #3
 800c530:	e095      	b.n	800c65e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c532:	4b4e      	ldr	r3, [pc, #312]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f003 020c 	and.w	r2, r3, #12
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	429a      	cmp	r2, r3
 800c542:	d1eb      	bne.n	800c51c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0302 	and.w	r3, r3, #2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d023      	beq.n	800c598 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d005      	beq.n	800c568 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c55c:	4b43      	ldr	r3, [pc, #268]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	4a42      	ldr	r2, [pc, #264]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c566:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c574:	4b3d      	ldr	r3, [pc, #244]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c57c:	4a3b      	ldr	r2, [pc, #236]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c57e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c582:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c584:	4b39      	ldr	r3, [pc, #228]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	4936      	ldr	r1, [pc, #216]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c592:	4313      	orrs	r3, r2
 800c594:	608b      	str	r3, [r1, #8]
 800c596:	e008      	b.n	800c5aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	2b80      	cmp	r3, #128	; 0x80
 800c59c:	d105      	bne.n	800c5aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800c59e:	4b33      	ldr	r3, [pc, #204]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	4a32      	ldr	r2, [pc, #200]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c5a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c5aa:	4b2f      	ldr	r3, [pc, #188]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 030f 	and.w	r3, r3, #15
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d21d      	bcs.n	800c5f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5b8:	4b2b      	ldr	r3, [pc, #172]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f023 020f 	bic.w	r2, r3, #15
 800c5c0:	4929      	ldr	r1, [pc, #164]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c5c8:	f7fc f896 	bl	80086f8 <HAL_GetTick>
 800c5cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5ce:	e00a      	b.n	800c5e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c5d0:	f7fc f892 	bl	80086f8 <HAL_GetTick>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d901      	bls.n	800c5e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e03b      	b.n	800c65e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5e6:	4b20      	ldr	r3, [pc, #128]	; (800c668 <HAL_RCC_ClockConfig+0x260>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 030f 	and.w	r3, r3, #15
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d1ed      	bne.n	800c5d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c600:	4b1a      	ldr	r3, [pc, #104]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	4917      	ldr	r1, [pc, #92]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c60e:	4313      	orrs	r3, r2
 800c610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0308 	and.w	r3, r3, #8
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d009      	beq.n	800c632 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c61e:	4b13      	ldr	r3, [pc, #76]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	00db      	lsls	r3, r3, #3
 800c62c:	490f      	ldr	r1, [pc, #60]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c62e:	4313      	orrs	r3, r2
 800c630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c632:	f000 f825 	bl	800c680 <HAL_RCC_GetSysClockFreq>
 800c636:	4601      	mov	r1, r0
 800c638:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <HAL_RCC_ClockConfig+0x264>)
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	091b      	lsrs	r3, r3, #4
 800c63e:	f003 030f 	and.w	r3, r3, #15
 800c642:	4a0c      	ldr	r2, [pc, #48]	; (800c674 <HAL_RCC_ClockConfig+0x26c>)
 800c644:	5cd3      	ldrb	r3, [r2, r3]
 800c646:	f003 031f 	and.w	r3, r3, #31
 800c64a:	fa21 f303 	lsr.w	r3, r1, r3
 800c64e:	4a0a      	ldr	r2, [pc, #40]	; (800c678 <HAL_RCC_ClockConfig+0x270>)
 800c650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c652:	4b0a      	ldr	r3, [pc, #40]	; (800c67c <HAL_RCC_ClockConfig+0x274>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4618      	mov	r0, r3
 800c658:	f7fc f802 	bl	8008660 <HAL_InitTick>
 800c65c:	4603      	mov	r3, r0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	40022000 	.word	0x40022000
 800c66c:	40021000 	.word	0x40021000
 800c670:	04c4b400 	.word	0x04c4b400
 800c674:	08015030 	.word	0x08015030
 800c678:	20000c34 	.word	0x20000c34
 800c67c:	20000c38 	.word	0x20000c38

0800c680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c680:	b480      	push	{r7}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c686:	4b2c      	ldr	r3, [pc, #176]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	f003 030c 	and.w	r3, r3, #12
 800c68e:	2b04      	cmp	r3, #4
 800c690:	d102      	bne.n	800c698 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c692:	4b2a      	ldr	r3, [pc, #168]	; (800c73c <HAL_RCC_GetSysClockFreq+0xbc>)
 800c694:	613b      	str	r3, [r7, #16]
 800c696:	e047      	b.n	800c728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c698:	4b27      	ldr	r3, [pc, #156]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	f003 030c 	and.w	r3, r3, #12
 800c6a0:	2b08      	cmp	r3, #8
 800c6a2:	d102      	bne.n	800c6aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c6a4:	4b26      	ldr	r3, [pc, #152]	; (800c740 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c6a6:	613b      	str	r3, [r7, #16]
 800c6a8:	e03e      	b.n	800c728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c6aa:	4b23      	ldr	r3, [pc, #140]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	f003 030c 	and.w	r3, r3, #12
 800c6b2:	2b0c      	cmp	r3, #12
 800c6b4:	d136      	bne.n	800c724 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c6b6:	4b20      	ldr	r3, [pc, #128]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	f003 0303 	and.w	r3, r3, #3
 800c6be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c6c0:	4b1d      	ldr	r3, [pc, #116]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	091b      	lsrs	r3, r3, #4
 800c6c6:	f003 030f 	and.w	r3, r3, #15
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b03      	cmp	r3, #3
 800c6d2:	d10c      	bne.n	800c6ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c6d4:	4a1a      	ldr	r2, [pc, #104]	; (800c740 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6dc:	4a16      	ldr	r2, [pc, #88]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6de:	68d2      	ldr	r2, [r2, #12]
 800c6e0:	0a12      	lsrs	r2, r2, #8
 800c6e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c6e6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ea:	617b      	str	r3, [r7, #20]
      break;
 800c6ec:	e00c      	b.n	800c708 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c6ee:	4a13      	ldr	r2, [pc, #76]	; (800c73c <HAL_RCC_GetSysClockFreq+0xbc>)
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f6:	4a10      	ldr	r2, [pc, #64]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c6f8:	68d2      	ldr	r2, [r2, #12]
 800c6fa:	0a12      	lsrs	r2, r2, #8
 800c6fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c700:	fb02 f303 	mul.w	r3, r2, r3
 800c704:	617b      	str	r3, [r7, #20]
      break;
 800c706:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c708:	4b0b      	ldr	r3, [pc, #44]	; (800c738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	0e5b      	lsrs	r3, r3, #25
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	3301      	adds	r3, #1
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c720:	613b      	str	r3, [r7, #16]
 800c722:	e001      	b.n	800c728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c724:	2300      	movs	r3, #0
 800c726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c728:	693b      	ldr	r3, [r7, #16]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	371c      	adds	r7, #28
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	40021000 	.word	0x40021000
 800c73c:	00f42400 	.word	0x00f42400
 800c740:	007a1200 	.word	0x007a1200

0800c744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c748:	4b03      	ldr	r3, [pc, #12]	; (800c758 <HAL_RCC_GetHCLKFreq+0x14>)
 800c74a:	681b      	ldr	r3, [r3, #0]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	20000c34 	.word	0x20000c34

0800c75c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c762:	4b1e      	ldr	r3, [pc, #120]	; (800c7dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f003 0303 	and.w	r3, r3, #3
 800c76a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c76c:	4b1b      	ldr	r3, [pc, #108]	; (800c7dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	091b      	lsrs	r3, r3, #4
 800c772:	f003 030f 	and.w	r3, r3, #15
 800c776:	3301      	adds	r3, #1
 800c778:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b03      	cmp	r3, #3
 800c77e:	d10c      	bne.n	800c79a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c780:	4a17      	ldr	r2, [pc, #92]	; (800c7e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	fbb2 f3f3 	udiv	r3, r2, r3
 800c788:	4a14      	ldr	r2, [pc, #80]	; (800c7dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c78a:	68d2      	ldr	r2, [r2, #12]
 800c78c:	0a12      	lsrs	r2, r2, #8
 800c78e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c792:	fb02 f303 	mul.w	r3, r2, r3
 800c796:	617b      	str	r3, [r7, #20]
    break;
 800c798:	e00c      	b.n	800c7b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c79a:	4a12      	ldr	r2, [pc, #72]	; (800c7e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7a2:	4a0e      	ldr	r2, [pc, #56]	; (800c7dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c7a4:	68d2      	ldr	r2, [r2, #12]
 800c7a6:	0a12      	lsrs	r2, r2, #8
 800c7a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c7ac:	fb02 f303 	mul.w	r3, r2, r3
 800c7b0:	617b      	str	r3, [r7, #20]
    break;
 800c7b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c7b4:	4b09      	ldr	r3, [pc, #36]	; (800c7dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	0e5b      	lsrs	r3, r3, #25
 800c7ba:	f003 0303 	and.w	r3, r3, #3
 800c7be:	3301      	adds	r3, #1
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c7c4:	697a      	ldr	r2, [r7, #20]
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c7ce:	687b      	ldr	r3, [r7, #4]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	40021000 	.word	0x40021000
 800c7e0:	007a1200 	.word	0x007a1200
 800c7e4:	00f42400 	.word	0x00f42400

0800c7e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c800:	2b00      	cmp	r3, #0
 800c802:	f000 8098 	beq.w	800c936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c806:	2300      	movs	r3, #0
 800c808:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c80a:	4b43      	ldr	r3, [pc, #268]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c80e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10d      	bne.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c816:	4b40      	ldr	r3, [pc, #256]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c81a:	4a3f      	ldr	r2, [pc, #252]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c820:	6593      	str	r3, [r2, #88]	; 0x58
 800c822:	4b3d      	ldr	r3, [pc, #244]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c82a:	60bb      	str	r3, [r7, #8]
 800c82c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c82e:	2301      	movs	r3, #1
 800c830:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c832:	4b3a      	ldr	r3, [pc, #232]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a39      	ldr	r2, [pc, #228]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c83c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c83e:	f7fb ff5b 	bl	80086f8 <HAL_GetTick>
 800c842:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c844:	e009      	b.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c846:	f7fb ff57 	bl	80086f8 <HAL_GetTick>
 800c84a:	4602      	mov	r2, r0
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	2b02      	cmp	r3, #2
 800c852:	d902      	bls.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	74fb      	strb	r3, [r7, #19]
        break;
 800c858:	e005      	b.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c85a:	4b30      	ldr	r3, [pc, #192]	; (800c91c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0ef      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c866:	7cfb      	ldrb	r3, [r7, #19]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d159      	bne.n	800c920 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c86c:	4b2a      	ldr	r3, [pc, #168]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c876:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d01e      	beq.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	429a      	cmp	r2, r3
 800c886:	d019      	beq.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c888:	4b23      	ldr	r3, [pc, #140]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c88e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c892:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c894:	4b20      	ldr	r3, [pc, #128]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c89a:	4a1f      	ldr	r2, [pc, #124]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c89c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c8a4:	4b1c      	ldr	r3, [pc, #112]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8aa:	4a1b      	ldr	r2, [pc, #108]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c8b4:	4a18      	ldr	r2, [pc, #96]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f003 0301 	and.w	r3, r3, #1
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d016      	beq.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c6:	f7fb ff17 	bl	80086f8 <HAL_GetTick>
 800c8ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8cc:	e00b      	b.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8ce:	f7fb ff13 	bl	80086f8 <HAL_GetTick>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d902      	bls.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	74fb      	strb	r3, [r7, #19]
            break;
 800c8e4:	e006      	b.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ec:	f003 0302 	and.w	r3, r3, #2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d0ec      	beq.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c8f4:	7cfb      	ldrb	r3, [r7, #19]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10b      	bne.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c8fa:	4b07      	ldr	r3, [pc, #28]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c908:	4903      	ldr	r1, [pc, #12]	; (800c918 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c910:	e008      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c912:	7cfb      	ldrb	r3, [r7, #19]
 800c914:	74bb      	strb	r3, [r7, #18]
 800c916:	e005      	b.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c918:	40021000 	.word	0x40021000
 800c91c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c920:	7cfb      	ldrb	r3, [r7, #19]
 800c922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c924:	7c7b      	ldrb	r3, [r7, #17]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d105      	bne.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c92a:	4baf      	ldr	r3, [pc, #700]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c92e:	4aae      	ldr	r2, [pc, #696]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00a      	beq.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c942:	4ba9      	ldr	r3, [pc, #676]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c948:	f023 0203 	bic.w	r2, r3, #3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	49a5      	ldr	r1, [pc, #660]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c952:	4313      	orrs	r3, r2
 800c954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00a      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c964:	4ba0      	ldr	r3, [pc, #640]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c96a:	f023 020c 	bic.w	r2, r3, #12
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	499d      	ldr	r1, [pc, #628]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c974:	4313      	orrs	r3, r2
 800c976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0304 	and.w	r3, r3, #4
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00a      	beq.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c986:	4b98      	ldr	r3, [pc, #608]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c98c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	4994      	ldr	r1, [pc, #592]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c996:	4313      	orrs	r3, r2
 800c998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 0308 	and.w	r3, r3, #8
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00a      	beq.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c9a8:	4b8f      	ldr	r3, [pc, #572]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	498c      	ldr	r1, [pc, #560]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0310 	and.w	r3, r3, #16
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00a      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c9ca:	4b87      	ldr	r3, [pc, #540]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	695b      	ldr	r3, [r3, #20]
 800c9d8:	4983      	ldr	r1, [pc, #524]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 0320 	and.w	r3, r3, #32
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00a      	beq.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c9ec:	4b7e      	ldr	r3, [pc, #504]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	497b      	ldr	r1, [pc, #492]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00a      	beq.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ca0e:	4b76      	ldr	r3, [pc, #472]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	69db      	ldr	r3, [r3, #28]
 800ca1c:	4972      	ldr	r1, [pc, #456]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00a      	beq.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ca30:	4b6d      	ldr	r3, [pc, #436]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a1b      	ldr	r3, [r3, #32]
 800ca3e:	496a      	ldr	r1, [pc, #424]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca40:	4313      	orrs	r3, r2
 800ca42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00a      	beq.n	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ca52:	4b65      	ldr	r3, [pc, #404]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca60:	4961      	ldr	r1, [pc, #388]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca62:	4313      	orrs	r3, r2
 800ca64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00a      	beq.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ca74:	4b5c      	ldr	r3, [pc, #368]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca7a:	f023 0203 	bic.w	r2, r3, #3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca82:	4959      	ldr	r1, [pc, #356]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca84:	4313      	orrs	r3, r2
 800ca86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00a      	beq.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ca96:	4b54      	ldr	r3, [pc, #336]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ca98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	4950      	ldr	r1, [pc, #320]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800caa6:	4313      	orrs	r3, r2
 800caa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d015      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cab8:	4b4b      	ldr	r3, [pc, #300]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800caba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cabe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac6:	4948      	ldr	r1, [pc, #288]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cac8:	4313      	orrs	r3, r2
 800caca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cad6:	d105      	bne.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cad8:	4b43      	ldr	r3, [pc, #268]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	4a42      	ldr	r2, [pc, #264]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cae2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800caec:	2b00      	cmp	r3, #0
 800caee:	d015      	beq.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800caf0:	4b3d      	ldr	r3, [pc, #244]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800caf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafe:	493a      	ldr	r1, [pc, #232]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb00:	4313      	orrs	r3, r2
 800cb02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb0e:	d105      	bne.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb10:	4b35      	ldr	r3, [pc, #212]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	4a34      	ldr	r2, [pc, #208]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d015      	beq.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cb28:	4b2f      	ldr	r3, [pc, #188]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb36:	492c      	ldr	r1, [pc, #176]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb46:	d105      	bne.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb48:	4b27      	ldr	r3, [pc, #156]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	4a26      	ldr	r2, [pc, #152]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d015      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cb60:	4b21      	ldr	r3, [pc, #132]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb6e:	491e      	ldr	r1, [pc, #120]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb70:	4313      	orrs	r3, r2
 800cb72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb7e:	d105      	bne.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cb80:	4b19      	ldr	r3, [pc, #100]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	4a18      	ldr	r2, [pc, #96]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d015      	beq.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb98:	4b13      	ldr	r3, [pc, #76]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cb9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba6:	4910      	ldr	r1, [pc, #64]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbb6:	d105      	bne.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cbb8:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4a0a      	ldr	r2, [pc, #40]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cbbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d018      	beq.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800cbd0:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cbd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbde:	4902      	ldr	r1, [pc, #8]	; (800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cbe6:	e001      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x404>
 800cbe8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbf4:	d105      	bne.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cbf6:	4b21      	ldr	r3, [pc, #132]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	4a20      	ldr	r2, [pc, #128]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cbfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc00:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d015      	beq.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800cc0e:	4b1b      	ldr	r3, [pc, #108]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc14:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc1c:	4917      	ldr	r1, [pc, #92]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc2c:	d105      	bne.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cc2e:	4b13      	ldr	r3, [pc, #76]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	4a12      	ldr	r2, [pc, #72]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc38:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d015      	beq.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cc46:	4b0d      	ldr	r3, [pc, #52]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cc4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc54:	4909      	ldr	r1, [pc, #36]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc64:	d105      	bne.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cc66:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	4a04      	ldr	r2, [pc, #16]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800cc6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc70:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800cc72:	7cbb      	ldrb	r3, [r7, #18]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3718      	adds	r7, #24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	40021000 	.word	0x40021000

0800cc80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e084      	b.n	800cd9c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d106      	bne.n	800ccb2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7fa ff0b 	bl	8007ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccd2:	d902      	bls.n	800ccda <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e002      	b.n	800cce0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ccda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cce8:	d007      	beq.n	800ccfa <HAL_SPI_Init+0x7a>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccf2:	d002      	beq.n	800ccfa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d10b      	bne.n	800cd1a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd0a:	d903      	bls.n	800cd14 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2202      	movs	r2, #2
 800cd10:	631a      	str	r2, [r3, #48]	; 0x30
 800cd12:	e002      	b.n	800cd1a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	431a      	orrs	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	431a      	orrs	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	69db      	ldr	r3, [r3, #28]
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	ea42 0103 	orr.w	r1, r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	430a      	orrs	r2, r1
 800cd52:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	699b      	ldr	r3, [r3, #24]
 800cd58:	0c1b      	lsrs	r3, r3, #16
 800cd5a:	f003 0204 	and.w	r2, r3, #4
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd62:	431a      	orrs	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd68:	431a      	orrs	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	ea42 0103 	orr.w	r1, r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	69da      	ldr	r2, [r3, #28]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d101      	bne.n	800cdb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e049      	b.n	800ce4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7fb fb52 	bl	8008474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3304      	adds	r3, #4
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f000 ff20 	bl	800dc28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d001      	beq.n	800ce6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e019      	b.n	800cea0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	689a      	ldr	r2, [r3, #8]
 800ce7a:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <HAL_TIM_Base_Start+0x58>)
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b06      	cmp	r3, #6
 800ce84:	d00b      	beq.n	800ce9e <HAL_TIM_Base_Start+0x4a>
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce8c:	d007      	beq.n	800ce9e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f042 0201 	orr.w	r2, r2, #1
 800ce9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce9e:	2300      	movs	r3, #0
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	00010007 	.word	0x00010007

0800ceb0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6a1a      	ldr	r2, [r3, #32]
 800cebe:	f241 1311 	movw	r3, #4369	; 0x1111
 800cec2:	4013      	ands	r3, r2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10f      	bne.n	800cee8 <HAL_TIM_Base_Stop+0x38>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6a1a      	ldr	r2, [r3, #32]
 800cece:	f244 4344 	movw	r3, #17476	; 0x4444
 800ced2:	4013      	ands	r3, r2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d107      	bne.n	800cee8 <HAL_TIM_Base_Stop+0x38>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 0201 	bic.w	r2, r2, #1
 800cee6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
	...

0800cf00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d001      	beq.n	800cf18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf14:	2301      	movs	r3, #1
 800cf16:	e021      	b.n	800cf5c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f042 0201 	orr.w	r2, r2, #1
 800cf2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	689a      	ldr	r2, [r3, #8]
 800cf36:	4b0c      	ldr	r3, [pc, #48]	; (800cf68 <HAL_TIM_Base_Start_IT+0x68>)
 800cf38:	4013      	ands	r3, r2
 800cf3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b06      	cmp	r3, #6
 800cf40:	d00b      	beq.n	800cf5a <HAL_TIM_Base_Start_IT+0x5a>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf48:	d007      	beq.n	800cf5a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f042 0201 	orr.w	r2, r2, #1
 800cf58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3714      	adds	r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	00010007 	.word	0x00010007

0800cf6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 0201 	bic.w	r2, r2, #1
 800cf82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6a1a      	ldr	r2, [r3, #32]
 800cf8a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf8e:	4013      	ands	r3, r2
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10f      	bne.n	800cfb4 <HAL_TIM_Base_Stop_IT+0x48>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6a1a      	ldr	r2, [r3, #32]
 800cf9a:	f244 4344 	movw	r3, #17476	; 0x4444
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d107      	bne.n	800cfb4 <HAL_TIM_Base_Stop_IT+0x48>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f022 0201 	bic.w	r2, r2, #1
 800cfb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	370c      	adds	r7, #12
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b082      	sub	sp, #8
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d101      	bne.n	800cfdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e049      	b.n	800d070 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f841 	bl	800d078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2202      	movs	r2, #2
 800cffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	3304      	adds	r3, #4
 800d006:	4619      	mov	r1, r3
 800d008:	4610      	mov	r0, r2
 800d00a:	f000 fe0d 	bl	800dc28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d080:	bf00      	nop
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d109      	bne.n	800d0b0 <HAL_TIM_PWM_Start+0x24>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	bf14      	ite	ne
 800d0a8:	2301      	movne	r3, #1
 800d0aa:	2300      	moveq	r3, #0
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	e03c      	b.n	800d12a <HAL_TIM_PWM_Start+0x9e>
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2b04      	cmp	r3, #4
 800d0b4:	d109      	bne.n	800d0ca <HAL_TIM_PWM_Start+0x3e>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	bf14      	ite	ne
 800d0c2:	2301      	movne	r3, #1
 800d0c4:	2300      	moveq	r3, #0
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	e02f      	b.n	800d12a <HAL_TIM_PWM_Start+0x9e>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b08      	cmp	r3, #8
 800d0ce:	d109      	bne.n	800d0e4 <HAL_TIM_PWM_Start+0x58>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	bf14      	ite	ne
 800d0dc:	2301      	movne	r3, #1
 800d0de:	2300      	moveq	r3, #0
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	e022      	b.n	800d12a <HAL_TIM_PWM_Start+0x9e>
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2b0c      	cmp	r3, #12
 800d0e8:	d109      	bne.n	800d0fe <HAL_TIM_PWM_Start+0x72>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	bf14      	ite	ne
 800d0f6:	2301      	movne	r3, #1
 800d0f8:	2300      	moveq	r3, #0
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	e015      	b.n	800d12a <HAL_TIM_PWM_Start+0x9e>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b10      	cmp	r3, #16
 800d102:	d109      	bne.n	800d118 <HAL_TIM_PWM_Start+0x8c>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	bf14      	ite	ne
 800d110:	2301      	movne	r3, #1
 800d112:	2300      	moveq	r3, #0
 800d114:	b2db      	uxtb	r3, r3
 800d116:	e008      	b.n	800d12a <HAL_TIM_PWM_Start+0x9e>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b01      	cmp	r3, #1
 800d122:	bf14      	ite	ne
 800d124:	2301      	movne	r3, #1
 800d126:	2300      	moveq	r3, #0
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e073      	b.n	800d21a <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d104      	bne.n	800d142 <HAL_TIM_PWM_Start+0xb6>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2202      	movs	r2, #2
 800d13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d140:	e023      	b.n	800d18a <HAL_TIM_PWM_Start+0xfe>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	2b04      	cmp	r3, #4
 800d146:	d104      	bne.n	800d152 <HAL_TIM_PWM_Start+0xc6>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2202      	movs	r2, #2
 800d14c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d150:	e01b      	b.n	800d18a <HAL_TIM_PWM_Start+0xfe>
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	2b08      	cmp	r3, #8
 800d156:	d104      	bne.n	800d162 <HAL_TIM_PWM_Start+0xd6>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2202      	movs	r2, #2
 800d15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d160:	e013      	b.n	800d18a <HAL_TIM_PWM_Start+0xfe>
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b0c      	cmp	r3, #12
 800d166:	d104      	bne.n	800d172 <HAL_TIM_PWM_Start+0xe6>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d170:	e00b      	b.n	800d18a <HAL_TIM_PWM_Start+0xfe>
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b10      	cmp	r3, #16
 800d176:	d104      	bne.n	800d182 <HAL_TIM_PWM_Start+0xf6>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2202      	movs	r2, #2
 800d17c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d180:	e003      	b.n	800d18a <HAL_TIM_PWM_Start+0xfe>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2202      	movs	r2, #2
 800d186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2201      	movs	r2, #1
 800d190:	6839      	ldr	r1, [r7, #0]
 800d192:	4618      	mov	r0, r3
 800d194:	f001 f9b6 	bl	800e504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a21      	ldr	r2, [pc, #132]	; (800d224 <HAL_TIM_PWM_Start+0x198>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d018      	beq.n	800d1d4 <HAL_TIM_PWM_Start+0x148>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a20      	ldr	r2, [pc, #128]	; (800d228 <HAL_TIM_PWM_Start+0x19c>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d013      	beq.n	800d1d4 <HAL_TIM_PWM_Start+0x148>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a1e      	ldr	r2, [pc, #120]	; (800d22c <HAL_TIM_PWM_Start+0x1a0>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d00e      	beq.n	800d1d4 <HAL_TIM_PWM_Start+0x148>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a1d      	ldr	r2, [pc, #116]	; (800d230 <HAL_TIM_PWM_Start+0x1a4>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d009      	beq.n	800d1d4 <HAL_TIM_PWM_Start+0x148>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a1b      	ldr	r2, [pc, #108]	; (800d234 <HAL_TIM_PWM_Start+0x1a8>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d004      	beq.n	800d1d4 <HAL_TIM_PWM_Start+0x148>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a1a      	ldr	r2, [pc, #104]	; (800d238 <HAL_TIM_PWM_Start+0x1ac>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d101      	bne.n	800d1d8 <HAL_TIM_PWM_Start+0x14c>
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e000      	b.n	800d1da <HAL_TIM_PWM_Start+0x14e>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d007      	beq.n	800d1ee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	689a      	ldr	r2, [r3, #8]
 800d1f4:	4b11      	ldr	r3, [pc, #68]	; (800d23c <HAL_TIM_PWM_Start+0x1b0>)
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b06      	cmp	r3, #6
 800d1fe:	d00b      	beq.n	800d218 <HAL_TIM_PWM_Start+0x18c>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d206:	d007      	beq.n	800d218 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f042 0201 	orr.w	r2, r2, #1
 800d216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	40012c00 	.word	0x40012c00
 800d228:	40013400 	.word	0x40013400
 800d22c:	40014000 	.word	0x40014000
 800d230:	40014400 	.word	0x40014400
 800d234:	40014800 	.word	0x40014800
 800d238:	40015000 	.word	0x40015000
 800d23c:	00010007 	.word	0x00010007

0800d240 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2200      	movs	r2, #0
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	4618      	mov	r0, r3
 800d254:	f001 f956 	bl	800e504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a40      	ldr	r2, [pc, #256]	; (800d360 <HAL_TIM_PWM_Stop+0x120>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d018      	beq.n	800d294 <HAL_TIM_PWM_Stop+0x54>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a3f      	ldr	r2, [pc, #252]	; (800d364 <HAL_TIM_PWM_Stop+0x124>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d013      	beq.n	800d294 <HAL_TIM_PWM_Stop+0x54>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a3d      	ldr	r2, [pc, #244]	; (800d368 <HAL_TIM_PWM_Stop+0x128>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d00e      	beq.n	800d294 <HAL_TIM_PWM_Stop+0x54>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a3c      	ldr	r2, [pc, #240]	; (800d36c <HAL_TIM_PWM_Stop+0x12c>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d009      	beq.n	800d294 <HAL_TIM_PWM_Stop+0x54>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a3a      	ldr	r2, [pc, #232]	; (800d370 <HAL_TIM_PWM_Stop+0x130>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d004      	beq.n	800d294 <HAL_TIM_PWM_Stop+0x54>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a39      	ldr	r2, [pc, #228]	; (800d374 <HAL_TIM_PWM_Stop+0x134>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d101      	bne.n	800d298 <HAL_TIM_PWM_Stop+0x58>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <HAL_TIM_PWM_Stop+0x5a>
 800d298:	2300      	movs	r3, #0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d017      	beq.n	800d2ce <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6a1a      	ldr	r2, [r3, #32]
 800d2a4:	f241 1311 	movw	r3, #4369	; 0x1111
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10f      	bne.n	800d2ce <HAL_TIM_PWM_Stop+0x8e>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6a1a      	ldr	r2, [r3, #32]
 800d2b4:	f244 4344 	movw	r3, #17476	; 0x4444
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d107      	bne.n	800d2ce <HAL_TIM_PWM_Stop+0x8e>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d2cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6a1a      	ldr	r2, [r3, #32]
 800d2d4:	f241 1311 	movw	r3, #4369	; 0x1111
 800d2d8:	4013      	ands	r3, r2
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10f      	bne.n	800d2fe <HAL_TIM_PWM_Stop+0xbe>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	6a1a      	ldr	r2, [r3, #32]
 800d2e4:	f244 4344 	movw	r3, #17476	; 0x4444
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d107      	bne.n	800d2fe <HAL_TIM_PWM_Stop+0xbe>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f022 0201 	bic.w	r2, r2, #1
 800d2fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d104      	bne.n	800d30e <HAL_TIM_PWM_Stop+0xce>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d30c:	e023      	b.n	800d356 <HAL_TIM_PWM_Stop+0x116>
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b04      	cmp	r3, #4
 800d312:	d104      	bne.n	800d31e <HAL_TIM_PWM_Stop+0xde>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d31c:	e01b      	b.n	800d356 <HAL_TIM_PWM_Stop+0x116>
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	2b08      	cmp	r3, #8
 800d322:	d104      	bne.n	800d32e <HAL_TIM_PWM_Stop+0xee>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d32c:	e013      	b.n	800d356 <HAL_TIM_PWM_Stop+0x116>
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	2b0c      	cmp	r3, #12
 800d332:	d104      	bne.n	800d33e <HAL_TIM_PWM_Stop+0xfe>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d33c:	e00b      	b.n	800d356 <HAL_TIM_PWM_Stop+0x116>
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b10      	cmp	r3, #16
 800d342:	d104      	bne.n	800d34e <HAL_TIM_PWM_Stop+0x10e>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d34c:	e003      	b.n	800d356 <HAL_TIM_PWM_Stop+0x116>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	40012c00 	.word	0x40012c00
 800d364:	40013400 	.word	0x40013400
 800d368:	40014000 	.word	0x40014000
 800d36c:	40014400 	.word	0x40014400
 800d370:	40014800 	.word	0x40014800
 800d374:	40015000 	.word	0x40015000

0800d378 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b086      	sub	sp, #24
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d101      	bne.n	800d38c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	e097      	b.n	800d4bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7fb f813 	bl	80083cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	6812      	ldr	r2, [r2, #0]
 800d3b8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d3bc:	f023 0307 	bic.w	r3, r3, #7
 800d3c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	f000 fc2b 	bl	800dc28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6a1b      	ldr	r3, [r3, #32]
 800d3e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	697a      	ldr	r2, [r7, #20]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3fa:	f023 0303 	bic.w	r3, r3, #3
 800d3fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	689a      	ldr	r2, [r3, #8]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	021b      	lsls	r3, r3, #8
 800d40a:	4313      	orrs	r3, r2
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	4313      	orrs	r3, r2
 800d410:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d418:	f023 030c 	bic.w	r3, r3, #12
 800d41c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68da      	ldr	r2, [r3, #12]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	4313      	orrs	r3, r2
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	4313      	orrs	r3, r2
 800d43a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	011a      	lsls	r2, r3, #4
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	031b      	lsls	r3, r3, #12
 800d448:	4313      	orrs	r3, r2
 800d44a:	693a      	ldr	r2, [r7, #16]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d456:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d45e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	695b      	ldr	r3, [r3, #20]
 800d468:	011b      	lsls	r3, r3, #4
 800d46a:	4313      	orrs	r3, r2
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	4313      	orrs	r3, r2
 800d470:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	693a      	ldr	r2, [r7, #16]
 800d480:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	68fa      	ldr	r2, [r7, #12]
 800d488:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3718      	adds	r7, #24
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	f003 0302 	and.w	r3, r3, #2
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d122      	bne.n	800d520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	f003 0302 	and.w	r3, r3, #2
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d11b      	bne.n	800d520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f06f 0202 	mvn.w	r2, #2
 800d4f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	699b      	ldr	r3, [r3, #24]
 800d4fe:	f003 0303 	and.w	r3, r3, #3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 fb70 	bl	800dbec <HAL_TIM_IC_CaptureCallback>
 800d50c:	e005      	b.n	800d51a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 fb62 	bl	800dbd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fb73 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	f003 0304 	and.w	r3, r3, #4
 800d52a:	2b04      	cmp	r3, #4
 800d52c:	d122      	bne.n	800d574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b04      	cmp	r3, #4
 800d53a:	d11b      	bne.n	800d574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f06f 0204 	mvn.w	r2, #4
 800d544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2202      	movs	r2, #2
 800d54a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	699b      	ldr	r3, [r3, #24]
 800d552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fb46 	bl	800dbec <HAL_TIM_IC_CaptureCallback>
 800d560:	e005      	b.n	800d56e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fb38 	bl	800dbd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fb49 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b08      	cmp	r3, #8
 800d580:	d122      	bne.n	800d5c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	f003 0308 	and.w	r3, r3, #8
 800d58c:	2b08      	cmp	r3, #8
 800d58e:	d11b      	bne.n	800d5c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f06f 0208 	mvn.w	r2, #8
 800d598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2204      	movs	r2, #4
 800d59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f003 0303 	and.w	r3, r3, #3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fb1c 	bl	800dbec <HAL_TIM_IC_CaptureCallback>
 800d5b4:	e005      	b.n	800d5c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fb0e 	bl	800dbd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fb1f 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	f003 0310 	and.w	r3, r3, #16
 800d5d2:	2b10      	cmp	r3, #16
 800d5d4:	d122      	bne.n	800d61c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f003 0310 	and.w	r3, r3, #16
 800d5e0:	2b10      	cmp	r3, #16
 800d5e2:	d11b      	bne.n	800d61c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f06f 0210 	mvn.w	r2, #16
 800d5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2208      	movs	r2, #8
 800d5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	69db      	ldr	r3, [r3, #28]
 800d5fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d003      	beq.n	800d60a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 faf2 	bl	800dbec <HAL_TIM_IC_CaptureCallback>
 800d608:	e005      	b.n	800d616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fae4 	bl	800dbd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 faf5 	bl	800dc00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	2b01      	cmp	r3, #1
 800d628:	d10e      	bne.n	800d648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	2b01      	cmp	r3, #1
 800d636:	d107      	bne.n	800d648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f06f 0201 	mvn.w	r2, #1
 800d640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fabe 	bl	800dbc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d652:	2b80      	cmp	r3, #128	; 0x80
 800d654:	d10e      	bne.n	800d674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d660:	2b80      	cmp	r3, #128	; 0x80
 800d662:	d107      	bne.n	800d674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d66c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f001 f8c0 	bl	800e7f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d682:	d10e      	bne.n	800d6a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d68e:	2b80      	cmp	r3, #128	; 0x80
 800d690:	d107      	bne.n	800d6a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f001 f8b3 	bl	800e808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ac:	2b40      	cmp	r3, #64	; 0x40
 800d6ae:	d10e      	bne.n	800d6ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ba:	2b40      	cmp	r3, #64	; 0x40
 800d6bc:	d107      	bne.n	800d6ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 faa3 	bl	800dc14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	f003 0320 	and.w	r3, r3, #32
 800d6d8:	2b20      	cmp	r3, #32
 800d6da:	d10e      	bne.n	800d6fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	f003 0320 	and.w	r3, r3, #32
 800d6e6:	2b20      	cmp	r3, #32
 800d6e8:	d107      	bne.n	800d6fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f06f 0220 	mvn.w	r2, #32
 800d6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f001 f873 	bl	800e7e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d708:	d10f      	bne.n	800d72a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d718:	d107      	bne.n	800d72a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f001 f879 	bl	800e81c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d738:	d10f      	bne.n	800d75a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d748:	d107      	bne.n	800d75a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f001 f86b 	bl	800e830 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d768:	d10f      	bne.n	800d78a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d778:	d107      	bne.n	800d78a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f001 f85d 	bl	800e844 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	691b      	ldr	r3, [r3, #16]
 800d790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d794:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d798:	d10f      	bne.n	800d7ba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d7a8:	d107      	bne.n	800d7ba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d7b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f001 f84f 	bl	800e858 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d101      	bne.n	800d7de <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d7da:	2302      	movs	r3, #2
 800d7dc:	e0fd      	b.n	800d9da <HAL_TIM_PWM_ConfigChannel+0x216>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b14      	cmp	r3, #20
 800d7ea:	f200 80f0 	bhi.w	800d9ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d7ee:	a201      	add	r2, pc, #4	; (adr r2, 800d7f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f4:	0800d849 	.word	0x0800d849
 800d7f8:	0800d9cf 	.word	0x0800d9cf
 800d7fc:	0800d9cf 	.word	0x0800d9cf
 800d800:	0800d9cf 	.word	0x0800d9cf
 800d804:	0800d889 	.word	0x0800d889
 800d808:	0800d9cf 	.word	0x0800d9cf
 800d80c:	0800d9cf 	.word	0x0800d9cf
 800d810:	0800d9cf 	.word	0x0800d9cf
 800d814:	0800d8cb 	.word	0x0800d8cb
 800d818:	0800d9cf 	.word	0x0800d9cf
 800d81c:	0800d9cf 	.word	0x0800d9cf
 800d820:	0800d9cf 	.word	0x0800d9cf
 800d824:	0800d90b 	.word	0x0800d90b
 800d828:	0800d9cf 	.word	0x0800d9cf
 800d82c:	0800d9cf 	.word	0x0800d9cf
 800d830:	0800d9cf 	.word	0x0800d9cf
 800d834:	0800d94d 	.word	0x0800d94d
 800d838:	0800d9cf 	.word	0x0800d9cf
 800d83c:	0800d9cf 	.word	0x0800d9cf
 800d840:	0800d9cf 	.word	0x0800d9cf
 800d844:	0800d98d 	.word	0x0800d98d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68b9      	ldr	r1, [r7, #8]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fa92 	bl	800dd78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	699a      	ldr	r2, [r3, #24]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f042 0208 	orr.w	r2, r2, #8
 800d862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	699a      	ldr	r2, [r3, #24]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f022 0204 	bic.w	r2, r2, #4
 800d872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6999      	ldr	r1, [r3, #24]
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	691a      	ldr	r2, [r3, #16]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	430a      	orrs	r2, r1
 800d884:	619a      	str	r2, [r3, #24]
      break;
 800d886:	e0a3      	b.n	800d9d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68b9      	ldr	r1, [r7, #8]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fb0c 	bl	800deac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	699a      	ldr	r2, [r3, #24]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	699a      	ldr	r2, [r3, #24]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6999      	ldr	r1, [r3, #24]
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	021a      	lsls	r2, r3, #8
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	430a      	orrs	r2, r1
 800d8c6:	619a      	str	r2, [r3, #24]
      break;
 800d8c8:	e082      	b.n	800d9d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68b9      	ldr	r1, [r7, #8]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 fb7f 	bl	800dfd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	69da      	ldr	r2, [r3, #28]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f042 0208 	orr.w	r2, r2, #8
 800d8e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	69da      	ldr	r2, [r3, #28]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f022 0204 	bic.w	r2, r2, #4
 800d8f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	69d9      	ldr	r1, [r3, #28]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	691a      	ldr	r2, [r3, #16]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	430a      	orrs	r2, r1
 800d906:	61da      	str	r2, [r3, #28]
      break;
 800d908:	e062      	b.n	800d9d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	4618      	mov	r0, r3
 800d912:	f000 fbf1 	bl	800e0f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	69da      	ldr	r2, [r3, #28]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	69da      	ldr	r2, [r3, #28]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	69d9      	ldr	r1, [r3, #28]
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	021a      	lsls	r2, r3, #8
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	430a      	orrs	r2, r1
 800d948:	61da      	str	r2, [r3, #28]
      break;
 800d94a:	e041      	b.n	800d9d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68b9      	ldr	r1, [r7, #8]
 800d952:	4618      	mov	r0, r3
 800d954:	f000 fc64 	bl	800e220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f042 0208 	orr.w	r2, r2, #8
 800d966:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f022 0204 	bic.w	r2, r2, #4
 800d976:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	691a      	ldr	r2, [r3, #16]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	430a      	orrs	r2, r1
 800d988:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d98a:	e021      	b.n	800d9d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68b9      	ldr	r1, [r7, #8]
 800d992:	4618      	mov	r0, r3
 800d994:	f000 fcae 	bl	800e2f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	021a      	lsls	r2, r3, #8
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	430a      	orrs	r2, r1
 800d9ca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d9cc:	e000      	b.n	800d9d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d9ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop

0800d9e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d101      	bne.n	800d9fc <HAL_TIM_ConfigClockSource+0x18>
 800d9f8:	2302      	movs	r3, #2
 800d9fa:	e0d2      	b.n	800dba2 <HAL_TIM_ConfigClockSource+0x1be>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2202      	movs	r2, #2
 800da08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800da1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800da1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da38:	f000 80a9 	beq.w	800db8e <HAL_TIM_ConfigClockSource+0x1aa>
 800da3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da40:	d81a      	bhi.n	800da78 <HAL_TIM_ConfigClockSource+0x94>
 800da42:	2b30      	cmp	r3, #48	; 0x30
 800da44:	f000 809a 	beq.w	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800da48:	2b30      	cmp	r3, #48	; 0x30
 800da4a:	d809      	bhi.n	800da60 <HAL_TIM_ConfigClockSource+0x7c>
 800da4c:	2b10      	cmp	r3, #16
 800da4e:	f000 8095 	beq.w	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800da52:	2b20      	cmp	r3, #32
 800da54:	f000 8092 	beq.w	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 808f 	beq.w	800db7c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800da5e:	e097      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800da60:	2b50      	cmp	r3, #80	; 0x50
 800da62:	d05b      	beq.n	800db1c <HAL_TIM_ConfigClockSource+0x138>
 800da64:	2b50      	cmp	r3, #80	; 0x50
 800da66:	d802      	bhi.n	800da6e <HAL_TIM_ConfigClockSource+0x8a>
 800da68:	2b40      	cmp	r3, #64	; 0x40
 800da6a:	d077      	beq.n	800db5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800da6c:	e090      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800da6e:	2b60      	cmp	r3, #96	; 0x60
 800da70:	d064      	beq.n	800db3c <HAL_TIM_ConfigClockSource+0x158>
 800da72:	2b70      	cmp	r3, #112	; 0x70
 800da74:	d028      	beq.n	800dac8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800da76:	e08b      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800da78:	4a4c      	ldr	r2, [pc, #304]	; (800dbac <HAL_TIM_ConfigClockSource+0x1c8>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d07e      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800da7e:	4a4b      	ldr	r2, [pc, #300]	; (800dbac <HAL_TIM_ConfigClockSource+0x1c8>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d810      	bhi.n	800daa6 <HAL_TIM_ConfigClockSource+0xc2>
 800da84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da88:	d078      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800da8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da8e:	d803      	bhi.n	800da98 <HAL_TIM_ConfigClockSource+0xb4>
 800da90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da94:	d02f      	beq.n	800daf6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800da96:	e07b      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800da98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da9c:	d06e      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800da9e:	4a44      	ldr	r2, [pc, #272]	; (800dbb0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d06b      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800daa4:	e074      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800daa6:	4a43      	ldr	r2, [pc, #268]	; (800dbb4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d067      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800daac:	4a41      	ldr	r2, [pc, #260]	; (800dbb4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d803      	bhi.n	800daba <HAL_TIM_ConfigClockSource+0xd6>
 800dab2:	4a41      	ldr	r2, [pc, #260]	; (800dbb8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d061      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dab8:	e06a      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800daba:	4a40      	ldr	r2, [pc, #256]	; (800dbbc <HAL_TIM_ConfigClockSource+0x1d8>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d05d      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
 800dac0:	4a3f      	ldr	r2, [pc, #252]	; (800dbc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d05a      	beq.n	800db7c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dac6:	e063      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6818      	ldr	r0, [r3, #0]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	6899      	ldr	r1, [r3, #8]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	f000 fcf4 	bl	800e4c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	689b      	ldr	r3, [r3, #8]
 800dae2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800daea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	609a      	str	r2, [r3, #8]
      break;
 800daf4:	e04c      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	6899      	ldr	r1, [r3, #8]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	685a      	ldr	r2, [r3, #4]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	f000 fcdd 	bl	800e4c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	689a      	ldr	r2, [r3, #8]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db18:	609a      	str	r2, [r3, #8]
      break;
 800db1a:	e039      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6818      	ldr	r0, [r3, #0]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	6859      	ldr	r1, [r3, #4]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	461a      	mov	r2, r3
 800db2a:	f000 fc4f 	bl	800e3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2150      	movs	r1, #80	; 0x50
 800db34:	4618      	mov	r0, r3
 800db36:	f000 fca8 	bl	800e48a <TIM_ITRx_SetConfig>
      break;
 800db3a:	e029      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6818      	ldr	r0, [r3, #0]
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	6859      	ldr	r1, [r3, #4]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	461a      	mov	r2, r3
 800db4a:	f000 fc6e 	bl	800e42a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	2160      	movs	r1, #96	; 0x60
 800db54:	4618      	mov	r0, r3
 800db56:	f000 fc98 	bl	800e48a <TIM_ITRx_SetConfig>
      break;
 800db5a:	e019      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6818      	ldr	r0, [r3, #0]
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	6859      	ldr	r1, [r3, #4]
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	461a      	mov	r2, r3
 800db6a:	f000 fc2f 	bl	800e3cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2140      	movs	r1, #64	; 0x40
 800db74:	4618      	mov	r0, r3
 800db76:	f000 fc88 	bl	800e48a <TIM_ITRx_SetConfig>
      break;
 800db7a:	e009      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4619      	mov	r1, r3
 800db86:	4610      	mov	r0, r2
 800db88:	f000 fc7f 	bl	800e48a <TIM_ITRx_SetConfig>
      break;
 800db8c:	e000      	b.n	800db90 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800db8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	00100030 	.word	0x00100030
 800dbb0:	00100020 	.word	0x00100020
 800dbb4:	00100050 	.word	0x00100050
 800dbb8:	00100040 	.word	0x00100040
 800dbbc:	00100060 	.word	0x00100060
 800dbc0:	00100070 	.word	0x00100070

0800dbc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dbf4:	bf00      	nop
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a46      	ldr	r2, [pc, #280]	; (800dd54 <TIM_Base_SetConfig+0x12c>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d017      	beq.n	800dc70 <TIM_Base_SetConfig+0x48>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc46:	d013      	beq.n	800dc70 <TIM_Base_SetConfig+0x48>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4a43      	ldr	r2, [pc, #268]	; (800dd58 <TIM_Base_SetConfig+0x130>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d00f      	beq.n	800dc70 <TIM_Base_SetConfig+0x48>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4a42      	ldr	r2, [pc, #264]	; (800dd5c <TIM_Base_SetConfig+0x134>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d00b      	beq.n	800dc70 <TIM_Base_SetConfig+0x48>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4a41      	ldr	r2, [pc, #260]	; (800dd60 <TIM_Base_SetConfig+0x138>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d007      	beq.n	800dc70 <TIM_Base_SetConfig+0x48>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	4a40      	ldr	r2, [pc, #256]	; (800dd64 <TIM_Base_SetConfig+0x13c>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d003      	beq.n	800dc70 <TIM_Base_SetConfig+0x48>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4a3f      	ldr	r2, [pc, #252]	; (800dd68 <TIM_Base_SetConfig+0x140>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d108      	bne.n	800dc82 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a33      	ldr	r2, [pc, #204]	; (800dd54 <TIM_Base_SetConfig+0x12c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d023      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc90:	d01f      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a30      	ldr	r2, [pc, #192]	; (800dd58 <TIM_Base_SetConfig+0x130>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d01b      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4a2f      	ldr	r2, [pc, #188]	; (800dd5c <TIM_Base_SetConfig+0x134>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d017      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4a2e      	ldr	r2, [pc, #184]	; (800dd60 <TIM_Base_SetConfig+0x138>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d013      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4a2d      	ldr	r2, [pc, #180]	; (800dd64 <TIM_Base_SetConfig+0x13c>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d00f      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4a2d      	ldr	r2, [pc, #180]	; (800dd6c <TIM_Base_SetConfig+0x144>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d00b      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	4a2c      	ldr	r2, [pc, #176]	; (800dd70 <TIM_Base_SetConfig+0x148>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d007      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a2b      	ldr	r2, [pc, #172]	; (800dd74 <TIM_Base_SetConfig+0x14c>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d003      	beq.n	800dcd2 <TIM_Base_SetConfig+0xaa>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4a26      	ldr	r2, [pc, #152]	; (800dd68 <TIM_Base_SetConfig+0x140>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d108      	bne.n	800dce4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	695b      	ldr	r3, [r3, #20]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	689a      	ldr	r2, [r3, #8]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4a12      	ldr	r2, [pc, #72]	; (800dd54 <TIM_Base_SetConfig+0x12c>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d013      	beq.n	800dd38 <TIM_Base_SetConfig+0x110>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a14      	ldr	r2, [pc, #80]	; (800dd64 <TIM_Base_SetConfig+0x13c>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d00f      	beq.n	800dd38 <TIM_Base_SetConfig+0x110>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a14      	ldr	r2, [pc, #80]	; (800dd6c <TIM_Base_SetConfig+0x144>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d00b      	beq.n	800dd38 <TIM_Base_SetConfig+0x110>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a13      	ldr	r2, [pc, #76]	; (800dd70 <TIM_Base_SetConfig+0x148>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d007      	beq.n	800dd38 <TIM_Base_SetConfig+0x110>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a12      	ldr	r2, [pc, #72]	; (800dd74 <TIM_Base_SetConfig+0x14c>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d003      	beq.n	800dd38 <TIM_Base_SetConfig+0x110>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a0d      	ldr	r2, [pc, #52]	; (800dd68 <TIM_Base_SetConfig+0x140>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d103      	bne.n	800dd40 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	691a      	ldr	r2, [r3, #16]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2201      	movs	r2, #1
 800dd44:	615a      	str	r2, [r3, #20]
}
 800dd46:	bf00      	nop
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	40012c00 	.word	0x40012c00
 800dd58:	40000400 	.word	0x40000400
 800dd5c:	40000800 	.word	0x40000800
 800dd60:	40000c00 	.word	0x40000c00
 800dd64:	40013400 	.word	0x40013400
 800dd68:	40015000 	.word	0x40015000
 800dd6c:	40014000 	.word	0x40014000
 800dd70:	40014400 	.word	0x40014400
 800dd74:	40014800 	.word	0x40014800

0800dd78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	f023 0201 	bic.w	r2, r3, #1
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f023 0303 	bic.w	r3, r3, #3
 800ddb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f023 0302 	bic.w	r3, r3, #2
 800ddc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a30      	ldr	r2, [pc, #192]	; (800de94 <TIM_OC1_SetConfig+0x11c>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d013      	beq.n	800de00 <TIM_OC1_SetConfig+0x88>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4a2f      	ldr	r2, [pc, #188]	; (800de98 <TIM_OC1_SetConfig+0x120>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d00f      	beq.n	800de00 <TIM_OC1_SetConfig+0x88>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4a2e      	ldr	r2, [pc, #184]	; (800de9c <TIM_OC1_SetConfig+0x124>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d00b      	beq.n	800de00 <TIM_OC1_SetConfig+0x88>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a2d      	ldr	r2, [pc, #180]	; (800dea0 <TIM_OC1_SetConfig+0x128>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d007      	beq.n	800de00 <TIM_OC1_SetConfig+0x88>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a2c      	ldr	r2, [pc, #176]	; (800dea4 <TIM_OC1_SetConfig+0x12c>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d003      	beq.n	800de00 <TIM_OC1_SetConfig+0x88>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a2b      	ldr	r2, [pc, #172]	; (800dea8 <TIM_OC1_SetConfig+0x130>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d10c      	bne.n	800de1a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	f023 0308 	bic.w	r3, r3, #8
 800de06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	697a      	ldr	r2, [r7, #20]
 800de0e:	4313      	orrs	r3, r2
 800de10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f023 0304 	bic.w	r3, r3, #4
 800de18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a1d      	ldr	r2, [pc, #116]	; (800de94 <TIM_OC1_SetConfig+0x11c>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d013      	beq.n	800de4a <TIM_OC1_SetConfig+0xd2>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a1c      	ldr	r2, [pc, #112]	; (800de98 <TIM_OC1_SetConfig+0x120>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d00f      	beq.n	800de4a <TIM_OC1_SetConfig+0xd2>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a1b      	ldr	r2, [pc, #108]	; (800de9c <TIM_OC1_SetConfig+0x124>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d00b      	beq.n	800de4a <TIM_OC1_SetConfig+0xd2>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a1a      	ldr	r2, [pc, #104]	; (800dea0 <TIM_OC1_SetConfig+0x128>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d007      	beq.n	800de4a <TIM_OC1_SetConfig+0xd2>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a19      	ldr	r2, [pc, #100]	; (800dea4 <TIM_OC1_SetConfig+0x12c>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d003      	beq.n	800de4a <TIM_OC1_SetConfig+0xd2>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a18      	ldr	r2, [pc, #96]	; (800dea8 <TIM_OC1_SetConfig+0x130>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d111      	bne.n	800de6e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	4313      	orrs	r3, r2
 800de62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	685a      	ldr	r2, [r3, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	621a      	str	r2, [r3, #32]
}
 800de88:	bf00      	nop
 800de8a:	371c      	adds	r7, #28
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr
 800de94:	40012c00 	.word	0x40012c00
 800de98:	40013400 	.word	0x40013400
 800de9c:	40014000 	.word	0x40014000
 800dea0:	40014400 	.word	0x40014400
 800dea4:	40014800 	.word	0x40014800
 800dea8:	40015000 	.word	0x40015000

0800deac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800deac:	b480      	push	{r7}
 800deae:	b087      	sub	sp, #28
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	f023 0210 	bic.w	r2, r3, #16
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800deda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	021b      	lsls	r3, r3, #8
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	4313      	orrs	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	f023 0320 	bic.w	r3, r3, #32
 800defa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	011b      	lsls	r3, r3, #4
 800df02:	697a      	ldr	r2, [r7, #20]
 800df04:	4313      	orrs	r3, r2
 800df06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4a2c      	ldr	r2, [pc, #176]	; (800dfbc <TIM_OC2_SetConfig+0x110>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d007      	beq.n	800df20 <TIM_OC2_SetConfig+0x74>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4a2b      	ldr	r2, [pc, #172]	; (800dfc0 <TIM_OC2_SetConfig+0x114>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d003      	beq.n	800df20 <TIM_OC2_SetConfig+0x74>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	4a2a      	ldr	r2, [pc, #168]	; (800dfc4 <TIM_OC2_SetConfig+0x118>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d10d      	bne.n	800df3c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	011b      	lsls	r3, r3, #4
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	4313      	orrs	r3, r2
 800df32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	4a1f      	ldr	r2, [pc, #124]	; (800dfbc <TIM_OC2_SetConfig+0x110>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d013      	beq.n	800df6c <TIM_OC2_SetConfig+0xc0>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	4a1e      	ldr	r2, [pc, #120]	; (800dfc0 <TIM_OC2_SetConfig+0x114>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d00f      	beq.n	800df6c <TIM_OC2_SetConfig+0xc0>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4a1e      	ldr	r2, [pc, #120]	; (800dfc8 <TIM_OC2_SetConfig+0x11c>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d00b      	beq.n	800df6c <TIM_OC2_SetConfig+0xc0>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a1d      	ldr	r2, [pc, #116]	; (800dfcc <TIM_OC2_SetConfig+0x120>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d007      	beq.n	800df6c <TIM_OC2_SetConfig+0xc0>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4a1c      	ldr	r2, [pc, #112]	; (800dfd0 <TIM_OC2_SetConfig+0x124>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d003      	beq.n	800df6c <TIM_OC2_SetConfig+0xc0>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4a17      	ldr	r2, [pc, #92]	; (800dfc4 <TIM_OC2_SetConfig+0x118>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d113      	bne.n	800df94 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	693a      	ldr	r2, [r7, #16]
 800df84:	4313      	orrs	r3, r2
 800df86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	4313      	orrs	r3, r2
 800df92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	685a      	ldr	r2, [r3, #4]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	697a      	ldr	r2, [r7, #20]
 800dfac:	621a      	str	r2, [r3, #32]
}
 800dfae:	bf00      	nop
 800dfb0:	371c      	adds	r7, #28
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	40012c00 	.word	0x40012c00
 800dfc0:	40013400 	.word	0x40013400
 800dfc4:	40015000 	.word	0x40015000
 800dfc8:	40014000 	.word	0x40014000
 800dfcc:	40014400 	.word	0x40014400
 800dfd0:	40014800 	.word	0x40014800

0800dfd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b087      	sub	sp, #28
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a1b      	ldr	r3, [r3, #32]
 800dfe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	69db      	ldr	r3, [r3, #28]
 800dffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f023 0303 	bic.w	r3, r3, #3
 800e00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	4313      	orrs	r3, r2
 800e018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	021b      	lsls	r3, r3, #8
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	4313      	orrs	r3, r2
 800e02c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a2b      	ldr	r2, [pc, #172]	; (800e0e0 <TIM_OC3_SetConfig+0x10c>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d007      	beq.n	800e046 <TIM_OC3_SetConfig+0x72>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a2a      	ldr	r2, [pc, #168]	; (800e0e4 <TIM_OC3_SetConfig+0x110>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d003      	beq.n	800e046 <TIM_OC3_SetConfig+0x72>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a29      	ldr	r2, [pc, #164]	; (800e0e8 <TIM_OC3_SetConfig+0x114>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d10d      	bne.n	800e062 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e04c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	021b      	lsls	r3, r3, #8
 800e054:	697a      	ldr	r2, [r7, #20]
 800e056:	4313      	orrs	r3, r2
 800e058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4a1e      	ldr	r2, [pc, #120]	; (800e0e0 <TIM_OC3_SetConfig+0x10c>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d013      	beq.n	800e092 <TIM_OC3_SetConfig+0xbe>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4a1d      	ldr	r2, [pc, #116]	; (800e0e4 <TIM_OC3_SetConfig+0x110>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d00f      	beq.n	800e092 <TIM_OC3_SetConfig+0xbe>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4a1d      	ldr	r2, [pc, #116]	; (800e0ec <TIM_OC3_SetConfig+0x118>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d00b      	beq.n	800e092 <TIM_OC3_SetConfig+0xbe>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4a1c      	ldr	r2, [pc, #112]	; (800e0f0 <TIM_OC3_SetConfig+0x11c>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d007      	beq.n	800e092 <TIM_OC3_SetConfig+0xbe>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4a1b      	ldr	r2, [pc, #108]	; (800e0f4 <TIM_OC3_SetConfig+0x120>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d003      	beq.n	800e092 <TIM_OC3_SetConfig+0xbe>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a16      	ldr	r2, [pc, #88]	; (800e0e8 <TIM_OC3_SetConfig+0x114>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d113      	bne.n	800e0ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	695b      	ldr	r3, [r3, #20]
 800e0a6:	011b      	lsls	r3, r3, #4
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	011b      	lsls	r3, r3, #4
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	685a      	ldr	r2, [r3, #4]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	621a      	str	r2, [r3, #32]
}
 800e0d4:	bf00      	nop
 800e0d6:	371c      	adds	r7, #28
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	40012c00 	.word	0x40012c00
 800e0e4:	40013400 	.word	0x40013400
 800e0e8:	40015000 	.word	0x40015000
 800e0ec:	40014000 	.word	0x40014000
 800e0f0:	40014400 	.word	0x40014400
 800e0f4:	40014800 	.word	0x40014800

0800e0f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b087      	sub	sp, #28
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	69db      	ldr	r3, [r3, #28]
 800e11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	021b      	lsls	r3, r3, #8
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	031b      	lsls	r3, r3, #12
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	4313      	orrs	r3, r2
 800e152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a2c      	ldr	r2, [pc, #176]	; (800e208 <TIM_OC4_SetConfig+0x110>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d007      	beq.n	800e16c <TIM_OC4_SetConfig+0x74>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a2b      	ldr	r2, [pc, #172]	; (800e20c <TIM_OC4_SetConfig+0x114>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d003      	beq.n	800e16c <TIM_OC4_SetConfig+0x74>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a2a      	ldr	r2, [pc, #168]	; (800e210 <TIM_OC4_SetConfig+0x118>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d10d      	bne.n	800e188 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	031b      	lsls	r3, r3, #12
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	4313      	orrs	r3, r2
 800e17e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e186:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a1f      	ldr	r2, [pc, #124]	; (800e208 <TIM_OC4_SetConfig+0x110>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d013      	beq.n	800e1b8 <TIM_OC4_SetConfig+0xc0>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a1e      	ldr	r2, [pc, #120]	; (800e20c <TIM_OC4_SetConfig+0x114>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d00f      	beq.n	800e1b8 <TIM_OC4_SetConfig+0xc0>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a1e      	ldr	r2, [pc, #120]	; (800e214 <TIM_OC4_SetConfig+0x11c>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d00b      	beq.n	800e1b8 <TIM_OC4_SetConfig+0xc0>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a1d      	ldr	r2, [pc, #116]	; (800e218 <TIM_OC4_SetConfig+0x120>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d007      	beq.n	800e1b8 <TIM_OC4_SetConfig+0xc0>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a1c      	ldr	r2, [pc, #112]	; (800e21c <TIM_OC4_SetConfig+0x124>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d003      	beq.n	800e1b8 <TIM_OC4_SetConfig+0xc0>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4a17      	ldr	r2, [pc, #92]	; (800e210 <TIM_OC4_SetConfig+0x118>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d113      	bne.n	800e1e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e1c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	695b      	ldr	r3, [r3, #20]
 800e1cc:	019b      	lsls	r3, r3, #6
 800e1ce:	693a      	ldr	r2, [r7, #16]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	019b      	lsls	r3, r3, #6
 800e1da:	693a      	ldr	r2, [r7, #16]
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	693a      	ldr	r2, [r7, #16]
 800e1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	621a      	str	r2, [r3, #32]
}
 800e1fa:	bf00      	nop
 800e1fc:	371c      	adds	r7, #28
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	40012c00 	.word	0x40012c00
 800e20c:	40013400 	.word	0x40013400
 800e210:	40015000 	.word	0x40015000
 800e214:	40014000 	.word	0x40014000
 800e218:	40014400 	.word	0x40014400
 800e21c:	40014800 	.word	0x40014800

0800e220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e220:	b480      	push	{r7}
 800e222:	b087      	sub	sp, #28
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e264:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	041b      	lsls	r3, r3, #16
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	4313      	orrs	r3, r2
 800e270:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a19      	ldr	r2, [pc, #100]	; (800e2dc <TIM_OC5_SetConfig+0xbc>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d013      	beq.n	800e2a2 <TIM_OC5_SetConfig+0x82>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a18      	ldr	r2, [pc, #96]	; (800e2e0 <TIM_OC5_SetConfig+0xc0>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d00f      	beq.n	800e2a2 <TIM_OC5_SetConfig+0x82>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a17      	ldr	r2, [pc, #92]	; (800e2e4 <TIM_OC5_SetConfig+0xc4>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d00b      	beq.n	800e2a2 <TIM_OC5_SetConfig+0x82>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a16      	ldr	r2, [pc, #88]	; (800e2e8 <TIM_OC5_SetConfig+0xc8>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d007      	beq.n	800e2a2 <TIM_OC5_SetConfig+0x82>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a15      	ldr	r2, [pc, #84]	; (800e2ec <TIM_OC5_SetConfig+0xcc>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d003      	beq.n	800e2a2 <TIM_OC5_SetConfig+0x82>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a14      	ldr	r2, [pc, #80]	; (800e2f0 <TIM_OC5_SetConfig+0xd0>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d109      	bne.n	800e2b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	695b      	ldr	r3, [r3, #20]
 800e2ae:	021b      	lsls	r3, r3, #8
 800e2b0:	697a      	ldr	r2, [r7, #20]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	697a      	ldr	r2, [r7, #20]
 800e2ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	685a      	ldr	r2, [r3, #4]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	621a      	str	r2, [r3, #32]
}
 800e2d0:	bf00      	nop
 800e2d2:	371c      	adds	r7, #28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr
 800e2dc:	40012c00 	.word	0x40012c00
 800e2e0:	40013400 	.word	0x40013400
 800e2e4:	40014000 	.word	0x40014000
 800e2e8:	40014400 	.word	0x40014400
 800e2ec:	40014800 	.word	0x40014800
 800e2f0:	40015000 	.word	0x40015000

0800e2f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b087      	sub	sp, #28
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6a1b      	ldr	r3, [r3, #32]
 800e302:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a1b      	ldr	r3, [r3, #32]
 800e30e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	021b      	lsls	r3, r3, #8
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	4313      	orrs	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e33a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	051b      	lsls	r3, r3, #20
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	4313      	orrs	r3, r2
 800e346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4a1a      	ldr	r2, [pc, #104]	; (800e3b4 <TIM_OC6_SetConfig+0xc0>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d013      	beq.n	800e378 <TIM_OC6_SetConfig+0x84>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a19      	ldr	r2, [pc, #100]	; (800e3b8 <TIM_OC6_SetConfig+0xc4>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d00f      	beq.n	800e378 <TIM_OC6_SetConfig+0x84>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4a18      	ldr	r2, [pc, #96]	; (800e3bc <TIM_OC6_SetConfig+0xc8>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d00b      	beq.n	800e378 <TIM_OC6_SetConfig+0x84>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a17      	ldr	r2, [pc, #92]	; (800e3c0 <TIM_OC6_SetConfig+0xcc>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d007      	beq.n	800e378 <TIM_OC6_SetConfig+0x84>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a16      	ldr	r2, [pc, #88]	; (800e3c4 <TIM_OC6_SetConfig+0xd0>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d003      	beq.n	800e378 <TIM_OC6_SetConfig+0x84>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a15      	ldr	r2, [pc, #84]	; (800e3c8 <TIM_OC6_SetConfig+0xd4>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d109      	bne.n	800e38c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e37e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	029b      	lsls	r3, r3, #10
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	4313      	orrs	r3, r2
 800e38a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	685a      	ldr	r2, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	693a      	ldr	r2, [r7, #16]
 800e3a4:	621a      	str	r2, [r3, #32]
}
 800e3a6:	bf00      	nop
 800e3a8:	371c      	adds	r7, #28
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	40012c00 	.word	0x40012c00
 800e3b8:	40013400 	.word	0x40013400
 800e3bc:	40014000 	.word	0x40014000
 800e3c0:	40014400 	.word	0x40014400
 800e3c4:	40014800 	.word	0x40014800
 800e3c8:	40015000 	.word	0x40015000

0800e3cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b087      	sub	sp, #28
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6a1b      	ldr	r3, [r3, #32]
 800e3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	f023 0201 	bic.w	r2, r3, #1
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	011b      	lsls	r3, r3, #4
 800e3fc:	693a      	ldr	r2, [r7, #16]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	f023 030a 	bic.w	r3, r3, #10
 800e408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e40a:	697a      	ldr	r2, [r7, #20]
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	4313      	orrs	r3, r2
 800e410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	693a      	ldr	r2, [r7, #16]
 800e416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	621a      	str	r2, [r3, #32]
}
 800e41e:	bf00      	nop
 800e420:	371c      	adds	r7, #28
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr

0800e42a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e42a:	b480      	push	{r7}
 800e42c:	b087      	sub	sp, #28
 800e42e:	af00      	add	r7, sp, #0
 800e430:	60f8      	str	r0, [r7, #12]
 800e432:	60b9      	str	r1, [r7, #8]
 800e434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	f023 0210 	bic.w	r2, r3, #16
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	699b      	ldr	r3, [r3, #24]
 800e446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6a1b      	ldr	r3, [r3, #32]
 800e44c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	031b      	lsls	r3, r3, #12
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	011b      	lsls	r3, r3, #4
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	4313      	orrs	r3, r2
 800e470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	697a      	ldr	r2, [r7, #20]
 800e476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	621a      	str	r2, [r3, #32]
}
 800e47e:	bf00      	nop
 800e480:	371c      	adds	r7, #28
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b085      	sub	sp, #20
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	f043 0307 	orr.w	r3, r3, #7
 800e4b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	609a      	str	r2, [r3, #8]
}
 800e4b8:	bf00      	nop
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	607a      	str	r2, [r7, #4]
 800e4d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	021a      	lsls	r2, r3, #8
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	431a      	orrs	r2, r3
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	697a      	ldr	r2, [r7, #20]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	609a      	str	r2, [r3, #8]
}
 800e4f8:	bf00      	nop
 800e4fa:	371c      	adds	r7, #28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e504:	b480      	push	{r7}
 800e506:	b087      	sub	sp, #28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	f003 031f 	and.w	r3, r3, #31
 800e516:	2201      	movs	r2, #1
 800e518:	fa02 f303 	lsl.w	r3, r2, r3
 800e51c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6a1a      	ldr	r2, [r3, #32]
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	43db      	mvns	r3, r3
 800e526:	401a      	ands	r2, r3
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6a1a      	ldr	r2, [r3, #32]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	f003 031f 	and.w	r3, r3, #31
 800e536:	6879      	ldr	r1, [r7, #4]
 800e538:	fa01 f303 	lsl.w	r3, r1, r3
 800e53c:	431a      	orrs	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	621a      	str	r2, [r3, #32]
}
 800e542:	bf00      	nop
 800e544:	371c      	adds	r7, #28
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
	...

0800e550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e560:	2b01      	cmp	r3, #1
 800e562:	d101      	bne.n	800e568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e564:	2302      	movs	r3, #2
 800e566:	e074      	b.n	800e652 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2202      	movs	r2, #2
 800e574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a34      	ldr	r2, [pc, #208]	; (800e660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d009      	beq.n	800e5a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a33      	ldr	r2, [pc, #204]	; (800e664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d004      	beq.n	800e5a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a31      	ldr	r2, [pc, #196]	; (800e668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d108      	bne.n	800e5b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e5ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e5be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a21      	ldr	r2, [pc, #132]	; (800e660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d022      	beq.n	800e626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5e8:	d01d      	beq.n	800e626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a1f      	ldr	r2, [pc, #124]	; (800e66c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d018      	beq.n	800e626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a1d      	ldr	r2, [pc, #116]	; (800e670 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d013      	beq.n	800e626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a1c      	ldr	r2, [pc, #112]	; (800e674 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d00e      	beq.n	800e626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a15      	ldr	r2, [pc, #84]	; (800e664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d009      	beq.n	800e626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a18      	ldr	r2, [pc, #96]	; (800e678 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d004      	beq.n	800e626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a11      	ldr	r2, [pc, #68]	; (800e668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d10c      	bne.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e62c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	689b      	ldr	r3, [r3, #8]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	4313      	orrs	r3, r2
 800e636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	40012c00 	.word	0x40012c00
 800e664:	40013400 	.word	0x40013400
 800e668:	40015000 	.word	0x40015000
 800e66c:	40000400 	.word	0x40000400
 800e670:	40000800 	.word	0x40000800
 800e674:	40000c00 	.word	0x40000c00
 800e678:	40014000 	.word	0x40014000

0800e67c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b085      	sub	sp, #20
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e686:	2300      	movs	r3, #0
 800e688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e690:	2b01      	cmp	r3, #1
 800e692:	d101      	bne.n	800e698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e694:	2302      	movs	r3, #2
 800e696:	e096      	b.n	800e7c6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	691b      	ldr	r3, [r3, #16]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fe:	4313      	orrs	r3, r2
 800e700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	041b      	lsls	r3, r3, #16
 800e70e:	4313      	orrs	r3, r2
 800e710:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4a2f      	ldr	r2, [pc, #188]	; (800e7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d009      	beq.n	800e730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a2d      	ldr	r2, [pc, #180]	; (800e7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d004      	beq.n	800e730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a2c      	ldr	r2, [pc, #176]	; (800e7dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d106      	bne.n	800e73e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	69db      	ldr	r3, [r3, #28]
 800e73a:	4313      	orrs	r3, r2
 800e73c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a24      	ldr	r2, [pc, #144]	; (800e7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d009      	beq.n	800e75c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a22      	ldr	r2, [pc, #136]	; (800e7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d004      	beq.n	800e75c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4a21      	ldr	r2, [pc, #132]	; (800e7dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d12b      	bne.n	800e7b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e766:	051b      	lsls	r3, r3, #20
 800e768:	4313      	orrs	r3, r2
 800e76a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	6a1b      	ldr	r3, [r3, #32]
 800e776:	4313      	orrs	r3, r2
 800e778:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e784:	4313      	orrs	r3, r2
 800e786:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a11      	ldr	r2, [pc, #68]	; (800e7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d009      	beq.n	800e7a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a10      	ldr	r2, [pc, #64]	; (800e7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d004      	beq.n	800e7a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a0e      	ldr	r2, [pc, #56]	; (800e7dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d106      	bne.n	800e7b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	40012c00 	.word	0x40012c00
 800e7d8:	40013400 	.word	0x40013400
 800e7dc:	40015000 	.word	0x40015000

0800e7e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e84c:	bf00      	nop
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <LL_EXTI_EnableIT_0_31>:
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800e874:	4b05      	ldr	r3, [pc, #20]	; (800e88c <LL_EXTI_EnableIT_0_31+0x20>)
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	4904      	ldr	r1, [pc, #16]	; (800e88c <LL_EXTI_EnableIT_0_31+0x20>)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4313      	orrs	r3, r2
 800e87e:	600b      	str	r3, [r1, #0]
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	40010400 	.word	0x40010400

0800e890 <LL_EXTI_EnableIT_32_63>:
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800e898:	4b05      	ldr	r3, [pc, #20]	; (800e8b0 <LL_EXTI_EnableIT_32_63+0x20>)
 800e89a:	6a1a      	ldr	r2, [r3, #32]
 800e89c:	4904      	ldr	r1, [pc, #16]	; (800e8b0 <LL_EXTI_EnableIT_32_63+0x20>)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	620b      	str	r3, [r1, #32]
}
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr
 800e8b0:	40010400 	.word	0x40010400

0800e8b4 <LL_EXTI_DisableIT_0_31>:
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800e8bc:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <LL_EXTI_DisableIT_0_31+0x24>)
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	43db      	mvns	r3, r3
 800e8c4:	4904      	ldr	r1, [pc, #16]	; (800e8d8 <LL_EXTI_DisableIT_0_31+0x24>)
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	600b      	str	r3, [r1, #0]
}
 800e8ca:	bf00      	nop
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	40010400 	.word	0x40010400

0800e8dc <LL_EXTI_DisableIT_32_63>:
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800e8e4:	4b06      	ldr	r3, [pc, #24]	; (800e900 <LL_EXTI_DisableIT_32_63+0x24>)
 800e8e6:	6a1a      	ldr	r2, [r3, #32]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	43db      	mvns	r3, r3
 800e8ec:	4904      	ldr	r1, [pc, #16]	; (800e900 <LL_EXTI_DisableIT_32_63+0x24>)
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	620b      	str	r3, [r1, #32]
}
 800e8f2:	bf00      	nop
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	40010400 	.word	0x40010400

0800e904 <LL_EXTI_EnableEvent_0_31>:
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800e90c:	4b05      	ldr	r3, [pc, #20]	; (800e924 <LL_EXTI_EnableEvent_0_31+0x20>)
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	4904      	ldr	r1, [pc, #16]	; (800e924 <LL_EXTI_EnableEvent_0_31+0x20>)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4313      	orrs	r3, r2
 800e916:	604b      	str	r3, [r1, #4]
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr
 800e924:	40010400 	.word	0x40010400

0800e928 <LL_EXTI_EnableEvent_32_63>:
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800e930:	4b05      	ldr	r3, [pc, #20]	; (800e948 <LL_EXTI_EnableEvent_32_63+0x20>)
 800e932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e934:	4904      	ldr	r1, [pc, #16]	; (800e948 <LL_EXTI_EnableEvent_32_63+0x20>)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4313      	orrs	r3, r2
 800e93a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e93c:	bf00      	nop
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	40010400 	.word	0x40010400

0800e94c <LL_EXTI_DisableEvent_0_31>:
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800e954:	4b06      	ldr	r3, [pc, #24]	; (800e970 <LL_EXTI_DisableEvent_0_31+0x24>)
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	43db      	mvns	r3, r3
 800e95c:	4904      	ldr	r1, [pc, #16]	; (800e970 <LL_EXTI_DisableEvent_0_31+0x24>)
 800e95e:	4013      	ands	r3, r2
 800e960:	604b      	str	r3, [r1, #4]
}
 800e962:	bf00      	nop
 800e964:	370c      	adds	r7, #12
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	40010400 	.word	0x40010400

0800e974 <LL_EXTI_DisableEvent_32_63>:
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800e97c:	4b06      	ldr	r3, [pc, #24]	; (800e998 <LL_EXTI_DisableEvent_32_63+0x24>)
 800e97e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	43db      	mvns	r3, r3
 800e984:	4904      	ldr	r1, [pc, #16]	; (800e998 <LL_EXTI_DisableEvent_32_63+0x24>)
 800e986:	4013      	ands	r3, r2
 800e988:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e98a:	bf00      	nop
 800e98c:	370c      	adds	r7, #12
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	40010400 	.word	0x40010400

0800e99c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800e9a4:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800e9a6:	689a      	ldr	r2, [r3, #8]
 800e9a8:	4904      	ldr	r1, [pc, #16]	; (800e9bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	608b      	str	r3, [r1, #8]
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	40010400 	.word	0x40010400

0800e9c0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e9c8:	4b05      	ldr	r3, [pc, #20]	; (800e9e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e9ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e9cc:	4904      	ldr	r1, [pc, #16]	; (800e9e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	628b      	str	r3, [r1, #40]	; 0x28
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	40010400 	.word	0x40010400

0800e9e4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800e9ec:	4b06      	ldr	r3, [pc, #24]	; (800ea08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800e9ee:	689a      	ldr	r2, [r3, #8]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	43db      	mvns	r3, r3
 800e9f4:	4904      	ldr	r1, [pc, #16]	; (800ea08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	608b      	str	r3, [r1, #8]
}
 800e9fa:	bf00      	nop
 800e9fc:	370c      	adds	r7, #12
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	40010400 	.word	0x40010400

0800ea0c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800ea14:	4b06      	ldr	r3, [pc, #24]	; (800ea30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ea16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	43db      	mvns	r3, r3
 800ea1c:	4904      	ldr	r1, [pc, #16]	; (800ea30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ea1e:	4013      	ands	r3, r2
 800ea20:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ea22:	bf00      	nop
 800ea24:	370c      	adds	r7, #12
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	40010400 	.word	0x40010400

0800ea34 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800ea3c:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ea3e:	68da      	ldr	r2, [r3, #12]
 800ea40:	4904      	ldr	r1, [pc, #16]	; (800ea54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4313      	orrs	r3, r2
 800ea46:	60cb      	str	r3, [r1, #12]
}
 800ea48:	bf00      	nop
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	40010400 	.word	0x40010400

0800ea58 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800ea60:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ea62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea64:	4904      	ldr	r1, [pc, #16]	; (800ea78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ea6c:	bf00      	nop
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	40010400 	.word	0x40010400

0800ea7c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ea84:	4b06      	ldr	r3, [pc, #24]	; (800eaa0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ea86:	68da      	ldr	r2, [r3, #12]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	43db      	mvns	r3, r3
 800ea8c:	4904      	ldr	r1, [pc, #16]	; (800eaa0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ea8e:	4013      	ands	r3, r2
 800ea90:	60cb      	str	r3, [r1, #12]
}
 800ea92:	bf00      	nop
 800ea94:	370c      	adds	r7, #12
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	40010400 	.word	0x40010400

0800eaa4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800eaac:	4b06      	ldr	r3, [pc, #24]	; (800eac8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800eaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	43db      	mvns	r3, r3
 800eab4:	4904      	ldr	r1, [pc, #16]	; (800eac8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800eab6:	4013      	ands	r3, r2
 800eab8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800eaba:	bf00      	nop
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	40010400 	.word	0x40010400

0800eacc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ead4:	2300      	movs	r3, #0
 800ead6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	7a1b      	ldrb	r3, [r3, #8]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f000 80c8 	beq.w	800ec72 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d05d      	beq.n	800eba6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7a5b      	ldrb	r3, [r3, #9]
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d00e      	beq.n	800eb10 <LL_EXTI_Init+0x44>
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d017      	beq.n	800eb26 <LL_EXTI_Init+0x5a>
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d120      	bne.n	800eb3c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff ff24 	bl	800e94c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff feaf 	bl	800e86c <LL_EXTI_EnableIT_0_31>
          break;
 800eb0e:	e018      	b.n	800eb42 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff fecd 	bl	800e8b4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff fef0 	bl	800e904 <LL_EXTI_EnableEvent_0_31>
          break;
 800eb24:	e00d      	b.n	800eb42 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7ff fe9e 	bl	800e86c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7ff fee5 	bl	800e904 <LL_EXTI_EnableEvent_0_31>
          break;
 800eb3a:	e002      	b.n	800eb42 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	60fb      	str	r3, [r7, #12]
          break;
 800eb40:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	7a9b      	ldrb	r3, [r3, #10]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d02d      	beq.n	800eba6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	7a9b      	ldrb	r3, [r3, #10]
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d00e      	beq.n	800eb70 <LL_EXTI_Init+0xa4>
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d017      	beq.n	800eb86 <LL_EXTI_Init+0xba>
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d120      	bne.n	800eb9c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7ff ff8c 	bl	800ea7c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7ff ff17 	bl	800e99c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800eb6e:	e01b      	b.n	800eba8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff ff35 	bl	800e9e4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff ff58 	bl	800ea34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800eb84:	e010      	b.n	800eba8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff ff06 	bl	800e99c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7ff ff4d 	bl	800ea34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800eb9a:	e005      	b.n	800eba8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f043 0302 	orr.w	r3, r3, #2
 800eba2:	60fb      	str	r3, [r7, #12]
            break;
 800eba4:	e000      	b.n	800eba8 <LL_EXTI_Init+0xdc>
        }
      }
 800eba6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d075      	beq.n	800ec9c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7a5b      	ldrb	r3, [r3, #9]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d00e      	beq.n	800ebd6 <LL_EXTI_Init+0x10a>
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d017      	beq.n	800ebec <LL_EXTI_Init+0x120>
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d120      	bne.n	800ec02 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7ff fed5 	bl	800e974 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff fe5e 	bl	800e890 <LL_EXTI_EnableIT_32_63>
          break;
 800ebd4:	e01a      	b.n	800ec0c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7ff fe7e 	bl	800e8dc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7ff fe9f 	bl	800e928 <LL_EXTI_EnableEvent_32_63>
          break;
 800ebea:	e00f      	b.n	800ec0c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7ff fe4d 	bl	800e890 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff fe94 	bl	800e928 <LL_EXTI_EnableEvent_32_63>
          break;
 800ec00:	e004      	b.n	800ec0c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f043 0304 	orr.w	r3, r3, #4
 800ec08:	60fb      	str	r3, [r7, #12]
          break;
 800ec0a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	7a9b      	ldrb	r3, [r3, #10]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d043      	beq.n	800ec9c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	7a9b      	ldrb	r3, [r3, #10]
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d00e      	beq.n	800ec3a <LL_EXTI_Init+0x16e>
 800ec1c:	2b03      	cmp	r3, #3
 800ec1e:	d017      	beq.n	800ec50 <LL_EXTI_Init+0x184>
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d120      	bne.n	800ec66 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7ff ff3b 	bl	800eaa4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff fec4 	bl	800e9c0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ec38:	e031      	b.n	800ec9e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff fee4 	bl	800ea0c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7ff ff05 	bl	800ea58 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ec4e:	e026      	b.n	800ec9e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7ff feb3 	bl	800e9c0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	685b      	ldr	r3, [r3, #4]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7ff fefa 	bl	800ea58 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ec64:	e01b      	b.n	800ec9e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f043 0305 	orr.w	r3, r3, #5
 800ec6c:	60fb      	str	r3, [r7, #12]
            break;
 800ec6e:	bf00      	nop
 800ec70:	e015      	b.n	800ec9e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff fe1c 	bl	800e8b4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff fe63 	bl	800e94c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff fe26 	bl	800e8dc <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7ff fe6d 	bl	800e974 <LL_EXTI_DisableEvent_32_63>
 800ec9a:	e000      	b.n	800ec9e <LL_EXTI_Init+0x1d2>
      }
 800ec9c:	bf00      	nop
  }

  return status;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <LL_GPIO_SetPinMode>:
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b089      	sub	sp, #36	; 0x24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	fa93 f3a3 	rbit	r3, r3
 800ecc2:	613b      	str	r3, [r7, #16]
  return result;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	fab3 f383 	clz	r3, r3
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	005b      	lsls	r3, r3, #1
 800ecce:	2103      	movs	r1, #3
 800ecd0:	fa01 f303 	lsl.w	r3, r1, r3
 800ecd4:	43db      	mvns	r3, r3
 800ecd6:	401a      	ands	r2, r3
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	fa93 f3a3 	rbit	r3, r3
 800ece2:	61bb      	str	r3, [r7, #24]
  return result;
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	fab3 f383 	clz	r3, r3
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	005b      	lsls	r3, r3, #1
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf4:	431a      	orrs	r2, r3
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	601a      	str	r2, [r3, #0]
}
 800ecfa:	bf00      	nop
 800ecfc:	3724      	adds	r7, #36	; 0x24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr

0800ed06 <LL_GPIO_SetPinOutputType>:
{
 800ed06:	b480      	push	{r7}
 800ed08:	b085      	sub	sp, #20
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	60f8      	str	r0, [r7, #12]
 800ed0e:	60b9      	str	r1, [r7, #8]
 800ed10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	685a      	ldr	r2, [r3, #4]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	43db      	mvns	r3, r3
 800ed1a:	401a      	ands	r2, r3
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	6879      	ldr	r1, [r7, #4]
 800ed20:	fb01 f303 	mul.w	r3, r1, r3
 800ed24:	431a      	orrs	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	605a      	str	r2, [r3, #4]
}
 800ed2a:	bf00      	nop
 800ed2c:	3714      	adds	r7, #20
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr

0800ed36 <LL_GPIO_SetPinSpeed>:
{
 800ed36:	b480      	push	{r7}
 800ed38:	b089      	sub	sp, #36	; 0x24
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	60f8      	str	r0, [r7, #12]
 800ed3e:	60b9      	str	r1, [r7, #8]
 800ed40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	689a      	ldr	r2, [r3, #8]
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	fa93 f3a3 	rbit	r3, r3
 800ed50:	613b      	str	r3, [r7, #16]
  return result;
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	fab3 f383 	clz	r3, r3
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	2103      	movs	r1, #3
 800ed5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed62:	43db      	mvns	r3, r3
 800ed64:	401a      	ands	r2, r3
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	fa93 f3a3 	rbit	r3, r3
 800ed70:	61bb      	str	r3, [r7, #24]
  return result;
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	fab3 f383 	clz	r3, r3
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	005b      	lsls	r3, r3, #1
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed82:	431a      	orrs	r2, r3
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	609a      	str	r2, [r3, #8]
}
 800ed88:	bf00      	nop
 800ed8a:	3724      	adds	r7, #36	; 0x24
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <LL_GPIO_SetPinPull>:
{
 800ed94:	b480      	push	{r7}
 800ed96:	b089      	sub	sp, #36	; 0x24
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	68da      	ldr	r2, [r3, #12]
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	fa93 f3a3 	rbit	r3, r3
 800edae:	613b      	str	r3, [r7, #16]
  return result;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	fab3 f383 	clz	r3, r3
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	005b      	lsls	r3, r3, #1
 800edba:	2103      	movs	r1, #3
 800edbc:	fa01 f303 	lsl.w	r3, r1, r3
 800edc0:	43db      	mvns	r3, r3
 800edc2:	401a      	ands	r2, r3
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	fa93 f3a3 	rbit	r3, r3
 800edce:	61bb      	str	r3, [r7, #24]
  return result;
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	fab3 f383 	clz	r3, r3
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	fa01 f303 	lsl.w	r3, r1, r3
 800ede0:	431a      	orrs	r2, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	60da      	str	r2, [r3, #12]
}
 800ede6:	bf00      	nop
 800ede8:	3724      	adds	r7, #36	; 0x24
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr

0800edf2 <LL_GPIO_SetAFPin_0_7>:
{
 800edf2:	b480      	push	{r7}
 800edf4:	b089      	sub	sp, #36	; 0x24
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6a1a      	ldr	r2, [r3, #32]
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	fa93 f3a3 	rbit	r3, r3
 800ee0c:	613b      	str	r3, [r7, #16]
  return result;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	fab3 f383 	clz	r3, r3
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	210f      	movs	r1, #15
 800ee1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee1e:	43db      	mvns	r3, r3
 800ee20:	401a      	ands	r2, r3
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	fa93 f3a3 	rbit	r3, r3
 800ee2c:	61bb      	str	r3, [r7, #24]
  return result;
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	fab3 f383 	clz	r3, r3
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	6879      	ldr	r1, [r7, #4]
 800ee3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee3e:	431a      	orrs	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	621a      	str	r2, [r3, #32]
}
 800ee44:	bf00      	nop
 800ee46:	3724      	adds	r7, #36	; 0x24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <LL_GPIO_SetAFPin_8_15>:
{
 800ee50:	b480      	push	{r7}
 800ee52:	b089      	sub	sp, #36	; 0x24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	0a1b      	lsrs	r3, r3, #8
 800ee64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	fa93 f3a3 	rbit	r3, r3
 800ee6c:	613b      	str	r3, [r7, #16]
  return result;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	fab3 f383 	clz	r3, r3
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	210f      	movs	r1, #15
 800ee7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee7e:	43db      	mvns	r3, r3
 800ee80:	401a      	ands	r2, r3
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	0a1b      	lsrs	r3, r3, #8
 800ee86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	fa93 f3a3 	rbit	r3, r3
 800ee8e:	61bb      	str	r3, [r7, #24]
  return result;
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	fab3 f383 	clz	r3, r3
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	fa01 f303 	lsl.w	r3, r1, r3
 800eea0:	431a      	orrs	r2, r3
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800eea6:	bf00      	nop
 800eea8:	3724      	adds	r7, #36	; 0x24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr

0800eeb2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b086      	sub	sp, #24
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	fa93 f3a3 	rbit	r3, r3
 800eec8:	60bb      	str	r3, [r7, #8]
  return result;
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	fab3 f383 	clz	r3, r3
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800eed4:	e040      	b.n	800ef58 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	2101      	movs	r1, #1
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	fa01 f303 	lsl.w	r3, r1, r3
 800eee2:	4013      	ands	r3, r2
 800eee4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d032      	beq.n	800ef52 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	461a      	mov	r2, r3
 800eef2:	6939      	ldr	r1, [r7, #16]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fed7 	bl	800eca8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d003      	beq.n	800ef0a <LL_GPIO_Init+0x58>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	2b02      	cmp	r3, #2
 800ef08:	d106      	bne.n	800ef18 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6939      	ldr	r1, [r7, #16]
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7ff ff0f 	bl	800ed36 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	691b      	ldr	r3, [r3, #16]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	6939      	ldr	r1, [r7, #16]
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f7ff ff37 	bl	800ed94 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d111      	bne.n	800ef52 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	2bff      	cmp	r3, #255	; 0xff
 800ef32:	d807      	bhi.n	800ef44 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	695b      	ldr	r3, [r3, #20]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	6939      	ldr	r1, [r7, #16]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7ff ff58 	bl	800edf2 <LL_GPIO_SetAFPin_0_7>
 800ef42:	e006      	b.n	800ef52 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	695b      	ldr	r3, [r3, #20]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	6939      	ldr	r1, [r7, #16]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f7ff ff7f 	bl	800ee50 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	3301      	adds	r3, #1
 800ef56:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1b7      	bne.n	800eed6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d003      	beq.n	800ef76 <LL_GPIO_Init+0xc4>
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d107      	bne.n	800ef86 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	6819      	ldr	r1, [r3, #0]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7ff fec0 	bl	800ed06 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3718      	adds	r7, #24
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800ef90:	b590      	push	{r4, r7, lr}
 800ef92:	b085      	sub	sp, #20
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	4604      	mov	r4, r0
 800ef98:	4608      	mov	r0, r1
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	4623      	mov	r3, r4
 800efa0:	80fb      	strh	r3, [r7, #6]
 800efa2:	4603      	mov	r3, r0
 800efa4:	80bb      	strh	r3, [r7, #4]
 800efa6:	460b      	mov	r3, r1
 800efa8:	70fb      	strb	r3, [r7, #3]
 800efaa:	4613      	mov	r3, r2
 800efac:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800efae:	2300      	movs	r3, #0
 800efb0:	60fb      	str	r3, [r7, #12]
 800efb2:	e026      	b.n	800f002 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800efb4:	2300      	movs	r3, #0
 800efb6:	60bb      	str	r3, [r7, #8]
 800efb8:	e01c      	b.n	800eff4 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	88fb      	ldrh	r3, [r7, #6]
 800efc0:	4413      	add	r3, r2
 800efc2:	b298      	uxth	r0, r3
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efca:	4413      	add	r3, r2
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	88bb      	ldrh	r3, [r7, #4]
 800efda:	4413      	add	r3, r2
 800efdc:	b29a      	uxth	r2, r3
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	4413      	add	r3, r2
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	883a      	ldrh	r2, [r7, #0]
 800efe8:	4619      	mov	r1, r3
 800efea:	f000 fc1f 	bl	800f82c <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	3301      	adds	r3, #1
 800eff2:	60bb      	str	r3, [r7, #8]
 800eff4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	429a      	cmp	r2, r3
 800effa:	dbde      	blt.n	800efba <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	3301      	adds	r3, #1
 800f000:	60fb      	str	r3, [r7, #12]
 800f002:	78fb      	ldrb	r3, [r7, #3]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	429a      	cmp	r2, r3
 800f008:	dbd4      	blt.n	800efb4 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800f00a:	bf00      	nop
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd90      	pop	{r4, r7, pc}

0800f012 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800f012:	b590      	push	{r4, r7, lr}
 800f014:	b087      	sub	sp, #28
 800f016:	af02      	add	r7, sp, #8
 800f018:	4604      	mov	r4, r0
 800f01a:	4608      	mov	r0, r1
 800f01c:	4611      	mov	r1, r2
 800f01e:	461a      	mov	r2, r3
 800f020:	4623      	mov	r3, r4
 800f022:	80fb      	strh	r3, [r7, #6]
 800f024:	4603      	mov	r3, r0
 800f026:	80bb      	strh	r3, [r7, #4]
 800f028:	460b      	mov	r3, r1
 800f02a:	807b      	strh	r3, [r7, #2]
 800f02c:	4613      	mov	r3, r2
 800f02e:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800f030:	2300      	movs	r3, #0
 800f032:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800f034:	7bfa      	ldrb	r2, [r7, #15]
 800f036:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d939      	bls.n	800f0b2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800f03e:	88ba      	ldrh	r2, [r7, #4]
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	441a      	add	r2, r3
 800f044:	88b9      	ldrh	r1, [r7, #4]
 800f046:	883b      	ldrh	r3, [r7, #0]
 800f048:	4419      	add	r1, r3
 800f04a:	7bfb      	ldrb	r3, [r7, #15]
 800f04c:	1acb      	subs	r3, r1, r3
 800f04e:	429a      	cmp	r2, r3
 800f050:	f000 8089 	beq.w	800f166 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800f054:	88fa      	ldrh	r2, [r7, #6]
 800f056:	7bfb      	ldrb	r3, [r7, #15]
 800f058:	441a      	add	r2, r3
 800f05a:	88f9      	ldrh	r1, [r7, #6]
 800f05c:	887b      	ldrh	r3, [r7, #2]
 800f05e:	4419      	add	r1, r3
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	1acb      	subs	r3, r1, r3
 800f064:	429a      	cmp	r2, r3
 800f066:	d07e      	beq.n	800f166 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	88fb      	ldrh	r3, [r7, #6]
 800f06e:	4413      	add	r3, r2
 800f070:	b298      	uxth	r0, r3
 800f072:	7bfb      	ldrb	r3, [r7, #15]
 800f074:	b29a      	uxth	r2, r3
 800f076:	88bb      	ldrh	r3, [r7, #4]
 800f078:	4413      	add	r3, r2
 800f07a:	b299      	uxth	r1, r3
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	005b      	lsls	r3, r3, #1
 800f082:	b29b      	uxth	r3, r3
 800f084:	887a      	ldrh	r2, [r7, #2]
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	b29b      	uxth	r3, r3
 800f08a:	3301      	adds	r3, #1
 800f08c:	b29c      	uxth	r4, r3
 800f08e:	7bfb      	ldrb	r3, [r7, #15]
 800f090:	b29b      	uxth	r3, r3
 800f092:	005b      	lsls	r3, r3, #1
 800f094:	b29b      	uxth	r3, r3
 800f096:	883a      	ldrh	r2, [r7, #0]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	3301      	adds	r3, #1
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	9301      	str	r3, [sp, #4]
 800f0a4:	8c3b      	ldrh	r3, [r7, #32]
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	4613      	mov	r3, r2
 800f0aa:	4622      	mov	r2, r4
 800f0ac:	f000 fd18 	bl	800fae0 <ILI9341_Draw_Rectangle>
				goto finish;
 800f0b0:	e05a      	b.n	800f168 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	88fb      	ldrh	r3, [r7, #6]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	b298      	uxth	r0, r3
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	88bb      	ldrh	r3, [r7, #4]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800f0c6:	7bfb      	ldrb	r3, [r7, #15]
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	887a      	ldrh	r2, [r7, #2]
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f0d6:	f000 fa6b 	bl	800f5b0 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	88fb      	ldrh	r3, [r7, #6]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	b298      	uxth	r0, r3
										(y + h) - b,
 800f0e4:	88ba      	ldrh	r2, [r7, #4]
 800f0e6:	883b      	ldrh	r3, [r7, #0]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	b299      	uxth	r1, r3
										(w - b)+1,
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	887a      	ldrh	r2, [r7, #2]
 800f0fa:	1ad3      	subs	r3, r2, r3
 800f0fc:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f0fe:	3301      	adds	r3, #1
 800f100:	b29a      	uxth	r2, r3
 800f102:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f104:	f000 fa54 	bl	800f5b0 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800f108:	7bfb      	ldrb	r3, [r7, #15]
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	88fb      	ldrh	r3, [r7, #6]
 800f10e:	4413      	add	r3, r2
 800f110:	b298      	uxth	r0, r3
 800f112:	7bfb      	ldrb	r3, [r7, #15]
 800f114:	b29a      	uxth	r2, r3
 800f116:	88bb      	ldrh	r3, [r7, #4]
 800f118:	4413      	add	r3, r2
 800f11a:	b299      	uxth	r1, r3
 800f11c:	7bfb      	ldrb	r3, [r7, #15]
 800f11e:	b29b      	uxth	r3, r3
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	b29b      	uxth	r3, r3
 800f124:	883a      	ldrh	r2, [r7, #0]
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	b29a      	uxth	r2, r3
 800f12a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f12c:	f000 faa4 	bl	800f678 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800f130:	88fa      	ldrh	r2, [r7, #6]
 800f132:	887b      	ldrh	r3, [r7, #2]
 800f134:	4413      	add	r3, r2
 800f136:	b29a      	uxth	r2, r3
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	b298      	uxth	r0, r3
 800f140:	7bfb      	ldrb	r3, [r7, #15]
 800f142:	b29a      	uxth	r2, r3
 800f144:	88bb      	ldrh	r3, [r7, #4]
 800f146:	4413      	add	r3, r2
 800f148:	b299      	uxth	r1, r3
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	b29b      	uxth	r3, r3
 800f152:	883a      	ldrh	r2, [r7, #0]
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	b29a      	uxth	r2, r3
 800f158:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f15a:	f000 fa8d 	bl	800f678 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	3301      	adds	r3, #1
 800f162:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800f164:	e766      	b.n	800f034 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800f166:	bf00      	nop
	// done
	return;
 800f168:	bf00      	nop
}
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd90      	pop	{r4, r7, pc}

0800f170 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f170:	b590      	push	{r4, r7, lr}
 800f172:	b089      	sub	sp, #36	; 0x24
 800f174:	af02      	add	r7, sp, #8
 800f176:	4604      	mov	r4, r0
 800f178:	4608      	mov	r0, r1
 800f17a:	4611      	mov	r1, r2
 800f17c:	461a      	mov	r2, r3
 800f17e:	4623      	mov	r3, r4
 800f180:	71fb      	strb	r3, [r7, #7]
 800f182:	4603      	mov	r3, r0
 800f184:	80bb      	strh	r3, [r7, #4]
 800f186:	460b      	mov	r3, r1
 800f188:	807b      	strh	r3, [r7, #2]
 800f18a:	4613      	mov	r3, r2
 800f18c:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800f18e:	79fb      	ldrb	r3, [r7, #7]
 800f190:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800f192:	7dfb      	ldrb	r3, [r7, #23]
 800f194:	2b1f      	cmp	r3, #31
 800f196:	d802      	bhi.n	800f19e <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800f198:	2300      	movs	r3, #0
 800f19a:	71fb      	strb	r3, [r7, #7]
 800f19c:	e002      	b.n	800f1a4 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800f19e:	7dfb      	ldrb	r3, [r7, #23]
 800f1a0:	3b20      	subs	r3, #32
 800f1a2:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	753b      	strb	r3, [r7, #20]
 800f1a8:	e012      	b.n	800f1d0 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800f1aa:	7dfa      	ldrb	r2, [r7, #23]
 800f1ac:	7d38      	ldrb	r0, [r7, #20]
 800f1ae:	7d39      	ldrb	r1, [r7, #20]
 800f1b0:	4c48      	ldr	r4, [pc, #288]	; (800f2d4 <ILI9341_Draw_Char+0x164>)
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	005b      	lsls	r3, r3, #1
 800f1b6:	4413      	add	r3, r2
 800f1b8:	005b      	lsls	r3, r3, #1
 800f1ba:	4423      	add	r3, r4
 800f1bc:	4403      	add	r3, r0
 800f1be:	781a      	ldrb	r2, [r3, #0]
 800f1c0:	f107 0318 	add.w	r3, r7, #24
 800f1c4:	440b      	add	r3, r1
 800f1c6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f1ca:	7d3b      	ldrb	r3, [r7, #20]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	753b      	strb	r3, [r7, #20]
 800f1d0:	7d3b      	ldrb	r3, [r7, #20]
 800f1d2:	2b05      	cmp	r3, #5
 800f1d4:	d9e9      	bls.n	800f1aa <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	757b      	strb	r3, [r7, #21]
 800f1da:	e074      	b.n	800f2c6 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	75bb      	strb	r3, [r7, #22]
 800f1e0:	e06b      	b.n	800f2ba <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800f1e2:	7d7b      	ldrb	r3, [r7, #21]
 800f1e4:	f107 0218 	add.w	r2, r7, #24
 800f1e8:	4413      	add	r3, r2
 800f1ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	7dbb      	ldrb	r3, [r7, #22]
 800f1f2:	fa42 f303 	asr.w	r3, r2, r3
 800f1f6:	f003 0301 	and.w	r3, r3, #1
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d02d      	beq.n	800f25a <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800f1fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f200:	2b01      	cmp	r3, #1
 800f202:	d10e      	bne.n	800f222 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800f204:	7d7b      	ldrb	r3, [r7, #21]
 800f206:	b29a      	uxth	r2, r3
 800f208:	88bb      	ldrh	r3, [r7, #4]
 800f20a:	4413      	add	r3, r2
 800f20c:	b298      	uxth	r0, r3
 800f20e:	7dbb      	ldrb	r3, [r7, #22]
 800f210:	b29a      	uxth	r2, r3
 800f212:	887b      	ldrh	r3, [r7, #2]
 800f214:	4413      	add	r3, r2
 800f216:	b29b      	uxth	r3, r3
 800f218:	883a      	ldrh	r2, [r7, #0]
 800f21a:	4619      	mov	r1, r3
 800f21c:	f000 fb06 	bl	800f82c <ILI9341_Draw_Pixel>
 800f220:	e048      	b.n	800f2b4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800f222:	7d7b      	ldrb	r3, [r7, #21]
 800f224:	b29b      	uxth	r3, r3
 800f226:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f228:	fb12 f303 	smulbb	r3, r2, r3
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	88bb      	ldrh	r3, [r7, #4]
 800f230:	4413      	add	r3, r2
 800f232:	b298      	uxth	r0, r3
 800f234:	7dbb      	ldrb	r3, [r7, #22]
 800f236:	b29b      	uxth	r3, r3
 800f238:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f23a:	fb12 f303 	smulbb	r3, r2, r3
 800f23e:	b29a      	uxth	r2, r3
 800f240:	887b      	ldrh	r3, [r7, #2]
 800f242:	4413      	add	r3, r2
 800f244:	b299      	uxth	r1, r3
 800f246:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f248:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f24a:	2301      	movs	r3, #1
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	883b      	ldrh	r3, [r7, #0]
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	4623      	mov	r3, r4
 800f254:	f000 fc44 	bl	800fae0 <ILI9341_Draw_Rectangle>
 800f258:	e02c      	b.n	800f2b4 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800f25a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d10e      	bne.n	800f27e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800f260:	7d7b      	ldrb	r3, [r7, #21]
 800f262:	b29a      	uxth	r2, r3
 800f264:	88bb      	ldrh	r3, [r7, #4]
 800f266:	4413      	add	r3, r2
 800f268:	b298      	uxth	r0, r3
 800f26a:	7dbb      	ldrb	r3, [r7, #22]
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	887b      	ldrh	r3, [r7, #2]
 800f270:	4413      	add	r3, r2
 800f272:	b29b      	uxth	r3, r3
 800f274:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f276:	4619      	mov	r1, r3
 800f278:	f000 fad8 	bl	800f82c <ILI9341_Draw_Pixel>
 800f27c:	e01a      	b.n	800f2b4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800f27e:	7d7b      	ldrb	r3, [r7, #21]
 800f280:	b29b      	uxth	r3, r3
 800f282:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f284:	fb12 f303 	smulbb	r3, r2, r3
 800f288:	b29a      	uxth	r2, r3
 800f28a:	88bb      	ldrh	r3, [r7, #4]
 800f28c:	4413      	add	r3, r2
 800f28e:	b298      	uxth	r0, r3
 800f290:	7dbb      	ldrb	r3, [r7, #22]
 800f292:	b29b      	uxth	r3, r3
 800f294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f296:	fb12 f303 	smulbb	r3, r2, r3
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	887b      	ldrh	r3, [r7, #2]
 800f29e:	4413      	add	r3, r2
 800f2a0:	b299      	uxth	r1, r3
 800f2a2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f2a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f2ac:	9300      	str	r3, [sp, #0]
 800f2ae:	4623      	mov	r3, r4
 800f2b0:	f000 fc16 	bl	800fae0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800f2b4:	7dbb      	ldrb	r3, [r7, #22]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	75bb      	strb	r3, [r7, #22]
 800f2ba:	7dbb      	ldrb	r3, [r7, #22]
 800f2bc:	2b07      	cmp	r3, #7
 800f2be:	d990      	bls.n	800f1e2 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800f2c0:	7d7b      	ldrb	r3, [r7, #21]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	757b      	strb	r3, [r7, #21]
 800f2c6:	7d7b      	ldrb	r3, [r7, #21]
 800f2c8:	2b05      	cmp	r3, #5
 800f2ca:	d987      	bls.n	800f1dc <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800f2cc:	bf00      	nop
 800f2ce:	371c      	adds	r7, #28
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd90      	pop	{r4, r7, pc}
 800f2d4:	08015040 	.word	0x08015040

0800f2d8 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f2d8:	b590      	push	{r4, r7, lr}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af02      	add	r7, sp, #8
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	4608      	mov	r0, r1
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	817b      	strh	r3, [r7, #10]
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	813b      	strh	r3, [r7, #8]
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800f2f2:	897b      	ldrh	r3, [r7, #10]
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	b298      	uxth	r0, r3
 800f2f8:	8c3b      	ldrh	r3, [r7, #32]
 800f2fa:	00db      	lsls	r3, r3, #3
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f300:	8939      	ldrh	r1, [r7, #8]
 800f302:	f000 f9b9 	bl	800f678 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800f306:	897b      	ldrh	r3, [r7, #10]
 800f308:	3b02      	subs	r3, #2
 800f30a:	b298      	uxth	r0, r3
 800f30c:	8c3b      	ldrh	r3, [r7, #32]
 800f30e:	00db      	lsls	r3, r3, #3
 800f310:	b29a      	uxth	r2, r3
 800f312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f314:	8939      	ldrh	r1, [r7, #8]
 800f316:	f000 f9af 	bl	800f678 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800f31a:	e016      	b.n	800f34a <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	1c5a      	adds	r2, r3, #1
 800f320:	60fa      	str	r2, [r7, #12]
 800f322:	7818      	ldrb	r0, [r3, #0]
 800f324:	88fc      	ldrh	r4, [r7, #6]
 800f326:	893a      	ldrh	r2, [r7, #8]
 800f328:	8979      	ldrh	r1, [r7, #10]
 800f32a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f32c:	9301      	str	r3, [sp, #4]
 800f32e:	8c3b      	ldrh	r3, [r7, #32]
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	4623      	mov	r3, r4
 800f334:	f7ff ff1c 	bl	800f170 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800f338:	8c3b      	ldrh	r3, [r7, #32]
 800f33a:	461a      	mov	r2, r3
 800f33c:	0052      	lsls	r2, r2, #1
 800f33e:	4413      	add	r3, r2
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	b29a      	uxth	r2, r3
 800f344:	897b      	ldrh	r3, [r7, #10]
 800f346:	4413      	add	r3, r2
 800f348:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1e4      	bne.n	800f31c <ILI9341_Draw_Text+0x44>
    }


}
 800f352:	bf00      	nop
 800f354:	3714      	adds	r7, #20
 800f356:	46bd      	mov	sp, r7
 800f358:	bd90      	pop	{r4, r7, pc}

0800f35a <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800f35a:	b580      	push	{r7, lr}
 800f35c:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800f35e:	f000 fca3 	bl	800fca8 <_LCD_Enable>
	ILI9341_SPI_Init();
 800f362:	f000 f907 	bl	800f574 <ILI9341_SPI_Init>
	_LCD_Reset();
 800f366:	f000 fcaf 	bl	800fcc8 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800f36a:	2001      	movs	r0, #1
 800f36c:	f000 fd7a 	bl	800fe64 <_LCD_SendCommand>
	HAL_Delay(2000);
 800f370:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f374:	f7f9 f9cc 	bl	8008710 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800f378:	20cb      	movs	r0, #203	; 0xcb
 800f37a:	f000 fd73 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800f37e:	2039      	movs	r0, #57	; 0x39
 800f380:	f000 fda2 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800f384:	202c      	movs	r0, #44	; 0x2c
 800f386:	f000 fd9f 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f38a:	2000      	movs	r0, #0
 800f38c:	f000 fd9c 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x34);
 800f390:	2034      	movs	r0, #52	; 0x34
 800f392:	f000 fd99 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x02);
 800f396:	2002      	movs	r0, #2
 800f398:	f000 fd96 	bl	800fec8 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800f39c:	20cf      	movs	r0, #207	; 0xcf
 800f39e:	f000 fd61 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	f000 fd90 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f3a8:	20c1      	movs	r0, #193	; 0xc1
 800f3aa:	f000 fd8d 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x30);
 800f3ae:	2030      	movs	r0, #48	; 0x30
 800f3b0:	f000 fd8a 	bl	800fec8 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800f3b4:	20e8      	movs	r0, #232	; 0xe8
 800f3b6:	f000 fd55 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800f3ba:	2085      	movs	r0, #133	; 0x85
 800f3bc:	f000 fd84 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	f000 fd81 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x78);
 800f3c6:	2078      	movs	r0, #120	; 0x78
 800f3c8:	f000 fd7e 	bl	800fec8 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800f3cc:	20ea      	movs	r0, #234	; 0xea
 800f3ce:	f000 fd49 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f3d2:	2000      	movs	r0, #0
 800f3d4:	f000 fd78 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f3d8:	2000      	movs	r0, #0
 800f3da:	f000 fd75 	bl	800fec8 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800f3de:	20ed      	movs	r0, #237	; 0xed
 800f3e0:	f000 fd40 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800f3e4:	2064      	movs	r0, #100	; 0x64
 800f3e6:	f000 fd6f 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f3ea:	2003      	movs	r0, #3
 800f3ec:	f000 fd6c 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x12);
 800f3f0:	2012      	movs	r0, #18
 800f3f2:	f000 fd69 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x81);
 800f3f6:	2081      	movs	r0, #129	; 0x81
 800f3f8:	f000 fd66 	bl	800fec8 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800f3fc:	20f7      	movs	r0, #247	; 0xf7
 800f3fe:	f000 fd31 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800f402:	2020      	movs	r0, #32
 800f404:	f000 fd60 	bl	800fec8 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800f408:	20c0      	movs	r0, #192	; 0xc0
 800f40a:	f000 fd2b 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800f40e:	2023      	movs	r0, #35	; 0x23
 800f410:	f000 fd5a 	bl	800fec8 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800f414:	20c1      	movs	r0, #193	; 0xc1
 800f416:	f000 fd25 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800f41a:	2010      	movs	r0, #16
 800f41c:	f000 fd54 	bl	800fec8 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800f420:	20c5      	movs	r0, #197	; 0xc5
 800f422:	f000 fd1f 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800f426:	203e      	movs	r0, #62	; 0x3e
 800f428:	f000 fd4e 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x28);
 800f42c:	2028      	movs	r0, #40	; 0x28
 800f42e:	f000 fd4b 	bl	800fec8 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800f432:	20c7      	movs	r0, #199	; 0xc7
 800f434:	f000 fd16 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800f438:	2086      	movs	r0, #134	; 0x86
 800f43a:	f000 fd45 	bl	800fec8 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800f43e:	2036      	movs	r0, #54	; 0x36
 800f440:	f000 fd10 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800f444:	2048      	movs	r0, #72	; 0x48
 800f446:	f000 fd3f 	bl	800fec8 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800f44a:	203a      	movs	r0, #58	; 0x3a
 800f44c:	f000 fd0a 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800f450:	2055      	movs	r0, #85	; 0x55
 800f452:	f000 fd39 	bl	800fec8 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800f456:	20b1      	movs	r0, #177	; 0xb1
 800f458:	f000 fd04 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f45c:	2000      	movs	r0, #0
 800f45e:	f000 fd33 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x18);
 800f462:	2018      	movs	r0, #24
 800f464:	f000 fd30 	bl	800fec8 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800f468:	20b6      	movs	r0, #182	; 0xb6
 800f46a:	f000 fcfb 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800f46e:	2008      	movs	r0, #8
 800f470:	f000 fd2a 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x82);
 800f474:	2082      	movs	r0, #130	; 0x82
 800f476:	f000 fd27 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x27);
 800f47a:	2027      	movs	r0, #39	; 0x27
 800f47c:	f000 fd24 	bl	800fec8 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800f480:	20f2      	movs	r0, #242	; 0xf2
 800f482:	f000 fcef 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f486:	2000      	movs	r0, #0
 800f488:	f000 fd1e 	bl	800fec8 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800f48c:	2026      	movs	r0, #38	; 0x26
 800f48e:	f000 fce9 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800f492:	2001      	movs	r0, #1
 800f494:	f000 fd18 	bl	800fec8 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800f498:	20e0      	movs	r0, #224	; 0xe0
 800f49a:	f000 fce3 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800f49e:	200f      	movs	r0, #15
 800f4a0:	f000 fd12 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f4a4:	2031      	movs	r0, #49	; 0x31
 800f4a6:	f000 fd0f 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800f4aa:	202b      	movs	r0, #43	; 0x2b
 800f4ac:	f000 fd0c 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f4b0:	200c      	movs	r0, #12
 800f4b2:	f000 fd09 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f4b6:	200e      	movs	r0, #14
 800f4b8:	f000 fd06 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800f4bc:	2008      	movs	r0, #8
 800f4be:	f000 fd03 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800f4c2:	204e      	movs	r0, #78	; 0x4e
 800f4c4:	f000 fd00 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800f4c8:	20f1      	movs	r0, #241	; 0xf1
 800f4ca:	f000 fcfd 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x37);
 800f4ce:	2037      	movs	r0, #55	; 0x37
 800f4d0:	f000 fcfa 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x07);
 800f4d4:	2007      	movs	r0, #7
 800f4d6:	f000 fcf7 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x10);
 800f4da:	2010      	movs	r0, #16
 800f4dc:	f000 fcf4 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f4e0:	2003      	movs	r0, #3
 800f4e2:	f000 fcf1 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f4e6:	200e      	movs	r0, #14
 800f4e8:	f000 fcee 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x09);
 800f4ec:	2009      	movs	r0, #9
 800f4ee:	f000 fceb 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x00);
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	f000 fce8 	bl	800fec8 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800f4f8:	20e1      	movs	r0, #225	; 0xe1
 800f4fa:	f000 fcb3 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f4fe:	2000      	movs	r0, #0
 800f500:	f000 fce2 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f504:	200e      	movs	r0, #14
 800f506:	f000 fcdf 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x14);
 800f50a:	2014      	movs	r0, #20
 800f50c:	f000 fcdc 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x03);
 800f510:	2003      	movs	r0, #3
 800f512:	f000 fcd9 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x11);
 800f516:	2011      	movs	r0, #17
 800f518:	f000 fcd6 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x07);
 800f51c:	2007      	movs	r0, #7
 800f51e:	f000 fcd3 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f522:	2031      	movs	r0, #49	; 0x31
 800f524:	f000 fcd0 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f528:	20c1      	movs	r0, #193	; 0xc1
 800f52a:	f000 fccd 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x48);
 800f52e:	2048      	movs	r0, #72	; 0x48
 800f530:	f000 fcca 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x08);
 800f534:	2008      	movs	r0, #8
 800f536:	f000 fcc7 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f53a:	200f      	movs	r0, #15
 800f53c:	f000 fcc4 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f540:	200c      	movs	r0, #12
 800f542:	f000 fcc1 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x31);
 800f546:	2031      	movs	r0, #49	; 0x31
 800f548:	f000 fcbe 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x36);
 800f54c:	2036      	movs	r0, #54	; 0x36
 800f54e:	f000 fcbb 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800f552:	200f      	movs	r0, #15
 800f554:	f000 fcb8 	bl	800fec8 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800f558:	2011      	movs	r0, #17
 800f55a:	f000 fc83 	bl	800fe64 <_LCD_SendCommand>
	HAL_Delay(240);
 800f55e:	20f0      	movs	r0, #240	; 0xf0
 800f560:	f7f9 f8d6 	bl	8008710 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800f564:	2029      	movs	r0, #41	; 0x29
 800f566:	f000 fc7d 	bl	800fe64 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800f56a:	2000      	movs	r0, #0
 800f56c:	f000 fb4e 	bl	800fc0c <ILI9341_Set_Rotation>
}
 800f570:	bf00      	nop
 800f572:	bd80      	pop	{r7, pc}

0800f574 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800f574:	b480      	push	{r7}
 800f576:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f578:	4b0b      	ldr	r3, [pc, #44]	; (800f5a8 <ILI9341_SPI_Init+0x34>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f580:	2b40      	cmp	r3, #64	; 0x40
 800f582:	d005      	beq.n	800f590 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800f584:	4b08      	ldr	r3, [pc, #32]	; (800f5a8 <ILI9341_SPI_Init+0x34>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a07      	ldr	r2, [pc, #28]	; (800f5a8 <ILI9341_SPI_Init+0x34>)
 800f58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f58e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f590:	4b06      	ldr	r3, [pc, #24]	; (800f5ac <ILI9341_SPI_Init+0x38>)
 800f592:	695b      	ldr	r3, [r3, #20]
 800f594:	4a05      	ldr	r2, [pc, #20]	; (800f5ac <ILI9341_SPI_Init+0x38>)
 800f596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f59a:	6153      	str	r3, [r2, #20]
}
 800f59c:	bf00      	nop
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	40003c00 	.word	0x40003c00
 800f5ac:	48000400 	.word	0x48000400

0800f5b0 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800f5b0:	b590      	push	{r4, r7, lr}
 800f5b2:	b087      	sub	sp, #28
 800f5b4:	af02      	add	r7, sp, #8
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	4608      	mov	r0, r1
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	461a      	mov	r2, r3
 800f5be:	4623      	mov	r3, r4
 800f5c0:	80fb      	strh	r3, [r7, #6]
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	80bb      	strh	r3, [r7, #4]
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	807b      	strh	r3, [r7, #2]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800f5ce:	4b28      	ldr	r3, [pc, #160]	; (800f670 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f5d0:	881b      	ldrh	r3, [r3, #0]
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	88fa      	ldrh	r2, [r7, #6]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d246      	bcs.n	800f668 <ILI9341_Draw_Horizontal_Line+0xb8>
 800f5da:	4b26      	ldr	r3, [pc, #152]	; (800f674 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	88ba      	ldrh	r2, [r7, #4]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d240      	bcs.n	800f668 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800f5e6:	88fa      	ldrh	r2, [r7, #6]
 800f5e8:	887b      	ldrh	r3, [r7, #2]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	4a20      	ldr	r2, [pc, #128]	; (800f670 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f5f0:	8812      	ldrh	r2, [r2, #0]
 800f5f2:	b292      	uxth	r2, r2
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	db05      	blt.n	800f604 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800f5f8:	4b1d      	ldr	r3, [pc, #116]	; (800f670 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	88fb      	ldrh	r3, [r7, #6]
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800f604:	88fa      	ldrh	r2, [r7, #6]
 800f606:	887b      	ldrh	r3, [r7, #2]
 800f608:	4413      	add	r3, r2
 800f60a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800f60c:	3b01      	subs	r3, #1
 800f60e:	b29a      	uxth	r2, r3
 800f610:	88bb      	ldrh	r3, [r7, #4]
 800f612:	88b9      	ldrh	r1, [r7, #4]
 800f614:	88f8      	ldrh	r0, [r7, #6]
 800f616:	f000 f893 	bl	800f740 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800f61e:	887b      	ldrh	r3, [r7, #2]
 800f620:	f003 0301 	and.w	r3, r3, #1
 800f624:	2b00      	cmp	r3, #0
 800f626:	d009      	beq.n	800f63c <ILI9341_Draw_Horizontal_Line+0x8c>
 800f628:	887b      	ldrh	r3, [r7, #2]
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d906      	bls.n	800f63c <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800f62e:	2301      	movs	r3, #1
 800f630:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800f632:	887b      	ldrh	r3, [r7, #2]
 800f634:	085b      	lsrs	r3, r3, #1
 800f636:	b29b      	uxth	r3, r3
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800f63c:	887c      	ldrh	r4, [r7, #2]
 800f63e:	883a      	ldrh	r2, [r7, #0]
 800f640:	88b9      	ldrh	r1, [r7, #4]
 800f642:	88f8      	ldrh	r0, [r7, #6]
 800f644:	2303      	movs	r3, #3
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	4623      	mov	r3, r4
 800f64a:	f000 fb5b 	bl	800fd04 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800f64e:	7bfb      	ldrb	r3, [r7, #15]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00a      	beq.n	800f66a <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800f654:	88fa      	ldrh	r2, [r7, #6]
 800f656:	887b      	ldrh	r3, [r7, #2]
 800f658:	4413      	add	r3, r2
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	883a      	ldrh	r2, [r7, #0]
 800f65e:	88b9      	ldrh	r1, [r7, #4]
 800f660:	4618      	mov	r0, r3
 800f662:	f000 f8e3 	bl	800f82c <ILI9341_Draw_Pixel>
 800f666:	e000      	b.n	800f66a <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800f668:	bf00      	nop
							(ypos),
							colour);
	}


}
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd90      	pop	{r4, r7, pc}
 800f670:	20000c42 	.word	0x20000c42
 800f674:	20000c40 	.word	0x20000c40

0800f678 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800f678:	b590      	push	{r4, r7, lr}
 800f67a:	b087      	sub	sp, #28
 800f67c:	af02      	add	r7, sp, #8
 800f67e:	4604      	mov	r4, r0
 800f680:	4608      	mov	r0, r1
 800f682:	4611      	mov	r1, r2
 800f684:	461a      	mov	r2, r3
 800f686:	4623      	mov	r3, r4
 800f688:	80fb      	strh	r3, [r7, #6]
 800f68a:	4603      	mov	r3, r0
 800f68c:	80bb      	strh	r3, [r7, #4]
 800f68e:	460b      	mov	r3, r1
 800f690:	807b      	strh	r3, [r7, #2]
 800f692:	4613      	mov	r3, r2
 800f694:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800f696:	4b28      	ldr	r3, [pc, #160]	; (800f738 <ILI9341_Draw_Vertical_Line+0xc0>)
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	88fa      	ldrh	r2, [r7, #6]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d246      	bcs.n	800f730 <ILI9341_Draw_Vertical_Line+0xb8>
 800f6a2:	4b26      	ldr	r3, [pc, #152]	; (800f73c <ILI9341_Draw_Vertical_Line+0xc4>)
 800f6a4:	881b      	ldrh	r3, [r3, #0]
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	88ba      	ldrh	r2, [r7, #4]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d240      	bcs.n	800f730 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800f6ae:	88ba      	ldrh	r2, [r7, #4]
 800f6b0:	887b      	ldrh	r3, [r7, #2]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	4a21      	ldr	r2, [pc, #132]	; (800f73c <ILI9341_Draw_Vertical_Line+0xc4>)
 800f6b8:	8812      	ldrh	r2, [r2, #0]
 800f6ba:	b292      	uxth	r2, r2
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	db05      	blt.n	800f6cc <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800f6c0:	4b1e      	ldr	r3, [pc, #120]	; (800f73c <ILI9341_Draw_Vertical_Line+0xc4>)
 800f6c2:	881b      	ldrh	r3, [r3, #0]
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	88bb      	ldrh	r3, [r7, #4]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800f6cc:	88ba      	ldrh	r2, [r7, #4]
 800f6ce:	887b      	ldrh	r3, [r7, #2]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	88fa      	ldrh	r2, [r7, #6]
 800f6da:	88b9      	ldrh	r1, [r7, #4]
 800f6dc:	88f8      	ldrh	r0, [r7, #6]
 800f6de:	f000 f82f 	bl	800f740 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800f6e6:	887b      	ldrh	r3, [r7, #2]
 800f6e8:	f003 0301 	and.w	r3, r3, #1
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d009      	beq.n	800f704 <ILI9341_Draw_Vertical_Line+0x8c>
 800f6f0:	887b      	ldrh	r3, [r7, #2]
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	d906      	bls.n	800f704 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800f6fa:	887b      	ldrh	r3, [r7, #2]
 800f6fc:	085b      	lsrs	r3, r3, #1
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800f704:	7bfb      	ldrb	r3, [r7, #15]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d008      	beq.n	800f71c <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800f70a:	88ba      	ldrh	r2, [r7, #4]
 800f70c:	887b      	ldrh	r3, [r7, #2]
 800f70e:	4413      	add	r3, r2
 800f710:	b299      	uxth	r1, r3
 800f712:	883a      	ldrh	r2, [r7, #0]
 800f714:	88fb      	ldrh	r3, [r7, #6]
 800f716:	4618      	mov	r0, r3
 800f718:	f000 f888 	bl	800f82c <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800f71c:	887c      	ldrh	r4, [r7, #2]
 800f71e:	883a      	ldrh	r2, [r7, #0]
 800f720:	88b9      	ldrh	r1, [r7, #4]
 800f722:	88f8      	ldrh	r0, [r7, #6]
 800f724:	2303      	movs	r3, #3
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	4623      	mov	r3, r4
 800f72a:	f000 faeb 	bl	800fd04 <_LCD_Write_Frame>
 800f72e:	e000      	b.n	800f732 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800f730:	bf00      	nop
}
 800f732:	3714      	adds	r7, #20
 800f734:	46bd      	mov	sp, r7
 800f736:	bd90      	pop	{r4, r7, pc}
 800f738:	20000c42 	.word	0x20000c42
 800f73c:	20000c40 	.word	0x20000c40

0800f740 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800f740:	b590      	push	{r4, r7, lr}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	4604      	mov	r4, r0
 800f748:	4608      	mov	r0, r1
 800f74a:	4611      	mov	r1, r2
 800f74c:	461a      	mov	r2, r3
 800f74e:	4623      	mov	r3, r4
 800f750:	80fb      	strh	r3, [r7, #6]
 800f752:	4603      	mov	r3, r0
 800f754:	80bb      	strh	r3, [r7, #4]
 800f756:	460b      	mov	r3, r1
 800f758:	807b      	strh	r3, [r7, #2]
 800f75a:	4613      	mov	r3, r2
 800f75c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800f75e:	202a      	movs	r0, #42	; 0x2a
 800f760:	f000 fb80 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800f764:	88fb      	ldrh	r3, [r7, #6]
 800f766:	0a1b      	lsrs	r3, r3, #8
 800f768:	b29b      	uxth	r3, r3
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 fbab 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(sc);
 800f772:	88fb      	ldrh	r3, [r7, #6]
 800f774:	b2db      	uxtb	r3, r3
 800f776:	4618      	mov	r0, r3
 800f778:	f000 fba6 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800f77c:	887b      	ldrh	r3, [r7, #2]
 800f77e:	0a1b      	lsrs	r3, r3, #8
 800f780:	b29b      	uxth	r3, r3
 800f782:	b2db      	uxtb	r3, r3
 800f784:	4618      	mov	r0, r3
 800f786:	f000 fb9f 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(ec);
 800f78a:	887b      	ldrh	r3, [r7, #2]
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 fb9a 	bl	800fec8 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800f794:	202b      	movs	r0, #43	; 0x2b
 800f796:	f000 fb65 	bl	800fe64 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800f79a:	88bb      	ldrh	r3, [r7, #4]
 800f79c:	0a1b      	lsrs	r3, r3, #8
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f000 fb90 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(sp);
 800f7a8:	88bb      	ldrh	r3, [r7, #4]
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f000 fb8b 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800f7b2:	883b      	ldrh	r3, [r7, #0]
 800f7b4:	0a1b      	lsrs	r3, r3, #8
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 fb84 	bl	800fec8 <_LCD_SendData>
	_LCD_SendData(ep);
 800f7c0:	883b      	ldrh	r3, [r7, #0]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f000 fb7f 	bl	800fec8 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800f7ca:	202c      	movs	r0, #44	; 0x2c
 800f7cc:	f000 fb4a 	bl	800fe64 <_LCD_SendCommand>
}
 800f7d0:	bf00      	nop
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd90      	pop	{r4, r7, pc}

0800f7d8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af02      	add	r7, sp, #8
 800f7de:	4603      	mov	r3, r0
 800f7e0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800f7e2:	4b10      	ldr	r3, [pc, #64]	; (800f824 <ILI9341_Fill_Screen+0x4c>)
 800f7e4:	881b      	ldrh	r3, [r3, #0]
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	4b0f      	ldr	r3, [pc, #60]	; (800f828 <ILI9341_Fill_Screen+0x50>)
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	f7ff ffa5 	bl	800f740 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800f7f6:	4b0b      	ldr	r3, [pc, #44]	; (800f824 <ILI9341_Fill_Screen+0x4c>)
 800f7f8:	881b      	ldrh	r3, [r3, #0]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4b0a      	ldr	r3, [pc, #40]	; (800f828 <ILI9341_Fill_Screen+0x50>)
 800f800:	881b      	ldrh	r3, [r3, #0]
 800f802:	b29b      	uxth	r3, r3
 800f804:	fb03 f302 	mul.w	r3, r3, r2
 800f808:	4619      	mov	r1, r3
 800f80a:	88fa      	ldrh	r2, [r7, #6]
 800f80c:	2304      	movs	r3, #4
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	460b      	mov	r3, r1
 800f812:	2100      	movs	r1, #0
 800f814:	2000      	movs	r0, #0
 800f816:	f000 fa75 	bl	800fd04 <_LCD_Write_Frame>
}
 800f81a:	bf00      	nop
 800f81c:	3708      	adds	r7, #8
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	20000c42 	.word	0x20000c42
 800f828:	20000c40 	.word	0x20000c40

0800f82c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b08e      	sub	sp, #56	; 0x38
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	80fb      	strh	r3, [r7, #6]
 800f836:	460b      	mov	r3, r1
 800f838:	80bb      	strh	r3, [r7, #4]
 800f83a:	4613      	mov	r3, r2
 800f83c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800f83e:	4b98      	ldr	r3, [pc, #608]	; (800faa0 <ILI9341_Draw_Pixel+0x274>)
 800f840:	881b      	ldrh	r3, [r3, #0]
 800f842:	b29b      	uxth	r3, r3
 800f844:	88fa      	ldrh	r2, [r7, #6]
 800f846:	429a      	cmp	r2, r3
 800f848:	f080 8143 	bcs.w	800fad2 <ILI9341_Draw_Pixel+0x2a6>
 800f84c:	4b95      	ldr	r3, [pc, #596]	; (800faa4 <ILI9341_Draw_Pixel+0x278>)
 800f84e:	881b      	ldrh	r3, [r3, #0]
 800f850:	b29b      	uxth	r3, r3
 800f852:	88ba      	ldrh	r2, [r7, #4]
 800f854:	429a      	cmp	r2, r3
 800f856:	f080 813c 	bcs.w	800fad2 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f85a:	4b93      	ldr	r3, [pc, #588]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f85c:	695b      	ldr	r3, [r3, #20]
 800f85e:	4a92      	ldr	r2, [pc, #584]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f864:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f866:	4b90      	ldr	r3, [pc, #576]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f868:	695b      	ldr	r3, [r3, #20]
 800f86a:	4a8f      	ldr	r2, [pc, #572]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f86c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f870:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800f872:	220a      	movs	r2, #10
 800f874:	2100      	movs	r1, #0
 800f876:	202a      	movs	r0, #42	; 0x2a
 800f878:	f000 fb58 	bl	800ff2c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f87c:	2300      	movs	r3, #0
 800f87e:	637b      	str	r3, [r7, #52]	; 0x34
 800f880:	e008      	b.n	800f894 <ILI9341_Draw_Pixel+0x68>
 800f882:	4b89      	ldr	r3, [pc, #548]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f884:	695b      	ldr	r3, [r3, #20]
 800f886:	4a88      	ldr	r2, [pc, #544]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f88c:	6153      	str	r3, [r2, #20]
 800f88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f890:	3301      	adds	r3, #1
 800f892:	637b      	str	r3, [r7, #52]	; 0x34
 800f894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f896:	2b02      	cmp	r3, #2
 800f898:	ddf3      	ble.n	800f882 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f89a:	4b83      	ldr	r3, [pc, #524]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	4a82      	ldr	r2, [pc, #520]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f8a6:	4b80      	ldr	r3, [pc, #512]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f8a8:	695b      	ldr	r3, [r3, #20]
 800f8aa:	4a7f      	ldr	r2, [pc, #508]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f8ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8b0:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f8b2:	4b7d      	ldr	r3, [pc, #500]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f8b4:	695b      	ldr	r3, [r3, #20]
 800f8b6:	4a7c      	ldr	r2, [pc, #496]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f8b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8bc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800f8be:	88fb      	ldrh	r3, [r7, #6]
 800f8c0:	0a1b      	lsrs	r3, r3, #8
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	753b      	strb	r3, [r7, #20]
 800f8c8:	88fb      	ldrh	r3, [r7, #6]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	757b      	strb	r3, [r7, #21]
 800f8ce:	88fb      	ldrh	r3, [r7, #6]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	121b      	asrs	r3, r3, #8
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	75bb      	strb	r3, [r7, #22]
 800f8d8:	88fb      	ldrh	r3, [r7, #6]
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	3301      	adds	r3, #1
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800f8e2:	f107 0014 	add.w	r0, r7, #20
 800f8e6:	230a      	movs	r3, #10
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	2104      	movs	r1, #4
 800f8ec:	f000 fb50 	bl	800ff90 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8f4:	e008      	b.n	800f908 <ILI9341_Draw_Pixel+0xdc>
 800f8f6:	4b6c      	ldr	r3, [pc, #432]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f8f8:	695b      	ldr	r3, [r3, #20]
 800f8fa:	4a6b      	ldr	r2, [pc, #428]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f8fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f900:	6153      	str	r3, [r2, #20]
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	3301      	adds	r3, #1
 800f906:	633b      	str	r3, [r7, #48]	; 0x30
 800f908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	ddf3      	ble.n	800f8f6 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f90e:	4b66      	ldr	r3, [pc, #408]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f910:	695b      	ldr	r3, [r3, #20]
 800f912:	4a65      	ldr	r2, [pc, #404]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f918:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f91a:	4b63      	ldr	r3, [pc, #396]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f91c:	695b      	ldr	r3, [r3, #20]
 800f91e:	4a62      	ldr	r2, [pc, #392]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f924:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f926:	4b60      	ldr	r3, [pc, #384]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	4a5f      	ldr	r2, [pc, #380]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f92c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f930:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800f932:	220a      	movs	r2, #10
 800f934:	2100      	movs	r1, #0
 800f936:	202b      	movs	r0, #43	; 0x2b
 800f938:	f000 faf8 	bl	800ff2c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f93c:	2300      	movs	r3, #0
 800f93e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f940:	e008      	b.n	800f954 <ILI9341_Draw_Pixel+0x128>
 800f942:	4b59      	ldr	r3, [pc, #356]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	4a58      	ldr	r2, [pc, #352]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f94c:	6153      	str	r3, [r2, #20]
 800f94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f950:	3301      	adds	r3, #1
 800f952:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f956:	2b02      	cmp	r3, #2
 800f958:	ddf3      	ble.n	800f942 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f95a:	4b53      	ldr	r3, [pc, #332]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	4a52      	ldr	r2, [pc, #328]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f964:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f966:	4b50      	ldr	r3, [pc, #320]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f968:	695b      	ldr	r3, [r3, #20]
 800f96a:	4a4f      	ldr	r2, [pc, #316]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f96c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f970:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f972:	4b4d      	ldr	r3, [pc, #308]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f974:	695b      	ldr	r3, [r3, #20]
 800f976:	4a4c      	ldr	r2, [pc, #304]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f97c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800f97e:	88bb      	ldrh	r3, [r7, #4]
 800f980:	0a1b      	lsrs	r3, r3, #8
 800f982:	b29b      	uxth	r3, r3
 800f984:	b2db      	uxtb	r3, r3
 800f986:	743b      	strb	r3, [r7, #16]
 800f988:	88bb      	ldrh	r3, [r7, #4]
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	747b      	strb	r3, [r7, #17]
 800f98e:	88bb      	ldrh	r3, [r7, #4]
 800f990:	3301      	adds	r3, #1
 800f992:	121b      	asrs	r3, r3, #8
 800f994:	b2db      	uxtb	r3, r3
 800f996:	74bb      	strb	r3, [r7, #18]
 800f998:	88bb      	ldrh	r3, [r7, #4]
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	3301      	adds	r3, #1
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800f9a2:	f107 0010 	add.w	r0, r7, #16
 800f9a6:	230a      	movs	r3, #10
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2104      	movs	r1, #4
 800f9ac:	f000 faf0 	bl	800ff90 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9b4:	e008      	b.n	800f9c8 <ILI9341_Draw_Pixel+0x19c>
 800f9b6:	4b3c      	ldr	r3, [pc, #240]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	4a3b      	ldr	r2, [pc, #236]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9c0:	6153      	str	r3, [r2, #20]
 800f9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ca:	2b02      	cmp	r3, #2
 800f9cc:	ddf3      	ble.n	800f9b6 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f9ce:	4b36      	ldr	r3, [pc, #216]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9d0:	695b      	ldr	r3, [r3, #20]
 800f9d2:	4a35      	ldr	r2, [pc, #212]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9d8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f9da:	4b33      	ldr	r3, [pc, #204]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	4a32      	ldr	r2, [pc, #200]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9e4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f9e6:	4b30      	ldr	r3, [pc, #192]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9e8:	695b      	ldr	r3, [r3, #20]
 800f9ea:	4a2f      	ldr	r2, [pc, #188]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800f9ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9f0:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800f9f2:	220a      	movs	r2, #10
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	202c      	movs	r0, #44	; 0x2c
 800f9f8:	f000 fa98 	bl	800ff2c <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800fa00:	e008      	b.n	800fa14 <ILI9341_Draw_Pixel+0x1e8>
 800fa02:	4b29      	ldr	r3, [pc, #164]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	4a28      	ldr	r2, [pc, #160]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa0c:	6153      	str	r3, [r2, #20]
 800fa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa10:	3301      	adds	r3, #1
 800fa12:	627b      	str	r3, [r7, #36]	; 0x24
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	ddf3      	ble.n	800fa02 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fa1a:	4b23      	ldr	r3, [pc, #140]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	4a22      	ldr	r2, [pc, #136]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa24:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fa26:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa28:	695b      	ldr	r3, [r3, #20]
 800fa2a:	4a1f      	ldr	r2, [pc, #124]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa30:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fa32:	4b1d      	ldr	r3, [pc, #116]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	4a1c      	ldr	r2, [pc, #112]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa3c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800fa3e:	887b      	ldrh	r3, [r7, #2]
 800fa40:	0a1b      	lsrs	r3, r3, #8
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	733b      	strb	r3, [r7, #12]
 800fa48:	887b      	ldrh	r3, [r7, #2]
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800fa4e:	f107 000c 	add.w	r0, r7, #12
 800fa52:	2301      	movs	r3, #1
 800fa54:	2200      	movs	r2, #0
 800fa56:	2102      	movs	r1, #2
 800fa58:	f000 fa9a 	bl	800ff90 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	623b      	str	r3, [r7, #32]
 800fa60:	e008      	b.n	800fa74 <ILI9341_Draw_Pixel+0x248>
 800fa62:	4b11      	ldr	r3, [pc, #68]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa64:	695b      	ldr	r3, [r3, #20]
 800fa66:	4a10      	ldr	r2, [pc, #64]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa6c:	6153      	str	r3, [r2, #20]
 800fa6e:	6a3b      	ldr	r3, [r7, #32]
 800fa70:	3301      	adds	r3, #1
 800fa72:	623b      	str	r3, [r7, #32]
 800fa74:	6a3b      	ldr	r3, [r7, #32]
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	ddf3      	ble.n	800fa62 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	61fb      	str	r3, [r7, #28]
 800fa7e:	e008      	b.n	800fa92 <ILI9341_Draw_Pixel+0x266>
 800fa80:	4b09      	ldr	r3, [pc, #36]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa82:	695b      	ldr	r3, [r3, #20]
 800fa84:	4a08      	ldr	r2, [pc, #32]	; (800faa8 <ILI9341_Draw_Pixel+0x27c>)
 800fa86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa8a:	6153      	str	r3, [r2, #20]
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	61fb      	str	r3, [r7, #28]
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	ddf3      	ble.n	800fa80 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fa98:	2300      	movs	r3, #0
 800fa9a:	61bb      	str	r3, [r7, #24]
 800fa9c:	e00f      	b.n	800fabe <ILI9341_Draw_Pixel+0x292>
 800fa9e:	bf00      	nop
 800faa0:	20000c42 	.word	0x20000c42
 800faa4:	20000c40 	.word	0x20000c40
 800faa8:	48000400 	.word	0x48000400
 800faac:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <ILI9341_Draw_Pixel+0x2b0>)
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	4a0a      	ldr	r2, [pc, #40]	; (800fadc <ILI9341_Draw_Pixel+0x2b0>)
 800fab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fab6:	6153      	str	r3, [r2, #20]
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	3301      	adds	r3, #1
 800fabc:	61bb      	str	r3, [r7, #24]
 800fabe:	69bb      	ldr	r3, [r7, #24]
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	ddf3      	ble.n	800faac <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fac4:	4b05      	ldr	r3, [pc, #20]	; (800fadc <ILI9341_Draw_Pixel+0x2b0>)
 800fac6:	695b      	ldr	r3, [r3, #20]
 800fac8:	4a04      	ldr	r2, [pc, #16]	; (800fadc <ILI9341_Draw_Pixel+0x2b0>)
 800faca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800face:	6153      	str	r3, [r2, #20]
 800fad0:	e000      	b.n	800fad4 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800fad2:	bf00      	nop


}
 800fad4:	3738      	adds	r7, #56	; 0x38
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	48000400 	.word	0x48000400

0800fae0 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800fae0:	b590      	push	{r4, r7, lr}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af02      	add	r7, sp, #8
 800fae6:	4604      	mov	r4, r0
 800fae8:	4608      	mov	r0, r1
 800faea:	4611      	mov	r1, r2
 800faec:	461a      	mov	r2, r3
 800faee:	4623      	mov	r3, r4
 800faf0:	80fb      	strh	r3, [r7, #6]
 800faf2:	4603      	mov	r3, r0
 800faf4:	80bb      	strh	r3, [r7, #4]
 800faf6:	460b      	mov	r3, r1
 800faf8:	807b      	strh	r3, [r7, #2]
 800fafa:	4613      	mov	r3, r2
 800fafc:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fafe:	4b41      	ldr	r3, [pc, #260]	; (800fc04 <ILI9341_Draw_Rectangle+0x124>)
 800fb00:	881b      	ldrh	r3, [r3, #0]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	88fa      	ldrh	r2, [r7, #6]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d278      	bcs.n	800fbfc <ILI9341_Draw_Rectangle+0x11c>
 800fb0a:	4b3f      	ldr	r3, [pc, #252]	; (800fc08 <ILI9341_Draw_Rectangle+0x128>)
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	88ba      	ldrh	r2, [r7, #4]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d272      	bcs.n	800fbfc <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800fb16:	88fa      	ldrh	r2, [r7, #6]
 800fb18:	887b      	ldrh	r3, [r7, #2]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	4a39      	ldr	r2, [pc, #228]	; (800fc04 <ILI9341_Draw_Rectangle+0x124>)
 800fb20:	8812      	ldrh	r2, [r2, #0]
 800fb22:	b292      	uxth	r2, r2
 800fb24:	4293      	cmp	r3, r2
 800fb26:	db05      	blt.n	800fb34 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800fb28:	4b36      	ldr	r3, [pc, #216]	; (800fc04 <ILI9341_Draw_Rectangle+0x124>)
 800fb2a:	881b      	ldrh	r3, [r3, #0]
 800fb2c:	b29a      	uxth	r2, r3
 800fb2e:	88fb      	ldrh	r3, [r7, #6]
 800fb30:	1ad3      	subs	r3, r2, r3
 800fb32:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800fb34:	88ba      	ldrh	r2, [r7, #4]
 800fb36:	883b      	ldrh	r3, [r7, #0]
 800fb38:	4413      	add	r3, r2
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	4a32      	ldr	r2, [pc, #200]	; (800fc08 <ILI9341_Draw_Rectangle+0x128>)
 800fb3e:	8812      	ldrh	r2, [r2, #0]
 800fb40:	b292      	uxth	r2, r2
 800fb42:	4293      	cmp	r3, r2
 800fb44:	db05      	blt.n	800fb52 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800fb46:	4b30      	ldr	r3, [pc, #192]	; (800fc08 <ILI9341_Draw_Rectangle+0x128>)
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	88bb      	ldrh	r3, [r7, #4]
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800fb52:	88fa      	ldrh	r2, [r7, #6]
 800fb54:	887b      	ldrh	r3, [r7, #2]
 800fb56:	4413      	add	r3, r2
 800fb58:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800fb5e:	88ba      	ldrh	r2, [r7, #4]
 800fb60:	883b      	ldrh	r3, [r7, #0]
 800fb62:	4413      	add	r3, r2
 800fb64:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fb66:	3b01      	subs	r3, #1
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	88b9      	ldrh	r1, [r7, #4]
 800fb6c:	88f8      	ldrh	r0, [r7, #6]
 800fb6e:	4622      	mov	r2, r4
 800fb70:	f7ff fde6 	bl	800f740 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800fb74:	883a      	ldrh	r2, [r7, #0]
 800fb76:	887b      	ldrh	r3, [r7, #2]
 800fb78:	fb12 f303 	smulbb	r3, r2, r3
 800fb7c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800fb82:	89fb      	ldrh	r3, [r7, #14]
 800fb84:	f003 0301 	and.w	r3, r3, #1
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d009      	beq.n	800fba0 <ILI9341_Draw_Rectangle+0xc0>
 800fb8c:	89fb      	ldrh	r3, [r7, #14]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d906      	bls.n	800fba0 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800fb92:	2301      	movs	r3, #1
 800fb94:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800fb96:	89fb      	ldrh	r3, [r7, #14]
 800fb98:	085b      	lsrs	r3, r3, #1
 800fb9a:	b29b      	uxth	r3, r3
 800fb9c:	005b      	lsls	r3, r3, #1
 800fb9e:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800fba0:	89fc      	ldrh	r4, [r7, #14]
 800fba2:	8c3a      	ldrh	r2, [r7, #32]
 800fba4:	88b9      	ldrh	r1, [r7, #4]
 800fba6:	88f8      	ldrh	r0, [r7, #6]
 800fba8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fbac:	9300      	str	r3, [sp, #0]
 800fbae:	4623      	mov	r3, r4
 800fbb0:	f000 f8a8 	bl	800fd04 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800fbb4:	7b7b      	ldrb	r3, [r7, #13]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d021      	beq.n	800fbfe <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800fbba:	88fa      	ldrh	r2, [r7, #6]
 800fbbc:	887b      	ldrh	r3, [r7, #2]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	3b02      	subs	r3, #2
 800fbc4:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800fbc6:	88ba      	ldrh	r2, [r7, #4]
 800fbc8:	883b      	ldrh	r3, [r7, #0]
 800fbca:	4413      	add	r3, r2
 800fbcc:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	8c3a      	ldrh	r2, [r7, #32]
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	f7ff fe29 	bl	800f82c <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800fbda:	88fa      	ldrh	r2, [r7, #6]
 800fbdc:	887b      	ldrh	r3, [r7, #2]
 800fbde:	4413      	add	r3, r2
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	3b01      	subs	r3, #1
 800fbe4:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800fbe6:	88ba      	ldrh	r2, [r7, #4]
 800fbe8:	883b      	ldrh	r3, [r7, #0]
 800fbea:	4413      	add	r3, r2
 800fbec:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	8c3a      	ldrh	r2, [r7, #32]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	f7ff fe19 	bl	800f82c <ILI9341_Draw_Pixel>
 800fbfa:	e000      	b.n	800fbfe <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fbfc:	bf00      	nop
							colour);
	}
}
 800fbfe:	3714      	adds	r7, #20
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd90      	pop	{r4, r7, pc}
 800fc04:	20000c42 	.word	0x20000c42
 800fc08:	20000c40 	.word	0x20000c40

0800fc0c <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	4603      	mov	r3, r0
 800fc14:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800fc16:	79fb      	ldrb	r3, [r7, #7]
 800fc18:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800fc1a:	2036      	movs	r0, #54	; 0x36
 800fc1c:	f000 f922 	bl	800fe64 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800fc20:	7bfb      	ldrb	r3, [r7, #15]
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d836      	bhi.n	800fc94 <ILI9341_Set_Rotation+0x88>
 800fc26:	a201      	add	r2, pc, #4	; (adr r2, 800fc2c <ILI9341_Set_Rotation+0x20>)
 800fc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2c:	0800fc3d 	.word	0x0800fc3d
 800fc30:	0800fc53 	.word	0x0800fc53
 800fc34:	0800fc69 	.word	0x0800fc69
 800fc38:	0800fc7f 	.word	0x0800fc7f
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800fc3c:	2048      	movs	r0, #72	; 0x48
 800fc3e:	f000 f943 	bl	800fec8 <_LCD_SendData>
			LCD_WIDTH = 240;
 800fc42:	4b17      	ldr	r3, [pc, #92]	; (800fca0 <ILI9341_Set_Rotation+0x94>)
 800fc44:	22f0      	movs	r2, #240	; 0xf0
 800fc46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800fc48:	4b16      	ldr	r3, [pc, #88]	; (800fca4 <ILI9341_Set_Rotation+0x98>)
 800fc4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fc4e:	801a      	strh	r2, [r3, #0]
			break;
 800fc50:	e021      	b.n	800fc96 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800fc52:	2028      	movs	r0, #40	; 0x28
 800fc54:	f000 f938 	bl	800fec8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800fc58:	4b11      	ldr	r3, [pc, #68]	; (800fca0 <ILI9341_Set_Rotation+0x94>)
 800fc5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fc5e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800fc60:	4b10      	ldr	r3, [pc, #64]	; (800fca4 <ILI9341_Set_Rotation+0x98>)
 800fc62:	22f0      	movs	r2, #240	; 0xf0
 800fc64:	801a      	strh	r2, [r3, #0]
			break;
 800fc66:	e016      	b.n	800fc96 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800fc68:	2088      	movs	r0, #136	; 0x88
 800fc6a:	f000 f92d 	bl	800fec8 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800fc6e:	4b0c      	ldr	r3, [pc, #48]	; (800fca0 <ILI9341_Set_Rotation+0x94>)
 800fc70:	22f0      	movs	r2, #240	; 0xf0
 800fc72:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800fc74:	4b0b      	ldr	r3, [pc, #44]	; (800fca4 <ILI9341_Set_Rotation+0x98>)
 800fc76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fc7a:	801a      	strh	r2, [r3, #0]
			break;
 800fc7c:	e00b      	b.n	800fc96 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800fc7e:	20e8      	movs	r0, #232	; 0xe8
 800fc80:	f000 f922 	bl	800fec8 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800fc84:	4b06      	ldr	r3, [pc, #24]	; (800fca0 <ILI9341_Set_Rotation+0x94>)
 800fc86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fc8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800fc8c:	4b05      	ldr	r3, [pc, #20]	; (800fca4 <ILI9341_Set_Rotation+0x98>)
 800fc8e:	22f0      	movs	r2, #240	; 0xf0
 800fc90:	801a      	strh	r2, [r3, #0]
			break;
 800fc92:	e000      	b.n	800fc96 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800fc94:	bf00      	nop
	}
}
 800fc96:	bf00      	nop
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	20000c42 	.word	0x20000c42
 800fca4:	20000c40 	.word	0x20000c40

0800fca8 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800fca8:	b480      	push	{r7}
 800fcaa:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800fcac:	4b05      	ldr	r3, [pc, #20]	; (800fcc4 <_LCD_Enable+0x1c>)
 800fcae:	695b      	ldr	r3, [r3, #20]
 800fcb0:	4a04      	ldr	r2, [pc, #16]	; (800fcc4 <_LCD_Enable+0x1c>)
 800fcb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fcb6:	6153      	str	r3, [r2, #20]
}
 800fcb8:	bf00      	nop
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	48000400 	.word	0x48000400

0800fcc8 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800fccc:	4b0c      	ldr	r3, [pc, #48]	; (800fd00 <_LCD_Reset+0x38>)
 800fcce:	695b      	ldr	r3, [r3, #20]
 800fcd0:	4a0b      	ldr	r2, [pc, #44]	; (800fd00 <_LCD_Reset+0x38>)
 800fcd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fcd6:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800fcd8:	20c8      	movs	r0, #200	; 0xc8
 800fcda:	f7f8 fd19 	bl	8008710 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fcde:	4b08      	ldr	r3, [pc, #32]	; (800fd00 <_LCD_Reset+0x38>)
 800fce0:	695b      	ldr	r3, [r3, #20]
 800fce2:	4a07      	ldr	r2, [pc, #28]	; (800fd00 <_LCD_Reset+0x38>)
 800fce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fce8:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800fcea:	20c8      	movs	r0, #200	; 0xc8
 800fcec:	f7f8 fd10 	bl	8008710 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800fcf0:	4b03      	ldr	r3, [pc, #12]	; (800fd00 <_LCD_Reset+0x38>)
 800fcf2:	695b      	ldr	r3, [r3, #20]
 800fcf4:	4a02      	ldr	r2, [pc, #8]	; (800fd00 <_LCD_Reset+0x38>)
 800fcf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fcfa:	6153      	str	r3, [r2, #20]
}
 800fcfc:	bf00      	nop
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	48000400 	.word	0x48000400

0800fd04 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800fd04:	b5b0      	push	{r4, r5, r7, lr}
 800fd06:	b08e      	sub	sp, #56	; 0x38
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	607b      	str	r3, [r7, #4]
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	81fb      	strh	r3, [r7, #14]
 800fd10:	460b      	mov	r3, r1
 800fd12:	81bb      	strh	r3, [r7, #12]
 800fd14:	4613      	mov	r3, r2
 800fd16:	817b      	strh	r3, [r7, #10]
 800fd18:	466b      	mov	r3, sp
 800fd1a:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	005b      	lsls	r3, r3, #1
 800fd24:	4a4d      	ldr	r2, [pc, #308]	; (800fe5c <_LCD_Write_Frame+0x158>)
 800fd26:	8812      	ldrh	r2, [r2, #0]
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d202      	bcs.n	800fd32 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd30:	e002      	b.n	800fd38 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800fd32:	4b4a      	ldr	r3, [pc, #296]	; (800fe5c <_LCD_Write_Frame+0x158>)
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800fd38:	897b      	ldrh	r3, [r7, #10]
 800fd3a:	0a1b      	lsrs	r3, r3, #8
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800fd40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd42:	4603      	mov	r3, r0
 800fd44:	3b01      	subs	r3, #1
 800fd46:	61bb      	str	r3, [r7, #24]
 800fd48:	4601      	mov	r1, r0
 800fd4a:	f04f 0200 	mov.w	r2, #0
 800fd4e:	f04f 0300 	mov.w	r3, #0
 800fd52:	f04f 0400 	mov.w	r4, #0
 800fd56:	00d4      	lsls	r4, r2, #3
 800fd58:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800fd5c:	00cb      	lsls	r3, r1, #3
 800fd5e:	4601      	mov	r1, r0
 800fd60:	f04f 0200 	mov.w	r2, #0
 800fd64:	f04f 0300 	mov.w	r3, #0
 800fd68:	f04f 0400 	mov.w	r4, #0
 800fd6c:	00d4      	lsls	r4, r2, #3
 800fd6e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800fd72:	00cb      	lsls	r3, r1, #3
 800fd74:	1dc3      	adds	r3, r0, #7
 800fd76:	08db      	lsrs	r3, r3, #3
 800fd78:	00db      	lsls	r3, r3, #3
 800fd7a:	ebad 0d03 	sub.w	sp, sp, r3
 800fd7e:	466b      	mov	r3, sp
 800fd80:	3300      	adds	r3, #0
 800fd82:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800fd84:	2300      	movs	r3, #0
 800fd86:	633b      	str	r3, [r7, #48]	; 0x30
 800fd88:	e00d      	b.n	800fda6 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8e:	4413      	add	r3, r2
 800fd90:	7ffa      	ldrb	r2, [r7, #31]
 800fd92:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800fd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd96:	3301      	adds	r3, #1
 800fd98:	897a      	ldrh	r2, [r7, #10]
 800fd9a:	b2d1      	uxtb	r1, r2
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	3302      	adds	r3, #2
 800fda4:	633b      	str	r3, [r7, #48]	; 0x30
 800fda6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d3ed      	bcc.n	800fd8a <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d00d      	beq.n	800fdde <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdca:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdd0:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdd6:	fb01 f202 	mul.w	r2, r1, r2
 800fdda:	1a9b      	subs	r3, r3, r2
 800fddc:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fdde:	4b20      	ldr	r3, [pc, #128]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fde0:	695b      	ldr	r3, [r3, #20]
 800fde2:	4a1f      	ldr	r2, [pc, #124]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fde8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fdea:	4b1d      	ldr	r3, [pc, #116]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	4a1c      	ldr	r2, [pc, #112]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fdf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdf4:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800fdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d00f      	beq.n	800fe1c <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
 800fe00:	e008      	b.n	800fe14 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800fe02:	6978      	ldr	r0, [r7, #20]
 800fe04:	230a      	movs	r3, #10
 800fe06:	2200      	movs	r2, #0
 800fe08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe0a:	f000 f8c1 	bl	800ff90 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800fe0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe10:	3301      	adds	r3, #1
 800fe12:	627b      	str	r3, [r7, #36]	; 0x24
 800fe14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d3f2      	bcc.n	800fe02 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800fe1c:	6978      	ldr	r0, [r7, #20]
 800fe1e:	230a      	movs	r3, #10
 800fe20:	2200      	movs	r2, #0
 800fe22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe24:	f000 f8b4 	bl	800ff90 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fe28:	2300      	movs	r3, #0
 800fe2a:	623b      	str	r3, [r7, #32]
 800fe2c:	e008      	b.n	800fe40 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe2e:	4b0c      	ldr	r3, [pc, #48]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fe30:	695b      	ldr	r3, [r3, #20]
 800fe32:	4a0b      	ldr	r2, [pc, #44]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fe34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe38:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fe3a:	6a3b      	ldr	r3, [r7, #32]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	623b      	str	r3, [r7, #32]
 800fe40:	6a3b      	ldr	r3, [r7, #32]
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	ddf3      	ble.n	800fe2e <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe46:	4b06      	ldr	r3, [pc, #24]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	4a05      	ldr	r2, [pc, #20]	; (800fe60 <_LCD_Write_Frame+0x15c>)
 800fe4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe50:	6153      	str	r3, [r2, #20]
 800fe52:	46ad      	mov	sp, r5

}
 800fe54:	bf00      	nop
 800fe56:	3738      	adds	r7, #56	; 0x38
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe5c:	20000c44 	.word	0x20000c44
 800fe60:	48000400 	.word	0x48000400

0800fe64 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe6e:	4b15      	ldr	r3, [pc, #84]	; (800fec4 <_LCD_SendCommand+0x60>)
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	4a14      	ldr	r2, [pc, #80]	; (800fec4 <_LCD_SendCommand+0x60>)
 800fe74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe78:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fe7a:	4b12      	ldr	r3, [pc, #72]	; (800fec4 <_LCD_SendCommand+0x60>)
 800fe7c:	695b      	ldr	r3, [r3, #20]
 800fe7e:	4a11      	ldr	r2, [pc, #68]	; (800fec4 <_LCD_SendCommand+0x60>)
 800fe80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe84:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800fe86:	79fb      	ldrb	r3, [r7, #7]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 f84d 	bl	800ff2c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fe92:	2300      	movs	r3, #0
 800fe94:	60fb      	str	r3, [r7, #12]
 800fe96:	e008      	b.n	800feaa <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe98:	4b0a      	ldr	r3, [pc, #40]	; (800fec4 <_LCD_SendCommand+0x60>)
 800fe9a:	695b      	ldr	r3, [r3, #20]
 800fe9c:	4a09      	ldr	r2, [pc, #36]	; (800fec4 <_LCD_SendCommand+0x60>)
 800fe9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fea2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	3301      	adds	r3, #1
 800fea8:	60fb      	str	r3, [r7, #12]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2b02      	cmp	r3, #2
 800feae:	ddf3      	ble.n	800fe98 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800feb0:	4b04      	ldr	r3, [pc, #16]	; (800fec4 <_LCD_SendCommand+0x60>)
 800feb2:	695b      	ldr	r3, [r3, #20]
 800feb4:	4a03      	ldr	r2, [pc, #12]	; (800fec4 <_LCD_SendCommand+0x60>)
 800feb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feba:	6153      	str	r3, [r2, #20]
}
 800febc:	bf00      	nop
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	48000400 	.word	0x48000400

0800fec8 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fed2:	4b15      	ldr	r3, [pc, #84]	; (800ff28 <_LCD_SendData+0x60>)
 800fed4:	695b      	ldr	r3, [r3, #20]
 800fed6:	4a14      	ldr	r2, [pc, #80]	; (800ff28 <_LCD_SendData+0x60>)
 800fed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fedc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fede:	4b12      	ldr	r3, [pc, #72]	; (800ff28 <_LCD_SendData+0x60>)
 800fee0:	695b      	ldr	r3, [r3, #20]
 800fee2:	4a11      	ldr	r2, [pc, #68]	; (800ff28 <_LCD_SendData+0x60>)
 800fee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fee8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800feea:	79fb      	ldrb	r3, [r7, #7]
 800feec:	2200      	movs	r2, #0
 800feee:	2100      	movs	r1, #0
 800fef0:	4618      	mov	r0, r3
 800fef2:	f000 f81b 	bl	800ff2c <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800fef6:	2300      	movs	r3, #0
 800fef8:	60fb      	str	r3, [r7, #12]
 800fefa:	e008      	b.n	800ff0e <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fefc:	4b0a      	ldr	r3, [pc, #40]	; (800ff28 <_LCD_SendData+0x60>)
 800fefe:	695b      	ldr	r3, [r3, #20]
 800ff00:	4a09      	ldr	r2, [pc, #36]	; (800ff28 <_LCD_SendData+0x60>)
 800ff02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff06:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	60fb      	str	r3, [r7, #12]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2b02      	cmp	r3, #2
 800ff12:	ddf3      	ble.n	800fefc <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff14:	4b04      	ldr	r3, [pc, #16]	; (800ff28 <_LCD_SendData+0x60>)
 800ff16:	695b      	ldr	r3, [r3, #20]
 800ff18:	4a03      	ldr	r2, [pc, #12]	; (800ff28 <_LCD_SendData+0x60>)
 800ff1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff1e:	6153      	str	r3, [r2, #20]
}
 800ff20:	bf00      	nop
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	48000400 	.word	0x48000400

0800ff2c <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b085      	sub	sp, #20
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	71fb      	strb	r3, [r7, #7]
 800ff36:	460b      	mov	r3, r1
 800ff38:	71bb      	strb	r3, [r7, #6]
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ff3e:	2300      	movs	r3, #0
 800ff40:	60fb      	str	r3, [r7, #12]
 800ff42:	e003      	b.n	800ff4c <_SPI_SendByte+0x20>
   		asm("nop");
 800ff44:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	60fb      	str	r3, [r7, #12]
 800ff4c:	79bb      	ldrb	r3, [r7, #6]
 800ff4e:	68fa      	ldr	r2, [r7, #12]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	dbf7      	blt.n	800ff44 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ff54:	4b0c      	ldr	r3, [pc, #48]	; (800ff88 <_SPI_SendByte+0x5c>)
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	f003 0302 	and.w	r3, r3, #2
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	d102      	bne.n	800ff66 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800ff60:	4a0a      	ldr	r2, [pc, #40]	; (800ff8c <_SPI_SendByte+0x60>)
 800ff62:	79fb      	ldrb	r3, [r7, #7]
 800ff64:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ff66:	2300      	movs	r3, #0
 800ff68:	60bb      	str	r3, [r7, #8]
 800ff6a:	e003      	b.n	800ff74 <_SPI_SendByte+0x48>
   		asm("nop");
 800ff6c:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	3301      	adds	r3, #1
 800ff72:	60bb      	str	r3, [r7, #8]
 800ff74:	797b      	ldrb	r3, [r7, #5]
 800ff76:	68ba      	ldr	r2, [r7, #8]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	dbf7      	blt.n	800ff6c <_SPI_SendByte+0x40>

#endif

}
 800ff7c:	bf00      	nop
 800ff7e:	3714      	adds	r7, #20
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	40003c00 	.word	0x40003c00
 800ff8c:	40003c0c 	.word	0x40003c0c

0800ff90 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b089      	sub	sp, #36	; 0x24
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	4611      	mov	r1, r2
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	71fb      	strb	r3, [r7, #7]
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	61fb      	str	r3, [r7, #28]
 800ffaa:	e003      	b.n	800ffb4 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ffac:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	61fb      	str	r3, [r7, #28]
 800ffb4:	79fb      	ldrb	r3, [r7, #7]
 800ffb6:	69fa      	ldr	r2, [r7, #28]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	dbf7      	blt.n	800ffac <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ffc0:	e01d      	b.n	800fffe <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ffc2:	4b1c      	ldr	r3, [pc, #112]	; (8010034 <_SPI_SendByteMultiByte+0xa4>)
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	f003 0302 	and.w	r3, r3, #2
 800ffca:	2b02      	cmp	r3, #2
 800ffcc:	d117      	bne.n	800fffe <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d90a      	bls.n	800ffea <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	881a      	ldrh	r2, [r3, #0]
 800ffd8:	4b16      	ldr	r3, [pc, #88]	; (8010034 <_SPI_SendByteMultiByte+0xa4>)
 800ffda:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800ffdc:	69bb      	ldr	r3, [r7, #24]
 800ffde:	3302      	adds	r3, #2
 800ffe0:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	3b02      	subs	r3, #2
 800ffe6:	60bb      	str	r3, [r7, #8]
 800ffe8:	e009      	b.n	800fffe <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800ffea:	4a13      	ldr	r2, [pc, #76]	; (8010038 <_SPI_SendByteMultiByte+0xa8>)
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	3301      	adds	r3, #1
 800fff6:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	3b01      	subs	r3, #1
 800fffc:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1de      	bne.n	800ffc2 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8010004:	4b0b      	ldr	r3, [pc, #44]	; (8010034 <_SPI_SendByteMultiByte+0xa4>)
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	4a0a      	ldr	r2, [pc, #40]	; (8010034 <_SPI_SendByteMultiByte+0xa4>)
 801000a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801000e:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]
 8010014:	e003      	b.n	801001e <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 8010016:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	3301      	adds	r3, #1
 801001c:	617b      	str	r3, [r7, #20]
 801001e:	79bb      	ldrb	r3, [r7, #6]
 8010020:	697a      	ldr	r2, [r7, #20]
 8010022:	429a      	cmp	r2, r3
 8010024:	dbf7      	blt.n	8010016 <_SPI_SendByteMultiByte+0x86>

#endif

}
 8010026:	bf00      	nop
 8010028:	3724      	adds	r7, #36	; 0x24
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	40003c00 	.word	0x40003c00
 8010038:	40003c0c 	.word	0x40003c0c

0801003c <__errno>:
 801003c:	4b01      	ldr	r3, [pc, #4]	; (8010044 <__errno+0x8>)
 801003e:	6818      	ldr	r0, [r3, #0]
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	20001c38 	.word	0x20001c38

08010048 <__libc_init_array>:
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	4e0d      	ldr	r6, [pc, #52]	; (8010080 <__libc_init_array+0x38>)
 801004c:	4c0d      	ldr	r4, [pc, #52]	; (8010084 <__libc_init_array+0x3c>)
 801004e:	1ba4      	subs	r4, r4, r6
 8010050:	10a4      	asrs	r4, r4, #2
 8010052:	2500      	movs	r5, #0
 8010054:	42a5      	cmp	r5, r4
 8010056:	d109      	bne.n	801006c <__libc_init_array+0x24>
 8010058:	4e0b      	ldr	r6, [pc, #44]	; (8010088 <__libc_init_array+0x40>)
 801005a:	4c0c      	ldr	r4, [pc, #48]	; (801008c <__libc_init_array+0x44>)
 801005c:	f004 f89e 	bl	801419c <_init>
 8010060:	1ba4      	subs	r4, r4, r6
 8010062:	10a4      	asrs	r4, r4, #2
 8010064:	2500      	movs	r5, #0
 8010066:	42a5      	cmp	r5, r4
 8010068:	d105      	bne.n	8010076 <__libc_init_array+0x2e>
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010070:	4798      	blx	r3
 8010072:	3501      	adds	r5, #1
 8010074:	e7ee      	b.n	8010054 <__libc_init_array+0xc>
 8010076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801007a:	4798      	blx	r3
 801007c:	3501      	adds	r5, #1
 801007e:	e7f2      	b.n	8010066 <__libc_init_array+0x1e>
 8010080:	08015590 	.word	0x08015590
 8010084:	08015590 	.word	0x08015590
 8010088:	08015590 	.word	0x08015590
 801008c:	08015594 	.word	0x08015594

08010090 <memset>:
 8010090:	4402      	add	r2, r0
 8010092:	4603      	mov	r3, r0
 8010094:	4293      	cmp	r3, r2
 8010096:	d100      	bne.n	801009a <memset+0xa>
 8010098:	4770      	bx	lr
 801009a:	f803 1b01 	strb.w	r1, [r3], #1
 801009e:	e7f9      	b.n	8010094 <memset+0x4>

080100a0 <__cvt>:
 80100a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100a4:	ec55 4b10 	vmov	r4, r5, d0
 80100a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80100aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80100ae:	2d00      	cmp	r5, #0
 80100b0:	460e      	mov	r6, r1
 80100b2:	4691      	mov	r9, r2
 80100b4:	4619      	mov	r1, r3
 80100b6:	bfb8      	it	lt
 80100b8:	4622      	movlt	r2, r4
 80100ba:	462b      	mov	r3, r5
 80100bc:	f027 0720 	bic.w	r7, r7, #32
 80100c0:	bfbb      	ittet	lt
 80100c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80100c6:	461d      	movlt	r5, r3
 80100c8:	2300      	movge	r3, #0
 80100ca:	232d      	movlt	r3, #45	; 0x2d
 80100cc:	bfb8      	it	lt
 80100ce:	4614      	movlt	r4, r2
 80100d0:	2f46      	cmp	r7, #70	; 0x46
 80100d2:	700b      	strb	r3, [r1, #0]
 80100d4:	d004      	beq.n	80100e0 <__cvt+0x40>
 80100d6:	2f45      	cmp	r7, #69	; 0x45
 80100d8:	d100      	bne.n	80100dc <__cvt+0x3c>
 80100da:	3601      	adds	r6, #1
 80100dc:	2102      	movs	r1, #2
 80100de:	e000      	b.n	80100e2 <__cvt+0x42>
 80100e0:	2103      	movs	r1, #3
 80100e2:	ab03      	add	r3, sp, #12
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	ab02      	add	r3, sp, #8
 80100e8:	9300      	str	r3, [sp, #0]
 80100ea:	4632      	mov	r2, r6
 80100ec:	4653      	mov	r3, sl
 80100ee:	ec45 4b10 	vmov	d0, r4, r5
 80100f2:	f000 fe3d 	bl	8010d70 <_dtoa_r>
 80100f6:	2f47      	cmp	r7, #71	; 0x47
 80100f8:	4680      	mov	r8, r0
 80100fa:	d102      	bne.n	8010102 <__cvt+0x62>
 80100fc:	f019 0f01 	tst.w	r9, #1
 8010100:	d026      	beq.n	8010150 <__cvt+0xb0>
 8010102:	2f46      	cmp	r7, #70	; 0x46
 8010104:	eb08 0906 	add.w	r9, r8, r6
 8010108:	d111      	bne.n	801012e <__cvt+0x8e>
 801010a:	f898 3000 	ldrb.w	r3, [r8]
 801010e:	2b30      	cmp	r3, #48	; 0x30
 8010110:	d10a      	bne.n	8010128 <__cvt+0x88>
 8010112:	2200      	movs	r2, #0
 8010114:	2300      	movs	r3, #0
 8010116:	4620      	mov	r0, r4
 8010118:	4629      	mov	r1, r5
 801011a:	f7f0 fcfd 	bl	8000b18 <__aeabi_dcmpeq>
 801011e:	b918      	cbnz	r0, 8010128 <__cvt+0x88>
 8010120:	f1c6 0601 	rsb	r6, r6, #1
 8010124:	f8ca 6000 	str.w	r6, [sl]
 8010128:	f8da 3000 	ldr.w	r3, [sl]
 801012c:	4499      	add	r9, r3
 801012e:	2200      	movs	r2, #0
 8010130:	2300      	movs	r3, #0
 8010132:	4620      	mov	r0, r4
 8010134:	4629      	mov	r1, r5
 8010136:	f7f0 fcef 	bl	8000b18 <__aeabi_dcmpeq>
 801013a:	b938      	cbnz	r0, 801014c <__cvt+0xac>
 801013c:	2230      	movs	r2, #48	; 0x30
 801013e:	9b03      	ldr	r3, [sp, #12]
 8010140:	454b      	cmp	r3, r9
 8010142:	d205      	bcs.n	8010150 <__cvt+0xb0>
 8010144:	1c59      	adds	r1, r3, #1
 8010146:	9103      	str	r1, [sp, #12]
 8010148:	701a      	strb	r2, [r3, #0]
 801014a:	e7f8      	b.n	801013e <__cvt+0x9e>
 801014c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010150:	9b03      	ldr	r3, [sp, #12]
 8010152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010154:	eba3 0308 	sub.w	r3, r3, r8
 8010158:	4640      	mov	r0, r8
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	b004      	add	sp, #16
 801015e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010162 <__exponent>:
 8010162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010164:	2900      	cmp	r1, #0
 8010166:	4604      	mov	r4, r0
 8010168:	bfba      	itte	lt
 801016a:	4249      	neglt	r1, r1
 801016c:	232d      	movlt	r3, #45	; 0x2d
 801016e:	232b      	movge	r3, #43	; 0x2b
 8010170:	2909      	cmp	r1, #9
 8010172:	f804 2b02 	strb.w	r2, [r4], #2
 8010176:	7043      	strb	r3, [r0, #1]
 8010178:	dd20      	ble.n	80101bc <__exponent+0x5a>
 801017a:	f10d 0307 	add.w	r3, sp, #7
 801017e:	461f      	mov	r7, r3
 8010180:	260a      	movs	r6, #10
 8010182:	fb91 f5f6 	sdiv	r5, r1, r6
 8010186:	fb06 1115 	mls	r1, r6, r5, r1
 801018a:	3130      	adds	r1, #48	; 0x30
 801018c:	2d09      	cmp	r5, #9
 801018e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010192:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8010196:	4629      	mov	r1, r5
 8010198:	dc09      	bgt.n	80101ae <__exponent+0x4c>
 801019a:	3130      	adds	r1, #48	; 0x30
 801019c:	3b02      	subs	r3, #2
 801019e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80101a2:	42bb      	cmp	r3, r7
 80101a4:	4622      	mov	r2, r4
 80101a6:	d304      	bcc.n	80101b2 <__exponent+0x50>
 80101a8:	1a10      	subs	r0, r2, r0
 80101aa:	b003      	add	sp, #12
 80101ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101ae:	4613      	mov	r3, r2
 80101b0:	e7e7      	b.n	8010182 <__exponent+0x20>
 80101b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101b6:	f804 2b01 	strb.w	r2, [r4], #1
 80101ba:	e7f2      	b.n	80101a2 <__exponent+0x40>
 80101bc:	2330      	movs	r3, #48	; 0x30
 80101be:	4419      	add	r1, r3
 80101c0:	7083      	strb	r3, [r0, #2]
 80101c2:	1d02      	adds	r2, r0, #4
 80101c4:	70c1      	strb	r1, [r0, #3]
 80101c6:	e7ef      	b.n	80101a8 <__exponent+0x46>

080101c8 <_printf_float>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	b08d      	sub	sp, #52	; 0x34
 80101ce:	460c      	mov	r4, r1
 80101d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80101d4:	4616      	mov	r6, r2
 80101d6:	461f      	mov	r7, r3
 80101d8:	4605      	mov	r5, r0
 80101da:	f001 fcfb 	bl	8011bd4 <_localeconv_r>
 80101de:	6803      	ldr	r3, [r0, #0]
 80101e0:	9304      	str	r3, [sp, #16]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7f0 f81c 	bl	8000220 <strlen>
 80101e8:	2300      	movs	r3, #0
 80101ea:	930a      	str	r3, [sp, #40]	; 0x28
 80101ec:	f8d8 3000 	ldr.w	r3, [r8]
 80101f0:	9005      	str	r0, [sp, #20]
 80101f2:	3307      	adds	r3, #7
 80101f4:	f023 0307 	bic.w	r3, r3, #7
 80101f8:	f103 0208 	add.w	r2, r3, #8
 80101fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010200:	f8d4 b000 	ldr.w	fp, [r4]
 8010204:	f8c8 2000 	str.w	r2, [r8]
 8010208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010210:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010214:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010218:	9307      	str	r3, [sp, #28]
 801021a:	f8cd 8018 	str.w	r8, [sp, #24]
 801021e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010222:	4ba7      	ldr	r3, [pc, #668]	; (80104c0 <_printf_float+0x2f8>)
 8010224:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010228:	f7f0 fca8 	bl	8000b7c <__aeabi_dcmpun>
 801022c:	bb70      	cbnz	r0, 801028c <_printf_float+0xc4>
 801022e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010232:	4ba3      	ldr	r3, [pc, #652]	; (80104c0 <_printf_float+0x2f8>)
 8010234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010238:	f7f0 fc82 	bl	8000b40 <__aeabi_dcmple>
 801023c:	bb30      	cbnz	r0, 801028c <_printf_float+0xc4>
 801023e:	2200      	movs	r2, #0
 8010240:	2300      	movs	r3, #0
 8010242:	4640      	mov	r0, r8
 8010244:	4649      	mov	r1, r9
 8010246:	f7f0 fc71 	bl	8000b2c <__aeabi_dcmplt>
 801024a:	b110      	cbz	r0, 8010252 <_printf_float+0x8a>
 801024c:	232d      	movs	r3, #45	; 0x2d
 801024e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010252:	4a9c      	ldr	r2, [pc, #624]	; (80104c4 <_printf_float+0x2fc>)
 8010254:	4b9c      	ldr	r3, [pc, #624]	; (80104c8 <_printf_float+0x300>)
 8010256:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801025a:	bf8c      	ite	hi
 801025c:	4690      	movhi	r8, r2
 801025e:	4698      	movls	r8, r3
 8010260:	2303      	movs	r3, #3
 8010262:	f02b 0204 	bic.w	r2, fp, #4
 8010266:	6123      	str	r3, [r4, #16]
 8010268:	6022      	str	r2, [r4, #0]
 801026a:	f04f 0900 	mov.w	r9, #0
 801026e:	9700      	str	r7, [sp, #0]
 8010270:	4633      	mov	r3, r6
 8010272:	aa0b      	add	r2, sp, #44	; 0x2c
 8010274:	4621      	mov	r1, r4
 8010276:	4628      	mov	r0, r5
 8010278:	f000 f9e6 	bl	8010648 <_printf_common>
 801027c:	3001      	adds	r0, #1
 801027e:	f040 808d 	bne.w	801039c <_printf_float+0x1d4>
 8010282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010286:	b00d      	add	sp, #52	; 0x34
 8010288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028c:	4642      	mov	r2, r8
 801028e:	464b      	mov	r3, r9
 8010290:	4640      	mov	r0, r8
 8010292:	4649      	mov	r1, r9
 8010294:	f7f0 fc72 	bl	8000b7c <__aeabi_dcmpun>
 8010298:	b110      	cbz	r0, 80102a0 <_printf_float+0xd8>
 801029a:	4a8c      	ldr	r2, [pc, #560]	; (80104cc <_printf_float+0x304>)
 801029c:	4b8c      	ldr	r3, [pc, #560]	; (80104d0 <_printf_float+0x308>)
 801029e:	e7da      	b.n	8010256 <_printf_float+0x8e>
 80102a0:	6861      	ldr	r1, [r4, #4]
 80102a2:	1c4b      	adds	r3, r1, #1
 80102a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80102a8:	a80a      	add	r0, sp, #40	; 0x28
 80102aa:	d13e      	bne.n	801032a <_printf_float+0x162>
 80102ac:	2306      	movs	r3, #6
 80102ae:	6063      	str	r3, [r4, #4]
 80102b0:	2300      	movs	r3, #0
 80102b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80102b6:	ab09      	add	r3, sp, #36	; 0x24
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	ec49 8b10 	vmov	d0, r8, r9
 80102be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80102c2:	6022      	str	r2, [r4, #0]
 80102c4:	f8cd a004 	str.w	sl, [sp, #4]
 80102c8:	6861      	ldr	r1, [r4, #4]
 80102ca:	4628      	mov	r0, r5
 80102cc:	f7ff fee8 	bl	80100a0 <__cvt>
 80102d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80102d4:	2b47      	cmp	r3, #71	; 0x47
 80102d6:	4680      	mov	r8, r0
 80102d8:	d109      	bne.n	80102ee <_printf_float+0x126>
 80102da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102dc:	1cd8      	adds	r0, r3, #3
 80102de:	db02      	blt.n	80102e6 <_printf_float+0x11e>
 80102e0:	6862      	ldr	r2, [r4, #4]
 80102e2:	4293      	cmp	r3, r2
 80102e4:	dd47      	ble.n	8010376 <_printf_float+0x1ae>
 80102e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80102ea:	fa5f fa8a 	uxtb.w	sl, sl
 80102ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80102f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102f4:	d824      	bhi.n	8010340 <_printf_float+0x178>
 80102f6:	3901      	subs	r1, #1
 80102f8:	4652      	mov	r2, sl
 80102fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80102fe:	9109      	str	r1, [sp, #36]	; 0x24
 8010300:	f7ff ff2f 	bl	8010162 <__exponent>
 8010304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010306:	1813      	adds	r3, r2, r0
 8010308:	2a01      	cmp	r2, #1
 801030a:	4681      	mov	r9, r0
 801030c:	6123      	str	r3, [r4, #16]
 801030e:	dc02      	bgt.n	8010316 <_printf_float+0x14e>
 8010310:	6822      	ldr	r2, [r4, #0]
 8010312:	07d1      	lsls	r1, r2, #31
 8010314:	d501      	bpl.n	801031a <_printf_float+0x152>
 8010316:	3301      	adds	r3, #1
 8010318:	6123      	str	r3, [r4, #16]
 801031a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801031e:	2b00      	cmp	r3, #0
 8010320:	d0a5      	beq.n	801026e <_printf_float+0xa6>
 8010322:	232d      	movs	r3, #45	; 0x2d
 8010324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010328:	e7a1      	b.n	801026e <_printf_float+0xa6>
 801032a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801032e:	f000 8177 	beq.w	8010620 <_printf_float+0x458>
 8010332:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010336:	d1bb      	bne.n	80102b0 <_printf_float+0xe8>
 8010338:	2900      	cmp	r1, #0
 801033a:	d1b9      	bne.n	80102b0 <_printf_float+0xe8>
 801033c:	2301      	movs	r3, #1
 801033e:	e7b6      	b.n	80102ae <_printf_float+0xe6>
 8010340:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010344:	d119      	bne.n	801037a <_printf_float+0x1b2>
 8010346:	2900      	cmp	r1, #0
 8010348:	6863      	ldr	r3, [r4, #4]
 801034a:	dd0c      	ble.n	8010366 <_printf_float+0x19e>
 801034c:	6121      	str	r1, [r4, #16]
 801034e:	b913      	cbnz	r3, 8010356 <_printf_float+0x18e>
 8010350:	6822      	ldr	r2, [r4, #0]
 8010352:	07d2      	lsls	r2, r2, #31
 8010354:	d502      	bpl.n	801035c <_printf_float+0x194>
 8010356:	3301      	adds	r3, #1
 8010358:	440b      	add	r3, r1
 801035a:	6123      	str	r3, [r4, #16]
 801035c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801035e:	65a3      	str	r3, [r4, #88]	; 0x58
 8010360:	f04f 0900 	mov.w	r9, #0
 8010364:	e7d9      	b.n	801031a <_printf_float+0x152>
 8010366:	b913      	cbnz	r3, 801036e <_printf_float+0x1a6>
 8010368:	6822      	ldr	r2, [r4, #0]
 801036a:	07d0      	lsls	r0, r2, #31
 801036c:	d501      	bpl.n	8010372 <_printf_float+0x1aa>
 801036e:	3302      	adds	r3, #2
 8010370:	e7f3      	b.n	801035a <_printf_float+0x192>
 8010372:	2301      	movs	r3, #1
 8010374:	e7f1      	b.n	801035a <_printf_float+0x192>
 8010376:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801037a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801037e:	4293      	cmp	r3, r2
 8010380:	db05      	blt.n	801038e <_printf_float+0x1c6>
 8010382:	6822      	ldr	r2, [r4, #0]
 8010384:	6123      	str	r3, [r4, #16]
 8010386:	07d1      	lsls	r1, r2, #31
 8010388:	d5e8      	bpl.n	801035c <_printf_float+0x194>
 801038a:	3301      	adds	r3, #1
 801038c:	e7e5      	b.n	801035a <_printf_float+0x192>
 801038e:	2b00      	cmp	r3, #0
 8010390:	bfd4      	ite	le
 8010392:	f1c3 0302 	rsble	r3, r3, #2
 8010396:	2301      	movgt	r3, #1
 8010398:	4413      	add	r3, r2
 801039a:	e7de      	b.n	801035a <_printf_float+0x192>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	055a      	lsls	r2, r3, #21
 80103a0:	d407      	bmi.n	80103b2 <_printf_float+0x1ea>
 80103a2:	6923      	ldr	r3, [r4, #16]
 80103a4:	4642      	mov	r2, r8
 80103a6:	4631      	mov	r1, r6
 80103a8:	4628      	mov	r0, r5
 80103aa:	47b8      	blx	r7
 80103ac:	3001      	adds	r0, #1
 80103ae:	d12b      	bne.n	8010408 <_printf_float+0x240>
 80103b0:	e767      	b.n	8010282 <_printf_float+0xba>
 80103b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80103b6:	f240 80dc 	bls.w	8010572 <_printf_float+0x3aa>
 80103ba:	2200      	movs	r2, #0
 80103bc:	2300      	movs	r3, #0
 80103be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80103c2:	f7f0 fba9 	bl	8000b18 <__aeabi_dcmpeq>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d033      	beq.n	8010432 <_printf_float+0x26a>
 80103ca:	2301      	movs	r3, #1
 80103cc:	4a41      	ldr	r2, [pc, #260]	; (80104d4 <_printf_float+0x30c>)
 80103ce:	4631      	mov	r1, r6
 80103d0:	4628      	mov	r0, r5
 80103d2:	47b8      	blx	r7
 80103d4:	3001      	adds	r0, #1
 80103d6:	f43f af54 	beq.w	8010282 <_printf_float+0xba>
 80103da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103de:	429a      	cmp	r2, r3
 80103e0:	db02      	blt.n	80103e8 <_printf_float+0x220>
 80103e2:	6823      	ldr	r3, [r4, #0]
 80103e4:	07d8      	lsls	r0, r3, #31
 80103e6:	d50f      	bpl.n	8010408 <_printf_float+0x240>
 80103e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103ec:	4631      	mov	r1, r6
 80103ee:	4628      	mov	r0, r5
 80103f0:	47b8      	blx	r7
 80103f2:	3001      	adds	r0, #1
 80103f4:	f43f af45 	beq.w	8010282 <_printf_float+0xba>
 80103f8:	f04f 0800 	mov.w	r8, #0
 80103fc:	f104 091a 	add.w	r9, r4, #26
 8010400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010402:	3b01      	subs	r3, #1
 8010404:	4543      	cmp	r3, r8
 8010406:	dc09      	bgt.n	801041c <_printf_float+0x254>
 8010408:	6823      	ldr	r3, [r4, #0]
 801040a:	079b      	lsls	r3, r3, #30
 801040c:	f100 8103 	bmi.w	8010616 <_printf_float+0x44e>
 8010410:	68e0      	ldr	r0, [r4, #12]
 8010412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010414:	4298      	cmp	r0, r3
 8010416:	bfb8      	it	lt
 8010418:	4618      	movlt	r0, r3
 801041a:	e734      	b.n	8010286 <_printf_float+0xbe>
 801041c:	2301      	movs	r3, #1
 801041e:	464a      	mov	r2, r9
 8010420:	4631      	mov	r1, r6
 8010422:	4628      	mov	r0, r5
 8010424:	47b8      	blx	r7
 8010426:	3001      	adds	r0, #1
 8010428:	f43f af2b 	beq.w	8010282 <_printf_float+0xba>
 801042c:	f108 0801 	add.w	r8, r8, #1
 8010430:	e7e6      	b.n	8010400 <_printf_float+0x238>
 8010432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010434:	2b00      	cmp	r3, #0
 8010436:	dc2b      	bgt.n	8010490 <_printf_float+0x2c8>
 8010438:	2301      	movs	r3, #1
 801043a:	4a26      	ldr	r2, [pc, #152]	; (80104d4 <_printf_float+0x30c>)
 801043c:	4631      	mov	r1, r6
 801043e:	4628      	mov	r0, r5
 8010440:	47b8      	blx	r7
 8010442:	3001      	adds	r0, #1
 8010444:	f43f af1d 	beq.w	8010282 <_printf_float+0xba>
 8010448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801044a:	b923      	cbnz	r3, 8010456 <_printf_float+0x28e>
 801044c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801044e:	b913      	cbnz	r3, 8010456 <_printf_float+0x28e>
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	07d9      	lsls	r1, r3, #31
 8010454:	d5d8      	bpl.n	8010408 <_printf_float+0x240>
 8010456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801045a:	4631      	mov	r1, r6
 801045c:	4628      	mov	r0, r5
 801045e:	47b8      	blx	r7
 8010460:	3001      	adds	r0, #1
 8010462:	f43f af0e 	beq.w	8010282 <_printf_float+0xba>
 8010466:	f04f 0900 	mov.w	r9, #0
 801046a:	f104 0a1a 	add.w	sl, r4, #26
 801046e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010470:	425b      	negs	r3, r3
 8010472:	454b      	cmp	r3, r9
 8010474:	dc01      	bgt.n	801047a <_printf_float+0x2b2>
 8010476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010478:	e794      	b.n	80103a4 <_printf_float+0x1dc>
 801047a:	2301      	movs	r3, #1
 801047c:	4652      	mov	r2, sl
 801047e:	4631      	mov	r1, r6
 8010480:	4628      	mov	r0, r5
 8010482:	47b8      	blx	r7
 8010484:	3001      	adds	r0, #1
 8010486:	f43f aefc 	beq.w	8010282 <_printf_float+0xba>
 801048a:	f109 0901 	add.w	r9, r9, #1
 801048e:	e7ee      	b.n	801046e <_printf_float+0x2a6>
 8010490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010494:	429a      	cmp	r2, r3
 8010496:	bfa8      	it	ge
 8010498:	461a      	movge	r2, r3
 801049a:	2a00      	cmp	r2, #0
 801049c:	4691      	mov	r9, r2
 801049e:	dd07      	ble.n	80104b0 <_printf_float+0x2e8>
 80104a0:	4613      	mov	r3, r2
 80104a2:	4631      	mov	r1, r6
 80104a4:	4642      	mov	r2, r8
 80104a6:	4628      	mov	r0, r5
 80104a8:	47b8      	blx	r7
 80104aa:	3001      	adds	r0, #1
 80104ac:	f43f aee9 	beq.w	8010282 <_printf_float+0xba>
 80104b0:	f104 031a 	add.w	r3, r4, #26
 80104b4:	f04f 0b00 	mov.w	fp, #0
 80104b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104bc:	9306      	str	r3, [sp, #24]
 80104be:	e015      	b.n	80104ec <_printf_float+0x324>
 80104c0:	7fefffff 	.word	0x7fefffff
 80104c4:	08015288 	.word	0x08015288
 80104c8:	08015284 	.word	0x08015284
 80104cc:	08015290 	.word	0x08015290
 80104d0:	0801528c 	.word	0x0801528c
 80104d4:	08015544 	.word	0x08015544
 80104d8:	2301      	movs	r3, #1
 80104da:	9a06      	ldr	r2, [sp, #24]
 80104dc:	4631      	mov	r1, r6
 80104de:	4628      	mov	r0, r5
 80104e0:	47b8      	blx	r7
 80104e2:	3001      	adds	r0, #1
 80104e4:	f43f aecd 	beq.w	8010282 <_printf_float+0xba>
 80104e8:	f10b 0b01 	add.w	fp, fp, #1
 80104ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80104f0:	ebaa 0309 	sub.w	r3, sl, r9
 80104f4:	455b      	cmp	r3, fp
 80104f6:	dcef      	bgt.n	80104d8 <_printf_float+0x310>
 80104f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104fc:	429a      	cmp	r2, r3
 80104fe:	44d0      	add	r8, sl
 8010500:	db15      	blt.n	801052e <_printf_float+0x366>
 8010502:	6823      	ldr	r3, [r4, #0]
 8010504:	07da      	lsls	r2, r3, #31
 8010506:	d412      	bmi.n	801052e <_printf_float+0x366>
 8010508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801050a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801050c:	eba3 020a 	sub.w	r2, r3, sl
 8010510:	eba3 0a01 	sub.w	sl, r3, r1
 8010514:	4592      	cmp	sl, r2
 8010516:	bfa8      	it	ge
 8010518:	4692      	movge	sl, r2
 801051a:	f1ba 0f00 	cmp.w	sl, #0
 801051e:	dc0e      	bgt.n	801053e <_printf_float+0x376>
 8010520:	f04f 0800 	mov.w	r8, #0
 8010524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010528:	f104 091a 	add.w	r9, r4, #26
 801052c:	e019      	b.n	8010562 <_printf_float+0x39a>
 801052e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010532:	4631      	mov	r1, r6
 8010534:	4628      	mov	r0, r5
 8010536:	47b8      	blx	r7
 8010538:	3001      	adds	r0, #1
 801053a:	d1e5      	bne.n	8010508 <_printf_float+0x340>
 801053c:	e6a1      	b.n	8010282 <_printf_float+0xba>
 801053e:	4653      	mov	r3, sl
 8010540:	4642      	mov	r2, r8
 8010542:	4631      	mov	r1, r6
 8010544:	4628      	mov	r0, r5
 8010546:	47b8      	blx	r7
 8010548:	3001      	adds	r0, #1
 801054a:	d1e9      	bne.n	8010520 <_printf_float+0x358>
 801054c:	e699      	b.n	8010282 <_printf_float+0xba>
 801054e:	2301      	movs	r3, #1
 8010550:	464a      	mov	r2, r9
 8010552:	4631      	mov	r1, r6
 8010554:	4628      	mov	r0, r5
 8010556:	47b8      	blx	r7
 8010558:	3001      	adds	r0, #1
 801055a:	f43f ae92 	beq.w	8010282 <_printf_float+0xba>
 801055e:	f108 0801 	add.w	r8, r8, #1
 8010562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010566:	1a9b      	subs	r3, r3, r2
 8010568:	eba3 030a 	sub.w	r3, r3, sl
 801056c:	4543      	cmp	r3, r8
 801056e:	dcee      	bgt.n	801054e <_printf_float+0x386>
 8010570:	e74a      	b.n	8010408 <_printf_float+0x240>
 8010572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010574:	2a01      	cmp	r2, #1
 8010576:	dc01      	bgt.n	801057c <_printf_float+0x3b4>
 8010578:	07db      	lsls	r3, r3, #31
 801057a:	d53a      	bpl.n	80105f2 <_printf_float+0x42a>
 801057c:	2301      	movs	r3, #1
 801057e:	4642      	mov	r2, r8
 8010580:	4631      	mov	r1, r6
 8010582:	4628      	mov	r0, r5
 8010584:	47b8      	blx	r7
 8010586:	3001      	adds	r0, #1
 8010588:	f43f ae7b 	beq.w	8010282 <_printf_float+0xba>
 801058c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010590:	4631      	mov	r1, r6
 8010592:	4628      	mov	r0, r5
 8010594:	47b8      	blx	r7
 8010596:	3001      	adds	r0, #1
 8010598:	f108 0801 	add.w	r8, r8, #1
 801059c:	f43f ae71 	beq.w	8010282 <_printf_float+0xba>
 80105a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105a2:	2200      	movs	r2, #0
 80105a4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80105a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80105ac:	2300      	movs	r3, #0
 80105ae:	f7f0 fab3 	bl	8000b18 <__aeabi_dcmpeq>
 80105b2:	b9c8      	cbnz	r0, 80105e8 <_printf_float+0x420>
 80105b4:	4653      	mov	r3, sl
 80105b6:	4642      	mov	r2, r8
 80105b8:	4631      	mov	r1, r6
 80105ba:	4628      	mov	r0, r5
 80105bc:	47b8      	blx	r7
 80105be:	3001      	adds	r0, #1
 80105c0:	d10e      	bne.n	80105e0 <_printf_float+0x418>
 80105c2:	e65e      	b.n	8010282 <_printf_float+0xba>
 80105c4:	2301      	movs	r3, #1
 80105c6:	4652      	mov	r2, sl
 80105c8:	4631      	mov	r1, r6
 80105ca:	4628      	mov	r0, r5
 80105cc:	47b8      	blx	r7
 80105ce:	3001      	adds	r0, #1
 80105d0:	f43f ae57 	beq.w	8010282 <_printf_float+0xba>
 80105d4:	f108 0801 	add.w	r8, r8, #1
 80105d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105da:	3b01      	subs	r3, #1
 80105dc:	4543      	cmp	r3, r8
 80105de:	dcf1      	bgt.n	80105c4 <_printf_float+0x3fc>
 80105e0:	464b      	mov	r3, r9
 80105e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80105e6:	e6de      	b.n	80103a6 <_printf_float+0x1de>
 80105e8:	f04f 0800 	mov.w	r8, #0
 80105ec:	f104 0a1a 	add.w	sl, r4, #26
 80105f0:	e7f2      	b.n	80105d8 <_printf_float+0x410>
 80105f2:	2301      	movs	r3, #1
 80105f4:	e7df      	b.n	80105b6 <_printf_float+0x3ee>
 80105f6:	2301      	movs	r3, #1
 80105f8:	464a      	mov	r2, r9
 80105fa:	4631      	mov	r1, r6
 80105fc:	4628      	mov	r0, r5
 80105fe:	47b8      	blx	r7
 8010600:	3001      	adds	r0, #1
 8010602:	f43f ae3e 	beq.w	8010282 <_printf_float+0xba>
 8010606:	f108 0801 	add.w	r8, r8, #1
 801060a:	68e3      	ldr	r3, [r4, #12]
 801060c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801060e:	1a9b      	subs	r3, r3, r2
 8010610:	4543      	cmp	r3, r8
 8010612:	dcf0      	bgt.n	80105f6 <_printf_float+0x42e>
 8010614:	e6fc      	b.n	8010410 <_printf_float+0x248>
 8010616:	f04f 0800 	mov.w	r8, #0
 801061a:	f104 0919 	add.w	r9, r4, #25
 801061e:	e7f4      	b.n	801060a <_printf_float+0x442>
 8010620:	2900      	cmp	r1, #0
 8010622:	f43f ae8b 	beq.w	801033c <_printf_float+0x174>
 8010626:	2300      	movs	r3, #0
 8010628:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801062c:	ab09      	add	r3, sp, #36	; 0x24
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	ec49 8b10 	vmov	d0, r8, r9
 8010634:	6022      	str	r2, [r4, #0]
 8010636:	f8cd a004 	str.w	sl, [sp, #4]
 801063a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801063e:	4628      	mov	r0, r5
 8010640:	f7ff fd2e 	bl	80100a0 <__cvt>
 8010644:	4680      	mov	r8, r0
 8010646:	e648      	b.n	80102da <_printf_float+0x112>

08010648 <_printf_common>:
 8010648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801064c:	4691      	mov	r9, r2
 801064e:	461f      	mov	r7, r3
 8010650:	688a      	ldr	r2, [r1, #8]
 8010652:	690b      	ldr	r3, [r1, #16]
 8010654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010658:	4293      	cmp	r3, r2
 801065a:	bfb8      	it	lt
 801065c:	4613      	movlt	r3, r2
 801065e:	f8c9 3000 	str.w	r3, [r9]
 8010662:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010666:	4606      	mov	r6, r0
 8010668:	460c      	mov	r4, r1
 801066a:	b112      	cbz	r2, 8010672 <_printf_common+0x2a>
 801066c:	3301      	adds	r3, #1
 801066e:	f8c9 3000 	str.w	r3, [r9]
 8010672:	6823      	ldr	r3, [r4, #0]
 8010674:	0699      	lsls	r1, r3, #26
 8010676:	bf42      	ittt	mi
 8010678:	f8d9 3000 	ldrmi.w	r3, [r9]
 801067c:	3302      	addmi	r3, #2
 801067e:	f8c9 3000 	strmi.w	r3, [r9]
 8010682:	6825      	ldr	r5, [r4, #0]
 8010684:	f015 0506 	ands.w	r5, r5, #6
 8010688:	d107      	bne.n	801069a <_printf_common+0x52>
 801068a:	f104 0a19 	add.w	sl, r4, #25
 801068e:	68e3      	ldr	r3, [r4, #12]
 8010690:	f8d9 2000 	ldr.w	r2, [r9]
 8010694:	1a9b      	subs	r3, r3, r2
 8010696:	42ab      	cmp	r3, r5
 8010698:	dc28      	bgt.n	80106ec <_printf_common+0xa4>
 801069a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801069e:	6822      	ldr	r2, [r4, #0]
 80106a0:	3300      	adds	r3, #0
 80106a2:	bf18      	it	ne
 80106a4:	2301      	movne	r3, #1
 80106a6:	0692      	lsls	r2, r2, #26
 80106a8:	d42d      	bmi.n	8010706 <_printf_common+0xbe>
 80106aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106ae:	4639      	mov	r1, r7
 80106b0:	4630      	mov	r0, r6
 80106b2:	47c0      	blx	r8
 80106b4:	3001      	adds	r0, #1
 80106b6:	d020      	beq.n	80106fa <_printf_common+0xb2>
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	68e5      	ldr	r5, [r4, #12]
 80106bc:	f8d9 2000 	ldr.w	r2, [r9]
 80106c0:	f003 0306 	and.w	r3, r3, #6
 80106c4:	2b04      	cmp	r3, #4
 80106c6:	bf08      	it	eq
 80106c8:	1aad      	subeq	r5, r5, r2
 80106ca:	68a3      	ldr	r3, [r4, #8]
 80106cc:	6922      	ldr	r2, [r4, #16]
 80106ce:	bf0c      	ite	eq
 80106d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106d4:	2500      	movne	r5, #0
 80106d6:	4293      	cmp	r3, r2
 80106d8:	bfc4      	itt	gt
 80106da:	1a9b      	subgt	r3, r3, r2
 80106dc:	18ed      	addgt	r5, r5, r3
 80106de:	f04f 0900 	mov.w	r9, #0
 80106e2:	341a      	adds	r4, #26
 80106e4:	454d      	cmp	r5, r9
 80106e6:	d11a      	bne.n	801071e <_printf_common+0xd6>
 80106e8:	2000      	movs	r0, #0
 80106ea:	e008      	b.n	80106fe <_printf_common+0xb6>
 80106ec:	2301      	movs	r3, #1
 80106ee:	4652      	mov	r2, sl
 80106f0:	4639      	mov	r1, r7
 80106f2:	4630      	mov	r0, r6
 80106f4:	47c0      	blx	r8
 80106f6:	3001      	adds	r0, #1
 80106f8:	d103      	bne.n	8010702 <_printf_common+0xba>
 80106fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010702:	3501      	adds	r5, #1
 8010704:	e7c3      	b.n	801068e <_printf_common+0x46>
 8010706:	18e1      	adds	r1, r4, r3
 8010708:	1c5a      	adds	r2, r3, #1
 801070a:	2030      	movs	r0, #48	; 0x30
 801070c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010710:	4422      	add	r2, r4
 8010712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801071a:	3302      	adds	r3, #2
 801071c:	e7c5      	b.n	80106aa <_printf_common+0x62>
 801071e:	2301      	movs	r3, #1
 8010720:	4622      	mov	r2, r4
 8010722:	4639      	mov	r1, r7
 8010724:	4630      	mov	r0, r6
 8010726:	47c0      	blx	r8
 8010728:	3001      	adds	r0, #1
 801072a:	d0e6      	beq.n	80106fa <_printf_common+0xb2>
 801072c:	f109 0901 	add.w	r9, r9, #1
 8010730:	e7d8      	b.n	80106e4 <_printf_common+0x9c>
	...

08010734 <_printf_i>:
 8010734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010738:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801073c:	460c      	mov	r4, r1
 801073e:	7e09      	ldrb	r1, [r1, #24]
 8010740:	b085      	sub	sp, #20
 8010742:	296e      	cmp	r1, #110	; 0x6e
 8010744:	4617      	mov	r7, r2
 8010746:	4606      	mov	r6, r0
 8010748:	4698      	mov	r8, r3
 801074a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801074c:	f000 80b3 	beq.w	80108b6 <_printf_i+0x182>
 8010750:	d822      	bhi.n	8010798 <_printf_i+0x64>
 8010752:	2963      	cmp	r1, #99	; 0x63
 8010754:	d036      	beq.n	80107c4 <_printf_i+0x90>
 8010756:	d80a      	bhi.n	801076e <_printf_i+0x3a>
 8010758:	2900      	cmp	r1, #0
 801075a:	f000 80b9 	beq.w	80108d0 <_printf_i+0x19c>
 801075e:	2958      	cmp	r1, #88	; 0x58
 8010760:	f000 8083 	beq.w	801086a <_printf_i+0x136>
 8010764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010768:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801076c:	e032      	b.n	80107d4 <_printf_i+0xa0>
 801076e:	2964      	cmp	r1, #100	; 0x64
 8010770:	d001      	beq.n	8010776 <_printf_i+0x42>
 8010772:	2969      	cmp	r1, #105	; 0x69
 8010774:	d1f6      	bne.n	8010764 <_printf_i+0x30>
 8010776:	6820      	ldr	r0, [r4, #0]
 8010778:	6813      	ldr	r3, [r2, #0]
 801077a:	0605      	lsls	r5, r0, #24
 801077c:	f103 0104 	add.w	r1, r3, #4
 8010780:	d52a      	bpl.n	80107d8 <_printf_i+0xa4>
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6011      	str	r1, [r2, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	da03      	bge.n	8010792 <_printf_i+0x5e>
 801078a:	222d      	movs	r2, #45	; 0x2d
 801078c:	425b      	negs	r3, r3
 801078e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010792:	486f      	ldr	r0, [pc, #444]	; (8010950 <_printf_i+0x21c>)
 8010794:	220a      	movs	r2, #10
 8010796:	e039      	b.n	801080c <_printf_i+0xd8>
 8010798:	2973      	cmp	r1, #115	; 0x73
 801079a:	f000 809d 	beq.w	80108d8 <_printf_i+0x1a4>
 801079e:	d808      	bhi.n	80107b2 <_printf_i+0x7e>
 80107a0:	296f      	cmp	r1, #111	; 0x6f
 80107a2:	d020      	beq.n	80107e6 <_printf_i+0xb2>
 80107a4:	2970      	cmp	r1, #112	; 0x70
 80107a6:	d1dd      	bne.n	8010764 <_printf_i+0x30>
 80107a8:	6823      	ldr	r3, [r4, #0]
 80107aa:	f043 0320 	orr.w	r3, r3, #32
 80107ae:	6023      	str	r3, [r4, #0]
 80107b0:	e003      	b.n	80107ba <_printf_i+0x86>
 80107b2:	2975      	cmp	r1, #117	; 0x75
 80107b4:	d017      	beq.n	80107e6 <_printf_i+0xb2>
 80107b6:	2978      	cmp	r1, #120	; 0x78
 80107b8:	d1d4      	bne.n	8010764 <_printf_i+0x30>
 80107ba:	2378      	movs	r3, #120	; 0x78
 80107bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107c0:	4864      	ldr	r0, [pc, #400]	; (8010954 <_printf_i+0x220>)
 80107c2:	e055      	b.n	8010870 <_printf_i+0x13c>
 80107c4:	6813      	ldr	r3, [r2, #0]
 80107c6:	1d19      	adds	r1, r3, #4
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	6011      	str	r1, [r2, #0]
 80107cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107d4:	2301      	movs	r3, #1
 80107d6:	e08c      	b.n	80108f2 <_printf_i+0x1be>
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	6011      	str	r1, [r2, #0]
 80107dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80107e0:	bf18      	it	ne
 80107e2:	b21b      	sxthne	r3, r3
 80107e4:	e7cf      	b.n	8010786 <_printf_i+0x52>
 80107e6:	6813      	ldr	r3, [r2, #0]
 80107e8:	6825      	ldr	r5, [r4, #0]
 80107ea:	1d18      	adds	r0, r3, #4
 80107ec:	6010      	str	r0, [r2, #0]
 80107ee:	0628      	lsls	r0, r5, #24
 80107f0:	d501      	bpl.n	80107f6 <_printf_i+0xc2>
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	e002      	b.n	80107fc <_printf_i+0xc8>
 80107f6:	0668      	lsls	r0, r5, #25
 80107f8:	d5fb      	bpl.n	80107f2 <_printf_i+0xbe>
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	4854      	ldr	r0, [pc, #336]	; (8010950 <_printf_i+0x21c>)
 80107fe:	296f      	cmp	r1, #111	; 0x6f
 8010800:	bf14      	ite	ne
 8010802:	220a      	movne	r2, #10
 8010804:	2208      	moveq	r2, #8
 8010806:	2100      	movs	r1, #0
 8010808:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801080c:	6865      	ldr	r5, [r4, #4]
 801080e:	60a5      	str	r5, [r4, #8]
 8010810:	2d00      	cmp	r5, #0
 8010812:	f2c0 8095 	blt.w	8010940 <_printf_i+0x20c>
 8010816:	6821      	ldr	r1, [r4, #0]
 8010818:	f021 0104 	bic.w	r1, r1, #4
 801081c:	6021      	str	r1, [r4, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d13d      	bne.n	801089e <_printf_i+0x16a>
 8010822:	2d00      	cmp	r5, #0
 8010824:	f040 808e 	bne.w	8010944 <_printf_i+0x210>
 8010828:	4665      	mov	r5, ip
 801082a:	2a08      	cmp	r2, #8
 801082c:	d10b      	bne.n	8010846 <_printf_i+0x112>
 801082e:	6823      	ldr	r3, [r4, #0]
 8010830:	07db      	lsls	r3, r3, #31
 8010832:	d508      	bpl.n	8010846 <_printf_i+0x112>
 8010834:	6923      	ldr	r3, [r4, #16]
 8010836:	6862      	ldr	r2, [r4, #4]
 8010838:	429a      	cmp	r2, r3
 801083a:	bfde      	ittt	le
 801083c:	2330      	movle	r3, #48	; 0x30
 801083e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010842:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010846:	ebac 0305 	sub.w	r3, ip, r5
 801084a:	6123      	str	r3, [r4, #16]
 801084c:	f8cd 8000 	str.w	r8, [sp]
 8010850:	463b      	mov	r3, r7
 8010852:	aa03      	add	r2, sp, #12
 8010854:	4621      	mov	r1, r4
 8010856:	4630      	mov	r0, r6
 8010858:	f7ff fef6 	bl	8010648 <_printf_common>
 801085c:	3001      	adds	r0, #1
 801085e:	d14d      	bne.n	80108fc <_printf_i+0x1c8>
 8010860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010864:	b005      	add	sp, #20
 8010866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801086a:	4839      	ldr	r0, [pc, #228]	; (8010950 <_printf_i+0x21c>)
 801086c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010870:	6813      	ldr	r3, [r2, #0]
 8010872:	6821      	ldr	r1, [r4, #0]
 8010874:	1d1d      	adds	r5, r3, #4
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6015      	str	r5, [r2, #0]
 801087a:	060a      	lsls	r2, r1, #24
 801087c:	d50b      	bpl.n	8010896 <_printf_i+0x162>
 801087e:	07ca      	lsls	r2, r1, #31
 8010880:	bf44      	itt	mi
 8010882:	f041 0120 	orrmi.w	r1, r1, #32
 8010886:	6021      	strmi	r1, [r4, #0]
 8010888:	b91b      	cbnz	r3, 8010892 <_printf_i+0x15e>
 801088a:	6822      	ldr	r2, [r4, #0]
 801088c:	f022 0220 	bic.w	r2, r2, #32
 8010890:	6022      	str	r2, [r4, #0]
 8010892:	2210      	movs	r2, #16
 8010894:	e7b7      	b.n	8010806 <_printf_i+0xd2>
 8010896:	064d      	lsls	r5, r1, #25
 8010898:	bf48      	it	mi
 801089a:	b29b      	uxthmi	r3, r3
 801089c:	e7ef      	b.n	801087e <_printf_i+0x14a>
 801089e:	4665      	mov	r5, ip
 80108a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80108a4:	fb02 3311 	mls	r3, r2, r1, r3
 80108a8:	5cc3      	ldrb	r3, [r0, r3]
 80108aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80108ae:	460b      	mov	r3, r1
 80108b0:	2900      	cmp	r1, #0
 80108b2:	d1f5      	bne.n	80108a0 <_printf_i+0x16c>
 80108b4:	e7b9      	b.n	801082a <_printf_i+0xf6>
 80108b6:	6813      	ldr	r3, [r2, #0]
 80108b8:	6825      	ldr	r5, [r4, #0]
 80108ba:	6961      	ldr	r1, [r4, #20]
 80108bc:	1d18      	adds	r0, r3, #4
 80108be:	6010      	str	r0, [r2, #0]
 80108c0:	0628      	lsls	r0, r5, #24
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	d501      	bpl.n	80108ca <_printf_i+0x196>
 80108c6:	6019      	str	r1, [r3, #0]
 80108c8:	e002      	b.n	80108d0 <_printf_i+0x19c>
 80108ca:	066a      	lsls	r2, r5, #25
 80108cc:	d5fb      	bpl.n	80108c6 <_printf_i+0x192>
 80108ce:	8019      	strh	r1, [r3, #0]
 80108d0:	2300      	movs	r3, #0
 80108d2:	6123      	str	r3, [r4, #16]
 80108d4:	4665      	mov	r5, ip
 80108d6:	e7b9      	b.n	801084c <_printf_i+0x118>
 80108d8:	6813      	ldr	r3, [r2, #0]
 80108da:	1d19      	adds	r1, r3, #4
 80108dc:	6011      	str	r1, [r2, #0]
 80108de:	681d      	ldr	r5, [r3, #0]
 80108e0:	6862      	ldr	r2, [r4, #4]
 80108e2:	2100      	movs	r1, #0
 80108e4:	4628      	mov	r0, r5
 80108e6:	f7ef fca3 	bl	8000230 <memchr>
 80108ea:	b108      	cbz	r0, 80108f0 <_printf_i+0x1bc>
 80108ec:	1b40      	subs	r0, r0, r5
 80108ee:	6060      	str	r0, [r4, #4]
 80108f0:	6863      	ldr	r3, [r4, #4]
 80108f2:	6123      	str	r3, [r4, #16]
 80108f4:	2300      	movs	r3, #0
 80108f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108fa:	e7a7      	b.n	801084c <_printf_i+0x118>
 80108fc:	6923      	ldr	r3, [r4, #16]
 80108fe:	462a      	mov	r2, r5
 8010900:	4639      	mov	r1, r7
 8010902:	4630      	mov	r0, r6
 8010904:	47c0      	blx	r8
 8010906:	3001      	adds	r0, #1
 8010908:	d0aa      	beq.n	8010860 <_printf_i+0x12c>
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	079b      	lsls	r3, r3, #30
 801090e:	d413      	bmi.n	8010938 <_printf_i+0x204>
 8010910:	68e0      	ldr	r0, [r4, #12]
 8010912:	9b03      	ldr	r3, [sp, #12]
 8010914:	4298      	cmp	r0, r3
 8010916:	bfb8      	it	lt
 8010918:	4618      	movlt	r0, r3
 801091a:	e7a3      	b.n	8010864 <_printf_i+0x130>
 801091c:	2301      	movs	r3, #1
 801091e:	464a      	mov	r2, r9
 8010920:	4639      	mov	r1, r7
 8010922:	4630      	mov	r0, r6
 8010924:	47c0      	blx	r8
 8010926:	3001      	adds	r0, #1
 8010928:	d09a      	beq.n	8010860 <_printf_i+0x12c>
 801092a:	3501      	adds	r5, #1
 801092c:	68e3      	ldr	r3, [r4, #12]
 801092e:	9a03      	ldr	r2, [sp, #12]
 8010930:	1a9b      	subs	r3, r3, r2
 8010932:	42ab      	cmp	r3, r5
 8010934:	dcf2      	bgt.n	801091c <_printf_i+0x1e8>
 8010936:	e7eb      	b.n	8010910 <_printf_i+0x1dc>
 8010938:	2500      	movs	r5, #0
 801093a:	f104 0919 	add.w	r9, r4, #25
 801093e:	e7f5      	b.n	801092c <_printf_i+0x1f8>
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1ac      	bne.n	801089e <_printf_i+0x16a>
 8010944:	7803      	ldrb	r3, [r0, #0]
 8010946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801094a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801094e:	e76c      	b.n	801082a <_printf_i+0xf6>
 8010950:	08015294 	.word	0x08015294
 8010954:	080152a5 	.word	0x080152a5

08010958 <iprintf>:
 8010958:	b40f      	push	{r0, r1, r2, r3}
 801095a:	4b0a      	ldr	r3, [pc, #40]	; (8010984 <iprintf+0x2c>)
 801095c:	b513      	push	{r0, r1, r4, lr}
 801095e:	681c      	ldr	r4, [r3, #0]
 8010960:	b124      	cbz	r4, 801096c <iprintf+0x14>
 8010962:	69a3      	ldr	r3, [r4, #24]
 8010964:	b913      	cbnz	r3, 801096c <iprintf+0x14>
 8010966:	4620      	mov	r0, r4
 8010968:	f001 f8aa 	bl	8011ac0 <__sinit>
 801096c:	ab05      	add	r3, sp, #20
 801096e:	9a04      	ldr	r2, [sp, #16]
 8010970:	68a1      	ldr	r1, [r4, #8]
 8010972:	9301      	str	r3, [sp, #4]
 8010974:	4620      	mov	r0, r4
 8010976:	f001 febf 	bl	80126f8 <_vfiprintf_r>
 801097a:	b002      	add	sp, #8
 801097c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010980:	b004      	add	sp, #16
 8010982:	4770      	bx	lr
 8010984:	20001c38 	.word	0x20001c38

08010988 <_puts_r>:
 8010988:	b570      	push	{r4, r5, r6, lr}
 801098a:	460e      	mov	r6, r1
 801098c:	4605      	mov	r5, r0
 801098e:	b118      	cbz	r0, 8010998 <_puts_r+0x10>
 8010990:	6983      	ldr	r3, [r0, #24]
 8010992:	b90b      	cbnz	r3, 8010998 <_puts_r+0x10>
 8010994:	f001 f894 	bl	8011ac0 <__sinit>
 8010998:	69ab      	ldr	r3, [r5, #24]
 801099a:	68ac      	ldr	r4, [r5, #8]
 801099c:	b913      	cbnz	r3, 80109a4 <_puts_r+0x1c>
 801099e:	4628      	mov	r0, r5
 80109a0:	f001 f88e 	bl	8011ac0 <__sinit>
 80109a4:	4b23      	ldr	r3, [pc, #140]	; (8010a34 <_puts_r+0xac>)
 80109a6:	429c      	cmp	r4, r3
 80109a8:	d117      	bne.n	80109da <_puts_r+0x52>
 80109aa:	686c      	ldr	r4, [r5, #4]
 80109ac:	89a3      	ldrh	r3, [r4, #12]
 80109ae:	071b      	lsls	r3, r3, #28
 80109b0:	d51d      	bpl.n	80109ee <_puts_r+0x66>
 80109b2:	6923      	ldr	r3, [r4, #16]
 80109b4:	b1db      	cbz	r3, 80109ee <_puts_r+0x66>
 80109b6:	3e01      	subs	r6, #1
 80109b8:	68a3      	ldr	r3, [r4, #8]
 80109ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80109be:	3b01      	subs	r3, #1
 80109c0:	60a3      	str	r3, [r4, #8]
 80109c2:	b9e9      	cbnz	r1, 8010a00 <_puts_r+0x78>
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	da2e      	bge.n	8010a26 <_puts_r+0x9e>
 80109c8:	4622      	mov	r2, r4
 80109ca:	210a      	movs	r1, #10
 80109cc:	4628      	mov	r0, r5
 80109ce:	f000 f883 	bl	8010ad8 <__swbuf_r>
 80109d2:	3001      	adds	r0, #1
 80109d4:	d011      	beq.n	80109fa <_puts_r+0x72>
 80109d6:	200a      	movs	r0, #10
 80109d8:	e011      	b.n	80109fe <_puts_r+0x76>
 80109da:	4b17      	ldr	r3, [pc, #92]	; (8010a38 <_puts_r+0xb0>)
 80109dc:	429c      	cmp	r4, r3
 80109de:	d101      	bne.n	80109e4 <_puts_r+0x5c>
 80109e0:	68ac      	ldr	r4, [r5, #8]
 80109e2:	e7e3      	b.n	80109ac <_puts_r+0x24>
 80109e4:	4b15      	ldr	r3, [pc, #84]	; (8010a3c <_puts_r+0xb4>)
 80109e6:	429c      	cmp	r4, r3
 80109e8:	bf08      	it	eq
 80109ea:	68ec      	ldreq	r4, [r5, #12]
 80109ec:	e7de      	b.n	80109ac <_puts_r+0x24>
 80109ee:	4621      	mov	r1, r4
 80109f0:	4628      	mov	r0, r5
 80109f2:	f000 f8c3 	bl	8010b7c <__swsetup_r>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d0dd      	beq.n	80109b6 <_puts_r+0x2e>
 80109fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109fe:	bd70      	pop	{r4, r5, r6, pc}
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	da04      	bge.n	8010a0e <_puts_r+0x86>
 8010a04:	69a2      	ldr	r2, [r4, #24]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	dc06      	bgt.n	8010a18 <_puts_r+0x90>
 8010a0a:	290a      	cmp	r1, #10
 8010a0c:	d004      	beq.n	8010a18 <_puts_r+0x90>
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	1c5a      	adds	r2, r3, #1
 8010a12:	6022      	str	r2, [r4, #0]
 8010a14:	7019      	strb	r1, [r3, #0]
 8010a16:	e7cf      	b.n	80109b8 <_puts_r+0x30>
 8010a18:	4622      	mov	r2, r4
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f000 f85c 	bl	8010ad8 <__swbuf_r>
 8010a20:	3001      	adds	r0, #1
 8010a22:	d1c9      	bne.n	80109b8 <_puts_r+0x30>
 8010a24:	e7e9      	b.n	80109fa <_puts_r+0x72>
 8010a26:	6823      	ldr	r3, [r4, #0]
 8010a28:	200a      	movs	r0, #10
 8010a2a:	1c5a      	adds	r2, r3, #1
 8010a2c:	6022      	str	r2, [r4, #0]
 8010a2e:	7018      	strb	r0, [r3, #0]
 8010a30:	e7e5      	b.n	80109fe <_puts_r+0x76>
 8010a32:	bf00      	nop
 8010a34:	080152e4 	.word	0x080152e4
 8010a38:	08015304 	.word	0x08015304
 8010a3c:	080152c4 	.word	0x080152c4

08010a40 <puts>:
 8010a40:	4b02      	ldr	r3, [pc, #8]	; (8010a4c <puts+0xc>)
 8010a42:	4601      	mov	r1, r0
 8010a44:	6818      	ldr	r0, [r3, #0]
 8010a46:	f7ff bf9f 	b.w	8010988 <_puts_r>
 8010a4a:	bf00      	nop
 8010a4c:	20001c38 	.word	0x20001c38

08010a50 <sniprintf>:
 8010a50:	b40c      	push	{r2, r3}
 8010a52:	b530      	push	{r4, r5, lr}
 8010a54:	4b17      	ldr	r3, [pc, #92]	; (8010ab4 <sniprintf+0x64>)
 8010a56:	1e0c      	subs	r4, r1, #0
 8010a58:	b09d      	sub	sp, #116	; 0x74
 8010a5a:	681d      	ldr	r5, [r3, #0]
 8010a5c:	da08      	bge.n	8010a70 <sniprintf+0x20>
 8010a5e:	238b      	movs	r3, #139	; 0x8b
 8010a60:	602b      	str	r3, [r5, #0]
 8010a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a66:	b01d      	add	sp, #116	; 0x74
 8010a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a6c:	b002      	add	sp, #8
 8010a6e:	4770      	bx	lr
 8010a70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010a74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a78:	bf14      	ite	ne
 8010a7a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010a7e:	4623      	moveq	r3, r4
 8010a80:	9304      	str	r3, [sp, #16]
 8010a82:	9307      	str	r3, [sp, #28]
 8010a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010a88:	9002      	str	r0, [sp, #8]
 8010a8a:	9006      	str	r0, [sp, #24]
 8010a8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010a92:	ab21      	add	r3, sp, #132	; 0x84
 8010a94:	a902      	add	r1, sp, #8
 8010a96:	4628      	mov	r0, r5
 8010a98:	9301      	str	r3, [sp, #4]
 8010a9a:	f001 fd0b 	bl	80124b4 <_svfiprintf_r>
 8010a9e:	1c43      	adds	r3, r0, #1
 8010aa0:	bfbc      	itt	lt
 8010aa2:	238b      	movlt	r3, #139	; 0x8b
 8010aa4:	602b      	strlt	r3, [r5, #0]
 8010aa6:	2c00      	cmp	r4, #0
 8010aa8:	d0dd      	beq.n	8010a66 <sniprintf+0x16>
 8010aaa:	9b02      	ldr	r3, [sp, #8]
 8010aac:	2200      	movs	r2, #0
 8010aae:	701a      	strb	r2, [r3, #0]
 8010ab0:	e7d9      	b.n	8010a66 <sniprintf+0x16>
 8010ab2:	bf00      	nop
 8010ab4:	20001c38 	.word	0x20001c38

08010ab8 <strcat>:
 8010ab8:	b510      	push	{r4, lr}
 8010aba:	4603      	mov	r3, r0
 8010abc:	781a      	ldrb	r2, [r3, #0]
 8010abe:	1c5c      	adds	r4, r3, #1
 8010ac0:	b93a      	cbnz	r2, 8010ad2 <strcat+0x1a>
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ac8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010acc:	2a00      	cmp	r2, #0
 8010ace:	d1f9      	bne.n	8010ac4 <strcat+0xc>
 8010ad0:	bd10      	pop	{r4, pc}
 8010ad2:	4623      	mov	r3, r4
 8010ad4:	e7f2      	b.n	8010abc <strcat+0x4>
	...

08010ad8 <__swbuf_r>:
 8010ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ada:	460e      	mov	r6, r1
 8010adc:	4614      	mov	r4, r2
 8010ade:	4605      	mov	r5, r0
 8010ae0:	b118      	cbz	r0, 8010aea <__swbuf_r+0x12>
 8010ae2:	6983      	ldr	r3, [r0, #24]
 8010ae4:	b90b      	cbnz	r3, 8010aea <__swbuf_r+0x12>
 8010ae6:	f000 ffeb 	bl	8011ac0 <__sinit>
 8010aea:	4b21      	ldr	r3, [pc, #132]	; (8010b70 <__swbuf_r+0x98>)
 8010aec:	429c      	cmp	r4, r3
 8010aee:	d12a      	bne.n	8010b46 <__swbuf_r+0x6e>
 8010af0:	686c      	ldr	r4, [r5, #4]
 8010af2:	69a3      	ldr	r3, [r4, #24]
 8010af4:	60a3      	str	r3, [r4, #8]
 8010af6:	89a3      	ldrh	r3, [r4, #12]
 8010af8:	071a      	lsls	r2, r3, #28
 8010afa:	d52e      	bpl.n	8010b5a <__swbuf_r+0x82>
 8010afc:	6923      	ldr	r3, [r4, #16]
 8010afe:	b363      	cbz	r3, 8010b5a <__swbuf_r+0x82>
 8010b00:	6923      	ldr	r3, [r4, #16]
 8010b02:	6820      	ldr	r0, [r4, #0]
 8010b04:	1ac0      	subs	r0, r0, r3
 8010b06:	6963      	ldr	r3, [r4, #20]
 8010b08:	b2f6      	uxtb	r6, r6
 8010b0a:	4283      	cmp	r3, r0
 8010b0c:	4637      	mov	r7, r6
 8010b0e:	dc04      	bgt.n	8010b1a <__swbuf_r+0x42>
 8010b10:	4621      	mov	r1, r4
 8010b12:	4628      	mov	r0, r5
 8010b14:	f000 ff6a 	bl	80119ec <_fflush_r>
 8010b18:	bb28      	cbnz	r0, 8010b66 <__swbuf_r+0x8e>
 8010b1a:	68a3      	ldr	r3, [r4, #8]
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	60a3      	str	r3, [r4, #8]
 8010b20:	6823      	ldr	r3, [r4, #0]
 8010b22:	1c5a      	adds	r2, r3, #1
 8010b24:	6022      	str	r2, [r4, #0]
 8010b26:	701e      	strb	r6, [r3, #0]
 8010b28:	6963      	ldr	r3, [r4, #20]
 8010b2a:	3001      	adds	r0, #1
 8010b2c:	4283      	cmp	r3, r0
 8010b2e:	d004      	beq.n	8010b3a <__swbuf_r+0x62>
 8010b30:	89a3      	ldrh	r3, [r4, #12]
 8010b32:	07db      	lsls	r3, r3, #31
 8010b34:	d519      	bpl.n	8010b6a <__swbuf_r+0x92>
 8010b36:	2e0a      	cmp	r6, #10
 8010b38:	d117      	bne.n	8010b6a <__swbuf_r+0x92>
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	f000 ff55 	bl	80119ec <_fflush_r>
 8010b42:	b190      	cbz	r0, 8010b6a <__swbuf_r+0x92>
 8010b44:	e00f      	b.n	8010b66 <__swbuf_r+0x8e>
 8010b46:	4b0b      	ldr	r3, [pc, #44]	; (8010b74 <__swbuf_r+0x9c>)
 8010b48:	429c      	cmp	r4, r3
 8010b4a:	d101      	bne.n	8010b50 <__swbuf_r+0x78>
 8010b4c:	68ac      	ldr	r4, [r5, #8]
 8010b4e:	e7d0      	b.n	8010af2 <__swbuf_r+0x1a>
 8010b50:	4b09      	ldr	r3, [pc, #36]	; (8010b78 <__swbuf_r+0xa0>)
 8010b52:	429c      	cmp	r4, r3
 8010b54:	bf08      	it	eq
 8010b56:	68ec      	ldreq	r4, [r5, #12]
 8010b58:	e7cb      	b.n	8010af2 <__swbuf_r+0x1a>
 8010b5a:	4621      	mov	r1, r4
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	f000 f80d 	bl	8010b7c <__swsetup_r>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d0cc      	beq.n	8010b00 <__swbuf_r+0x28>
 8010b66:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010b6a:	4638      	mov	r0, r7
 8010b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	080152e4 	.word	0x080152e4
 8010b74:	08015304 	.word	0x08015304
 8010b78:	080152c4 	.word	0x080152c4

08010b7c <__swsetup_r>:
 8010b7c:	4b32      	ldr	r3, [pc, #200]	; (8010c48 <__swsetup_r+0xcc>)
 8010b7e:	b570      	push	{r4, r5, r6, lr}
 8010b80:	681d      	ldr	r5, [r3, #0]
 8010b82:	4606      	mov	r6, r0
 8010b84:	460c      	mov	r4, r1
 8010b86:	b125      	cbz	r5, 8010b92 <__swsetup_r+0x16>
 8010b88:	69ab      	ldr	r3, [r5, #24]
 8010b8a:	b913      	cbnz	r3, 8010b92 <__swsetup_r+0x16>
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f000 ff97 	bl	8011ac0 <__sinit>
 8010b92:	4b2e      	ldr	r3, [pc, #184]	; (8010c4c <__swsetup_r+0xd0>)
 8010b94:	429c      	cmp	r4, r3
 8010b96:	d10f      	bne.n	8010bb8 <__swsetup_r+0x3c>
 8010b98:	686c      	ldr	r4, [r5, #4]
 8010b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b9e:	b29a      	uxth	r2, r3
 8010ba0:	0715      	lsls	r5, r2, #28
 8010ba2:	d42c      	bmi.n	8010bfe <__swsetup_r+0x82>
 8010ba4:	06d0      	lsls	r0, r2, #27
 8010ba6:	d411      	bmi.n	8010bcc <__swsetup_r+0x50>
 8010ba8:	2209      	movs	r2, #9
 8010baa:	6032      	str	r2, [r6, #0]
 8010bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bb0:	81a3      	strh	r3, [r4, #12]
 8010bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bb6:	e03e      	b.n	8010c36 <__swsetup_r+0xba>
 8010bb8:	4b25      	ldr	r3, [pc, #148]	; (8010c50 <__swsetup_r+0xd4>)
 8010bba:	429c      	cmp	r4, r3
 8010bbc:	d101      	bne.n	8010bc2 <__swsetup_r+0x46>
 8010bbe:	68ac      	ldr	r4, [r5, #8]
 8010bc0:	e7eb      	b.n	8010b9a <__swsetup_r+0x1e>
 8010bc2:	4b24      	ldr	r3, [pc, #144]	; (8010c54 <__swsetup_r+0xd8>)
 8010bc4:	429c      	cmp	r4, r3
 8010bc6:	bf08      	it	eq
 8010bc8:	68ec      	ldreq	r4, [r5, #12]
 8010bca:	e7e6      	b.n	8010b9a <__swsetup_r+0x1e>
 8010bcc:	0751      	lsls	r1, r2, #29
 8010bce:	d512      	bpl.n	8010bf6 <__swsetup_r+0x7a>
 8010bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bd2:	b141      	cbz	r1, 8010be6 <__swsetup_r+0x6a>
 8010bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bd8:	4299      	cmp	r1, r3
 8010bda:	d002      	beq.n	8010be2 <__swsetup_r+0x66>
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f001 fb67 	bl	80122b0 <_free_r>
 8010be2:	2300      	movs	r3, #0
 8010be4:	6363      	str	r3, [r4, #52]	; 0x34
 8010be6:	89a3      	ldrh	r3, [r4, #12]
 8010be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010bec:	81a3      	strh	r3, [r4, #12]
 8010bee:	2300      	movs	r3, #0
 8010bf0:	6063      	str	r3, [r4, #4]
 8010bf2:	6923      	ldr	r3, [r4, #16]
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	89a3      	ldrh	r3, [r4, #12]
 8010bf8:	f043 0308 	orr.w	r3, r3, #8
 8010bfc:	81a3      	strh	r3, [r4, #12]
 8010bfe:	6923      	ldr	r3, [r4, #16]
 8010c00:	b94b      	cbnz	r3, 8010c16 <__swsetup_r+0x9a>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c0c:	d003      	beq.n	8010c16 <__swsetup_r+0x9a>
 8010c0e:	4621      	mov	r1, r4
 8010c10:	4630      	mov	r0, r6
 8010c12:	f001 f811 	bl	8011c38 <__smakebuf_r>
 8010c16:	89a2      	ldrh	r2, [r4, #12]
 8010c18:	f012 0301 	ands.w	r3, r2, #1
 8010c1c:	d00c      	beq.n	8010c38 <__swsetup_r+0xbc>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	60a3      	str	r3, [r4, #8]
 8010c22:	6963      	ldr	r3, [r4, #20]
 8010c24:	425b      	negs	r3, r3
 8010c26:	61a3      	str	r3, [r4, #24]
 8010c28:	6923      	ldr	r3, [r4, #16]
 8010c2a:	b953      	cbnz	r3, 8010c42 <__swsetup_r+0xc6>
 8010c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010c34:	d1ba      	bne.n	8010bac <__swsetup_r+0x30>
 8010c36:	bd70      	pop	{r4, r5, r6, pc}
 8010c38:	0792      	lsls	r2, r2, #30
 8010c3a:	bf58      	it	pl
 8010c3c:	6963      	ldrpl	r3, [r4, #20]
 8010c3e:	60a3      	str	r3, [r4, #8]
 8010c40:	e7f2      	b.n	8010c28 <__swsetup_r+0xac>
 8010c42:	2000      	movs	r0, #0
 8010c44:	e7f7      	b.n	8010c36 <__swsetup_r+0xba>
 8010c46:	bf00      	nop
 8010c48:	20001c38 	.word	0x20001c38
 8010c4c:	080152e4 	.word	0x080152e4
 8010c50:	08015304 	.word	0x08015304
 8010c54:	080152c4 	.word	0x080152c4

08010c58 <quorem>:
 8010c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	6903      	ldr	r3, [r0, #16]
 8010c5e:	690c      	ldr	r4, [r1, #16]
 8010c60:	42a3      	cmp	r3, r4
 8010c62:	4680      	mov	r8, r0
 8010c64:	f2c0 8082 	blt.w	8010d6c <quorem+0x114>
 8010c68:	3c01      	subs	r4, #1
 8010c6a:	f101 0714 	add.w	r7, r1, #20
 8010c6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010c72:	f100 0614 	add.w	r6, r0, #20
 8010c76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010c7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010c7e:	eb06 030c 	add.w	r3, r6, ip
 8010c82:	3501      	adds	r5, #1
 8010c84:	eb07 090c 	add.w	r9, r7, ip
 8010c88:	9301      	str	r3, [sp, #4]
 8010c8a:	fbb0 f5f5 	udiv	r5, r0, r5
 8010c8e:	b395      	cbz	r5, 8010cf6 <quorem+0x9e>
 8010c90:	f04f 0a00 	mov.w	sl, #0
 8010c94:	4638      	mov	r0, r7
 8010c96:	46b6      	mov	lr, r6
 8010c98:	46d3      	mov	fp, sl
 8010c9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8010c9e:	b293      	uxth	r3, r2
 8010ca0:	fb05 a303 	mla	r3, r5, r3, sl
 8010ca4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	ebab 0303 	sub.w	r3, fp, r3
 8010cae:	0c12      	lsrs	r2, r2, #16
 8010cb0:	f8de b000 	ldr.w	fp, [lr]
 8010cb4:	fb05 a202 	mla	r2, r5, r2, sl
 8010cb8:	fa13 f38b 	uxtah	r3, r3, fp
 8010cbc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010cc0:	fa1f fb82 	uxth.w	fp, r2
 8010cc4:	f8de 2000 	ldr.w	r2, [lr]
 8010cc8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010cd6:	4581      	cmp	r9, r0
 8010cd8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010cdc:	f84e 3b04 	str.w	r3, [lr], #4
 8010ce0:	d2db      	bcs.n	8010c9a <quorem+0x42>
 8010ce2:	f856 300c 	ldr.w	r3, [r6, ip]
 8010ce6:	b933      	cbnz	r3, 8010cf6 <quorem+0x9e>
 8010ce8:	9b01      	ldr	r3, [sp, #4]
 8010cea:	3b04      	subs	r3, #4
 8010cec:	429e      	cmp	r6, r3
 8010cee:	461a      	mov	r2, r3
 8010cf0:	d330      	bcc.n	8010d54 <quorem+0xfc>
 8010cf2:	f8c8 4010 	str.w	r4, [r8, #16]
 8010cf6:	4640      	mov	r0, r8
 8010cf8:	f001 fa06 	bl	8012108 <__mcmp>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	db25      	blt.n	8010d4c <quorem+0xf4>
 8010d00:	3501      	adds	r5, #1
 8010d02:	4630      	mov	r0, r6
 8010d04:	f04f 0c00 	mov.w	ip, #0
 8010d08:	f857 2b04 	ldr.w	r2, [r7], #4
 8010d0c:	f8d0 e000 	ldr.w	lr, [r0]
 8010d10:	b293      	uxth	r3, r2
 8010d12:	ebac 0303 	sub.w	r3, ip, r3
 8010d16:	0c12      	lsrs	r2, r2, #16
 8010d18:	fa13 f38e 	uxtah	r3, r3, lr
 8010d1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d2a:	45b9      	cmp	r9, r7
 8010d2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010d30:	f840 3b04 	str.w	r3, [r0], #4
 8010d34:	d2e8      	bcs.n	8010d08 <quorem+0xb0>
 8010d36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010d3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010d3e:	b92a      	cbnz	r2, 8010d4c <quorem+0xf4>
 8010d40:	3b04      	subs	r3, #4
 8010d42:	429e      	cmp	r6, r3
 8010d44:	461a      	mov	r2, r3
 8010d46:	d30b      	bcc.n	8010d60 <quorem+0x108>
 8010d48:	f8c8 4010 	str.w	r4, [r8, #16]
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	b003      	add	sp, #12
 8010d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d54:	6812      	ldr	r2, [r2, #0]
 8010d56:	3b04      	subs	r3, #4
 8010d58:	2a00      	cmp	r2, #0
 8010d5a:	d1ca      	bne.n	8010cf2 <quorem+0x9a>
 8010d5c:	3c01      	subs	r4, #1
 8010d5e:	e7c5      	b.n	8010cec <quorem+0x94>
 8010d60:	6812      	ldr	r2, [r2, #0]
 8010d62:	3b04      	subs	r3, #4
 8010d64:	2a00      	cmp	r2, #0
 8010d66:	d1ef      	bne.n	8010d48 <quorem+0xf0>
 8010d68:	3c01      	subs	r4, #1
 8010d6a:	e7ea      	b.n	8010d42 <quorem+0xea>
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	e7ee      	b.n	8010d4e <quorem+0xf6>

08010d70 <_dtoa_r>:
 8010d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d74:	ec57 6b10 	vmov	r6, r7, d0
 8010d78:	b097      	sub	sp, #92	; 0x5c
 8010d7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010d7c:	9106      	str	r1, [sp, #24]
 8010d7e:	4604      	mov	r4, r0
 8010d80:	920b      	str	r2, [sp, #44]	; 0x2c
 8010d82:	9312      	str	r3, [sp, #72]	; 0x48
 8010d84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010d88:	e9cd 6700 	strd	r6, r7, [sp]
 8010d8c:	b93d      	cbnz	r5, 8010d9e <_dtoa_r+0x2e>
 8010d8e:	2010      	movs	r0, #16
 8010d90:	f000 ff92 	bl	8011cb8 <malloc>
 8010d94:	6260      	str	r0, [r4, #36]	; 0x24
 8010d96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d9a:	6005      	str	r5, [r0, #0]
 8010d9c:	60c5      	str	r5, [r0, #12]
 8010d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010da0:	6819      	ldr	r1, [r3, #0]
 8010da2:	b151      	cbz	r1, 8010dba <_dtoa_r+0x4a>
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	604a      	str	r2, [r1, #4]
 8010da8:	2301      	movs	r3, #1
 8010daa:	4093      	lsls	r3, r2
 8010dac:	608b      	str	r3, [r1, #8]
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 ffc9 	bl	8011d46 <_Bfree>
 8010db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010db6:	2200      	movs	r2, #0
 8010db8:	601a      	str	r2, [r3, #0]
 8010dba:	1e3b      	subs	r3, r7, #0
 8010dbc:	bfbb      	ittet	lt
 8010dbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010dc2:	9301      	strlt	r3, [sp, #4]
 8010dc4:	2300      	movge	r3, #0
 8010dc6:	2201      	movlt	r2, #1
 8010dc8:	bfac      	ite	ge
 8010dca:	f8c8 3000 	strge.w	r3, [r8]
 8010dce:	f8c8 2000 	strlt.w	r2, [r8]
 8010dd2:	4baf      	ldr	r3, [pc, #700]	; (8011090 <_dtoa_r+0x320>)
 8010dd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010dd8:	ea33 0308 	bics.w	r3, r3, r8
 8010ddc:	d114      	bne.n	8010e08 <_dtoa_r+0x98>
 8010dde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010de0:	f242 730f 	movw	r3, #9999	; 0x270f
 8010de4:	6013      	str	r3, [r2, #0]
 8010de6:	9b00      	ldr	r3, [sp, #0]
 8010de8:	b923      	cbnz	r3, 8010df4 <_dtoa_r+0x84>
 8010dea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010dee:	2800      	cmp	r0, #0
 8010df0:	f000 8542 	beq.w	8011878 <_dtoa_r+0xb08>
 8010df4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010df6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80110a4 <_dtoa_r+0x334>
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f000 8544 	beq.w	8011888 <_dtoa_r+0xb18>
 8010e00:	f10b 0303 	add.w	r3, fp, #3
 8010e04:	f000 bd3e 	b.w	8011884 <_dtoa_r+0xb14>
 8010e08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	2300      	movs	r3, #0
 8010e10:	4630      	mov	r0, r6
 8010e12:	4639      	mov	r1, r7
 8010e14:	f7ef fe80 	bl	8000b18 <__aeabi_dcmpeq>
 8010e18:	4681      	mov	r9, r0
 8010e1a:	b168      	cbz	r0, 8010e38 <_dtoa_r+0xc8>
 8010e1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e1e:	2301      	movs	r3, #1
 8010e20:	6013      	str	r3, [r2, #0]
 8010e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f000 8524 	beq.w	8011872 <_dtoa_r+0xb02>
 8010e2a:	4b9a      	ldr	r3, [pc, #616]	; (8011094 <_dtoa_r+0x324>)
 8010e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010e2e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8010e32:	6013      	str	r3, [r2, #0]
 8010e34:	f000 bd28 	b.w	8011888 <_dtoa_r+0xb18>
 8010e38:	aa14      	add	r2, sp, #80	; 0x50
 8010e3a:	a915      	add	r1, sp, #84	; 0x54
 8010e3c:	ec47 6b10 	vmov	d0, r6, r7
 8010e40:	4620      	mov	r0, r4
 8010e42:	f001 f9d8 	bl	80121f6 <__d2b>
 8010e46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010e4a:	9004      	str	r0, [sp, #16]
 8010e4c:	2d00      	cmp	r5, #0
 8010e4e:	d07c      	beq.n	8010f4a <_dtoa_r+0x1da>
 8010e50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010e58:	46b2      	mov	sl, r6
 8010e5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010e62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010e66:	2200      	movs	r2, #0
 8010e68:	4b8b      	ldr	r3, [pc, #556]	; (8011098 <_dtoa_r+0x328>)
 8010e6a:	4650      	mov	r0, sl
 8010e6c:	4659      	mov	r1, fp
 8010e6e:	f7ef fa33 	bl	80002d8 <__aeabi_dsub>
 8010e72:	a381      	add	r3, pc, #516	; (adr r3, 8011078 <_dtoa_r+0x308>)
 8010e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e78:	f7ef fbe6 	bl	8000648 <__aeabi_dmul>
 8010e7c:	a380      	add	r3, pc, #512	; (adr r3, 8011080 <_dtoa_r+0x310>)
 8010e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e82:	f7ef fa2b 	bl	80002dc <__adddf3>
 8010e86:	4606      	mov	r6, r0
 8010e88:	4628      	mov	r0, r5
 8010e8a:	460f      	mov	r7, r1
 8010e8c:	f7ef fb72 	bl	8000574 <__aeabi_i2d>
 8010e90:	a37d      	add	r3, pc, #500	; (adr r3, 8011088 <_dtoa_r+0x318>)
 8010e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e96:	f7ef fbd7 	bl	8000648 <__aeabi_dmul>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	f7ef fa1b 	bl	80002dc <__adddf3>
 8010ea6:	4606      	mov	r6, r0
 8010ea8:	460f      	mov	r7, r1
 8010eaa:	f7ef fe7d 	bl	8000ba8 <__aeabi_d2iz>
 8010eae:	2200      	movs	r2, #0
 8010eb0:	4682      	mov	sl, r0
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	4639      	mov	r1, r7
 8010eb8:	f7ef fe38 	bl	8000b2c <__aeabi_dcmplt>
 8010ebc:	b148      	cbz	r0, 8010ed2 <_dtoa_r+0x162>
 8010ebe:	4650      	mov	r0, sl
 8010ec0:	f7ef fb58 	bl	8000574 <__aeabi_i2d>
 8010ec4:	4632      	mov	r2, r6
 8010ec6:	463b      	mov	r3, r7
 8010ec8:	f7ef fe26 	bl	8000b18 <__aeabi_dcmpeq>
 8010ecc:	b908      	cbnz	r0, 8010ed2 <_dtoa_r+0x162>
 8010ece:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010ed2:	f1ba 0f16 	cmp.w	sl, #22
 8010ed6:	d859      	bhi.n	8010f8c <_dtoa_r+0x21c>
 8010ed8:	4970      	ldr	r1, [pc, #448]	; (801109c <_dtoa_r+0x32c>)
 8010eda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ee6:	f7ef fe3f 	bl	8000b68 <__aeabi_dcmpgt>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d050      	beq.n	8010f90 <_dtoa_r+0x220>
 8010eee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ef8:	1b5d      	subs	r5, r3, r5
 8010efa:	f1b5 0801 	subs.w	r8, r5, #1
 8010efe:	bf49      	itett	mi
 8010f00:	f1c5 0301 	rsbmi	r3, r5, #1
 8010f04:	2300      	movpl	r3, #0
 8010f06:	9305      	strmi	r3, [sp, #20]
 8010f08:	f04f 0800 	movmi.w	r8, #0
 8010f0c:	bf58      	it	pl
 8010f0e:	9305      	strpl	r3, [sp, #20]
 8010f10:	f1ba 0f00 	cmp.w	sl, #0
 8010f14:	db3e      	blt.n	8010f94 <_dtoa_r+0x224>
 8010f16:	2300      	movs	r3, #0
 8010f18:	44d0      	add	r8, sl
 8010f1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010f1e:	9307      	str	r3, [sp, #28]
 8010f20:	9b06      	ldr	r3, [sp, #24]
 8010f22:	2b09      	cmp	r3, #9
 8010f24:	f200 8090 	bhi.w	8011048 <_dtoa_r+0x2d8>
 8010f28:	2b05      	cmp	r3, #5
 8010f2a:	bfc4      	itt	gt
 8010f2c:	3b04      	subgt	r3, #4
 8010f2e:	9306      	strgt	r3, [sp, #24]
 8010f30:	9b06      	ldr	r3, [sp, #24]
 8010f32:	f1a3 0302 	sub.w	r3, r3, #2
 8010f36:	bfcc      	ite	gt
 8010f38:	2500      	movgt	r5, #0
 8010f3a:	2501      	movle	r5, #1
 8010f3c:	2b03      	cmp	r3, #3
 8010f3e:	f200 808f 	bhi.w	8011060 <_dtoa_r+0x2f0>
 8010f42:	e8df f003 	tbb	[pc, r3]
 8010f46:	7f7d      	.short	0x7f7d
 8010f48:	7131      	.short	0x7131
 8010f4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010f4e:	441d      	add	r5, r3
 8010f50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010f54:	2820      	cmp	r0, #32
 8010f56:	dd13      	ble.n	8010f80 <_dtoa_r+0x210>
 8010f58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010f5c:	9b00      	ldr	r3, [sp, #0]
 8010f5e:	fa08 f800 	lsl.w	r8, r8, r0
 8010f62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010f66:	fa23 f000 	lsr.w	r0, r3, r0
 8010f6a:	ea48 0000 	orr.w	r0, r8, r0
 8010f6e:	f7ef faf1 	bl	8000554 <__aeabi_ui2d>
 8010f72:	2301      	movs	r3, #1
 8010f74:	4682      	mov	sl, r0
 8010f76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010f7a:	3d01      	subs	r5, #1
 8010f7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8010f7e:	e772      	b.n	8010e66 <_dtoa_r+0xf6>
 8010f80:	9b00      	ldr	r3, [sp, #0]
 8010f82:	f1c0 0020 	rsb	r0, r0, #32
 8010f86:	fa03 f000 	lsl.w	r0, r3, r0
 8010f8a:	e7f0      	b.n	8010f6e <_dtoa_r+0x1fe>
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e7b1      	b.n	8010ef4 <_dtoa_r+0x184>
 8010f90:	900f      	str	r0, [sp, #60]	; 0x3c
 8010f92:	e7b0      	b.n	8010ef6 <_dtoa_r+0x186>
 8010f94:	9b05      	ldr	r3, [sp, #20]
 8010f96:	eba3 030a 	sub.w	r3, r3, sl
 8010f9a:	9305      	str	r3, [sp, #20]
 8010f9c:	f1ca 0300 	rsb	r3, sl, #0
 8010fa0:	9307      	str	r3, [sp, #28]
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8010fa6:	e7bb      	b.n	8010f20 <_dtoa_r+0x1b0>
 8010fa8:	2301      	movs	r3, #1
 8010faa:	930a      	str	r3, [sp, #40]	; 0x28
 8010fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	dd59      	ble.n	8011066 <_dtoa_r+0x2f6>
 8010fb2:	9302      	str	r3, [sp, #8]
 8010fb4:	4699      	mov	r9, r3
 8010fb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010fb8:	2200      	movs	r2, #0
 8010fba:	6072      	str	r2, [r6, #4]
 8010fbc:	2204      	movs	r2, #4
 8010fbe:	f102 0014 	add.w	r0, r2, #20
 8010fc2:	4298      	cmp	r0, r3
 8010fc4:	6871      	ldr	r1, [r6, #4]
 8010fc6:	d953      	bls.n	8011070 <_dtoa_r+0x300>
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f000 fe88 	bl	8011cde <_Balloc>
 8010fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fd0:	6030      	str	r0, [r6, #0]
 8010fd2:	f1b9 0f0e 	cmp.w	r9, #14
 8010fd6:	f8d3 b000 	ldr.w	fp, [r3]
 8010fda:	f200 80e6 	bhi.w	80111aa <_dtoa_r+0x43a>
 8010fde:	2d00      	cmp	r5, #0
 8010fe0:	f000 80e3 	beq.w	80111aa <_dtoa_r+0x43a>
 8010fe4:	ed9d 7b00 	vldr	d7, [sp]
 8010fe8:	f1ba 0f00 	cmp.w	sl, #0
 8010fec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010ff0:	dd74      	ble.n	80110dc <_dtoa_r+0x36c>
 8010ff2:	4a2a      	ldr	r2, [pc, #168]	; (801109c <_dtoa_r+0x32c>)
 8010ff4:	f00a 030f 	and.w	r3, sl, #15
 8010ff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010ffc:	ed93 7b00 	vldr	d7, [r3]
 8011000:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011004:	06f0      	lsls	r0, r6, #27
 8011006:	ed8d 7b08 	vstr	d7, [sp, #32]
 801100a:	d565      	bpl.n	80110d8 <_dtoa_r+0x368>
 801100c:	4b24      	ldr	r3, [pc, #144]	; (80110a0 <_dtoa_r+0x330>)
 801100e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011012:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011016:	f7ef fc41 	bl	800089c <__aeabi_ddiv>
 801101a:	e9cd 0100 	strd	r0, r1, [sp]
 801101e:	f006 060f 	and.w	r6, r6, #15
 8011022:	2503      	movs	r5, #3
 8011024:	4f1e      	ldr	r7, [pc, #120]	; (80110a0 <_dtoa_r+0x330>)
 8011026:	e04c      	b.n	80110c2 <_dtoa_r+0x352>
 8011028:	2301      	movs	r3, #1
 801102a:	930a      	str	r3, [sp, #40]	; 0x28
 801102c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801102e:	4453      	add	r3, sl
 8011030:	f103 0901 	add.w	r9, r3, #1
 8011034:	9302      	str	r3, [sp, #8]
 8011036:	464b      	mov	r3, r9
 8011038:	2b01      	cmp	r3, #1
 801103a:	bfb8      	it	lt
 801103c:	2301      	movlt	r3, #1
 801103e:	e7ba      	b.n	8010fb6 <_dtoa_r+0x246>
 8011040:	2300      	movs	r3, #0
 8011042:	e7b2      	b.n	8010faa <_dtoa_r+0x23a>
 8011044:	2300      	movs	r3, #0
 8011046:	e7f0      	b.n	801102a <_dtoa_r+0x2ba>
 8011048:	2501      	movs	r5, #1
 801104a:	2300      	movs	r3, #0
 801104c:	9306      	str	r3, [sp, #24]
 801104e:	950a      	str	r5, [sp, #40]	; 0x28
 8011050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011054:	9302      	str	r3, [sp, #8]
 8011056:	4699      	mov	r9, r3
 8011058:	2200      	movs	r2, #0
 801105a:	2312      	movs	r3, #18
 801105c:	920b      	str	r2, [sp, #44]	; 0x2c
 801105e:	e7aa      	b.n	8010fb6 <_dtoa_r+0x246>
 8011060:	2301      	movs	r3, #1
 8011062:	930a      	str	r3, [sp, #40]	; 0x28
 8011064:	e7f4      	b.n	8011050 <_dtoa_r+0x2e0>
 8011066:	2301      	movs	r3, #1
 8011068:	9302      	str	r3, [sp, #8]
 801106a:	4699      	mov	r9, r3
 801106c:	461a      	mov	r2, r3
 801106e:	e7f5      	b.n	801105c <_dtoa_r+0x2ec>
 8011070:	3101      	adds	r1, #1
 8011072:	6071      	str	r1, [r6, #4]
 8011074:	0052      	lsls	r2, r2, #1
 8011076:	e7a2      	b.n	8010fbe <_dtoa_r+0x24e>
 8011078:	636f4361 	.word	0x636f4361
 801107c:	3fd287a7 	.word	0x3fd287a7
 8011080:	8b60c8b3 	.word	0x8b60c8b3
 8011084:	3fc68a28 	.word	0x3fc68a28
 8011088:	509f79fb 	.word	0x509f79fb
 801108c:	3fd34413 	.word	0x3fd34413
 8011090:	7ff00000 	.word	0x7ff00000
 8011094:	08015545 	.word	0x08015545
 8011098:	3ff80000 	.word	0x3ff80000
 801109c:	08015350 	.word	0x08015350
 80110a0:	08015328 	.word	0x08015328
 80110a4:	080152bf 	.word	0x080152bf
 80110a8:	07f1      	lsls	r1, r6, #31
 80110aa:	d508      	bpl.n	80110be <_dtoa_r+0x34e>
 80110ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110b4:	f7ef fac8 	bl	8000648 <__aeabi_dmul>
 80110b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110bc:	3501      	adds	r5, #1
 80110be:	1076      	asrs	r6, r6, #1
 80110c0:	3708      	adds	r7, #8
 80110c2:	2e00      	cmp	r6, #0
 80110c4:	d1f0      	bne.n	80110a8 <_dtoa_r+0x338>
 80110c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80110ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110ce:	f7ef fbe5 	bl	800089c <__aeabi_ddiv>
 80110d2:	e9cd 0100 	strd	r0, r1, [sp]
 80110d6:	e01a      	b.n	801110e <_dtoa_r+0x39e>
 80110d8:	2502      	movs	r5, #2
 80110da:	e7a3      	b.n	8011024 <_dtoa_r+0x2b4>
 80110dc:	f000 80a0 	beq.w	8011220 <_dtoa_r+0x4b0>
 80110e0:	f1ca 0600 	rsb	r6, sl, #0
 80110e4:	4b9f      	ldr	r3, [pc, #636]	; (8011364 <_dtoa_r+0x5f4>)
 80110e6:	4fa0      	ldr	r7, [pc, #640]	; (8011368 <_dtoa_r+0x5f8>)
 80110e8:	f006 020f 	and.w	r2, r6, #15
 80110ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80110f8:	f7ef faa6 	bl	8000648 <__aeabi_dmul>
 80110fc:	e9cd 0100 	strd	r0, r1, [sp]
 8011100:	1136      	asrs	r6, r6, #4
 8011102:	2300      	movs	r3, #0
 8011104:	2502      	movs	r5, #2
 8011106:	2e00      	cmp	r6, #0
 8011108:	d17f      	bne.n	801120a <_dtoa_r+0x49a>
 801110a:	2b00      	cmp	r3, #0
 801110c:	d1e1      	bne.n	80110d2 <_dtoa_r+0x362>
 801110e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 8087 	beq.w	8011224 <_dtoa_r+0x4b4>
 8011116:	e9dd 6700 	ldrd	r6, r7, [sp]
 801111a:	2200      	movs	r2, #0
 801111c:	4b93      	ldr	r3, [pc, #588]	; (801136c <_dtoa_r+0x5fc>)
 801111e:	4630      	mov	r0, r6
 8011120:	4639      	mov	r1, r7
 8011122:	f7ef fd03 	bl	8000b2c <__aeabi_dcmplt>
 8011126:	2800      	cmp	r0, #0
 8011128:	d07c      	beq.n	8011224 <_dtoa_r+0x4b4>
 801112a:	f1b9 0f00 	cmp.w	r9, #0
 801112e:	d079      	beq.n	8011224 <_dtoa_r+0x4b4>
 8011130:	9b02      	ldr	r3, [sp, #8]
 8011132:	2b00      	cmp	r3, #0
 8011134:	dd35      	ble.n	80111a2 <_dtoa_r+0x432>
 8011136:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801113a:	9308      	str	r3, [sp, #32]
 801113c:	4639      	mov	r1, r7
 801113e:	2200      	movs	r2, #0
 8011140:	4b8b      	ldr	r3, [pc, #556]	; (8011370 <_dtoa_r+0x600>)
 8011142:	4630      	mov	r0, r6
 8011144:	f7ef fa80 	bl	8000648 <__aeabi_dmul>
 8011148:	e9cd 0100 	strd	r0, r1, [sp]
 801114c:	9f02      	ldr	r7, [sp, #8]
 801114e:	3501      	adds	r5, #1
 8011150:	4628      	mov	r0, r5
 8011152:	f7ef fa0f 	bl	8000574 <__aeabi_i2d>
 8011156:	e9dd 2300 	ldrd	r2, r3, [sp]
 801115a:	f7ef fa75 	bl	8000648 <__aeabi_dmul>
 801115e:	2200      	movs	r2, #0
 8011160:	4b84      	ldr	r3, [pc, #528]	; (8011374 <_dtoa_r+0x604>)
 8011162:	f7ef f8bb 	bl	80002dc <__adddf3>
 8011166:	4605      	mov	r5, r0
 8011168:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801116c:	2f00      	cmp	r7, #0
 801116e:	d15d      	bne.n	801122c <_dtoa_r+0x4bc>
 8011170:	2200      	movs	r2, #0
 8011172:	4b81      	ldr	r3, [pc, #516]	; (8011378 <_dtoa_r+0x608>)
 8011174:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011178:	f7ef f8ae 	bl	80002d8 <__aeabi_dsub>
 801117c:	462a      	mov	r2, r5
 801117e:	4633      	mov	r3, r6
 8011180:	e9cd 0100 	strd	r0, r1, [sp]
 8011184:	f7ef fcf0 	bl	8000b68 <__aeabi_dcmpgt>
 8011188:	2800      	cmp	r0, #0
 801118a:	f040 8288 	bne.w	801169e <_dtoa_r+0x92e>
 801118e:	462a      	mov	r2, r5
 8011190:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011194:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011198:	f7ef fcc8 	bl	8000b2c <__aeabi_dcmplt>
 801119c:	2800      	cmp	r0, #0
 801119e:	f040 827c 	bne.w	801169a <_dtoa_r+0x92a>
 80111a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80111a6:	e9cd 2300 	strd	r2, r3, [sp]
 80111aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	f2c0 8150 	blt.w	8011452 <_dtoa_r+0x6e2>
 80111b2:	f1ba 0f0e 	cmp.w	sl, #14
 80111b6:	f300 814c 	bgt.w	8011452 <_dtoa_r+0x6e2>
 80111ba:	4b6a      	ldr	r3, [pc, #424]	; (8011364 <_dtoa_r+0x5f4>)
 80111bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80111c0:	ed93 7b00 	vldr	d7, [r3]
 80111c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80111cc:	f280 80d8 	bge.w	8011380 <_dtoa_r+0x610>
 80111d0:	f1b9 0f00 	cmp.w	r9, #0
 80111d4:	f300 80d4 	bgt.w	8011380 <_dtoa_r+0x610>
 80111d8:	f040 825e 	bne.w	8011698 <_dtoa_r+0x928>
 80111dc:	2200      	movs	r2, #0
 80111de:	4b66      	ldr	r3, [pc, #408]	; (8011378 <_dtoa_r+0x608>)
 80111e0:	ec51 0b17 	vmov	r0, r1, d7
 80111e4:	f7ef fa30 	bl	8000648 <__aeabi_dmul>
 80111e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111ec:	f7ef fcb2 	bl	8000b54 <__aeabi_dcmpge>
 80111f0:	464f      	mov	r7, r9
 80111f2:	464e      	mov	r6, r9
 80111f4:	2800      	cmp	r0, #0
 80111f6:	f040 8234 	bne.w	8011662 <_dtoa_r+0x8f2>
 80111fa:	2331      	movs	r3, #49	; 0x31
 80111fc:	f10b 0501 	add.w	r5, fp, #1
 8011200:	f88b 3000 	strb.w	r3, [fp]
 8011204:	f10a 0a01 	add.w	sl, sl, #1
 8011208:	e22f      	b.n	801166a <_dtoa_r+0x8fa>
 801120a:	07f2      	lsls	r2, r6, #31
 801120c:	d505      	bpl.n	801121a <_dtoa_r+0x4aa>
 801120e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011212:	f7ef fa19 	bl	8000648 <__aeabi_dmul>
 8011216:	3501      	adds	r5, #1
 8011218:	2301      	movs	r3, #1
 801121a:	1076      	asrs	r6, r6, #1
 801121c:	3708      	adds	r7, #8
 801121e:	e772      	b.n	8011106 <_dtoa_r+0x396>
 8011220:	2502      	movs	r5, #2
 8011222:	e774      	b.n	801110e <_dtoa_r+0x39e>
 8011224:	f8cd a020 	str.w	sl, [sp, #32]
 8011228:	464f      	mov	r7, r9
 801122a:	e791      	b.n	8011150 <_dtoa_r+0x3e0>
 801122c:	4b4d      	ldr	r3, [pc, #308]	; (8011364 <_dtoa_r+0x5f4>)
 801122e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011232:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011238:	2b00      	cmp	r3, #0
 801123a:	d047      	beq.n	80112cc <_dtoa_r+0x55c>
 801123c:	4602      	mov	r2, r0
 801123e:	460b      	mov	r3, r1
 8011240:	2000      	movs	r0, #0
 8011242:	494e      	ldr	r1, [pc, #312]	; (801137c <_dtoa_r+0x60c>)
 8011244:	f7ef fb2a 	bl	800089c <__aeabi_ddiv>
 8011248:	462a      	mov	r2, r5
 801124a:	4633      	mov	r3, r6
 801124c:	f7ef f844 	bl	80002d8 <__aeabi_dsub>
 8011250:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011254:	465d      	mov	r5, fp
 8011256:	e9dd 0100 	ldrd	r0, r1, [sp]
 801125a:	f7ef fca5 	bl	8000ba8 <__aeabi_d2iz>
 801125e:	4606      	mov	r6, r0
 8011260:	f7ef f988 	bl	8000574 <__aeabi_i2d>
 8011264:	4602      	mov	r2, r0
 8011266:	460b      	mov	r3, r1
 8011268:	e9dd 0100 	ldrd	r0, r1, [sp]
 801126c:	f7ef f834 	bl	80002d8 <__aeabi_dsub>
 8011270:	3630      	adds	r6, #48	; 0x30
 8011272:	f805 6b01 	strb.w	r6, [r5], #1
 8011276:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801127a:	e9cd 0100 	strd	r0, r1, [sp]
 801127e:	f7ef fc55 	bl	8000b2c <__aeabi_dcmplt>
 8011282:	2800      	cmp	r0, #0
 8011284:	d163      	bne.n	801134e <_dtoa_r+0x5de>
 8011286:	e9dd 2300 	ldrd	r2, r3, [sp]
 801128a:	2000      	movs	r0, #0
 801128c:	4937      	ldr	r1, [pc, #220]	; (801136c <_dtoa_r+0x5fc>)
 801128e:	f7ef f823 	bl	80002d8 <__aeabi_dsub>
 8011292:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011296:	f7ef fc49 	bl	8000b2c <__aeabi_dcmplt>
 801129a:	2800      	cmp	r0, #0
 801129c:	f040 80b7 	bne.w	801140e <_dtoa_r+0x69e>
 80112a0:	eba5 030b 	sub.w	r3, r5, fp
 80112a4:	429f      	cmp	r7, r3
 80112a6:	f77f af7c 	ble.w	80111a2 <_dtoa_r+0x432>
 80112aa:	2200      	movs	r2, #0
 80112ac:	4b30      	ldr	r3, [pc, #192]	; (8011370 <_dtoa_r+0x600>)
 80112ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80112b2:	f7ef f9c9 	bl	8000648 <__aeabi_dmul>
 80112b6:	2200      	movs	r2, #0
 80112b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80112bc:	4b2c      	ldr	r3, [pc, #176]	; (8011370 <_dtoa_r+0x600>)
 80112be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112c2:	f7ef f9c1 	bl	8000648 <__aeabi_dmul>
 80112c6:	e9cd 0100 	strd	r0, r1, [sp]
 80112ca:	e7c4      	b.n	8011256 <_dtoa_r+0x4e6>
 80112cc:	462a      	mov	r2, r5
 80112ce:	4633      	mov	r3, r6
 80112d0:	f7ef f9ba 	bl	8000648 <__aeabi_dmul>
 80112d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80112d8:	eb0b 0507 	add.w	r5, fp, r7
 80112dc:	465e      	mov	r6, fp
 80112de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112e2:	f7ef fc61 	bl	8000ba8 <__aeabi_d2iz>
 80112e6:	4607      	mov	r7, r0
 80112e8:	f7ef f944 	bl	8000574 <__aeabi_i2d>
 80112ec:	3730      	adds	r7, #48	; 0x30
 80112ee:	4602      	mov	r2, r0
 80112f0:	460b      	mov	r3, r1
 80112f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112f6:	f7ee ffef 	bl	80002d8 <__aeabi_dsub>
 80112fa:	f806 7b01 	strb.w	r7, [r6], #1
 80112fe:	42ae      	cmp	r6, r5
 8011300:	e9cd 0100 	strd	r0, r1, [sp]
 8011304:	f04f 0200 	mov.w	r2, #0
 8011308:	d126      	bne.n	8011358 <_dtoa_r+0x5e8>
 801130a:	4b1c      	ldr	r3, [pc, #112]	; (801137c <_dtoa_r+0x60c>)
 801130c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011310:	f7ee ffe4 	bl	80002dc <__adddf3>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	e9dd 0100 	ldrd	r0, r1, [sp]
 801131c:	f7ef fc24 	bl	8000b68 <__aeabi_dcmpgt>
 8011320:	2800      	cmp	r0, #0
 8011322:	d174      	bne.n	801140e <_dtoa_r+0x69e>
 8011324:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011328:	2000      	movs	r0, #0
 801132a:	4914      	ldr	r1, [pc, #80]	; (801137c <_dtoa_r+0x60c>)
 801132c:	f7ee ffd4 	bl	80002d8 <__aeabi_dsub>
 8011330:	4602      	mov	r2, r0
 8011332:	460b      	mov	r3, r1
 8011334:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011338:	f7ef fbf8 	bl	8000b2c <__aeabi_dcmplt>
 801133c:	2800      	cmp	r0, #0
 801133e:	f43f af30 	beq.w	80111a2 <_dtoa_r+0x432>
 8011342:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011346:	2b30      	cmp	r3, #48	; 0x30
 8011348:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801134c:	d002      	beq.n	8011354 <_dtoa_r+0x5e4>
 801134e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011352:	e04a      	b.n	80113ea <_dtoa_r+0x67a>
 8011354:	4615      	mov	r5, r2
 8011356:	e7f4      	b.n	8011342 <_dtoa_r+0x5d2>
 8011358:	4b05      	ldr	r3, [pc, #20]	; (8011370 <_dtoa_r+0x600>)
 801135a:	f7ef f975 	bl	8000648 <__aeabi_dmul>
 801135e:	e9cd 0100 	strd	r0, r1, [sp]
 8011362:	e7bc      	b.n	80112de <_dtoa_r+0x56e>
 8011364:	08015350 	.word	0x08015350
 8011368:	08015328 	.word	0x08015328
 801136c:	3ff00000 	.word	0x3ff00000
 8011370:	40240000 	.word	0x40240000
 8011374:	401c0000 	.word	0x401c0000
 8011378:	40140000 	.word	0x40140000
 801137c:	3fe00000 	.word	0x3fe00000
 8011380:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011384:	465d      	mov	r5, fp
 8011386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801138a:	4630      	mov	r0, r6
 801138c:	4639      	mov	r1, r7
 801138e:	f7ef fa85 	bl	800089c <__aeabi_ddiv>
 8011392:	f7ef fc09 	bl	8000ba8 <__aeabi_d2iz>
 8011396:	4680      	mov	r8, r0
 8011398:	f7ef f8ec 	bl	8000574 <__aeabi_i2d>
 801139c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113a0:	f7ef f952 	bl	8000648 <__aeabi_dmul>
 80113a4:	4602      	mov	r2, r0
 80113a6:	460b      	mov	r3, r1
 80113a8:	4630      	mov	r0, r6
 80113aa:	4639      	mov	r1, r7
 80113ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80113b0:	f7ee ff92 	bl	80002d8 <__aeabi_dsub>
 80113b4:	f805 6b01 	strb.w	r6, [r5], #1
 80113b8:	eba5 060b 	sub.w	r6, r5, fp
 80113bc:	45b1      	cmp	r9, r6
 80113be:	4602      	mov	r2, r0
 80113c0:	460b      	mov	r3, r1
 80113c2:	d139      	bne.n	8011438 <_dtoa_r+0x6c8>
 80113c4:	f7ee ff8a 	bl	80002dc <__adddf3>
 80113c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113cc:	4606      	mov	r6, r0
 80113ce:	460f      	mov	r7, r1
 80113d0:	f7ef fbca 	bl	8000b68 <__aeabi_dcmpgt>
 80113d4:	b9c8      	cbnz	r0, 801140a <_dtoa_r+0x69a>
 80113d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113da:	4630      	mov	r0, r6
 80113dc:	4639      	mov	r1, r7
 80113de:	f7ef fb9b 	bl	8000b18 <__aeabi_dcmpeq>
 80113e2:	b110      	cbz	r0, 80113ea <_dtoa_r+0x67a>
 80113e4:	f018 0f01 	tst.w	r8, #1
 80113e8:	d10f      	bne.n	801140a <_dtoa_r+0x69a>
 80113ea:	9904      	ldr	r1, [sp, #16]
 80113ec:	4620      	mov	r0, r4
 80113ee:	f000 fcaa 	bl	8011d46 <_Bfree>
 80113f2:	2300      	movs	r3, #0
 80113f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80113f6:	702b      	strb	r3, [r5, #0]
 80113f8:	f10a 0301 	add.w	r3, sl, #1
 80113fc:	6013      	str	r3, [r2, #0]
 80113fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011400:	2b00      	cmp	r3, #0
 8011402:	f000 8241 	beq.w	8011888 <_dtoa_r+0xb18>
 8011406:	601d      	str	r5, [r3, #0]
 8011408:	e23e      	b.n	8011888 <_dtoa_r+0xb18>
 801140a:	f8cd a020 	str.w	sl, [sp, #32]
 801140e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011412:	2a39      	cmp	r2, #57	; 0x39
 8011414:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8011418:	d108      	bne.n	801142c <_dtoa_r+0x6bc>
 801141a:	459b      	cmp	fp, r3
 801141c:	d10a      	bne.n	8011434 <_dtoa_r+0x6c4>
 801141e:	9b08      	ldr	r3, [sp, #32]
 8011420:	3301      	adds	r3, #1
 8011422:	9308      	str	r3, [sp, #32]
 8011424:	2330      	movs	r3, #48	; 0x30
 8011426:	f88b 3000 	strb.w	r3, [fp]
 801142a:	465b      	mov	r3, fp
 801142c:	781a      	ldrb	r2, [r3, #0]
 801142e:	3201      	adds	r2, #1
 8011430:	701a      	strb	r2, [r3, #0]
 8011432:	e78c      	b.n	801134e <_dtoa_r+0x5de>
 8011434:	461d      	mov	r5, r3
 8011436:	e7ea      	b.n	801140e <_dtoa_r+0x69e>
 8011438:	2200      	movs	r2, #0
 801143a:	4b9b      	ldr	r3, [pc, #620]	; (80116a8 <_dtoa_r+0x938>)
 801143c:	f7ef f904 	bl	8000648 <__aeabi_dmul>
 8011440:	2200      	movs	r2, #0
 8011442:	2300      	movs	r3, #0
 8011444:	4606      	mov	r6, r0
 8011446:	460f      	mov	r7, r1
 8011448:	f7ef fb66 	bl	8000b18 <__aeabi_dcmpeq>
 801144c:	2800      	cmp	r0, #0
 801144e:	d09a      	beq.n	8011386 <_dtoa_r+0x616>
 8011450:	e7cb      	b.n	80113ea <_dtoa_r+0x67a>
 8011452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011454:	2a00      	cmp	r2, #0
 8011456:	f000 808b 	beq.w	8011570 <_dtoa_r+0x800>
 801145a:	9a06      	ldr	r2, [sp, #24]
 801145c:	2a01      	cmp	r2, #1
 801145e:	dc6e      	bgt.n	801153e <_dtoa_r+0x7ce>
 8011460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011462:	2a00      	cmp	r2, #0
 8011464:	d067      	beq.n	8011536 <_dtoa_r+0x7c6>
 8011466:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801146a:	9f07      	ldr	r7, [sp, #28]
 801146c:	9d05      	ldr	r5, [sp, #20]
 801146e:	9a05      	ldr	r2, [sp, #20]
 8011470:	2101      	movs	r1, #1
 8011472:	441a      	add	r2, r3
 8011474:	4620      	mov	r0, r4
 8011476:	9205      	str	r2, [sp, #20]
 8011478:	4498      	add	r8, r3
 801147a:	f000 fd04 	bl	8011e86 <__i2b>
 801147e:	4606      	mov	r6, r0
 8011480:	2d00      	cmp	r5, #0
 8011482:	dd0c      	ble.n	801149e <_dtoa_r+0x72e>
 8011484:	f1b8 0f00 	cmp.w	r8, #0
 8011488:	dd09      	ble.n	801149e <_dtoa_r+0x72e>
 801148a:	4545      	cmp	r5, r8
 801148c:	9a05      	ldr	r2, [sp, #20]
 801148e:	462b      	mov	r3, r5
 8011490:	bfa8      	it	ge
 8011492:	4643      	movge	r3, r8
 8011494:	1ad2      	subs	r2, r2, r3
 8011496:	9205      	str	r2, [sp, #20]
 8011498:	1aed      	subs	r5, r5, r3
 801149a:	eba8 0803 	sub.w	r8, r8, r3
 801149e:	9b07      	ldr	r3, [sp, #28]
 80114a0:	b1eb      	cbz	r3, 80114de <_dtoa_r+0x76e>
 80114a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d067      	beq.n	8011578 <_dtoa_r+0x808>
 80114a8:	b18f      	cbz	r7, 80114ce <_dtoa_r+0x75e>
 80114aa:	4631      	mov	r1, r6
 80114ac:	463a      	mov	r2, r7
 80114ae:	4620      	mov	r0, r4
 80114b0:	f000 fd88 	bl	8011fc4 <__pow5mult>
 80114b4:	9a04      	ldr	r2, [sp, #16]
 80114b6:	4601      	mov	r1, r0
 80114b8:	4606      	mov	r6, r0
 80114ba:	4620      	mov	r0, r4
 80114bc:	f000 fcec 	bl	8011e98 <__multiply>
 80114c0:	9904      	ldr	r1, [sp, #16]
 80114c2:	9008      	str	r0, [sp, #32]
 80114c4:	4620      	mov	r0, r4
 80114c6:	f000 fc3e 	bl	8011d46 <_Bfree>
 80114ca:	9b08      	ldr	r3, [sp, #32]
 80114cc:	9304      	str	r3, [sp, #16]
 80114ce:	9b07      	ldr	r3, [sp, #28]
 80114d0:	1bda      	subs	r2, r3, r7
 80114d2:	d004      	beq.n	80114de <_dtoa_r+0x76e>
 80114d4:	9904      	ldr	r1, [sp, #16]
 80114d6:	4620      	mov	r0, r4
 80114d8:	f000 fd74 	bl	8011fc4 <__pow5mult>
 80114dc:	9004      	str	r0, [sp, #16]
 80114de:	2101      	movs	r1, #1
 80114e0:	4620      	mov	r0, r4
 80114e2:	f000 fcd0 	bl	8011e86 <__i2b>
 80114e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114e8:	4607      	mov	r7, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f000 81d0 	beq.w	8011890 <_dtoa_r+0xb20>
 80114f0:	461a      	mov	r2, r3
 80114f2:	4601      	mov	r1, r0
 80114f4:	4620      	mov	r0, r4
 80114f6:	f000 fd65 	bl	8011fc4 <__pow5mult>
 80114fa:	9b06      	ldr	r3, [sp, #24]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	4607      	mov	r7, r0
 8011500:	dc40      	bgt.n	8011584 <_dtoa_r+0x814>
 8011502:	9b00      	ldr	r3, [sp, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d139      	bne.n	801157c <_dtoa_r+0x80c>
 8011508:	9b01      	ldr	r3, [sp, #4]
 801150a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801150e:	2b00      	cmp	r3, #0
 8011510:	d136      	bne.n	8011580 <_dtoa_r+0x810>
 8011512:	9b01      	ldr	r3, [sp, #4]
 8011514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011518:	0d1b      	lsrs	r3, r3, #20
 801151a:	051b      	lsls	r3, r3, #20
 801151c:	b12b      	cbz	r3, 801152a <_dtoa_r+0x7ba>
 801151e:	9b05      	ldr	r3, [sp, #20]
 8011520:	3301      	adds	r3, #1
 8011522:	9305      	str	r3, [sp, #20]
 8011524:	f108 0801 	add.w	r8, r8, #1
 8011528:	2301      	movs	r3, #1
 801152a:	9307      	str	r3, [sp, #28]
 801152c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801152e:	2b00      	cmp	r3, #0
 8011530:	d12a      	bne.n	8011588 <_dtoa_r+0x818>
 8011532:	2001      	movs	r0, #1
 8011534:	e030      	b.n	8011598 <_dtoa_r+0x828>
 8011536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011538:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801153c:	e795      	b.n	801146a <_dtoa_r+0x6fa>
 801153e:	9b07      	ldr	r3, [sp, #28]
 8011540:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8011544:	42bb      	cmp	r3, r7
 8011546:	bfbf      	itttt	lt
 8011548:	9b07      	ldrlt	r3, [sp, #28]
 801154a:	9707      	strlt	r7, [sp, #28]
 801154c:	1afa      	sublt	r2, r7, r3
 801154e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011550:	bfbb      	ittet	lt
 8011552:	189b      	addlt	r3, r3, r2
 8011554:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011556:	1bdf      	subge	r7, r3, r7
 8011558:	2700      	movlt	r7, #0
 801155a:	f1b9 0f00 	cmp.w	r9, #0
 801155e:	bfb5      	itete	lt
 8011560:	9b05      	ldrlt	r3, [sp, #20]
 8011562:	9d05      	ldrge	r5, [sp, #20]
 8011564:	eba3 0509 	sublt.w	r5, r3, r9
 8011568:	464b      	movge	r3, r9
 801156a:	bfb8      	it	lt
 801156c:	2300      	movlt	r3, #0
 801156e:	e77e      	b.n	801146e <_dtoa_r+0x6fe>
 8011570:	9f07      	ldr	r7, [sp, #28]
 8011572:	9d05      	ldr	r5, [sp, #20]
 8011574:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011576:	e783      	b.n	8011480 <_dtoa_r+0x710>
 8011578:	9a07      	ldr	r2, [sp, #28]
 801157a:	e7ab      	b.n	80114d4 <_dtoa_r+0x764>
 801157c:	2300      	movs	r3, #0
 801157e:	e7d4      	b.n	801152a <_dtoa_r+0x7ba>
 8011580:	9b00      	ldr	r3, [sp, #0]
 8011582:	e7d2      	b.n	801152a <_dtoa_r+0x7ba>
 8011584:	2300      	movs	r3, #0
 8011586:	9307      	str	r3, [sp, #28]
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801158e:	6918      	ldr	r0, [r3, #16]
 8011590:	f000 fc2b 	bl	8011dea <__hi0bits>
 8011594:	f1c0 0020 	rsb	r0, r0, #32
 8011598:	4440      	add	r0, r8
 801159a:	f010 001f 	ands.w	r0, r0, #31
 801159e:	d047      	beq.n	8011630 <_dtoa_r+0x8c0>
 80115a0:	f1c0 0320 	rsb	r3, r0, #32
 80115a4:	2b04      	cmp	r3, #4
 80115a6:	dd3b      	ble.n	8011620 <_dtoa_r+0x8b0>
 80115a8:	9b05      	ldr	r3, [sp, #20]
 80115aa:	f1c0 001c 	rsb	r0, r0, #28
 80115ae:	4403      	add	r3, r0
 80115b0:	9305      	str	r3, [sp, #20]
 80115b2:	4405      	add	r5, r0
 80115b4:	4480      	add	r8, r0
 80115b6:	9b05      	ldr	r3, [sp, #20]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	dd05      	ble.n	80115c8 <_dtoa_r+0x858>
 80115bc:	461a      	mov	r2, r3
 80115be:	9904      	ldr	r1, [sp, #16]
 80115c0:	4620      	mov	r0, r4
 80115c2:	f000 fd4d 	bl	8012060 <__lshift>
 80115c6:	9004      	str	r0, [sp, #16]
 80115c8:	f1b8 0f00 	cmp.w	r8, #0
 80115cc:	dd05      	ble.n	80115da <_dtoa_r+0x86a>
 80115ce:	4639      	mov	r1, r7
 80115d0:	4642      	mov	r2, r8
 80115d2:	4620      	mov	r0, r4
 80115d4:	f000 fd44 	bl	8012060 <__lshift>
 80115d8:	4607      	mov	r7, r0
 80115da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115dc:	b353      	cbz	r3, 8011634 <_dtoa_r+0x8c4>
 80115de:	4639      	mov	r1, r7
 80115e0:	9804      	ldr	r0, [sp, #16]
 80115e2:	f000 fd91 	bl	8012108 <__mcmp>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	da24      	bge.n	8011634 <_dtoa_r+0x8c4>
 80115ea:	2300      	movs	r3, #0
 80115ec:	220a      	movs	r2, #10
 80115ee:	9904      	ldr	r1, [sp, #16]
 80115f0:	4620      	mov	r0, r4
 80115f2:	f000 fbbf 	bl	8011d74 <__multadd>
 80115f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115f8:	9004      	str	r0, [sp, #16]
 80115fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 814d 	beq.w	801189e <_dtoa_r+0xb2e>
 8011604:	2300      	movs	r3, #0
 8011606:	4631      	mov	r1, r6
 8011608:	220a      	movs	r2, #10
 801160a:	4620      	mov	r0, r4
 801160c:	f000 fbb2 	bl	8011d74 <__multadd>
 8011610:	9b02      	ldr	r3, [sp, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	4606      	mov	r6, r0
 8011616:	dc4f      	bgt.n	80116b8 <_dtoa_r+0x948>
 8011618:	9b06      	ldr	r3, [sp, #24]
 801161a:	2b02      	cmp	r3, #2
 801161c:	dd4c      	ble.n	80116b8 <_dtoa_r+0x948>
 801161e:	e011      	b.n	8011644 <_dtoa_r+0x8d4>
 8011620:	d0c9      	beq.n	80115b6 <_dtoa_r+0x846>
 8011622:	9a05      	ldr	r2, [sp, #20]
 8011624:	331c      	adds	r3, #28
 8011626:	441a      	add	r2, r3
 8011628:	9205      	str	r2, [sp, #20]
 801162a:	441d      	add	r5, r3
 801162c:	4498      	add	r8, r3
 801162e:	e7c2      	b.n	80115b6 <_dtoa_r+0x846>
 8011630:	4603      	mov	r3, r0
 8011632:	e7f6      	b.n	8011622 <_dtoa_r+0x8b2>
 8011634:	f1b9 0f00 	cmp.w	r9, #0
 8011638:	dc38      	bgt.n	80116ac <_dtoa_r+0x93c>
 801163a:	9b06      	ldr	r3, [sp, #24]
 801163c:	2b02      	cmp	r3, #2
 801163e:	dd35      	ble.n	80116ac <_dtoa_r+0x93c>
 8011640:	f8cd 9008 	str.w	r9, [sp, #8]
 8011644:	9b02      	ldr	r3, [sp, #8]
 8011646:	b963      	cbnz	r3, 8011662 <_dtoa_r+0x8f2>
 8011648:	4639      	mov	r1, r7
 801164a:	2205      	movs	r2, #5
 801164c:	4620      	mov	r0, r4
 801164e:	f000 fb91 	bl	8011d74 <__multadd>
 8011652:	4601      	mov	r1, r0
 8011654:	4607      	mov	r7, r0
 8011656:	9804      	ldr	r0, [sp, #16]
 8011658:	f000 fd56 	bl	8012108 <__mcmp>
 801165c:	2800      	cmp	r0, #0
 801165e:	f73f adcc 	bgt.w	80111fa <_dtoa_r+0x48a>
 8011662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011664:	465d      	mov	r5, fp
 8011666:	ea6f 0a03 	mvn.w	sl, r3
 801166a:	f04f 0900 	mov.w	r9, #0
 801166e:	4639      	mov	r1, r7
 8011670:	4620      	mov	r0, r4
 8011672:	f000 fb68 	bl	8011d46 <_Bfree>
 8011676:	2e00      	cmp	r6, #0
 8011678:	f43f aeb7 	beq.w	80113ea <_dtoa_r+0x67a>
 801167c:	f1b9 0f00 	cmp.w	r9, #0
 8011680:	d005      	beq.n	801168e <_dtoa_r+0x91e>
 8011682:	45b1      	cmp	r9, r6
 8011684:	d003      	beq.n	801168e <_dtoa_r+0x91e>
 8011686:	4649      	mov	r1, r9
 8011688:	4620      	mov	r0, r4
 801168a:	f000 fb5c 	bl	8011d46 <_Bfree>
 801168e:	4631      	mov	r1, r6
 8011690:	4620      	mov	r0, r4
 8011692:	f000 fb58 	bl	8011d46 <_Bfree>
 8011696:	e6a8      	b.n	80113ea <_dtoa_r+0x67a>
 8011698:	2700      	movs	r7, #0
 801169a:	463e      	mov	r6, r7
 801169c:	e7e1      	b.n	8011662 <_dtoa_r+0x8f2>
 801169e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80116a2:	463e      	mov	r6, r7
 80116a4:	e5a9      	b.n	80111fa <_dtoa_r+0x48a>
 80116a6:	bf00      	nop
 80116a8:	40240000 	.word	0x40240000
 80116ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f000 80fa 	beq.w	80118ac <_dtoa_r+0xb3c>
 80116b8:	2d00      	cmp	r5, #0
 80116ba:	dd05      	ble.n	80116c8 <_dtoa_r+0x958>
 80116bc:	4631      	mov	r1, r6
 80116be:	462a      	mov	r2, r5
 80116c0:	4620      	mov	r0, r4
 80116c2:	f000 fccd 	bl	8012060 <__lshift>
 80116c6:	4606      	mov	r6, r0
 80116c8:	9b07      	ldr	r3, [sp, #28]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d04c      	beq.n	8011768 <_dtoa_r+0x9f8>
 80116ce:	6871      	ldr	r1, [r6, #4]
 80116d0:	4620      	mov	r0, r4
 80116d2:	f000 fb04 	bl	8011cde <_Balloc>
 80116d6:	6932      	ldr	r2, [r6, #16]
 80116d8:	3202      	adds	r2, #2
 80116da:	4605      	mov	r5, r0
 80116dc:	0092      	lsls	r2, r2, #2
 80116de:	f106 010c 	add.w	r1, r6, #12
 80116e2:	300c      	adds	r0, #12
 80116e4:	f000 faf0 	bl	8011cc8 <memcpy>
 80116e8:	2201      	movs	r2, #1
 80116ea:	4629      	mov	r1, r5
 80116ec:	4620      	mov	r0, r4
 80116ee:	f000 fcb7 	bl	8012060 <__lshift>
 80116f2:	9b00      	ldr	r3, [sp, #0]
 80116f4:	f8cd b014 	str.w	fp, [sp, #20]
 80116f8:	f003 0301 	and.w	r3, r3, #1
 80116fc:	46b1      	mov	r9, r6
 80116fe:	9307      	str	r3, [sp, #28]
 8011700:	4606      	mov	r6, r0
 8011702:	4639      	mov	r1, r7
 8011704:	9804      	ldr	r0, [sp, #16]
 8011706:	f7ff faa7 	bl	8010c58 <quorem>
 801170a:	4649      	mov	r1, r9
 801170c:	4605      	mov	r5, r0
 801170e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011712:	9804      	ldr	r0, [sp, #16]
 8011714:	f000 fcf8 	bl	8012108 <__mcmp>
 8011718:	4632      	mov	r2, r6
 801171a:	9000      	str	r0, [sp, #0]
 801171c:	4639      	mov	r1, r7
 801171e:	4620      	mov	r0, r4
 8011720:	f000 fd0c 	bl	801213c <__mdiff>
 8011724:	68c3      	ldr	r3, [r0, #12]
 8011726:	4602      	mov	r2, r0
 8011728:	bb03      	cbnz	r3, 801176c <_dtoa_r+0x9fc>
 801172a:	4601      	mov	r1, r0
 801172c:	9008      	str	r0, [sp, #32]
 801172e:	9804      	ldr	r0, [sp, #16]
 8011730:	f000 fcea 	bl	8012108 <__mcmp>
 8011734:	9a08      	ldr	r2, [sp, #32]
 8011736:	4603      	mov	r3, r0
 8011738:	4611      	mov	r1, r2
 801173a:	4620      	mov	r0, r4
 801173c:	9308      	str	r3, [sp, #32]
 801173e:	f000 fb02 	bl	8011d46 <_Bfree>
 8011742:	9b08      	ldr	r3, [sp, #32]
 8011744:	b9a3      	cbnz	r3, 8011770 <_dtoa_r+0xa00>
 8011746:	9a06      	ldr	r2, [sp, #24]
 8011748:	b992      	cbnz	r2, 8011770 <_dtoa_r+0xa00>
 801174a:	9a07      	ldr	r2, [sp, #28]
 801174c:	b982      	cbnz	r2, 8011770 <_dtoa_r+0xa00>
 801174e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011752:	d029      	beq.n	80117a8 <_dtoa_r+0xa38>
 8011754:	9b00      	ldr	r3, [sp, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	dd01      	ble.n	801175e <_dtoa_r+0x9ee>
 801175a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801175e:	9b05      	ldr	r3, [sp, #20]
 8011760:	1c5d      	adds	r5, r3, #1
 8011762:	f883 8000 	strb.w	r8, [r3]
 8011766:	e782      	b.n	801166e <_dtoa_r+0x8fe>
 8011768:	4630      	mov	r0, r6
 801176a:	e7c2      	b.n	80116f2 <_dtoa_r+0x982>
 801176c:	2301      	movs	r3, #1
 801176e:	e7e3      	b.n	8011738 <_dtoa_r+0x9c8>
 8011770:	9a00      	ldr	r2, [sp, #0]
 8011772:	2a00      	cmp	r2, #0
 8011774:	db04      	blt.n	8011780 <_dtoa_r+0xa10>
 8011776:	d125      	bne.n	80117c4 <_dtoa_r+0xa54>
 8011778:	9a06      	ldr	r2, [sp, #24]
 801177a:	bb1a      	cbnz	r2, 80117c4 <_dtoa_r+0xa54>
 801177c:	9a07      	ldr	r2, [sp, #28]
 801177e:	bb0a      	cbnz	r2, 80117c4 <_dtoa_r+0xa54>
 8011780:	2b00      	cmp	r3, #0
 8011782:	ddec      	ble.n	801175e <_dtoa_r+0x9ee>
 8011784:	2201      	movs	r2, #1
 8011786:	9904      	ldr	r1, [sp, #16]
 8011788:	4620      	mov	r0, r4
 801178a:	f000 fc69 	bl	8012060 <__lshift>
 801178e:	4639      	mov	r1, r7
 8011790:	9004      	str	r0, [sp, #16]
 8011792:	f000 fcb9 	bl	8012108 <__mcmp>
 8011796:	2800      	cmp	r0, #0
 8011798:	dc03      	bgt.n	80117a2 <_dtoa_r+0xa32>
 801179a:	d1e0      	bne.n	801175e <_dtoa_r+0x9ee>
 801179c:	f018 0f01 	tst.w	r8, #1
 80117a0:	d0dd      	beq.n	801175e <_dtoa_r+0x9ee>
 80117a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80117a6:	d1d8      	bne.n	801175a <_dtoa_r+0x9ea>
 80117a8:	9b05      	ldr	r3, [sp, #20]
 80117aa:	9a05      	ldr	r2, [sp, #20]
 80117ac:	1c5d      	adds	r5, r3, #1
 80117ae:	2339      	movs	r3, #57	; 0x39
 80117b0:	7013      	strb	r3, [r2, #0]
 80117b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80117b6:	2b39      	cmp	r3, #57	; 0x39
 80117b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80117bc:	d04f      	beq.n	801185e <_dtoa_r+0xaee>
 80117be:	3301      	adds	r3, #1
 80117c0:	7013      	strb	r3, [r2, #0]
 80117c2:	e754      	b.n	801166e <_dtoa_r+0x8fe>
 80117c4:	9a05      	ldr	r2, [sp, #20]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f102 0501 	add.w	r5, r2, #1
 80117cc:	dd06      	ble.n	80117dc <_dtoa_r+0xa6c>
 80117ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80117d2:	d0e9      	beq.n	80117a8 <_dtoa_r+0xa38>
 80117d4:	f108 0801 	add.w	r8, r8, #1
 80117d8:	9b05      	ldr	r3, [sp, #20]
 80117da:	e7c2      	b.n	8011762 <_dtoa_r+0x9f2>
 80117dc:	9a02      	ldr	r2, [sp, #8]
 80117de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80117e2:	eba5 030b 	sub.w	r3, r5, fp
 80117e6:	4293      	cmp	r3, r2
 80117e8:	d021      	beq.n	801182e <_dtoa_r+0xabe>
 80117ea:	2300      	movs	r3, #0
 80117ec:	220a      	movs	r2, #10
 80117ee:	9904      	ldr	r1, [sp, #16]
 80117f0:	4620      	mov	r0, r4
 80117f2:	f000 fabf 	bl	8011d74 <__multadd>
 80117f6:	45b1      	cmp	r9, r6
 80117f8:	9004      	str	r0, [sp, #16]
 80117fa:	f04f 0300 	mov.w	r3, #0
 80117fe:	f04f 020a 	mov.w	r2, #10
 8011802:	4649      	mov	r1, r9
 8011804:	4620      	mov	r0, r4
 8011806:	d105      	bne.n	8011814 <_dtoa_r+0xaa4>
 8011808:	f000 fab4 	bl	8011d74 <__multadd>
 801180c:	4681      	mov	r9, r0
 801180e:	4606      	mov	r6, r0
 8011810:	9505      	str	r5, [sp, #20]
 8011812:	e776      	b.n	8011702 <_dtoa_r+0x992>
 8011814:	f000 faae 	bl	8011d74 <__multadd>
 8011818:	4631      	mov	r1, r6
 801181a:	4681      	mov	r9, r0
 801181c:	2300      	movs	r3, #0
 801181e:	220a      	movs	r2, #10
 8011820:	4620      	mov	r0, r4
 8011822:	f000 faa7 	bl	8011d74 <__multadd>
 8011826:	4606      	mov	r6, r0
 8011828:	e7f2      	b.n	8011810 <_dtoa_r+0xaa0>
 801182a:	f04f 0900 	mov.w	r9, #0
 801182e:	2201      	movs	r2, #1
 8011830:	9904      	ldr	r1, [sp, #16]
 8011832:	4620      	mov	r0, r4
 8011834:	f000 fc14 	bl	8012060 <__lshift>
 8011838:	4639      	mov	r1, r7
 801183a:	9004      	str	r0, [sp, #16]
 801183c:	f000 fc64 	bl	8012108 <__mcmp>
 8011840:	2800      	cmp	r0, #0
 8011842:	dcb6      	bgt.n	80117b2 <_dtoa_r+0xa42>
 8011844:	d102      	bne.n	801184c <_dtoa_r+0xadc>
 8011846:	f018 0f01 	tst.w	r8, #1
 801184a:	d1b2      	bne.n	80117b2 <_dtoa_r+0xa42>
 801184c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011850:	2b30      	cmp	r3, #48	; 0x30
 8011852:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011856:	f47f af0a 	bne.w	801166e <_dtoa_r+0x8fe>
 801185a:	4615      	mov	r5, r2
 801185c:	e7f6      	b.n	801184c <_dtoa_r+0xadc>
 801185e:	4593      	cmp	fp, r2
 8011860:	d105      	bne.n	801186e <_dtoa_r+0xafe>
 8011862:	2331      	movs	r3, #49	; 0x31
 8011864:	f10a 0a01 	add.w	sl, sl, #1
 8011868:	f88b 3000 	strb.w	r3, [fp]
 801186c:	e6ff      	b.n	801166e <_dtoa_r+0x8fe>
 801186e:	4615      	mov	r5, r2
 8011870:	e79f      	b.n	80117b2 <_dtoa_r+0xa42>
 8011872:	f8df b064 	ldr.w	fp, [pc, #100]	; 80118d8 <_dtoa_r+0xb68>
 8011876:	e007      	b.n	8011888 <_dtoa_r+0xb18>
 8011878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801187a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80118dc <_dtoa_r+0xb6c>
 801187e:	b11b      	cbz	r3, 8011888 <_dtoa_r+0xb18>
 8011880:	f10b 0308 	add.w	r3, fp, #8
 8011884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011886:	6013      	str	r3, [r2, #0]
 8011888:	4658      	mov	r0, fp
 801188a:	b017      	add	sp, #92	; 0x5c
 801188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011890:	9b06      	ldr	r3, [sp, #24]
 8011892:	2b01      	cmp	r3, #1
 8011894:	f77f ae35 	ble.w	8011502 <_dtoa_r+0x792>
 8011898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801189a:	9307      	str	r3, [sp, #28]
 801189c:	e649      	b.n	8011532 <_dtoa_r+0x7c2>
 801189e:	9b02      	ldr	r3, [sp, #8]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	dc03      	bgt.n	80118ac <_dtoa_r+0xb3c>
 80118a4:	9b06      	ldr	r3, [sp, #24]
 80118a6:	2b02      	cmp	r3, #2
 80118a8:	f73f aecc 	bgt.w	8011644 <_dtoa_r+0x8d4>
 80118ac:	465d      	mov	r5, fp
 80118ae:	4639      	mov	r1, r7
 80118b0:	9804      	ldr	r0, [sp, #16]
 80118b2:	f7ff f9d1 	bl	8010c58 <quorem>
 80118b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80118ba:	f805 8b01 	strb.w	r8, [r5], #1
 80118be:	9a02      	ldr	r2, [sp, #8]
 80118c0:	eba5 030b 	sub.w	r3, r5, fp
 80118c4:	429a      	cmp	r2, r3
 80118c6:	ddb0      	ble.n	801182a <_dtoa_r+0xaba>
 80118c8:	2300      	movs	r3, #0
 80118ca:	220a      	movs	r2, #10
 80118cc:	9904      	ldr	r1, [sp, #16]
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 fa50 	bl	8011d74 <__multadd>
 80118d4:	9004      	str	r0, [sp, #16]
 80118d6:	e7ea      	b.n	80118ae <_dtoa_r+0xb3e>
 80118d8:	08015544 	.word	0x08015544
 80118dc:	080152b6 	.word	0x080152b6

080118e0 <__sflush_r>:
 80118e0:	898a      	ldrh	r2, [r1, #12]
 80118e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e6:	4605      	mov	r5, r0
 80118e8:	0710      	lsls	r0, r2, #28
 80118ea:	460c      	mov	r4, r1
 80118ec:	d458      	bmi.n	80119a0 <__sflush_r+0xc0>
 80118ee:	684b      	ldr	r3, [r1, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	dc05      	bgt.n	8011900 <__sflush_r+0x20>
 80118f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	dc02      	bgt.n	8011900 <__sflush_r+0x20>
 80118fa:	2000      	movs	r0, #0
 80118fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011902:	2e00      	cmp	r6, #0
 8011904:	d0f9      	beq.n	80118fa <__sflush_r+0x1a>
 8011906:	2300      	movs	r3, #0
 8011908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801190c:	682f      	ldr	r7, [r5, #0]
 801190e:	6a21      	ldr	r1, [r4, #32]
 8011910:	602b      	str	r3, [r5, #0]
 8011912:	d032      	beq.n	801197a <__sflush_r+0x9a>
 8011914:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011916:	89a3      	ldrh	r3, [r4, #12]
 8011918:	075a      	lsls	r2, r3, #29
 801191a:	d505      	bpl.n	8011928 <__sflush_r+0x48>
 801191c:	6863      	ldr	r3, [r4, #4]
 801191e:	1ac0      	subs	r0, r0, r3
 8011920:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011922:	b10b      	cbz	r3, 8011928 <__sflush_r+0x48>
 8011924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011926:	1ac0      	subs	r0, r0, r3
 8011928:	2300      	movs	r3, #0
 801192a:	4602      	mov	r2, r0
 801192c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801192e:	6a21      	ldr	r1, [r4, #32]
 8011930:	4628      	mov	r0, r5
 8011932:	47b0      	blx	r6
 8011934:	1c43      	adds	r3, r0, #1
 8011936:	89a3      	ldrh	r3, [r4, #12]
 8011938:	d106      	bne.n	8011948 <__sflush_r+0x68>
 801193a:	6829      	ldr	r1, [r5, #0]
 801193c:	291d      	cmp	r1, #29
 801193e:	d848      	bhi.n	80119d2 <__sflush_r+0xf2>
 8011940:	4a29      	ldr	r2, [pc, #164]	; (80119e8 <__sflush_r+0x108>)
 8011942:	40ca      	lsrs	r2, r1
 8011944:	07d6      	lsls	r6, r2, #31
 8011946:	d544      	bpl.n	80119d2 <__sflush_r+0xf2>
 8011948:	2200      	movs	r2, #0
 801194a:	6062      	str	r2, [r4, #4]
 801194c:	04d9      	lsls	r1, r3, #19
 801194e:	6922      	ldr	r2, [r4, #16]
 8011950:	6022      	str	r2, [r4, #0]
 8011952:	d504      	bpl.n	801195e <__sflush_r+0x7e>
 8011954:	1c42      	adds	r2, r0, #1
 8011956:	d101      	bne.n	801195c <__sflush_r+0x7c>
 8011958:	682b      	ldr	r3, [r5, #0]
 801195a:	b903      	cbnz	r3, 801195e <__sflush_r+0x7e>
 801195c:	6560      	str	r0, [r4, #84]	; 0x54
 801195e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011960:	602f      	str	r7, [r5, #0]
 8011962:	2900      	cmp	r1, #0
 8011964:	d0c9      	beq.n	80118fa <__sflush_r+0x1a>
 8011966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801196a:	4299      	cmp	r1, r3
 801196c:	d002      	beq.n	8011974 <__sflush_r+0x94>
 801196e:	4628      	mov	r0, r5
 8011970:	f000 fc9e 	bl	80122b0 <_free_r>
 8011974:	2000      	movs	r0, #0
 8011976:	6360      	str	r0, [r4, #52]	; 0x34
 8011978:	e7c0      	b.n	80118fc <__sflush_r+0x1c>
 801197a:	2301      	movs	r3, #1
 801197c:	4628      	mov	r0, r5
 801197e:	47b0      	blx	r6
 8011980:	1c41      	adds	r1, r0, #1
 8011982:	d1c8      	bne.n	8011916 <__sflush_r+0x36>
 8011984:	682b      	ldr	r3, [r5, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d0c5      	beq.n	8011916 <__sflush_r+0x36>
 801198a:	2b1d      	cmp	r3, #29
 801198c:	d001      	beq.n	8011992 <__sflush_r+0xb2>
 801198e:	2b16      	cmp	r3, #22
 8011990:	d101      	bne.n	8011996 <__sflush_r+0xb6>
 8011992:	602f      	str	r7, [r5, #0]
 8011994:	e7b1      	b.n	80118fa <__sflush_r+0x1a>
 8011996:	89a3      	ldrh	r3, [r4, #12]
 8011998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801199c:	81a3      	strh	r3, [r4, #12]
 801199e:	e7ad      	b.n	80118fc <__sflush_r+0x1c>
 80119a0:	690f      	ldr	r7, [r1, #16]
 80119a2:	2f00      	cmp	r7, #0
 80119a4:	d0a9      	beq.n	80118fa <__sflush_r+0x1a>
 80119a6:	0793      	lsls	r3, r2, #30
 80119a8:	680e      	ldr	r6, [r1, #0]
 80119aa:	bf08      	it	eq
 80119ac:	694b      	ldreq	r3, [r1, #20]
 80119ae:	600f      	str	r7, [r1, #0]
 80119b0:	bf18      	it	ne
 80119b2:	2300      	movne	r3, #0
 80119b4:	eba6 0807 	sub.w	r8, r6, r7
 80119b8:	608b      	str	r3, [r1, #8]
 80119ba:	f1b8 0f00 	cmp.w	r8, #0
 80119be:	dd9c      	ble.n	80118fa <__sflush_r+0x1a>
 80119c0:	4643      	mov	r3, r8
 80119c2:	463a      	mov	r2, r7
 80119c4:	6a21      	ldr	r1, [r4, #32]
 80119c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119c8:	4628      	mov	r0, r5
 80119ca:	47b0      	blx	r6
 80119cc:	2800      	cmp	r0, #0
 80119ce:	dc06      	bgt.n	80119de <__sflush_r+0xfe>
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d6:	81a3      	strh	r3, [r4, #12]
 80119d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119dc:	e78e      	b.n	80118fc <__sflush_r+0x1c>
 80119de:	4407      	add	r7, r0
 80119e0:	eba8 0800 	sub.w	r8, r8, r0
 80119e4:	e7e9      	b.n	80119ba <__sflush_r+0xda>
 80119e6:	bf00      	nop
 80119e8:	20400001 	.word	0x20400001

080119ec <_fflush_r>:
 80119ec:	b538      	push	{r3, r4, r5, lr}
 80119ee:	690b      	ldr	r3, [r1, #16]
 80119f0:	4605      	mov	r5, r0
 80119f2:	460c      	mov	r4, r1
 80119f4:	b1db      	cbz	r3, 8011a2e <_fflush_r+0x42>
 80119f6:	b118      	cbz	r0, 8011a00 <_fflush_r+0x14>
 80119f8:	6983      	ldr	r3, [r0, #24]
 80119fa:	b90b      	cbnz	r3, 8011a00 <_fflush_r+0x14>
 80119fc:	f000 f860 	bl	8011ac0 <__sinit>
 8011a00:	4b0c      	ldr	r3, [pc, #48]	; (8011a34 <_fflush_r+0x48>)
 8011a02:	429c      	cmp	r4, r3
 8011a04:	d109      	bne.n	8011a1a <_fflush_r+0x2e>
 8011a06:	686c      	ldr	r4, [r5, #4]
 8011a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a0c:	b17b      	cbz	r3, 8011a2e <_fflush_r+0x42>
 8011a0e:	4621      	mov	r1, r4
 8011a10:	4628      	mov	r0, r5
 8011a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a16:	f7ff bf63 	b.w	80118e0 <__sflush_r>
 8011a1a:	4b07      	ldr	r3, [pc, #28]	; (8011a38 <_fflush_r+0x4c>)
 8011a1c:	429c      	cmp	r4, r3
 8011a1e:	d101      	bne.n	8011a24 <_fflush_r+0x38>
 8011a20:	68ac      	ldr	r4, [r5, #8]
 8011a22:	e7f1      	b.n	8011a08 <_fflush_r+0x1c>
 8011a24:	4b05      	ldr	r3, [pc, #20]	; (8011a3c <_fflush_r+0x50>)
 8011a26:	429c      	cmp	r4, r3
 8011a28:	bf08      	it	eq
 8011a2a:	68ec      	ldreq	r4, [r5, #12]
 8011a2c:	e7ec      	b.n	8011a08 <_fflush_r+0x1c>
 8011a2e:	2000      	movs	r0, #0
 8011a30:	bd38      	pop	{r3, r4, r5, pc}
 8011a32:	bf00      	nop
 8011a34:	080152e4 	.word	0x080152e4
 8011a38:	08015304 	.word	0x08015304
 8011a3c:	080152c4 	.word	0x080152c4

08011a40 <std>:
 8011a40:	2300      	movs	r3, #0
 8011a42:	b510      	push	{r4, lr}
 8011a44:	4604      	mov	r4, r0
 8011a46:	e9c0 3300 	strd	r3, r3, [r0]
 8011a4a:	6083      	str	r3, [r0, #8]
 8011a4c:	8181      	strh	r1, [r0, #12]
 8011a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8011a50:	81c2      	strh	r2, [r0, #14]
 8011a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a56:	6183      	str	r3, [r0, #24]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	2208      	movs	r2, #8
 8011a5c:	305c      	adds	r0, #92	; 0x5c
 8011a5e:	f7fe fb17 	bl	8010090 <memset>
 8011a62:	4b05      	ldr	r3, [pc, #20]	; (8011a78 <std+0x38>)
 8011a64:	6263      	str	r3, [r4, #36]	; 0x24
 8011a66:	4b05      	ldr	r3, [pc, #20]	; (8011a7c <std+0x3c>)
 8011a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a6a:	4b05      	ldr	r3, [pc, #20]	; (8011a80 <std+0x40>)
 8011a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a6e:	4b05      	ldr	r3, [pc, #20]	; (8011a84 <std+0x44>)
 8011a70:	6224      	str	r4, [r4, #32]
 8011a72:	6323      	str	r3, [r4, #48]	; 0x30
 8011a74:	bd10      	pop	{r4, pc}
 8011a76:	bf00      	nop
 8011a78:	08012945 	.word	0x08012945
 8011a7c:	08012967 	.word	0x08012967
 8011a80:	0801299f 	.word	0x0801299f
 8011a84:	080129c3 	.word	0x080129c3

08011a88 <_cleanup_r>:
 8011a88:	4901      	ldr	r1, [pc, #4]	; (8011a90 <_cleanup_r+0x8>)
 8011a8a:	f000 b885 	b.w	8011b98 <_fwalk_reent>
 8011a8e:	bf00      	nop
 8011a90:	080119ed 	.word	0x080119ed

08011a94 <__sfmoreglue>:
 8011a94:	b570      	push	{r4, r5, r6, lr}
 8011a96:	1e4a      	subs	r2, r1, #1
 8011a98:	2568      	movs	r5, #104	; 0x68
 8011a9a:	4355      	muls	r5, r2
 8011a9c:	460e      	mov	r6, r1
 8011a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011aa2:	f000 fc53 	bl	801234c <_malloc_r>
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	b140      	cbz	r0, 8011abc <__sfmoreglue+0x28>
 8011aaa:	2100      	movs	r1, #0
 8011aac:	e9c0 1600 	strd	r1, r6, [r0]
 8011ab0:	300c      	adds	r0, #12
 8011ab2:	60a0      	str	r0, [r4, #8]
 8011ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ab8:	f7fe faea 	bl	8010090 <memset>
 8011abc:	4620      	mov	r0, r4
 8011abe:	bd70      	pop	{r4, r5, r6, pc}

08011ac0 <__sinit>:
 8011ac0:	6983      	ldr	r3, [r0, #24]
 8011ac2:	b510      	push	{r4, lr}
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	bb33      	cbnz	r3, 8011b16 <__sinit+0x56>
 8011ac8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011acc:	6503      	str	r3, [r0, #80]	; 0x50
 8011ace:	4b12      	ldr	r3, [pc, #72]	; (8011b18 <__sinit+0x58>)
 8011ad0:	4a12      	ldr	r2, [pc, #72]	; (8011b1c <__sinit+0x5c>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	6282      	str	r2, [r0, #40]	; 0x28
 8011ad6:	4298      	cmp	r0, r3
 8011ad8:	bf04      	itt	eq
 8011ada:	2301      	moveq	r3, #1
 8011adc:	6183      	streq	r3, [r0, #24]
 8011ade:	f000 f81f 	bl	8011b20 <__sfp>
 8011ae2:	6060      	str	r0, [r4, #4]
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f000 f81b 	bl	8011b20 <__sfp>
 8011aea:	60a0      	str	r0, [r4, #8]
 8011aec:	4620      	mov	r0, r4
 8011aee:	f000 f817 	bl	8011b20 <__sfp>
 8011af2:	2200      	movs	r2, #0
 8011af4:	60e0      	str	r0, [r4, #12]
 8011af6:	2104      	movs	r1, #4
 8011af8:	6860      	ldr	r0, [r4, #4]
 8011afa:	f7ff ffa1 	bl	8011a40 <std>
 8011afe:	2201      	movs	r2, #1
 8011b00:	2109      	movs	r1, #9
 8011b02:	68a0      	ldr	r0, [r4, #8]
 8011b04:	f7ff ff9c 	bl	8011a40 <std>
 8011b08:	2202      	movs	r2, #2
 8011b0a:	2112      	movs	r1, #18
 8011b0c:	68e0      	ldr	r0, [r4, #12]
 8011b0e:	f7ff ff97 	bl	8011a40 <std>
 8011b12:	2301      	movs	r3, #1
 8011b14:	61a3      	str	r3, [r4, #24]
 8011b16:	bd10      	pop	{r4, pc}
 8011b18:	08015280 	.word	0x08015280
 8011b1c:	08011a89 	.word	0x08011a89

08011b20 <__sfp>:
 8011b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b22:	4b1b      	ldr	r3, [pc, #108]	; (8011b90 <__sfp+0x70>)
 8011b24:	681e      	ldr	r6, [r3, #0]
 8011b26:	69b3      	ldr	r3, [r6, #24]
 8011b28:	4607      	mov	r7, r0
 8011b2a:	b913      	cbnz	r3, 8011b32 <__sfp+0x12>
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f7ff ffc7 	bl	8011ac0 <__sinit>
 8011b32:	3648      	adds	r6, #72	; 0x48
 8011b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b38:	3b01      	subs	r3, #1
 8011b3a:	d503      	bpl.n	8011b44 <__sfp+0x24>
 8011b3c:	6833      	ldr	r3, [r6, #0]
 8011b3e:	b133      	cbz	r3, 8011b4e <__sfp+0x2e>
 8011b40:	6836      	ldr	r6, [r6, #0]
 8011b42:	e7f7      	b.n	8011b34 <__sfp+0x14>
 8011b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b48:	b16d      	cbz	r5, 8011b66 <__sfp+0x46>
 8011b4a:	3468      	adds	r4, #104	; 0x68
 8011b4c:	e7f4      	b.n	8011b38 <__sfp+0x18>
 8011b4e:	2104      	movs	r1, #4
 8011b50:	4638      	mov	r0, r7
 8011b52:	f7ff ff9f 	bl	8011a94 <__sfmoreglue>
 8011b56:	6030      	str	r0, [r6, #0]
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d1f1      	bne.n	8011b40 <__sfp+0x20>
 8011b5c:	230c      	movs	r3, #12
 8011b5e:	603b      	str	r3, [r7, #0]
 8011b60:	4604      	mov	r4, r0
 8011b62:	4620      	mov	r0, r4
 8011b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b66:	4b0b      	ldr	r3, [pc, #44]	; (8011b94 <__sfp+0x74>)
 8011b68:	6665      	str	r5, [r4, #100]	; 0x64
 8011b6a:	e9c4 5500 	strd	r5, r5, [r4]
 8011b6e:	60a5      	str	r5, [r4, #8]
 8011b70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011b74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011b78:	2208      	movs	r2, #8
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b80:	f7fe fa86 	bl	8010090 <memset>
 8011b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b8c:	e7e9      	b.n	8011b62 <__sfp+0x42>
 8011b8e:	bf00      	nop
 8011b90:	08015280 	.word	0x08015280
 8011b94:	ffff0001 	.word	0xffff0001

08011b98 <_fwalk_reent>:
 8011b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b9c:	4680      	mov	r8, r0
 8011b9e:	4689      	mov	r9, r1
 8011ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ba4:	2600      	movs	r6, #0
 8011ba6:	b914      	cbnz	r4, 8011bae <_fwalk_reent+0x16>
 8011ba8:	4630      	mov	r0, r6
 8011baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011bb2:	3f01      	subs	r7, #1
 8011bb4:	d501      	bpl.n	8011bba <_fwalk_reent+0x22>
 8011bb6:	6824      	ldr	r4, [r4, #0]
 8011bb8:	e7f5      	b.n	8011ba6 <_fwalk_reent+0xe>
 8011bba:	89ab      	ldrh	r3, [r5, #12]
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d907      	bls.n	8011bd0 <_fwalk_reent+0x38>
 8011bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	d003      	beq.n	8011bd0 <_fwalk_reent+0x38>
 8011bc8:	4629      	mov	r1, r5
 8011bca:	4640      	mov	r0, r8
 8011bcc:	47c8      	blx	r9
 8011bce:	4306      	orrs	r6, r0
 8011bd0:	3568      	adds	r5, #104	; 0x68
 8011bd2:	e7ee      	b.n	8011bb2 <_fwalk_reent+0x1a>

08011bd4 <_localeconv_r>:
 8011bd4:	4b04      	ldr	r3, [pc, #16]	; (8011be8 <_localeconv_r+0x14>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	6a18      	ldr	r0, [r3, #32]
 8011bda:	4b04      	ldr	r3, [pc, #16]	; (8011bec <_localeconv_r+0x18>)
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	bf08      	it	eq
 8011be0:	4618      	moveq	r0, r3
 8011be2:	30f0      	adds	r0, #240	; 0xf0
 8011be4:	4770      	bx	lr
 8011be6:	bf00      	nop
 8011be8:	20001c38 	.word	0x20001c38
 8011bec:	20001c9c 	.word	0x20001c9c

08011bf0 <__swhatbuf_r>:
 8011bf0:	b570      	push	{r4, r5, r6, lr}
 8011bf2:	460e      	mov	r6, r1
 8011bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf8:	2900      	cmp	r1, #0
 8011bfa:	b096      	sub	sp, #88	; 0x58
 8011bfc:	4614      	mov	r4, r2
 8011bfe:	461d      	mov	r5, r3
 8011c00:	da07      	bge.n	8011c12 <__swhatbuf_r+0x22>
 8011c02:	2300      	movs	r3, #0
 8011c04:	602b      	str	r3, [r5, #0]
 8011c06:	89b3      	ldrh	r3, [r6, #12]
 8011c08:	061a      	lsls	r2, r3, #24
 8011c0a:	d410      	bmi.n	8011c2e <__swhatbuf_r+0x3e>
 8011c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c10:	e00e      	b.n	8011c30 <__swhatbuf_r+0x40>
 8011c12:	466a      	mov	r2, sp
 8011c14:	f000 fefc 	bl	8012a10 <_fstat_r>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	dbf2      	blt.n	8011c02 <__swhatbuf_r+0x12>
 8011c1c:	9a01      	ldr	r2, [sp, #4]
 8011c1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c26:	425a      	negs	r2, r3
 8011c28:	415a      	adcs	r2, r3
 8011c2a:	602a      	str	r2, [r5, #0]
 8011c2c:	e7ee      	b.n	8011c0c <__swhatbuf_r+0x1c>
 8011c2e:	2340      	movs	r3, #64	; 0x40
 8011c30:	2000      	movs	r0, #0
 8011c32:	6023      	str	r3, [r4, #0]
 8011c34:	b016      	add	sp, #88	; 0x58
 8011c36:	bd70      	pop	{r4, r5, r6, pc}

08011c38 <__smakebuf_r>:
 8011c38:	898b      	ldrh	r3, [r1, #12]
 8011c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c3c:	079d      	lsls	r5, r3, #30
 8011c3e:	4606      	mov	r6, r0
 8011c40:	460c      	mov	r4, r1
 8011c42:	d507      	bpl.n	8011c54 <__smakebuf_r+0x1c>
 8011c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	6123      	str	r3, [r4, #16]
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	6163      	str	r3, [r4, #20]
 8011c50:	b002      	add	sp, #8
 8011c52:	bd70      	pop	{r4, r5, r6, pc}
 8011c54:	ab01      	add	r3, sp, #4
 8011c56:	466a      	mov	r2, sp
 8011c58:	f7ff ffca 	bl	8011bf0 <__swhatbuf_r>
 8011c5c:	9900      	ldr	r1, [sp, #0]
 8011c5e:	4605      	mov	r5, r0
 8011c60:	4630      	mov	r0, r6
 8011c62:	f000 fb73 	bl	801234c <_malloc_r>
 8011c66:	b948      	cbnz	r0, 8011c7c <__smakebuf_r+0x44>
 8011c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c6c:	059a      	lsls	r2, r3, #22
 8011c6e:	d4ef      	bmi.n	8011c50 <__smakebuf_r+0x18>
 8011c70:	f023 0303 	bic.w	r3, r3, #3
 8011c74:	f043 0302 	orr.w	r3, r3, #2
 8011c78:	81a3      	strh	r3, [r4, #12]
 8011c7a:	e7e3      	b.n	8011c44 <__smakebuf_r+0xc>
 8011c7c:	4b0d      	ldr	r3, [pc, #52]	; (8011cb4 <__smakebuf_r+0x7c>)
 8011c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c80:	89a3      	ldrh	r3, [r4, #12]
 8011c82:	6020      	str	r0, [r4, #0]
 8011c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c88:	81a3      	strh	r3, [r4, #12]
 8011c8a:	9b00      	ldr	r3, [sp, #0]
 8011c8c:	6163      	str	r3, [r4, #20]
 8011c8e:	9b01      	ldr	r3, [sp, #4]
 8011c90:	6120      	str	r0, [r4, #16]
 8011c92:	b15b      	cbz	r3, 8011cac <__smakebuf_r+0x74>
 8011c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f000 fecb 	bl	8012a34 <_isatty_r>
 8011c9e:	b128      	cbz	r0, 8011cac <__smakebuf_r+0x74>
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	f023 0303 	bic.w	r3, r3, #3
 8011ca6:	f043 0301 	orr.w	r3, r3, #1
 8011caa:	81a3      	strh	r3, [r4, #12]
 8011cac:	89a3      	ldrh	r3, [r4, #12]
 8011cae:	431d      	orrs	r5, r3
 8011cb0:	81a5      	strh	r5, [r4, #12]
 8011cb2:	e7cd      	b.n	8011c50 <__smakebuf_r+0x18>
 8011cb4:	08011a89 	.word	0x08011a89

08011cb8 <malloc>:
 8011cb8:	4b02      	ldr	r3, [pc, #8]	; (8011cc4 <malloc+0xc>)
 8011cba:	4601      	mov	r1, r0
 8011cbc:	6818      	ldr	r0, [r3, #0]
 8011cbe:	f000 bb45 	b.w	801234c <_malloc_r>
 8011cc2:	bf00      	nop
 8011cc4:	20001c38 	.word	0x20001c38

08011cc8 <memcpy>:
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	1e43      	subs	r3, r0, #1
 8011ccc:	440a      	add	r2, r1
 8011cce:	4291      	cmp	r1, r2
 8011cd0:	d100      	bne.n	8011cd4 <memcpy+0xc>
 8011cd2:	bd10      	pop	{r4, pc}
 8011cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cdc:	e7f7      	b.n	8011cce <memcpy+0x6>

08011cde <_Balloc>:
 8011cde:	b570      	push	{r4, r5, r6, lr}
 8011ce0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	460e      	mov	r6, r1
 8011ce6:	b93d      	cbnz	r5, 8011cf8 <_Balloc+0x1a>
 8011ce8:	2010      	movs	r0, #16
 8011cea:	f7ff ffe5 	bl	8011cb8 <malloc>
 8011cee:	6260      	str	r0, [r4, #36]	; 0x24
 8011cf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011cf4:	6005      	str	r5, [r0, #0]
 8011cf6:	60c5      	str	r5, [r0, #12]
 8011cf8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011cfa:	68eb      	ldr	r3, [r5, #12]
 8011cfc:	b183      	cbz	r3, 8011d20 <_Balloc+0x42>
 8011cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011d06:	b9b8      	cbnz	r0, 8011d38 <_Balloc+0x5a>
 8011d08:	2101      	movs	r1, #1
 8011d0a:	fa01 f506 	lsl.w	r5, r1, r6
 8011d0e:	1d6a      	adds	r2, r5, #5
 8011d10:	0092      	lsls	r2, r2, #2
 8011d12:	4620      	mov	r0, r4
 8011d14:	f000 fabe 	bl	8012294 <_calloc_r>
 8011d18:	b160      	cbz	r0, 8011d34 <_Balloc+0x56>
 8011d1a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011d1e:	e00e      	b.n	8011d3e <_Balloc+0x60>
 8011d20:	2221      	movs	r2, #33	; 0x21
 8011d22:	2104      	movs	r1, #4
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 fab5 	bl	8012294 <_calloc_r>
 8011d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d2c:	60e8      	str	r0, [r5, #12]
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1e4      	bne.n	8011cfe <_Balloc+0x20>
 8011d34:	2000      	movs	r0, #0
 8011d36:	bd70      	pop	{r4, r5, r6, pc}
 8011d38:	6802      	ldr	r2, [r0, #0]
 8011d3a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011d3e:	2300      	movs	r3, #0
 8011d40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d44:	e7f7      	b.n	8011d36 <_Balloc+0x58>

08011d46 <_Bfree>:
 8011d46:	b570      	push	{r4, r5, r6, lr}
 8011d48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	460d      	mov	r5, r1
 8011d4e:	b93c      	cbnz	r4, 8011d60 <_Bfree+0x1a>
 8011d50:	2010      	movs	r0, #16
 8011d52:	f7ff ffb1 	bl	8011cb8 <malloc>
 8011d56:	6270      	str	r0, [r6, #36]	; 0x24
 8011d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d5c:	6004      	str	r4, [r0, #0]
 8011d5e:	60c4      	str	r4, [r0, #12]
 8011d60:	b13d      	cbz	r5, 8011d72 <_Bfree+0x2c>
 8011d62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011d64:	686a      	ldr	r2, [r5, #4]
 8011d66:	68db      	ldr	r3, [r3, #12]
 8011d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d6c:	6029      	str	r1, [r5, #0]
 8011d6e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011d72:	bd70      	pop	{r4, r5, r6, pc}

08011d74 <__multadd>:
 8011d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d78:	690d      	ldr	r5, [r1, #16]
 8011d7a:	461f      	mov	r7, r3
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	460c      	mov	r4, r1
 8011d80:	f101 0c14 	add.w	ip, r1, #20
 8011d84:	2300      	movs	r3, #0
 8011d86:	f8dc 0000 	ldr.w	r0, [ip]
 8011d8a:	b281      	uxth	r1, r0
 8011d8c:	fb02 7101 	mla	r1, r2, r1, r7
 8011d90:	0c0f      	lsrs	r7, r1, #16
 8011d92:	0c00      	lsrs	r0, r0, #16
 8011d94:	fb02 7000 	mla	r0, r2, r0, r7
 8011d98:	b289      	uxth	r1, r1
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011da0:	429d      	cmp	r5, r3
 8011da2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011da6:	f84c 1b04 	str.w	r1, [ip], #4
 8011daa:	dcec      	bgt.n	8011d86 <__multadd+0x12>
 8011dac:	b1d7      	cbz	r7, 8011de4 <__multadd+0x70>
 8011dae:	68a3      	ldr	r3, [r4, #8]
 8011db0:	42ab      	cmp	r3, r5
 8011db2:	dc12      	bgt.n	8011dda <__multadd+0x66>
 8011db4:	6861      	ldr	r1, [r4, #4]
 8011db6:	4630      	mov	r0, r6
 8011db8:	3101      	adds	r1, #1
 8011dba:	f7ff ff90 	bl	8011cde <_Balloc>
 8011dbe:	6922      	ldr	r2, [r4, #16]
 8011dc0:	3202      	adds	r2, #2
 8011dc2:	f104 010c 	add.w	r1, r4, #12
 8011dc6:	4680      	mov	r8, r0
 8011dc8:	0092      	lsls	r2, r2, #2
 8011dca:	300c      	adds	r0, #12
 8011dcc:	f7ff ff7c 	bl	8011cc8 <memcpy>
 8011dd0:	4621      	mov	r1, r4
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	f7ff ffb7 	bl	8011d46 <_Bfree>
 8011dd8:	4644      	mov	r4, r8
 8011dda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011dde:	3501      	adds	r5, #1
 8011de0:	615f      	str	r7, [r3, #20]
 8011de2:	6125      	str	r5, [r4, #16]
 8011de4:	4620      	mov	r0, r4
 8011de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011dea <__hi0bits>:
 8011dea:	0c02      	lsrs	r2, r0, #16
 8011dec:	0412      	lsls	r2, r2, #16
 8011dee:	4603      	mov	r3, r0
 8011df0:	b9b2      	cbnz	r2, 8011e20 <__hi0bits+0x36>
 8011df2:	0403      	lsls	r3, r0, #16
 8011df4:	2010      	movs	r0, #16
 8011df6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011dfa:	bf04      	itt	eq
 8011dfc:	021b      	lsleq	r3, r3, #8
 8011dfe:	3008      	addeq	r0, #8
 8011e00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011e04:	bf04      	itt	eq
 8011e06:	011b      	lsleq	r3, r3, #4
 8011e08:	3004      	addeq	r0, #4
 8011e0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011e0e:	bf04      	itt	eq
 8011e10:	009b      	lsleq	r3, r3, #2
 8011e12:	3002      	addeq	r0, #2
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	db06      	blt.n	8011e26 <__hi0bits+0x3c>
 8011e18:	005b      	lsls	r3, r3, #1
 8011e1a:	d503      	bpl.n	8011e24 <__hi0bits+0x3a>
 8011e1c:	3001      	adds	r0, #1
 8011e1e:	4770      	bx	lr
 8011e20:	2000      	movs	r0, #0
 8011e22:	e7e8      	b.n	8011df6 <__hi0bits+0xc>
 8011e24:	2020      	movs	r0, #32
 8011e26:	4770      	bx	lr

08011e28 <__lo0bits>:
 8011e28:	6803      	ldr	r3, [r0, #0]
 8011e2a:	f013 0207 	ands.w	r2, r3, #7
 8011e2e:	4601      	mov	r1, r0
 8011e30:	d00b      	beq.n	8011e4a <__lo0bits+0x22>
 8011e32:	07da      	lsls	r2, r3, #31
 8011e34:	d423      	bmi.n	8011e7e <__lo0bits+0x56>
 8011e36:	0798      	lsls	r0, r3, #30
 8011e38:	bf49      	itett	mi
 8011e3a:	085b      	lsrmi	r3, r3, #1
 8011e3c:	089b      	lsrpl	r3, r3, #2
 8011e3e:	2001      	movmi	r0, #1
 8011e40:	600b      	strmi	r3, [r1, #0]
 8011e42:	bf5c      	itt	pl
 8011e44:	600b      	strpl	r3, [r1, #0]
 8011e46:	2002      	movpl	r0, #2
 8011e48:	4770      	bx	lr
 8011e4a:	b298      	uxth	r0, r3
 8011e4c:	b9a8      	cbnz	r0, 8011e7a <__lo0bits+0x52>
 8011e4e:	0c1b      	lsrs	r3, r3, #16
 8011e50:	2010      	movs	r0, #16
 8011e52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011e56:	bf04      	itt	eq
 8011e58:	0a1b      	lsreq	r3, r3, #8
 8011e5a:	3008      	addeq	r0, #8
 8011e5c:	071a      	lsls	r2, r3, #28
 8011e5e:	bf04      	itt	eq
 8011e60:	091b      	lsreq	r3, r3, #4
 8011e62:	3004      	addeq	r0, #4
 8011e64:	079a      	lsls	r2, r3, #30
 8011e66:	bf04      	itt	eq
 8011e68:	089b      	lsreq	r3, r3, #2
 8011e6a:	3002      	addeq	r0, #2
 8011e6c:	07da      	lsls	r2, r3, #31
 8011e6e:	d402      	bmi.n	8011e76 <__lo0bits+0x4e>
 8011e70:	085b      	lsrs	r3, r3, #1
 8011e72:	d006      	beq.n	8011e82 <__lo0bits+0x5a>
 8011e74:	3001      	adds	r0, #1
 8011e76:	600b      	str	r3, [r1, #0]
 8011e78:	4770      	bx	lr
 8011e7a:	4610      	mov	r0, r2
 8011e7c:	e7e9      	b.n	8011e52 <__lo0bits+0x2a>
 8011e7e:	2000      	movs	r0, #0
 8011e80:	4770      	bx	lr
 8011e82:	2020      	movs	r0, #32
 8011e84:	4770      	bx	lr

08011e86 <__i2b>:
 8011e86:	b510      	push	{r4, lr}
 8011e88:	460c      	mov	r4, r1
 8011e8a:	2101      	movs	r1, #1
 8011e8c:	f7ff ff27 	bl	8011cde <_Balloc>
 8011e90:	2201      	movs	r2, #1
 8011e92:	6144      	str	r4, [r0, #20]
 8011e94:	6102      	str	r2, [r0, #16]
 8011e96:	bd10      	pop	{r4, pc}

08011e98 <__multiply>:
 8011e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e9c:	4614      	mov	r4, r2
 8011e9e:	690a      	ldr	r2, [r1, #16]
 8011ea0:	6923      	ldr	r3, [r4, #16]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	bfb8      	it	lt
 8011ea6:	460b      	movlt	r3, r1
 8011ea8:	4688      	mov	r8, r1
 8011eaa:	bfbc      	itt	lt
 8011eac:	46a0      	movlt	r8, r4
 8011eae:	461c      	movlt	r4, r3
 8011eb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011eb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011eb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ebc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ec0:	eb07 0609 	add.w	r6, r7, r9
 8011ec4:	42b3      	cmp	r3, r6
 8011ec6:	bfb8      	it	lt
 8011ec8:	3101      	addlt	r1, #1
 8011eca:	f7ff ff08 	bl	8011cde <_Balloc>
 8011ece:	f100 0514 	add.w	r5, r0, #20
 8011ed2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011ed6:	462b      	mov	r3, r5
 8011ed8:	2200      	movs	r2, #0
 8011eda:	4573      	cmp	r3, lr
 8011edc:	d316      	bcc.n	8011f0c <__multiply+0x74>
 8011ede:	f104 0214 	add.w	r2, r4, #20
 8011ee2:	f108 0114 	add.w	r1, r8, #20
 8011ee6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011eea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	9b00      	ldr	r3, [sp, #0]
 8011ef2:	9201      	str	r2, [sp, #4]
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d80c      	bhi.n	8011f12 <__multiply+0x7a>
 8011ef8:	2e00      	cmp	r6, #0
 8011efa:	dd03      	ble.n	8011f04 <__multiply+0x6c>
 8011efc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d05d      	beq.n	8011fc0 <__multiply+0x128>
 8011f04:	6106      	str	r6, [r0, #16]
 8011f06:	b003      	add	sp, #12
 8011f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f0c:	f843 2b04 	str.w	r2, [r3], #4
 8011f10:	e7e3      	b.n	8011eda <__multiply+0x42>
 8011f12:	f8b2 b000 	ldrh.w	fp, [r2]
 8011f16:	f1bb 0f00 	cmp.w	fp, #0
 8011f1a:	d023      	beq.n	8011f64 <__multiply+0xcc>
 8011f1c:	4689      	mov	r9, r1
 8011f1e:	46ac      	mov	ip, r5
 8011f20:	f04f 0800 	mov.w	r8, #0
 8011f24:	f859 4b04 	ldr.w	r4, [r9], #4
 8011f28:	f8dc a000 	ldr.w	sl, [ip]
 8011f2c:	b2a3      	uxth	r3, r4
 8011f2e:	fa1f fa8a 	uxth.w	sl, sl
 8011f32:	fb0b a303 	mla	r3, fp, r3, sl
 8011f36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011f3a:	f8dc 4000 	ldr.w	r4, [ip]
 8011f3e:	4443      	add	r3, r8
 8011f40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011f44:	fb0b 840a 	mla	r4, fp, sl, r8
 8011f48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011f4c:	46e2      	mov	sl, ip
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011f54:	454f      	cmp	r7, r9
 8011f56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011f5a:	f84a 3b04 	str.w	r3, [sl], #4
 8011f5e:	d82b      	bhi.n	8011fb8 <__multiply+0x120>
 8011f60:	f8cc 8004 	str.w	r8, [ip, #4]
 8011f64:	9b01      	ldr	r3, [sp, #4]
 8011f66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011f6a:	3204      	adds	r2, #4
 8011f6c:	f1ba 0f00 	cmp.w	sl, #0
 8011f70:	d020      	beq.n	8011fb4 <__multiply+0x11c>
 8011f72:	682b      	ldr	r3, [r5, #0]
 8011f74:	4689      	mov	r9, r1
 8011f76:	46a8      	mov	r8, r5
 8011f78:	f04f 0b00 	mov.w	fp, #0
 8011f7c:	f8b9 c000 	ldrh.w	ip, [r9]
 8011f80:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011f84:	fb0a 440c 	mla	r4, sl, ip, r4
 8011f88:	445c      	add	r4, fp
 8011f8a:	46c4      	mov	ip, r8
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011f92:	f84c 3b04 	str.w	r3, [ip], #4
 8011f96:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f9a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011f9e:	0c1b      	lsrs	r3, r3, #16
 8011fa0:	fb0a b303 	mla	r3, sl, r3, fp
 8011fa4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011fa8:	454f      	cmp	r7, r9
 8011faa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011fae:	d805      	bhi.n	8011fbc <__multiply+0x124>
 8011fb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8011fb4:	3504      	adds	r5, #4
 8011fb6:	e79b      	b.n	8011ef0 <__multiply+0x58>
 8011fb8:	46d4      	mov	ip, sl
 8011fba:	e7b3      	b.n	8011f24 <__multiply+0x8c>
 8011fbc:	46e0      	mov	r8, ip
 8011fbe:	e7dd      	b.n	8011f7c <__multiply+0xe4>
 8011fc0:	3e01      	subs	r6, #1
 8011fc2:	e799      	b.n	8011ef8 <__multiply+0x60>

08011fc4 <__pow5mult>:
 8011fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fc8:	4615      	mov	r5, r2
 8011fca:	f012 0203 	ands.w	r2, r2, #3
 8011fce:	4606      	mov	r6, r0
 8011fd0:	460f      	mov	r7, r1
 8011fd2:	d007      	beq.n	8011fe4 <__pow5mult+0x20>
 8011fd4:	3a01      	subs	r2, #1
 8011fd6:	4c21      	ldr	r4, [pc, #132]	; (801205c <__pow5mult+0x98>)
 8011fd8:	2300      	movs	r3, #0
 8011fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011fde:	f7ff fec9 	bl	8011d74 <__multadd>
 8011fe2:	4607      	mov	r7, r0
 8011fe4:	10ad      	asrs	r5, r5, #2
 8011fe6:	d035      	beq.n	8012054 <__pow5mult+0x90>
 8011fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011fea:	b93c      	cbnz	r4, 8011ffc <__pow5mult+0x38>
 8011fec:	2010      	movs	r0, #16
 8011fee:	f7ff fe63 	bl	8011cb8 <malloc>
 8011ff2:	6270      	str	r0, [r6, #36]	; 0x24
 8011ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ff8:	6004      	str	r4, [r0, #0]
 8011ffa:	60c4      	str	r4, [r0, #12]
 8011ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012004:	b94c      	cbnz	r4, 801201a <__pow5mult+0x56>
 8012006:	f240 2171 	movw	r1, #625	; 0x271
 801200a:	4630      	mov	r0, r6
 801200c:	f7ff ff3b 	bl	8011e86 <__i2b>
 8012010:	2300      	movs	r3, #0
 8012012:	f8c8 0008 	str.w	r0, [r8, #8]
 8012016:	4604      	mov	r4, r0
 8012018:	6003      	str	r3, [r0, #0]
 801201a:	f04f 0800 	mov.w	r8, #0
 801201e:	07eb      	lsls	r3, r5, #31
 8012020:	d50a      	bpl.n	8012038 <__pow5mult+0x74>
 8012022:	4639      	mov	r1, r7
 8012024:	4622      	mov	r2, r4
 8012026:	4630      	mov	r0, r6
 8012028:	f7ff ff36 	bl	8011e98 <__multiply>
 801202c:	4639      	mov	r1, r7
 801202e:	4681      	mov	r9, r0
 8012030:	4630      	mov	r0, r6
 8012032:	f7ff fe88 	bl	8011d46 <_Bfree>
 8012036:	464f      	mov	r7, r9
 8012038:	106d      	asrs	r5, r5, #1
 801203a:	d00b      	beq.n	8012054 <__pow5mult+0x90>
 801203c:	6820      	ldr	r0, [r4, #0]
 801203e:	b938      	cbnz	r0, 8012050 <__pow5mult+0x8c>
 8012040:	4622      	mov	r2, r4
 8012042:	4621      	mov	r1, r4
 8012044:	4630      	mov	r0, r6
 8012046:	f7ff ff27 	bl	8011e98 <__multiply>
 801204a:	6020      	str	r0, [r4, #0]
 801204c:	f8c0 8000 	str.w	r8, [r0]
 8012050:	4604      	mov	r4, r0
 8012052:	e7e4      	b.n	801201e <__pow5mult+0x5a>
 8012054:	4638      	mov	r0, r7
 8012056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801205a:	bf00      	nop
 801205c:	08015418 	.word	0x08015418

08012060 <__lshift>:
 8012060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012064:	460c      	mov	r4, r1
 8012066:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801206a:	6923      	ldr	r3, [r4, #16]
 801206c:	6849      	ldr	r1, [r1, #4]
 801206e:	eb0a 0903 	add.w	r9, sl, r3
 8012072:	68a3      	ldr	r3, [r4, #8]
 8012074:	4607      	mov	r7, r0
 8012076:	4616      	mov	r6, r2
 8012078:	f109 0501 	add.w	r5, r9, #1
 801207c:	42ab      	cmp	r3, r5
 801207e:	db32      	blt.n	80120e6 <__lshift+0x86>
 8012080:	4638      	mov	r0, r7
 8012082:	f7ff fe2c 	bl	8011cde <_Balloc>
 8012086:	2300      	movs	r3, #0
 8012088:	4680      	mov	r8, r0
 801208a:	f100 0114 	add.w	r1, r0, #20
 801208e:	461a      	mov	r2, r3
 8012090:	4553      	cmp	r3, sl
 8012092:	db2b      	blt.n	80120ec <__lshift+0x8c>
 8012094:	6920      	ldr	r0, [r4, #16]
 8012096:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801209a:	f104 0314 	add.w	r3, r4, #20
 801209e:	f016 021f 	ands.w	r2, r6, #31
 80120a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80120aa:	d025      	beq.n	80120f8 <__lshift+0x98>
 80120ac:	f1c2 0e20 	rsb	lr, r2, #32
 80120b0:	2000      	movs	r0, #0
 80120b2:	681e      	ldr	r6, [r3, #0]
 80120b4:	468a      	mov	sl, r1
 80120b6:	4096      	lsls	r6, r2
 80120b8:	4330      	orrs	r0, r6
 80120ba:	f84a 0b04 	str.w	r0, [sl], #4
 80120be:	f853 0b04 	ldr.w	r0, [r3], #4
 80120c2:	459c      	cmp	ip, r3
 80120c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80120c8:	d814      	bhi.n	80120f4 <__lshift+0x94>
 80120ca:	6048      	str	r0, [r1, #4]
 80120cc:	b108      	cbz	r0, 80120d2 <__lshift+0x72>
 80120ce:	f109 0502 	add.w	r5, r9, #2
 80120d2:	3d01      	subs	r5, #1
 80120d4:	4638      	mov	r0, r7
 80120d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80120da:	4621      	mov	r1, r4
 80120dc:	f7ff fe33 	bl	8011d46 <_Bfree>
 80120e0:	4640      	mov	r0, r8
 80120e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e6:	3101      	adds	r1, #1
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	e7c7      	b.n	801207c <__lshift+0x1c>
 80120ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80120f0:	3301      	adds	r3, #1
 80120f2:	e7cd      	b.n	8012090 <__lshift+0x30>
 80120f4:	4651      	mov	r1, sl
 80120f6:	e7dc      	b.n	80120b2 <__lshift+0x52>
 80120f8:	3904      	subs	r1, #4
 80120fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80120fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8012102:	459c      	cmp	ip, r3
 8012104:	d8f9      	bhi.n	80120fa <__lshift+0x9a>
 8012106:	e7e4      	b.n	80120d2 <__lshift+0x72>

08012108 <__mcmp>:
 8012108:	6903      	ldr	r3, [r0, #16]
 801210a:	690a      	ldr	r2, [r1, #16]
 801210c:	1a9b      	subs	r3, r3, r2
 801210e:	b530      	push	{r4, r5, lr}
 8012110:	d10c      	bne.n	801212c <__mcmp+0x24>
 8012112:	0092      	lsls	r2, r2, #2
 8012114:	3014      	adds	r0, #20
 8012116:	3114      	adds	r1, #20
 8012118:	1884      	adds	r4, r0, r2
 801211a:	4411      	add	r1, r2
 801211c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012124:	4295      	cmp	r5, r2
 8012126:	d003      	beq.n	8012130 <__mcmp+0x28>
 8012128:	d305      	bcc.n	8012136 <__mcmp+0x2e>
 801212a:	2301      	movs	r3, #1
 801212c:	4618      	mov	r0, r3
 801212e:	bd30      	pop	{r4, r5, pc}
 8012130:	42a0      	cmp	r0, r4
 8012132:	d3f3      	bcc.n	801211c <__mcmp+0x14>
 8012134:	e7fa      	b.n	801212c <__mcmp+0x24>
 8012136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801213a:	e7f7      	b.n	801212c <__mcmp+0x24>

0801213c <__mdiff>:
 801213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012140:	460d      	mov	r5, r1
 8012142:	4607      	mov	r7, r0
 8012144:	4611      	mov	r1, r2
 8012146:	4628      	mov	r0, r5
 8012148:	4614      	mov	r4, r2
 801214a:	f7ff ffdd 	bl	8012108 <__mcmp>
 801214e:	1e06      	subs	r6, r0, #0
 8012150:	d108      	bne.n	8012164 <__mdiff+0x28>
 8012152:	4631      	mov	r1, r6
 8012154:	4638      	mov	r0, r7
 8012156:	f7ff fdc2 	bl	8011cde <_Balloc>
 801215a:	2301      	movs	r3, #1
 801215c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012164:	bfa4      	itt	ge
 8012166:	4623      	movge	r3, r4
 8012168:	462c      	movge	r4, r5
 801216a:	4638      	mov	r0, r7
 801216c:	6861      	ldr	r1, [r4, #4]
 801216e:	bfa6      	itte	ge
 8012170:	461d      	movge	r5, r3
 8012172:	2600      	movge	r6, #0
 8012174:	2601      	movlt	r6, #1
 8012176:	f7ff fdb2 	bl	8011cde <_Balloc>
 801217a:	692b      	ldr	r3, [r5, #16]
 801217c:	60c6      	str	r6, [r0, #12]
 801217e:	6926      	ldr	r6, [r4, #16]
 8012180:	f105 0914 	add.w	r9, r5, #20
 8012184:	f104 0214 	add.w	r2, r4, #20
 8012188:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801218c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012190:	f100 0514 	add.w	r5, r0, #20
 8012194:	f04f 0e00 	mov.w	lr, #0
 8012198:	f852 ab04 	ldr.w	sl, [r2], #4
 801219c:	f859 4b04 	ldr.w	r4, [r9], #4
 80121a0:	fa1e f18a 	uxtah	r1, lr, sl
 80121a4:	b2a3      	uxth	r3, r4
 80121a6:	1ac9      	subs	r1, r1, r3
 80121a8:	0c23      	lsrs	r3, r4, #16
 80121aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80121ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80121b2:	b289      	uxth	r1, r1
 80121b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80121b8:	45c8      	cmp	r8, r9
 80121ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80121be:	4694      	mov	ip, r2
 80121c0:	f845 3b04 	str.w	r3, [r5], #4
 80121c4:	d8e8      	bhi.n	8012198 <__mdiff+0x5c>
 80121c6:	45bc      	cmp	ip, r7
 80121c8:	d304      	bcc.n	80121d4 <__mdiff+0x98>
 80121ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80121ce:	b183      	cbz	r3, 80121f2 <__mdiff+0xb6>
 80121d0:	6106      	str	r6, [r0, #16]
 80121d2:	e7c5      	b.n	8012160 <__mdiff+0x24>
 80121d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80121d8:	fa1e f381 	uxtah	r3, lr, r1
 80121dc:	141a      	asrs	r2, r3, #16
 80121de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80121ec:	f845 3b04 	str.w	r3, [r5], #4
 80121f0:	e7e9      	b.n	80121c6 <__mdiff+0x8a>
 80121f2:	3e01      	subs	r6, #1
 80121f4:	e7e9      	b.n	80121ca <__mdiff+0x8e>

080121f6 <__d2b>:
 80121f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121fa:	460e      	mov	r6, r1
 80121fc:	2101      	movs	r1, #1
 80121fe:	ec59 8b10 	vmov	r8, r9, d0
 8012202:	4615      	mov	r5, r2
 8012204:	f7ff fd6b 	bl	8011cde <_Balloc>
 8012208:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801220c:	4607      	mov	r7, r0
 801220e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012212:	bb34      	cbnz	r4, 8012262 <__d2b+0x6c>
 8012214:	9301      	str	r3, [sp, #4]
 8012216:	f1b8 0300 	subs.w	r3, r8, #0
 801221a:	d027      	beq.n	801226c <__d2b+0x76>
 801221c:	a802      	add	r0, sp, #8
 801221e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012222:	f7ff fe01 	bl	8011e28 <__lo0bits>
 8012226:	9900      	ldr	r1, [sp, #0]
 8012228:	b1f0      	cbz	r0, 8012268 <__d2b+0x72>
 801222a:	9a01      	ldr	r2, [sp, #4]
 801222c:	f1c0 0320 	rsb	r3, r0, #32
 8012230:	fa02 f303 	lsl.w	r3, r2, r3
 8012234:	430b      	orrs	r3, r1
 8012236:	40c2      	lsrs	r2, r0
 8012238:	617b      	str	r3, [r7, #20]
 801223a:	9201      	str	r2, [sp, #4]
 801223c:	9b01      	ldr	r3, [sp, #4]
 801223e:	61bb      	str	r3, [r7, #24]
 8012240:	2b00      	cmp	r3, #0
 8012242:	bf14      	ite	ne
 8012244:	2102      	movne	r1, #2
 8012246:	2101      	moveq	r1, #1
 8012248:	6139      	str	r1, [r7, #16]
 801224a:	b1c4      	cbz	r4, 801227e <__d2b+0x88>
 801224c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012250:	4404      	add	r4, r0
 8012252:	6034      	str	r4, [r6, #0]
 8012254:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012258:	6028      	str	r0, [r5, #0]
 801225a:	4638      	mov	r0, r7
 801225c:	b003      	add	sp, #12
 801225e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012266:	e7d5      	b.n	8012214 <__d2b+0x1e>
 8012268:	6179      	str	r1, [r7, #20]
 801226a:	e7e7      	b.n	801223c <__d2b+0x46>
 801226c:	a801      	add	r0, sp, #4
 801226e:	f7ff fddb 	bl	8011e28 <__lo0bits>
 8012272:	9b01      	ldr	r3, [sp, #4]
 8012274:	617b      	str	r3, [r7, #20]
 8012276:	2101      	movs	r1, #1
 8012278:	6139      	str	r1, [r7, #16]
 801227a:	3020      	adds	r0, #32
 801227c:	e7e5      	b.n	801224a <__d2b+0x54>
 801227e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012282:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012286:	6030      	str	r0, [r6, #0]
 8012288:	6918      	ldr	r0, [r3, #16]
 801228a:	f7ff fdae 	bl	8011dea <__hi0bits>
 801228e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012292:	e7e1      	b.n	8012258 <__d2b+0x62>

08012294 <_calloc_r>:
 8012294:	b538      	push	{r3, r4, r5, lr}
 8012296:	fb02 f401 	mul.w	r4, r2, r1
 801229a:	4621      	mov	r1, r4
 801229c:	f000 f856 	bl	801234c <_malloc_r>
 80122a0:	4605      	mov	r5, r0
 80122a2:	b118      	cbz	r0, 80122ac <_calloc_r+0x18>
 80122a4:	4622      	mov	r2, r4
 80122a6:	2100      	movs	r1, #0
 80122a8:	f7fd fef2 	bl	8010090 <memset>
 80122ac:	4628      	mov	r0, r5
 80122ae:	bd38      	pop	{r3, r4, r5, pc}

080122b0 <_free_r>:
 80122b0:	b538      	push	{r3, r4, r5, lr}
 80122b2:	4605      	mov	r5, r0
 80122b4:	2900      	cmp	r1, #0
 80122b6:	d045      	beq.n	8012344 <_free_r+0x94>
 80122b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122bc:	1f0c      	subs	r4, r1, #4
 80122be:	2b00      	cmp	r3, #0
 80122c0:	bfb8      	it	lt
 80122c2:	18e4      	addlt	r4, r4, r3
 80122c4:	f000 fc03 	bl	8012ace <__malloc_lock>
 80122c8:	4a1f      	ldr	r2, [pc, #124]	; (8012348 <_free_r+0x98>)
 80122ca:	6813      	ldr	r3, [r2, #0]
 80122cc:	4610      	mov	r0, r2
 80122ce:	b933      	cbnz	r3, 80122de <_free_r+0x2e>
 80122d0:	6063      	str	r3, [r4, #4]
 80122d2:	6014      	str	r4, [r2, #0]
 80122d4:	4628      	mov	r0, r5
 80122d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122da:	f000 bbf9 	b.w	8012ad0 <__malloc_unlock>
 80122de:	42a3      	cmp	r3, r4
 80122e0:	d90c      	bls.n	80122fc <_free_r+0x4c>
 80122e2:	6821      	ldr	r1, [r4, #0]
 80122e4:	1862      	adds	r2, r4, r1
 80122e6:	4293      	cmp	r3, r2
 80122e8:	bf04      	itt	eq
 80122ea:	681a      	ldreq	r2, [r3, #0]
 80122ec:	685b      	ldreq	r3, [r3, #4]
 80122ee:	6063      	str	r3, [r4, #4]
 80122f0:	bf04      	itt	eq
 80122f2:	1852      	addeq	r2, r2, r1
 80122f4:	6022      	streq	r2, [r4, #0]
 80122f6:	6004      	str	r4, [r0, #0]
 80122f8:	e7ec      	b.n	80122d4 <_free_r+0x24>
 80122fa:	4613      	mov	r3, r2
 80122fc:	685a      	ldr	r2, [r3, #4]
 80122fe:	b10a      	cbz	r2, 8012304 <_free_r+0x54>
 8012300:	42a2      	cmp	r2, r4
 8012302:	d9fa      	bls.n	80122fa <_free_r+0x4a>
 8012304:	6819      	ldr	r1, [r3, #0]
 8012306:	1858      	adds	r0, r3, r1
 8012308:	42a0      	cmp	r0, r4
 801230a:	d10b      	bne.n	8012324 <_free_r+0x74>
 801230c:	6820      	ldr	r0, [r4, #0]
 801230e:	4401      	add	r1, r0
 8012310:	1858      	adds	r0, r3, r1
 8012312:	4282      	cmp	r2, r0
 8012314:	6019      	str	r1, [r3, #0]
 8012316:	d1dd      	bne.n	80122d4 <_free_r+0x24>
 8012318:	6810      	ldr	r0, [r2, #0]
 801231a:	6852      	ldr	r2, [r2, #4]
 801231c:	605a      	str	r2, [r3, #4]
 801231e:	4401      	add	r1, r0
 8012320:	6019      	str	r1, [r3, #0]
 8012322:	e7d7      	b.n	80122d4 <_free_r+0x24>
 8012324:	d902      	bls.n	801232c <_free_r+0x7c>
 8012326:	230c      	movs	r3, #12
 8012328:	602b      	str	r3, [r5, #0]
 801232a:	e7d3      	b.n	80122d4 <_free_r+0x24>
 801232c:	6820      	ldr	r0, [r4, #0]
 801232e:	1821      	adds	r1, r4, r0
 8012330:	428a      	cmp	r2, r1
 8012332:	bf04      	itt	eq
 8012334:	6811      	ldreq	r1, [r2, #0]
 8012336:	6852      	ldreq	r2, [r2, #4]
 8012338:	6062      	str	r2, [r4, #4]
 801233a:	bf04      	itt	eq
 801233c:	1809      	addeq	r1, r1, r0
 801233e:	6021      	streq	r1, [r4, #0]
 8012340:	605c      	str	r4, [r3, #4]
 8012342:	e7c7      	b.n	80122d4 <_free_r+0x24>
 8012344:	bd38      	pop	{r3, r4, r5, pc}
 8012346:	bf00      	nop
 8012348:	20002264 	.word	0x20002264

0801234c <_malloc_r>:
 801234c:	b570      	push	{r4, r5, r6, lr}
 801234e:	1ccd      	adds	r5, r1, #3
 8012350:	f025 0503 	bic.w	r5, r5, #3
 8012354:	3508      	adds	r5, #8
 8012356:	2d0c      	cmp	r5, #12
 8012358:	bf38      	it	cc
 801235a:	250c      	movcc	r5, #12
 801235c:	2d00      	cmp	r5, #0
 801235e:	4606      	mov	r6, r0
 8012360:	db01      	blt.n	8012366 <_malloc_r+0x1a>
 8012362:	42a9      	cmp	r1, r5
 8012364:	d903      	bls.n	801236e <_malloc_r+0x22>
 8012366:	230c      	movs	r3, #12
 8012368:	6033      	str	r3, [r6, #0]
 801236a:	2000      	movs	r0, #0
 801236c:	bd70      	pop	{r4, r5, r6, pc}
 801236e:	f000 fbae 	bl	8012ace <__malloc_lock>
 8012372:	4a21      	ldr	r2, [pc, #132]	; (80123f8 <_malloc_r+0xac>)
 8012374:	6814      	ldr	r4, [r2, #0]
 8012376:	4621      	mov	r1, r4
 8012378:	b991      	cbnz	r1, 80123a0 <_malloc_r+0x54>
 801237a:	4c20      	ldr	r4, [pc, #128]	; (80123fc <_malloc_r+0xb0>)
 801237c:	6823      	ldr	r3, [r4, #0]
 801237e:	b91b      	cbnz	r3, 8012388 <_malloc_r+0x3c>
 8012380:	4630      	mov	r0, r6
 8012382:	f000 facf 	bl	8012924 <_sbrk_r>
 8012386:	6020      	str	r0, [r4, #0]
 8012388:	4629      	mov	r1, r5
 801238a:	4630      	mov	r0, r6
 801238c:	f000 faca 	bl	8012924 <_sbrk_r>
 8012390:	1c43      	adds	r3, r0, #1
 8012392:	d124      	bne.n	80123de <_malloc_r+0x92>
 8012394:	230c      	movs	r3, #12
 8012396:	6033      	str	r3, [r6, #0]
 8012398:	4630      	mov	r0, r6
 801239a:	f000 fb99 	bl	8012ad0 <__malloc_unlock>
 801239e:	e7e4      	b.n	801236a <_malloc_r+0x1e>
 80123a0:	680b      	ldr	r3, [r1, #0]
 80123a2:	1b5b      	subs	r3, r3, r5
 80123a4:	d418      	bmi.n	80123d8 <_malloc_r+0x8c>
 80123a6:	2b0b      	cmp	r3, #11
 80123a8:	d90f      	bls.n	80123ca <_malloc_r+0x7e>
 80123aa:	600b      	str	r3, [r1, #0]
 80123ac:	50cd      	str	r5, [r1, r3]
 80123ae:	18cc      	adds	r4, r1, r3
 80123b0:	4630      	mov	r0, r6
 80123b2:	f000 fb8d 	bl	8012ad0 <__malloc_unlock>
 80123b6:	f104 000b 	add.w	r0, r4, #11
 80123ba:	1d23      	adds	r3, r4, #4
 80123bc:	f020 0007 	bic.w	r0, r0, #7
 80123c0:	1ac3      	subs	r3, r0, r3
 80123c2:	d0d3      	beq.n	801236c <_malloc_r+0x20>
 80123c4:	425a      	negs	r2, r3
 80123c6:	50e2      	str	r2, [r4, r3]
 80123c8:	e7d0      	b.n	801236c <_malloc_r+0x20>
 80123ca:	428c      	cmp	r4, r1
 80123cc:	684b      	ldr	r3, [r1, #4]
 80123ce:	bf16      	itet	ne
 80123d0:	6063      	strne	r3, [r4, #4]
 80123d2:	6013      	streq	r3, [r2, #0]
 80123d4:	460c      	movne	r4, r1
 80123d6:	e7eb      	b.n	80123b0 <_malloc_r+0x64>
 80123d8:	460c      	mov	r4, r1
 80123da:	6849      	ldr	r1, [r1, #4]
 80123dc:	e7cc      	b.n	8012378 <_malloc_r+0x2c>
 80123de:	1cc4      	adds	r4, r0, #3
 80123e0:	f024 0403 	bic.w	r4, r4, #3
 80123e4:	42a0      	cmp	r0, r4
 80123e6:	d005      	beq.n	80123f4 <_malloc_r+0xa8>
 80123e8:	1a21      	subs	r1, r4, r0
 80123ea:	4630      	mov	r0, r6
 80123ec:	f000 fa9a 	bl	8012924 <_sbrk_r>
 80123f0:	3001      	adds	r0, #1
 80123f2:	d0cf      	beq.n	8012394 <_malloc_r+0x48>
 80123f4:	6025      	str	r5, [r4, #0]
 80123f6:	e7db      	b.n	80123b0 <_malloc_r+0x64>
 80123f8:	20002264 	.word	0x20002264
 80123fc:	20002268 	.word	0x20002268

08012400 <__ssputs_r>:
 8012400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012404:	688e      	ldr	r6, [r1, #8]
 8012406:	429e      	cmp	r6, r3
 8012408:	4682      	mov	sl, r0
 801240a:	460c      	mov	r4, r1
 801240c:	4690      	mov	r8, r2
 801240e:	4699      	mov	r9, r3
 8012410:	d837      	bhi.n	8012482 <__ssputs_r+0x82>
 8012412:	898a      	ldrh	r2, [r1, #12]
 8012414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012418:	d031      	beq.n	801247e <__ssputs_r+0x7e>
 801241a:	6825      	ldr	r5, [r4, #0]
 801241c:	6909      	ldr	r1, [r1, #16]
 801241e:	1a6f      	subs	r7, r5, r1
 8012420:	6965      	ldr	r5, [r4, #20]
 8012422:	2302      	movs	r3, #2
 8012424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012428:	fb95 f5f3 	sdiv	r5, r5, r3
 801242c:	f109 0301 	add.w	r3, r9, #1
 8012430:	443b      	add	r3, r7
 8012432:	429d      	cmp	r5, r3
 8012434:	bf38      	it	cc
 8012436:	461d      	movcc	r5, r3
 8012438:	0553      	lsls	r3, r2, #21
 801243a:	d530      	bpl.n	801249e <__ssputs_r+0x9e>
 801243c:	4629      	mov	r1, r5
 801243e:	f7ff ff85 	bl	801234c <_malloc_r>
 8012442:	4606      	mov	r6, r0
 8012444:	b950      	cbnz	r0, 801245c <__ssputs_r+0x5c>
 8012446:	230c      	movs	r3, #12
 8012448:	f8ca 3000 	str.w	r3, [sl]
 801244c:	89a3      	ldrh	r3, [r4, #12]
 801244e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012452:	81a3      	strh	r3, [r4, #12]
 8012454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245c:	463a      	mov	r2, r7
 801245e:	6921      	ldr	r1, [r4, #16]
 8012460:	f7ff fc32 	bl	8011cc8 <memcpy>
 8012464:	89a3      	ldrh	r3, [r4, #12]
 8012466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801246a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801246e:	81a3      	strh	r3, [r4, #12]
 8012470:	6126      	str	r6, [r4, #16]
 8012472:	6165      	str	r5, [r4, #20]
 8012474:	443e      	add	r6, r7
 8012476:	1bed      	subs	r5, r5, r7
 8012478:	6026      	str	r6, [r4, #0]
 801247a:	60a5      	str	r5, [r4, #8]
 801247c:	464e      	mov	r6, r9
 801247e:	454e      	cmp	r6, r9
 8012480:	d900      	bls.n	8012484 <__ssputs_r+0x84>
 8012482:	464e      	mov	r6, r9
 8012484:	4632      	mov	r2, r6
 8012486:	4641      	mov	r1, r8
 8012488:	6820      	ldr	r0, [r4, #0]
 801248a:	f000 fb07 	bl	8012a9c <memmove>
 801248e:	68a3      	ldr	r3, [r4, #8]
 8012490:	1b9b      	subs	r3, r3, r6
 8012492:	60a3      	str	r3, [r4, #8]
 8012494:	6823      	ldr	r3, [r4, #0]
 8012496:	441e      	add	r6, r3
 8012498:	6026      	str	r6, [r4, #0]
 801249a:	2000      	movs	r0, #0
 801249c:	e7dc      	b.n	8012458 <__ssputs_r+0x58>
 801249e:	462a      	mov	r2, r5
 80124a0:	f000 fb17 	bl	8012ad2 <_realloc_r>
 80124a4:	4606      	mov	r6, r0
 80124a6:	2800      	cmp	r0, #0
 80124a8:	d1e2      	bne.n	8012470 <__ssputs_r+0x70>
 80124aa:	6921      	ldr	r1, [r4, #16]
 80124ac:	4650      	mov	r0, sl
 80124ae:	f7ff feff 	bl	80122b0 <_free_r>
 80124b2:	e7c8      	b.n	8012446 <__ssputs_r+0x46>

080124b4 <_svfiprintf_r>:
 80124b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b8:	461d      	mov	r5, r3
 80124ba:	898b      	ldrh	r3, [r1, #12]
 80124bc:	061f      	lsls	r7, r3, #24
 80124be:	b09d      	sub	sp, #116	; 0x74
 80124c0:	4680      	mov	r8, r0
 80124c2:	460c      	mov	r4, r1
 80124c4:	4616      	mov	r6, r2
 80124c6:	d50f      	bpl.n	80124e8 <_svfiprintf_r+0x34>
 80124c8:	690b      	ldr	r3, [r1, #16]
 80124ca:	b96b      	cbnz	r3, 80124e8 <_svfiprintf_r+0x34>
 80124cc:	2140      	movs	r1, #64	; 0x40
 80124ce:	f7ff ff3d 	bl	801234c <_malloc_r>
 80124d2:	6020      	str	r0, [r4, #0]
 80124d4:	6120      	str	r0, [r4, #16]
 80124d6:	b928      	cbnz	r0, 80124e4 <_svfiprintf_r+0x30>
 80124d8:	230c      	movs	r3, #12
 80124da:	f8c8 3000 	str.w	r3, [r8]
 80124de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124e2:	e0c8      	b.n	8012676 <_svfiprintf_r+0x1c2>
 80124e4:	2340      	movs	r3, #64	; 0x40
 80124e6:	6163      	str	r3, [r4, #20]
 80124e8:	2300      	movs	r3, #0
 80124ea:	9309      	str	r3, [sp, #36]	; 0x24
 80124ec:	2320      	movs	r3, #32
 80124ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124f2:	2330      	movs	r3, #48	; 0x30
 80124f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124f8:	9503      	str	r5, [sp, #12]
 80124fa:	f04f 0b01 	mov.w	fp, #1
 80124fe:	4637      	mov	r7, r6
 8012500:	463d      	mov	r5, r7
 8012502:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012506:	b10b      	cbz	r3, 801250c <_svfiprintf_r+0x58>
 8012508:	2b25      	cmp	r3, #37	; 0x25
 801250a:	d13e      	bne.n	801258a <_svfiprintf_r+0xd6>
 801250c:	ebb7 0a06 	subs.w	sl, r7, r6
 8012510:	d00b      	beq.n	801252a <_svfiprintf_r+0x76>
 8012512:	4653      	mov	r3, sl
 8012514:	4632      	mov	r2, r6
 8012516:	4621      	mov	r1, r4
 8012518:	4640      	mov	r0, r8
 801251a:	f7ff ff71 	bl	8012400 <__ssputs_r>
 801251e:	3001      	adds	r0, #1
 8012520:	f000 80a4 	beq.w	801266c <_svfiprintf_r+0x1b8>
 8012524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012526:	4453      	add	r3, sl
 8012528:	9309      	str	r3, [sp, #36]	; 0x24
 801252a:	783b      	ldrb	r3, [r7, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	f000 809d 	beq.w	801266c <_svfiprintf_r+0x1b8>
 8012532:	2300      	movs	r3, #0
 8012534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801253c:	9304      	str	r3, [sp, #16]
 801253e:	9307      	str	r3, [sp, #28]
 8012540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012544:	931a      	str	r3, [sp, #104]	; 0x68
 8012546:	462f      	mov	r7, r5
 8012548:	2205      	movs	r2, #5
 801254a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801254e:	4850      	ldr	r0, [pc, #320]	; (8012690 <_svfiprintf_r+0x1dc>)
 8012550:	f7ed fe6e 	bl	8000230 <memchr>
 8012554:	9b04      	ldr	r3, [sp, #16]
 8012556:	b9d0      	cbnz	r0, 801258e <_svfiprintf_r+0xda>
 8012558:	06d9      	lsls	r1, r3, #27
 801255a:	bf44      	itt	mi
 801255c:	2220      	movmi	r2, #32
 801255e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012562:	071a      	lsls	r2, r3, #28
 8012564:	bf44      	itt	mi
 8012566:	222b      	movmi	r2, #43	; 0x2b
 8012568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801256c:	782a      	ldrb	r2, [r5, #0]
 801256e:	2a2a      	cmp	r2, #42	; 0x2a
 8012570:	d015      	beq.n	801259e <_svfiprintf_r+0xea>
 8012572:	9a07      	ldr	r2, [sp, #28]
 8012574:	462f      	mov	r7, r5
 8012576:	2000      	movs	r0, #0
 8012578:	250a      	movs	r5, #10
 801257a:	4639      	mov	r1, r7
 801257c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012580:	3b30      	subs	r3, #48	; 0x30
 8012582:	2b09      	cmp	r3, #9
 8012584:	d94d      	bls.n	8012622 <_svfiprintf_r+0x16e>
 8012586:	b1b8      	cbz	r0, 80125b8 <_svfiprintf_r+0x104>
 8012588:	e00f      	b.n	80125aa <_svfiprintf_r+0xf6>
 801258a:	462f      	mov	r7, r5
 801258c:	e7b8      	b.n	8012500 <_svfiprintf_r+0x4c>
 801258e:	4a40      	ldr	r2, [pc, #256]	; (8012690 <_svfiprintf_r+0x1dc>)
 8012590:	1a80      	subs	r0, r0, r2
 8012592:	fa0b f000 	lsl.w	r0, fp, r0
 8012596:	4318      	orrs	r0, r3
 8012598:	9004      	str	r0, [sp, #16]
 801259a:	463d      	mov	r5, r7
 801259c:	e7d3      	b.n	8012546 <_svfiprintf_r+0x92>
 801259e:	9a03      	ldr	r2, [sp, #12]
 80125a0:	1d11      	adds	r1, r2, #4
 80125a2:	6812      	ldr	r2, [r2, #0]
 80125a4:	9103      	str	r1, [sp, #12]
 80125a6:	2a00      	cmp	r2, #0
 80125a8:	db01      	blt.n	80125ae <_svfiprintf_r+0xfa>
 80125aa:	9207      	str	r2, [sp, #28]
 80125ac:	e004      	b.n	80125b8 <_svfiprintf_r+0x104>
 80125ae:	4252      	negs	r2, r2
 80125b0:	f043 0302 	orr.w	r3, r3, #2
 80125b4:	9207      	str	r2, [sp, #28]
 80125b6:	9304      	str	r3, [sp, #16]
 80125b8:	783b      	ldrb	r3, [r7, #0]
 80125ba:	2b2e      	cmp	r3, #46	; 0x2e
 80125bc:	d10c      	bne.n	80125d8 <_svfiprintf_r+0x124>
 80125be:	787b      	ldrb	r3, [r7, #1]
 80125c0:	2b2a      	cmp	r3, #42	; 0x2a
 80125c2:	d133      	bne.n	801262c <_svfiprintf_r+0x178>
 80125c4:	9b03      	ldr	r3, [sp, #12]
 80125c6:	1d1a      	adds	r2, r3, #4
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	9203      	str	r2, [sp, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	bfb8      	it	lt
 80125d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80125d4:	3702      	adds	r7, #2
 80125d6:	9305      	str	r3, [sp, #20]
 80125d8:	4d2e      	ldr	r5, [pc, #184]	; (8012694 <_svfiprintf_r+0x1e0>)
 80125da:	7839      	ldrb	r1, [r7, #0]
 80125dc:	2203      	movs	r2, #3
 80125de:	4628      	mov	r0, r5
 80125e0:	f7ed fe26 	bl	8000230 <memchr>
 80125e4:	b138      	cbz	r0, 80125f6 <_svfiprintf_r+0x142>
 80125e6:	2340      	movs	r3, #64	; 0x40
 80125e8:	1b40      	subs	r0, r0, r5
 80125ea:	fa03 f000 	lsl.w	r0, r3, r0
 80125ee:	9b04      	ldr	r3, [sp, #16]
 80125f0:	4303      	orrs	r3, r0
 80125f2:	3701      	adds	r7, #1
 80125f4:	9304      	str	r3, [sp, #16]
 80125f6:	7839      	ldrb	r1, [r7, #0]
 80125f8:	4827      	ldr	r0, [pc, #156]	; (8012698 <_svfiprintf_r+0x1e4>)
 80125fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125fe:	2206      	movs	r2, #6
 8012600:	1c7e      	adds	r6, r7, #1
 8012602:	f7ed fe15 	bl	8000230 <memchr>
 8012606:	2800      	cmp	r0, #0
 8012608:	d038      	beq.n	801267c <_svfiprintf_r+0x1c8>
 801260a:	4b24      	ldr	r3, [pc, #144]	; (801269c <_svfiprintf_r+0x1e8>)
 801260c:	bb13      	cbnz	r3, 8012654 <_svfiprintf_r+0x1a0>
 801260e:	9b03      	ldr	r3, [sp, #12]
 8012610:	3307      	adds	r3, #7
 8012612:	f023 0307 	bic.w	r3, r3, #7
 8012616:	3308      	adds	r3, #8
 8012618:	9303      	str	r3, [sp, #12]
 801261a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801261c:	444b      	add	r3, r9
 801261e:	9309      	str	r3, [sp, #36]	; 0x24
 8012620:	e76d      	b.n	80124fe <_svfiprintf_r+0x4a>
 8012622:	fb05 3202 	mla	r2, r5, r2, r3
 8012626:	2001      	movs	r0, #1
 8012628:	460f      	mov	r7, r1
 801262a:	e7a6      	b.n	801257a <_svfiprintf_r+0xc6>
 801262c:	2300      	movs	r3, #0
 801262e:	3701      	adds	r7, #1
 8012630:	9305      	str	r3, [sp, #20]
 8012632:	4619      	mov	r1, r3
 8012634:	250a      	movs	r5, #10
 8012636:	4638      	mov	r0, r7
 8012638:	f810 2b01 	ldrb.w	r2, [r0], #1
 801263c:	3a30      	subs	r2, #48	; 0x30
 801263e:	2a09      	cmp	r2, #9
 8012640:	d903      	bls.n	801264a <_svfiprintf_r+0x196>
 8012642:	2b00      	cmp	r3, #0
 8012644:	d0c8      	beq.n	80125d8 <_svfiprintf_r+0x124>
 8012646:	9105      	str	r1, [sp, #20]
 8012648:	e7c6      	b.n	80125d8 <_svfiprintf_r+0x124>
 801264a:	fb05 2101 	mla	r1, r5, r1, r2
 801264e:	2301      	movs	r3, #1
 8012650:	4607      	mov	r7, r0
 8012652:	e7f0      	b.n	8012636 <_svfiprintf_r+0x182>
 8012654:	ab03      	add	r3, sp, #12
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	4622      	mov	r2, r4
 801265a:	4b11      	ldr	r3, [pc, #68]	; (80126a0 <_svfiprintf_r+0x1ec>)
 801265c:	a904      	add	r1, sp, #16
 801265e:	4640      	mov	r0, r8
 8012660:	f7fd fdb2 	bl	80101c8 <_printf_float>
 8012664:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012668:	4681      	mov	r9, r0
 801266a:	d1d6      	bne.n	801261a <_svfiprintf_r+0x166>
 801266c:	89a3      	ldrh	r3, [r4, #12]
 801266e:	065b      	lsls	r3, r3, #25
 8012670:	f53f af35 	bmi.w	80124de <_svfiprintf_r+0x2a>
 8012674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012676:	b01d      	add	sp, #116	; 0x74
 8012678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267c:	ab03      	add	r3, sp, #12
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	4622      	mov	r2, r4
 8012682:	4b07      	ldr	r3, [pc, #28]	; (80126a0 <_svfiprintf_r+0x1ec>)
 8012684:	a904      	add	r1, sp, #16
 8012686:	4640      	mov	r0, r8
 8012688:	f7fe f854 	bl	8010734 <_printf_i>
 801268c:	e7ea      	b.n	8012664 <_svfiprintf_r+0x1b0>
 801268e:	bf00      	nop
 8012690:	08015424 	.word	0x08015424
 8012694:	0801542a 	.word	0x0801542a
 8012698:	0801542e 	.word	0x0801542e
 801269c:	080101c9 	.word	0x080101c9
 80126a0:	08012401 	.word	0x08012401

080126a4 <__sfputc_r>:
 80126a4:	6893      	ldr	r3, [r2, #8]
 80126a6:	3b01      	subs	r3, #1
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	b410      	push	{r4}
 80126ac:	6093      	str	r3, [r2, #8]
 80126ae:	da08      	bge.n	80126c2 <__sfputc_r+0x1e>
 80126b0:	6994      	ldr	r4, [r2, #24]
 80126b2:	42a3      	cmp	r3, r4
 80126b4:	db01      	blt.n	80126ba <__sfputc_r+0x16>
 80126b6:	290a      	cmp	r1, #10
 80126b8:	d103      	bne.n	80126c2 <__sfputc_r+0x1e>
 80126ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126be:	f7fe ba0b 	b.w	8010ad8 <__swbuf_r>
 80126c2:	6813      	ldr	r3, [r2, #0]
 80126c4:	1c58      	adds	r0, r3, #1
 80126c6:	6010      	str	r0, [r2, #0]
 80126c8:	7019      	strb	r1, [r3, #0]
 80126ca:	4608      	mov	r0, r1
 80126cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126d0:	4770      	bx	lr

080126d2 <__sfputs_r>:
 80126d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d4:	4606      	mov	r6, r0
 80126d6:	460f      	mov	r7, r1
 80126d8:	4614      	mov	r4, r2
 80126da:	18d5      	adds	r5, r2, r3
 80126dc:	42ac      	cmp	r4, r5
 80126de:	d101      	bne.n	80126e4 <__sfputs_r+0x12>
 80126e0:	2000      	movs	r0, #0
 80126e2:	e007      	b.n	80126f4 <__sfputs_r+0x22>
 80126e4:	463a      	mov	r2, r7
 80126e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126ea:	4630      	mov	r0, r6
 80126ec:	f7ff ffda 	bl	80126a4 <__sfputc_r>
 80126f0:	1c43      	adds	r3, r0, #1
 80126f2:	d1f3      	bne.n	80126dc <__sfputs_r+0xa>
 80126f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080126f8 <_vfiprintf_r>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	460c      	mov	r4, r1
 80126fe:	b09d      	sub	sp, #116	; 0x74
 8012700:	4617      	mov	r7, r2
 8012702:	461d      	mov	r5, r3
 8012704:	4606      	mov	r6, r0
 8012706:	b118      	cbz	r0, 8012710 <_vfiprintf_r+0x18>
 8012708:	6983      	ldr	r3, [r0, #24]
 801270a:	b90b      	cbnz	r3, 8012710 <_vfiprintf_r+0x18>
 801270c:	f7ff f9d8 	bl	8011ac0 <__sinit>
 8012710:	4b7c      	ldr	r3, [pc, #496]	; (8012904 <_vfiprintf_r+0x20c>)
 8012712:	429c      	cmp	r4, r3
 8012714:	d158      	bne.n	80127c8 <_vfiprintf_r+0xd0>
 8012716:	6874      	ldr	r4, [r6, #4]
 8012718:	89a3      	ldrh	r3, [r4, #12]
 801271a:	0718      	lsls	r0, r3, #28
 801271c:	d55e      	bpl.n	80127dc <_vfiprintf_r+0xe4>
 801271e:	6923      	ldr	r3, [r4, #16]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d05b      	beq.n	80127dc <_vfiprintf_r+0xe4>
 8012724:	2300      	movs	r3, #0
 8012726:	9309      	str	r3, [sp, #36]	; 0x24
 8012728:	2320      	movs	r3, #32
 801272a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801272e:	2330      	movs	r3, #48	; 0x30
 8012730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012734:	9503      	str	r5, [sp, #12]
 8012736:	f04f 0b01 	mov.w	fp, #1
 801273a:	46b8      	mov	r8, r7
 801273c:	4645      	mov	r5, r8
 801273e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012742:	b10b      	cbz	r3, 8012748 <_vfiprintf_r+0x50>
 8012744:	2b25      	cmp	r3, #37	; 0x25
 8012746:	d154      	bne.n	80127f2 <_vfiprintf_r+0xfa>
 8012748:	ebb8 0a07 	subs.w	sl, r8, r7
 801274c:	d00b      	beq.n	8012766 <_vfiprintf_r+0x6e>
 801274e:	4653      	mov	r3, sl
 8012750:	463a      	mov	r2, r7
 8012752:	4621      	mov	r1, r4
 8012754:	4630      	mov	r0, r6
 8012756:	f7ff ffbc 	bl	80126d2 <__sfputs_r>
 801275a:	3001      	adds	r0, #1
 801275c:	f000 80c2 	beq.w	80128e4 <_vfiprintf_r+0x1ec>
 8012760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012762:	4453      	add	r3, sl
 8012764:	9309      	str	r3, [sp, #36]	; 0x24
 8012766:	f898 3000 	ldrb.w	r3, [r8]
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 80ba 	beq.w	80128e4 <_vfiprintf_r+0x1ec>
 8012770:	2300      	movs	r3, #0
 8012772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801277a:	9304      	str	r3, [sp, #16]
 801277c:	9307      	str	r3, [sp, #28]
 801277e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012782:	931a      	str	r3, [sp, #104]	; 0x68
 8012784:	46a8      	mov	r8, r5
 8012786:	2205      	movs	r2, #5
 8012788:	f818 1b01 	ldrb.w	r1, [r8], #1
 801278c:	485e      	ldr	r0, [pc, #376]	; (8012908 <_vfiprintf_r+0x210>)
 801278e:	f7ed fd4f 	bl	8000230 <memchr>
 8012792:	9b04      	ldr	r3, [sp, #16]
 8012794:	bb78      	cbnz	r0, 80127f6 <_vfiprintf_r+0xfe>
 8012796:	06d9      	lsls	r1, r3, #27
 8012798:	bf44      	itt	mi
 801279a:	2220      	movmi	r2, #32
 801279c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127a0:	071a      	lsls	r2, r3, #28
 80127a2:	bf44      	itt	mi
 80127a4:	222b      	movmi	r2, #43	; 0x2b
 80127a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127aa:	782a      	ldrb	r2, [r5, #0]
 80127ac:	2a2a      	cmp	r2, #42	; 0x2a
 80127ae:	d02a      	beq.n	8012806 <_vfiprintf_r+0x10e>
 80127b0:	9a07      	ldr	r2, [sp, #28]
 80127b2:	46a8      	mov	r8, r5
 80127b4:	2000      	movs	r0, #0
 80127b6:	250a      	movs	r5, #10
 80127b8:	4641      	mov	r1, r8
 80127ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127be:	3b30      	subs	r3, #48	; 0x30
 80127c0:	2b09      	cmp	r3, #9
 80127c2:	d969      	bls.n	8012898 <_vfiprintf_r+0x1a0>
 80127c4:	b360      	cbz	r0, 8012820 <_vfiprintf_r+0x128>
 80127c6:	e024      	b.n	8012812 <_vfiprintf_r+0x11a>
 80127c8:	4b50      	ldr	r3, [pc, #320]	; (801290c <_vfiprintf_r+0x214>)
 80127ca:	429c      	cmp	r4, r3
 80127cc:	d101      	bne.n	80127d2 <_vfiprintf_r+0xda>
 80127ce:	68b4      	ldr	r4, [r6, #8]
 80127d0:	e7a2      	b.n	8012718 <_vfiprintf_r+0x20>
 80127d2:	4b4f      	ldr	r3, [pc, #316]	; (8012910 <_vfiprintf_r+0x218>)
 80127d4:	429c      	cmp	r4, r3
 80127d6:	bf08      	it	eq
 80127d8:	68f4      	ldreq	r4, [r6, #12]
 80127da:	e79d      	b.n	8012718 <_vfiprintf_r+0x20>
 80127dc:	4621      	mov	r1, r4
 80127de:	4630      	mov	r0, r6
 80127e0:	f7fe f9cc 	bl	8010b7c <__swsetup_r>
 80127e4:	2800      	cmp	r0, #0
 80127e6:	d09d      	beq.n	8012724 <_vfiprintf_r+0x2c>
 80127e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127ec:	b01d      	add	sp, #116	; 0x74
 80127ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f2:	46a8      	mov	r8, r5
 80127f4:	e7a2      	b.n	801273c <_vfiprintf_r+0x44>
 80127f6:	4a44      	ldr	r2, [pc, #272]	; (8012908 <_vfiprintf_r+0x210>)
 80127f8:	1a80      	subs	r0, r0, r2
 80127fa:	fa0b f000 	lsl.w	r0, fp, r0
 80127fe:	4318      	orrs	r0, r3
 8012800:	9004      	str	r0, [sp, #16]
 8012802:	4645      	mov	r5, r8
 8012804:	e7be      	b.n	8012784 <_vfiprintf_r+0x8c>
 8012806:	9a03      	ldr	r2, [sp, #12]
 8012808:	1d11      	adds	r1, r2, #4
 801280a:	6812      	ldr	r2, [r2, #0]
 801280c:	9103      	str	r1, [sp, #12]
 801280e:	2a00      	cmp	r2, #0
 8012810:	db01      	blt.n	8012816 <_vfiprintf_r+0x11e>
 8012812:	9207      	str	r2, [sp, #28]
 8012814:	e004      	b.n	8012820 <_vfiprintf_r+0x128>
 8012816:	4252      	negs	r2, r2
 8012818:	f043 0302 	orr.w	r3, r3, #2
 801281c:	9207      	str	r2, [sp, #28]
 801281e:	9304      	str	r3, [sp, #16]
 8012820:	f898 3000 	ldrb.w	r3, [r8]
 8012824:	2b2e      	cmp	r3, #46	; 0x2e
 8012826:	d10e      	bne.n	8012846 <_vfiprintf_r+0x14e>
 8012828:	f898 3001 	ldrb.w	r3, [r8, #1]
 801282c:	2b2a      	cmp	r3, #42	; 0x2a
 801282e:	d138      	bne.n	80128a2 <_vfiprintf_r+0x1aa>
 8012830:	9b03      	ldr	r3, [sp, #12]
 8012832:	1d1a      	adds	r2, r3, #4
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	9203      	str	r2, [sp, #12]
 8012838:	2b00      	cmp	r3, #0
 801283a:	bfb8      	it	lt
 801283c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012840:	f108 0802 	add.w	r8, r8, #2
 8012844:	9305      	str	r3, [sp, #20]
 8012846:	4d33      	ldr	r5, [pc, #204]	; (8012914 <_vfiprintf_r+0x21c>)
 8012848:	f898 1000 	ldrb.w	r1, [r8]
 801284c:	2203      	movs	r2, #3
 801284e:	4628      	mov	r0, r5
 8012850:	f7ed fcee 	bl	8000230 <memchr>
 8012854:	b140      	cbz	r0, 8012868 <_vfiprintf_r+0x170>
 8012856:	2340      	movs	r3, #64	; 0x40
 8012858:	1b40      	subs	r0, r0, r5
 801285a:	fa03 f000 	lsl.w	r0, r3, r0
 801285e:	9b04      	ldr	r3, [sp, #16]
 8012860:	4303      	orrs	r3, r0
 8012862:	f108 0801 	add.w	r8, r8, #1
 8012866:	9304      	str	r3, [sp, #16]
 8012868:	f898 1000 	ldrb.w	r1, [r8]
 801286c:	482a      	ldr	r0, [pc, #168]	; (8012918 <_vfiprintf_r+0x220>)
 801286e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012872:	2206      	movs	r2, #6
 8012874:	f108 0701 	add.w	r7, r8, #1
 8012878:	f7ed fcda 	bl	8000230 <memchr>
 801287c:	2800      	cmp	r0, #0
 801287e:	d037      	beq.n	80128f0 <_vfiprintf_r+0x1f8>
 8012880:	4b26      	ldr	r3, [pc, #152]	; (801291c <_vfiprintf_r+0x224>)
 8012882:	bb1b      	cbnz	r3, 80128cc <_vfiprintf_r+0x1d4>
 8012884:	9b03      	ldr	r3, [sp, #12]
 8012886:	3307      	adds	r3, #7
 8012888:	f023 0307 	bic.w	r3, r3, #7
 801288c:	3308      	adds	r3, #8
 801288e:	9303      	str	r3, [sp, #12]
 8012890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012892:	444b      	add	r3, r9
 8012894:	9309      	str	r3, [sp, #36]	; 0x24
 8012896:	e750      	b.n	801273a <_vfiprintf_r+0x42>
 8012898:	fb05 3202 	mla	r2, r5, r2, r3
 801289c:	2001      	movs	r0, #1
 801289e:	4688      	mov	r8, r1
 80128a0:	e78a      	b.n	80127b8 <_vfiprintf_r+0xc0>
 80128a2:	2300      	movs	r3, #0
 80128a4:	f108 0801 	add.w	r8, r8, #1
 80128a8:	9305      	str	r3, [sp, #20]
 80128aa:	4619      	mov	r1, r3
 80128ac:	250a      	movs	r5, #10
 80128ae:	4640      	mov	r0, r8
 80128b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128b4:	3a30      	subs	r2, #48	; 0x30
 80128b6:	2a09      	cmp	r2, #9
 80128b8:	d903      	bls.n	80128c2 <_vfiprintf_r+0x1ca>
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d0c3      	beq.n	8012846 <_vfiprintf_r+0x14e>
 80128be:	9105      	str	r1, [sp, #20]
 80128c0:	e7c1      	b.n	8012846 <_vfiprintf_r+0x14e>
 80128c2:	fb05 2101 	mla	r1, r5, r1, r2
 80128c6:	2301      	movs	r3, #1
 80128c8:	4680      	mov	r8, r0
 80128ca:	e7f0      	b.n	80128ae <_vfiprintf_r+0x1b6>
 80128cc:	ab03      	add	r3, sp, #12
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	4622      	mov	r2, r4
 80128d2:	4b13      	ldr	r3, [pc, #76]	; (8012920 <_vfiprintf_r+0x228>)
 80128d4:	a904      	add	r1, sp, #16
 80128d6:	4630      	mov	r0, r6
 80128d8:	f7fd fc76 	bl	80101c8 <_printf_float>
 80128dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80128e0:	4681      	mov	r9, r0
 80128e2:	d1d5      	bne.n	8012890 <_vfiprintf_r+0x198>
 80128e4:	89a3      	ldrh	r3, [r4, #12]
 80128e6:	065b      	lsls	r3, r3, #25
 80128e8:	f53f af7e 	bmi.w	80127e8 <_vfiprintf_r+0xf0>
 80128ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128ee:	e77d      	b.n	80127ec <_vfiprintf_r+0xf4>
 80128f0:	ab03      	add	r3, sp, #12
 80128f2:	9300      	str	r3, [sp, #0]
 80128f4:	4622      	mov	r2, r4
 80128f6:	4b0a      	ldr	r3, [pc, #40]	; (8012920 <_vfiprintf_r+0x228>)
 80128f8:	a904      	add	r1, sp, #16
 80128fa:	4630      	mov	r0, r6
 80128fc:	f7fd ff1a 	bl	8010734 <_printf_i>
 8012900:	e7ec      	b.n	80128dc <_vfiprintf_r+0x1e4>
 8012902:	bf00      	nop
 8012904:	080152e4 	.word	0x080152e4
 8012908:	08015424 	.word	0x08015424
 801290c:	08015304 	.word	0x08015304
 8012910:	080152c4 	.word	0x080152c4
 8012914:	0801542a 	.word	0x0801542a
 8012918:	0801542e 	.word	0x0801542e
 801291c:	080101c9 	.word	0x080101c9
 8012920:	080126d3 	.word	0x080126d3

08012924 <_sbrk_r>:
 8012924:	b538      	push	{r3, r4, r5, lr}
 8012926:	4c06      	ldr	r4, [pc, #24]	; (8012940 <_sbrk_r+0x1c>)
 8012928:	2300      	movs	r3, #0
 801292a:	4605      	mov	r5, r0
 801292c:	4608      	mov	r0, r1
 801292e:	6023      	str	r3, [r4, #0]
 8012930:	f7f5 faa8 	bl	8007e84 <_sbrk>
 8012934:	1c43      	adds	r3, r0, #1
 8012936:	d102      	bne.n	801293e <_sbrk_r+0x1a>
 8012938:	6823      	ldr	r3, [r4, #0]
 801293a:	b103      	cbz	r3, 801293e <_sbrk_r+0x1a>
 801293c:	602b      	str	r3, [r5, #0]
 801293e:	bd38      	pop	{r3, r4, r5, pc}
 8012940:	20002cf0 	.word	0x20002cf0

08012944 <__sread>:
 8012944:	b510      	push	{r4, lr}
 8012946:	460c      	mov	r4, r1
 8012948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801294c:	f000 f8e8 	bl	8012b20 <_read_r>
 8012950:	2800      	cmp	r0, #0
 8012952:	bfab      	itete	ge
 8012954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012956:	89a3      	ldrhlt	r3, [r4, #12]
 8012958:	181b      	addge	r3, r3, r0
 801295a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801295e:	bfac      	ite	ge
 8012960:	6563      	strge	r3, [r4, #84]	; 0x54
 8012962:	81a3      	strhlt	r3, [r4, #12]
 8012964:	bd10      	pop	{r4, pc}

08012966 <__swrite>:
 8012966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801296a:	461f      	mov	r7, r3
 801296c:	898b      	ldrh	r3, [r1, #12]
 801296e:	05db      	lsls	r3, r3, #23
 8012970:	4605      	mov	r5, r0
 8012972:	460c      	mov	r4, r1
 8012974:	4616      	mov	r6, r2
 8012976:	d505      	bpl.n	8012984 <__swrite+0x1e>
 8012978:	2302      	movs	r3, #2
 801297a:	2200      	movs	r2, #0
 801297c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012980:	f000 f868 	bl	8012a54 <_lseek_r>
 8012984:	89a3      	ldrh	r3, [r4, #12]
 8012986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801298a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801298e:	81a3      	strh	r3, [r4, #12]
 8012990:	4632      	mov	r2, r6
 8012992:	463b      	mov	r3, r7
 8012994:	4628      	mov	r0, r5
 8012996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801299a:	f000 b817 	b.w	80129cc <_write_r>

0801299e <__sseek>:
 801299e:	b510      	push	{r4, lr}
 80129a0:	460c      	mov	r4, r1
 80129a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129a6:	f000 f855 	bl	8012a54 <_lseek_r>
 80129aa:	1c43      	adds	r3, r0, #1
 80129ac:	89a3      	ldrh	r3, [r4, #12]
 80129ae:	bf15      	itete	ne
 80129b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80129b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129ba:	81a3      	strheq	r3, [r4, #12]
 80129bc:	bf18      	it	ne
 80129be:	81a3      	strhne	r3, [r4, #12]
 80129c0:	bd10      	pop	{r4, pc}

080129c2 <__sclose>:
 80129c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c6:	f000 b813 	b.w	80129f0 <_close_r>
	...

080129cc <_write_r>:
 80129cc:	b538      	push	{r3, r4, r5, lr}
 80129ce:	4c07      	ldr	r4, [pc, #28]	; (80129ec <_write_r+0x20>)
 80129d0:	4605      	mov	r5, r0
 80129d2:	4608      	mov	r0, r1
 80129d4:	4611      	mov	r1, r2
 80129d6:	2200      	movs	r2, #0
 80129d8:	6022      	str	r2, [r4, #0]
 80129da:	461a      	mov	r2, r3
 80129dc:	f7f4 ff19 	bl	8007812 <_write>
 80129e0:	1c43      	adds	r3, r0, #1
 80129e2:	d102      	bne.n	80129ea <_write_r+0x1e>
 80129e4:	6823      	ldr	r3, [r4, #0]
 80129e6:	b103      	cbz	r3, 80129ea <_write_r+0x1e>
 80129e8:	602b      	str	r3, [r5, #0]
 80129ea:	bd38      	pop	{r3, r4, r5, pc}
 80129ec:	20002cf0 	.word	0x20002cf0

080129f0 <_close_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	4c06      	ldr	r4, [pc, #24]	; (8012a0c <_close_r+0x1c>)
 80129f4:	2300      	movs	r3, #0
 80129f6:	4605      	mov	r5, r0
 80129f8:	4608      	mov	r0, r1
 80129fa:	6023      	str	r3, [r4, #0]
 80129fc:	f7f5 fa0d 	bl	8007e1a <_close>
 8012a00:	1c43      	adds	r3, r0, #1
 8012a02:	d102      	bne.n	8012a0a <_close_r+0x1a>
 8012a04:	6823      	ldr	r3, [r4, #0]
 8012a06:	b103      	cbz	r3, 8012a0a <_close_r+0x1a>
 8012a08:	602b      	str	r3, [r5, #0]
 8012a0a:	bd38      	pop	{r3, r4, r5, pc}
 8012a0c:	20002cf0 	.word	0x20002cf0

08012a10 <_fstat_r>:
 8012a10:	b538      	push	{r3, r4, r5, lr}
 8012a12:	4c07      	ldr	r4, [pc, #28]	; (8012a30 <_fstat_r+0x20>)
 8012a14:	2300      	movs	r3, #0
 8012a16:	4605      	mov	r5, r0
 8012a18:	4608      	mov	r0, r1
 8012a1a:	4611      	mov	r1, r2
 8012a1c:	6023      	str	r3, [r4, #0]
 8012a1e:	f7f5 fa08 	bl	8007e32 <_fstat>
 8012a22:	1c43      	adds	r3, r0, #1
 8012a24:	d102      	bne.n	8012a2c <_fstat_r+0x1c>
 8012a26:	6823      	ldr	r3, [r4, #0]
 8012a28:	b103      	cbz	r3, 8012a2c <_fstat_r+0x1c>
 8012a2a:	602b      	str	r3, [r5, #0]
 8012a2c:	bd38      	pop	{r3, r4, r5, pc}
 8012a2e:	bf00      	nop
 8012a30:	20002cf0 	.word	0x20002cf0

08012a34 <_isatty_r>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	4c06      	ldr	r4, [pc, #24]	; (8012a50 <_isatty_r+0x1c>)
 8012a38:	2300      	movs	r3, #0
 8012a3a:	4605      	mov	r5, r0
 8012a3c:	4608      	mov	r0, r1
 8012a3e:	6023      	str	r3, [r4, #0]
 8012a40:	f7f5 fa07 	bl	8007e52 <_isatty>
 8012a44:	1c43      	adds	r3, r0, #1
 8012a46:	d102      	bne.n	8012a4e <_isatty_r+0x1a>
 8012a48:	6823      	ldr	r3, [r4, #0]
 8012a4a:	b103      	cbz	r3, 8012a4e <_isatty_r+0x1a>
 8012a4c:	602b      	str	r3, [r5, #0]
 8012a4e:	bd38      	pop	{r3, r4, r5, pc}
 8012a50:	20002cf0 	.word	0x20002cf0

08012a54 <_lseek_r>:
 8012a54:	b538      	push	{r3, r4, r5, lr}
 8012a56:	4c07      	ldr	r4, [pc, #28]	; (8012a74 <_lseek_r+0x20>)
 8012a58:	4605      	mov	r5, r0
 8012a5a:	4608      	mov	r0, r1
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	2200      	movs	r2, #0
 8012a60:	6022      	str	r2, [r4, #0]
 8012a62:	461a      	mov	r2, r3
 8012a64:	f7f5 fa00 	bl	8007e68 <_lseek>
 8012a68:	1c43      	adds	r3, r0, #1
 8012a6a:	d102      	bne.n	8012a72 <_lseek_r+0x1e>
 8012a6c:	6823      	ldr	r3, [r4, #0]
 8012a6e:	b103      	cbz	r3, 8012a72 <_lseek_r+0x1e>
 8012a70:	602b      	str	r3, [r5, #0]
 8012a72:	bd38      	pop	{r3, r4, r5, pc}
 8012a74:	20002cf0 	.word	0x20002cf0

08012a78 <__ascii_mbtowc>:
 8012a78:	b082      	sub	sp, #8
 8012a7a:	b901      	cbnz	r1, 8012a7e <__ascii_mbtowc+0x6>
 8012a7c:	a901      	add	r1, sp, #4
 8012a7e:	b142      	cbz	r2, 8012a92 <__ascii_mbtowc+0x1a>
 8012a80:	b14b      	cbz	r3, 8012a96 <__ascii_mbtowc+0x1e>
 8012a82:	7813      	ldrb	r3, [r2, #0]
 8012a84:	600b      	str	r3, [r1, #0]
 8012a86:	7812      	ldrb	r2, [r2, #0]
 8012a88:	1c10      	adds	r0, r2, #0
 8012a8a:	bf18      	it	ne
 8012a8c:	2001      	movne	r0, #1
 8012a8e:	b002      	add	sp, #8
 8012a90:	4770      	bx	lr
 8012a92:	4610      	mov	r0, r2
 8012a94:	e7fb      	b.n	8012a8e <__ascii_mbtowc+0x16>
 8012a96:	f06f 0001 	mvn.w	r0, #1
 8012a9a:	e7f8      	b.n	8012a8e <__ascii_mbtowc+0x16>

08012a9c <memmove>:
 8012a9c:	4288      	cmp	r0, r1
 8012a9e:	b510      	push	{r4, lr}
 8012aa0:	eb01 0302 	add.w	r3, r1, r2
 8012aa4:	d807      	bhi.n	8012ab6 <memmove+0x1a>
 8012aa6:	1e42      	subs	r2, r0, #1
 8012aa8:	4299      	cmp	r1, r3
 8012aaa:	d00a      	beq.n	8012ac2 <memmove+0x26>
 8012aac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ab0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012ab4:	e7f8      	b.n	8012aa8 <memmove+0xc>
 8012ab6:	4283      	cmp	r3, r0
 8012ab8:	d9f5      	bls.n	8012aa6 <memmove+0xa>
 8012aba:	1881      	adds	r1, r0, r2
 8012abc:	1ad2      	subs	r2, r2, r3
 8012abe:	42d3      	cmn	r3, r2
 8012ac0:	d100      	bne.n	8012ac4 <memmove+0x28>
 8012ac2:	bd10      	pop	{r4, pc}
 8012ac4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ac8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012acc:	e7f7      	b.n	8012abe <memmove+0x22>

08012ace <__malloc_lock>:
 8012ace:	4770      	bx	lr

08012ad0 <__malloc_unlock>:
 8012ad0:	4770      	bx	lr

08012ad2 <_realloc_r>:
 8012ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ad4:	4607      	mov	r7, r0
 8012ad6:	4614      	mov	r4, r2
 8012ad8:	460e      	mov	r6, r1
 8012ada:	b921      	cbnz	r1, 8012ae6 <_realloc_r+0x14>
 8012adc:	4611      	mov	r1, r2
 8012ade:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012ae2:	f7ff bc33 	b.w	801234c <_malloc_r>
 8012ae6:	b922      	cbnz	r2, 8012af2 <_realloc_r+0x20>
 8012ae8:	f7ff fbe2 	bl	80122b0 <_free_r>
 8012aec:	4625      	mov	r5, r4
 8012aee:	4628      	mov	r0, r5
 8012af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012af2:	f000 f834 	bl	8012b5e <_malloc_usable_size_r>
 8012af6:	42a0      	cmp	r0, r4
 8012af8:	d20f      	bcs.n	8012b1a <_realloc_r+0x48>
 8012afa:	4621      	mov	r1, r4
 8012afc:	4638      	mov	r0, r7
 8012afe:	f7ff fc25 	bl	801234c <_malloc_r>
 8012b02:	4605      	mov	r5, r0
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d0f2      	beq.n	8012aee <_realloc_r+0x1c>
 8012b08:	4631      	mov	r1, r6
 8012b0a:	4622      	mov	r2, r4
 8012b0c:	f7ff f8dc 	bl	8011cc8 <memcpy>
 8012b10:	4631      	mov	r1, r6
 8012b12:	4638      	mov	r0, r7
 8012b14:	f7ff fbcc 	bl	80122b0 <_free_r>
 8012b18:	e7e9      	b.n	8012aee <_realloc_r+0x1c>
 8012b1a:	4635      	mov	r5, r6
 8012b1c:	e7e7      	b.n	8012aee <_realloc_r+0x1c>
	...

08012b20 <_read_r>:
 8012b20:	b538      	push	{r3, r4, r5, lr}
 8012b22:	4c07      	ldr	r4, [pc, #28]	; (8012b40 <_read_r+0x20>)
 8012b24:	4605      	mov	r5, r0
 8012b26:	4608      	mov	r0, r1
 8012b28:	4611      	mov	r1, r2
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	6022      	str	r2, [r4, #0]
 8012b2e:	461a      	mov	r2, r3
 8012b30:	f7f5 f956 	bl	8007de0 <_read>
 8012b34:	1c43      	adds	r3, r0, #1
 8012b36:	d102      	bne.n	8012b3e <_read_r+0x1e>
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	b103      	cbz	r3, 8012b3e <_read_r+0x1e>
 8012b3c:	602b      	str	r3, [r5, #0]
 8012b3e:	bd38      	pop	{r3, r4, r5, pc}
 8012b40:	20002cf0 	.word	0x20002cf0

08012b44 <__ascii_wctomb>:
 8012b44:	b149      	cbz	r1, 8012b5a <__ascii_wctomb+0x16>
 8012b46:	2aff      	cmp	r2, #255	; 0xff
 8012b48:	bf85      	ittet	hi
 8012b4a:	238a      	movhi	r3, #138	; 0x8a
 8012b4c:	6003      	strhi	r3, [r0, #0]
 8012b4e:	700a      	strbls	r2, [r1, #0]
 8012b50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012b54:	bf98      	it	ls
 8012b56:	2001      	movls	r0, #1
 8012b58:	4770      	bx	lr
 8012b5a:	4608      	mov	r0, r1
 8012b5c:	4770      	bx	lr

08012b5e <_malloc_usable_size_r>:
 8012b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b62:	1f18      	subs	r0, r3, #4
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	bfbc      	itt	lt
 8012b68:	580b      	ldrlt	r3, [r1, r0]
 8012b6a:	18c0      	addlt	r0, r0, r3
 8012b6c:	4770      	bx	lr
	...

08012b70 <log10>:
 8012b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b72:	ed2d 8b02 	vpush	{d8}
 8012b76:	b08b      	sub	sp, #44	; 0x2c
 8012b78:	ec55 4b10 	vmov	r4, r5, d0
 8012b7c:	f000 f9e8 	bl	8012f50 <__ieee754_log10>
 8012b80:	4b36      	ldr	r3, [pc, #216]	; (8012c5c <log10+0xec>)
 8012b82:	eeb0 8a40 	vmov.f32	s16, s0
 8012b86:	eef0 8a60 	vmov.f32	s17, s1
 8012b8a:	f993 6000 	ldrsb.w	r6, [r3]
 8012b8e:	1c73      	adds	r3, r6, #1
 8012b90:	d05c      	beq.n	8012c4c <log10+0xdc>
 8012b92:	4622      	mov	r2, r4
 8012b94:	462b      	mov	r3, r5
 8012b96:	4620      	mov	r0, r4
 8012b98:	4629      	mov	r1, r5
 8012b9a:	f7ed ffef 	bl	8000b7c <__aeabi_dcmpun>
 8012b9e:	4607      	mov	r7, r0
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	d153      	bne.n	8012c4c <log10+0xdc>
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	4620      	mov	r0, r4
 8012baa:	4629      	mov	r1, r5
 8012bac:	f7ed ffc8 	bl	8000b40 <__aeabi_dcmple>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	d04b      	beq.n	8012c4c <log10+0xdc>
 8012bb4:	4b2a      	ldr	r3, [pc, #168]	; (8012c60 <log10+0xf0>)
 8012bb6:	9301      	str	r3, [sp, #4]
 8012bb8:	9708      	str	r7, [sp, #32]
 8012bba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012bbe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8012bc2:	b9a6      	cbnz	r6, 8012bee <log10+0x7e>
 8012bc4:	4b27      	ldr	r3, [pc, #156]	; (8012c64 <log10+0xf4>)
 8012bc6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012bca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012bce:	4620      	mov	r0, r4
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	f7ed ff9f 	bl	8000b18 <__aeabi_dcmpeq>
 8012bda:	bb40      	cbnz	r0, 8012c2e <log10+0xbe>
 8012bdc:	2301      	movs	r3, #1
 8012bde:	2e02      	cmp	r6, #2
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	d119      	bne.n	8012c18 <log10+0xa8>
 8012be4:	f7fd fa2a 	bl	801003c <__errno>
 8012be8:	2321      	movs	r3, #33	; 0x21
 8012bea:	6003      	str	r3, [r0, #0]
 8012bec:	e019      	b.n	8012c22 <log10+0xb2>
 8012bee:	4b1e      	ldr	r3, [pc, #120]	; (8012c68 <log10+0xf8>)
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	f7ed ff8b 	bl	8000b18 <__aeabi_dcmpeq>
 8012c02:	2800      	cmp	r0, #0
 8012c04:	d0ea      	beq.n	8012bdc <log10+0x6c>
 8012c06:	2302      	movs	r3, #2
 8012c08:	429e      	cmp	r6, r3
 8012c0a:	9300      	str	r3, [sp, #0]
 8012c0c:	d111      	bne.n	8012c32 <log10+0xc2>
 8012c0e:	f7fd fa15 	bl	801003c <__errno>
 8012c12:	2322      	movs	r3, #34	; 0x22
 8012c14:	6003      	str	r3, [r0, #0]
 8012c16:	e011      	b.n	8012c3c <log10+0xcc>
 8012c18:	4668      	mov	r0, sp
 8012c1a:	f000 fff4 	bl	8013c06 <matherr>
 8012c1e:	2800      	cmp	r0, #0
 8012c20:	d0e0      	beq.n	8012be4 <log10+0x74>
 8012c22:	4812      	ldr	r0, [pc, #72]	; (8012c6c <log10+0xfc>)
 8012c24:	f000 fff4 	bl	8013c10 <nan>
 8012c28:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012c2c:	e006      	b.n	8012c3c <log10+0xcc>
 8012c2e:	2302      	movs	r3, #2
 8012c30:	9300      	str	r3, [sp, #0]
 8012c32:	4668      	mov	r0, sp
 8012c34:	f000 ffe7 	bl	8013c06 <matherr>
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	d0e8      	beq.n	8012c0e <log10+0x9e>
 8012c3c:	9b08      	ldr	r3, [sp, #32]
 8012c3e:	b11b      	cbz	r3, 8012c48 <log10+0xd8>
 8012c40:	f7fd f9fc 	bl	801003c <__errno>
 8012c44:	9b08      	ldr	r3, [sp, #32]
 8012c46:	6003      	str	r3, [r0, #0]
 8012c48:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8012c50:	eef0 0a68 	vmov.f32	s1, s17
 8012c54:	b00b      	add	sp, #44	; 0x2c
 8012c56:	ecbd 8b02 	vpop	{d8}
 8012c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c5c:	20001e08 	.word	0x20001e08
 8012c60:	08015540 	.word	0x08015540
 8012c64:	c7efffff 	.word	0xc7efffff
 8012c68:	fff00000 	.word	0xfff00000
 8012c6c:	08015429 	.word	0x08015429

08012c70 <pow>:
 8012c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c74:	ed2d 8b04 	vpush	{d8-d9}
 8012c78:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8012f4c <pow+0x2dc>
 8012c7c:	b08d      	sub	sp, #52	; 0x34
 8012c7e:	ec57 6b10 	vmov	r6, r7, d0
 8012c82:	ec55 4b11 	vmov	r4, r5, d1
 8012c86:	f000 f9ef 	bl	8013068 <__ieee754_pow>
 8012c8a:	f999 3000 	ldrsb.w	r3, [r9]
 8012c8e:	9300      	str	r3, [sp, #0]
 8012c90:	3301      	adds	r3, #1
 8012c92:	eeb0 8a40 	vmov.f32	s16, s0
 8012c96:	eef0 8a60 	vmov.f32	s17, s1
 8012c9a:	46c8      	mov	r8, r9
 8012c9c:	d05f      	beq.n	8012d5e <pow+0xee>
 8012c9e:	4622      	mov	r2, r4
 8012ca0:	462b      	mov	r3, r5
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	4629      	mov	r1, r5
 8012ca6:	f7ed ff69 	bl	8000b7c <__aeabi_dcmpun>
 8012caa:	4683      	mov	fp, r0
 8012cac:	2800      	cmp	r0, #0
 8012cae:	d156      	bne.n	8012d5e <pow+0xee>
 8012cb0:	4632      	mov	r2, r6
 8012cb2:	463b      	mov	r3, r7
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	4639      	mov	r1, r7
 8012cb8:	f7ed ff60 	bl	8000b7c <__aeabi_dcmpun>
 8012cbc:	9001      	str	r0, [sp, #4]
 8012cbe:	b1e8      	cbz	r0, 8012cfc <pow+0x8c>
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	f7ed ff26 	bl	8000b18 <__aeabi_dcmpeq>
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	d046      	beq.n	8012d5e <pow+0xee>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	9302      	str	r3, [sp, #8]
 8012cd4:	4b96      	ldr	r3, [pc, #600]	; (8012f30 <pow+0x2c0>)
 8012cd6:	9303      	str	r3, [sp, #12]
 8012cd8:	4b96      	ldr	r3, [pc, #600]	; (8012f34 <pow+0x2c4>)
 8012cda:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012cde:	2200      	movs	r2, #0
 8012ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012ce4:	9b00      	ldr	r3, [sp, #0]
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012cec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012cf0:	d033      	beq.n	8012d5a <pow+0xea>
 8012cf2:	a802      	add	r0, sp, #8
 8012cf4:	f000 ff87 	bl	8013c06 <matherr>
 8012cf8:	bb48      	cbnz	r0, 8012d4e <pow+0xde>
 8012cfa:	e05d      	b.n	8012db8 <pow+0x148>
 8012cfc:	f04f 0a00 	mov.w	sl, #0
 8012d00:	f04f 0b00 	mov.w	fp, #0
 8012d04:	4652      	mov	r2, sl
 8012d06:	465b      	mov	r3, fp
 8012d08:	4630      	mov	r0, r6
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	f7ed ff04 	bl	8000b18 <__aeabi_dcmpeq>
 8012d10:	ec4b ab19 	vmov	d9, sl, fp
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d054      	beq.n	8012dc2 <pow+0x152>
 8012d18:	4652      	mov	r2, sl
 8012d1a:	465b      	mov	r3, fp
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	4629      	mov	r1, r5
 8012d20:	f7ed fefa 	bl	8000b18 <__aeabi_dcmpeq>
 8012d24:	4680      	mov	r8, r0
 8012d26:	b318      	cbz	r0, 8012d70 <pow+0x100>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	9302      	str	r3, [sp, #8]
 8012d2c:	4b80      	ldr	r3, [pc, #512]	; (8012f30 <pow+0x2c0>)
 8012d2e:	9303      	str	r3, [sp, #12]
 8012d30:	9b01      	ldr	r3, [sp, #4]
 8012d32:	930a      	str	r3, [sp, #40]	; 0x28
 8012d34:	9b00      	ldr	r3, [sp, #0]
 8012d36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012d3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012d3e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d0d5      	beq.n	8012cf2 <pow+0x82>
 8012d46:	4b7b      	ldr	r3, [pc, #492]	; (8012f34 <pow+0x2c4>)
 8012d48:	2200      	movs	r2, #0
 8012d4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d50:	b11b      	cbz	r3, 8012d5a <pow+0xea>
 8012d52:	f7fd f973 	bl	801003c <__errno>
 8012d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d58:	6003      	str	r3, [r0, #0]
 8012d5a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8012d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8012d62:	eef0 0a68 	vmov.f32	s1, s17
 8012d66:	b00d      	add	sp, #52	; 0x34
 8012d68:	ecbd 8b04 	vpop	{d8-d9}
 8012d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d70:	ec45 4b10 	vmov	d0, r4, r5
 8012d74:	f000 ff3f 	bl	8013bf6 <finite>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d0f0      	beq.n	8012d5e <pow+0xee>
 8012d7c:	4652      	mov	r2, sl
 8012d7e:	465b      	mov	r3, fp
 8012d80:	4620      	mov	r0, r4
 8012d82:	4629      	mov	r1, r5
 8012d84:	f7ed fed2 	bl	8000b2c <__aeabi_dcmplt>
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d0e8      	beq.n	8012d5e <pow+0xee>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	9302      	str	r3, [sp, #8]
 8012d90:	4b67      	ldr	r3, [pc, #412]	; (8012f30 <pow+0x2c0>)
 8012d92:	9303      	str	r3, [sp, #12]
 8012d94:	f999 3000 	ldrsb.w	r3, [r9]
 8012d98:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012d9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012da0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012da4:	b913      	cbnz	r3, 8012dac <pow+0x13c>
 8012da6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012daa:	e7a2      	b.n	8012cf2 <pow+0x82>
 8012dac:	4962      	ldr	r1, [pc, #392]	; (8012f38 <pow+0x2c8>)
 8012dae:	2000      	movs	r0, #0
 8012db0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012db4:	2b02      	cmp	r3, #2
 8012db6:	d19c      	bne.n	8012cf2 <pow+0x82>
 8012db8:	f7fd f940 	bl	801003c <__errno>
 8012dbc:	2321      	movs	r3, #33	; 0x21
 8012dbe:	6003      	str	r3, [r0, #0]
 8012dc0:	e7c5      	b.n	8012d4e <pow+0xde>
 8012dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8012dc6:	eef0 0a68 	vmov.f32	s1, s17
 8012dca:	f000 ff14 	bl	8013bf6 <finite>
 8012dce:	9000      	str	r0, [sp, #0]
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	f040 8081 	bne.w	8012ed8 <pow+0x268>
 8012dd6:	ec47 6b10 	vmov	d0, r6, r7
 8012dda:	f000 ff0c 	bl	8013bf6 <finite>
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d07a      	beq.n	8012ed8 <pow+0x268>
 8012de2:	ec45 4b10 	vmov	d0, r4, r5
 8012de6:	f000 ff06 	bl	8013bf6 <finite>
 8012dea:	2800      	cmp	r0, #0
 8012dec:	d074      	beq.n	8012ed8 <pow+0x268>
 8012dee:	ec53 2b18 	vmov	r2, r3, d8
 8012df2:	ee18 0a10 	vmov	r0, s16
 8012df6:	4619      	mov	r1, r3
 8012df8:	f7ed fec0 	bl	8000b7c <__aeabi_dcmpun>
 8012dfc:	f999 9000 	ldrsb.w	r9, [r9]
 8012e00:	4b4b      	ldr	r3, [pc, #300]	; (8012f30 <pow+0x2c0>)
 8012e02:	b1b0      	cbz	r0, 8012e32 <pow+0x1c2>
 8012e04:	2201      	movs	r2, #1
 8012e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e0a:	9b00      	ldr	r3, [sp, #0]
 8012e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8012e0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012e12:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012e16:	f1b9 0f00 	cmp.w	r9, #0
 8012e1a:	d0c4      	beq.n	8012da6 <pow+0x136>
 8012e1c:	4652      	mov	r2, sl
 8012e1e:	465b      	mov	r3, fp
 8012e20:	4650      	mov	r0, sl
 8012e22:	4659      	mov	r1, fp
 8012e24:	f7ed fd3a 	bl	800089c <__aeabi_ddiv>
 8012e28:	f1b9 0f02 	cmp.w	r9, #2
 8012e2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e30:	e7c1      	b.n	8012db6 <pow+0x146>
 8012e32:	2203      	movs	r2, #3
 8012e34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e38:	900a      	str	r0, [sp, #40]	; 0x28
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	2200      	movs	r2, #0
 8012e40:	4b3e      	ldr	r3, [pc, #248]	; (8012f3c <pow+0x2cc>)
 8012e42:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012e46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012e4a:	f7ed fbfd 	bl	8000648 <__aeabi_dmul>
 8012e4e:	4604      	mov	r4, r0
 8012e50:	460d      	mov	r5, r1
 8012e52:	f1b9 0f00 	cmp.w	r9, #0
 8012e56:	d124      	bne.n	8012ea2 <pow+0x232>
 8012e58:	4b39      	ldr	r3, [pc, #228]	; (8012f40 <pow+0x2d0>)
 8012e5a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012e5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e62:	4630      	mov	r0, r6
 8012e64:	4652      	mov	r2, sl
 8012e66:	465b      	mov	r3, fp
 8012e68:	4639      	mov	r1, r7
 8012e6a:	f7ed fe5f 	bl	8000b2c <__aeabi_dcmplt>
 8012e6e:	2800      	cmp	r0, #0
 8012e70:	d056      	beq.n	8012f20 <pow+0x2b0>
 8012e72:	ec45 4b10 	vmov	d0, r4, r5
 8012e76:	f000 fed3 	bl	8013c20 <rint>
 8012e7a:	4622      	mov	r2, r4
 8012e7c:	462b      	mov	r3, r5
 8012e7e:	ec51 0b10 	vmov	r0, r1, d0
 8012e82:	f7ed fe49 	bl	8000b18 <__aeabi_dcmpeq>
 8012e86:	b920      	cbnz	r0, 8012e92 <pow+0x222>
 8012e88:	4b2e      	ldr	r3, [pc, #184]	; (8012f44 <pow+0x2d4>)
 8012e8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012e8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e92:	f998 3000 	ldrsb.w	r3, [r8]
 8012e96:	2b02      	cmp	r3, #2
 8012e98:	d142      	bne.n	8012f20 <pow+0x2b0>
 8012e9a:	f7fd f8cf 	bl	801003c <__errno>
 8012e9e:	2322      	movs	r3, #34	; 0x22
 8012ea0:	e78d      	b.n	8012dbe <pow+0x14e>
 8012ea2:	4b29      	ldr	r3, [pc, #164]	; (8012f48 <pow+0x2d8>)
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012eaa:	4630      	mov	r0, r6
 8012eac:	4652      	mov	r2, sl
 8012eae:	465b      	mov	r3, fp
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	f7ed fe3b 	bl	8000b2c <__aeabi_dcmplt>
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	d0eb      	beq.n	8012e92 <pow+0x222>
 8012eba:	ec45 4b10 	vmov	d0, r4, r5
 8012ebe:	f000 feaf 	bl	8013c20 <rint>
 8012ec2:	4622      	mov	r2, r4
 8012ec4:	462b      	mov	r3, r5
 8012ec6:	ec51 0b10 	vmov	r0, r1, d0
 8012eca:	f7ed fe25 	bl	8000b18 <__aeabi_dcmpeq>
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	d1df      	bne.n	8012e92 <pow+0x222>
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	4b18      	ldr	r3, [pc, #96]	; (8012f38 <pow+0x2c8>)
 8012ed6:	e7da      	b.n	8012e8e <pow+0x21e>
 8012ed8:	2200      	movs	r2, #0
 8012eda:	2300      	movs	r3, #0
 8012edc:	ec51 0b18 	vmov	r0, r1, d8
 8012ee0:	f7ed fe1a 	bl	8000b18 <__aeabi_dcmpeq>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	f43f af3a 	beq.w	8012d5e <pow+0xee>
 8012eea:	ec47 6b10 	vmov	d0, r6, r7
 8012eee:	f000 fe82 	bl	8013bf6 <finite>
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	f43f af33 	beq.w	8012d5e <pow+0xee>
 8012ef8:	ec45 4b10 	vmov	d0, r4, r5
 8012efc:	f000 fe7b 	bl	8013bf6 <finite>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	f43f af2c 	beq.w	8012d5e <pow+0xee>
 8012f06:	2304      	movs	r3, #4
 8012f08:	9302      	str	r3, [sp, #8]
 8012f0a:	4b09      	ldr	r3, [pc, #36]	; (8012f30 <pow+0x2c0>)
 8012f0c:	9303      	str	r3, [sp, #12]
 8012f0e:	2300      	movs	r3, #0
 8012f10:	930a      	str	r3, [sp, #40]	; 0x28
 8012f12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012f16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012f1a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8012f1e:	e7b8      	b.n	8012e92 <pow+0x222>
 8012f20:	a802      	add	r0, sp, #8
 8012f22:	f000 fe70 	bl	8013c06 <matherr>
 8012f26:	2800      	cmp	r0, #0
 8012f28:	f47f af11 	bne.w	8012d4e <pow+0xde>
 8012f2c:	e7b5      	b.n	8012e9a <pow+0x22a>
 8012f2e:	bf00      	nop
 8012f30:	08015546 	.word	0x08015546
 8012f34:	3ff00000 	.word	0x3ff00000
 8012f38:	fff00000 	.word	0xfff00000
 8012f3c:	3fe00000 	.word	0x3fe00000
 8012f40:	47efffff 	.word	0x47efffff
 8012f44:	c7efffff 	.word	0xc7efffff
 8012f48:	7ff00000 	.word	0x7ff00000
 8012f4c:	20001e08 	.word	0x20001e08

08012f50 <__ieee754_log10>:
 8012f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f54:	ec55 4b10 	vmov	r4, r5, d0
 8012f58:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8012f5c:	462b      	mov	r3, r5
 8012f5e:	da2f      	bge.n	8012fc0 <__ieee754_log10+0x70>
 8012f60:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8012f64:	4322      	orrs	r2, r4
 8012f66:	d10a      	bne.n	8012f7e <__ieee754_log10+0x2e>
 8012f68:	493b      	ldr	r1, [pc, #236]	; (8013058 <__ieee754_log10+0x108>)
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	2000      	movs	r0, #0
 8012f70:	f7ed fc94 	bl	800089c <__aeabi_ddiv>
 8012f74:	ec41 0b10 	vmov	d0, r0, r1
 8012f78:	b003      	add	sp, #12
 8012f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f7e:	2d00      	cmp	r5, #0
 8012f80:	da08      	bge.n	8012f94 <__ieee754_log10+0x44>
 8012f82:	ee10 2a10 	vmov	r2, s0
 8012f86:	4620      	mov	r0, r4
 8012f88:	4629      	mov	r1, r5
 8012f8a:	f7ed f9a5 	bl	80002d8 <__aeabi_dsub>
 8012f8e:	2200      	movs	r2, #0
 8012f90:	2300      	movs	r3, #0
 8012f92:	e7ed      	b.n	8012f70 <__ieee754_log10+0x20>
 8012f94:	2200      	movs	r2, #0
 8012f96:	4b31      	ldr	r3, [pc, #196]	; (801305c <__ieee754_log10+0x10c>)
 8012f98:	4629      	mov	r1, r5
 8012f9a:	ee10 0a10 	vmov	r0, s0
 8012f9e:	f7ed fb53 	bl	8000648 <__aeabi_dmul>
 8012fa2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8012fa6:	4604      	mov	r4, r0
 8012fa8:	460d      	mov	r5, r1
 8012faa:	460b      	mov	r3, r1
 8012fac:	492c      	ldr	r1, [pc, #176]	; (8013060 <__ieee754_log10+0x110>)
 8012fae:	428b      	cmp	r3, r1
 8012fb0:	dd08      	ble.n	8012fc4 <__ieee754_log10+0x74>
 8012fb2:	4622      	mov	r2, r4
 8012fb4:	462b      	mov	r3, r5
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	4629      	mov	r1, r5
 8012fba:	f7ed f98f 	bl	80002dc <__adddf3>
 8012fbe:	e7d9      	b.n	8012f74 <__ieee754_log10+0x24>
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	e7f3      	b.n	8012fac <__ieee754_log10+0x5c>
 8012fc4:	1518      	asrs	r0, r3, #20
 8012fc6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8012fca:	4410      	add	r0, r2
 8012fcc:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8012fd0:	4448      	add	r0, r9
 8012fd2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8012fd6:	f7ed facd 	bl	8000574 <__aeabi_i2d>
 8012fda:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8012fde:	3303      	adds	r3, #3
 8012fe0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8012fe4:	ec45 4b10 	vmov	d0, r4, r5
 8012fe8:	4606      	mov	r6, r0
 8012fea:	460f      	mov	r7, r1
 8012fec:	f000 ff14 	bl	8013e18 <__ieee754_log>
 8012ff0:	a313      	add	r3, pc, #76	; (adr r3, 8013040 <__ieee754_log10+0xf0>)
 8012ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	4639      	mov	r1, r7
 8012ffa:	ed8d 0b00 	vstr	d0, [sp]
 8012ffe:	f7ed fb23 	bl	8000648 <__aeabi_dmul>
 8013002:	ed9d 0b00 	vldr	d0, [sp]
 8013006:	4604      	mov	r4, r0
 8013008:	460d      	mov	r5, r1
 801300a:	a30f      	add	r3, pc, #60	; (adr r3, 8013048 <__ieee754_log10+0xf8>)
 801300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013010:	ec51 0b10 	vmov	r0, r1, d0
 8013014:	f7ed fb18 	bl	8000648 <__aeabi_dmul>
 8013018:	4602      	mov	r2, r0
 801301a:	460b      	mov	r3, r1
 801301c:	4620      	mov	r0, r4
 801301e:	4629      	mov	r1, r5
 8013020:	f7ed f95c 	bl	80002dc <__adddf3>
 8013024:	a30a      	add	r3, pc, #40	; (adr r3, 8013050 <__ieee754_log10+0x100>)
 8013026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302a:	4604      	mov	r4, r0
 801302c:	460d      	mov	r5, r1
 801302e:	4630      	mov	r0, r6
 8013030:	4639      	mov	r1, r7
 8013032:	f7ed fb09 	bl	8000648 <__aeabi_dmul>
 8013036:	4602      	mov	r2, r0
 8013038:	460b      	mov	r3, r1
 801303a:	4620      	mov	r0, r4
 801303c:	4629      	mov	r1, r5
 801303e:	e7bc      	b.n	8012fba <__ieee754_log10+0x6a>
 8013040:	11f12b36 	.word	0x11f12b36
 8013044:	3d59fef3 	.word	0x3d59fef3
 8013048:	1526e50e 	.word	0x1526e50e
 801304c:	3fdbcb7b 	.word	0x3fdbcb7b
 8013050:	509f6000 	.word	0x509f6000
 8013054:	3fd34413 	.word	0x3fd34413
 8013058:	c3500000 	.word	0xc3500000
 801305c:	43500000 	.word	0x43500000
 8013060:	7fefffff 	.word	0x7fefffff
 8013064:	00000000 	.word	0x00000000

08013068 <__ieee754_pow>:
 8013068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801306c:	b091      	sub	sp, #68	; 0x44
 801306e:	ed8d 1b00 	vstr	d1, [sp]
 8013072:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013076:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801307a:	ea58 0302 	orrs.w	r3, r8, r2
 801307e:	ec57 6b10 	vmov	r6, r7, d0
 8013082:	f000 84be 	beq.w	8013a02 <__ieee754_pow+0x99a>
 8013086:	4b7a      	ldr	r3, [pc, #488]	; (8013270 <__ieee754_pow+0x208>)
 8013088:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801308c:	429c      	cmp	r4, r3
 801308e:	463d      	mov	r5, r7
 8013090:	ee10 aa10 	vmov	sl, s0
 8013094:	dc09      	bgt.n	80130aa <__ieee754_pow+0x42>
 8013096:	d103      	bne.n	80130a0 <__ieee754_pow+0x38>
 8013098:	b93e      	cbnz	r6, 80130aa <__ieee754_pow+0x42>
 801309a:	45a0      	cmp	r8, r4
 801309c:	dc0d      	bgt.n	80130ba <__ieee754_pow+0x52>
 801309e:	e001      	b.n	80130a4 <__ieee754_pow+0x3c>
 80130a0:	4598      	cmp	r8, r3
 80130a2:	dc02      	bgt.n	80130aa <__ieee754_pow+0x42>
 80130a4:	4598      	cmp	r8, r3
 80130a6:	d10e      	bne.n	80130c6 <__ieee754_pow+0x5e>
 80130a8:	b16a      	cbz	r2, 80130c6 <__ieee754_pow+0x5e>
 80130aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80130ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80130b2:	ea54 030a 	orrs.w	r3, r4, sl
 80130b6:	f000 84a4 	beq.w	8013a02 <__ieee754_pow+0x99a>
 80130ba:	486e      	ldr	r0, [pc, #440]	; (8013274 <__ieee754_pow+0x20c>)
 80130bc:	b011      	add	sp, #68	; 0x44
 80130be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c2:	f000 bda5 	b.w	8013c10 <nan>
 80130c6:	2d00      	cmp	r5, #0
 80130c8:	da53      	bge.n	8013172 <__ieee754_pow+0x10a>
 80130ca:	4b6b      	ldr	r3, [pc, #428]	; (8013278 <__ieee754_pow+0x210>)
 80130cc:	4598      	cmp	r8, r3
 80130ce:	dc4d      	bgt.n	801316c <__ieee754_pow+0x104>
 80130d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80130d4:	4598      	cmp	r8, r3
 80130d6:	dd4c      	ble.n	8013172 <__ieee754_pow+0x10a>
 80130d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80130dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80130e0:	2b14      	cmp	r3, #20
 80130e2:	dd26      	ble.n	8013132 <__ieee754_pow+0xca>
 80130e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80130e8:	fa22 f103 	lsr.w	r1, r2, r3
 80130ec:	fa01 f303 	lsl.w	r3, r1, r3
 80130f0:	4293      	cmp	r3, r2
 80130f2:	d13e      	bne.n	8013172 <__ieee754_pow+0x10a>
 80130f4:	f001 0101 	and.w	r1, r1, #1
 80130f8:	f1c1 0b02 	rsb	fp, r1, #2
 80130fc:	2a00      	cmp	r2, #0
 80130fe:	d15b      	bne.n	80131b8 <__ieee754_pow+0x150>
 8013100:	4b5b      	ldr	r3, [pc, #364]	; (8013270 <__ieee754_pow+0x208>)
 8013102:	4598      	cmp	r8, r3
 8013104:	d124      	bne.n	8013150 <__ieee754_pow+0xe8>
 8013106:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801310a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801310e:	ea53 030a 	orrs.w	r3, r3, sl
 8013112:	f000 8476 	beq.w	8013a02 <__ieee754_pow+0x99a>
 8013116:	4b59      	ldr	r3, [pc, #356]	; (801327c <__ieee754_pow+0x214>)
 8013118:	429c      	cmp	r4, r3
 801311a:	dd2d      	ble.n	8013178 <__ieee754_pow+0x110>
 801311c:	f1b9 0f00 	cmp.w	r9, #0
 8013120:	f280 8473 	bge.w	8013a0a <__ieee754_pow+0x9a2>
 8013124:	2000      	movs	r0, #0
 8013126:	2100      	movs	r1, #0
 8013128:	ec41 0b10 	vmov	d0, r0, r1
 801312c:	b011      	add	sp, #68	; 0x44
 801312e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013132:	2a00      	cmp	r2, #0
 8013134:	d13e      	bne.n	80131b4 <__ieee754_pow+0x14c>
 8013136:	f1c3 0314 	rsb	r3, r3, #20
 801313a:	fa48 f103 	asr.w	r1, r8, r3
 801313e:	fa01 f303 	lsl.w	r3, r1, r3
 8013142:	4543      	cmp	r3, r8
 8013144:	f040 8469 	bne.w	8013a1a <__ieee754_pow+0x9b2>
 8013148:	f001 0101 	and.w	r1, r1, #1
 801314c:	f1c1 0b02 	rsb	fp, r1, #2
 8013150:	4b4b      	ldr	r3, [pc, #300]	; (8013280 <__ieee754_pow+0x218>)
 8013152:	4598      	cmp	r8, r3
 8013154:	d118      	bne.n	8013188 <__ieee754_pow+0x120>
 8013156:	f1b9 0f00 	cmp.w	r9, #0
 801315a:	f280 845a 	bge.w	8013a12 <__ieee754_pow+0x9aa>
 801315e:	4948      	ldr	r1, [pc, #288]	; (8013280 <__ieee754_pow+0x218>)
 8013160:	4632      	mov	r2, r6
 8013162:	463b      	mov	r3, r7
 8013164:	2000      	movs	r0, #0
 8013166:	f7ed fb99 	bl	800089c <__aeabi_ddiv>
 801316a:	e7dd      	b.n	8013128 <__ieee754_pow+0xc0>
 801316c:	f04f 0b02 	mov.w	fp, #2
 8013170:	e7c4      	b.n	80130fc <__ieee754_pow+0x94>
 8013172:	f04f 0b00 	mov.w	fp, #0
 8013176:	e7c1      	b.n	80130fc <__ieee754_pow+0x94>
 8013178:	f1b9 0f00 	cmp.w	r9, #0
 801317c:	dad2      	bge.n	8013124 <__ieee754_pow+0xbc>
 801317e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013182:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013186:	e7cf      	b.n	8013128 <__ieee754_pow+0xc0>
 8013188:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801318c:	d106      	bne.n	801319c <__ieee754_pow+0x134>
 801318e:	4632      	mov	r2, r6
 8013190:	463b      	mov	r3, r7
 8013192:	4610      	mov	r0, r2
 8013194:	4619      	mov	r1, r3
 8013196:	f7ed fa57 	bl	8000648 <__aeabi_dmul>
 801319a:	e7c5      	b.n	8013128 <__ieee754_pow+0xc0>
 801319c:	4b39      	ldr	r3, [pc, #228]	; (8013284 <__ieee754_pow+0x21c>)
 801319e:	4599      	cmp	r9, r3
 80131a0:	d10a      	bne.n	80131b8 <__ieee754_pow+0x150>
 80131a2:	2d00      	cmp	r5, #0
 80131a4:	db08      	blt.n	80131b8 <__ieee754_pow+0x150>
 80131a6:	ec47 6b10 	vmov	d0, r6, r7
 80131aa:	b011      	add	sp, #68	; 0x44
 80131ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b0:	f000 bc68 	b.w	8013a84 <__ieee754_sqrt>
 80131b4:	f04f 0b00 	mov.w	fp, #0
 80131b8:	ec47 6b10 	vmov	d0, r6, r7
 80131bc:	f000 fd12 	bl	8013be4 <fabs>
 80131c0:	ec51 0b10 	vmov	r0, r1, d0
 80131c4:	f1ba 0f00 	cmp.w	sl, #0
 80131c8:	d127      	bne.n	801321a <__ieee754_pow+0x1b2>
 80131ca:	b124      	cbz	r4, 80131d6 <__ieee754_pow+0x16e>
 80131cc:	4b2c      	ldr	r3, [pc, #176]	; (8013280 <__ieee754_pow+0x218>)
 80131ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d121      	bne.n	801321a <__ieee754_pow+0x1b2>
 80131d6:	f1b9 0f00 	cmp.w	r9, #0
 80131da:	da05      	bge.n	80131e8 <__ieee754_pow+0x180>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	2000      	movs	r0, #0
 80131e2:	4927      	ldr	r1, [pc, #156]	; (8013280 <__ieee754_pow+0x218>)
 80131e4:	f7ed fb5a 	bl	800089c <__aeabi_ddiv>
 80131e8:	2d00      	cmp	r5, #0
 80131ea:	da9d      	bge.n	8013128 <__ieee754_pow+0xc0>
 80131ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80131f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80131f4:	ea54 030b 	orrs.w	r3, r4, fp
 80131f8:	d108      	bne.n	801320c <__ieee754_pow+0x1a4>
 80131fa:	4602      	mov	r2, r0
 80131fc:	460b      	mov	r3, r1
 80131fe:	4610      	mov	r0, r2
 8013200:	4619      	mov	r1, r3
 8013202:	f7ed f869 	bl	80002d8 <__aeabi_dsub>
 8013206:	4602      	mov	r2, r0
 8013208:	460b      	mov	r3, r1
 801320a:	e7ac      	b.n	8013166 <__ieee754_pow+0xfe>
 801320c:	f1bb 0f01 	cmp.w	fp, #1
 8013210:	d18a      	bne.n	8013128 <__ieee754_pow+0xc0>
 8013212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013216:	4619      	mov	r1, r3
 8013218:	e786      	b.n	8013128 <__ieee754_pow+0xc0>
 801321a:	0fed      	lsrs	r5, r5, #31
 801321c:	1e6b      	subs	r3, r5, #1
 801321e:	930d      	str	r3, [sp, #52]	; 0x34
 8013220:	ea5b 0303 	orrs.w	r3, fp, r3
 8013224:	d102      	bne.n	801322c <__ieee754_pow+0x1c4>
 8013226:	4632      	mov	r2, r6
 8013228:	463b      	mov	r3, r7
 801322a:	e7e8      	b.n	80131fe <__ieee754_pow+0x196>
 801322c:	4b16      	ldr	r3, [pc, #88]	; (8013288 <__ieee754_pow+0x220>)
 801322e:	4598      	cmp	r8, r3
 8013230:	f340 80fe 	ble.w	8013430 <__ieee754_pow+0x3c8>
 8013234:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013238:	4598      	cmp	r8, r3
 801323a:	dd0a      	ble.n	8013252 <__ieee754_pow+0x1ea>
 801323c:	4b0f      	ldr	r3, [pc, #60]	; (801327c <__ieee754_pow+0x214>)
 801323e:	429c      	cmp	r4, r3
 8013240:	dc0d      	bgt.n	801325e <__ieee754_pow+0x1f6>
 8013242:	f1b9 0f00 	cmp.w	r9, #0
 8013246:	f6bf af6d 	bge.w	8013124 <__ieee754_pow+0xbc>
 801324a:	a307      	add	r3, pc, #28	; (adr r3, 8013268 <__ieee754_pow+0x200>)
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	e79f      	b.n	8013192 <__ieee754_pow+0x12a>
 8013252:	4b0e      	ldr	r3, [pc, #56]	; (801328c <__ieee754_pow+0x224>)
 8013254:	429c      	cmp	r4, r3
 8013256:	ddf4      	ble.n	8013242 <__ieee754_pow+0x1da>
 8013258:	4b09      	ldr	r3, [pc, #36]	; (8013280 <__ieee754_pow+0x218>)
 801325a:	429c      	cmp	r4, r3
 801325c:	dd18      	ble.n	8013290 <__ieee754_pow+0x228>
 801325e:	f1b9 0f00 	cmp.w	r9, #0
 8013262:	dcf2      	bgt.n	801324a <__ieee754_pow+0x1e2>
 8013264:	e75e      	b.n	8013124 <__ieee754_pow+0xbc>
 8013266:	bf00      	nop
 8013268:	8800759c 	.word	0x8800759c
 801326c:	7e37e43c 	.word	0x7e37e43c
 8013270:	7ff00000 	.word	0x7ff00000
 8013274:	08015429 	.word	0x08015429
 8013278:	433fffff 	.word	0x433fffff
 801327c:	3fefffff 	.word	0x3fefffff
 8013280:	3ff00000 	.word	0x3ff00000
 8013284:	3fe00000 	.word	0x3fe00000
 8013288:	41e00000 	.word	0x41e00000
 801328c:	3feffffe 	.word	0x3feffffe
 8013290:	2200      	movs	r2, #0
 8013292:	4b63      	ldr	r3, [pc, #396]	; (8013420 <__ieee754_pow+0x3b8>)
 8013294:	f7ed f820 	bl	80002d8 <__aeabi_dsub>
 8013298:	a355      	add	r3, pc, #340	; (adr r3, 80133f0 <__ieee754_pow+0x388>)
 801329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329e:	4604      	mov	r4, r0
 80132a0:	460d      	mov	r5, r1
 80132a2:	f7ed f9d1 	bl	8000648 <__aeabi_dmul>
 80132a6:	a354      	add	r3, pc, #336	; (adr r3, 80133f8 <__ieee754_pow+0x390>)
 80132a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ac:	4606      	mov	r6, r0
 80132ae:	460f      	mov	r7, r1
 80132b0:	4620      	mov	r0, r4
 80132b2:	4629      	mov	r1, r5
 80132b4:	f7ed f9c8 	bl	8000648 <__aeabi_dmul>
 80132b8:	2200      	movs	r2, #0
 80132ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132be:	4b59      	ldr	r3, [pc, #356]	; (8013424 <__ieee754_pow+0x3bc>)
 80132c0:	4620      	mov	r0, r4
 80132c2:	4629      	mov	r1, r5
 80132c4:	f7ed f9c0 	bl	8000648 <__aeabi_dmul>
 80132c8:	4602      	mov	r2, r0
 80132ca:	460b      	mov	r3, r1
 80132cc:	a14c      	add	r1, pc, #304	; (adr r1, 8013400 <__ieee754_pow+0x398>)
 80132ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132d2:	f7ed f801 	bl	80002d8 <__aeabi_dsub>
 80132d6:	4622      	mov	r2, r4
 80132d8:	462b      	mov	r3, r5
 80132da:	f7ed f9b5 	bl	8000648 <__aeabi_dmul>
 80132de:	4602      	mov	r2, r0
 80132e0:	460b      	mov	r3, r1
 80132e2:	2000      	movs	r0, #0
 80132e4:	4950      	ldr	r1, [pc, #320]	; (8013428 <__ieee754_pow+0x3c0>)
 80132e6:	f7ec fff7 	bl	80002d8 <__aeabi_dsub>
 80132ea:	4622      	mov	r2, r4
 80132ec:	462b      	mov	r3, r5
 80132ee:	4680      	mov	r8, r0
 80132f0:	4689      	mov	r9, r1
 80132f2:	4620      	mov	r0, r4
 80132f4:	4629      	mov	r1, r5
 80132f6:	f7ed f9a7 	bl	8000648 <__aeabi_dmul>
 80132fa:	4602      	mov	r2, r0
 80132fc:	460b      	mov	r3, r1
 80132fe:	4640      	mov	r0, r8
 8013300:	4649      	mov	r1, r9
 8013302:	f7ed f9a1 	bl	8000648 <__aeabi_dmul>
 8013306:	a340      	add	r3, pc, #256	; (adr r3, 8013408 <__ieee754_pow+0x3a0>)
 8013308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330c:	f7ed f99c 	bl	8000648 <__aeabi_dmul>
 8013310:	4602      	mov	r2, r0
 8013312:	460b      	mov	r3, r1
 8013314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013318:	f7ec ffde 	bl	80002d8 <__aeabi_dsub>
 801331c:	4602      	mov	r2, r0
 801331e:	460b      	mov	r3, r1
 8013320:	4604      	mov	r4, r0
 8013322:	460d      	mov	r5, r1
 8013324:	4630      	mov	r0, r6
 8013326:	4639      	mov	r1, r7
 8013328:	f7ec ffd8 	bl	80002dc <__adddf3>
 801332c:	2000      	movs	r0, #0
 801332e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013332:	4632      	mov	r2, r6
 8013334:	463b      	mov	r3, r7
 8013336:	f7ec ffcf 	bl	80002d8 <__aeabi_dsub>
 801333a:	4602      	mov	r2, r0
 801333c:	460b      	mov	r3, r1
 801333e:	4620      	mov	r0, r4
 8013340:	4629      	mov	r1, r5
 8013342:	f7ec ffc9 	bl	80002d8 <__aeabi_dsub>
 8013346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013348:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801334c:	4313      	orrs	r3, r2
 801334e:	4606      	mov	r6, r0
 8013350:	460f      	mov	r7, r1
 8013352:	f040 81eb 	bne.w	801372c <__ieee754_pow+0x6c4>
 8013356:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013410 <__ieee754_pow+0x3a8>
 801335a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801335e:	2400      	movs	r4, #0
 8013360:	4622      	mov	r2, r4
 8013362:	462b      	mov	r3, r5
 8013364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013368:	ed8d 7b02 	vstr	d7, [sp, #8]
 801336c:	f7ec ffb4 	bl	80002d8 <__aeabi_dsub>
 8013370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013374:	f7ed f968 	bl	8000648 <__aeabi_dmul>
 8013378:	e9dd 2300 	ldrd	r2, r3, [sp]
 801337c:	4680      	mov	r8, r0
 801337e:	4689      	mov	r9, r1
 8013380:	4630      	mov	r0, r6
 8013382:	4639      	mov	r1, r7
 8013384:	f7ed f960 	bl	8000648 <__aeabi_dmul>
 8013388:	4602      	mov	r2, r0
 801338a:	460b      	mov	r3, r1
 801338c:	4640      	mov	r0, r8
 801338e:	4649      	mov	r1, r9
 8013390:	f7ec ffa4 	bl	80002dc <__adddf3>
 8013394:	4622      	mov	r2, r4
 8013396:	462b      	mov	r3, r5
 8013398:	4680      	mov	r8, r0
 801339a:	4689      	mov	r9, r1
 801339c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80133a0:	f7ed f952 	bl	8000648 <__aeabi_dmul>
 80133a4:	460b      	mov	r3, r1
 80133a6:	4604      	mov	r4, r0
 80133a8:	460d      	mov	r5, r1
 80133aa:	4602      	mov	r2, r0
 80133ac:	4649      	mov	r1, r9
 80133ae:	4640      	mov	r0, r8
 80133b0:	e9cd 4500 	strd	r4, r5, [sp]
 80133b4:	f7ec ff92 	bl	80002dc <__adddf3>
 80133b8:	4b1c      	ldr	r3, [pc, #112]	; (801342c <__ieee754_pow+0x3c4>)
 80133ba:	4299      	cmp	r1, r3
 80133bc:	4606      	mov	r6, r0
 80133be:	460f      	mov	r7, r1
 80133c0:	468b      	mov	fp, r1
 80133c2:	f340 82f7 	ble.w	80139b4 <__ieee754_pow+0x94c>
 80133c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80133ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80133ce:	4303      	orrs	r3, r0
 80133d0:	f000 81ea 	beq.w	80137a8 <__ieee754_pow+0x740>
 80133d4:	a310      	add	r3, pc, #64	; (adr r3, 8013418 <__ieee754_pow+0x3b0>)
 80133d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133de:	f7ed f933 	bl	8000648 <__aeabi_dmul>
 80133e2:	a30d      	add	r3, pc, #52	; (adr r3, 8013418 <__ieee754_pow+0x3b0>)
 80133e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e8:	e6d5      	b.n	8013196 <__ieee754_pow+0x12e>
 80133ea:	bf00      	nop
 80133ec:	f3af 8000 	nop.w
 80133f0:	60000000 	.word	0x60000000
 80133f4:	3ff71547 	.word	0x3ff71547
 80133f8:	f85ddf44 	.word	0xf85ddf44
 80133fc:	3e54ae0b 	.word	0x3e54ae0b
 8013400:	55555555 	.word	0x55555555
 8013404:	3fd55555 	.word	0x3fd55555
 8013408:	652b82fe 	.word	0x652b82fe
 801340c:	3ff71547 	.word	0x3ff71547
 8013410:	00000000 	.word	0x00000000
 8013414:	bff00000 	.word	0xbff00000
 8013418:	8800759c 	.word	0x8800759c
 801341c:	7e37e43c 	.word	0x7e37e43c
 8013420:	3ff00000 	.word	0x3ff00000
 8013424:	3fd00000 	.word	0x3fd00000
 8013428:	3fe00000 	.word	0x3fe00000
 801342c:	408fffff 	.word	0x408fffff
 8013430:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013434:	f04f 0200 	mov.w	r2, #0
 8013438:	da05      	bge.n	8013446 <__ieee754_pow+0x3de>
 801343a:	4bd3      	ldr	r3, [pc, #844]	; (8013788 <__ieee754_pow+0x720>)
 801343c:	f7ed f904 	bl	8000648 <__aeabi_dmul>
 8013440:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013444:	460c      	mov	r4, r1
 8013446:	1523      	asrs	r3, r4, #20
 8013448:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801344c:	4413      	add	r3, r2
 801344e:	9309      	str	r3, [sp, #36]	; 0x24
 8013450:	4bce      	ldr	r3, [pc, #824]	; (801378c <__ieee754_pow+0x724>)
 8013452:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013456:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801345a:	429c      	cmp	r4, r3
 801345c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013460:	dd08      	ble.n	8013474 <__ieee754_pow+0x40c>
 8013462:	4bcb      	ldr	r3, [pc, #812]	; (8013790 <__ieee754_pow+0x728>)
 8013464:	429c      	cmp	r4, r3
 8013466:	f340 815e 	ble.w	8013726 <__ieee754_pow+0x6be>
 801346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801346c:	3301      	adds	r3, #1
 801346e:	9309      	str	r3, [sp, #36]	; 0x24
 8013470:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013474:	f04f 0a00 	mov.w	sl, #0
 8013478:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801347c:	930c      	str	r3, [sp, #48]	; 0x30
 801347e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013480:	4bc4      	ldr	r3, [pc, #784]	; (8013794 <__ieee754_pow+0x72c>)
 8013482:	4413      	add	r3, r2
 8013484:	ed93 7b00 	vldr	d7, [r3]
 8013488:	4629      	mov	r1, r5
 801348a:	ec53 2b17 	vmov	r2, r3, d7
 801348e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013492:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013496:	f7ec ff1f 	bl	80002d8 <__aeabi_dsub>
 801349a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801349e:	4606      	mov	r6, r0
 80134a0:	460f      	mov	r7, r1
 80134a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134a6:	f7ec ff19 	bl	80002dc <__adddf3>
 80134aa:	4602      	mov	r2, r0
 80134ac:	460b      	mov	r3, r1
 80134ae:	2000      	movs	r0, #0
 80134b0:	49b9      	ldr	r1, [pc, #740]	; (8013798 <__ieee754_pow+0x730>)
 80134b2:	f7ed f9f3 	bl	800089c <__aeabi_ddiv>
 80134b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80134ba:	4602      	mov	r2, r0
 80134bc:	460b      	mov	r3, r1
 80134be:	4630      	mov	r0, r6
 80134c0:	4639      	mov	r1, r7
 80134c2:	f7ed f8c1 	bl	8000648 <__aeabi_dmul>
 80134c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80134ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80134d2:	2300      	movs	r3, #0
 80134d4:	9302      	str	r3, [sp, #8]
 80134d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80134da:	106d      	asrs	r5, r5, #1
 80134dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80134e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80134e4:	2200      	movs	r2, #0
 80134e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80134ea:	4640      	mov	r0, r8
 80134ec:	4649      	mov	r1, r9
 80134ee:	4614      	mov	r4, r2
 80134f0:	461d      	mov	r5, r3
 80134f2:	f7ed f8a9 	bl	8000648 <__aeabi_dmul>
 80134f6:	4602      	mov	r2, r0
 80134f8:	460b      	mov	r3, r1
 80134fa:	4630      	mov	r0, r6
 80134fc:	4639      	mov	r1, r7
 80134fe:	f7ec feeb 	bl	80002d8 <__aeabi_dsub>
 8013502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013506:	4606      	mov	r6, r0
 8013508:	460f      	mov	r7, r1
 801350a:	4620      	mov	r0, r4
 801350c:	4629      	mov	r1, r5
 801350e:	f7ec fee3 	bl	80002d8 <__aeabi_dsub>
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801351a:	f7ec fedd 	bl	80002d8 <__aeabi_dsub>
 801351e:	4642      	mov	r2, r8
 8013520:	464b      	mov	r3, r9
 8013522:	f7ed f891 	bl	8000648 <__aeabi_dmul>
 8013526:	4602      	mov	r2, r0
 8013528:	460b      	mov	r3, r1
 801352a:	4630      	mov	r0, r6
 801352c:	4639      	mov	r1, r7
 801352e:	f7ec fed3 	bl	80002d8 <__aeabi_dsub>
 8013532:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013536:	f7ed f887 	bl	8000648 <__aeabi_dmul>
 801353a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801353e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013542:	4610      	mov	r0, r2
 8013544:	4619      	mov	r1, r3
 8013546:	f7ed f87f 	bl	8000648 <__aeabi_dmul>
 801354a:	a37b      	add	r3, pc, #492	; (adr r3, 8013738 <__ieee754_pow+0x6d0>)
 801354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013550:	4604      	mov	r4, r0
 8013552:	460d      	mov	r5, r1
 8013554:	f7ed f878 	bl	8000648 <__aeabi_dmul>
 8013558:	a379      	add	r3, pc, #484	; (adr r3, 8013740 <__ieee754_pow+0x6d8>)
 801355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355e:	f7ec febd 	bl	80002dc <__adddf3>
 8013562:	4622      	mov	r2, r4
 8013564:	462b      	mov	r3, r5
 8013566:	f7ed f86f 	bl	8000648 <__aeabi_dmul>
 801356a:	a377      	add	r3, pc, #476	; (adr r3, 8013748 <__ieee754_pow+0x6e0>)
 801356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013570:	f7ec feb4 	bl	80002dc <__adddf3>
 8013574:	4622      	mov	r2, r4
 8013576:	462b      	mov	r3, r5
 8013578:	f7ed f866 	bl	8000648 <__aeabi_dmul>
 801357c:	a374      	add	r3, pc, #464	; (adr r3, 8013750 <__ieee754_pow+0x6e8>)
 801357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013582:	f7ec feab 	bl	80002dc <__adddf3>
 8013586:	4622      	mov	r2, r4
 8013588:	462b      	mov	r3, r5
 801358a:	f7ed f85d 	bl	8000648 <__aeabi_dmul>
 801358e:	a372      	add	r3, pc, #456	; (adr r3, 8013758 <__ieee754_pow+0x6f0>)
 8013590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013594:	f7ec fea2 	bl	80002dc <__adddf3>
 8013598:	4622      	mov	r2, r4
 801359a:	462b      	mov	r3, r5
 801359c:	f7ed f854 	bl	8000648 <__aeabi_dmul>
 80135a0:	a36f      	add	r3, pc, #444	; (adr r3, 8013760 <__ieee754_pow+0x6f8>)
 80135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a6:	f7ec fe99 	bl	80002dc <__adddf3>
 80135aa:	4622      	mov	r2, r4
 80135ac:	4606      	mov	r6, r0
 80135ae:	460f      	mov	r7, r1
 80135b0:	462b      	mov	r3, r5
 80135b2:	4620      	mov	r0, r4
 80135b4:	4629      	mov	r1, r5
 80135b6:	f7ed f847 	bl	8000648 <__aeabi_dmul>
 80135ba:	4602      	mov	r2, r0
 80135bc:	460b      	mov	r3, r1
 80135be:	4630      	mov	r0, r6
 80135c0:	4639      	mov	r1, r7
 80135c2:	f7ed f841 	bl	8000648 <__aeabi_dmul>
 80135c6:	4642      	mov	r2, r8
 80135c8:	4604      	mov	r4, r0
 80135ca:	460d      	mov	r5, r1
 80135cc:	464b      	mov	r3, r9
 80135ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80135d2:	f7ec fe83 	bl	80002dc <__adddf3>
 80135d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80135da:	f7ed f835 	bl	8000648 <__aeabi_dmul>
 80135de:	4622      	mov	r2, r4
 80135e0:	462b      	mov	r3, r5
 80135e2:	f7ec fe7b 	bl	80002dc <__adddf3>
 80135e6:	4642      	mov	r2, r8
 80135e8:	4606      	mov	r6, r0
 80135ea:	460f      	mov	r7, r1
 80135ec:	464b      	mov	r3, r9
 80135ee:	4640      	mov	r0, r8
 80135f0:	4649      	mov	r1, r9
 80135f2:	f7ed f829 	bl	8000648 <__aeabi_dmul>
 80135f6:	2200      	movs	r2, #0
 80135f8:	4b68      	ldr	r3, [pc, #416]	; (801379c <__ieee754_pow+0x734>)
 80135fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80135fe:	f7ec fe6d 	bl	80002dc <__adddf3>
 8013602:	4632      	mov	r2, r6
 8013604:	463b      	mov	r3, r7
 8013606:	f7ec fe69 	bl	80002dc <__adddf3>
 801360a:	9802      	ldr	r0, [sp, #8]
 801360c:	460d      	mov	r5, r1
 801360e:	4604      	mov	r4, r0
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	4640      	mov	r0, r8
 8013616:	4649      	mov	r1, r9
 8013618:	f7ed f816 	bl	8000648 <__aeabi_dmul>
 801361c:	2200      	movs	r2, #0
 801361e:	4680      	mov	r8, r0
 8013620:	4689      	mov	r9, r1
 8013622:	4b5e      	ldr	r3, [pc, #376]	; (801379c <__ieee754_pow+0x734>)
 8013624:	4620      	mov	r0, r4
 8013626:	4629      	mov	r1, r5
 8013628:	f7ec fe56 	bl	80002d8 <__aeabi_dsub>
 801362c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013630:	f7ec fe52 	bl	80002d8 <__aeabi_dsub>
 8013634:	4602      	mov	r2, r0
 8013636:	460b      	mov	r3, r1
 8013638:	4630      	mov	r0, r6
 801363a:	4639      	mov	r1, r7
 801363c:	f7ec fe4c 	bl	80002d8 <__aeabi_dsub>
 8013640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013644:	f7ed f800 	bl	8000648 <__aeabi_dmul>
 8013648:	4622      	mov	r2, r4
 801364a:	4606      	mov	r6, r0
 801364c:	460f      	mov	r7, r1
 801364e:	462b      	mov	r3, r5
 8013650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013654:	f7ec fff8 	bl	8000648 <__aeabi_dmul>
 8013658:	4602      	mov	r2, r0
 801365a:	460b      	mov	r3, r1
 801365c:	4630      	mov	r0, r6
 801365e:	4639      	mov	r1, r7
 8013660:	f7ec fe3c 	bl	80002dc <__adddf3>
 8013664:	4606      	mov	r6, r0
 8013666:	460f      	mov	r7, r1
 8013668:	4602      	mov	r2, r0
 801366a:	460b      	mov	r3, r1
 801366c:	4640      	mov	r0, r8
 801366e:	4649      	mov	r1, r9
 8013670:	f7ec fe34 	bl	80002dc <__adddf3>
 8013674:	9802      	ldr	r0, [sp, #8]
 8013676:	a33c      	add	r3, pc, #240	; (adr r3, 8013768 <__ieee754_pow+0x700>)
 8013678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367c:	4604      	mov	r4, r0
 801367e:	460d      	mov	r5, r1
 8013680:	f7ec ffe2 	bl	8000648 <__aeabi_dmul>
 8013684:	4642      	mov	r2, r8
 8013686:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801368a:	464b      	mov	r3, r9
 801368c:	4620      	mov	r0, r4
 801368e:	4629      	mov	r1, r5
 8013690:	f7ec fe22 	bl	80002d8 <__aeabi_dsub>
 8013694:	4602      	mov	r2, r0
 8013696:	460b      	mov	r3, r1
 8013698:	4630      	mov	r0, r6
 801369a:	4639      	mov	r1, r7
 801369c:	f7ec fe1c 	bl	80002d8 <__aeabi_dsub>
 80136a0:	a333      	add	r3, pc, #204	; (adr r3, 8013770 <__ieee754_pow+0x708>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	f7ec ffcf 	bl	8000648 <__aeabi_dmul>
 80136aa:	a333      	add	r3, pc, #204	; (adr r3, 8013778 <__ieee754_pow+0x710>)
 80136ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b0:	4606      	mov	r6, r0
 80136b2:	460f      	mov	r7, r1
 80136b4:	4620      	mov	r0, r4
 80136b6:	4629      	mov	r1, r5
 80136b8:	f7ec ffc6 	bl	8000648 <__aeabi_dmul>
 80136bc:	4602      	mov	r2, r0
 80136be:	460b      	mov	r3, r1
 80136c0:	4630      	mov	r0, r6
 80136c2:	4639      	mov	r1, r7
 80136c4:	f7ec fe0a 	bl	80002dc <__adddf3>
 80136c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80136ca:	4b35      	ldr	r3, [pc, #212]	; (80137a0 <__ieee754_pow+0x738>)
 80136cc:	4413      	add	r3, r2
 80136ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d2:	f7ec fe03 	bl	80002dc <__adddf3>
 80136d6:	4604      	mov	r4, r0
 80136d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136da:	460d      	mov	r5, r1
 80136dc:	f7ec ff4a 	bl	8000574 <__aeabi_i2d>
 80136e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80136e2:	4b30      	ldr	r3, [pc, #192]	; (80137a4 <__ieee754_pow+0x73c>)
 80136e4:	4413      	add	r3, r2
 80136e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136ea:	4606      	mov	r6, r0
 80136ec:	460f      	mov	r7, r1
 80136ee:	4622      	mov	r2, r4
 80136f0:	462b      	mov	r3, r5
 80136f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80136f6:	f7ec fdf1 	bl	80002dc <__adddf3>
 80136fa:	4642      	mov	r2, r8
 80136fc:	464b      	mov	r3, r9
 80136fe:	f7ec fded 	bl	80002dc <__adddf3>
 8013702:	4632      	mov	r2, r6
 8013704:	463b      	mov	r3, r7
 8013706:	f7ec fde9 	bl	80002dc <__adddf3>
 801370a:	9802      	ldr	r0, [sp, #8]
 801370c:	4632      	mov	r2, r6
 801370e:	463b      	mov	r3, r7
 8013710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013714:	f7ec fde0 	bl	80002d8 <__aeabi_dsub>
 8013718:	4642      	mov	r2, r8
 801371a:	464b      	mov	r3, r9
 801371c:	f7ec fddc 	bl	80002d8 <__aeabi_dsub>
 8013720:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013724:	e607      	b.n	8013336 <__ieee754_pow+0x2ce>
 8013726:	f04f 0a01 	mov.w	sl, #1
 801372a:	e6a5      	b.n	8013478 <__ieee754_pow+0x410>
 801372c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013780 <__ieee754_pow+0x718>
 8013730:	e613      	b.n	801335a <__ieee754_pow+0x2f2>
 8013732:	bf00      	nop
 8013734:	f3af 8000 	nop.w
 8013738:	4a454eef 	.word	0x4a454eef
 801373c:	3fca7e28 	.word	0x3fca7e28
 8013740:	93c9db65 	.word	0x93c9db65
 8013744:	3fcd864a 	.word	0x3fcd864a
 8013748:	a91d4101 	.word	0xa91d4101
 801374c:	3fd17460 	.word	0x3fd17460
 8013750:	518f264d 	.word	0x518f264d
 8013754:	3fd55555 	.word	0x3fd55555
 8013758:	db6fabff 	.word	0xdb6fabff
 801375c:	3fdb6db6 	.word	0x3fdb6db6
 8013760:	33333303 	.word	0x33333303
 8013764:	3fe33333 	.word	0x3fe33333
 8013768:	e0000000 	.word	0xe0000000
 801376c:	3feec709 	.word	0x3feec709
 8013770:	dc3a03fd 	.word	0xdc3a03fd
 8013774:	3feec709 	.word	0x3feec709
 8013778:	145b01f5 	.word	0x145b01f5
 801377c:	be3e2fe0 	.word	0xbe3e2fe0
 8013780:	00000000 	.word	0x00000000
 8013784:	3ff00000 	.word	0x3ff00000
 8013788:	43400000 	.word	0x43400000
 801378c:	0003988e 	.word	0x0003988e
 8013790:	000bb679 	.word	0x000bb679
 8013794:	08015550 	.word	0x08015550
 8013798:	3ff00000 	.word	0x3ff00000
 801379c:	40080000 	.word	0x40080000
 80137a0:	08015570 	.word	0x08015570
 80137a4:	08015560 	.word	0x08015560
 80137a8:	a3b4      	add	r3, pc, #720	; (adr r3, 8013a7c <__ieee754_pow+0xa14>)
 80137aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ae:	4640      	mov	r0, r8
 80137b0:	4649      	mov	r1, r9
 80137b2:	f7ec fd93 	bl	80002dc <__adddf3>
 80137b6:	4622      	mov	r2, r4
 80137b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137bc:	462b      	mov	r3, r5
 80137be:	4630      	mov	r0, r6
 80137c0:	4639      	mov	r1, r7
 80137c2:	f7ec fd89 	bl	80002d8 <__aeabi_dsub>
 80137c6:	4602      	mov	r2, r0
 80137c8:	460b      	mov	r3, r1
 80137ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80137ce:	f7ed f9cb 	bl	8000b68 <__aeabi_dcmpgt>
 80137d2:	2800      	cmp	r0, #0
 80137d4:	f47f adfe 	bne.w	80133d4 <__ieee754_pow+0x36c>
 80137d8:	4aa3      	ldr	r2, [pc, #652]	; (8013a68 <__ieee754_pow+0xa00>)
 80137da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80137de:	4293      	cmp	r3, r2
 80137e0:	f340 810a 	ble.w	80139f8 <__ieee754_pow+0x990>
 80137e4:	151b      	asrs	r3, r3, #20
 80137e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80137ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80137ee:	fa4a f303 	asr.w	r3, sl, r3
 80137f2:	445b      	add	r3, fp
 80137f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80137f8:	4e9c      	ldr	r6, [pc, #624]	; (8013a6c <__ieee754_pow+0xa04>)
 80137fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80137fe:	4116      	asrs	r6, r2
 8013800:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013804:	2000      	movs	r0, #0
 8013806:	ea23 0106 	bic.w	r1, r3, r6
 801380a:	f1c2 0214 	rsb	r2, r2, #20
 801380e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013812:	fa4a fa02 	asr.w	sl, sl, r2
 8013816:	f1bb 0f00 	cmp.w	fp, #0
 801381a:	4602      	mov	r2, r0
 801381c:	460b      	mov	r3, r1
 801381e:	4620      	mov	r0, r4
 8013820:	4629      	mov	r1, r5
 8013822:	bfb8      	it	lt
 8013824:	f1ca 0a00 	rsblt	sl, sl, #0
 8013828:	f7ec fd56 	bl	80002d8 <__aeabi_dsub>
 801382c:	e9cd 0100 	strd	r0, r1, [sp]
 8013830:	4642      	mov	r2, r8
 8013832:	464b      	mov	r3, r9
 8013834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013838:	f7ec fd50 	bl	80002dc <__adddf3>
 801383c:	2000      	movs	r0, #0
 801383e:	a378      	add	r3, pc, #480	; (adr r3, 8013a20 <__ieee754_pow+0x9b8>)
 8013840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013844:	4604      	mov	r4, r0
 8013846:	460d      	mov	r5, r1
 8013848:	f7ec fefe 	bl	8000648 <__aeabi_dmul>
 801384c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013850:	4606      	mov	r6, r0
 8013852:	460f      	mov	r7, r1
 8013854:	4620      	mov	r0, r4
 8013856:	4629      	mov	r1, r5
 8013858:	f7ec fd3e 	bl	80002d8 <__aeabi_dsub>
 801385c:	4602      	mov	r2, r0
 801385e:	460b      	mov	r3, r1
 8013860:	4640      	mov	r0, r8
 8013862:	4649      	mov	r1, r9
 8013864:	f7ec fd38 	bl	80002d8 <__aeabi_dsub>
 8013868:	a36f      	add	r3, pc, #444	; (adr r3, 8013a28 <__ieee754_pow+0x9c0>)
 801386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801386e:	f7ec feeb 	bl	8000648 <__aeabi_dmul>
 8013872:	a36f      	add	r3, pc, #444	; (adr r3, 8013a30 <__ieee754_pow+0x9c8>)
 8013874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013878:	4680      	mov	r8, r0
 801387a:	4689      	mov	r9, r1
 801387c:	4620      	mov	r0, r4
 801387e:	4629      	mov	r1, r5
 8013880:	f7ec fee2 	bl	8000648 <__aeabi_dmul>
 8013884:	4602      	mov	r2, r0
 8013886:	460b      	mov	r3, r1
 8013888:	4640      	mov	r0, r8
 801388a:	4649      	mov	r1, r9
 801388c:	f7ec fd26 	bl	80002dc <__adddf3>
 8013890:	4604      	mov	r4, r0
 8013892:	460d      	mov	r5, r1
 8013894:	4602      	mov	r2, r0
 8013896:	460b      	mov	r3, r1
 8013898:	4630      	mov	r0, r6
 801389a:	4639      	mov	r1, r7
 801389c:	f7ec fd1e 	bl	80002dc <__adddf3>
 80138a0:	4632      	mov	r2, r6
 80138a2:	463b      	mov	r3, r7
 80138a4:	4680      	mov	r8, r0
 80138a6:	4689      	mov	r9, r1
 80138a8:	f7ec fd16 	bl	80002d8 <__aeabi_dsub>
 80138ac:	4602      	mov	r2, r0
 80138ae:	460b      	mov	r3, r1
 80138b0:	4620      	mov	r0, r4
 80138b2:	4629      	mov	r1, r5
 80138b4:	f7ec fd10 	bl	80002d8 <__aeabi_dsub>
 80138b8:	4642      	mov	r2, r8
 80138ba:	4606      	mov	r6, r0
 80138bc:	460f      	mov	r7, r1
 80138be:	464b      	mov	r3, r9
 80138c0:	4640      	mov	r0, r8
 80138c2:	4649      	mov	r1, r9
 80138c4:	f7ec fec0 	bl	8000648 <__aeabi_dmul>
 80138c8:	a35b      	add	r3, pc, #364	; (adr r3, 8013a38 <__ieee754_pow+0x9d0>)
 80138ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ce:	4604      	mov	r4, r0
 80138d0:	460d      	mov	r5, r1
 80138d2:	f7ec feb9 	bl	8000648 <__aeabi_dmul>
 80138d6:	a35a      	add	r3, pc, #360	; (adr r3, 8013a40 <__ieee754_pow+0x9d8>)
 80138d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138dc:	f7ec fcfc 	bl	80002d8 <__aeabi_dsub>
 80138e0:	4622      	mov	r2, r4
 80138e2:	462b      	mov	r3, r5
 80138e4:	f7ec feb0 	bl	8000648 <__aeabi_dmul>
 80138e8:	a357      	add	r3, pc, #348	; (adr r3, 8013a48 <__ieee754_pow+0x9e0>)
 80138ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ee:	f7ec fcf5 	bl	80002dc <__adddf3>
 80138f2:	4622      	mov	r2, r4
 80138f4:	462b      	mov	r3, r5
 80138f6:	f7ec fea7 	bl	8000648 <__aeabi_dmul>
 80138fa:	a355      	add	r3, pc, #340	; (adr r3, 8013a50 <__ieee754_pow+0x9e8>)
 80138fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013900:	f7ec fcea 	bl	80002d8 <__aeabi_dsub>
 8013904:	4622      	mov	r2, r4
 8013906:	462b      	mov	r3, r5
 8013908:	f7ec fe9e 	bl	8000648 <__aeabi_dmul>
 801390c:	a352      	add	r3, pc, #328	; (adr r3, 8013a58 <__ieee754_pow+0x9f0>)
 801390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013912:	f7ec fce3 	bl	80002dc <__adddf3>
 8013916:	4622      	mov	r2, r4
 8013918:	462b      	mov	r3, r5
 801391a:	f7ec fe95 	bl	8000648 <__aeabi_dmul>
 801391e:	4602      	mov	r2, r0
 8013920:	460b      	mov	r3, r1
 8013922:	4640      	mov	r0, r8
 8013924:	4649      	mov	r1, r9
 8013926:	f7ec fcd7 	bl	80002d8 <__aeabi_dsub>
 801392a:	4604      	mov	r4, r0
 801392c:	460d      	mov	r5, r1
 801392e:	4602      	mov	r2, r0
 8013930:	460b      	mov	r3, r1
 8013932:	4640      	mov	r0, r8
 8013934:	4649      	mov	r1, r9
 8013936:	f7ec fe87 	bl	8000648 <__aeabi_dmul>
 801393a:	2200      	movs	r2, #0
 801393c:	e9cd 0100 	strd	r0, r1, [sp]
 8013940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013944:	4620      	mov	r0, r4
 8013946:	4629      	mov	r1, r5
 8013948:	f7ec fcc6 	bl	80002d8 <__aeabi_dsub>
 801394c:	4602      	mov	r2, r0
 801394e:	460b      	mov	r3, r1
 8013950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013954:	f7ec ffa2 	bl	800089c <__aeabi_ddiv>
 8013958:	4632      	mov	r2, r6
 801395a:	4604      	mov	r4, r0
 801395c:	460d      	mov	r5, r1
 801395e:	463b      	mov	r3, r7
 8013960:	4640      	mov	r0, r8
 8013962:	4649      	mov	r1, r9
 8013964:	f7ec fe70 	bl	8000648 <__aeabi_dmul>
 8013968:	4632      	mov	r2, r6
 801396a:	463b      	mov	r3, r7
 801396c:	f7ec fcb6 	bl	80002dc <__adddf3>
 8013970:	4602      	mov	r2, r0
 8013972:	460b      	mov	r3, r1
 8013974:	4620      	mov	r0, r4
 8013976:	4629      	mov	r1, r5
 8013978:	f7ec fcae 	bl	80002d8 <__aeabi_dsub>
 801397c:	4642      	mov	r2, r8
 801397e:	464b      	mov	r3, r9
 8013980:	f7ec fcaa 	bl	80002d8 <__aeabi_dsub>
 8013984:	4602      	mov	r2, r0
 8013986:	460b      	mov	r3, r1
 8013988:	2000      	movs	r0, #0
 801398a:	4939      	ldr	r1, [pc, #228]	; (8013a70 <__ieee754_pow+0xa08>)
 801398c:	f7ec fca4 	bl	80002d8 <__aeabi_dsub>
 8013990:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013994:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	da2f      	bge.n	80139fe <__ieee754_pow+0x996>
 801399e:	4650      	mov	r0, sl
 80139a0:	ec43 2b10 	vmov	d0, r2, r3
 80139a4:	f000 f9c0 	bl	8013d28 <scalbn>
 80139a8:	ec51 0b10 	vmov	r0, r1, d0
 80139ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139b0:	f7ff bbf1 	b.w	8013196 <__ieee754_pow+0x12e>
 80139b4:	4b2f      	ldr	r3, [pc, #188]	; (8013a74 <__ieee754_pow+0xa0c>)
 80139b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80139ba:	429e      	cmp	r6, r3
 80139bc:	f77f af0c 	ble.w	80137d8 <__ieee754_pow+0x770>
 80139c0:	4b2d      	ldr	r3, [pc, #180]	; (8013a78 <__ieee754_pow+0xa10>)
 80139c2:	440b      	add	r3, r1
 80139c4:	4303      	orrs	r3, r0
 80139c6:	d00b      	beq.n	80139e0 <__ieee754_pow+0x978>
 80139c8:	a325      	add	r3, pc, #148	; (adr r3, 8013a60 <__ieee754_pow+0x9f8>)
 80139ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139d2:	f7ec fe39 	bl	8000648 <__aeabi_dmul>
 80139d6:	a322      	add	r3, pc, #136	; (adr r3, 8013a60 <__ieee754_pow+0x9f8>)
 80139d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139dc:	f7ff bbdb 	b.w	8013196 <__ieee754_pow+0x12e>
 80139e0:	4622      	mov	r2, r4
 80139e2:	462b      	mov	r3, r5
 80139e4:	f7ec fc78 	bl	80002d8 <__aeabi_dsub>
 80139e8:	4642      	mov	r2, r8
 80139ea:	464b      	mov	r3, r9
 80139ec:	f7ed f8b2 	bl	8000b54 <__aeabi_dcmpge>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	f43f aef1 	beq.w	80137d8 <__ieee754_pow+0x770>
 80139f6:	e7e7      	b.n	80139c8 <__ieee754_pow+0x960>
 80139f8:	f04f 0a00 	mov.w	sl, #0
 80139fc:	e718      	b.n	8013830 <__ieee754_pow+0x7c8>
 80139fe:	4621      	mov	r1, r4
 8013a00:	e7d4      	b.n	80139ac <__ieee754_pow+0x944>
 8013a02:	2000      	movs	r0, #0
 8013a04:	491a      	ldr	r1, [pc, #104]	; (8013a70 <__ieee754_pow+0xa08>)
 8013a06:	f7ff bb8f 	b.w	8013128 <__ieee754_pow+0xc0>
 8013a0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a0e:	f7ff bb8b 	b.w	8013128 <__ieee754_pow+0xc0>
 8013a12:	4630      	mov	r0, r6
 8013a14:	4639      	mov	r1, r7
 8013a16:	f7ff bb87 	b.w	8013128 <__ieee754_pow+0xc0>
 8013a1a:	4693      	mov	fp, r2
 8013a1c:	f7ff bb98 	b.w	8013150 <__ieee754_pow+0xe8>
 8013a20:	00000000 	.word	0x00000000
 8013a24:	3fe62e43 	.word	0x3fe62e43
 8013a28:	fefa39ef 	.word	0xfefa39ef
 8013a2c:	3fe62e42 	.word	0x3fe62e42
 8013a30:	0ca86c39 	.word	0x0ca86c39
 8013a34:	be205c61 	.word	0xbe205c61
 8013a38:	72bea4d0 	.word	0x72bea4d0
 8013a3c:	3e663769 	.word	0x3e663769
 8013a40:	c5d26bf1 	.word	0xc5d26bf1
 8013a44:	3ebbbd41 	.word	0x3ebbbd41
 8013a48:	af25de2c 	.word	0xaf25de2c
 8013a4c:	3f11566a 	.word	0x3f11566a
 8013a50:	16bebd93 	.word	0x16bebd93
 8013a54:	3f66c16c 	.word	0x3f66c16c
 8013a58:	5555553e 	.word	0x5555553e
 8013a5c:	3fc55555 	.word	0x3fc55555
 8013a60:	c2f8f359 	.word	0xc2f8f359
 8013a64:	01a56e1f 	.word	0x01a56e1f
 8013a68:	3fe00000 	.word	0x3fe00000
 8013a6c:	000fffff 	.word	0x000fffff
 8013a70:	3ff00000 	.word	0x3ff00000
 8013a74:	4090cbff 	.word	0x4090cbff
 8013a78:	3f6f3400 	.word	0x3f6f3400
 8013a7c:	652b82fe 	.word	0x652b82fe
 8013a80:	3c971547 	.word	0x3c971547

08013a84 <__ieee754_sqrt>:
 8013a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a88:	4955      	ldr	r1, [pc, #340]	; (8013be0 <__ieee754_sqrt+0x15c>)
 8013a8a:	ec55 4b10 	vmov	r4, r5, d0
 8013a8e:	43a9      	bics	r1, r5
 8013a90:	462b      	mov	r3, r5
 8013a92:	462a      	mov	r2, r5
 8013a94:	d112      	bne.n	8013abc <__ieee754_sqrt+0x38>
 8013a96:	ee10 2a10 	vmov	r2, s0
 8013a9a:	ee10 0a10 	vmov	r0, s0
 8013a9e:	4629      	mov	r1, r5
 8013aa0:	f7ec fdd2 	bl	8000648 <__aeabi_dmul>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	4629      	mov	r1, r5
 8013aac:	f7ec fc16 	bl	80002dc <__adddf3>
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	460d      	mov	r5, r1
 8013ab4:	ec45 4b10 	vmov	d0, r4, r5
 8013ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013abc:	2d00      	cmp	r5, #0
 8013abe:	ee10 0a10 	vmov	r0, s0
 8013ac2:	4621      	mov	r1, r4
 8013ac4:	dc0f      	bgt.n	8013ae6 <__ieee754_sqrt+0x62>
 8013ac6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013aca:	4330      	orrs	r0, r6
 8013acc:	d0f2      	beq.n	8013ab4 <__ieee754_sqrt+0x30>
 8013ace:	b155      	cbz	r5, 8013ae6 <__ieee754_sqrt+0x62>
 8013ad0:	ee10 2a10 	vmov	r2, s0
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	f7ec fbfe 	bl	80002d8 <__aeabi_dsub>
 8013adc:	4602      	mov	r2, r0
 8013ade:	460b      	mov	r3, r1
 8013ae0:	f7ec fedc 	bl	800089c <__aeabi_ddiv>
 8013ae4:	e7e4      	b.n	8013ab0 <__ieee754_sqrt+0x2c>
 8013ae6:	151b      	asrs	r3, r3, #20
 8013ae8:	d073      	beq.n	8013bd2 <__ieee754_sqrt+0x14e>
 8013aea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013aee:	07dd      	lsls	r5, r3, #31
 8013af0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013af4:	bf48      	it	mi
 8013af6:	0fc8      	lsrmi	r0, r1, #31
 8013af8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013afc:	bf44      	itt	mi
 8013afe:	0049      	lslmi	r1, r1, #1
 8013b00:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013b04:	2500      	movs	r5, #0
 8013b06:	1058      	asrs	r0, r3, #1
 8013b08:	0fcb      	lsrs	r3, r1, #31
 8013b0a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8013b0e:	0049      	lsls	r1, r1, #1
 8013b10:	2316      	movs	r3, #22
 8013b12:	462c      	mov	r4, r5
 8013b14:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013b18:	19a7      	adds	r7, r4, r6
 8013b1a:	4297      	cmp	r7, r2
 8013b1c:	bfde      	ittt	le
 8013b1e:	19bc      	addle	r4, r7, r6
 8013b20:	1bd2      	suble	r2, r2, r7
 8013b22:	19ad      	addle	r5, r5, r6
 8013b24:	0fcf      	lsrs	r7, r1, #31
 8013b26:	3b01      	subs	r3, #1
 8013b28:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8013b2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013b30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013b34:	d1f0      	bne.n	8013b18 <__ieee754_sqrt+0x94>
 8013b36:	f04f 0c20 	mov.w	ip, #32
 8013b3a:	469e      	mov	lr, r3
 8013b3c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013b40:	42a2      	cmp	r2, r4
 8013b42:	eb06 070e 	add.w	r7, r6, lr
 8013b46:	dc02      	bgt.n	8013b4e <__ieee754_sqrt+0xca>
 8013b48:	d112      	bne.n	8013b70 <__ieee754_sqrt+0xec>
 8013b4a:	428f      	cmp	r7, r1
 8013b4c:	d810      	bhi.n	8013b70 <__ieee754_sqrt+0xec>
 8013b4e:	2f00      	cmp	r7, #0
 8013b50:	eb07 0e06 	add.w	lr, r7, r6
 8013b54:	da42      	bge.n	8013bdc <__ieee754_sqrt+0x158>
 8013b56:	f1be 0f00 	cmp.w	lr, #0
 8013b5a:	db3f      	blt.n	8013bdc <__ieee754_sqrt+0x158>
 8013b5c:	f104 0801 	add.w	r8, r4, #1
 8013b60:	1b12      	subs	r2, r2, r4
 8013b62:	428f      	cmp	r7, r1
 8013b64:	bf88      	it	hi
 8013b66:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013b6a:	1bc9      	subs	r1, r1, r7
 8013b6c:	4433      	add	r3, r6
 8013b6e:	4644      	mov	r4, r8
 8013b70:	0052      	lsls	r2, r2, #1
 8013b72:	f1bc 0c01 	subs.w	ip, ip, #1
 8013b76:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013b7a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013b7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013b82:	d1dd      	bne.n	8013b40 <__ieee754_sqrt+0xbc>
 8013b84:	430a      	orrs	r2, r1
 8013b86:	d006      	beq.n	8013b96 <__ieee754_sqrt+0x112>
 8013b88:	1c5c      	adds	r4, r3, #1
 8013b8a:	bf13      	iteet	ne
 8013b8c:	3301      	addne	r3, #1
 8013b8e:	3501      	addeq	r5, #1
 8013b90:	4663      	moveq	r3, ip
 8013b92:	f023 0301 	bicne.w	r3, r3, #1
 8013b96:	106a      	asrs	r2, r5, #1
 8013b98:	085b      	lsrs	r3, r3, #1
 8013b9a:	07e9      	lsls	r1, r5, #31
 8013b9c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013ba0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013ba4:	bf48      	it	mi
 8013ba6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013baa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013bae:	461c      	mov	r4, r3
 8013bb0:	e780      	b.n	8013ab4 <__ieee754_sqrt+0x30>
 8013bb2:	0aca      	lsrs	r2, r1, #11
 8013bb4:	3815      	subs	r0, #21
 8013bb6:	0549      	lsls	r1, r1, #21
 8013bb8:	2a00      	cmp	r2, #0
 8013bba:	d0fa      	beq.n	8013bb2 <__ieee754_sqrt+0x12e>
 8013bbc:	02d6      	lsls	r6, r2, #11
 8013bbe:	d50a      	bpl.n	8013bd6 <__ieee754_sqrt+0x152>
 8013bc0:	f1c3 0420 	rsb	r4, r3, #32
 8013bc4:	fa21 f404 	lsr.w	r4, r1, r4
 8013bc8:	1e5d      	subs	r5, r3, #1
 8013bca:	4099      	lsls	r1, r3
 8013bcc:	4322      	orrs	r2, r4
 8013bce:	1b43      	subs	r3, r0, r5
 8013bd0:	e78b      	b.n	8013aea <__ieee754_sqrt+0x66>
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	e7f0      	b.n	8013bb8 <__ieee754_sqrt+0x134>
 8013bd6:	0052      	lsls	r2, r2, #1
 8013bd8:	3301      	adds	r3, #1
 8013bda:	e7ef      	b.n	8013bbc <__ieee754_sqrt+0x138>
 8013bdc:	46a0      	mov	r8, r4
 8013bde:	e7bf      	b.n	8013b60 <__ieee754_sqrt+0xdc>
 8013be0:	7ff00000 	.word	0x7ff00000

08013be4 <fabs>:
 8013be4:	ec51 0b10 	vmov	r0, r1, d0
 8013be8:	ee10 2a10 	vmov	r2, s0
 8013bec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013bf0:	ec43 2b10 	vmov	d0, r2, r3
 8013bf4:	4770      	bx	lr

08013bf6 <finite>:
 8013bf6:	ee10 3a90 	vmov	r3, s1
 8013bfa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8013bfe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013c02:	0fc0      	lsrs	r0, r0, #31
 8013c04:	4770      	bx	lr

08013c06 <matherr>:
 8013c06:	2000      	movs	r0, #0
 8013c08:	4770      	bx	lr
 8013c0a:	0000      	movs	r0, r0
 8013c0c:	0000      	movs	r0, r0
	...

08013c10 <nan>:
 8013c10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013c18 <nan+0x8>
 8013c14:	4770      	bx	lr
 8013c16:	bf00      	nop
 8013c18:	00000000 	.word	0x00000000
 8013c1c:	7ff80000 	.word	0x7ff80000

08013c20 <rint>:
 8013c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c22:	ec51 0b10 	vmov	r0, r1, d0
 8013c26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013c2a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013c2e:	2e13      	cmp	r6, #19
 8013c30:	460b      	mov	r3, r1
 8013c32:	ee10 4a10 	vmov	r4, s0
 8013c36:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013c3a:	dc56      	bgt.n	8013cea <rint+0xca>
 8013c3c:	2e00      	cmp	r6, #0
 8013c3e:	da2b      	bge.n	8013c98 <rint+0x78>
 8013c40:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8013c44:	4302      	orrs	r2, r0
 8013c46:	d023      	beq.n	8013c90 <rint+0x70>
 8013c48:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013c4c:	4302      	orrs	r2, r0
 8013c4e:	4254      	negs	r4, r2
 8013c50:	4314      	orrs	r4, r2
 8013c52:	0c4b      	lsrs	r3, r1, #17
 8013c54:	0b24      	lsrs	r4, r4, #12
 8013c56:	045b      	lsls	r3, r3, #17
 8013c58:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013c5c:	ea44 0103 	orr.w	r1, r4, r3
 8013c60:	460b      	mov	r3, r1
 8013c62:	492f      	ldr	r1, [pc, #188]	; (8013d20 <rint+0x100>)
 8013c64:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013c68:	e9d1 6700 	ldrd	r6, r7, [r1]
 8013c6c:	4602      	mov	r2, r0
 8013c6e:	4639      	mov	r1, r7
 8013c70:	4630      	mov	r0, r6
 8013c72:	f7ec fb33 	bl	80002dc <__adddf3>
 8013c76:	e9cd 0100 	strd	r0, r1, [sp]
 8013c7a:	463b      	mov	r3, r7
 8013c7c:	4632      	mov	r2, r6
 8013c7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c82:	f7ec fb29 	bl	80002d8 <__aeabi_dsub>
 8013c86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013c8a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013c8e:	4639      	mov	r1, r7
 8013c90:	ec41 0b10 	vmov	d0, r0, r1
 8013c94:	b003      	add	sp, #12
 8013c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c98:	4a22      	ldr	r2, [pc, #136]	; (8013d24 <rint+0x104>)
 8013c9a:	4132      	asrs	r2, r6
 8013c9c:	ea01 0702 	and.w	r7, r1, r2
 8013ca0:	4307      	orrs	r7, r0
 8013ca2:	d0f5      	beq.n	8013c90 <rint+0x70>
 8013ca4:	0852      	lsrs	r2, r2, #1
 8013ca6:	4011      	ands	r1, r2
 8013ca8:	430c      	orrs	r4, r1
 8013caa:	d00b      	beq.n	8013cc4 <rint+0xa4>
 8013cac:	ea23 0202 	bic.w	r2, r3, r2
 8013cb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013cb4:	2e13      	cmp	r6, #19
 8013cb6:	fa43 f306 	asr.w	r3, r3, r6
 8013cba:	bf0c      	ite	eq
 8013cbc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013cc0:	2400      	movne	r4, #0
 8013cc2:	4313      	orrs	r3, r2
 8013cc4:	4916      	ldr	r1, [pc, #88]	; (8013d20 <rint+0x100>)
 8013cc6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8013cca:	4622      	mov	r2, r4
 8013ccc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	4629      	mov	r1, r5
 8013cd4:	f7ec fb02 	bl	80002dc <__adddf3>
 8013cd8:	e9cd 0100 	strd	r0, r1, [sp]
 8013cdc:	4622      	mov	r2, r4
 8013cde:	462b      	mov	r3, r5
 8013ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ce4:	f7ec faf8 	bl	80002d8 <__aeabi_dsub>
 8013ce8:	e7d2      	b.n	8013c90 <rint+0x70>
 8013cea:	2e33      	cmp	r6, #51	; 0x33
 8013cec:	dd07      	ble.n	8013cfe <rint+0xde>
 8013cee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013cf2:	d1cd      	bne.n	8013c90 <rint+0x70>
 8013cf4:	ee10 2a10 	vmov	r2, s0
 8013cf8:	f7ec faf0 	bl	80002dc <__adddf3>
 8013cfc:	e7c8      	b.n	8013c90 <rint+0x70>
 8013cfe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8013d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d06:	40f2      	lsrs	r2, r6
 8013d08:	4210      	tst	r0, r2
 8013d0a:	d0c1      	beq.n	8013c90 <rint+0x70>
 8013d0c:	0852      	lsrs	r2, r2, #1
 8013d0e:	4210      	tst	r0, r2
 8013d10:	bf1f      	itttt	ne
 8013d12:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8013d16:	ea20 0202 	bicne.w	r2, r0, r2
 8013d1a:	4134      	asrne	r4, r6
 8013d1c:	4314      	orrne	r4, r2
 8013d1e:	e7d1      	b.n	8013cc4 <rint+0xa4>
 8013d20:	08015580 	.word	0x08015580
 8013d24:	000fffff 	.word	0x000fffff

08013d28 <scalbn>:
 8013d28:	b570      	push	{r4, r5, r6, lr}
 8013d2a:	ec55 4b10 	vmov	r4, r5, d0
 8013d2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013d32:	4606      	mov	r6, r0
 8013d34:	462b      	mov	r3, r5
 8013d36:	b9aa      	cbnz	r2, 8013d64 <scalbn+0x3c>
 8013d38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d3c:	4323      	orrs	r3, r4
 8013d3e:	d03b      	beq.n	8013db8 <scalbn+0x90>
 8013d40:	4b31      	ldr	r3, [pc, #196]	; (8013e08 <scalbn+0xe0>)
 8013d42:	4629      	mov	r1, r5
 8013d44:	2200      	movs	r2, #0
 8013d46:	ee10 0a10 	vmov	r0, s0
 8013d4a:	f7ec fc7d 	bl	8000648 <__aeabi_dmul>
 8013d4e:	4b2f      	ldr	r3, [pc, #188]	; (8013e0c <scalbn+0xe4>)
 8013d50:	429e      	cmp	r6, r3
 8013d52:	4604      	mov	r4, r0
 8013d54:	460d      	mov	r5, r1
 8013d56:	da12      	bge.n	8013d7e <scalbn+0x56>
 8013d58:	a327      	add	r3, pc, #156	; (adr r3, 8013df8 <scalbn+0xd0>)
 8013d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5e:	f7ec fc73 	bl	8000648 <__aeabi_dmul>
 8013d62:	e009      	b.n	8013d78 <scalbn+0x50>
 8013d64:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013d68:	428a      	cmp	r2, r1
 8013d6a:	d10c      	bne.n	8013d86 <scalbn+0x5e>
 8013d6c:	ee10 2a10 	vmov	r2, s0
 8013d70:	4620      	mov	r0, r4
 8013d72:	4629      	mov	r1, r5
 8013d74:	f7ec fab2 	bl	80002dc <__adddf3>
 8013d78:	4604      	mov	r4, r0
 8013d7a:	460d      	mov	r5, r1
 8013d7c:	e01c      	b.n	8013db8 <scalbn+0x90>
 8013d7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013d82:	460b      	mov	r3, r1
 8013d84:	3a36      	subs	r2, #54	; 0x36
 8013d86:	4432      	add	r2, r6
 8013d88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013d8c:	428a      	cmp	r2, r1
 8013d8e:	dd0b      	ble.n	8013da8 <scalbn+0x80>
 8013d90:	ec45 4b11 	vmov	d1, r4, r5
 8013d94:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013e00 <scalbn+0xd8>
 8013d98:	f000 f9f0 	bl	801417c <copysign>
 8013d9c:	a318      	add	r3, pc, #96	; (adr r3, 8013e00 <scalbn+0xd8>)
 8013d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da2:	ec51 0b10 	vmov	r0, r1, d0
 8013da6:	e7da      	b.n	8013d5e <scalbn+0x36>
 8013da8:	2a00      	cmp	r2, #0
 8013daa:	dd08      	ble.n	8013dbe <scalbn+0x96>
 8013dac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013db0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013db4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013db8:	ec45 4b10 	vmov	d0, r4, r5
 8013dbc:	bd70      	pop	{r4, r5, r6, pc}
 8013dbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013dc2:	da0d      	bge.n	8013de0 <scalbn+0xb8>
 8013dc4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013dc8:	429e      	cmp	r6, r3
 8013dca:	ec45 4b11 	vmov	d1, r4, r5
 8013dce:	dce1      	bgt.n	8013d94 <scalbn+0x6c>
 8013dd0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013df8 <scalbn+0xd0>
 8013dd4:	f000 f9d2 	bl	801417c <copysign>
 8013dd8:	a307      	add	r3, pc, #28	; (adr r3, 8013df8 <scalbn+0xd0>)
 8013dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dde:	e7e0      	b.n	8013da2 <scalbn+0x7a>
 8013de0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013de4:	3236      	adds	r2, #54	; 0x36
 8013de6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013dea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013dee:	4620      	mov	r0, r4
 8013df0:	4629      	mov	r1, r5
 8013df2:	2200      	movs	r2, #0
 8013df4:	4b06      	ldr	r3, [pc, #24]	; (8013e10 <scalbn+0xe8>)
 8013df6:	e7b2      	b.n	8013d5e <scalbn+0x36>
 8013df8:	c2f8f359 	.word	0xc2f8f359
 8013dfc:	01a56e1f 	.word	0x01a56e1f
 8013e00:	8800759c 	.word	0x8800759c
 8013e04:	7e37e43c 	.word	0x7e37e43c
 8013e08:	43500000 	.word	0x43500000
 8013e0c:	ffff3cb0 	.word	0xffff3cb0
 8013e10:	3c900000 	.word	0x3c900000
 8013e14:	00000000 	.word	0x00000000

08013e18 <__ieee754_log>:
 8013e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e1c:	ec51 0b10 	vmov	r0, r1, d0
 8013e20:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8013e24:	b087      	sub	sp, #28
 8013e26:	460d      	mov	r5, r1
 8013e28:	da27      	bge.n	8013e7a <__ieee754_log+0x62>
 8013e2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013e2e:	4303      	orrs	r3, r0
 8013e30:	ee10 2a10 	vmov	r2, s0
 8013e34:	d10a      	bne.n	8013e4c <__ieee754_log+0x34>
 8013e36:	49cc      	ldr	r1, [pc, #816]	; (8014168 <__ieee754_log+0x350>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	2000      	movs	r0, #0
 8013e3e:	f7ec fd2d 	bl	800089c <__aeabi_ddiv>
 8013e42:	ec41 0b10 	vmov	d0, r0, r1
 8013e46:	b007      	add	sp, #28
 8013e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e4c:	2900      	cmp	r1, #0
 8013e4e:	da05      	bge.n	8013e5c <__ieee754_log+0x44>
 8013e50:	460b      	mov	r3, r1
 8013e52:	f7ec fa41 	bl	80002d8 <__aeabi_dsub>
 8013e56:	2200      	movs	r2, #0
 8013e58:	2300      	movs	r3, #0
 8013e5a:	e7f0      	b.n	8013e3e <__ieee754_log+0x26>
 8013e5c:	4bc3      	ldr	r3, [pc, #780]	; (801416c <__ieee754_log+0x354>)
 8013e5e:	2200      	movs	r2, #0
 8013e60:	f7ec fbf2 	bl	8000648 <__aeabi_dmul>
 8013e64:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013e68:	460d      	mov	r5, r1
 8013e6a:	4ac1      	ldr	r2, [pc, #772]	; (8014170 <__ieee754_log+0x358>)
 8013e6c:	4295      	cmp	r5, r2
 8013e6e:	dd06      	ble.n	8013e7e <__ieee754_log+0x66>
 8013e70:	4602      	mov	r2, r0
 8013e72:	460b      	mov	r3, r1
 8013e74:	f7ec fa32 	bl	80002dc <__adddf3>
 8013e78:	e7e3      	b.n	8013e42 <__ieee754_log+0x2a>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	e7f5      	b.n	8013e6a <__ieee754_log+0x52>
 8013e7e:	152c      	asrs	r4, r5, #20
 8013e80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013e84:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013e88:	441c      	add	r4, r3
 8013e8a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8013e8e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8013e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013e96:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8013e9a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8013e9e:	ea42 0105 	orr.w	r1, r2, r5
 8013ea2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	4bb2      	ldr	r3, [pc, #712]	; (8014174 <__ieee754_log+0x35c>)
 8013eaa:	f7ec fa15 	bl	80002d8 <__aeabi_dsub>
 8013eae:	1cab      	adds	r3, r5, #2
 8013eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013eb4:	2b02      	cmp	r3, #2
 8013eb6:	4682      	mov	sl, r0
 8013eb8:	468b      	mov	fp, r1
 8013eba:	f04f 0200 	mov.w	r2, #0
 8013ebe:	dc53      	bgt.n	8013f68 <__ieee754_log+0x150>
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	f7ec fe29 	bl	8000b18 <__aeabi_dcmpeq>
 8013ec6:	b1d0      	cbz	r0, 8013efe <__ieee754_log+0xe6>
 8013ec8:	2c00      	cmp	r4, #0
 8013eca:	f000 8120 	beq.w	801410e <__ieee754_log+0x2f6>
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f7ec fb50 	bl	8000574 <__aeabi_i2d>
 8013ed4:	a390      	add	r3, pc, #576	; (adr r3, 8014118 <__ieee754_log+0x300>)
 8013ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eda:	4606      	mov	r6, r0
 8013edc:	460f      	mov	r7, r1
 8013ede:	f7ec fbb3 	bl	8000648 <__aeabi_dmul>
 8013ee2:	a38f      	add	r3, pc, #572	; (adr r3, 8014120 <__ieee754_log+0x308>)
 8013ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee8:	4604      	mov	r4, r0
 8013eea:	460d      	mov	r5, r1
 8013eec:	4630      	mov	r0, r6
 8013eee:	4639      	mov	r1, r7
 8013ef0:	f7ec fbaa 	bl	8000648 <__aeabi_dmul>
 8013ef4:	4602      	mov	r2, r0
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	4620      	mov	r0, r4
 8013efa:	4629      	mov	r1, r5
 8013efc:	e7ba      	b.n	8013e74 <__ieee754_log+0x5c>
 8013efe:	a38a      	add	r3, pc, #552	; (adr r3, 8014128 <__ieee754_log+0x310>)
 8013f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f04:	4650      	mov	r0, sl
 8013f06:	4659      	mov	r1, fp
 8013f08:	f7ec fb9e 	bl	8000648 <__aeabi_dmul>
 8013f0c:	4602      	mov	r2, r0
 8013f0e:	460b      	mov	r3, r1
 8013f10:	2000      	movs	r0, #0
 8013f12:	4999      	ldr	r1, [pc, #612]	; (8014178 <__ieee754_log+0x360>)
 8013f14:	f7ec f9e0 	bl	80002d8 <__aeabi_dsub>
 8013f18:	4652      	mov	r2, sl
 8013f1a:	4606      	mov	r6, r0
 8013f1c:	460f      	mov	r7, r1
 8013f1e:	465b      	mov	r3, fp
 8013f20:	4650      	mov	r0, sl
 8013f22:	4659      	mov	r1, fp
 8013f24:	f7ec fb90 	bl	8000648 <__aeabi_dmul>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	4639      	mov	r1, r7
 8013f30:	f7ec fb8a 	bl	8000648 <__aeabi_dmul>
 8013f34:	4606      	mov	r6, r0
 8013f36:	460f      	mov	r7, r1
 8013f38:	b914      	cbnz	r4, 8013f40 <__ieee754_log+0x128>
 8013f3a:	4632      	mov	r2, r6
 8013f3c:	463b      	mov	r3, r7
 8013f3e:	e0a0      	b.n	8014082 <__ieee754_log+0x26a>
 8013f40:	4620      	mov	r0, r4
 8013f42:	f7ec fb17 	bl	8000574 <__aeabi_i2d>
 8013f46:	a374      	add	r3, pc, #464	; (adr r3, 8014118 <__ieee754_log+0x300>)
 8013f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4c:	4680      	mov	r8, r0
 8013f4e:	4689      	mov	r9, r1
 8013f50:	f7ec fb7a 	bl	8000648 <__aeabi_dmul>
 8013f54:	a372      	add	r3, pc, #456	; (adr r3, 8014120 <__ieee754_log+0x308>)
 8013f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	460d      	mov	r5, r1
 8013f5e:	4640      	mov	r0, r8
 8013f60:	4649      	mov	r1, r9
 8013f62:	f7ec fb71 	bl	8000648 <__aeabi_dmul>
 8013f66:	e0a5      	b.n	80140b4 <__ieee754_log+0x29c>
 8013f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f6c:	f7ec f9b6 	bl	80002dc <__adddf3>
 8013f70:	4602      	mov	r2, r0
 8013f72:	460b      	mov	r3, r1
 8013f74:	4650      	mov	r0, sl
 8013f76:	4659      	mov	r1, fp
 8013f78:	f7ec fc90 	bl	800089c <__aeabi_ddiv>
 8013f7c:	e9cd 0100 	strd	r0, r1, [sp]
 8013f80:	4620      	mov	r0, r4
 8013f82:	f7ec faf7 	bl	8000574 <__aeabi_i2d>
 8013f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f8e:	4610      	mov	r0, r2
 8013f90:	4619      	mov	r1, r3
 8013f92:	f7ec fb59 	bl	8000648 <__aeabi_dmul>
 8013f96:	4602      	mov	r2, r0
 8013f98:	460b      	mov	r3, r1
 8013f9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f9e:	f7ec fb53 	bl	8000648 <__aeabi_dmul>
 8013fa2:	a363      	add	r3, pc, #396	; (adr r3, 8014130 <__ieee754_log+0x318>)
 8013fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa8:	4680      	mov	r8, r0
 8013faa:	4689      	mov	r9, r1
 8013fac:	f7ec fb4c 	bl	8000648 <__aeabi_dmul>
 8013fb0:	a361      	add	r3, pc, #388	; (adr r3, 8014138 <__ieee754_log+0x320>)
 8013fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb6:	f7ec f991 	bl	80002dc <__adddf3>
 8013fba:	4642      	mov	r2, r8
 8013fbc:	464b      	mov	r3, r9
 8013fbe:	f7ec fb43 	bl	8000648 <__aeabi_dmul>
 8013fc2:	a35f      	add	r3, pc, #380	; (adr r3, 8014140 <__ieee754_log+0x328>)
 8013fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc8:	f7ec f988 	bl	80002dc <__adddf3>
 8013fcc:	4642      	mov	r2, r8
 8013fce:	464b      	mov	r3, r9
 8013fd0:	f7ec fb3a 	bl	8000648 <__aeabi_dmul>
 8013fd4:	a35c      	add	r3, pc, #368	; (adr r3, 8014148 <__ieee754_log+0x330>)
 8013fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fda:	f7ec f97f 	bl	80002dc <__adddf3>
 8013fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fe2:	f7ec fb31 	bl	8000648 <__aeabi_dmul>
 8013fe6:	a35a      	add	r3, pc, #360	; (adr r3, 8014150 <__ieee754_log+0x338>)
 8013fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ff0:	4640      	mov	r0, r8
 8013ff2:	4649      	mov	r1, r9
 8013ff4:	f7ec fb28 	bl	8000648 <__aeabi_dmul>
 8013ff8:	a357      	add	r3, pc, #348	; (adr r3, 8014158 <__ieee754_log+0x340>)
 8013ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ffe:	f7ec f96d 	bl	80002dc <__adddf3>
 8014002:	4642      	mov	r2, r8
 8014004:	464b      	mov	r3, r9
 8014006:	f7ec fb1f 	bl	8000648 <__aeabi_dmul>
 801400a:	a355      	add	r3, pc, #340	; (adr r3, 8014160 <__ieee754_log+0x348>)
 801400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014010:	f7ec f964 	bl	80002dc <__adddf3>
 8014014:	4642      	mov	r2, r8
 8014016:	464b      	mov	r3, r9
 8014018:	f7ec fb16 	bl	8000648 <__aeabi_dmul>
 801401c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8014020:	4602      	mov	r2, r0
 8014022:	460b      	mov	r3, r1
 8014024:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8014028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801402c:	f7ec f956 	bl	80002dc <__adddf3>
 8014030:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8014034:	3551      	adds	r5, #81	; 0x51
 8014036:	4335      	orrs	r5, r6
 8014038:	2d00      	cmp	r5, #0
 801403a:	4680      	mov	r8, r0
 801403c:	4689      	mov	r9, r1
 801403e:	dd48      	ble.n	80140d2 <__ieee754_log+0x2ba>
 8014040:	2200      	movs	r2, #0
 8014042:	4b4d      	ldr	r3, [pc, #308]	; (8014178 <__ieee754_log+0x360>)
 8014044:	4650      	mov	r0, sl
 8014046:	4659      	mov	r1, fp
 8014048:	f7ec fafe 	bl	8000648 <__aeabi_dmul>
 801404c:	4652      	mov	r2, sl
 801404e:	465b      	mov	r3, fp
 8014050:	f7ec fafa 	bl	8000648 <__aeabi_dmul>
 8014054:	4602      	mov	r2, r0
 8014056:	460b      	mov	r3, r1
 8014058:	4606      	mov	r6, r0
 801405a:	460f      	mov	r7, r1
 801405c:	4640      	mov	r0, r8
 801405e:	4649      	mov	r1, r9
 8014060:	f7ec f93c 	bl	80002dc <__adddf3>
 8014064:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014068:	f7ec faee 	bl	8000648 <__aeabi_dmul>
 801406c:	4680      	mov	r8, r0
 801406e:	4689      	mov	r9, r1
 8014070:	b964      	cbnz	r4, 801408c <__ieee754_log+0x274>
 8014072:	4602      	mov	r2, r0
 8014074:	460b      	mov	r3, r1
 8014076:	4630      	mov	r0, r6
 8014078:	4639      	mov	r1, r7
 801407a:	f7ec f92d 	bl	80002d8 <__aeabi_dsub>
 801407e:	4602      	mov	r2, r0
 8014080:	460b      	mov	r3, r1
 8014082:	4650      	mov	r0, sl
 8014084:	4659      	mov	r1, fp
 8014086:	f7ec f927 	bl	80002d8 <__aeabi_dsub>
 801408a:	e6da      	b.n	8013e42 <__ieee754_log+0x2a>
 801408c:	a322      	add	r3, pc, #136	; (adr r3, 8014118 <__ieee754_log+0x300>)
 801408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014096:	f7ec fad7 	bl	8000648 <__aeabi_dmul>
 801409a:	a321      	add	r3, pc, #132	; (adr r3, 8014120 <__ieee754_log+0x308>)
 801409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a0:	4604      	mov	r4, r0
 80140a2:	460d      	mov	r5, r1
 80140a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140a8:	f7ec face 	bl	8000648 <__aeabi_dmul>
 80140ac:	4642      	mov	r2, r8
 80140ae:	464b      	mov	r3, r9
 80140b0:	f7ec f914 	bl	80002dc <__adddf3>
 80140b4:	4602      	mov	r2, r0
 80140b6:	460b      	mov	r3, r1
 80140b8:	4630      	mov	r0, r6
 80140ba:	4639      	mov	r1, r7
 80140bc:	f7ec f90c 	bl	80002d8 <__aeabi_dsub>
 80140c0:	4652      	mov	r2, sl
 80140c2:	465b      	mov	r3, fp
 80140c4:	f7ec f908 	bl	80002d8 <__aeabi_dsub>
 80140c8:	4602      	mov	r2, r0
 80140ca:	460b      	mov	r3, r1
 80140cc:	4620      	mov	r0, r4
 80140ce:	4629      	mov	r1, r5
 80140d0:	e7d9      	b.n	8014086 <__ieee754_log+0x26e>
 80140d2:	4602      	mov	r2, r0
 80140d4:	460b      	mov	r3, r1
 80140d6:	4650      	mov	r0, sl
 80140d8:	4659      	mov	r1, fp
 80140da:	f7ec f8fd 	bl	80002d8 <__aeabi_dsub>
 80140de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140e2:	f7ec fab1 	bl	8000648 <__aeabi_dmul>
 80140e6:	4606      	mov	r6, r0
 80140e8:	460f      	mov	r7, r1
 80140ea:	2c00      	cmp	r4, #0
 80140ec:	f43f af25 	beq.w	8013f3a <__ieee754_log+0x122>
 80140f0:	a309      	add	r3, pc, #36	; (adr r3, 8014118 <__ieee754_log+0x300>)
 80140f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140fa:	f7ec faa5 	bl	8000648 <__aeabi_dmul>
 80140fe:	a308      	add	r3, pc, #32	; (adr r3, 8014120 <__ieee754_log+0x308>)
 8014100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014104:	4604      	mov	r4, r0
 8014106:	460d      	mov	r5, r1
 8014108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801410c:	e729      	b.n	8013f62 <__ieee754_log+0x14a>
 801410e:	2000      	movs	r0, #0
 8014110:	2100      	movs	r1, #0
 8014112:	e696      	b.n	8013e42 <__ieee754_log+0x2a>
 8014114:	f3af 8000 	nop.w
 8014118:	fee00000 	.word	0xfee00000
 801411c:	3fe62e42 	.word	0x3fe62e42
 8014120:	35793c76 	.word	0x35793c76
 8014124:	3dea39ef 	.word	0x3dea39ef
 8014128:	55555555 	.word	0x55555555
 801412c:	3fd55555 	.word	0x3fd55555
 8014130:	df3e5244 	.word	0xdf3e5244
 8014134:	3fc2f112 	.word	0x3fc2f112
 8014138:	96cb03de 	.word	0x96cb03de
 801413c:	3fc74664 	.word	0x3fc74664
 8014140:	94229359 	.word	0x94229359
 8014144:	3fd24924 	.word	0x3fd24924
 8014148:	55555593 	.word	0x55555593
 801414c:	3fe55555 	.word	0x3fe55555
 8014150:	d078c69f 	.word	0xd078c69f
 8014154:	3fc39a09 	.word	0x3fc39a09
 8014158:	1d8e78af 	.word	0x1d8e78af
 801415c:	3fcc71c5 	.word	0x3fcc71c5
 8014160:	9997fa04 	.word	0x9997fa04
 8014164:	3fd99999 	.word	0x3fd99999
 8014168:	c3500000 	.word	0xc3500000
 801416c:	43500000 	.word	0x43500000
 8014170:	7fefffff 	.word	0x7fefffff
 8014174:	3ff00000 	.word	0x3ff00000
 8014178:	3fe00000 	.word	0x3fe00000

0801417c <copysign>:
 801417c:	ec51 0b10 	vmov	r0, r1, d0
 8014180:	ee11 0a90 	vmov	r0, s3
 8014184:	ee10 2a10 	vmov	r2, s0
 8014188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801418c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014190:	ea41 0300 	orr.w	r3, r1, r0
 8014194:	ec43 2b10 	vmov	d0, r2, r3
 8014198:	4770      	bx	lr
	...

0801419c <_init>:
 801419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801419e:	bf00      	nop
 80141a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141a2:	bc08      	pop	{r3}
 80141a4:	469e      	mov	lr, r3
 80141a6:	4770      	bx	lr

080141a8 <_fini>:
 80141a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141aa:	bf00      	nop
 80141ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ae:	bc08      	pop	{r3}
 80141b0:	469e      	mov	lr, r3
 80141b2:	4770      	bx	lr
