
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f198  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001258  0800f378  0800f378  0001f378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105d0  080105d0  00031eb8  2**0
                  CONTENTS
  4 .ARM          00000000  080105d0  080105d0  00031eb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080105d0  080105d0  00031eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105d0  080105d0  000205d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105d4  080105d4  000205d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001eb8  20000000  080105d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20001eb8  08012490  00031eb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002740  08012490  00032740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a6ff  00000000  00000000  00031ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c27  00000000  00000000  0006c5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002028  00000000  00000000  00073210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c60  00000000  00000000  00075238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032c7e  00000000  00000000  00076e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029352  00000000  00000000  000a9b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012568f  00000000  00000000  000d2e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f84f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cdc  00000000  00000000  001f8574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001eb8 	.word	0x20001eb8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f360 	.word	0x0800f360

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ebc 	.word	0x20001ebc
 800021c:	0800f360 	.word	0x0800f360

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d000      	beq.n	8000c0a <BiasMenu_DrawMenu+0x12>
			BiasMenu_DrawMainMenu();
			break;


		default:
			break;
 8000c08:	e002      	b.n	8000c10 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c0a:	f000 f805 	bl	8000c18 <BiasMenu_DrawMainMenu>
			break;
 8000c0e:	bf00      	nop

	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2303      	movs	r3, #3
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	211e      	movs	r1, #30
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <BiasMenu_DrawMainMenu+0x24>)
 8000c30:	f00b f8f8 	bl	800be24 <ILI9341_Draw_Text>

}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	0800f378 	.word	0x0800f378

08000c40 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c44:	f00b f940 	bl	800bec8 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f00b fd2d 	bl	800c6a8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c52:	f00b fb41 	bl	800c2d8 <ILI9341_Fill_Screen>

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	220a      	movs	r2, #10
 8000c70:	210a      	movs	r1, #10
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <DM_PostInit+0x34>)
 8000c74:	f00b f8d6 	bl	800be24 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f005 fe5e 	bl	800693c <HAL_Delay>

	  DM_RefreshScreen();
 8000c80:	f000 fa76 	bl	8001170 <DM_RefreshScreen>
	  printf("Init Completed\n");
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <DM_PostInit+0x38>)
 8000c86:	f00c fc11 	bl	800d4ac <puts>
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	0800f388 	.word	0x0800f388
 8000c94:	0800f398 	.word	0x0800f398

08000c98 <_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayFormattedOutput()
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b099      	sub	sp, #100	; 0x64
 8000c9c:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000cae:	2346      	movs	r3, #70	; 0x46
 8000cb0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t out_hertz_y = 40;
 8000cb4:	2328      	movs	r3, #40	; 0x28
 8000cb6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	char out_vpp[16] = "";
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
	uint8_t out_vpp_x = 70;
 8000cca:	2346      	movs	r3, #70	; 0x46
 8000ccc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t out_vpp_y = 70;
 8000cd0:	2346      	movs	r3, #70	; 0x46
 8000cd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	char out_decibels[11] = "";
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t out_decibels_x = 70;
 8000ce6:	2346      	movs	r3, #70	; 0x46
 8000ce8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_decibels_y = 100;
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	float volts_per_thou = 0.00075;
 8000cf2:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <_DisplayFormattedOutput+0x1f0>)
 8000cf4:	64bb      	str	r3, [r7, #72]	; 0x48
	char out_dcvolts[10] = "";
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000d04:	2346      	movs	r3, #70	; 0x46
 8000d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t out_dcvolts_y = 130;
 8000d0a:	2382      	movs	r3, #130	; 0x82
 8000d0c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000d10:	f003 f9fa 	bl	8004108 <SM_GetOutputInHertz>
 8000d14:	ee10 3a10 	vmov	r3, s0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc3d 	bl	8000598 <__aeabi_f2d>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d26:	e9cd 3400 	strd	r3, r4, [sp]
 8000d2a:	4a58      	ldr	r2, [pc, #352]	; (8000e8c <_DisplayFormattedOutput+0x1f4>)
 8000d2c:	210d      	movs	r1, #13
 8000d2e:	f00c fbc5 	bl	800d4bc <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000d32:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000d36:	b299      	uxth	r1, r3
 8000d38:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2303      	movs	r3, #3
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f00b f869 	bl	800be24 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	VppEncoderPreset_t *pVppPresetTmp =  VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f003 ff72 	bl	8004c3c <VPP_GetVppPresetObject>
 8000d58:	6438      	str	r0, [r7, #64]	; 0x40
	if(pVppPresetTmp)
 8000d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d016      	beq.n	8000d8e <_DisplayFormattedOutput+0xf6>
	{
		snprintf(out_vpp, sizeof(out_vpp), "%2.2f Vpp", pVppPresetTmp->Vpp_target);
 8000d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fc17 	bl	8000598 <__aeabi_f2d>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	f107 0020 	add.w	r0, r7, #32
 8000d72:	e9cd 3400 	strd	r3, r4, [sp]
 8000d76:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <_DisplayFormattedOutput+0x1f8>)
 8000d78:	2110      	movs	r1, #16
 8000d7a:	f00c fb9f 	bl	800d4bc <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), "%s", pVppPresetTmp->gain_decibels);
 8000d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f107 0014 	add.w	r0, r7, #20
 8000d86:	4a43      	ldr	r2, [pc, #268]	; (8000e94 <_DisplayFormattedOutput+0x1fc>)
 8000d88:	210b      	movs	r1, #11
 8000d8a:	f00c fb97 	bl	800d4bc <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, 3, WHITE);
 8000d8e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000d92:	b299      	uxth	r1, r3
 8000d94:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	f107 0020 	add.w	r0, r7, #32
 8000d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	2303      	movs	r3, #3
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2300      	movs	r3, #0
 8000daa:	f00b f83b 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000dae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000db2:	b299      	uxth	r1, r3
 8000db4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	f107 0014 	add.w	r0, r7, #20
 8000dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f00b f82b 	bl	800be24 <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000dce:	f002 fd45 	bl	800385c <BO_GetOutputBias>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <_DisplayFormattedOutput+0x148>
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8000dde:	e00b      	b.n	8000df8 <_DisplayFormattedOutput+0x160>
 8000de0:	f002 fd3c 	bl	800385c <BO_GetOutputBias>
 8000de4:	ee07 0a90 	vmov	s15, r0
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000df8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000dfa:	f7ff fbcd 	bl	8000598 <__aeabi_f2d>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460c      	mov	r4, r1
 8000e02:	f107 0008 	add.w	r0, r7, #8
 8000e06:	e9cd 3400 	strd	r3, r4, [sp]
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <_DisplayFormattedOutput+0x200>)
 8000e0c:	210a      	movs	r1, #10
 8000e0e:	f00c fb55 	bl	800d4bc <sniprintf>
	if(BO_GetBiasPolarity())
 8000e12:	f002 fcc3 	bl	800379c <BO_GetBiasPolarity>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d018      	beq.n	8000e4e <_DisplayFormattedOutput+0x1b6>
	{
		char symbol[2] = "+\0";
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <_DisplayFormattedOutput+0x204>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e22:	f107 0208 	add.w	r2, r7, #8
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00c fb7a 	bl	800d524 <strcat>
 8000e30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e34:	b299      	uxth	r1, r3
 8000e36:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	2303      	movs	r3, #3
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	f00a ffec 	bl	800be24 <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 8000e4c:	e017      	b.n	8000e7e <_DisplayFormattedOutput+0x1e6>
		char symbol[2] = "-\0";
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <_DisplayFormattedOutput+0x208>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e54:	f107 0208 	add.w	r2, r7, #8
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00c fb61 	bl	800d524 <strcat>
 8000e62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e66:	b299      	uxth	r1, r3
 8000e68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2303      	movs	r3, #3
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f00a ffd3 	bl	800be24 <ILI9341_Draw_Text>
}
 8000e7e:	bf00      	nop
 8000e80:	375c      	adds	r7, #92	; 0x5c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	bf00      	nop
 8000e88:	3a449ba6 	.word	0x3a449ba6
 8000e8c:	0800f3a8 	.word	0x0800f3a8
 8000e90:	0800f3b4 	.word	0x0800f3b4
 8000e94:	0800f3c0 	.word	0x0800f3c0
 8000e98:	0800f3c4 	.word	0x0800f3c4
 8000e9c:	0800f3cc 	.word	0x0800f3cc
 8000ea0:	0800f3d0 	.word	0x0800f3d0

08000ea4 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  != DISABLE_FUNC_MENU
 8000eaa:	4b70      	ldr	r3, [pc, #448]	; (800106c <DM_UpdateDisplay+0x1c8>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d016      	beq.n	8000ee0 <DM_UpdateDisplay+0x3c>
	{
		switch(eNextFuncMenuStatus)
 8000eb2:	4b6e      	ldr	r3, [pc, #440]	; (800106c <DM_UpdateDisplay+0x1c8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d00a      	beq.n	8000ed0 <DM_UpdateDisplay+0x2c>
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d00c      	beq.n	8000ed8 <DM_UpdateDisplay+0x34>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <DM_UpdateDisplay+0x20>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000ec2:	e0a5      	b.n	8001010 <DM_UpdateDisplay+0x16c>
				_DisplayFormattedOutput();
 8000ec4:	f7ff fee8 	bl	8000c98 <_DisplayFormattedOutput>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f001 fd2b 	bl	8002924 <FuncMenu_DrawMenu>
				break;
 8000ece:	e09f      	b.n	8001010 <DM_UpdateDisplay+0x16c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f001 fd27 	bl	8002924 <FuncMenu_DrawMenu>
				break;
 8000ed6:	e09b      	b.n	8001010 <DM_UpdateDisplay+0x16c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f001 fd23 	bl	8002924 <FuncMenu_DrawMenu>
				break;
 8000ede:	e097      	b.n	8001010 <DM_UpdateDisplay+0x16c>
		}

	}
	else if(eNextGainMenuStatus)		//  != DISABLE_GAIN_MENU
 8000ee0:	4b63      	ldr	r3, [pc, #396]	; (8001070 <DM_UpdateDisplay+0x1cc>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d01a      	beq.n	8000f1e <DM_UpdateDisplay+0x7a>
	{

		switch(eNextGainMenuStatus)
 8000ee8:	4b61      	ldr	r3, [pc, #388]	; (8001070 <DM_UpdateDisplay+0x1cc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d00a      	beq.n	8000f06 <DM_UpdateDisplay+0x62>
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d00e      	beq.n	8000f12 <DM_UpdateDisplay+0x6e>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d000      	beq.n	8000efa <DM_UpdateDisplay+0x56>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000ef8:	e08a      	b.n	8001010 <DM_UpdateDisplay+0x16c>
				_DisplayFormattedOutput();
 8000efa:	f7ff fecd 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f001 ff60 	bl	8002dc4 <GainMenu_DrawMenu>
				break;
 8000f04:	e084      	b.n	8001010 <DM_UpdateDisplay+0x16c>
				_DisplayFormattedOutput();
 8000f06:	f7ff fec7 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f001 ff5a 	bl	8002dc4 <GainMenu_DrawMenu>
				break;
 8000f10:	e07e      	b.n	8001010 <DM_UpdateDisplay+0x16c>
				_DisplayFormattedOutput();
 8000f12:	f7ff fec1 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f001 ff54 	bl	8002dc4 <GainMenu_DrawMenu>
				break;
 8000f1c:	e078      	b.n	8001010 <DM_UpdateDisplay+0x16c>
		}

	}

	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000f1e:	4b55      	ldr	r3, [pc, #340]	; (8001074 <DM_UpdateDisplay+0x1d0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <DM_UpdateDisplay+0xe0>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000f26:	2300      	movs	r3, #0
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f32:	220a      	movs	r2, #10
 8000f34:	211e      	movs	r1, #30
 8000f36:	4850      	ldr	r0, [pc, #320]	; (8001078 <DM_UpdateDisplay+0x1d4>)
 8000f38:	f00a ff74 	bl	800be24 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <DM_UpdateDisplay+0x1d0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d863      	bhi.n	800100e <DM_UpdateDisplay+0x16a>
 8000f46:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <DM_UpdateDisplay+0xa8>)
 8000f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	08000f69 	.word	0x08000f69
 8000f54:	08000f71 	.word	0x08000f71
 8000f58:	08000f7d 	.word	0x08000f7d
		{
			case ENABLE_FREQ_MAIN_MENU:

				_DisplayFormattedOutput();
 8000f5c:	f7ff fe9c 	bl	8000c98 <_DisplayFormattedOutput>

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 f9d5 	bl	8001310 <FreqMenu_DrawMenu>

				break;
 8000f66:	e053      	b.n	8001010 <DM_UpdateDisplay+0x16c>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f000 f9d1 	bl	8001310 <FreqMenu_DrawMenu>
				break;
 8000f6e:	e04f      	b.n	8001010 <DM_UpdateDisplay+0x16c>

			case ENABLE_FREQ_ADJUST_MENU:

				_DisplayFormattedOutput();
 8000f70:	f7ff fe92 	bl	8000c98 <_DisplayFormattedOutput>

				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f9cb 	bl	8001310 <FreqMenu_DrawMenu>

				break;
 8000f7a:	e049      	b.n	8001010 <DM_UpdateDisplay+0x16c>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000f7c:	2004      	movs	r0, #4
 8000f7e:	f000 f9c7 	bl	8001310 <FreqMenu_DrawMenu>
				break;
 8000f82:	e045      	b.n	8001010 <DM_UpdateDisplay+0x16c>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000f84:	4b3d      	ldr	r3, [pc, #244]	; (800107c <DM_UpdateDisplay+0x1d8>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <DM_UpdateDisplay+0xf4>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DisplayFormattedOutput();
 8000f8c:	f7ff fe84 	bl	8000c98 <_DisplayFormattedOutput>
		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fe31 	bl	8000bf8 <BiasMenu_DrawMenu>
 8000f96:	e03b      	b.n	8001010 <DM_UpdateDisplay+0x16c>
	}
	else
	{
		ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 3, BLACK);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	210a      	movs	r1, #10
 8000fa8:	4835      	ldr	r0, [pc, #212]	; (8001080 <DM_UpdateDisplay+0x1dc>)
 8000faa:	f00a ff3b 	bl	800be24 <ILI9341_Draw_Text>
		_DisplayFormattedOutput();
 8000fae:	f7ff fe73 	bl	8000c98 <_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000fb2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	22d2      	movs	r2, #210	; 0xd2
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	4830      	ldr	r0, [pc, #192]	; (8001084 <DM_UpdateDisplay+0x1e0>)
 8000fc4:	f00a ff2e 	bl	800be24 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000fc8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2302      	movs	r3, #2
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	22d2      	movs	r2, #210	; 0xd2
 8000fd6:	2164      	movs	r1, #100	; 0x64
 8000fd8:	482b      	ldr	r0, [pc, #172]	; (8001088 <DM_UpdateDisplay+0x1e4>)
 8000fda:	f00a ff23 	bl	800be24 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000fde:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	22d2      	movs	r2, #210	; 0xd2
 8000fec:	21af      	movs	r1, #175	; 0xaf
 8000fee:	4827      	ldr	r0, [pc, #156]	; (800108c <DM_UpdateDisplay+0x1e8>)
 8000ff0:	f00a ff18 	bl	800be24 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000ff4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	22d2      	movs	r2, #210	; 0xd2
 8001002:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001006:	4822      	ldr	r0, [pc, #136]	; (8001090 <DM_UpdateDisplay+0x1ec>)
 8001008:	f00a ff0c 	bl	800be24 <ILI9341_Draw_Text>
 800100c:	e000      	b.n	8001010 <DM_UpdateDisplay+0x16c>
				break;
 800100e:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char encoder_value[5] = "";
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	2300      	movs	r3, #0
 8001016:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <DM_UpdateDisplay+0x1f0>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	b29b      	uxth	r3, r3
 800101e:	4639      	mov	r1, r7
 8001020:	2205      	movs	r2, #5
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f8ee 	bl	8001204 <DM_AddDigitPadding>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10b      	bne.n	8001046 <DM_UpdateDisplay+0x1a2>
		ILI9341_Draw_Text(encoder_value, 280, 190, BLACK, 1, RED);
 800102e:	4638      	mov	r0, r7
 8001030:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	2301      	movs	r3, #1
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	22be      	movs	r2, #190	; 0xbe
 800103e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001042:	f00a feef 	bl	800be24 <ILI9341_Draw_Text>
#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <DM_UpdateDisplay+0x1f4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00a      	beq.n	8001064 <DM_UpdateDisplay+0x1c0>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 800104e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	2301      	movs	r3, #1
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	22be      	movs	r2, #190	; 0xbe
 800105c:	210a      	movs	r1, #10
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <DM_UpdateDisplay+0x1f4>)
 8001060:	f00a fee0 	bl	800be24 <ILI9341_Draw_Text>

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20001ed4 	.word	0x20001ed4
 8001070:	20001ed5 	.word	0x20001ed5
 8001074:	20001ed6 	.word	0x20001ed6
 8001078:	0800f3d4 	.word	0x0800f3d4
 800107c:	20001ed7 	.word	0x20001ed7
 8001080:	0800f3e4 	.word	0x0800f3e4
 8001084:	0800f3f8 	.word	0x0800f3f8
 8001088:	0800f400 	.word	0x0800f400
 800108c:	0800f408 	.word	0x0800f408
 8001090:	0800f410 	.word	0x0800f410
 8001094:	40012c00 	.word	0x40012c00
 8001098:	20001ed8 	.word	0x20001ed8

0800109c <DM_ShowFuncMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncMenu(eFuncMenu_Status pValue)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <DM_ShowFuncMenu+0x1c>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	7013      	strb	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20001ed4 	.word	0x20001ed4

080010bc <DM_ShowGainMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowGainMenu(eGainMenu_Status pValue)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <DM_ShowGainMenu+0x1c>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	7013      	strb	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20001ed5 	.word	0x20001ed5

080010dc <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <DM_ShowFreqMenu+0x1c>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	7013      	strb	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20001ed6 	.word	0x20001ed6

080010fc <DM_ShowBiasMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasMenu(eBiasMenu_Status pValue)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <DM_ShowBiasMenu+0x1c>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	7013      	strb	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20001ed7 	.word	0x20001ed7

0800111c <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if(num < 10)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b09      	cmp	r3, #9
 8001128:	dc01      	bgt.n	800112e <DM_DigitCount+0x12>
		return 1;
 800112a:	2301      	movs	r3, #1
 800112c:	e018      	b.n	8001160 <DM_DigitCount+0x44>
	if(num < 100)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b63      	cmp	r3, #99	; 0x63
 8001132:	dc01      	bgt.n	8001138 <DM_DigitCount+0x1c>
		return 2;
 8001134:	2302      	movs	r3, #2
 8001136:	e013      	b.n	8001160 <DM_DigitCount+0x44>
	if(num < 1000)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800113e:	da01      	bge.n	8001144 <DM_DigitCount+0x28>
		return 3;
 8001140:	2303      	movs	r3, #3
 8001142:	e00d      	b.n	8001160 <DM_DigitCount+0x44>
	if(num < 10000)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f242 720f 	movw	r2, #9999	; 0x270f
 800114a:	4293      	cmp	r3, r2
 800114c:	dc01      	bgt.n	8001152 <DM_DigitCount+0x36>
		return 4;
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <DM_DigitCount+0x44>
	if(num < 100000)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <DM_DigitCount+0x50>)
 8001156:	4293      	cmp	r3, r2
 8001158:	dc01      	bgt.n	800115e <DM_DigitCount+0x42>
		return 5;
 800115a:	2305      	movs	r3, #5
 800115c:	e000      	b.n	8001160 <DM_DigitCount+0x44>
	else
		return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	0001869f 	.word	0x0001869f

08001170 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af04      	add	r7, sp, #16
	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001176:	4821      	ldr	r0, [pc, #132]	; (80011fc <DM_RefreshScreen+0x8c>)
 8001178:	f009 fa12 	bl	800a5a0 <HAL_TIM_Base_Stop_IT>


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 800117c:	f00a fe80 	bl	800be80 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <DM_RefreshScreen+0x90>)
 8001182:	8818      	ldrh	r0, [r3, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2302      	movs	r3, #2
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2332      	movs	r3, #50	; 0x32
 8001194:	2250      	movs	r2, #80	; 0x50
 8001196:	21c8      	movs	r1, #200	; 0xc8
 8001198:	f00a fcda 	bl	800bb50 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <DM_RefreshScreen+0x90>)
 800119e:	8858      	ldrh	r0, [r3, #2]
 80011a0:	2300      	movs	r3, #0
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2302      	movs	r3, #2
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2332      	movs	r3, #50	; 0x32
 80011b0:	2250      	movs	r2, #80	; 0x50
 80011b2:	21c8      	movs	r1, #200	; 0xc8
 80011b4:	f00a fccc 	bl	800bb50 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <DM_RefreshScreen+0x90>)
 80011ba:	8898      	ldrh	r0, [r3, #4]
 80011bc:	2300      	movs	r3, #0
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2302      	movs	r3, #2
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2332      	movs	r3, #50	; 0x32
 80011cc:	2250      	movs	r2, #80	; 0x50
 80011ce:	21c8      	movs	r1, #200	; 0xc8
 80011d0:	f00a fcbe 	bl	800bb50 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <DM_RefreshScreen+0x90>)
 80011d6:	88d8      	ldrh	r0, [r3, #6]
 80011d8:	2300      	movs	r3, #0
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2302      	movs	r3, #2
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2332      	movs	r3, #50	; 0x32
 80011e8:	2250      	movs	r2, #80	; 0x50
 80011ea:	21c8      	movs	r1, #200	; 0xc8
 80011ec:	f00a fcb0 	bl	800bb50 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DM_RefreshScreen+0x8c>)
 80011f2:	f009 f99f 	bl	800a534 <HAL_TIM_Base_Start_IT>
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20002570 	.word	0x20002570
 8001200:	20000000 	.word	0x20000000

08001204 <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
 8001210:	4613      	mov	r3, r2
 8001212:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <DM_AddDigitPadding+0x1c>
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	2b06      	cmp	r3, #6
 800121e:	d904      	bls.n	800122a <DM_AddDigitPadding+0x26>
	{
		DM_SetErrorDebugMsg("DM_AddDigitPadding: invalid input string size");
 8001220:	482a      	ldr	r0, [pc, #168]	; (80012cc <DM_AddDigitPadding+0xc8>)
 8001222:	f000 f863 	bl	80012ec <DM_SetErrorDebugMsg>
		return 1;
 8001226:	2301      	movs	r3, #1
 8001228:	e04c      	b.n	80012c4 <DM_AddDigitPadding+0xc0>
	}

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff73 	bl	800111c <DM_DigitCount>
 8001236:	4603      	mov	r3, r0
 8001238:	2b05      	cmp	r3, #5
 800123a:	d83f      	bhi.n	80012bc <DM_AddDigitPadding+0xb8>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <DM_AddDigitPadding+0x40>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	0800125d 	.word	0x0800125d
 8001248:	0800126d 	.word	0x0800126d
 800124c:	0800127d 	.word	0x0800127d
 8001250:	0800128d 	.word	0x0800128d
 8001254:	0800129d 	.word	0x0800129d
 8001258:	080012ad 	.word	0x080012ad
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <DM_AddDigitPadding+0xcc>)
 8001260:	4619      	mov	r1, r3
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f00c f92a 	bl	800d4bc <sniprintf>
			return 0;
 8001268:	2300      	movs	r3, #0
 800126a:	e02b      	b.n	80012c4 <DM_AddDigitPadding+0xc0>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 800126c:	88b9      	ldrh	r1, [r7, #4]
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <DM_AddDigitPadding+0xd0>)
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f00c f922 	bl	800d4bc <sniprintf>
			return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e023      	b.n	80012c4 <DM_AddDigitPadding+0xc0>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 800127c:	88b9      	ldrh	r1, [r7, #4]
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <DM_AddDigitPadding+0xd4>)
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f00c f91a 	bl	800d4bc <sniprintf>
			return 0;
 8001288:	2300      	movs	r3, #0
 800128a:	e01b      	b.n	80012c4 <DM_AddDigitPadding+0xc0>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 800128c:	88b9      	ldrh	r1, [r7, #4]
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <DM_AddDigitPadding+0xd8>)
 8001292:	6838      	ldr	r0, [r7, #0]
 8001294:	f00c f912 	bl	800d4bc <sniprintf>
			return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e013      	b.n	80012c4 <DM_AddDigitPadding+0xc0>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 800129c:	88b9      	ldrh	r1, [r7, #4]
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <DM_AddDigitPadding+0xdc>)
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f00c f90a 	bl	800d4bc <sniprintf>
			return 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e00b      	b.n	80012c4 <DM_AddDigitPadding+0xc0>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 80012ac:	88b9      	ldrh	r1, [r7, #4]
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <DM_AddDigitPadding+0xe0>)
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f00c f902 	bl	800d4bc <sniprintf>
			return 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e003      	b.n	80012c4 <DM_AddDigitPadding+0xc0>

	}
	DM_SetErrorDebugMsg("DM_AddDigitPadding: unknown error");
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <DM_AddDigitPadding+0xe4>)
 80012be:	f000 f815 	bl	80012ec <DM_SetErrorDebugMsg>
	return 2;
 80012c2:	2302      	movs	r3, #2


}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	0800f450 	.word	0x0800f450
 80012d0:	0800f480 	.word	0x0800f480
 80012d4:	0800f488 	.word	0x0800f488
 80012d8:	0800f490 	.word	0x0800f490
 80012dc:	0800f498 	.word	0x0800f498
 80012e0:	0800f4a0 	.word	0x0800f4a0
 80012e4:	0800f4a4 	.word	0x0800f4a4
 80012e8:	0800f4a8 	.word	0x0800f4a8

080012ec <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <DM_SetErrorDebugMsg+0x1c>)
 80012f8:	212d      	movs	r1, #45	; 0x2d
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <DM_SetErrorDebugMsg+0x20>)
 80012fc:	f00c f8de 	bl	800d4bc <sniprintf>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0800f3c0 	.word	0x0800f3c0
 800130c:	20001ed8 	.word	0x20001ed8

08001310 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d007      	beq.n	8001330 <FreqMenu_DrawMenu+0x20>
 8001320:	2b03      	cmp	r3, #3
 8001322:	d008      	beq.n	8001336 <FreqMenu_DrawMenu+0x26>
 8001324:	2b01      	cmp	r3, #1
 8001326:	d000      	beq.n	800132a <FreqMenu_DrawMenu+0x1a>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
			break;

		default:
			break;
 8001328:	e008      	b.n	800133c <FreqMenu_DrawMenu+0x2c>
			FreqMenu_DrawMainMenu();
 800132a:	f000 f80b 	bl	8001344 <FreqMenu_DrawMainMenu>
			break;
 800132e:	e005      	b.n	800133c <FreqMenu_DrawMenu+0x2c>
			FreqMenu_DrawPresetMenu();
 8001330:	f000 f842 	bl	80013b8 <FreqMenu_DrawPresetMenu>
			break;
 8001334:	e002      	b.n	800133c <FreqMenu_DrawMenu+0x2c>
			FreqMenu_DrawAdjustMenu();
 8001336:	f001 fac5 	bl	80028c4 <FreqMenu_DrawAdjustMenu>
			break;
 800133a:	bf00      	nop

	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);
 800134a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2302      	movs	r3, #2
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2300      	movs	r3, #0
 8001356:	22a5      	movs	r2, #165	; 0xa5
 8001358:	211e      	movs	r1, #30
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <FreqMenu_DrawMainMenu+0x64>)
 800135c:	f00a fd62 	bl	800be24 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 8001360:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	2302      	movs	r3, #2
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	22d2      	movs	r2, #210	; 0xd2
 800136e:	2105      	movs	r1, #5
 8001370:	480e      	ldr	r0, [pc, #56]	; (80013ac <FreqMenu_DrawMainMenu+0x68>)
 8001372:	f00a fd57 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8001376:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	2302      	movs	r3, #2
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	22d2      	movs	r2, #210	; 0xd2
 8001384:	2157      	movs	r1, #87	; 0x57
 8001386:	480a      	ldr	r0, [pc, #40]	; (80013b0 <FreqMenu_DrawMainMenu+0x6c>)
 8001388:	f00a fd4c 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 800138c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2302      	movs	r3, #2
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	22d2      	movs	r2, #210	; 0xd2
 800139a:	21ae      	movs	r1, #174	; 0xae
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <FreqMenu_DrawMainMenu+0x70>)
 800139e:	f00a fd41 	bl	800be24 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	0800f4cc 	.word	0x0800f4cc
 80013ac:	0800f4e4 	.word	0x0800f4e4
 80013b0:	0800f4ec 	.word	0x0800f4ec
 80013b4:	0800f4f4 	.word	0x0800f4f4

080013b8 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 80013be:	2332      	movs	r3, #50	; 0x32
 80013c0:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 80013c2:	2346      	movs	r3, #70	; 0x46
 80013c4:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 80013c6:	235a      	movs	r3, #90	; 0x5a
 80013c8:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 80013ca:	236e      	movs	r3, #110	; 0x6e
 80013cc:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 80013ce:	2382      	movs	r3, #130	; 0x82
 80013d0:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 80013d2:	2396      	movs	r3, #150	; 0x96
 80013d4:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 80013d6:	23aa      	movs	r3, #170	; 0xaa
 80013d8:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80013da:	f002 fbf5 	bl	8003bc8 <FreqO_GetFPresetObject>
 80013de:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f001 823f 	beq.w	8002866 <FreqMenu_DrawPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013f0:	4293      	cmp	r3, r2
 80013f2:	f000 8499 	beq.w	8001d28 <FreqMenu_DrawPresetMenu+0x970>
 80013f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d817      	bhi.n	800142e <FreqMenu_DrawPresetMenu+0x76>
 80013fe:	2b32      	cmp	r3, #50	; 0x32
 8001400:	f000 81b2 	beq.w	8001768 <FreqMenu_DrawPresetMenu+0x3b0>
 8001404:	2b32      	cmp	r3, #50	; 0x32
 8001406:	d806      	bhi.n	8001416 <FreqMenu_DrawPresetMenu+0x5e>
 8001408:	2b01      	cmp	r3, #1
 800140a:	d038      	beq.n	800147e <FreqMenu_DrawPresetMenu+0xc6>
 800140c:	2b0a      	cmp	r3, #10
 800140e:	f000 80e0 	beq.w	80015d2 <FreqMenu_DrawPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 8001412:	f001 ba34 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 8001416:	2bfa      	cmp	r3, #250	; 0xfa
 8001418:	f000 8316 	beq.w	8001a48 <FreqMenu_DrawPresetMenu+0x690>
 800141c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001420:	f000 83bc 	beq.w	8001b9c <FreqMenu_DrawPresetMenu+0x7e4>
 8001424:	2b64      	cmp	r3, #100	; 0x64
 8001426:	f000 8249 	beq.w	80018bc <FreqMenu_DrawPresetMenu+0x504>
}
 800142a:	f001 ba28 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 800142e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001432:	4293      	cmp	r3, r2
 8001434:	f000 8756 	beq.w	80022e4 <FreqMenu_DrawPresetMenu+0xf2c>
 8001438:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800143c:	4293      	cmp	r3, r2
 800143e:	d80f      	bhi.n	8001460 <FreqMenu_DrawPresetMenu+0xa8>
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	f000 85df 	beq.w	8002008 <FreqMenu_DrawPresetMenu+0xc50>
 800144a:	f242 7210 	movw	r2, #10000	; 0x2710
 800144e:	4293      	cmp	r3, r2
 8001450:	f000 8683 	beq.w	800215a <FreqMenu_DrawPresetMenu+0xda2>
 8001454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001458:	f000 8510 	beq.w	8001e7c <FreqMenu_DrawPresetMenu+0xac4>
}
 800145c:	f001 ba0f 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 8001460:	4ab1      	ldr	r2, [pc, #708]	; (8001728 <FreqMenu_DrawPresetMenu+0x370>)
 8001462:	4293      	cmp	r3, r2
 8001464:	f001 80ac 	beq.w	80025c0 <FreqMenu_DrawPresetMenu+0x1208>
 8001468:	4ab0      	ldr	r2, [pc, #704]	; (800172c <FreqMenu_DrawPresetMenu+0x374>)
 800146a:	4293      	cmp	r3, r2
 800146c:	f001 8151 	beq.w	8002712 <FreqMenu_DrawPresetMenu+0x135a>
 8001470:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001474:	4293      	cmp	r3, r2
 8001476:	f000 87de 	beq.w	8002436 <FreqMenu_DrawPresetMenu+0x107e>
}
 800147a:	f001 ba00 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	b29a      	uxth	r2, r3
 8001482:	2300      	movs	r3, #0
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	2302      	movs	r3, #2
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148e:	210a      	movs	r1, #10
 8001490:	48a7      	ldr	r0, [pc, #668]	; (8001730 <FreqMenu_DrawPresetMenu+0x378>)
 8001492:	f00a fcc7 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	b29a      	uxth	r2, r3
 800149a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	210a      	movs	r1, #10
 80014a8:	48a2      	ldr	r0, [pc, #648]	; (8001734 <FreqMenu_DrawPresetMenu+0x37c>)
 80014aa:	f00a fcbb 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2302      	movs	r3, #2
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	210a      	movs	r1, #10
 80014c0:	489d      	ldr	r0, [pc, #628]	; (8001738 <FreqMenu_DrawPresetMenu+0x380>)
 80014c2:	f00a fcaf 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80014c6:	7b3b      	ldrb	r3, [r7, #12]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2302      	movs	r3, #2
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2300      	movs	r3, #0
 80014d6:	210a      	movs	r1, #10
 80014d8:	4898      	ldr	r0, [pc, #608]	; (800173c <FreqMenu_DrawPresetMenu+0x384>)
 80014da:	f00a fca3 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	2302      	movs	r3, #2
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2300      	movs	r3, #0
 80014ee:	210a      	movs	r1, #10
 80014f0:	4893      	ldr	r0, [pc, #588]	; (8001740 <FreqMenu_DrawPresetMenu+0x388>)
 80014f2:	f00a fc97 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80014f6:	7abb      	ldrb	r3, [r7, #10]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2302      	movs	r3, #2
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	210a      	movs	r1, #10
 8001508:	488e      	ldr	r0, [pc, #568]	; (8001744 <FreqMenu_DrawPresetMenu+0x38c>)
 800150a:	f00a fc8b 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800150e:	7a7b      	ldrb	r3, [r7, #9]
 8001510:	b29a      	uxth	r2, r3
 8001512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2302      	movs	r3, #2
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	210a      	movs	r1, #10
 8001520:	4889      	ldr	r0, [pc, #548]	; (8001748 <FreqMenu_DrawPresetMenu+0x390>)
 8001522:	f00a fc7f 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	b29a      	uxth	r2, r3
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2302      	movs	r3, #2
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	2178      	movs	r1, #120	; 0x78
 8001538:	4884      	ldr	r0, [pc, #528]	; (800174c <FreqMenu_DrawPresetMenu+0x394>)
 800153a:	f00a fc73 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	b29a      	uxth	r2, r3
 8001542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2302      	movs	r3, #2
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	2178      	movs	r1, #120	; 0x78
 8001550:	487f      	ldr	r0, [pc, #508]	; (8001750 <FreqMenu_DrawPresetMenu+0x398>)
 8001552:	f00a fc67 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	b29a      	uxth	r2, r3
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2302      	movs	r3, #2
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	2178      	movs	r1, #120	; 0x78
 8001568:	487a      	ldr	r0, [pc, #488]	; (8001754 <FreqMenu_DrawPresetMenu+0x39c>)
 800156a:	f00a fc5b 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	b29a      	uxth	r2, r3
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2302      	movs	r3, #2
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	2178      	movs	r1, #120	; 0x78
 8001580:	4875      	ldr	r0, [pc, #468]	; (8001758 <FreqMenu_DrawPresetMenu+0x3a0>)
 8001582:	f00a fc4f 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	b29a      	uxth	r2, r3
 800158a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2302      	movs	r3, #2
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	2178      	movs	r1, #120	; 0x78
 8001598:	4870      	ldr	r0, [pc, #448]	; (800175c <FreqMenu_DrawPresetMenu+0x3a4>)
 800159a:	f00a fc43 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800159e:	7abb      	ldrb	r3, [r7, #10]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	2302      	movs	r3, #2
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	2178      	movs	r1, #120	; 0x78
 80015b0:	486b      	ldr	r0, [pc, #428]	; (8001760 <FreqMenu_DrawPresetMenu+0x3a8>)
 80015b2:	f00a fc37 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80015b6:	7a7b      	ldrb	r3, [r7, #9]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	2302      	movs	r3, #2
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2300      	movs	r3, #0
 80015c6:	2178      	movs	r1, #120	; 0x78
 80015c8:	4866      	ldr	r0, [pc, #408]	; (8001764 <FreqMenu_DrawPresetMenu+0x3ac>)
 80015ca:	f00a fc2b 	bl	800be24 <ILI9341_Draw_Text>
				break;
 80015ce:	f001 b956 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2302      	movs	r3, #2
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	210a      	movs	r1, #10
 80015e4:	4852      	ldr	r0, [pc, #328]	; (8001730 <FreqMenu_DrawPresetMenu+0x378>)
 80015e6:	f00a fc1d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 80015ea:	7bbb      	ldrb	r3, [r7, #14]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	2300      	movs	r3, #0
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2302      	movs	r3, #2
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fa:	210a      	movs	r1, #10
 80015fc:	484d      	ldr	r0, [pc, #308]	; (8001734 <FreqMenu_DrawPresetMenu+0x37c>)
 80015fe:	f00a fc11 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001602:	7b7b      	ldrb	r3, [r7, #13]
 8001604:	b29a      	uxth	r2, r3
 8001606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	2302      	movs	r3, #2
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	210a      	movs	r1, #10
 8001614:	4848      	ldr	r0, [pc, #288]	; (8001738 <FreqMenu_DrawPresetMenu+0x380>)
 8001616:	f00a fc05 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2302      	movs	r3, #2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	210a      	movs	r1, #10
 800162c:	4843      	ldr	r0, [pc, #268]	; (800173c <FreqMenu_DrawPresetMenu+0x384>)
 800162e:	f00a fbf9 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	b29a      	uxth	r2, r3
 8001636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2302      	movs	r3, #2
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	210a      	movs	r1, #10
 8001644:	483e      	ldr	r0, [pc, #248]	; (8001740 <FreqMenu_DrawPresetMenu+0x388>)
 8001646:	f00a fbed 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800164a:	7abb      	ldrb	r3, [r7, #10]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2302      	movs	r3, #2
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	210a      	movs	r1, #10
 800165c:	4839      	ldr	r0, [pc, #228]	; (8001744 <FreqMenu_DrawPresetMenu+0x38c>)
 800165e:	f00a fbe1 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001662:	7a7b      	ldrb	r3, [r7, #9]
 8001664:	b29a      	uxth	r2, r3
 8001666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2302      	movs	r3, #2
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	210a      	movs	r1, #10
 8001674:	4834      	ldr	r0, [pc, #208]	; (8001748 <FreqMenu_DrawPresetMenu+0x390>)
 8001676:	f00a fbd5 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	b29a      	uxth	r2, r3
 800167e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2302      	movs	r3, #2
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2178      	movs	r1, #120	; 0x78
 800168c:	482f      	ldr	r0, [pc, #188]	; (800174c <FreqMenu_DrawPresetMenu+0x394>)
 800168e:	f00a fbc9 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2302      	movs	r3, #2
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2178      	movs	r1, #120	; 0x78
 80016a4:	482a      	ldr	r0, [pc, #168]	; (8001750 <FreqMenu_DrawPresetMenu+0x398>)
 80016a6:	f00a fbbd 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80016aa:	7b7b      	ldrb	r3, [r7, #13]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2302      	movs	r3, #2
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	2178      	movs	r1, #120	; 0x78
 80016bc:	4825      	ldr	r0, [pc, #148]	; (8001754 <FreqMenu_DrawPresetMenu+0x39c>)
 80016be:	f00a fbb1 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80016c2:	7b3b      	ldrb	r3, [r7, #12]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2302      	movs	r3, #2
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	2178      	movs	r1, #120	; 0x78
 80016d4:	4820      	ldr	r0, [pc, #128]	; (8001758 <FreqMenu_DrawPresetMenu+0x3a0>)
 80016d6:	f00a fba5 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2302      	movs	r3, #2
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	2178      	movs	r1, #120	; 0x78
 80016ec:	481b      	ldr	r0, [pc, #108]	; (800175c <FreqMenu_DrawPresetMenu+0x3a4>)
 80016ee:	f00a fb99 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80016f2:	7abb      	ldrb	r3, [r7, #10]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	2302      	movs	r3, #2
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	2178      	movs	r1, #120	; 0x78
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <FreqMenu_DrawPresetMenu+0x3a8>)
 8001706:	f00a fb8d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800170a:	7a7b      	ldrb	r3, [r7, #9]
 800170c:	b29a      	uxth	r2, r3
 800170e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2302      	movs	r3, #2
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2178      	movs	r1, #120	; 0x78
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <FreqMenu_DrawPresetMenu+0x3ac>)
 800171e:	f00a fb81 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8001722:	f001 b8ac 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
 8001726:	bf00      	nop
 8001728:	000124f8 	.word	0x000124f8
 800172c:	000186a0 	.word	0x000186a0
 8001730:	0800f4fc 	.word	0x0800f4fc
 8001734:	0800f504 	.word	0x0800f504
 8001738:	0800f50c 	.word	0x0800f50c
 800173c:	0800f514 	.word	0x0800f514
 8001740:	0800f51c 	.word	0x0800f51c
 8001744:	0800f524 	.word	0x0800f524
 8001748:	0800f52c 	.word	0x0800f52c
 800174c:	0800f534 	.word	0x0800f534
 8001750:	0800f53c 	.word	0x0800f53c
 8001754:	0800f544 	.word	0x0800f544
 8001758:	0800f54c 	.word	0x0800f54c
 800175c:	0800f554 	.word	0x0800f554
 8001760:	0800f55c 	.word	0x0800f55c
 8001764:	0800f564 	.word	0x0800f564
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	b29a      	uxth	r2, r3
 800176c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	2302      	movs	r3, #2
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	210a      	movs	r1, #10
 800177a:	48a5      	ldr	r0, [pc, #660]	; (8001a10 <FreqMenu_DrawPresetMenu+0x658>)
 800177c:	f00a fb52 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	b29a      	uxth	r2, r3
 8001784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2302      	movs	r3, #2
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	210a      	movs	r1, #10
 8001792:	48a0      	ldr	r0, [pc, #640]	; (8001a14 <FreqMenu_DrawPresetMenu+0x65c>)
 8001794:	f00a fb46 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001798:	7b7b      	ldrb	r3, [r7, #13]
 800179a:	b29a      	uxth	r2, r3
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	2302      	movs	r3, #2
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a8:	210a      	movs	r1, #10
 80017aa:	489b      	ldr	r0, [pc, #620]	; (8001a18 <FreqMenu_DrawPresetMenu+0x660>)
 80017ac:	f00a fb3a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2302      	movs	r3, #2
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	210a      	movs	r1, #10
 80017c2:	4896      	ldr	r0, [pc, #600]	; (8001a1c <FreqMenu_DrawPresetMenu+0x664>)
 80017c4:	f00a fb2e 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80017c8:	7afb      	ldrb	r3, [r7, #11]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2302      	movs	r3, #2
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	210a      	movs	r1, #10
 80017da:	4891      	ldr	r0, [pc, #580]	; (8001a20 <FreqMenu_DrawPresetMenu+0x668>)
 80017dc:	f00a fb22 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80017e0:	7abb      	ldrb	r3, [r7, #10]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2302      	movs	r3, #2
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	210a      	movs	r1, #10
 80017f2:	488c      	ldr	r0, [pc, #560]	; (8001a24 <FreqMenu_DrawPresetMenu+0x66c>)
 80017f4:	f00a fb16 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80017f8:	7a7b      	ldrb	r3, [r7, #9]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	2302      	movs	r3, #2
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	210a      	movs	r1, #10
 800180a:	4887      	ldr	r0, [pc, #540]	; (8001a28 <FreqMenu_DrawPresetMenu+0x670>)
 800180c:	f00a fb0a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	b29a      	uxth	r2, r3
 8001814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	2302      	movs	r3, #2
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	2178      	movs	r1, #120	; 0x78
 8001822:	4882      	ldr	r0, [pc, #520]	; (8001a2c <FreqMenu_DrawPresetMenu+0x674>)
 8001824:	f00a fafe 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001828:	7bbb      	ldrb	r3, [r7, #14]
 800182a:	b29a      	uxth	r2, r3
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	2178      	movs	r1, #120	; 0x78
 800183a:	487d      	ldr	r0, [pc, #500]	; (8001a30 <FreqMenu_DrawPresetMenu+0x678>)
 800183c:	f00a faf2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001840:	7b7b      	ldrb	r3, [r7, #13]
 8001842:	b29a      	uxth	r2, r3
 8001844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2302      	movs	r3, #2
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	2178      	movs	r1, #120	; 0x78
 8001852:	4878      	ldr	r0, [pc, #480]	; (8001a34 <FreqMenu_DrawPresetMenu+0x67c>)
 8001854:	f00a fae6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001858:	7b3b      	ldrb	r3, [r7, #12]
 800185a:	b29a      	uxth	r2, r3
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	2302      	movs	r3, #2
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2178      	movs	r1, #120	; 0x78
 800186a:	4873      	ldr	r0, [pc, #460]	; (8001a38 <FreqMenu_DrawPresetMenu+0x680>)
 800186c:	f00a fada 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	b29a      	uxth	r2, r3
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2302      	movs	r3, #2
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	2178      	movs	r1, #120	; 0x78
 8001882:	486e      	ldr	r0, [pc, #440]	; (8001a3c <FreqMenu_DrawPresetMenu+0x684>)
 8001884:	f00a face 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001888:	7abb      	ldrb	r3, [r7, #10]
 800188a:	b29a      	uxth	r2, r3
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	2302      	movs	r3, #2
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	2178      	movs	r1, #120	; 0x78
 800189a:	4869      	ldr	r0, [pc, #420]	; (8001a40 <FreqMenu_DrawPresetMenu+0x688>)
 800189c:	f00a fac2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80018a0:	7a7b      	ldrb	r3, [r7, #9]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2302      	movs	r3, #2
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	2178      	movs	r1, #120	; 0x78
 80018b2:	4864      	ldr	r0, [pc, #400]	; (8001a44 <FreqMenu_DrawPresetMenu+0x68c>)
 80018b4:	f00a fab6 	bl	800be24 <ILI9341_Draw_Text>
				break;
 80018b8:	f000 bfe1 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	2302      	movs	r3, #2
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	210a      	movs	r1, #10
 80018ce:	4850      	ldr	r0, [pc, #320]	; (8001a10 <FreqMenu_DrawPresetMenu+0x658>)
 80018d0:	f00a faa8 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2302      	movs	r3, #2
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	210a      	movs	r1, #10
 80018e6:	484b      	ldr	r0, [pc, #300]	; (8001a14 <FreqMenu_DrawPresetMenu+0x65c>)
 80018e8:	f00a fa9c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2302      	movs	r3, #2
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2300      	movs	r3, #0
 80018fc:	210a      	movs	r1, #10
 80018fe:	4846      	ldr	r0, [pc, #280]	; (8001a18 <FreqMenu_DrawPresetMenu+0x660>)
 8001900:	f00a fa90 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	b29a      	uxth	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	2302      	movs	r3, #2
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001914:	210a      	movs	r1, #10
 8001916:	4841      	ldr	r0, [pc, #260]	; (8001a1c <FreqMenu_DrawPresetMenu+0x664>)
 8001918:	f00a fa84 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	b29a      	uxth	r2, r3
 8001920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2302      	movs	r3, #2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	210a      	movs	r1, #10
 800192e:	483c      	ldr	r0, [pc, #240]	; (8001a20 <FreqMenu_DrawPresetMenu+0x668>)
 8001930:	f00a fa78 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001934:	7abb      	ldrb	r3, [r7, #10]
 8001936:	b29a      	uxth	r2, r3
 8001938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2302      	movs	r3, #2
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	210a      	movs	r1, #10
 8001946:	4837      	ldr	r0, [pc, #220]	; (8001a24 <FreqMenu_DrawPresetMenu+0x66c>)
 8001948:	f00a fa6c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800194c:	7a7b      	ldrb	r3, [r7, #9]
 800194e:	b29a      	uxth	r2, r3
 8001950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	210a      	movs	r1, #10
 800195e:	4832      	ldr	r0, [pc, #200]	; (8001a28 <FreqMenu_DrawPresetMenu+0x670>)
 8001960:	f00a fa60 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	b29a      	uxth	r2, r3
 8001968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2302      	movs	r3, #2
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	2178      	movs	r1, #120	; 0x78
 8001976:	482d      	ldr	r0, [pc, #180]	; (8001a2c <FreqMenu_DrawPresetMenu+0x674>)
 8001978:	f00a fa54 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	b29a      	uxth	r2, r3
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	2302      	movs	r3, #2
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	2178      	movs	r1, #120	; 0x78
 800198e:	4828      	ldr	r0, [pc, #160]	; (8001a30 <FreqMenu_DrawPresetMenu+0x678>)
 8001990:	f00a fa48 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001994:	7b7b      	ldrb	r3, [r7, #13]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	2302      	movs	r3, #2
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	2178      	movs	r1, #120	; 0x78
 80019a6:	4823      	ldr	r0, [pc, #140]	; (8001a34 <FreqMenu_DrawPresetMenu+0x67c>)
 80019a8:	f00a fa3c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2178      	movs	r1, #120	; 0x78
 80019be:	481e      	ldr	r0, [pc, #120]	; (8001a38 <FreqMenu_DrawPresetMenu+0x680>)
 80019c0:	f00a fa30 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2178      	movs	r1, #120	; 0x78
 80019d6:	4819      	ldr	r0, [pc, #100]	; (8001a3c <FreqMenu_DrawPresetMenu+0x684>)
 80019d8:	f00a fa24 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80019dc:	7abb      	ldrb	r3, [r7, #10]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	2302      	movs	r3, #2
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	2178      	movs	r1, #120	; 0x78
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <FreqMenu_DrawPresetMenu+0x688>)
 80019f0:	f00a fa18 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80019f4:	7a7b      	ldrb	r3, [r7, #9]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2302      	movs	r3, #2
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2178      	movs	r1, #120	; 0x78
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <FreqMenu_DrawPresetMenu+0x68c>)
 8001a08:	f00a fa0c 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8001a0c:	f000 bf37 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
 8001a10:	0800f4fc 	.word	0x0800f4fc
 8001a14:	0800f504 	.word	0x0800f504
 8001a18:	0800f50c 	.word	0x0800f50c
 8001a1c:	0800f514 	.word	0x0800f514
 8001a20:	0800f51c 	.word	0x0800f51c
 8001a24:	0800f524 	.word	0x0800f524
 8001a28:	0800f52c 	.word	0x0800f52c
 8001a2c:	0800f534 	.word	0x0800f534
 8001a30:	0800f53c 	.word	0x0800f53c
 8001a34:	0800f544 	.word	0x0800f544
 8001a38:	0800f54c 	.word	0x0800f54c
 8001a3c:	0800f554 	.word	0x0800f554
 8001a40:	0800f55c 	.word	0x0800f55c
 8001a44:	0800f564 	.word	0x0800f564
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2302      	movs	r3, #2
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	210a      	movs	r1, #10
 8001a5a:	48a5      	ldr	r0, [pc, #660]	; (8001cf0 <FreqMenu_DrawPresetMenu+0x938>)
 8001a5c:	f00a f9e2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a60:	7bbb      	ldrb	r3, [r7, #14]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	210a      	movs	r1, #10
 8001a72:	48a0      	ldr	r0, [pc, #640]	; (8001cf4 <FreqMenu_DrawPresetMenu+0x93c>)
 8001a74:	f00a f9d6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001a78:	7b7b      	ldrb	r3, [r7, #13]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	2302      	movs	r3, #2
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	210a      	movs	r1, #10
 8001a8a:	489b      	ldr	r0, [pc, #620]	; (8001cf8 <FreqMenu_DrawPresetMenu+0x940>)
 8001a8c:	f00a f9ca 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a90:	7b3b      	ldrb	r3, [r7, #12]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	210a      	movs	r1, #10
 8001aa2:	4896      	ldr	r0, [pc, #600]	; (8001cfc <FreqMenu_DrawPresetMenu+0x944>)
 8001aa4:	f00a f9be 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab8:	210a      	movs	r1, #10
 8001aba:	4891      	ldr	r0, [pc, #580]	; (8001d00 <FreqMenu_DrawPresetMenu+0x948>)
 8001abc:	f00a f9b2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001ac0:	7abb      	ldrb	r3, [r7, #10]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2302      	movs	r3, #2
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	488c      	ldr	r0, [pc, #560]	; (8001d04 <FreqMenu_DrawPresetMenu+0x94c>)
 8001ad4:	f00a f9a6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001ad8:	7a7b      	ldrb	r3, [r7, #9]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	210a      	movs	r1, #10
 8001aea:	4887      	ldr	r0, [pc, #540]	; (8001d08 <FreqMenu_DrawPresetMenu+0x950>)
 8001aec:	f00a f99a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4882      	ldr	r0, [pc, #520]	; (8001d0c <FreqMenu_DrawPresetMenu+0x954>)
 8001b04:	f00a f98e 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2302      	movs	r3, #2
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	487d      	ldr	r0, [pc, #500]	; (8001d10 <FreqMenu_DrawPresetMenu+0x958>)
 8001b1c:	f00a f982 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001b20:	7b7b      	ldrb	r3, [r7, #13]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2178      	movs	r1, #120	; 0x78
 8001b32:	4878      	ldr	r0, [pc, #480]	; (8001d14 <FreqMenu_DrawPresetMenu+0x95c>)
 8001b34:	f00a f976 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	2178      	movs	r1, #120	; 0x78
 8001b4a:	4873      	ldr	r0, [pc, #460]	; (8001d18 <FreqMenu_DrawPresetMenu+0x960>)
 8001b4c:	f00a f96a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	486e      	ldr	r0, [pc, #440]	; (8001d1c <FreqMenu_DrawPresetMenu+0x964>)
 8001b64:	f00a f95e 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001b68:	7abb      	ldrb	r3, [r7, #10]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2302      	movs	r3, #2
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2178      	movs	r1, #120	; 0x78
 8001b7a:	4869      	ldr	r0, [pc, #420]	; (8001d20 <FreqMenu_DrawPresetMenu+0x968>)
 8001b7c:	f00a f952 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2178      	movs	r1, #120	; 0x78
 8001b92:	4864      	ldr	r0, [pc, #400]	; (8001d24 <FreqMenu_DrawPresetMenu+0x96c>)
 8001b94:	f00a f946 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8001b98:	f000 be71 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	210a      	movs	r1, #10
 8001bae:	4850      	ldr	r0, [pc, #320]	; (8001cf0 <FreqMenu_DrawPresetMenu+0x938>)
 8001bb0:	f00a f938 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	210a      	movs	r1, #10
 8001bc6:	484b      	ldr	r0, [pc, #300]	; (8001cf4 <FreqMenu_DrawPresetMenu+0x93c>)
 8001bc8:	f00a f92c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001bcc:	7b7b      	ldrb	r3, [r7, #13]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	210a      	movs	r1, #10
 8001bde:	4846      	ldr	r0, [pc, #280]	; (8001cf8 <FreqMenu_DrawPresetMenu+0x940>)
 8001be0:	f00a f920 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001be4:	7b3b      	ldrb	r3, [r7, #12]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	2302      	movs	r3, #2
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	4841      	ldr	r0, [pc, #260]	; (8001cfc <FreqMenu_DrawPresetMenu+0x944>)
 8001bf8:	f00a f914 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2302      	movs	r3, #2
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	210a      	movs	r1, #10
 8001c0e:	483c      	ldr	r0, [pc, #240]	; (8001d00 <FreqMenu_DrawPresetMenu+0x948>)
 8001c10:	f00a f908 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001c14:	7abb      	ldrb	r3, [r7, #10]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c24:	210a      	movs	r1, #10
 8001c26:	4837      	ldr	r0, [pc, #220]	; (8001d04 <FreqMenu_DrawPresetMenu+0x94c>)
 8001c28:	f00a f8fc 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001c2c:	7a7b      	ldrb	r3, [r7, #9]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2302      	movs	r3, #2
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	210a      	movs	r1, #10
 8001c3e:	4832      	ldr	r0, [pc, #200]	; (8001d08 <FreqMenu_DrawPresetMenu+0x950>)
 8001c40:	f00a f8f0 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	2178      	movs	r1, #120	; 0x78
 8001c56:	482d      	ldr	r0, [pc, #180]	; (8001d0c <FreqMenu_DrawPresetMenu+0x954>)
 8001c58:	f00a f8e4 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c5c:	7bbb      	ldrb	r3, [r7, #14]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2302      	movs	r3, #2
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2178      	movs	r1, #120	; 0x78
 8001c6e:	4828      	ldr	r0, [pc, #160]	; (8001d10 <FreqMenu_DrawPresetMenu+0x958>)
 8001c70:	f00a f8d8 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	4823      	ldr	r0, [pc, #140]	; (8001d14 <FreqMenu_DrawPresetMenu+0x95c>)
 8001c88:	f00a f8cc 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2178      	movs	r1, #120	; 0x78
 8001c9e:	481e      	ldr	r0, [pc, #120]	; (8001d18 <FreqMenu_DrawPresetMenu+0x960>)
 8001ca0:	f00a f8c0 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	2302      	movs	r3, #2
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2178      	movs	r1, #120	; 0x78
 8001cb6:	4819      	ldr	r0, [pc, #100]	; (8001d1c <FreqMenu_DrawPresetMenu+0x964>)
 8001cb8:	f00a f8b4 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001cbc:	7abb      	ldrb	r3, [r7, #10]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2178      	movs	r1, #120	; 0x78
 8001cce:	4814      	ldr	r0, [pc, #80]	; (8001d20 <FreqMenu_DrawPresetMenu+0x968>)
 8001cd0:	f00a f8a8 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001cd4:	7a7b      	ldrb	r3, [r7, #9]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2178      	movs	r1, #120	; 0x78
 8001ce6:	480f      	ldr	r0, [pc, #60]	; (8001d24 <FreqMenu_DrawPresetMenu+0x96c>)
 8001ce8:	f00a f89c 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8001cec:	f000 bdc7 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
 8001cf0:	0800f4fc 	.word	0x0800f4fc
 8001cf4:	0800f504 	.word	0x0800f504
 8001cf8:	0800f50c 	.word	0x0800f50c
 8001cfc:	0800f514 	.word	0x0800f514
 8001d00:	0800f51c 	.word	0x0800f51c
 8001d04:	0800f524 	.word	0x0800f524
 8001d08:	0800f52c 	.word	0x0800f52c
 8001d0c:	0800f534 	.word	0x0800f534
 8001d10:	0800f53c 	.word	0x0800f53c
 8001d14:	0800f544 	.word	0x0800f544
 8001d18:	0800f54c 	.word	0x0800f54c
 8001d1c:	0800f554 	.word	0x0800f554
 8001d20:	0800f55c 	.word	0x0800f55c
 8001d24:	0800f564 	.word	0x0800f564
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	210a      	movs	r1, #10
 8001d3a:	48a5      	ldr	r0, [pc, #660]	; (8001fd0 <FreqMenu_DrawPresetMenu+0xc18>)
 8001d3c:	f00a f872 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	210a      	movs	r1, #10
 8001d52:	48a0      	ldr	r0, [pc, #640]	; (8001fd4 <FreqMenu_DrawPresetMenu+0xc1c>)
 8001d54:	f00a f866 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d58:	7b7b      	ldrb	r3, [r7, #13]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2302      	movs	r3, #2
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	210a      	movs	r1, #10
 8001d6a:	489b      	ldr	r0, [pc, #620]	; (8001fd8 <FreqMenu_DrawPresetMenu+0xc20>)
 8001d6c:	f00a f85a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001d70:	7b3b      	ldrb	r3, [r7, #12]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	210a      	movs	r1, #10
 8001d82:	4896      	ldr	r0, [pc, #600]	; (8001fdc <FreqMenu_DrawPresetMenu+0xc24>)
 8001d84:	f00a f84e 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2302      	movs	r3, #2
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	210a      	movs	r1, #10
 8001d9a:	4891      	ldr	r0, [pc, #580]	; (8001fe0 <FreqMenu_DrawPresetMenu+0xc28>)
 8001d9c:	f00a f842 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001da0:	7abb      	ldrb	r3, [r7, #10]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2302      	movs	r3, #2
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	210a      	movs	r1, #10
 8001db2:	488c      	ldr	r0, [pc, #560]	; (8001fe4 <FreqMenu_DrawPresetMenu+0xc2c>)
 8001db4:	f00a f836 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001db8:	7a7b      	ldrb	r3, [r7, #9]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc8:	210a      	movs	r1, #10
 8001dca:	4887      	ldr	r0, [pc, #540]	; (8001fe8 <FreqMenu_DrawPresetMenu+0xc30>)
 8001dcc:	f00a f82a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	4882      	ldr	r0, [pc, #520]	; (8001fec <FreqMenu_DrawPresetMenu+0xc34>)
 8001de4:	f00a f81e 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2302      	movs	r3, #2
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	487d      	ldr	r0, [pc, #500]	; (8001ff0 <FreqMenu_DrawPresetMenu+0xc38>)
 8001dfc:	f00a f812 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001e00:	7b7b      	ldrb	r3, [r7, #13]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2178      	movs	r1, #120	; 0x78
 8001e12:	4878      	ldr	r0, [pc, #480]	; (8001ff4 <FreqMenu_DrawPresetMenu+0xc3c>)
 8001e14:	f00a f806 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001e18:	7b3b      	ldrb	r3, [r7, #12]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2302      	movs	r3, #2
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	4873      	ldr	r0, [pc, #460]	; (8001ff8 <FreqMenu_DrawPresetMenu+0xc40>)
 8001e2c:	f009 fffa 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	486e      	ldr	r0, [pc, #440]	; (8001ffc <FreqMenu_DrawPresetMenu+0xc44>)
 8001e44:	f009 ffee 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2302      	movs	r3, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	2178      	movs	r1, #120	; 0x78
 8001e5a:	4869      	ldr	r0, [pc, #420]	; (8002000 <FreqMenu_DrawPresetMenu+0xc48>)
 8001e5c:	f009 ffe2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e60:	7a7b      	ldrb	r3, [r7, #9]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2178      	movs	r1, #120	; 0x78
 8001e72:	4864      	ldr	r0, [pc, #400]	; (8002004 <FreqMenu_DrawPresetMenu+0xc4c>)
 8001e74:	f009 ffd6 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8001e78:	f000 bd01 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	2302      	movs	r3, #2
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	210a      	movs	r1, #10
 8001e8e:	4850      	ldr	r0, [pc, #320]	; (8001fd0 <FreqMenu_DrawPresetMenu+0xc18>)
 8001e90:	f009 ffc8 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	210a      	movs	r1, #10
 8001ea6:	484b      	ldr	r0, [pc, #300]	; (8001fd4 <FreqMenu_DrawPresetMenu+0xc1c>)
 8001ea8:	f009 ffbc 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001eac:	7b7b      	ldrb	r3, [r7, #13]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	210a      	movs	r1, #10
 8001ebe:	4846      	ldr	r0, [pc, #280]	; (8001fd8 <FreqMenu_DrawPresetMenu+0xc20>)
 8001ec0:	f009 ffb0 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ec4:	7b3b      	ldrb	r3, [r7, #12]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	210a      	movs	r1, #10
 8001ed6:	4841      	ldr	r0, [pc, #260]	; (8001fdc <FreqMenu_DrawPresetMenu+0xc24>)
 8001ed8:	f009 ffa4 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	210a      	movs	r1, #10
 8001eee:	483c      	ldr	r0, [pc, #240]	; (8001fe0 <FreqMenu_DrawPresetMenu+0xc28>)
 8001ef0:	f009 ff98 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001ef4:	7abb      	ldrb	r3, [r7, #10]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2302      	movs	r3, #2
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	210a      	movs	r1, #10
 8001f06:	4837      	ldr	r0, [pc, #220]	; (8001fe4 <FreqMenu_DrawPresetMenu+0xc2c>)
 8001f08:	f009 ff8c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001f0c:	7a7b      	ldrb	r3, [r7, #9]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	210a      	movs	r1, #10
 8001f1e:	4832      	ldr	r0, [pc, #200]	; (8001fe8 <FreqMenu_DrawPresetMenu+0xc30>)
 8001f20:	f009 ff80 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f34:	2178      	movs	r1, #120	; 0x78
 8001f36:	482d      	ldr	r0, [pc, #180]	; (8001fec <FreqMenu_DrawPresetMenu+0xc34>)
 8001f38:	f009 ff74 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2302      	movs	r3, #2
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2178      	movs	r1, #120	; 0x78
 8001f4e:	4828      	ldr	r0, [pc, #160]	; (8001ff0 <FreqMenu_DrawPresetMenu+0xc38>)
 8001f50:	f009 ff68 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f54:	7b7b      	ldrb	r3, [r7, #13]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	2178      	movs	r1, #120	; 0x78
 8001f66:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <FreqMenu_DrawPresetMenu+0xc3c>)
 8001f68:	f009 ff5c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f6c:	7b3b      	ldrb	r3, [r7, #12]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2302      	movs	r3, #2
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2178      	movs	r1, #120	; 0x78
 8001f7e:	481e      	ldr	r0, [pc, #120]	; (8001ff8 <FreqMenu_DrawPresetMenu+0xc40>)
 8001f80:	f009 ff50 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2178      	movs	r1, #120	; 0x78
 8001f96:	4819      	ldr	r0, [pc, #100]	; (8001ffc <FreqMenu_DrawPresetMenu+0xc44>)
 8001f98:	f009 ff44 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f9c:	7abb      	ldrb	r3, [r7, #10]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	2178      	movs	r1, #120	; 0x78
 8001fae:	4814      	ldr	r0, [pc, #80]	; (8002000 <FreqMenu_DrawPresetMenu+0xc48>)
 8001fb0:	f009 ff38 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001fb4:	7a7b      	ldrb	r3, [r7, #9]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2178      	movs	r1, #120	; 0x78
 8001fc6:	480f      	ldr	r0, [pc, #60]	; (8002004 <FreqMenu_DrawPresetMenu+0xc4c>)
 8001fc8:	f009 ff2c 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8001fcc:	f000 bc57 	b.w	800287e <FreqMenu_DrawPresetMenu+0x14c6>
 8001fd0:	0800f4fc 	.word	0x0800f4fc
 8001fd4:	0800f504 	.word	0x0800f504
 8001fd8:	0800f50c 	.word	0x0800f50c
 8001fdc:	0800f514 	.word	0x0800f514
 8001fe0:	0800f51c 	.word	0x0800f51c
 8001fe4:	0800f524 	.word	0x0800f524
 8001fe8:	0800f52c 	.word	0x0800f52c
 8001fec:	0800f534 	.word	0x0800f534
 8001ff0:	0800f53c 	.word	0x0800f53c
 8001ff4:	0800f544 	.word	0x0800f544
 8001ff8:	0800f54c 	.word	0x0800f54c
 8001ffc:	0800f554 	.word	0x0800f554
 8002000:	0800f55c 	.word	0x0800f55c
 8002004:	0800f564 	.word	0x0800f564
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	b29a      	uxth	r2, r3
 800200c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2302      	movs	r3, #2
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	210a      	movs	r1, #10
 800201a:	48a4      	ldr	r0, [pc, #656]	; (80022ac <FreqMenu_DrawPresetMenu+0xef4>)
 800201c:	f009 ff02 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002020:	7bbb      	ldrb	r3, [r7, #14]
 8002022:	b29a      	uxth	r2, r3
 8002024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	2302      	movs	r3, #2
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	210a      	movs	r1, #10
 8002032:	489f      	ldr	r0, [pc, #636]	; (80022b0 <FreqMenu_DrawPresetMenu+0xef8>)
 8002034:	f009 fef6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002038:	7b7b      	ldrb	r3, [r7, #13]
 800203a:	b29a      	uxth	r2, r3
 800203c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	2302      	movs	r3, #2
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	210a      	movs	r1, #10
 800204a:	489a      	ldr	r0, [pc, #616]	; (80022b4 <FreqMenu_DrawPresetMenu+0xefc>)
 800204c:	f009 feea 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002050:	7b3b      	ldrb	r3, [r7, #12]
 8002052:	b29a      	uxth	r2, r3
 8002054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2302      	movs	r3, #2
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	210a      	movs	r1, #10
 8002062:	4895      	ldr	r0, [pc, #596]	; (80022b8 <FreqMenu_DrawPresetMenu+0xf00>)
 8002064:	f009 fede 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2302      	movs	r3, #2
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	210a      	movs	r1, #10
 800207a:	4890      	ldr	r0, [pc, #576]	; (80022bc <FreqMenu_DrawPresetMenu+0xf04>)
 800207c:	f009 fed2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002080:	7abb      	ldrb	r3, [r7, #10]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	210a      	movs	r1, #10
 8002092:	488b      	ldr	r0, [pc, #556]	; (80022c0 <FreqMenu_DrawPresetMenu+0xf08>)
 8002094:	f009 fec6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002098:	7a7b      	ldrb	r3, [r7, #9]
 800209a:	b29a      	uxth	r2, r3
 800209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2302      	movs	r3, #2
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	210a      	movs	r1, #10
 80020aa:	4886      	ldr	r0, [pc, #536]	; (80022c4 <FreqMenu_DrawPresetMenu+0xf0c>)
 80020ac:	f009 feba 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	2178      	movs	r1, #120	; 0x78
 80020c2:	4881      	ldr	r0, [pc, #516]	; (80022c8 <FreqMenu_DrawPresetMenu+0xf10>)
 80020c4:	f009 feae 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 80020c8:	7bbb      	ldrb	r3, [r7, #14]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	487c      	ldr	r0, [pc, #496]	; (80022cc <FreqMenu_DrawPresetMenu+0xf14>)
 80020dc:	f009 fea2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80020e0:	7b7b      	ldrb	r3, [r7, #13]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2302      	movs	r3, #2
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2178      	movs	r1, #120	; 0x78
 80020f2:	4877      	ldr	r0, [pc, #476]	; (80022d0 <FreqMenu_DrawPresetMenu+0xf18>)
 80020f4:	f009 fe96 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80020f8:	7b3b      	ldrb	r3, [r7, #12]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2302      	movs	r3, #2
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2178      	movs	r1, #120	; 0x78
 800210a:	4872      	ldr	r0, [pc, #456]	; (80022d4 <FreqMenu_DrawPresetMenu+0xf1c>)
 800210c:	f009 fe8a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	b29a      	uxth	r2, r3
 8002114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	2302      	movs	r3, #2
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	2178      	movs	r1, #120	; 0x78
 8002122:	486d      	ldr	r0, [pc, #436]	; (80022d8 <FreqMenu_DrawPresetMenu+0xf20>)
 8002124:	f009 fe7e 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002128:	7abb      	ldrb	r3, [r7, #10]
 800212a:	b29a      	uxth	r2, r3
 800212c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	2302      	movs	r3, #2
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	2178      	movs	r1, #120	; 0x78
 800213a:	4868      	ldr	r0, [pc, #416]	; (80022dc <FreqMenu_DrawPresetMenu+0xf24>)
 800213c:	f009 fe72 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002140:	7a7b      	ldrb	r3, [r7, #9]
 8002142:	b29a      	uxth	r2, r3
 8002144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2302      	movs	r3, #2
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	2178      	movs	r1, #120	; 0x78
 8002152:	4863      	ldr	r0, [pc, #396]	; (80022e0 <FreqMenu_DrawPresetMenu+0xf28>)
 8002154:	f009 fe66 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002158:	e391      	b.n	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	b29a      	uxth	r2, r3
 800215e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2302      	movs	r3, #2
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	210a      	movs	r1, #10
 800216c:	484f      	ldr	r0, [pc, #316]	; (80022ac <FreqMenu_DrawPresetMenu+0xef4>)
 800216e:	f009 fe59 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002172:	7bbb      	ldrb	r3, [r7, #14]
 8002174:	b29a      	uxth	r2, r3
 8002176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2302      	movs	r3, #2
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	210a      	movs	r1, #10
 8002184:	484a      	ldr	r0, [pc, #296]	; (80022b0 <FreqMenu_DrawPresetMenu+0xef8>)
 8002186:	f009 fe4d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	b29a      	uxth	r2, r3
 800218e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	2302      	movs	r3, #2
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2300      	movs	r3, #0
 800219a:	210a      	movs	r1, #10
 800219c:	4845      	ldr	r0, [pc, #276]	; (80022b4 <FreqMenu_DrawPresetMenu+0xefc>)
 800219e:	f009 fe41 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80021a2:	7b3b      	ldrb	r3, [r7, #12]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	210a      	movs	r1, #10
 80021b4:	4840      	ldr	r0, [pc, #256]	; (80022b8 <FreqMenu_DrawPresetMenu+0xf00>)
 80021b6:	f009 fe35 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	210a      	movs	r1, #10
 80021cc:	483b      	ldr	r0, [pc, #236]	; (80022bc <FreqMenu_DrawPresetMenu+0xf04>)
 80021ce:	f009 fe29 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80021d2:	7abb      	ldrb	r3, [r7, #10]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	2302      	movs	r3, #2
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2300      	movs	r3, #0
 80021e2:	210a      	movs	r1, #10
 80021e4:	4836      	ldr	r0, [pc, #216]	; (80022c0 <FreqMenu_DrawPresetMenu+0xf08>)
 80021e6:	f009 fe1d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80021ea:	7a7b      	ldrb	r3, [r7, #9]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2302      	movs	r3, #2
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	210a      	movs	r1, #10
 80021fc:	4831      	ldr	r0, [pc, #196]	; (80022c4 <FreqMenu_DrawPresetMenu+0xf0c>)
 80021fe:	f009 fe11 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	b29a      	uxth	r2, r3
 8002206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2302      	movs	r3, #2
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	2178      	movs	r1, #120	; 0x78
 8002214:	482c      	ldr	r0, [pc, #176]	; (80022c8 <FreqMenu_DrawPresetMenu+0xf10>)
 8002216:	f009 fe05 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800221a:	7bbb      	ldrb	r3, [r7, #14]
 800221c:	b29a      	uxth	r2, r3
 800221e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	2178      	movs	r1, #120	; 0x78
 800222c:	4827      	ldr	r0, [pc, #156]	; (80022cc <FreqMenu_DrawPresetMenu+0xf14>)
 800222e:	f009 fdf9 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 8002232:	7b7b      	ldrb	r3, [r7, #13]
 8002234:	b29a      	uxth	r2, r3
 8002236:	2300      	movs	r3, #0
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2302      	movs	r3, #2
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002242:	2178      	movs	r1, #120	; 0x78
 8002244:	4822      	ldr	r0, [pc, #136]	; (80022d0 <FreqMenu_DrawPresetMenu+0xf18>)
 8002246:	f009 fded 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800224a:	7b3b      	ldrb	r3, [r7, #12]
 800224c:	b29a      	uxth	r2, r3
 800224e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	2178      	movs	r1, #120	; 0x78
 800225c:	481d      	ldr	r0, [pc, #116]	; (80022d4 <FreqMenu_DrawPresetMenu+0xf1c>)
 800225e:	f009 fde1 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002262:	7afb      	ldrb	r3, [r7, #11]
 8002264:	b29a      	uxth	r2, r3
 8002266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	2178      	movs	r1, #120	; 0x78
 8002274:	4818      	ldr	r0, [pc, #96]	; (80022d8 <FreqMenu_DrawPresetMenu+0xf20>)
 8002276:	f009 fdd5 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800227a:	7abb      	ldrb	r3, [r7, #10]
 800227c:	b29a      	uxth	r2, r3
 800227e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	2178      	movs	r1, #120	; 0x78
 800228c:	4813      	ldr	r0, [pc, #76]	; (80022dc <FreqMenu_DrawPresetMenu+0xf24>)
 800228e:	f009 fdc9 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002292:	7a7b      	ldrb	r3, [r7, #9]
 8002294:	b29a      	uxth	r2, r3
 8002296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2300      	movs	r3, #0
 80022a2:	2178      	movs	r1, #120	; 0x78
 80022a4:	480e      	ldr	r0, [pc, #56]	; (80022e0 <FreqMenu_DrawPresetMenu+0xf28>)
 80022a6:	f009 fdbd 	bl	800be24 <ILI9341_Draw_Text>
				break;
 80022aa:	e2e8      	b.n	800287e <FreqMenu_DrawPresetMenu+0x14c6>
 80022ac:	0800f4fc 	.word	0x0800f4fc
 80022b0:	0800f504 	.word	0x0800f504
 80022b4:	0800f50c 	.word	0x0800f50c
 80022b8:	0800f514 	.word	0x0800f514
 80022bc:	0800f51c 	.word	0x0800f51c
 80022c0:	0800f524 	.word	0x0800f524
 80022c4:	0800f52c 	.word	0x0800f52c
 80022c8:	0800f534 	.word	0x0800f534
 80022cc:	0800f53c 	.word	0x0800f53c
 80022d0:	0800f544 	.word	0x0800f544
 80022d4:	0800f54c 	.word	0x0800f54c
 80022d8:	0800f554 	.word	0x0800f554
 80022dc:	0800f55c 	.word	0x0800f55c
 80022e0:	0800f564 	.word	0x0800f564
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2302      	movs	r3, #2
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	210a      	movs	r1, #10
 80022f6:	48a4      	ldr	r0, [pc, #656]	; (8002588 <FreqMenu_DrawPresetMenu+0x11d0>)
 80022f8:	f009 fd94 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	2302      	movs	r3, #2
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2300      	movs	r3, #0
 800230c:	210a      	movs	r1, #10
 800230e:	489f      	ldr	r0, [pc, #636]	; (800258c <FreqMenu_DrawPresetMenu+0x11d4>)
 8002310:	f009 fd88 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002314:	7b7b      	ldrb	r3, [r7, #13]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2302      	movs	r3, #2
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	210a      	movs	r1, #10
 8002326:	489a      	ldr	r0, [pc, #616]	; (8002590 <FreqMenu_DrawPresetMenu+0x11d8>)
 8002328:	f009 fd7c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800232c:	7b3b      	ldrb	r3, [r7, #12]
 800232e:	b29a      	uxth	r2, r3
 8002330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2302      	movs	r3, #2
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	210a      	movs	r1, #10
 800233e:	4895      	ldr	r0, [pc, #596]	; (8002594 <FreqMenu_DrawPresetMenu+0x11dc>)
 8002340:	f009 fd70 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2302      	movs	r3, #2
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	210a      	movs	r1, #10
 8002356:	4890      	ldr	r0, [pc, #576]	; (8002598 <FreqMenu_DrawPresetMenu+0x11e0>)
 8002358:	f009 fd64 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800235c:	7abb      	ldrb	r3, [r7, #10]
 800235e:	b29a      	uxth	r2, r3
 8002360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	2302      	movs	r3, #2
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	210a      	movs	r1, #10
 800236e:	488b      	ldr	r0, [pc, #556]	; (800259c <FreqMenu_DrawPresetMenu+0x11e4>)
 8002370:	f009 fd58 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002374:	7a7b      	ldrb	r3, [r7, #9]
 8002376:	b29a      	uxth	r2, r3
 8002378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2302      	movs	r3, #2
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	210a      	movs	r1, #10
 8002386:	4886      	ldr	r0, [pc, #536]	; (80025a0 <FreqMenu_DrawPresetMenu+0x11e8>)
 8002388:	f009 fd4c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2302      	movs	r3, #2
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	4881      	ldr	r0, [pc, #516]	; (80025a4 <FreqMenu_DrawPresetMenu+0x11ec>)
 80023a0:	f009 fd40 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80023a4:	7bbb      	ldrb	r3, [r7, #14]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	2302      	movs	r3, #2
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	2178      	movs	r1, #120	; 0x78
 80023b6:	487c      	ldr	r0, [pc, #496]	; (80025a8 <FreqMenu_DrawPresetMenu+0x11f0>)
 80023b8:	f009 fd34 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80023bc:	7b7b      	ldrb	r3, [r7, #13]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	2302      	movs	r3, #2
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	2178      	movs	r1, #120	; 0x78
 80023ce:	4877      	ldr	r0, [pc, #476]	; (80025ac <FreqMenu_DrawPresetMenu+0x11f4>)
 80023d0:	f009 fd28 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 80023d4:	7b3b      	ldrb	r3, [r7, #12]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	2302      	movs	r3, #2
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e4:	2178      	movs	r1, #120	; 0x78
 80023e6:	4872      	ldr	r0, [pc, #456]	; (80025b0 <FreqMenu_DrawPresetMenu+0x11f8>)
 80023e8:	f009 fd1c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80023ec:	7afb      	ldrb	r3, [r7, #11]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	2302      	movs	r3, #2
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	2178      	movs	r1, #120	; 0x78
 80023fe:	486d      	ldr	r0, [pc, #436]	; (80025b4 <FreqMenu_DrawPresetMenu+0x11fc>)
 8002400:	f009 fd10 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002404:	7abb      	ldrb	r3, [r7, #10]
 8002406:	b29a      	uxth	r2, r3
 8002408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	2302      	movs	r3, #2
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	2178      	movs	r1, #120	; 0x78
 8002416:	4868      	ldr	r0, [pc, #416]	; (80025b8 <FreqMenu_DrawPresetMenu+0x1200>)
 8002418:	f009 fd04 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800241c:	7a7b      	ldrb	r3, [r7, #9]
 800241e:	b29a      	uxth	r2, r3
 8002420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2302      	movs	r3, #2
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2178      	movs	r1, #120	; 0x78
 800242e:	4863      	ldr	r0, [pc, #396]	; (80025bc <FreqMenu_DrawPresetMenu+0x1204>)
 8002430:	f009 fcf8 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002434:	e223      	b.n	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	b29a      	uxth	r2, r3
 800243a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2302      	movs	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	210a      	movs	r1, #10
 8002448:	484f      	ldr	r0, [pc, #316]	; (8002588 <FreqMenu_DrawPresetMenu+0x11d0>)
 800244a:	f009 fceb 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800244e:	7bbb      	ldrb	r3, [r7, #14]
 8002450:	b29a      	uxth	r2, r3
 8002452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2302      	movs	r3, #2
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2300      	movs	r3, #0
 800245e:	210a      	movs	r1, #10
 8002460:	484a      	ldr	r0, [pc, #296]	; (800258c <FreqMenu_DrawPresetMenu+0x11d4>)
 8002462:	f009 fcdf 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002466:	7b7b      	ldrb	r3, [r7, #13]
 8002468:	b29a      	uxth	r2, r3
 800246a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2302      	movs	r3, #2
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2300      	movs	r3, #0
 8002476:	210a      	movs	r1, #10
 8002478:	4845      	ldr	r0, [pc, #276]	; (8002590 <FreqMenu_DrawPresetMenu+0x11d8>)
 800247a:	f009 fcd3 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800247e:	7b3b      	ldrb	r3, [r7, #12]
 8002480:	b29a      	uxth	r2, r3
 8002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	210a      	movs	r1, #10
 8002490:	4840      	ldr	r0, [pc, #256]	; (8002594 <FreqMenu_DrawPresetMenu+0x11dc>)
 8002492:	f009 fcc7 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002496:	7afb      	ldrb	r3, [r7, #11]
 8002498:	b29a      	uxth	r2, r3
 800249a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2300      	movs	r3, #0
 80024a6:	210a      	movs	r1, #10
 80024a8:	483b      	ldr	r0, [pc, #236]	; (8002598 <FreqMenu_DrawPresetMenu+0x11e0>)
 80024aa:	f009 fcbb 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80024ae:	7abb      	ldrb	r3, [r7, #10]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	210a      	movs	r1, #10
 80024c0:	4836      	ldr	r0, [pc, #216]	; (800259c <FreqMenu_DrawPresetMenu+0x11e4>)
 80024c2:	f009 fcaf 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80024c6:	7a7b      	ldrb	r3, [r7, #9]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	210a      	movs	r1, #10
 80024d8:	4831      	ldr	r0, [pc, #196]	; (80025a0 <FreqMenu_DrawPresetMenu+0x11e8>)
 80024da:	f009 fca3 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2178      	movs	r1, #120	; 0x78
 80024f0:	482c      	ldr	r0, [pc, #176]	; (80025a4 <FreqMenu_DrawPresetMenu+0x11ec>)
 80024f2:	f009 fc97 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	2178      	movs	r1, #120	; 0x78
 8002508:	4827      	ldr	r0, [pc, #156]	; (80025a8 <FreqMenu_DrawPresetMenu+0x11f0>)
 800250a:	f009 fc8b 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800250e:	7b7b      	ldrb	r3, [r7, #13]
 8002510:	b29a      	uxth	r2, r3
 8002512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2300      	movs	r3, #0
 800251e:	2178      	movs	r1, #120	; 0x78
 8002520:	4822      	ldr	r0, [pc, #136]	; (80025ac <FreqMenu_DrawPresetMenu+0x11f4>)
 8002522:	f009 fc7f 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002526:	7b3b      	ldrb	r3, [r7, #12]
 8002528:	b29a      	uxth	r2, r3
 800252a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	2178      	movs	r1, #120	; 0x78
 8002538:	481d      	ldr	r0, [pc, #116]	; (80025b0 <FreqMenu_DrawPresetMenu+0x11f8>)
 800253a:	f009 fc73 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	b29a      	uxth	r2, r3
 8002542:	2300      	movs	r3, #0
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2302      	movs	r3, #2
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800254e:	2178      	movs	r1, #120	; 0x78
 8002550:	4818      	ldr	r0, [pc, #96]	; (80025b4 <FreqMenu_DrawPresetMenu+0x11fc>)
 8002552:	f009 fc67 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002556:	7abb      	ldrb	r3, [r7, #10]
 8002558:	b29a      	uxth	r2, r3
 800255a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2300      	movs	r3, #0
 8002566:	2178      	movs	r1, #120	; 0x78
 8002568:	4813      	ldr	r0, [pc, #76]	; (80025b8 <FreqMenu_DrawPresetMenu+0x1200>)
 800256a:	f009 fc5b 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800256e:	7a7b      	ldrb	r3, [r7, #9]
 8002570:	b29a      	uxth	r2, r3
 8002572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	2178      	movs	r1, #120	; 0x78
 8002580:	480e      	ldr	r0, [pc, #56]	; (80025bc <FreqMenu_DrawPresetMenu+0x1204>)
 8002582:	f009 fc4f 	bl	800be24 <ILI9341_Draw_Text>
			break;
 8002586:	e17a      	b.n	800287e <FreqMenu_DrawPresetMenu+0x14c6>
 8002588:	0800f4fc 	.word	0x0800f4fc
 800258c:	0800f504 	.word	0x0800f504
 8002590:	0800f50c 	.word	0x0800f50c
 8002594:	0800f514 	.word	0x0800f514
 8002598:	0800f51c 	.word	0x0800f51c
 800259c:	0800f524 	.word	0x0800f524
 80025a0:	0800f52c 	.word	0x0800f52c
 80025a4:	0800f534 	.word	0x0800f534
 80025a8:	0800f53c 	.word	0x0800f53c
 80025ac:	0800f544 	.word	0x0800f544
 80025b0:	0800f54c 	.word	0x0800f54c
 80025b4:	0800f554 	.word	0x0800f554
 80025b8:	0800f55c 	.word	0x0800f55c
 80025bc:	0800f564 	.word	0x0800f564
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2300      	movs	r3, #0
 80025d0:	210a      	movs	r1, #10
 80025d2:	48ad      	ldr	r0, [pc, #692]	; (8002888 <FreqMenu_DrawPresetMenu+0x14d0>)
 80025d4:	f009 fc26 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2300      	movs	r3, #0
 80025e8:	210a      	movs	r1, #10
 80025ea:	48a8      	ldr	r0, [pc, #672]	; (800288c <FreqMenu_DrawPresetMenu+0x14d4>)
 80025ec:	f009 fc1a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80025f0:	7b7b      	ldrb	r3, [r7, #13]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2302      	movs	r3, #2
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	210a      	movs	r1, #10
 8002602:	48a3      	ldr	r0, [pc, #652]	; (8002890 <FreqMenu_DrawPresetMenu+0x14d8>)
 8002604:	f009 fc0e 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002608:	7b3b      	ldrb	r3, [r7, #12]
 800260a:	b29a      	uxth	r2, r3
 800260c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	210a      	movs	r1, #10
 800261a:	489e      	ldr	r0, [pc, #632]	; (8002894 <FreqMenu_DrawPresetMenu+0x14dc>)
 800261c:	f009 fc02 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2302      	movs	r3, #2
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	210a      	movs	r1, #10
 8002632:	4899      	ldr	r0, [pc, #612]	; (8002898 <FreqMenu_DrawPresetMenu+0x14e0>)
 8002634:	f009 fbf6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002638:	7abb      	ldrb	r3, [r7, #10]
 800263a:	b29a      	uxth	r2, r3
 800263c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	210a      	movs	r1, #10
 800264a:	4894      	ldr	r0, [pc, #592]	; (800289c <FreqMenu_DrawPresetMenu+0x14e4>)
 800264c:	f009 fbea 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002650:	7a7b      	ldrb	r3, [r7, #9]
 8002652:	b29a      	uxth	r2, r3
 8002654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	210a      	movs	r1, #10
 8002662:	488f      	ldr	r0, [pc, #572]	; (80028a0 <FreqMenu_DrawPresetMenu+0x14e8>)
 8002664:	f009 fbde 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	2178      	movs	r1, #120	; 0x78
 800267a:	488a      	ldr	r0, [pc, #552]	; (80028a4 <FreqMenu_DrawPresetMenu+0x14ec>)
 800267c:	f009 fbd2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002680:	7bbb      	ldrb	r3, [r7, #14]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2302      	movs	r3, #2
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	2178      	movs	r1, #120	; 0x78
 8002692:	4885      	ldr	r0, [pc, #532]	; (80028a8 <FreqMenu_DrawPresetMenu+0x14f0>)
 8002694:	f009 fbc6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002698:	7b7b      	ldrb	r3, [r7, #13]
 800269a:	b29a      	uxth	r2, r3
 800269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2302      	movs	r3, #2
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	2178      	movs	r1, #120	; 0x78
 80026aa:	4880      	ldr	r0, [pc, #512]	; (80028ac <FreqMenu_DrawPresetMenu+0x14f4>)
 80026ac:	f009 fbba 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80026b0:	7b3b      	ldrb	r3, [r7, #12]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2302      	movs	r3, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	2178      	movs	r1, #120	; 0x78
 80026c2:	487b      	ldr	r0, [pc, #492]	; (80028b0 <FreqMenu_DrawPresetMenu+0x14f8>)
 80026c4:	f009 fbae 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2302      	movs	r3, #2
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	2178      	movs	r1, #120	; 0x78
 80026da:	4876      	ldr	r0, [pc, #472]	; (80028b4 <FreqMenu_DrawPresetMenu+0x14fc>)
 80026dc:	f009 fba2 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 80026e0:	7abb      	ldrb	r3, [r7, #10]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	2300      	movs	r3, #0
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	2302      	movs	r3, #2
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f0:	2178      	movs	r1, #120	; 0x78
 80026f2:	4871      	ldr	r0, [pc, #452]	; (80028b8 <FreqMenu_DrawPresetMenu+0x1500>)
 80026f4:	f009 fb96 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80026f8:	7a7b      	ldrb	r3, [r7, #9]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2302      	movs	r3, #2
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2300      	movs	r3, #0
 8002708:	2178      	movs	r1, #120	; 0x78
 800270a:	486c      	ldr	r0, [pc, #432]	; (80028bc <FreqMenu_DrawPresetMenu+0x1504>)
 800270c:	f009 fb8a 	bl	800be24 <ILI9341_Draw_Text>
			break;
 8002710:	e0b5      	b.n	800287e <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	b29a      	uxth	r2, r3
 8002716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	210a      	movs	r1, #10
 8002724:	4858      	ldr	r0, [pc, #352]	; (8002888 <FreqMenu_DrawPresetMenu+0x14d0>)
 8002726:	f009 fb7d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800272a:	7bbb      	ldrb	r3, [r7, #14]
 800272c:	b29a      	uxth	r2, r3
 800272e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2302      	movs	r3, #2
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	210a      	movs	r1, #10
 800273c:	4853      	ldr	r0, [pc, #332]	; (800288c <FreqMenu_DrawPresetMenu+0x14d4>)
 800273e:	f009 fb71 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002742:	7b7b      	ldrb	r3, [r7, #13]
 8002744:	b29a      	uxth	r2, r3
 8002746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2302      	movs	r3, #2
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	210a      	movs	r1, #10
 8002754:	484e      	ldr	r0, [pc, #312]	; (8002890 <FreqMenu_DrawPresetMenu+0x14d8>)
 8002756:	f009 fb65 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800275a:	7b3b      	ldrb	r3, [r7, #12]
 800275c:	b29a      	uxth	r2, r3
 800275e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2302      	movs	r3, #2
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	210a      	movs	r1, #10
 800276c:	4849      	ldr	r0, [pc, #292]	; (8002894 <FreqMenu_DrawPresetMenu+0x14dc>)
 800276e:	f009 fb59 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	b29a      	uxth	r2, r3
 8002776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	210a      	movs	r1, #10
 8002784:	4844      	ldr	r0, [pc, #272]	; (8002898 <FreqMenu_DrawPresetMenu+0x14e0>)
 8002786:	f009 fb4d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800278a:	7abb      	ldrb	r3, [r7, #10]
 800278c:	b29a      	uxth	r2, r3
 800278e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2300      	movs	r3, #0
 800279a:	210a      	movs	r1, #10
 800279c:	483f      	ldr	r0, [pc, #252]	; (800289c <FreqMenu_DrawPresetMenu+0x14e4>)
 800279e:	f009 fb41 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80027a2:	7a7b      	ldrb	r3, [r7, #9]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	210a      	movs	r1, #10
 80027b4:	483a      	ldr	r0, [pc, #232]	; (80028a0 <FreqMenu_DrawPresetMenu+0x14e8>)
 80027b6:	f009 fb35 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	2178      	movs	r1, #120	; 0x78
 80027cc:	4835      	ldr	r0, [pc, #212]	; (80028a4 <FreqMenu_DrawPresetMenu+0x14ec>)
 80027ce:	f009 fb29 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80027d2:	7bbb      	ldrb	r3, [r7, #14]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2300      	movs	r3, #0
 80027e2:	2178      	movs	r1, #120	; 0x78
 80027e4:	4830      	ldr	r0, [pc, #192]	; (80028a8 <FreqMenu_DrawPresetMenu+0x14f0>)
 80027e6:	f009 fb1d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80027ea:	7b7b      	ldrb	r3, [r7, #13]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2300      	movs	r3, #0
 80027fa:	2178      	movs	r1, #120	; 0x78
 80027fc:	482b      	ldr	r0, [pc, #172]	; (80028ac <FreqMenu_DrawPresetMenu+0x14f4>)
 80027fe:	f009 fb11 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002802:	7b3b      	ldrb	r3, [r7, #12]
 8002804:	b29a      	uxth	r2, r3
 8002806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	2178      	movs	r1, #120	; 0x78
 8002814:	4826      	ldr	r0, [pc, #152]	; (80028b0 <FreqMenu_DrawPresetMenu+0x14f8>)
 8002816:	f009 fb05 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800281a:	7afb      	ldrb	r3, [r7, #11]
 800281c:	b29a      	uxth	r2, r3
 800281e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	2178      	movs	r1, #120	; 0x78
 800282c:	4821      	ldr	r0, [pc, #132]	; (80028b4 <FreqMenu_DrawPresetMenu+0x14fc>)
 800282e:	f009 faf9 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002832:	7abb      	ldrb	r3, [r7, #10]
 8002834:	b29a      	uxth	r2, r3
 8002836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	2178      	movs	r1, #120	; 0x78
 8002844:	481c      	ldr	r0, [pc, #112]	; (80028b8 <FreqMenu_DrawPresetMenu+0x1500>)
 8002846:	f009 faed 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 800284a:	7a7b      	ldrb	r3, [r7, #9]
 800284c:	b29a      	uxth	r2, r3
 800284e:	2300      	movs	r3, #0
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800285a:	2178      	movs	r1, #120	; 0x78
 800285c:	4817      	ldr	r0, [pc, #92]	; (80028bc <FreqMenu_DrawPresetMenu+0x1504>)
 800285e:	f009 fae1 	bl	800be24 <ILI9341_Draw_Text>
			break;
 8002862:	bf00      	nop
 8002864:	e00b      	b.n	800287e <FreqMenu_DrawPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2301      	movs	r3, #1
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002872:	22b4      	movs	r2, #180	; 0xb4
 8002874:	210a      	movs	r1, #10
 8002876:	4812      	ldr	r0, [pc, #72]	; (80028c0 <FreqMenu_DrawPresetMenu+0x1508>)
 8002878:	f009 fad4 	bl	800be24 <ILI9341_Draw_Text>
}
 800287c:	e7ff      	b.n	800287e <FreqMenu_DrawPresetMenu+0x14c6>
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	0800f4fc 	.word	0x0800f4fc
 800288c:	0800f504 	.word	0x0800f504
 8002890:	0800f50c 	.word	0x0800f50c
 8002894:	0800f514 	.word	0x0800f514
 8002898:	0800f51c 	.word	0x0800f51c
 800289c:	0800f524 	.word	0x0800f524
 80028a0:	0800f52c 	.word	0x0800f52c
 80028a4:	0800f534 	.word	0x0800f534
 80028a8:	0800f53c 	.word	0x0800f53c
 80028ac:	0800f544 	.word	0x0800f544
 80028b0:	0800f54c 	.word	0x0800f54c
 80028b4:	0800f554 	.word	0x0800f554
 80028b8:	0800f55c 	.word	0x0800f55c
 80028bc:	0800f564 	.word	0x0800f564
 80028c0:	0800f570 	.word	0x0800f570

080028c4 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 80028ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2301      	movs	r3, #1
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2300      	movs	r3, #0
 80028d6:	2296      	movs	r2, #150	; 0x96
 80028d8:	210a      	movs	r1, #10
 80028da:	4811      	ldr	r0, [pc, #68]	; (8002920 <FreqMenu_DrawAdjustMenu+0x5c>)
 80028dc:	f009 faa2 	bl	800be24 <ILI9341_Draw_Text>

	char freq[6] = "";
 80028e0:	2300      	movs	r3, #0
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	2300      	movs	r3, #0
 80028e6:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 80028e8:	f001 f9ac 	bl	8003c44 <FreqO_GetOutputFreq>
 80028ec:	4603      	mov	r3, r0
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	4639      	mov	r1, r7
 80028f2:	2206      	movs	r2, #6
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fc85 	bl	8001204 <DM_AddDigitPadding>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <FreqMenu_DrawAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002900:	4638      	mov	r0, r7
 8002902:	2300      	movs	r3, #0
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2301      	movs	r3, #1
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800290e:	2296      	movs	r2, #150	; 0x96
 8002910:	21fa      	movs	r1, #250	; 0xfa
 8002912:	f009 fa87 	bl	800be24 <ILI9341_Draw_Text>


}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	0800f5a0 	.word	0x0800f5a0

08002924 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d007      	beq.n	8002944 <FuncMenu_DrawMenu+0x20>
 8002934:	2b03      	cmp	r3, #3
 8002936:	d008      	beq.n	800294a <FuncMenu_DrawMenu+0x26>
 8002938:	2b01      	cmp	r3, #1
 800293a:	d000      	beq.n	800293e <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawSyncMenu();
			break;

		default:
			break;
 800293c:	e008      	b.n	8002950 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawMainMenu();
 800293e:	f000 f80b 	bl	8002958 <FuncMenu_DrawMainMenu>
			break;
 8002942:	e005      	b.n	8002950 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSignalMenu();
 8002944:	f000 f84e 	bl	80029e4 <FuncMenu_DrawSignalMenu>
			break;
 8002948:	e002      	b.n	8002950 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSyncMenu();
 800294a:	f000 fa27 	bl	8002d9c <FuncMenu_DrawSyncMenu>
			break;
 800294e:	bf00      	nop

	}
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("FUNCTION MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2303      	movs	r3, #3
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296a:	220a      	movs	r2, #10
 800296c:	210a      	movs	r1, #10
 800296e:	4819      	ldr	r0, [pc, #100]	; (80029d4 <FuncMenu_DrawMainMenu+0x7c>)
 8002970:	f009 fa58 	bl	800be24 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 8002974:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	22d2      	movs	r2, #210	; 0xd2
 8002982:	210a      	movs	r1, #10
 8002984:	4814      	ldr	r0, [pc, #80]	; (80029d8 <FuncMenu_DrawMainMenu+0x80>)
 8002986:	f009 fa4d 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 800298a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	2302      	movs	r3, #2
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2300      	movs	r3, #0
 8002996:	22d2      	movs	r2, #210	; 0xd2
 8002998:	2164      	movs	r1, #100	; 0x64
 800299a:	4810      	ldr	r0, [pc, #64]	; (80029dc <FuncMenu_DrawMainMenu+0x84>)
 800299c:	f009 fa42 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 80029a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	2302      	movs	r3, #2
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2300      	movs	r3, #0
 80029ac:	22d2      	movs	r2, #210	; 0xd2
 80029ae:	21af      	movs	r1, #175	; 0xaf
 80029b0:	480b      	ldr	r0, [pc, #44]	; (80029e0 <FuncMenu_DrawMainMenu+0x88>)
 80029b2:	f009 fa37 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 80029b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2302      	movs	r3, #2
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2300      	movs	r3, #0
 80029c2:	22d2      	movs	r2, #210	; 0xd2
 80029c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <FuncMenu_DrawMainMenu+0x88>)
 80029ca:	f009 fa2b 	bl	800be24 <ILI9341_Draw_Text>
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	0800f5d0 	.word	0x0800f5d0
 80029d8:	0800f5e4 	.word	0x0800f5e4
 80029dc:	0800f5ec 	.word	0x0800f5ec
 80029e0:	0800f5f4 	.word	0x0800f5f4

080029e4 <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL FUNCTION", 	10, 10, WHITE, 3, BLACK);
 80029ea:	2300      	movs	r3, #0
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	2303      	movs	r3, #3
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f6:	220a      	movs	r2, #10
 80029f8:	210a      	movs	r1, #10
 80029fa:	48b7      	ldr	r0, [pc, #732]	; (8002cd8 <FuncMenu_DrawSignalMenu+0x2f4>)
 80029fc:	f009 fa12 	bl	800be24 <ILI9341_Draw_Text>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp = FuncO_GetFPresetObject();
 8002a00:	f001 fa80 	bl	8003f04 <FuncO_GetFPresetObject>
 8002a04:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 81b6 	beq.w	8002d7a <FuncMenu_DrawSignalMenu+0x396>
	{
		switch(pFuncPresetTmp->func)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	f200 81b1 	bhi.w	8002d7a <FuncMenu_DrawSignalMenu+0x396>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <FuncMenu_DrawSignalMenu+0x3c>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a39 	.word	0x08002a39
 8002a24:	08002abf 	.word	0x08002abf
 8002a28:	08002b45 	.word	0x08002b45
 8002a2c:	08002bcb 	.word	0x08002bcb
 8002a30:	08002c51 	.word	0x08002c51
 8002a34:	08002cf5 	.word	0x08002cf5
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	210a      	movs	r1, #10
 8002a48:	48a4      	ldr	r0, [pc, #656]	; (8002cdc <FuncMenu_DrawSignalMenu+0x2f8>)
 8002a4a:	f009 f9eb 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2246      	movs	r2, #70	; 0x46
 8002a5c:	210a      	movs	r1, #10
 8002a5e:	48a0      	ldr	r0, [pc, #640]	; (8002ce0 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002a60:	f009 f9e0 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	225a      	movs	r2, #90	; 0x5a
 8002a72:	210a      	movs	r1, #10
 8002a74:	489b      	ldr	r0, [pc, #620]	; (8002ce4 <FuncMenu_DrawSignalMenu+0x300>)
 8002a76:	f009 f9d5 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	2302      	movs	r3, #2
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	226e      	movs	r2, #110	; 0x6e
 8002a88:	210a      	movs	r1, #10
 8002a8a:	4897      	ldr	r0, [pc, #604]	; (8002ce8 <FuncMenu_DrawSignalMenu+0x304>)
 8002a8c:	f009 f9ca 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	2302      	movs	r3, #2
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2282      	movs	r2, #130	; 0x82
 8002a9e:	210a      	movs	r1, #10
 8002aa0:	4892      	ldr	r0, [pc, #584]	; (8002cec <FuncMenu_DrawSignalMenu+0x308>)
 8002aa2:	f009 f9bf 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2302      	movs	r3, #2
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2296      	movs	r2, #150	; 0x96
 8002ab4:	210a      	movs	r1, #10
 8002ab6:	488e      	ldr	r0, [pc, #568]	; (8002cf0 <FuncMenu_DrawSignalMenu+0x30c>)
 8002ab8:	f009 f9b4 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002abc:	e15d      	b.n	8002d7a <FuncMenu_DrawSignalMenu+0x396>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2232      	movs	r2, #50	; 0x32
 8002acc:	210a      	movs	r1, #10
 8002ace:	4883      	ldr	r0, [pc, #524]	; (8002cdc <FuncMenu_DrawSignalMenu+0x2f8>)
 8002ad0:	f009 f9a8 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	2302      	movs	r3, #2
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae0:	2246      	movs	r2, #70	; 0x46
 8002ae2:	210a      	movs	r1, #10
 8002ae4:	487e      	ldr	r0, [pc, #504]	; (8002ce0 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002ae6:	f009 f99d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	2302      	movs	r3, #2
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2300      	movs	r3, #0
 8002af6:	225a      	movs	r2, #90	; 0x5a
 8002af8:	210a      	movs	r1, #10
 8002afa:	487a      	ldr	r0, [pc, #488]	; (8002ce4 <FuncMenu_DrawSignalMenu+0x300>)
 8002afc:	f009 f992 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	2302      	movs	r3, #2
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	226e      	movs	r2, #110	; 0x6e
 8002b0e:	210a      	movs	r1, #10
 8002b10:	4875      	ldr	r0, [pc, #468]	; (8002ce8 <FuncMenu_DrawSignalMenu+0x304>)
 8002b12:	f009 f987 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	2282      	movs	r2, #130	; 0x82
 8002b24:	210a      	movs	r1, #10
 8002b26:	4871      	ldr	r0, [pc, #452]	; (8002cec <FuncMenu_DrawSignalMenu+0x308>)
 8002b28:	f009 f97c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	2302      	movs	r3, #2
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	2296      	movs	r2, #150	; 0x96
 8002b3a:	210a      	movs	r1, #10
 8002b3c:	486c      	ldr	r0, [pc, #432]	; (8002cf0 <FuncMenu_DrawSignalMenu+0x30c>)
 8002b3e:	f009 f971 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002b42:	e11a      	b.n	8002d7a <FuncMenu_DrawSignalMenu+0x396>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2232      	movs	r2, #50	; 0x32
 8002b52:	210a      	movs	r1, #10
 8002b54:	4861      	ldr	r0, [pc, #388]	; (8002cdc <FuncMenu_DrawSignalMenu+0x2f8>)
 8002b56:	f009 f965 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	2302      	movs	r3, #2
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	2246      	movs	r2, #70	; 0x46
 8002b68:	210a      	movs	r1, #10
 8002b6a:	485d      	ldr	r0, [pc, #372]	; (8002ce0 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002b6c:	f009 f95a 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002b70:	2300      	movs	r3, #0
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	2302      	movs	r3, #2
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7c:	225a      	movs	r2, #90	; 0x5a
 8002b7e:	210a      	movs	r1, #10
 8002b80:	4858      	ldr	r0, [pc, #352]	; (8002ce4 <FuncMenu_DrawSignalMenu+0x300>)
 8002b82:	f009 f94f 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2300      	movs	r3, #0
 8002b92:	226e      	movs	r2, #110	; 0x6e
 8002b94:	210a      	movs	r1, #10
 8002b96:	4854      	ldr	r0, [pc, #336]	; (8002ce8 <FuncMenu_DrawSignalMenu+0x304>)
 8002b98:	f009 f944 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2282      	movs	r2, #130	; 0x82
 8002baa:	210a      	movs	r1, #10
 8002bac:	484f      	ldr	r0, [pc, #316]	; (8002cec <FuncMenu_DrawSignalMenu+0x308>)
 8002bae:	f009 f939 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	2302      	movs	r3, #2
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2296      	movs	r2, #150	; 0x96
 8002bc0:	210a      	movs	r1, #10
 8002bc2:	484b      	ldr	r0, [pc, #300]	; (8002cf0 <FuncMenu_DrawSignalMenu+0x30c>)
 8002bc4:	f009 f92e 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002bc8:	e0d7      	b.n	8002d7a <FuncMenu_DrawSignalMenu+0x396>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2232      	movs	r2, #50	; 0x32
 8002bd8:	210a      	movs	r1, #10
 8002bda:	4840      	ldr	r0, [pc, #256]	; (8002cdc <FuncMenu_DrawSignalMenu+0x2f8>)
 8002bdc:	f009 f922 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	2302      	movs	r3, #2
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	2246      	movs	r2, #70	; 0x46
 8002bee:	210a      	movs	r1, #10
 8002bf0:	483b      	ldr	r0, [pc, #236]	; (8002ce0 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002bf2:	f009 f917 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	225a      	movs	r2, #90	; 0x5a
 8002c04:	210a      	movs	r1, #10
 8002c06:	4837      	ldr	r0, [pc, #220]	; (8002ce4 <FuncMenu_DrawSignalMenu+0x300>)
 8002c08:	f009 f90c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	2302      	movs	r3, #2
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c18:	226e      	movs	r2, #110	; 0x6e
 8002c1a:	210a      	movs	r1, #10
 8002c1c:	4832      	ldr	r0, [pc, #200]	; (8002ce8 <FuncMenu_DrawSignalMenu+0x304>)
 8002c1e:	f009 f901 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	2302      	movs	r3, #2
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2282      	movs	r2, #130	; 0x82
 8002c30:	210a      	movs	r1, #10
 8002c32:	482e      	ldr	r0, [pc, #184]	; (8002cec <FuncMenu_DrawSignalMenu+0x308>)
 8002c34:	f009 f8f6 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	2296      	movs	r2, #150	; 0x96
 8002c46:	210a      	movs	r1, #10
 8002c48:	4829      	ldr	r0, [pc, #164]	; (8002cf0 <FuncMenu_DrawSignalMenu+0x30c>)
 8002c4a:	f009 f8eb 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002c4e:	e094      	b.n	8002d7a <FuncMenu_DrawSignalMenu+0x396>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	2302      	movs	r3, #2
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2232      	movs	r2, #50	; 0x32
 8002c5e:	210a      	movs	r1, #10
 8002c60:	481e      	ldr	r0, [pc, #120]	; (8002cdc <FuncMenu_DrawSignalMenu+0x2f8>)
 8002c62:	f009 f8df 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2300      	movs	r3, #0
 8002c72:	2246      	movs	r2, #70	; 0x46
 8002c74:	210a      	movs	r1, #10
 8002c76:	481a      	ldr	r0, [pc, #104]	; (8002ce0 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002c78:	f009 f8d4 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	2302      	movs	r3, #2
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2300      	movs	r3, #0
 8002c88:	225a      	movs	r2, #90	; 0x5a
 8002c8a:	210a      	movs	r1, #10
 8002c8c:	4815      	ldr	r0, [pc, #84]	; (8002ce4 <FuncMenu_DrawSignalMenu+0x300>)
 8002c8e:	f009 f8c9 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	2302      	movs	r3, #2
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	226e      	movs	r2, #110	; 0x6e
 8002ca0:	210a      	movs	r1, #10
 8002ca2:	4811      	ldr	r0, [pc, #68]	; (8002ce8 <FuncMenu_DrawSignalMenu+0x304>)
 8002ca4:	f009 f8be 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb4:	2282      	movs	r2, #130	; 0x82
 8002cb6:	210a      	movs	r1, #10
 8002cb8:	480c      	ldr	r0, [pc, #48]	; (8002cec <FuncMenu_DrawSignalMenu+0x308>)
 8002cba:	f009 f8b3 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2296      	movs	r2, #150	; 0x96
 8002ccc:	210a      	movs	r1, #10
 8002cce:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <FuncMenu_DrawSignalMenu+0x30c>)
 8002cd0:	f009 f8a8 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002cd4:	e051      	b.n	8002d7a <FuncMenu_DrawSignalMenu+0x396>
 8002cd6:	bf00      	nop
 8002cd8:	0800f5fc 	.word	0x0800f5fc
 8002cdc:	0800f614 	.word	0x0800f614
 8002ce0:	0800f61c 	.word	0x0800f61c
 8002ce4:	0800f628 	.word	0x0800f628
 8002ce8:	0800f630 	.word	0x0800f630
 8002cec:	0800f63c 	.word	0x0800f63c
 8002cf0:	0800f648 	.word	0x0800f648
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2232      	movs	r2, #50	; 0x32
 8002d02:	210a      	movs	r1, #10
 8002d04:	481f      	ldr	r0, [pc, #124]	; (8002d84 <FuncMenu_DrawSignalMenu+0x3a0>)
 8002d06:	f009 f88d 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	2302      	movs	r3, #2
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2300      	movs	r3, #0
 8002d16:	2246      	movs	r2, #70	; 0x46
 8002d18:	210a      	movs	r1, #10
 8002d1a:	481b      	ldr	r0, [pc, #108]	; (8002d88 <FuncMenu_DrawSignalMenu+0x3a4>)
 8002d1c:	f009 f882 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2302      	movs	r3, #2
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	225a      	movs	r2, #90	; 0x5a
 8002d2e:	210a      	movs	r1, #10
 8002d30:	4816      	ldr	r0, [pc, #88]	; (8002d8c <FuncMenu_DrawSignalMenu+0x3a8>)
 8002d32:	f009 f877 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	2300      	movs	r3, #0
 8002d42:	226e      	movs	r2, #110	; 0x6e
 8002d44:	210a      	movs	r1, #10
 8002d46:	4812      	ldr	r0, [pc, #72]	; (8002d90 <FuncMenu_DrawSignalMenu+0x3ac>)
 8002d48:	f009 f86c 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2302      	movs	r3, #2
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	2282      	movs	r2, #130	; 0x82
 8002d5a:	210a      	movs	r1, #10
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <FuncMenu_DrawSignalMenu+0x3b0>)
 8002d5e:	f009 f861 	bl	800be24 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8002d62:	2300      	movs	r3, #0
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	2302      	movs	r3, #2
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d6e:	2296      	movs	r2, #150	; 0x96
 8002d70:	210a      	movs	r1, #10
 8002d72:	4809      	ldr	r0, [pc, #36]	; (8002d98 <FuncMenu_DrawSignalMenu+0x3b4>)
 8002d74:	f009 f856 	bl	800be24 <ILI9341_Draw_Text>
				break;
 8002d78:	bf00      	nop

		}
	}


}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	0800f614 	.word	0x0800f614
 8002d88:	0800f61c 	.word	0x0800f61c
 8002d8c:	0800f628 	.word	0x0800f628
 8002d90:	0800f630 	.word	0x0800f630
 8002d94:	0800f63c 	.word	0x0800f63c
 8002d98:	0800f648 	.word	0x0800f648

08002d9c <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002da2:	2300      	movs	r3, #0
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2303      	movs	r3, #3
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dae:	220a      	movs	r2, #10
 8002db0:	210a      	movs	r1, #10
 8002db2:	4803      	ldr	r0, [pc, #12]	; (8002dc0 <FuncMenu_DrawSyncMenu+0x24>)
 8002db4:	f009 f836 	bl	800be24 <ILI9341_Draw_Text>

}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	0800f650 	.word	0x0800f650

08002dc4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d007      	beq.n	8002de4 <GainMenu_DrawMenu+0x20>
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d008      	beq.n	8002dea <GainMenu_DrawMenu+0x26>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d000      	beq.n	8002dde <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8002ddc:	e008      	b.n	8002df0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8002dde:	f000 f80b 	bl	8002df8 <GainMenu_DrawMainMenu>
			break;
 8002de2:	e005      	b.n	8002df0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8002de4:	f000 f84e 	bl	8002e84 <GainMenu_DrawSignalMenu>
			break;
 8002de8:	e002      	b.n	8002df0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8002dea:	f000 f85f 	bl	8002eac <GainMenu_DrawSyncMenu>
			break;
 8002dee:	bf00      	nop

	}
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("GAIN MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2303      	movs	r3, #3
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	210a      	movs	r1, #10
 8002e0e:	4819      	ldr	r0, [pc, #100]	; (8002e74 <GainMenu_DrawMainMenu+0x7c>)
 8002e10:	f009 f808 	bl	800be24 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 8002e14:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	22d2      	movs	r2, #210	; 0xd2
 8002e22:	210a      	movs	r1, #10
 8002e24:	4814      	ldr	r0, [pc, #80]	; (8002e78 <GainMenu_DrawMainMenu+0x80>)
 8002e26:	f008 fffd 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 8002e2a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	2302      	movs	r3, #2
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2300      	movs	r3, #0
 8002e36:	22d2      	movs	r2, #210	; 0xd2
 8002e38:	2164      	movs	r1, #100	; 0x64
 8002e3a:	4810      	ldr	r0, [pc, #64]	; (8002e7c <GainMenu_DrawMainMenu+0x84>)
 8002e3c:	f008 fff2 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002e40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	2302      	movs	r3, #2
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	22d2      	movs	r2, #210	; 0xd2
 8002e4e:	21af      	movs	r1, #175	; 0xaf
 8002e50:	480b      	ldr	r0, [pc, #44]	; (8002e80 <GainMenu_DrawMainMenu+0x88>)
 8002e52:	f008 ffe7 	bl	800be24 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002e56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2300      	movs	r3, #0
 8002e62:	22d2      	movs	r2, #210	; 0xd2
 8002e64:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002e68:	4805      	ldr	r0, [pc, #20]	; (8002e80 <GainMenu_DrawMainMenu+0x88>)
 8002e6a:	f008 ffdb 	bl	800be24 <ILI9341_Draw_Text>
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	0800f668 	.word	0x0800f668
 8002e78:	0800f678 	.word	0x0800f678
 8002e7c:	0800f680 	.word	0x0800f680
 8002e80:	0800f688 	.word	0x0800f688

08002e84 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL GAIN", 10, 10, WHITE, 3, BLACK);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	2303      	movs	r3, #3
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e96:	220a      	movs	r2, #10
 8002e98:	210a      	movs	r1, #10
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <GainMenu_DrawSignalMenu+0x24>)
 8002e9c:	f008 ffc2 	bl	800be24 <ILI9341_Draw_Text>
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0800f690 	.word	0x0800f690

08002eac <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC GAIN", 10, 10, WHITE, 3, BLACK);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ebe:	220a      	movs	r2, #10
 8002ec0:	210a      	movs	r1, #10
 8002ec2:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <GainMenu_DrawSyncMenu+0x24>)
 8002ec4:	f008 ffae 	bl	800be24 <ILI9341_Draw_Text>
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	0800f6a4 	.word	0x0800f6a4

08002ed4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8002ed8:	480b      	ldr	r0, [pc, #44]	; (8002f08 <BiasMenuEntryHandler+0x34>)
 8002eda:	f00a fae7 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8002ede:	f7fe f947 	bl	8001170 <DM_RefreshScreen>

	DM_ShowBiasMenu(ENABLE_BIAS_MENU);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7fe f90a 	bl	80010fc <DM_ShowBiasMenu>

	ENCODER_TIMER->ARR = BIAS_MAX;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <BiasMenuEntryHandler+0x38>)
 8002eea:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8002ef0:	f000 fc60 	bl	80037b4 <BO_GetDcBiasEncoderValue>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <BiasMenuEntryHandler+0x38>)
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <BiasMenuEntryHandler+0x3c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8002f02:	230c      	movs	r3, #12
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	0800f6b8 	.word	0x0800f6b8
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	20001f06 	.word	0x20001f06

08002f14 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8002f18:	4807      	ldr	r0, [pc, #28]	; (8002f38 <BiasMenuInputHandler+0x24>)
 8002f1a:	f00a fac7 	bl	800d4ac <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f001 f8d6 	bl	80040d0 <SM_GetEncoderValue>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fc50 	bl	80037cc <BO_ModifyOutput>

	eNewEvent = evIdle;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <BiasMenuInputHandler+0x28>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8002f32:	230c      	movs	r3, #12
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	0800f6d0 	.word	0x0800f6d0
 8002f3c:	20001f06 	.word	0x20001f06

08002f40 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8002f44:	4806      	ldr	r0, [pc, #24]	; (8002f60 <BiasMenuExitHandler+0x20>)
 8002f46:	f00a fab1 	bl	800d4ac <puts>
#endif


	// disable the menu
	DM_ShowBiasMenu(DISABLE_BIAS_MENU);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe f8d6 	bl	80010fc <DM_ShowBiasMenu>

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8002f50:	f7fe f90e 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <BiasMenuExitHandler+0x24>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	0800f6e8 	.word	0x0800f6e8
 8002f64:	20001f06 	.word	0x20001f06

08002f68 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002f6c:	4bb8      	ldr	r3, [pc, #736]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	f200 8152 	bhi.w	800321a <EM_ProcessEvent+0x2b2>
 8002f76:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <EM_ProcessEvent+0x14>)
 8002f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7c:	08002fb1 	.word	0x08002fb1
 8002f80:	08003005 	.word	0x08003005
 8002f84:	08003045 	.word	0x08003045
 8002f88:	08003071 	.word	0x08003071
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	080030dd 	.word	0x080030dd
 8002f94:	08003109 	.word	0x08003109
 8002f98:	0800321b 	.word	0x0800321b
 8002f9c:	08003135 	.word	0x08003135
 8002fa0:	08003187 	.word	0x08003187
 8002fa4:	080031b1 	.word	0x080031b1
 8002fa8:	080031db 	.word	0x080031db
 8002fac:	080031f1 	.word	0x080031f1

		case Idle_State:

//			TIM1->ARR = 12;

			if(eNewEvent == evBlueBtn)
 8002fb0:	4ba8      	ldr	r3, [pc, #672]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <EM_ProcessEvent+0x5c>
			{
				eNextState = FuncMainMenuEntryHandler();
 8002fb8:	f000 fa56 	bl	8003468 <FuncMainMenuEntryHandler>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4ba3      	ldr	r3, [pc, #652]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8002fc2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002fc4:	4ba3      	ldr	r3, [pc, #652]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d105      	bne.n	8002fd8 <EM_ProcessEvent+0x70>
			{
				eNextState = FreqMainMenuEntryHandler();
 8002fcc:	f000 f954 	bl	8003278 <FreqMainMenuEntryHandler>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b9e      	ldr	r3, [pc, #632]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8002fd6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002fd8:	4b9e      	ldr	r3, [pc, #632]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d105      	bne.n	8002fec <EM_ProcessEvent+0x84>
			{
				eNextState = GainMainMenuEntryHandler();
 8002fe0:	f000 fb24 	bl	800362c <GainMainMenuEntryHandler>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b99      	ldr	r3, [pc, #612]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8002fea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002fec:	4b99      	ldr	r3, [pc, #612]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	f040 8114 	bne.w	800321e <EM_ProcessEvent+0x2b6>
			{
				eNextState = BiasMenuEntryHandler();
 8002ff6:	f7ff ff6d 	bl	8002ed4 <BiasMenuEntryHandler>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b94      	ldr	r3, [pc, #592]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003000:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003002:	e10c      	b.n	800321e <EM_ProcessEvent+0x2b6>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003004:	4b93      	ldr	r3, [pc, #588]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d105      	bne.n	8003018 <EM_ProcessEvent+0xb0>
			{
				eNextState = FuncMainMenuExitHandler();
 800300c:	f000 fa40 	bl	8003490 <FuncMainMenuExitHandler>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b8e      	ldr	r3, [pc, #568]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003016:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003018:	4b8e      	ldr	r3, [pc, #568]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <EM_ProcessEvent+0xc4>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003020:	f000 fa4a 	bl	80034b8 <FuncSignalMenuEntryHandler>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b89      	ldr	r3, [pc, #548]	; (8003250 <EM_ProcessEvent+0x2e8>)
 800302a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800302c:	4b89      	ldr	r3, [pc, #548]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	f040 80f6 	bne.w	8003222 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003036:	f000 fa99 	bl	800356c <FuncSyncMenuEntryHandler>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	4b84      	ldr	r3, [pc, #528]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003040:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003042:	e0ee      	b.n	8003222 <EM_ProcessEvent+0x2ba>

		case Func_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
 8003044:	4b83      	ldr	r3, [pc, #524]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b05      	cmp	r3, #5
 800304a:	d105      	bne.n	8003058 <EM_ProcessEvent+0xf0>
			{
				eNextState = FuncSignalMenuInputHandler();
 800304c:	f000 fa64 	bl	8003518 <FuncSignalMenuInputHandler>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003056:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003058:	4b7e      	ldr	r3, [pc, #504]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b06      	cmp	r3, #6
 800305e:	f040 80e2 	bne.w	8003226 <EM_ProcessEvent+0x2be>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003062:	f000 fa6f 	bl	8003544 <FuncSignalMenuExitHandler>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	4b79      	ldr	r3, [pc, #484]	; (8003250 <EM_ProcessEvent+0x2e8>)
 800306c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800306e:	e0da      	b.n	8003226 <EM_ProcessEvent+0x2be>

		case Func_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
 8003070:	4b78      	ldr	r3, [pc, #480]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d105      	bne.n	8003084 <EM_ProcessEvent+0x11c>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003078:	f000 faa8 	bl	80035cc <FuncSyncMenuInputHandler>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	4b73      	ldr	r3, [pc, #460]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003082:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003084:	4b73      	ldr	r3, [pc, #460]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b06      	cmp	r3, #6
 800308a:	f040 80ce 	bne.w	800322a <EM_ProcessEvent+0x2c2>
			{
				eNextState = FuncSyncMenuExitHandler();
 800308e:	f000 fab3 	bl	80035f8 <FuncSyncMenuExitHandler>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	4b6e      	ldr	r3, [pc, #440]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003098:	701a      	strb	r2, [r3, #0]
			}

			break;
 800309a:	e0c6      	b.n	800322a <EM_ProcessEvent+0x2c2>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 800309c:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b06      	cmp	r3, #6
 80030a2:	d105      	bne.n	80030b0 <EM_ProcessEvent+0x148>
			{
				eNextState = GainMainMenuExitHandler();
 80030a4:	f000 fad6 	bl	8003654 <GainMainMenuExitHandler>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80030ae:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80030b0:	4b68      	ldr	r3, [pc, #416]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <EM_ProcessEvent+0x15c>
			{
				eNextState = GainSignalMenuEntryHandler();
 80030b8:	f000 fae0 	bl	800367c <GainSignalMenuEntryHandler>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	4b63      	ldr	r3, [pc, #396]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80030c2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	f040 80b0 	bne.w	800322e <EM_ProcessEvent+0x2c6>
			{
				eNextState = GainSyncMenuEntryHandler();
 80030ce:	f000 fb2d 	bl	800372c <GainSyncMenuEntryHandler>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80030d8:	701a      	strb	r2, [r3, #0]
			}

			break;
 80030da:	e0a8      	b.n	800322e <EM_ProcessEvent+0x2c6>

		case Gain_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
 80030dc:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d105      	bne.n	80030f0 <EM_ProcessEvent+0x188>
			{
				eNextState = GainSignalMenuInputHandler();
 80030e4:	f000 faf8 	bl	80036d8 <GainSignalMenuInputHandler>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b58      	ldr	r3, [pc, #352]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80030ee:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80030f0:	4b58      	ldr	r3, [pc, #352]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	f040 809c 	bne.w	8003232 <EM_ProcessEvent+0x2ca>
			{
				eNextState = GainSignalMenuExitHandler();
 80030fa:	f000 fb03 	bl	8003704 <GainSignalMenuExitHandler>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	4b53      	ldr	r3, [pc, #332]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003104:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003106:	e094      	b.n	8003232 <EM_ProcessEvent+0x2ca>

		case Gain_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
 8003108:	4b52      	ldr	r3, [pc, #328]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d105      	bne.n	800311c <EM_ProcessEvent+0x1b4>
			{
				eNextState = GainSyncMenuInputHandler();
 8003110:	f000 fb20 	bl	8003754 <GainSyncMenuInputHandler>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <EM_ProcessEvent+0x2e8>)
 800311a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b06      	cmp	r3, #6
 8003122:	f040 8088 	bne.w	8003236 <EM_ProcessEvent+0x2ce>
			{
				eNextState = GainSyncMenuExitHandler();
 8003126:	f000 fb25 	bl	8003774 <GainSyncMenuExitHandler>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	4b48      	ldr	r3, [pc, #288]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003130:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003132:	e080      	b.n	8003236 <EM_ProcessEvent+0x2ce>

// FREQ MENUS

		case Freq_Main_Menu_State:

			if(eNewEvent == evEncoderPush)
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b06      	cmp	r3, #6
 800313a:	d105      	bne.n	8003148 <EM_ProcessEvent+0x1e0>
			{
				eNextState = FreqMainMenuExitHandler();
 800313c:	f000 f8b0 	bl	80032a0 <FreqMainMenuExitHandler>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003146:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <EM_ProcessEvent+0x1f4>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003150:	f000 f8c0 	bl	80032d4 <FreqPresetMenuEntryHandler>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <EM_ProcessEvent+0x2e8>)
 800315a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800315c:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d105      	bne.n	8003170 <EM_ProcessEvent+0x208>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003164:	f000 f90e 	bl	8003384 <FreqAdjustMenuEntryHandler>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <EM_ProcessEvent+0x2e8>)
 800316e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003170:	4b38      	ldr	r3, [pc, #224]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d160      	bne.n	800323a <EM_ProcessEvent+0x2d2>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003178:	f000 f948 	bl	800340c <FreqSweepMenuEntryHandler>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003182:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003184:	e059      	b.n	800323a <EM_ProcessEvent+0x2d2>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d105      	bne.n	800319a <EM_ProcessEvent+0x232>
			{
				eNextState = FreqPresetMenuInputHandler();
 800318e:	f000 f8d1 	bl	8003334 <FreqPresetMenuInputHandler>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003198:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <EM_ProcessEvent+0x2ec>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d14d      	bne.n	800323e <EM_ProcessEvent+0x2d6>
			{
				eNextState = FreqPresetMenuExitHandler();
 80031a2:	f000 f8dd 	bl	8003360 <FreqPresetMenuExitHandler>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80031ac:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031ae:	e046      	b.n	800323e <EM_ProcessEvent+0x2d6>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d105      	bne.n	80031c4 <EM_ProcessEvent+0x25c>
			{
				eNextState = FreqAdjustMenuInputHandler();
 80031b8:	f000 f904 	bl	80033c4 <FreqAdjustMenuInputHandler>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80031c2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d13a      	bne.n	8003242 <EM_ProcessEvent+0x2da>
			{
				eNextState = FreqAdjustMenuExitHandler();
 80031cc:	f000 f90c 	bl	80033e8 <FreqAdjustMenuExitHandler>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80031d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031d8:	e033      	b.n	8003242 <EM_ProcessEvent+0x2da>

		case Freq_Sweep_Menu_State:

			if(eNewEvent == evEncoderPush)
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d131      	bne.n	8003246 <EM_ProcessEvent+0x2de>
			{
				eNextState = FreqSweepMenuExitHandler();
 80031e2:	f000 f92f 	bl	8003444 <FreqSweepMenuExitHandler>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <EM_ProcessEvent+0x2e8>)
 80031ec:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031ee:	e02a      	b.n	8003246 <EM_ProcessEvent+0x2de>

// BIAS MENUS

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <EM_ProcessEvent+0x2ec>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d105      	bne.n	8003204 <EM_ProcessEvent+0x29c>
			{
				eNextState = BiasMenuInputHandler();
 80031f8:	f7ff fe8c 	bl	8002f14 <BiasMenuInputHandler>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003202:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <EM_ProcessEvent+0x2ec>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d11e      	bne.n	800324a <EM_ProcessEvent+0x2e2>
			{
				eNextState = BiasMenuExitHandler();
 800320c:	f7ff fe98 	bl	8002f40 <BiasMenuExitHandler>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <EM_ProcessEvent+0x2e8>)
 8003216:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003218:	e017      	b.n	800324a <EM_ProcessEvent+0x2e2>

		default:
			break;
 800321a:	bf00      	nop
 800321c:	e016      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 800321e:	bf00      	nop
 8003220:	e014      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 8003222:	bf00      	nop
 8003224:	e012      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 8003226:	bf00      	nop
 8003228:	e010      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 800322a:	bf00      	nop
 800322c:	e00e      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 800322e:	bf00      	nop
 8003230:	e00c      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 8003232:	bf00      	nop
 8003234:	e00a      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 8003236:	bf00      	nop
 8003238:	e008      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 800323a:	bf00      	nop
 800323c:	e006      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 800323e:	bf00      	nop
 8003240:	e004      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <EM_ProcessEvent+0x2e4>
			break;
 800324a:	bf00      	nop
	}

}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20001f05 	.word	0x20001f05
 8003254:	20001f06 	.word	0x20001f06

08003258 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003262:	4a04      	ldr	r2, [pc, #16]	; (8003274 <EM_SetNewEvent+0x1c>)
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	7013      	strb	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	20001f06 	.word	0x20001f06

08003278 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 800327c:	4806      	ldr	r0, [pc, #24]	; (8003298 <FreqMainMenuEntryHandler+0x20>)
 800327e:	f00a f915 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8003282:	f7fd ff75 	bl	8001170 <DM_RefreshScreen>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 8003286:	2001      	movs	r0, #1
 8003288:	f7fd ff28 	bl	80010dc <DM_ShowFreqMenu>

	// stay in this state
	eNewEvent = evIdle;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <FreqMainMenuEntryHandler+0x24>)
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003292:	2308      	movs	r3, #8
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	0800f704 	.word	0x0800f704
 800329c:	20001f06 	.word	0x20001f06

080032a0 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 80032a4:	4808      	ldr	r0, [pc, #32]	; (80032c8 <FreqMainMenuExitHandler+0x28>)
 80032a6:	f00a f901 	bl	800d4ac <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fd ff16 	bl	80010dc <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <FreqMainMenuExitHandler+0x2c>)
 80032b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 80032b8:	f7fd ff5a 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <FreqMainMenuExitHandler+0x30>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	0800f734 	.word	0x0800f734
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	20001f06 	.word	0x20001f06

080032d4 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 80032da:	4812      	ldr	r0, [pc, #72]	; (8003324 <FreqPresetMenuEntryHandler+0x50>)
 80032dc:	f00a f8e6 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 80032e0:	f7fd ff46 	bl	8001170 <DM_RefreshScreen>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7fd fef9 	bl	80010dc <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80032ea:	f000 fc6d 	bl	8003bc8 <FreqO_GetFPresetObject>
 80032ee:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	791a      	ldrb	r2, [r3, #4]
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <FreqPresetMenuEntryHandler+0x54>)
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 80032fe:	f000 fc95 	bl	8003c2c <FreqO_GetFreqPresetEncoderRange>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <FreqPresetMenuEntryHandler+0x54>)
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c
 800330a:	e002      	b.n	8003312 <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 800330c:	4807      	ldr	r0, [pc, #28]	; (800332c <FreqPresetMenuEntryHandler+0x58>)
 800330e:	f7fd ffed 	bl	80012ec <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <FreqPresetMenuEntryHandler+0x5c>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003318:	2309      	movs	r3, #9
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	0800f758 	.word	0x0800f758
 8003328:	40012c00 	.word	0x40012c00
 800332c:	0800f780 	.word	0x0800f780
 8003330:	20001f06 	.word	0x20001f06

08003334 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003338:	4807      	ldr	r0, [pc, #28]	; (8003358 <FreqPresetMenuInputHandler+0x24>)
 800333a:	f00a f8b7 	bl	800d4ac <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800333e:	2001      	movs	r0, #1
 8003340:	f000 fec6 	bl	80040d0 <SM_GetEncoderValue>
 8003344:	4603      	mov	r3, r0
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fb4c 	bl	80039e4 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <FreqPresetMenuInputHandler+0x28>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003352:	2309      	movs	r3, #9
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	0800f71c 	.word	0x0800f71c
 800335c:	20001f06 	.word	0x20001f06

08003360 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 8003364:	4805      	ldr	r0, [pc, #20]	; (800337c <FreqPresetMenuExitHandler+0x1c>)
 8003366:	f00a f8a1 	bl	800d4ac <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd feb6 	bl	80010dc <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <FreqPresetMenuExitHandler+0x20>)
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	0800f7bc 	.word	0x0800f7bc
 8003380:	20001f06 	.word	0x20001f06

08003384 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 8003388:	480a      	ldr	r0, [pc, #40]	; (80033b4 <FreqAdjustMenuEntryHandler+0x30>)
 800338a:	f00a f88f 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 800338e:	f7fd feef 	bl	8001170 <DM_RefreshScreen>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 8003392:	2003      	movs	r0, #3
 8003394:	f7fd fea2 	bl	80010dc <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <FreqAdjustMenuEntryHandler+0x34>)
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <FreqAdjustMenuEntryHandler+0x38>)
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <FreqAdjustMenuEntryHandler+0x38>)
 80033a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <FreqAdjustMenuEntryHandler+0x3c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80033ae:	230a      	movs	r3, #10
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	0800f7dc 	.word	0x0800f7dc
 80033b8:	40013400 	.word	0x40013400
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	20001f06 	.word	0x20001f06

080033c4 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80033c8:	4805      	ldr	r0, [pc, #20]	; (80033e0 <FreqAdjustMenuInputHandler+0x1c>)
 80033ca:	f00a f86f 	bl	800d4ac <puts>
#endif

	FreqO_AdjustFreq();
 80033ce:	f000 fafb 	bl	80039c8 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <FreqAdjustMenuInputHandler+0x20>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80033d8:	230a      	movs	r3, #10
}
 80033da:	4618      	mov	r0, r3
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	0800f71c 	.word	0x0800f71c
 80033e4:	20001f06 	.word	0x20001f06

080033e8 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 80033ec:	4805      	ldr	r0, [pc, #20]	; (8003404 <FreqAdjustMenuExitHandler+0x1c>)
 80033ee:	f00a f85d 	bl	800d4ac <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd fe72 	bl	80010dc <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <FreqAdjustMenuExitHandler+0x20>)
 80033fa:	2202      	movs	r2, #2
 80033fc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	0800f7fc 	.word	0x0800f7fc
 8003408:	20001f06 	.word	0x20001f06

0800340c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 8003410:	4809      	ldr	r0, [pc, #36]	; (8003438 <FreqSweepMenuEntryHandler+0x2c>)
 8003412:	f00a f84b 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8003416:	f7fd feab 	bl	8001170 <DM_RefreshScreen>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 800341a:	2004      	movs	r0, #4
 800341c:	f7fd fe5e 	bl	80010dc <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <FreqSweepMenuEntryHandler+0x30>)
 8003422:	2200      	movs	r2, #0
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <FreqSweepMenuEntryHandler+0x30>)
 8003428:	2238      	movs	r2, #56	; 0x38
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <FreqSweepMenuEntryHandler+0x34>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003432:	230b      	movs	r3, #11
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	0800f828 	.word	0x0800f828
 800343c:	40012c00 	.word	0x40012c00
 8003440:	20001f06 	.word	0x20001f06

08003444 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 8003448:	4805      	ldr	r0, [pc, #20]	; (8003460 <FreqSweepMenuExitHandler+0x1c>)
 800344a:	f00a f82f 	bl	800d4ac <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800344e:	2000      	movs	r0, #0
 8003450:	f7fd fe44 	bl	80010dc <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <FreqSweepMenuExitHandler+0x20>)
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	0800f848 	.word	0x0800f848
 8003464:	20001f06 	.word	0x20001f06

08003468 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 800346c:	4806      	ldr	r0, [pc, #24]	; (8003488 <FuncMainMenuEntryHandler+0x20>)
 800346e:	f00a f81d 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8003472:	f7fd fe7d 	bl	8001170 <DM_RefreshScreen>

	DM_ShowFuncMenu(ENABLE_FUNC_MAIN_MENU);
 8003476:	2001      	movs	r0, #1
 8003478:	f7fd fe10 	bl	800109c <DM_ShowFuncMenu>
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <FuncMainMenuEntryHandler+0x24>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003482:	2301      	movs	r3, #1
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	0800f874 	.word	0x0800f874
 800348c:	20001f06 	.word	0x20001f06

08003490 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8003494:	4806      	ldr	r0, [pc, #24]	; (80034b0 <FuncMainMenuExitHandler+0x20>)
 8003496:	f00a f809 	bl	800d4ac <puts>
#endif

	// disable the menu

	DM_ShowFuncMenu(DISABLE_FUNC_MENU);
 800349a:	2000      	movs	r0, #0
 800349c:	f7fd fdfe 	bl	800109c <DM_ShowFuncMenu>

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80034a0:	f7fd fe66 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <FuncMainMenuExitHandler+0x24>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	0800f8b0 	.word	0x0800f8b0
 80034b4:	20001f06 	.word	0x20001f06

080034b8 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 80034be:	4812      	ldr	r0, [pc, #72]	; (8003508 <FuncSignalMenuEntryHandler+0x50>)
 80034c0:	f009 fff4 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 80034c4:	f7fd fe54 	bl	8001170 <DM_RefreshScreen>

	DM_ShowFuncMenu(ENABLE_FUNC_SIGNAL_MENU);
 80034c8:	2002      	movs	r0, #2
 80034ca:	f7fd fde7 	bl	800109c <DM_ShowFuncMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 80034ce:	f000 fd19 	bl	8003f04 <FuncO_GetFPresetObject>
 80034d2:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <FuncSignalMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	785a      	ldrb	r2, [r3, #1]
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <FuncSignalMenuEntryHandler+0x54>)
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80034e2:	f000 fd1b 	bl	8003f1c <FuncO_GetFuncPresetEncoderRange>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <FuncSignalMenuEntryHandler+0x54>)
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ee:	e002      	b.n	80034f6 <FuncSignalMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
 80034f0:	4807      	ldr	r0, [pc, #28]	; (8003510 <FuncSignalMenuEntryHandler+0x58>)
 80034f2:	f7fd fefb 	bl	80012ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <FuncSignalMenuEntryHandler+0x5c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80034fc:	2302      	movs	r3, #2
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	0800f874 	.word	0x0800f874
 800350c:	40012c00 	.word	0x40012c00
 8003510:	0800f8cc 	.word	0x0800f8cc
 8003514:	20001f06 	.word	0x20001f06

08003518 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 800351c:	4807      	ldr	r0, [pc, #28]	; (800353c <FuncSignalMenuInputHandler+0x24>)
 800351e:	f009 ffc5 	bl	800d4ac <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003522:	2001      	movs	r0, #1
 8003524:	f000 fdd4 	bl	80040d0 <SM_GetEncoderValue>
 8003528:	4603      	mov	r3, r0
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fbb4 	bl	8003c98 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <FuncSignalMenuInputHandler+0x28>)
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8003536:	2302      	movs	r3, #2
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	0800f890 	.word	0x0800f890
 8003540:	20001f06 	.word	0x20001f06

08003544 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8003548:	4806      	ldr	r0, [pc, #24]	; (8003564 <FuncSignalMenuExitHandler+0x20>)
 800354a:	f009 ffaf 	bl	800d4ac <puts>
#endif

	// disable the menu

	DM_ShowFuncMenu(ENABLE_FUNC_MAIN_MENU);
 800354e:	2001      	movs	r0, #1
 8003550:	f7fd fda4 	bl	800109c <DM_ShowFuncMenu>

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003554:	f7fd fe0c 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <FuncSignalMenuExitHandler+0x24>)
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800355e:	2301      	movs	r3, #1
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	0800f8b0 	.word	0x0800f8b0
 8003568:	20001f06 	.word	0x20001f06

0800356c <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8003572:	4812      	ldr	r0, [pc, #72]	; (80035bc <FuncSyncMenuEntryHandler+0x50>)
 8003574:	f009 ff9a 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8003578:	f7fd fdfa 	bl	8001170 <DM_RefreshScreen>

	DM_ShowFuncMenu(ENABLE_FUNC_SYNC_MENU);
 800357c:	2003      	movs	r0, #3
 800357e:	f7fd fd8d 	bl	800109c <DM_ShowFuncMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8003582:	f000 fcbf 	bl	8003f04 <FuncO_GetFPresetObject>
 8003586:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <FuncSyncMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	785a      	ldrb	r2, [r3, #1]
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <FuncSyncMenuEntryHandler+0x54>)
 8003594:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003596:	f000 fcc1 	bl	8003f1c <FuncO_GetFuncPresetEncoderRange>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <FuncSyncMenuEntryHandler+0x54>)
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80035a2:	e002      	b.n	80035aa <FuncSyncMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
 80035a4:	4807      	ldr	r0, [pc, #28]	; (80035c4 <FuncSyncMenuEntryHandler+0x58>)
 80035a6:	f7fd fea1 	bl	80012ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <FuncSyncMenuEntryHandler+0x5c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80035b0:	2303      	movs	r3, #3
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	0800f874 	.word	0x0800f874
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	0800f8cc 	.word	0x0800f8cc
 80035c8:	20001f06 	.word	0x20001f06

080035cc <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 80035d0:	4807      	ldr	r0, [pc, #28]	; (80035f0 <FuncSyncMenuInputHandler+0x24>)
 80035d2:	f009 ff6b 	bl	800d4ac <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80035d6:	2001      	movs	r0, #1
 80035d8:	f000 fd7a 	bl	80040d0 <SM_GetEncoderValue>
 80035dc:	4603      	mov	r3, r0
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fb5a 	bl	8003c98 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <FuncSyncMenuInputHandler+0x28>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80035ea:	2303      	movs	r3, #3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	0800f890 	.word	0x0800f890
 80035f4:	20001f06 	.word	0x20001f06

080035f8 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 80035fc:	4808      	ldr	r0, [pc, #32]	; (8003620 <FuncSyncMenuExitHandler+0x28>)
 80035fe:	f009 ff55 	bl	800d4ac <puts>
#endif

	// disable the menu

	DM_ShowFuncMenu(ENABLE_FUNC_MAIN_MENU);
 8003602:	2001      	movs	r0, #1
 8003604:	f7fd fd4a 	bl	800109c <DM_ShowFuncMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <FuncSyncMenuExitHandler+0x2c>)
 800360a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003610:	f7fd fdae 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <FuncSyncMenuExitHandler+0x30>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800361a:	2301      	movs	r3, #1
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	0800f8b0 	.word	0x0800f8b0
 8003624:	40012c00 	.word	0x40012c00
 8003628:	20001f06 	.word	0x20001f06

0800362c <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8003630:	4806      	ldr	r0, [pc, #24]	; (800364c <GainMainMenuEntryHandler+0x20>)
 8003632:	f009 ff3b 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8003636:	f7fd fd9b 	bl	8001170 <DM_RefreshScreen>

	DM_ShowGainMenu(ENABLE_GAIN_MAIN_MENU);
 800363a:	2001      	movs	r0, #1
 800363c:	f7fd fd3e 	bl	80010bc <DM_ShowGainMenu>

	eNewEvent = evIdle;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <GainMainMenuEntryHandler+0x24>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003646:	2304      	movs	r3, #4
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	0800f900 	.word	0x0800f900
 8003650:	20001f06 	.word	0x20001f06

08003654 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8003658:	4806      	ldr	r0, [pc, #24]	; (8003674 <GainMainMenuExitHandler+0x20>)
 800365a:	f009 ff27 	bl	800d4ac <puts>
#endif

	DM_ShowGainMenu(DISABLE_GAIN_MENU);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fd fd2c 	bl	80010bc <DM_ShowGainMenu>

	DM_RefreshScreen();
 8003664:	f7fd fd84 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <GainMainMenuExitHandler+0x24>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	0800f930 	.word	0x0800f930
 8003678:	20001f06 	.word	0x20001f06

0800367c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8003682:	4811      	ldr	r0, [pc, #68]	; (80036c8 <GainSignalMenuEntryHandler+0x4c>)
 8003684:	f009 ff12 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8003688:	f7fd fd72 	bl	8001170 <DM_RefreshScreen>

	DM_ShowGainMenu(ENABLE_GAIN_SIGNAL_MENU);
 800368c:	2002      	movs	r0, #2
 800368e:	f7fd fd15 	bl	80010bc <DM_ShowGainMenu>

	VppEncoderPreset_t *pVppPresetTmp =  VPP_FindVppPresetObject(SIGNAL_OUTPUT_PRESET);
 8003692:	2000      	movs	r0, #0
 8003694:	f001 faea 	bl	8004c6c <VPP_FindVppPresetObject>
 8003698:	6078      	str	r0, [r7, #4]
	if(pVppPresetTmp)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <GainSignalMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pVppPresetTmp->epos;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8b1a      	ldrh	r2, [r3, #24]
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <GainSignalMenuEntryHandler+0x50>)
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <GainSignalMenuEntryHandler+0x50>)
 80036aa:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80036b0:	e002      	b.n	80036b8 <GainSignalMenuEntryHandler+0x3c>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80036b2:	4807      	ldr	r0, [pc, #28]	; (80036d0 <GainSignalMenuEntryHandler+0x54>)
 80036b4:	f7fd fe1a 	bl	80012ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <GainSignalMenuEntryHandler+0x58>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80036be:	2305      	movs	r3, #5
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	0800f900 	.word	0x0800f900
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	0800f94c 	.word	0x0800f94c
 80036d4:	20001f06 	.word	0x20001f06

080036d8 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 80036dc:	4807      	ldr	r0, [pc, #28]	; (80036fc <GainSignalMenuInputHandler+0x24>)
 80036de:	f009 fee5 	bl	800d4ac <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80036e2:	2001      	movs	r0, #1
 80036e4:	f000 fcf4 	bl	80040d0 <SM_GetEncoderValue>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fdfc 	bl	80042e8 <VPP_ModifyOutput>

	eNewEvent = evYellowBtn;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <GainSignalMenuInputHandler+0x28>)
 80036f2:	2203      	movs	r2, #3
 80036f4:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80036f6:	2305      	movs	r3, #5
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	0800f918 	.word	0x0800f918
 8003700:	20001f06 	.word	0x20001f06

08003704 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8003708:	4806      	ldr	r0, [pc, #24]	; (8003724 <GainSignalMenuExitHandler+0x20>)
 800370a:	f009 fecf 	bl	800d4ac <puts>
#endif

	DM_ShowGainMenu(ENABLE_GAIN_MAIN_MENU);
 800370e:	2001      	movs	r0, #1
 8003710:	f7fd fcd4 	bl	80010bc <DM_ShowGainMenu>

	DM_RefreshScreen();
 8003714:	f7fd fd2c 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <GainSignalMenuExitHandler+0x24>)
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800371e:	2304      	movs	r3, #4
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0800f930 	.word	0x0800f930
 8003728:	20001f06 	.word	0x20001f06

0800372c <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8003730:	4806      	ldr	r0, [pc, #24]	; (800374c <GainSyncMenuEntryHandler+0x20>)
 8003732:	f009 febb 	bl	800d4ac <puts>
#endif

	DM_RefreshScreen();
 8003736:	f7fd fd1b 	bl	8001170 <DM_RefreshScreen>

	DM_ShowGainMenu(ENABLE_GAIN_SYNC_MENU);
 800373a:	2003      	movs	r0, #3
 800373c:	f7fd fcbe 	bl	80010bc <DM_ShowGainMenu>
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <GainSyncMenuEntryHandler+0x24>)
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003746:	2306      	movs	r3, #6
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	0800f900 	.word	0x0800f900
 8003750:	20001f06 	.word	0x20001f06

08003754 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8003758:	4804      	ldr	r0, [pc, #16]	; (800376c <GainSyncMenuInputHandler+0x18>)
 800375a:	f009 fea7 	bl	800d4ac <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
//	VPP_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));

	eNewEvent = evYellowBtn;
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <GainSyncMenuInputHandler+0x1c>)
 8003760:	2203      	movs	r2, #3
 8003762:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003764:	2306      	movs	r3, #6
}
 8003766:	4618      	mov	r0, r3
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	0800f918 	.word	0x0800f918
 8003770:	20001f06 	.word	0x20001f06

08003774 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8003778:	4806      	ldr	r0, [pc, #24]	; (8003794 <GainSyncMenuExitHandler+0x20>)
 800377a:	f009 fe97 	bl	800d4ac <puts>
#endif

	DM_ShowGainMenu(ENABLE_GAIN_MAIN_MENU);
 800377e:	2001      	movs	r0, #1
 8003780:	f7fd fc9c 	bl	80010bc <DM_ShowGainMenu>

	DM_RefreshScreen();
 8003784:	f7fd fcf4 	bl	8001170 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <GainSyncMenuExitHandler+0x24>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800378e:	2304      	movs	r3, #4
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	0800f930 	.word	0x0800f930
 8003798:	20001f06 	.word	0x20001f06

0800379c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <BO_GetBiasPolarity+0x14>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000008 	.word	0x20000008

080037b4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <BO_GetDcBiasEncoderValue+0x14>)
 80037ba:	881b      	ldrh	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000000a 	.word	0x2000000a

080037cc <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f000 fc7a 	bl	80040d0 <SM_GetEncoderValue>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <BO_ModifyOutput+0x84>)
 80037e2:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80037ea:	d214      	bcs.n	8003816 <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <BO_ModifyOutput+0x88>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003800:	2200      	movs	r2, #0
 8003802:	2110      	movs	r1, #16
 8003804:	4814      	ldr	r0, [pc, #80]	; (8003858 <BO_ModifyOutput+0x8c>)
 8003806:	f004 fe97 	bl	8008538 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800380a:	2201      	movs	r2, #1
 800380c:	2108      	movs	r1, #8
 800380e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003812:	f005 fd67 	bl	80092e4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800381c:	d314      	bcc.n	8003848 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <BO_ModifyOutput+0x88>)
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003832:	2200      	movs	r2, #0
 8003834:	2110      	movs	r1, #16
 8003836:	4808      	ldr	r0, [pc, #32]	; (8003858 <BO_ModifyOutput+0x8c>)
 8003838:	f004 fe7e 	bl	8008538 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800383c:	2200      	movs	r2, #0
 800383e:	2108      	movs	r1, #8
 8003840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003844:	f005 fd4e 	bl	80092e4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	2000000a 	.word	0x2000000a
 8003854:	20000008 	.word	0x20000008
 8003858:	200023ec 	.word	0x200023ec

0800385c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003860:	2110      	movs	r1, #16
 8003862:	4803      	ldr	r0, [pc, #12]	; (8003870 <BO_GetOutputBias+0x14>)
 8003864:	f004 fea4 	bl	80085b0 <HAL_DAC_GetValue>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200023ec 	.word	0x200023ec

08003874 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	e06b      	b.n	8003958 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8003880:	493a      	ldr	r1, [pc, #232]	; (800396c <DT_InitRegister+0xf8>)
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	3308      	adds	r3, #8
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d129      	bne.n	80038ea <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8003896:	4935      	ldr	r1, [pc, #212]	; (800396c <DT_InitRegister+0xf8>)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3304      	adds	r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a31      	ldr	r2, [pc, #196]	; (8003970 <DT_InitRegister+0xfc>)
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038b6:	492d      	ldr	r1, [pc, #180]	; (800396c <DT_InitRegister+0xf8>)
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3310      	adds	r3, #16
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d2:	ee17 0a90 	vmov	r0, s15
 80038d6:	4925      	ldr	r1, [pc, #148]	; (800396c <DT_InitRegister+0xf8>)
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	330c      	adds	r3, #12
 80038e6:	6018      	str	r0, [r3, #0]
 80038e8:	e033      	b.n	8003952 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80038ea:	4920      	ldr	r1, [pc, #128]	; (800396c <DT_InitRegister+0xf8>)
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3304      	adds	r3, #4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <DT_InitRegister+0xfc>)
 80038fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8003902:	481a      	ldr	r0, [pc, #104]	; (800396c <DT_InitRegister+0xf8>)
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4403      	add	r3, r0
 8003910:	3308      	adds	r3, #8
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fbb1 f3f3 	udiv	r3, r1, r3
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <DT_InitRegister+0xf8>)
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3310      	adds	r3, #16
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393c:	ee17 0a90 	vmov	r0, s15
 8003940:	490a      	ldr	r1, [pc, #40]	; (800396c <DT_InitRegister+0xf8>)
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	330c      	adds	r3, #12
 8003950:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3301      	adds	r3, #1
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b0d      	cmp	r3, #13
 800395c:	dd90      	ble.n	8003880 <DT_InitRegister+0xc>
	}
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	2000000c 	.word	0x2000000c
 8003970:	00155cc0 	.word	0x00155cc0

08003974 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e016      	b.n	80039b0 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8003982:	4910      	ldr	r1, [pc, #64]	; (80039c4 <DT_GetRegisterByEnum+0x50>)
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3304      	adds	r3, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d107      	bne.n	80039aa <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <DT_GetRegisterByEnum+0x50>)
 80039a6:	4413      	add	r3, r2
 80039a8:	e006      	b.n	80039b8 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3301      	adds	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b0d      	cmp	r3, #13
 80039b4:	dde5      	ble.n	8003982 <DT_GetRegisterByEnum+0xe>

	return 0;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80039cc:	2000      	movs	r0, #0
 80039ce:	f000 fb7f 	bl	80040d0 <SM_GetEncoderValue>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <FreqO_AdjustFreq+0x18>)
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40013400 	.word	0x40013400

080039e4 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b38      	cmp	r3, #56	; 0x38
 80039f2:	f200 80b4 	bhi.w	8003b5e <FreqO_ModifyOutput+0x17a>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <FreqO_ModifyOutput+0x18>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003ae1 	.word	0x08003ae1
 8003a00:	08003ae1 	.word	0x08003ae1
 8003a04:	08003ae1 	.word	0x08003ae1
 8003a08:	08003ae1 	.word	0x08003ae1
 8003a0c:	08003ae9 	.word	0x08003ae9
 8003a10:	08003ae9 	.word	0x08003ae9
 8003a14:	08003ae9 	.word	0x08003ae9
 8003a18:	08003ae9 	.word	0x08003ae9
 8003a1c:	08003af1 	.word	0x08003af1
 8003a20:	08003af1 	.word	0x08003af1
 8003a24:	08003af1 	.word	0x08003af1
 8003a28:	08003af1 	.word	0x08003af1
 8003a2c:	08003af9 	.word	0x08003af9
 8003a30:	08003af9 	.word	0x08003af9
 8003a34:	08003af9 	.word	0x08003af9
 8003a38:	08003af9 	.word	0x08003af9
 8003a3c:	08003b01 	.word	0x08003b01
 8003a40:	08003b01 	.word	0x08003b01
 8003a44:	08003b01 	.word	0x08003b01
 8003a48:	08003b01 	.word	0x08003b01
 8003a4c:	08003b09 	.word	0x08003b09
 8003a50:	08003b09 	.word	0x08003b09
 8003a54:	08003b09 	.word	0x08003b09
 8003a58:	08003b09 	.word	0x08003b09
 8003a5c:	08003b13 	.word	0x08003b13
 8003a60:	08003b13 	.word	0x08003b13
 8003a64:	08003b13 	.word	0x08003b13
 8003a68:	08003b13 	.word	0x08003b13
 8003a6c:	08003b1d 	.word	0x08003b1d
 8003a70:	08003b1d 	.word	0x08003b1d
 8003a74:	08003b1d 	.word	0x08003b1d
 8003a78:	08003b5f 	.word	0x08003b5f
 8003a7c:	08003b1d 	.word	0x08003b1d
 8003a80:	08003b27 	.word	0x08003b27
 8003a84:	08003b27 	.word	0x08003b27
 8003a88:	08003b27 	.word	0x08003b27
 8003a8c:	08003b27 	.word	0x08003b27
 8003a90:	08003b31 	.word	0x08003b31
 8003a94:	08003b31 	.word	0x08003b31
 8003a98:	08003b31 	.word	0x08003b31
 8003a9c:	08003b31 	.word	0x08003b31
 8003aa0:	08003b3b 	.word	0x08003b3b
 8003aa4:	08003b3b 	.word	0x08003b3b
 8003aa8:	08003b3b 	.word	0x08003b3b
 8003aac:	08003b3b 	.word	0x08003b3b
 8003ab0:	08003b45 	.word	0x08003b45
 8003ab4:	08003b45 	.word	0x08003b45
 8003ab8:	08003b45 	.word	0x08003b45
 8003abc:	08003b45 	.word	0x08003b45
 8003ac0:	08003b4f 	.word	0x08003b4f
 8003ac4:	08003b4f 	.word	0x08003b4f
 8003ac8:	08003b4f 	.word	0x08003b4f
 8003acc:	08003b4f 	.word	0x08003b4f
 8003ad0:	08003b57 	.word	0x08003b57
 8003ad4:	08003b57 	.word	0x08003b57
 8003ad8:	08003b57 	.word	0x08003b57
 8003adc:	08003b57 	.word	0x08003b57
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f000 f845 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003ae6:	e03a      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8003ae8:	200a      	movs	r0, #10
 8003aea:	f000 f841 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003aee:	e036      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8003af0:	2032      	movs	r0, #50	; 0x32
 8003af2:	f000 f83d 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003af6:	e032      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8003af8:	2064      	movs	r0, #100	; 0x64
 8003afa:	f000 f839 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003afe:	e02e      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003b00:	20fa      	movs	r0, #250	; 0xfa
 8003b02:	f000 f835 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b06:	e02a      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b0c:	f000 f830 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b10:	e025      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8003b12:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003b16:	f000 f82b 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b1a:	e020      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8003b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b20:	f000 f826 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b24:	e01b      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8003b26:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b2a:	f000 f821 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b2e:	e016      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003b30:	f242 7010 	movw	r0, #10000	; 0x2710
 8003b34:	f000 f81c 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b38:	e011      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8003b3a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003b3e:	f000 f817 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b42:	e00c      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8003b44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b48:	f000 f812 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b4c:	e007      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8003b4e:	4806      	ldr	r0, [pc, #24]	; (8003b68 <FreqO_ModifyOutput+0x184>)
 8003b50:	f000 f80e 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b54:	e003      	b.n	8003b5e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8003b56:	4805      	ldr	r0, [pc, #20]	; (8003b6c <FreqO_ModifyOutput+0x188>)
 8003b58:	f000 f80a 	bl	8003b70 <FreqO_ApplyPreset>
			break;
 8003b5c:	bf00      	nop
	}

}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	000124f8 	.word	0x000124f8
 8003b6c:	000186a0 	.word	0x000186a0

08003b70 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fefb 	bl	8003974 <DT_GetRegisterByEnum>
 8003b7e:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <FreqO_ApplyPreset+0x42>
	{
		TIM8->PSC = tmp->psc;
 8003b86:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <FreqO_ApplyPreset+0x4c>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 8003b8e:	4a0b      	ldr	r2, [pc, #44]	; (8003bbc <FreqO_ApplyPreset+0x4c>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f822 	bl	8003be0 <FreqO_FindFPresetObject>
 8003b9c:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <FreqO_ApplyPreset+0x3c>
		{
			pNewFreqPresetEncoderPos = tmp;
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <FreqO_ApplyPreset+0x50>)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8003baa:	e002      	b.n	8003bb2 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8003bac:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <FreqO_ApplyPreset+0x54>)
 8003bae:	f7fd fb9d 	bl	80012ec <DM_SetErrorDebugMsg>
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40013400 	.word	0x40013400
 8003bc0:	20000198 	.word	0x20000198
 8003bc4:	0800f984 	.word	0x0800f984

08003bc8 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <FreqO_GetFPresetObject+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000198 	.word	0x20000198

08003be0 <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	e00e      	b.n	8003c0c <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 8003bee:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <FreqO_FindFPresetObject+0x44>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d104      	bne.n	8003c06 <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <FreqO_FindFPresetObject+0x44>)
 8003c02:	4413      	add	r3, r2
 8003c04:	e009      	b.n	8003c1a <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b0d      	cmp	r3, #13
 8003c10:	dded      	ble.n	8003bee <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8003c12:	4805      	ldr	r0, [pc, #20]	; (8003c28 <FreqO_FindFPresetObject+0x48>)
 8003c14:	f7fd fb6a 	bl	80012ec <DM_SetErrorDebugMsg>
	return 0;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000128 	.word	0x20000128
 8003c28:	0800f9ac 	.word	0x0800f9ac

08003c2c <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000124 	.word	0x20000124

08003c44 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8003c48:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <FreqO_GetOutputFreq+0x14>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40013400 	.word	0x40013400

08003c5c <FuncO_Init>:

uint32_t *pOriginalDataTable = sine_data_table_3600;
//uint32_t *pOriginalDataTable = sine_data_table_1300;

void FuncO_Init()
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	e00a      	b.n	8003c7e <FuncO_Init+0x22>
		aModdedDataTable[i] = sine_data_table_3600[i];
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <FuncO_Init+0x34>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c70:	4908      	ldr	r1, [pc, #32]	; (8003c94 <FuncO_Init+0x38>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b77      	cmp	r3, #119	; 0x77
 8003c82:	ddf1      	ble.n	8003c68 <FuncO_Init+0xc>
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	20001568 	.word	0x20001568
 8003c94:	20001f28 	.word	0x20001f28

08003c98 <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput(uint16_t pEncoderValue)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	2b17      	cmp	r3, #23
 8003ca6:	d84b      	bhi.n	8003d40 <FuncO_ModifyOutput+0xa8>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <FuncO_ModifyOutput+0x18>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003d11 	.word	0x08003d11
 8003cb4:	08003d11 	.word	0x08003d11
 8003cb8:	08003d11 	.word	0x08003d11
 8003cbc:	08003d19 	.word	0x08003d19
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d21 	.word	0x08003d21
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003d21 	.word	0x08003d21
 8003cdc:	08003d29 	.word	0x08003d29
 8003ce0:	08003d29 	.word	0x08003d29
 8003ce4:	08003d29 	.word	0x08003d29
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d31 	.word	0x08003d31
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d39 	.word	0x08003d39
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d39 	.word	0x08003d39
	{
		case 0:
		case 1:
		case 2:

			FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f000 f819 	bl	8003d48 <FuncO_ApplyPreset_Fast>
			break;
 8003d16:	e013      	b.n	8003d40 <FuncO_ModifyOutput+0xa8>
		case 3:
		case 4:
		case 5:
		case 6:

			FuncO_ApplyPreset_Fast(SQUARE_FUNC_MODE);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f000 f815 	bl	8003d48 <FuncO_ApplyPreset_Fast>

			break;
 8003d1e:	e00f      	b.n	8003d40 <FuncO_ModifyOutput+0xa8>
		case 7:
		case 8:
		case 9:
		case 10:

			FuncO_ApplyPreset_Fast(SAW_FUNC_MODE);
 8003d20:	2002      	movs	r0, #2
 8003d22:	f000 f811 	bl	8003d48 <FuncO_ApplyPreset_Fast>
			break;
 8003d26:	e00b      	b.n	8003d40 <FuncO_ModifyOutput+0xa8>
		case 11:
		case 12:
		case 13:
		case 14:

			FuncO_ApplyPreset_Fast(REV_SAW_FUNC_MODE);
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f000 f80d 	bl	8003d48 <FuncO_ApplyPreset_Fast>
			break;
 8003d2e:	e007      	b.n	8003d40 <FuncO_ModifyOutput+0xa8>
		case 15:
		case 16:
		case 17:
		case 18:

			FuncO_ApplyPreset_Fast(TRIANGLE_FUNC_MODE);
 8003d30:	2004      	movs	r0, #4
 8003d32:	f000 f809 	bl	8003d48 <FuncO_ApplyPreset_Fast>
			break;
 8003d36:	e003      	b.n	8003d40 <FuncO_ModifyOutput+0xa8>
		case 20:
		case 21:
		case 22:
		case 23:

			FuncO_ApplyPreset_Fast(IMPULSE_FUNC_MODE);
 8003d38:	2005      	movs	r0, #5
 8003d3a:	f000 f805 	bl	8003d48 <FuncO_ApplyPreset_Fast>
			break;
 8003d3e:	bf00      	nop
	}
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <FuncO_ApplyPreset_Fast>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset_Fast(eOutput_mode pPresetEnum)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]

	switch(pPresetEnum)
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	f200 80b1 	bhi.w	8003ebc <FuncO_ApplyPreset_Fast+0x174>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <FuncO_ApplyPreset_Fast+0x18>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d79 	.word	0x08003d79
 8003d64:	08003daf 	.word	0x08003daf
 8003d68:	08003de5 	.word	0x08003de5
 8003d6c:	08003e1b 	.word	0x08003e1b
 8003d70:	08003e51 	.word	0x08003e51
 8003d74:	08003e87 	.word	0x08003e87
	{
		case SINE_FUNC_MODE:

			pOriginalDataTable = sine_data_table_3600;
 8003d78:	4b52      	ldr	r3, [pc, #328]	; (8003ec4 <FuncO_ApplyPreset_Fast+0x17c>)
 8003d7a:	4a53      	ldr	r2, [pc, #332]	; (8003ec8 <FuncO_ApplyPreset_Fast+0x180>)
 8003d7c:	601a      	str	r2, [r3, #0]
			//pOriginalDataTable = sine_data_table_1300;

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f000 ff5c 	bl	8004c3c <VPP_GetVppPresetObject>
 8003d84:	4603      	mov	r3, r0
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fa01 	bl	8004190 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[0];
 8003d8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <FuncO_ApplyPreset_Fast+0x184>)
 8003d90:	4a4f      	ldr	r2, [pc, #316]	; (8003ed0 <FuncO_ApplyPreset_Fast+0x188>)
 8003d92:	601a      	str	r2, [r3, #0]

			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003d94:	2100      	movs	r1, #0
 8003d96:	484f      	ldr	r0, [pc, #316]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003d98:	f004 fb78 	bl	800848c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2378      	movs	r3, #120	; 0x78
 8003da2:	4a4d      	ldr	r2, [pc, #308]	; (8003ed8 <FuncO_ApplyPreset_Fast+0x190>)
 8003da4:	2100      	movs	r1, #0
 8003da6:	484b      	ldr	r0, [pc, #300]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003da8:	f004 faae 	bl	8008308 <HAL_DAC_Start_DMA>
			break;
 8003dac:	e086      	b.n	8003ebc <FuncO_ApplyPreset_Fast+0x174>

		case SQUARE_FUNC_MODE:

			pOriginalDataTable = square_data_table_3600;
 8003dae:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <FuncO_ApplyPreset_Fast+0x17c>)
 8003db0:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <FuncO_ApplyPreset_Fast+0x194>)
 8003db2:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f000 ff41 	bl	8004c3c <VPP_GetVppPresetObject>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f9e6 	bl	8004190 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[1];
 8003dc4:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <FuncO_ApplyPreset_Fast+0x184>)
 8003dc6:	4a46      	ldr	r2, [pc, #280]	; (8003ee0 <FuncO_ApplyPreset_Fast+0x198>)
 8003dc8:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4841      	ldr	r0, [pc, #260]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003dce:	f004 fb5d 	bl	800848c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2378      	movs	r3, #120	; 0x78
 8003dd8:	4a3f      	ldr	r2, [pc, #252]	; (8003ed8 <FuncO_ApplyPreset_Fast+0x190>)
 8003dda:	2100      	movs	r1, #0
 8003ddc:	483d      	ldr	r0, [pc, #244]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003dde:	f004 fa93 	bl	8008308 <HAL_DAC_Start_DMA>
			break;
 8003de2:	e06b      	b.n	8003ebc <FuncO_ApplyPreset_Fast+0x174>

		case SAW_FUNC_MODE:

			pOriginalDataTable = saw_data_table_3600;
 8003de4:	4b37      	ldr	r3, [pc, #220]	; (8003ec4 <FuncO_ApplyPreset_Fast+0x17c>)
 8003de6:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <FuncO_ApplyPreset_Fast+0x19c>)
 8003de8:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f000 ff26 	bl	8004c3c <VPP_GetVppPresetObject>
 8003df0:	4603      	mov	r3, r0
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f9cb 	bl	8004190 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[2];
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <FuncO_ApplyPreset_Fast+0x184>)
 8003dfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <FuncO_ApplyPreset_Fast+0x1a0>)
 8003dfe:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003e00:	2100      	movs	r1, #0
 8003e02:	4834      	ldr	r0, [pc, #208]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e04:	f004 fb42 	bl	800848c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2378      	movs	r3, #120	; 0x78
 8003e0e:	4a32      	ldr	r2, [pc, #200]	; (8003ed8 <FuncO_ApplyPreset_Fast+0x190>)
 8003e10:	2100      	movs	r1, #0
 8003e12:	4830      	ldr	r0, [pc, #192]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e14:	f004 fa78 	bl	8008308 <HAL_DAC_Start_DMA>
			break;
 8003e18:	e050      	b.n	8003ebc <FuncO_ApplyPreset_Fast+0x174>

		case REV_SAW_FUNC_MODE:

			pOriginalDataTable = saw_rev_data_table_3600;
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <FuncO_ApplyPreset_Fast+0x17c>)
 8003e1c:	4a33      	ldr	r2, [pc, #204]	; (8003eec <FuncO_ApplyPreset_Fast+0x1a4>)
 8003e1e:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f000 ff0b 	bl	8004c3c <VPP_GetVppPresetObject>
 8003e26:	4603      	mov	r3, r0
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f9b0 	bl	8004190 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[3];
 8003e30:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <FuncO_ApplyPreset_Fast+0x184>)
 8003e32:	4a2f      	ldr	r2, [pc, #188]	; (8003ef0 <FuncO_ApplyPreset_Fast+0x1a8>)
 8003e34:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003e36:	2100      	movs	r1, #0
 8003e38:	4826      	ldr	r0, [pc, #152]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e3a:	f004 fb27 	bl	800848c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2378      	movs	r3, #120	; 0x78
 8003e44:	4a24      	ldr	r2, [pc, #144]	; (8003ed8 <FuncO_ApplyPreset_Fast+0x190>)
 8003e46:	2100      	movs	r1, #0
 8003e48:	4822      	ldr	r0, [pc, #136]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e4a:	f004 fa5d 	bl	8008308 <HAL_DAC_Start_DMA>
			break;
 8003e4e:	e035      	b.n	8003ebc <FuncO_ApplyPreset_Fast+0x174>

		case TRIANGLE_FUNC_MODE:

			pOriginalDataTable = triangle_data_table_3600;
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <FuncO_ApplyPreset_Fast+0x17c>)
 8003e52:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <FuncO_ApplyPreset_Fast+0x1ac>)
 8003e54:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f000 fef0 	bl	8004c3c <VPP_GetVppPresetObject>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f995 	bl	8004190 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[4];
 8003e66:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <FuncO_ApplyPreset_Fast+0x184>)
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <FuncO_ApplyPreset_Fast+0x1b0>)
 8003e6a:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4819      	ldr	r0, [pc, #100]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e70:	f004 fb0c 	bl	800848c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003e74:	2300      	movs	r3, #0
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2378      	movs	r3, #120	; 0x78
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <FuncO_ApplyPreset_Fast+0x190>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4815      	ldr	r0, [pc, #84]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e80:	f004 fa42 	bl	8008308 <HAL_DAC_Start_DMA>
			break;
 8003e84:	e01a      	b.n	8003ebc <FuncO_ApplyPreset_Fast+0x174>

		case IMPULSE_FUNC_MODE:

			pOriginalDataTable = unitimpulse_data_table_3600;
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <FuncO_ApplyPreset_Fast+0x17c>)
 8003e88:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <FuncO_ApplyPreset_Fast+0x1b4>)
 8003e8a:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f000 fed5 	bl	8004c3c <VPP_GetVppPresetObject>
 8003e92:	4603      	mov	r3, r0
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f97a 	bl	8004190 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[5];
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <FuncO_ApplyPreset_Fast+0x184>)
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <FuncO_ApplyPreset_Fast+0x1b8>)
 8003ea0:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	480b      	ldr	r0, [pc, #44]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003ea6:	f004 faf1 	bl	800848c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, UNITIMPULSE_DATA_SIZE,  DAC_ALIGN_12B_R);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2378      	movs	r3, #120	; 0x78
 8003eb0:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <FuncO_ApplyPreset_Fast+0x190>)
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <FuncO_ApplyPreset_Fast+0x18c>)
 8003eb6:	f004 fa27 	bl	8008308 <HAL_DAC_Start_DMA>
			break;
 8003eba:	bf00      	nop
	//
	}



}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200001b0 	.word	0x200001b0
 8003ec8:	20001568 	.word	0x20001568
 8003ecc:	200001ac 	.word	0x200001ac
 8003ed0:	200001a0 	.word	0x200001a0
 8003ed4:	200023ec 	.word	0x200023ec
 8003ed8:	20001f28 	.word	0x20001f28
 8003edc:	20001748 	.word	0x20001748
 8003ee0:	200001a2 	.word	0x200001a2
 8003ee4:	200011a8 	.word	0x200011a8
 8003ee8:	200001a4 	.word	0x200001a4
 8003eec:	20001388 	.word	0x20001388
 8003ef0:	200001a6 	.word	0x200001a6
 8003ef4:	20001928 	.word	0x20001928
 8003ef8:	200001a8 	.word	0x200001a8
 8003efc:	20001b08 	.word	0x20001b08
 8003f00:	200001aa 	.word	0x200001aa

08003f04 <FuncO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Func_Preset_Encoder_Pos_t struct
 *
 */
Func_Preset_Encoder_Pos_t * FuncO_GetFPresetObject()
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
	return pNewFuncPresetEncoderPos;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <FuncO_GetFPresetObject+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	200001ac 	.word	0x200001ac

08003f1c <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000019c 	.word	0x2000019c

08003f34 <GO_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPreset_Fast(eOutput_gain pPresetEnum)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]



	switch(pPresetEnum)
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	f200 80ab 	bhi.w	800409c <GO_ApplyPreset_Fast+0x168>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <GO_ApplyPreset_Fast+0x18>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f6d 	.word	0x08003f6d
 8003f50:	08003f93 	.word	0x08003f93
 8003f54:	08003fb9 	.word	0x08003fb9
 8003f58:	08003fdf 	.word	0x08003fdf
 8003f5c:	08004005 	.word	0x08004005
 8003f60:	0800402b 	.word	0x0800402b
 8003f64:	08004051 	.word	0x08004051
 8003f68:	08004077 	.word	0x08004077
	{
		case ZERO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[0];
 8003f6c:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 8003f6e:	4a4e      	ldr	r2, [pc, #312]	; (80040a8 <GO_ApplyPreset_Fast+0x174>)
 8003f70:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2101      	movs	r1, #1
 8003f76:	484d      	ldr	r0, [pc, #308]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 8003f78:	f005 f9b4 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2120      	movs	r1, #32
 8003f80:	484b      	ldr	r0, [pc, #300]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003f82:	f005 f9af 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003f86:	2200      	movs	r2, #0
 8003f88:	2110      	movs	r1, #16
 8003f8a:	4849      	ldr	r0, [pc, #292]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003f8c:	f005 f9aa 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 8003f90:	e084      	b.n	800409c <GO_ApplyPreset_Fast+0x168>

		case ONE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[1];
 8003f92:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 8003f94:	4a47      	ldr	r2, [pc, #284]	; (80040b4 <GO_ApplyPreset_Fast+0x180>)
 8003f96:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4843      	ldr	r0, [pc, #268]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 8003f9e:	f005 f9a1 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	4842      	ldr	r0, [pc, #264]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003fa8:	f005 f99c 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003fac:	2200      	movs	r2, #0
 8003fae:	2110      	movs	r1, #16
 8003fb0:	483f      	ldr	r0, [pc, #252]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003fb2:	f005 f997 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 8003fb6:	e071      	b.n	800409c <GO_ApplyPreset_Fast+0x168>

		case TWO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[2];
 8003fb8:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 8003fba:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <GO_ApplyPreset_Fast+0x184>)
 8003fbc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	483a      	ldr	r0, [pc, #232]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 8003fc4:	f005 f98e 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003fc8:	2201      	movs	r2, #1
 8003fca:	2120      	movs	r1, #32
 8003fcc:	4838      	ldr	r0, [pc, #224]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003fce:	f005 f989 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2110      	movs	r1, #16
 8003fd6:	4836      	ldr	r0, [pc, #216]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003fd8:	f005 f984 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 8003fdc:	e05e      	b.n	800409c <GO_ApplyPreset_Fast+0x168>

		case THREE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[3];
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 8003fe0:	4a36      	ldr	r2, [pc, #216]	; (80040bc <GO_ApplyPreset_Fast+0x188>)
 8003fe2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	4830      	ldr	r0, [pc, #192]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 8003fea:	f005 f97b 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	482f      	ldr	r0, [pc, #188]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003ff4:	f005 f976 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2110      	movs	r1, #16
 8003ffc:	482c      	ldr	r0, [pc, #176]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8003ffe:	f005 f971 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 8004002:	e04b      	b.n	800409c <GO_ApplyPreset_Fast+0x168>

		case FOUR_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[4];
 8004004:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 8004006:	4a2e      	ldr	r2, [pc, #184]	; (80040c0 <GO_ApplyPreset_Fast+0x18c>)
 8004008:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800400a:	2200      	movs	r2, #0
 800400c:	2101      	movs	r1, #1
 800400e:	4827      	ldr	r0, [pc, #156]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 8004010:	f005 f968 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004014:	2200      	movs	r2, #0
 8004016:	2120      	movs	r1, #32
 8004018:	4825      	ldr	r0, [pc, #148]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 800401a:	f005 f963 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800401e:	2201      	movs	r2, #1
 8004020:	2110      	movs	r1, #16
 8004022:	4823      	ldr	r0, [pc, #140]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8004024:	f005 f95e 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 8004028:	e038      	b.n	800409c <GO_ApplyPreset_Fast+0x168>

		case FIVE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[5];
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 800402c:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <GO_ApplyPreset_Fast+0x190>)
 800402e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004030:	2201      	movs	r2, #1
 8004032:	2101      	movs	r1, #1
 8004034:	481d      	ldr	r0, [pc, #116]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 8004036:	f005 f955 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800403a:	2200      	movs	r2, #0
 800403c:	2120      	movs	r1, #32
 800403e:	481c      	ldr	r0, [pc, #112]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8004040:	f005 f950 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004044:	2201      	movs	r2, #1
 8004046:	2110      	movs	r1, #16
 8004048:	4819      	ldr	r0, [pc, #100]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 800404a:	f005 f94b 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 800404e:	e025      	b.n	800409c <GO_ApplyPreset_Fast+0x168>

		case SIX_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[6];
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <GO_ApplyPreset_Fast+0x194>)
 8004054:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004056:	2200      	movs	r2, #0
 8004058:	2101      	movs	r1, #1
 800405a:	4814      	ldr	r0, [pc, #80]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 800405c:	f005 f942 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004060:	2201      	movs	r2, #1
 8004062:	2120      	movs	r1, #32
 8004064:	4812      	ldr	r0, [pc, #72]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8004066:	f005 f93d 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800406a:	2201      	movs	r2, #1
 800406c:	2110      	movs	r1, #16
 800406e:	4810      	ldr	r0, [pc, #64]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8004070:	f005 f938 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 8004074:	e012      	b.n	800409c <GO_ApplyPreset_Fast+0x168>

		case SEVEN_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[7];
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <GO_ApplyPreset_Fast+0x170>)
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <GO_ApplyPreset_Fast+0x198>)
 800407a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800407c:	2201      	movs	r2, #1
 800407e:	2101      	movs	r1, #1
 8004080:	480a      	ldr	r0, [pc, #40]	; (80040ac <GO_ApplyPreset_Fast+0x178>)
 8004082:	f005 f92f 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004086:	2201      	movs	r2, #1
 8004088:	2120      	movs	r1, #32
 800408a:	4809      	ldr	r0, [pc, #36]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 800408c:	f005 f92a 	bl	80092e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004090:	2201      	movs	r2, #1
 8004092:	2110      	movs	r1, #16
 8004094:	4806      	ldr	r0, [pc, #24]	; (80040b0 <GO_ApplyPreset_Fast+0x17c>)
 8004096:	f005 f925 	bl	80092e4 <HAL_GPIO_WritePin>
			break;
 800409a:	bf00      	nop
	}
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	200001cc 	.word	0x200001cc
 80040a8:	200001b4 	.word	0x200001b4
 80040ac:	48000400 	.word	0x48000400
 80040b0:	48000800 	.word	0x48000800
 80040b4:	200001b7 	.word	0x200001b7
 80040b8:	200001ba 	.word	0x200001ba
 80040bc:	200001bd 	.word	0x200001bd
 80040c0:	200001c0 	.word	0x200001c0
 80040c4:	200001c3 	.word	0x200001c3
 80040c8:	200001c6 	.word	0x200001c6
 80040cc:	200001c9 	.word	0x200001c9

080040d0 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <SM_GetEncoderValue+0x34>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <SM_GetEncoderValue+0x34>)
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	e002      	b.n	80040f8 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <SM_GetEncoderValue+0x34>)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	b29b      	uxth	r3, r3
	}
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40012c00 	.word	0x40012c00

08004108 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <SM_GetOutputInHertz+0x7c>)
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <SM_GetOutputInHertz+0x16>
 8004116:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	e007      	b.n	800412e <SM_GetOutputInHertz+0x26>
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <SM_GetOutputInHertz+0x7c>)
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <SM_GetOutputInHertz+0x7c>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d103      	bne.n	800413e <SM_GetOutputInHertz+0x36>
 8004136:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	e007      	b.n	800414e <SM_GetOutputInHertz+0x46>
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <SM_GetOutputInHertz+0x7c>)
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 800414e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004152:	edd7 7a01 	vldr	s15, [r7, #4]
 8004156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800415a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004188 <SM_GetOutputInHertz+0x80>
 800415e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004162:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8004166:	edd7 7a03 	vldr	s15, [r7, #12]
 800416a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800418c <SM_GetOutputInHertz+0x84>
 800416e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004172:	eef0 7a66 	vmov.f32	s15, s13
}
 8004176:	eeb0 0a67 	vmov.f32	s0, s15
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40013400 	.word	0x40013400
 8004188:	4d2037a0 	.word	0x4d2037a0
 800418c:	42f00000 	.word	0x42f00000

08004190 <VPP_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPreset_Fast(eVppPreset_t pPresetEnum)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
    pSignalVppEncoderPreset = &aVppEncoderPresets[pPresetEnum];
 800419a:	79fa      	ldrb	r2, [r7, #7]
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4a0f      	ldr	r2, [pc, #60]	; (80041e4 <VPP_ApplyPreset_Fast+0x54>)
 80041a6:	4413      	add	r3, r2
 80041a8:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <VPP_ApplyPreset_Fast+0x58>)
 80041aa:	6013      	str	r3, [r2, #0]
    //GO_ApplyPreset_Fast((ONE_GAIN));

    // set the gain preset
    GO_ApplyPreset_Fast(pSignalVppEncoderPreset->gain_preset);
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <VPP_ApplyPreset_Fast+0x58>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	7a1b      	ldrb	r3, [r3, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff febe 	bl	8003f34 <GO_ApplyPreset_Fast>

    // set the amplitude
    _ProcessDataTable(pSignalVppEncoderPreset->neg_gain_coeff, pSignalVppEncoderPreset->vpp_offset , pSignalVppEncoderPreset->epos);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <VPP_ApplyPreset_Fast+0x58>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <VPP_ApplyPreset_Fast+0x58>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <VPP_ApplyPreset_Fast+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	8b1b      	ldrh	r3, [r3, #24]
 80041ce:	4618      	mov	r0, r3
 80041d0:	eef0 0a47 	vmov.f32	s1, s14
 80041d4:	eeb0 0a67 	vmov.f32	s0, s15
 80041d8:	f000 f808 	bl	80041ec <_ProcessDataTable>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200001d0 	.word	0x200001d0
 80041e8:	20000c88 	.word	0x20000c88

080041ec <_ProcessDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessDataTable(float _neg_gain_coeff, float vpp_offset, uint16_t _encoder_value)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	; 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80041f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80041fa:	4603      	mov	r3, r0
 80041fc:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e00c      	b.n	800421e <_ProcessDataTable+0x32>
	{
		tmpDataTable[i] = pOriginalDataTable[i];
 8004204:	4b35      	ldr	r3, [pc, #212]	; (80042dc <_ProcessDataTable+0xf0>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4933      	ldr	r1, [pc, #204]	; (80042e0 <_ProcessDataTable+0xf4>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3301      	adds	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b77      	cmp	r3, #119	; 0x77
 8004222:	ddef      	ble.n	8004204 <_ProcessDataTable+0x18>
	}

	float pos_offset_coeff = 1;
 8004224:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004228:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <_ProcessDataTable+0x56>
		pos_offset_coeff = (_encoder_value/4);
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	089b      	lsrs	r3, r3, #2
 8004234:	b29b      	uxth	r3, r3
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423e:	edc7 7a06 	vstr	s15, [r7, #24]

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e02e      	b.n	80042a6 <_ProcessDataTable+0xba>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8004248:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <_ProcessDataTable+0xf4>)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004258:	edd7 7a03 	vldr	s15, [r7, #12]
 800425c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004264:	ee17 1a90 	vmov	r1, s15
 8004268:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <_ProcessDataTable+0xf4>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (vpp_offset * pos_offset_coeff);
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <_ProcessDataTable+0xf4>)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004280:	edd7 6a02 	vldr	s13, [r7, #8]
 8004284:	edd7 7a06 	vldr	s15, [r7, #24]
 8004288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800428c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004294:	ee17 1a90 	vmov	r1, s15
 8004298:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <_ProcessDataTable+0xf4>)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3301      	adds	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b77      	cmp	r3, #119	; 0x77
 80042aa:	ddcd      	ble.n	8004248 <_ProcessDataTable+0x5c>
	}
	//HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e00a      	b.n	80042c8 <_ProcessDataTable+0xdc>
	{
		aModdedDataTable[i] = tmpDataTable[i];
 80042b2:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <_ProcessDataTable+0xf4>)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042ba:	490a      	ldr	r1, [pc, #40]	; (80042e4 <_ProcessDataTable+0xf8>)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b77      	cmp	r3, #119	; 0x77
 80042cc:	ddf1      	ble.n	80042b2 <_ProcessDataTable+0xc6>
	}
	//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SINE_DATA_SIZE,  DAC_ALIGN_12B_R);
}
 80042ce:	bf00      	nop
 80042d0:	3724      	adds	r7, #36	; 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	200001b0 	.word	0x200001b0
 80042e0:	20002108 	.word	0x20002108
 80042e4:	20001f28 	.word	0x20001f28

080042e8 <VPP_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ModifyOutput(uint16_t pEncoderValue)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80042f8:	f200 849a 	bhi.w	8004c30 <VPP_ModifyOutput+0x948>
 80042fc:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <VPP_ModifyOutput+0x1c>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004921 	.word	0x08004921
 8004308:	08004921 	.word	0x08004921
 800430c:	08004921 	.word	0x08004921
 8004310:	08004929 	.word	0x08004929
 8004314:	08004929 	.word	0x08004929
 8004318:	08004929 	.word	0x08004929
 800431c:	08004929 	.word	0x08004929
 8004320:	08004931 	.word	0x08004931
 8004324:	08004931 	.word	0x08004931
 8004328:	08004931 	.word	0x08004931
 800432c:	08004931 	.word	0x08004931
 8004330:	08004939 	.word	0x08004939
 8004334:	08004939 	.word	0x08004939
 8004338:	08004939 	.word	0x08004939
 800433c:	08004939 	.word	0x08004939
 8004340:	08004941 	.word	0x08004941
 8004344:	08004941 	.word	0x08004941
 8004348:	08004941 	.word	0x08004941
 800434c:	08004941 	.word	0x08004941
 8004350:	08004949 	.word	0x08004949
 8004354:	08004949 	.word	0x08004949
 8004358:	08004949 	.word	0x08004949
 800435c:	08004949 	.word	0x08004949
 8004360:	08004951 	.word	0x08004951
 8004364:	08004951 	.word	0x08004951
 8004368:	08004951 	.word	0x08004951
 800436c:	08004951 	.word	0x08004951
 8004370:	08004959 	.word	0x08004959
 8004374:	08004959 	.word	0x08004959
 8004378:	08004959 	.word	0x08004959
 800437c:	08004959 	.word	0x08004959
 8004380:	08004961 	.word	0x08004961
 8004384:	08004961 	.word	0x08004961
 8004388:	08004961 	.word	0x08004961
 800438c:	08004961 	.word	0x08004961
 8004390:	08004969 	.word	0x08004969
 8004394:	08004969 	.word	0x08004969
 8004398:	08004969 	.word	0x08004969
 800439c:	08004969 	.word	0x08004969
 80043a0:	08004971 	.word	0x08004971
 80043a4:	08004971 	.word	0x08004971
 80043a8:	08004971 	.word	0x08004971
 80043ac:	08004971 	.word	0x08004971
 80043b0:	08004979 	.word	0x08004979
 80043b4:	08004979 	.word	0x08004979
 80043b8:	08004979 	.word	0x08004979
 80043bc:	08004979 	.word	0x08004979
 80043c0:	08004981 	.word	0x08004981
 80043c4:	08004981 	.word	0x08004981
 80043c8:	08004981 	.word	0x08004981
 80043cc:	08004981 	.word	0x08004981
 80043d0:	08004989 	.word	0x08004989
 80043d4:	08004989 	.word	0x08004989
 80043d8:	08004989 	.word	0x08004989
 80043dc:	08004989 	.word	0x08004989
 80043e0:	08004991 	.word	0x08004991
 80043e4:	08004991 	.word	0x08004991
 80043e8:	08004991 	.word	0x08004991
 80043ec:	08004991 	.word	0x08004991
 80043f0:	08004999 	.word	0x08004999
 80043f4:	08004999 	.word	0x08004999
 80043f8:	08004999 	.word	0x08004999
 80043fc:	08004999 	.word	0x08004999
 8004400:	080049a1 	.word	0x080049a1
 8004404:	080049a1 	.word	0x080049a1
 8004408:	080049a1 	.word	0x080049a1
 800440c:	080049a1 	.word	0x080049a1
 8004410:	080049a9 	.word	0x080049a9
 8004414:	080049a9 	.word	0x080049a9
 8004418:	080049a9 	.word	0x080049a9
 800441c:	080049a9 	.word	0x080049a9
 8004420:	080049b1 	.word	0x080049b1
 8004424:	080049b1 	.word	0x080049b1
 8004428:	080049b1 	.word	0x080049b1
 800442c:	080049b1 	.word	0x080049b1
 8004430:	080049b9 	.word	0x080049b9
 8004434:	080049b9 	.word	0x080049b9
 8004438:	080049b9 	.word	0x080049b9
 800443c:	080049b9 	.word	0x080049b9
 8004440:	080049c1 	.word	0x080049c1
 8004444:	080049c1 	.word	0x080049c1
 8004448:	080049c1 	.word	0x080049c1
 800444c:	080049c1 	.word	0x080049c1
 8004450:	080049c9 	.word	0x080049c9
 8004454:	080049c9 	.word	0x080049c9
 8004458:	080049c9 	.word	0x080049c9
 800445c:	080049c9 	.word	0x080049c9
 8004460:	080049d1 	.word	0x080049d1
 8004464:	080049d1 	.word	0x080049d1
 8004468:	080049d1 	.word	0x080049d1
 800446c:	080049d1 	.word	0x080049d1
 8004470:	080049d9 	.word	0x080049d9
 8004474:	080049d9 	.word	0x080049d9
 8004478:	080049d9 	.word	0x080049d9
 800447c:	080049d9 	.word	0x080049d9
 8004480:	080049e1 	.word	0x080049e1
 8004484:	080049e1 	.word	0x080049e1
 8004488:	080049e1 	.word	0x080049e1
 800448c:	080049e1 	.word	0x080049e1
 8004490:	080049e9 	.word	0x080049e9
 8004494:	080049e9 	.word	0x080049e9
 8004498:	080049e9 	.word	0x080049e9
 800449c:	080049e9 	.word	0x080049e9
 80044a0:	080049f1 	.word	0x080049f1
 80044a4:	080049f1 	.word	0x080049f1
 80044a8:	080049f1 	.word	0x080049f1
 80044ac:	080049f1 	.word	0x080049f1
 80044b0:	080049f9 	.word	0x080049f9
 80044b4:	080049f9 	.word	0x080049f9
 80044b8:	080049f9 	.word	0x080049f9
 80044bc:	080049f9 	.word	0x080049f9
 80044c0:	08004a01 	.word	0x08004a01
 80044c4:	08004a01 	.word	0x08004a01
 80044c8:	08004a01 	.word	0x08004a01
 80044cc:	08004a01 	.word	0x08004a01
 80044d0:	08004a09 	.word	0x08004a09
 80044d4:	08004a09 	.word	0x08004a09
 80044d8:	08004a09 	.word	0x08004a09
 80044dc:	08004a09 	.word	0x08004a09
 80044e0:	08004a11 	.word	0x08004a11
 80044e4:	08004a11 	.word	0x08004a11
 80044e8:	08004a11 	.word	0x08004a11
 80044ec:	08004a11 	.word	0x08004a11
 80044f0:	08004a19 	.word	0x08004a19
 80044f4:	08004a19 	.word	0x08004a19
 80044f8:	08004a19 	.word	0x08004a19
 80044fc:	08004a19 	.word	0x08004a19
 8004500:	08004a21 	.word	0x08004a21
 8004504:	08004a21 	.word	0x08004a21
 8004508:	08004a21 	.word	0x08004a21
 800450c:	08004a21 	.word	0x08004a21
 8004510:	08004a29 	.word	0x08004a29
 8004514:	08004a29 	.word	0x08004a29
 8004518:	08004a29 	.word	0x08004a29
 800451c:	08004a29 	.word	0x08004a29
 8004520:	08004a31 	.word	0x08004a31
 8004524:	08004a31 	.word	0x08004a31
 8004528:	08004a31 	.word	0x08004a31
 800452c:	08004a31 	.word	0x08004a31
 8004530:	08004a39 	.word	0x08004a39
 8004534:	08004a39 	.word	0x08004a39
 8004538:	08004a39 	.word	0x08004a39
 800453c:	08004a39 	.word	0x08004a39
 8004540:	08004a41 	.word	0x08004a41
 8004544:	08004a41 	.word	0x08004a41
 8004548:	08004a41 	.word	0x08004a41
 800454c:	08004a41 	.word	0x08004a41
 8004550:	08004a49 	.word	0x08004a49
 8004554:	08004a49 	.word	0x08004a49
 8004558:	08004a49 	.word	0x08004a49
 800455c:	08004a49 	.word	0x08004a49
 8004560:	08004a51 	.word	0x08004a51
 8004564:	08004a51 	.word	0x08004a51
 8004568:	08004a51 	.word	0x08004a51
 800456c:	08004a51 	.word	0x08004a51
 8004570:	08004a59 	.word	0x08004a59
 8004574:	08004a59 	.word	0x08004a59
 8004578:	08004a59 	.word	0x08004a59
 800457c:	08004a59 	.word	0x08004a59
 8004580:	08004a61 	.word	0x08004a61
 8004584:	08004a61 	.word	0x08004a61
 8004588:	08004a61 	.word	0x08004a61
 800458c:	08004a61 	.word	0x08004a61
 8004590:	08004a69 	.word	0x08004a69
 8004594:	08004a69 	.word	0x08004a69
 8004598:	08004a69 	.word	0x08004a69
 800459c:	08004a69 	.word	0x08004a69
 80045a0:	08004a71 	.word	0x08004a71
 80045a4:	08004a71 	.word	0x08004a71
 80045a8:	08004a71 	.word	0x08004a71
 80045ac:	08004a71 	.word	0x08004a71
 80045b0:	08004a79 	.word	0x08004a79
 80045b4:	08004a79 	.word	0x08004a79
 80045b8:	08004a79 	.word	0x08004a79
 80045bc:	08004a79 	.word	0x08004a79
 80045c0:	08004a81 	.word	0x08004a81
 80045c4:	08004a81 	.word	0x08004a81
 80045c8:	08004a81 	.word	0x08004a81
 80045cc:	08004a81 	.word	0x08004a81
 80045d0:	08004a89 	.word	0x08004a89
 80045d4:	08004a89 	.word	0x08004a89
 80045d8:	08004a89 	.word	0x08004a89
 80045dc:	08004a89 	.word	0x08004a89
 80045e0:	08004a91 	.word	0x08004a91
 80045e4:	08004a91 	.word	0x08004a91
 80045e8:	08004a91 	.word	0x08004a91
 80045ec:	08004a91 	.word	0x08004a91
 80045f0:	08004a99 	.word	0x08004a99
 80045f4:	08004a99 	.word	0x08004a99
 80045f8:	08004a99 	.word	0x08004a99
 80045fc:	08004a99 	.word	0x08004a99
 8004600:	08004aa1 	.word	0x08004aa1
 8004604:	08004aa1 	.word	0x08004aa1
 8004608:	08004aa1 	.word	0x08004aa1
 800460c:	08004aa1 	.word	0x08004aa1
 8004610:	08004aa9 	.word	0x08004aa9
 8004614:	08004aa9 	.word	0x08004aa9
 8004618:	08004aa9 	.word	0x08004aa9
 800461c:	08004aa9 	.word	0x08004aa9
 8004620:	08004ab1 	.word	0x08004ab1
 8004624:	08004ab1 	.word	0x08004ab1
 8004628:	08004ab1 	.word	0x08004ab1
 800462c:	08004ab1 	.word	0x08004ab1
 8004630:	08004ab9 	.word	0x08004ab9
 8004634:	08004ab9 	.word	0x08004ab9
 8004638:	08004ab9 	.word	0x08004ab9
 800463c:	08004ab9 	.word	0x08004ab9
 8004640:	08004ac1 	.word	0x08004ac1
 8004644:	08004ac1 	.word	0x08004ac1
 8004648:	08004ac1 	.word	0x08004ac1
 800464c:	08004ac1 	.word	0x08004ac1
 8004650:	08004ac9 	.word	0x08004ac9
 8004654:	08004ac9 	.word	0x08004ac9
 8004658:	08004ac9 	.word	0x08004ac9
 800465c:	08004ac9 	.word	0x08004ac9
 8004660:	08004ad1 	.word	0x08004ad1
 8004664:	08004ad1 	.word	0x08004ad1
 8004668:	08004ad1 	.word	0x08004ad1
 800466c:	08004ad1 	.word	0x08004ad1
 8004670:	08004ad9 	.word	0x08004ad9
 8004674:	08004ad9 	.word	0x08004ad9
 8004678:	08004ad9 	.word	0x08004ad9
 800467c:	08004ad9 	.word	0x08004ad9
 8004680:	08004ae1 	.word	0x08004ae1
 8004684:	08004ae1 	.word	0x08004ae1
 8004688:	08004ae1 	.word	0x08004ae1
 800468c:	08004ae1 	.word	0x08004ae1
 8004690:	08004ae9 	.word	0x08004ae9
 8004694:	08004ae9 	.word	0x08004ae9
 8004698:	08004ae9 	.word	0x08004ae9
 800469c:	08004ae9 	.word	0x08004ae9
 80046a0:	08004af1 	.word	0x08004af1
 80046a4:	08004af1 	.word	0x08004af1
 80046a8:	08004af1 	.word	0x08004af1
 80046ac:	08004af1 	.word	0x08004af1
 80046b0:	08004af9 	.word	0x08004af9
 80046b4:	08004af9 	.word	0x08004af9
 80046b8:	08004af9 	.word	0x08004af9
 80046bc:	08004af9 	.word	0x08004af9
 80046c0:	08004b01 	.word	0x08004b01
 80046c4:	08004b01 	.word	0x08004b01
 80046c8:	08004b01 	.word	0x08004b01
 80046cc:	08004b01 	.word	0x08004b01
 80046d0:	08004b09 	.word	0x08004b09
 80046d4:	08004b09 	.word	0x08004b09
 80046d8:	08004b09 	.word	0x08004b09
 80046dc:	08004b09 	.word	0x08004b09
 80046e0:	08004b11 	.word	0x08004b11
 80046e4:	08004b11 	.word	0x08004b11
 80046e8:	08004b11 	.word	0x08004b11
 80046ec:	08004b11 	.word	0x08004b11
 80046f0:	08004b19 	.word	0x08004b19
 80046f4:	08004b19 	.word	0x08004b19
 80046f8:	08004b19 	.word	0x08004b19
 80046fc:	08004b19 	.word	0x08004b19
 8004700:	08004b21 	.word	0x08004b21
 8004704:	08004b21 	.word	0x08004b21
 8004708:	08004b21 	.word	0x08004b21
 800470c:	08004b21 	.word	0x08004b21
 8004710:	08004b29 	.word	0x08004b29
 8004714:	08004b29 	.word	0x08004b29
 8004718:	08004b29 	.word	0x08004b29
 800471c:	08004b29 	.word	0x08004b29
 8004720:	08004b31 	.word	0x08004b31
 8004724:	08004b31 	.word	0x08004b31
 8004728:	08004b31 	.word	0x08004b31
 800472c:	08004b31 	.word	0x08004b31
 8004730:	08004b39 	.word	0x08004b39
 8004734:	08004b39 	.word	0x08004b39
 8004738:	08004b39 	.word	0x08004b39
 800473c:	08004b39 	.word	0x08004b39
 8004740:	08004b41 	.word	0x08004b41
 8004744:	08004b41 	.word	0x08004b41
 8004748:	08004b41 	.word	0x08004b41
 800474c:	08004b41 	.word	0x08004b41
 8004750:	08004b49 	.word	0x08004b49
 8004754:	08004b49 	.word	0x08004b49
 8004758:	08004b49 	.word	0x08004b49
 800475c:	08004b49 	.word	0x08004b49
 8004760:	08004b51 	.word	0x08004b51
 8004764:	08004b51 	.word	0x08004b51
 8004768:	08004b51 	.word	0x08004b51
 800476c:	08004b51 	.word	0x08004b51
 8004770:	08004b59 	.word	0x08004b59
 8004774:	08004b59 	.word	0x08004b59
 8004778:	08004b59 	.word	0x08004b59
 800477c:	08004b59 	.word	0x08004b59
 8004780:	08004b61 	.word	0x08004b61
 8004784:	08004b61 	.word	0x08004b61
 8004788:	08004b61 	.word	0x08004b61
 800478c:	08004b61 	.word	0x08004b61
 8004790:	08004b69 	.word	0x08004b69
 8004794:	08004b69 	.word	0x08004b69
 8004798:	08004b69 	.word	0x08004b69
 800479c:	08004b69 	.word	0x08004b69
 80047a0:	08004b71 	.word	0x08004b71
 80047a4:	08004b71 	.word	0x08004b71
 80047a8:	08004b71 	.word	0x08004b71
 80047ac:	08004b71 	.word	0x08004b71
 80047b0:	08004b79 	.word	0x08004b79
 80047b4:	08004b79 	.word	0x08004b79
 80047b8:	08004b79 	.word	0x08004b79
 80047bc:	08004b79 	.word	0x08004b79
 80047c0:	08004b81 	.word	0x08004b81
 80047c4:	08004b81 	.word	0x08004b81
 80047c8:	08004b81 	.word	0x08004b81
 80047cc:	08004b81 	.word	0x08004b81
 80047d0:	08004b89 	.word	0x08004b89
 80047d4:	08004b89 	.word	0x08004b89
 80047d8:	08004b89 	.word	0x08004b89
 80047dc:	08004b89 	.word	0x08004b89
 80047e0:	08004b91 	.word	0x08004b91
 80047e4:	08004b91 	.word	0x08004b91
 80047e8:	08004b91 	.word	0x08004b91
 80047ec:	08004b91 	.word	0x08004b91
 80047f0:	08004b99 	.word	0x08004b99
 80047f4:	08004b99 	.word	0x08004b99
 80047f8:	08004b99 	.word	0x08004b99
 80047fc:	08004b99 	.word	0x08004b99
 8004800:	08004ba1 	.word	0x08004ba1
 8004804:	08004ba1 	.word	0x08004ba1
 8004808:	08004ba1 	.word	0x08004ba1
 800480c:	08004ba1 	.word	0x08004ba1
 8004810:	08004ba9 	.word	0x08004ba9
 8004814:	08004ba9 	.word	0x08004ba9
 8004818:	08004ba9 	.word	0x08004ba9
 800481c:	08004ba9 	.word	0x08004ba9
 8004820:	08004bb1 	.word	0x08004bb1
 8004824:	08004bb1 	.word	0x08004bb1
 8004828:	08004bb1 	.word	0x08004bb1
 800482c:	08004bb1 	.word	0x08004bb1
 8004830:	08004bb9 	.word	0x08004bb9
 8004834:	08004bb9 	.word	0x08004bb9
 8004838:	08004bb9 	.word	0x08004bb9
 800483c:	08004bb9 	.word	0x08004bb9
 8004840:	08004bc1 	.word	0x08004bc1
 8004844:	08004bc1 	.word	0x08004bc1
 8004848:	08004bc1 	.word	0x08004bc1
 800484c:	08004bc1 	.word	0x08004bc1
 8004850:	08004bc9 	.word	0x08004bc9
 8004854:	08004bc9 	.word	0x08004bc9
 8004858:	08004bc9 	.word	0x08004bc9
 800485c:	08004bc9 	.word	0x08004bc9
 8004860:	08004bd1 	.word	0x08004bd1
 8004864:	08004bd1 	.word	0x08004bd1
 8004868:	08004bd1 	.word	0x08004bd1
 800486c:	08004bd1 	.word	0x08004bd1
 8004870:	08004bd9 	.word	0x08004bd9
 8004874:	08004bd9 	.word	0x08004bd9
 8004878:	08004bd9 	.word	0x08004bd9
 800487c:	08004bd9 	.word	0x08004bd9
 8004880:	08004be1 	.word	0x08004be1
 8004884:	08004be1 	.word	0x08004be1
 8004888:	08004be1 	.word	0x08004be1
 800488c:	08004be1 	.word	0x08004be1
 8004890:	08004be9 	.word	0x08004be9
 8004894:	08004be9 	.word	0x08004be9
 8004898:	08004be9 	.word	0x08004be9
 800489c:	08004be9 	.word	0x08004be9
 80048a0:	08004bf1 	.word	0x08004bf1
 80048a4:	08004bf1 	.word	0x08004bf1
 80048a8:	08004bf1 	.word	0x08004bf1
 80048ac:	08004bf1 	.word	0x08004bf1
 80048b0:	08004bf9 	.word	0x08004bf9
 80048b4:	08004bf9 	.word	0x08004bf9
 80048b8:	08004bf9 	.word	0x08004bf9
 80048bc:	08004bf9 	.word	0x08004bf9
 80048c0:	08004c01 	.word	0x08004c01
 80048c4:	08004c01 	.word	0x08004c01
 80048c8:	08004c01 	.word	0x08004c01
 80048cc:	08004c01 	.word	0x08004c01
 80048d0:	08004c09 	.word	0x08004c09
 80048d4:	08004c09 	.word	0x08004c09
 80048d8:	08004c09 	.word	0x08004c09
 80048dc:	08004c09 	.word	0x08004c09
 80048e0:	08004c11 	.word	0x08004c11
 80048e4:	08004c11 	.word	0x08004c11
 80048e8:	08004c11 	.word	0x08004c11
 80048ec:	08004c11 	.word	0x08004c11
 80048f0:	08004c19 	.word	0x08004c19
 80048f4:	08004c19 	.word	0x08004c19
 80048f8:	08004c19 	.word	0x08004c19
 80048fc:	08004c19 	.word	0x08004c19
 8004900:	08004c21 	.word	0x08004c21
 8004904:	08004c21 	.word	0x08004c21
 8004908:	08004c21 	.word	0x08004c21
 800490c:	08004c21 	.word	0x08004c21
 8004910:	08004c29 	.word	0x08004c29
 8004914:	08004c29 	.word	0x08004c29
 8004918:	08004c29 	.word	0x08004c29
 800491c:	08004c29 	.word	0x08004c29
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPreset_Fast( VPP01 );
 8004920:	2000      	movs	r0, #0
 8004922:	f7ff fc35 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004926:	e184      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPreset_Fast( VPP02	);
 8004928:	2001      	movs	r0, #1
 800492a:	f7ff fc31 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800492e:	e180      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPreset_Fast( VPP03	);
 8004930:	2002      	movs	r0, #2
 8004932:	f7ff fc2d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004936:	e17c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPreset_Fast( VPP04	);
 8004938:	2003      	movs	r0, #3
 800493a:	f7ff fc29 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800493e:	e178      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPreset_Fast( VPP05	);
 8004940:	2004      	movs	r0, #4
 8004942:	f7ff fc25 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004946:	e174      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPreset_Fast( VPP06	);
 8004948:	2005      	movs	r0, #5
 800494a:	f7ff fc21 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800494e:	e170      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPreset_Fast( VPP07	);
 8004950:	2006      	movs	r0, #6
 8004952:	f7ff fc1d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004956:	e16c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPreset_Fast( VPP08	);
 8004958:	2007      	movs	r0, #7
 800495a:	f7ff fc19 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800495e:	e168      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPreset_Fast( VPP09	);
 8004960:	2008      	movs	r0, #8
 8004962:	f7ff fc15 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004966:	e164      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPreset_Fast( VPP10	);
 8004968:	2009      	movs	r0, #9
 800496a:	f7ff fc11 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800496e:	e160      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPreset_Fast( VPP11	);
 8004970:	200a      	movs	r0, #10
 8004972:	f7ff fc0d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004976:	e15c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPreset_Fast( VPP12	);
 8004978:	200b      	movs	r0, #11
 800497a:	f7ff fc09 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800497e:	e158      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPreset_Fast( VPP13	);
 8004980:	200c      	movs	r0, #12
 8004982:	f7ff fc05 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004986:	e154      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPreset_Fast( VPP14	);
 8004988:	200d      	movs	r0, #13
 800498a:	f7ff fc01 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800498e:	e150      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPreset_Fast( VPP15	);
 8004990:	200e      	movs	r0, #14
 8004992:	f7ff fbfd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004996:	e14c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPreset_Fast( VPP16	);
 8004998:	200f      	movs	r0, #15
 800499a:	f7ff fbf9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 800499e:	e148      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPreset_Fast( VPP17	);
 80049a0:	2010      	movs	r0, #16
 80049a2:	f7ff fbf5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049a6:	e144      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPreset_Fast( VPP18	);
 80049a8:	2011      	movs	r0, #17
 80049aa:	f7ff fbf1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049ae:	e140      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPreset_Fast( VPP19	);
 80049b0:	2012      	movs	r0, #18
 80049b2:	f7ff fbed 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049b6:	e13c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPreset_Fast( VPP20	);
 80049b8:	2013      	movs	r0, #19
 80049ba:	f7ff fbe9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049be:	e138      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPreset_Fast( VPP21	);
 80049c0:	2014      	movs	r0, #20
 80049c2:	f7ff fbe5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049c6:	e134      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPreset_Fast( VPP22	);
 80049c8:	2015      	movs	r0, #21
 80049ca:	f7ff fbe1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049ce:	e130      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPreset_Fast( VPP23	);
 80049d0:	2016      	movs	r0, #22
 80049d2:	f7ff fbdd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049d6:	e12c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPreset_Fast( VPP24	);
 80049d8:	2017      	movs	r0, #23
 80049da:	f7ff fbd9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049de:	e128      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPreset_Fast( VPP25	);
 80049e0:	2018      	movs	r0, #24
 80049e2:	f7ff fbd5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049e6:	e124      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPreset_Fast( VPP26	);
 80049e8:	2019      	movs	r0, #25
 80049ea:	f7ff fbd1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049ee:	e120      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPreset_Fast( VPP27	);
 80049f0:	201a      	movs	r0, #26
 80049f2:	f7ff fbcd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049f6:	e11c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPreset_Fast( VPP28	);
 80049f8:	201b      	movs	r0, #27
 80049fa:	f7ff fbc9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 80049fe:	e118      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPreset_Fast( VPP29	);
 8004a00:	201c      	movs	r0, #28
 8004a02:	f7ff fbc5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a06:	e114      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPreset_Fast( VPP30	);
 8004a08:	201d      	movs	r0, #29
 8004a0a:	f7ff fbc1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a0e:	e110      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPreset_Fast( VPP31	);
 8004a10:	201e      	movs	r0, #30
 8004a12:	f7ff fbbd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a16:	e10c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPreset_Fast( VPP32	);
 8004a18:	201f      	movs	r0, #31
 8004a1a:	f7ff fbb9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a1e:	e108      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPreset_Fast( VPP33	);
 8004a20:	2020      	movs	r0, #32
 8004a22:	f7ff fbb5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a26:	e104      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPreset_Fast( VPP34	);
 8004a28:	2021      	movs	r0, #33	; 0x21
 8004a2a:	f7ff fbb1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a2e:	e100      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPreset_Fast( VPP35	);
 8004a30:	2022      	movs	r0, #34	; 0x22
 8004a32:	f7ff fbad 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a36:	e0fc      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPreset_Fast( VPP36	);
 8004a38:	2023      	movs	r0, #35	; 0x23
 8004a3a:	f7ff fba9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a3e:	e0f8      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPreset_Fast( VPP37	);
 8004a40:	2024      	movs	r0, #36	; 0x24
 8004a42:	f7ff fba5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a46:	e0f4      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPreset_Fast( VPP38	);
 8004a48:	2025      	movs	r0, #37	; 0x25
 8004a4a:	f7ff fba1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a4e:	e0f0      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPreset_Fast( VPP39	);
 8004a50:	2026      	movs	r0, #38	; 0x26
 8004a52:	f7ff fb9d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a56:	e0ec      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPreset_Fast( VPP40	);
 8004a58:	2027      	movs	r0, #39	; 0x27
 8004a5a:	f7ff fb99 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a5e:	e0e8      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPreset_Fast( VPP41	);
 8004a60:	2028      	movs	r0, #40	; 0x28
 8004a62:	f7ff fb95 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a66:	e0e4      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPreset_Fast( VPP42	);
 8004a68:	2029      	movs	r0, #41	; 0x29
 8004a6a:	f7ff fb91 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a6e:	e0e0      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPreset_Fast( VPP43	);
 8004a70:	202a      	movs	r0, #42	; 0x2a
 8004a72:	f7ff fb8d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a76:	e0dc      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPreset_Fast( VPP44	);
 8004a78:	202b      	movs	r0, #43	; 0x2b
 8004a7a:	f7ff fb89 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a7e:	e0d8      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPreset_Fast( VPP45	);
 8004a80:	202c      	movs	r0, #44	; 0x2c
 8004a82:	f7ff fb85 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a86:	e0d4      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPreset_Fast( VPP46	);
 8004a88:	202d      	movs	r0, #45	; 0x2d
 8004a8a:	f7ff fb81 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a8e:	e0d0      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPreset_Fast( VPP47	);
 8004a90:	202e      	movs	r0, #46	; 0x2e
 8004a92:	f7ff fb7d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a96:	e0cc      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPreset_Fast( VPP48	);
 8004a98:	202f      	movs	r0, #47	; 0x2f
 8004a9a:	f7ff fb79 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004a9e:	e0c8      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPreset_Fast( VPP49	);
 8004aa0:	2030      	movs	r0, #48	; 0x30
 8004aa2:	f7ff fb75 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004aa6:	e0c4      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPreset_Fast( VPP50	);
 8004aa8:	2031      	movs	r0, #49	; 0x31
 8004aaa:	f7ff fb71 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004aae:	e0c0      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPreset_Fast( VPP51	);
 8004ab0:	2032      	movs	r0, #50	; 0x32
 8004ab2:	f7ff fb6d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004ab6:	e0bc      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPreset_Fast( VPP52	);
 8004ab8:	2033      	movs	r0, #51	; 0x33
 8004aba:	f7ff fb69 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004abe:	e0b8      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPreset_Fast( VPP53	);
 8004ac0:	2034      	movs	r0, #52	; 0x34
 8004ac2:	f7ff fb65 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004ac6:	e0b4      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPreset_Fast( VPP54	);
 8004ac8:	2035      	movs	r0, #53	; 0x35
 8004aca:	f7ff fb61 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004ace:	e0b0      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPreset_Fast( VPP55	);
 8004ad0:	2036      	movs	r0, #54	; 0x36
 8004ad2:	f7ff fb5d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004ad6:	e0ac      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPreset_Fast( VPP56	);
 8004ad8:	2037      	movs	r0, #55	; 0x37
 8004ada:	f7ff fb59 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004ade:	e0a8      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPreset_Fast( VPP57	);
 8004ae0:	2038      	movs	r0, #56	; 0x38
 8004ae2:	f7ff fb55 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004ae6:	e0a4      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPreset_Fast( VPP58	);
 8004ae8:	2039      	movs	r0, #57	; 0x39
 8004aea:	f7ff fb51 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004aee:	e0a0      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPreset_Fast( VPP59	);
 8004af0:	203a      	movs	r0, #58	; 0x3a
 8004af2:	f7ff fb4d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004af6:	e09c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPreset_Fast( VPP60	);
 8004af8:	203b      	movs	r0, #59	; 0x3b
 8004afa:	f7ff fb49 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004afe:	e098      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPreset_Fast( VPP61	);
 8004b00:	203c      	movs	r0, #60	; 0x3c
 8004b02:	f7ff fb45 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b06:	e094      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPreset_Fast( VPP62	);
 8004b08:	203d      	movs	r0, #61	; 0x3d
 8004b0a:	f7ff fb41 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b0e:	e090      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPreset_Fast( VPP63	);
 8004b10:	203e      	movs	r0, #62	; 0x3e
 8004b12:	f7ff fb3d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b16:	e08c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPreset_Fast( VPP64	);
 8004b18:	203f      	movs	r0, #63	; 0x3f
 8004b1a:	f7ff fb39 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b1e:	e088      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPreset_Fast( VPP65	);
 8004b20:	2040      	movs	r0, #64	; 0x40
 8004b22:	f7ff fb35 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b26:	e084      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPreset_Fast( VPP66	);
 8004b28:	2041      	movs	r0, #65	; 0x41
 8004b2a:	f7ff fb31 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b2e:	e080      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPreset_Fast( VPP67	);
 8004b30:	2042      	movs	r0, #66	; 0x42
 8004b32:	f7ff fb2d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b36:	e07c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPreset_Fast( VPP68	);
 8004b38:	2043      	movs	r0, #67	; 0x43
 8004b3a:	f7ff fb29 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b3e:	e078      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPreset_Fast( VPP69	);
 8004b40:	2044      	movs	r0, #68	; 0x44
 8004b42:	f7ff fb25 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b46:	e074      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPreset_Fast( VPP70	);
 8004b48:	2045      	movs	r0, #69	; 0x45
 8004b4a:	f7ff fb21 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b4e:	e070      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPreset_Fast( VPP71	);
 8004b50:	2046      	movs	r0, #70	; 0x46
 8004b52:	f7ff fb1d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b56:	e06c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPreset_Fast( VPP72	);
 8004b58:	2047      	movs	r0, #71	; 0x47
 8004b5a:	f7ff fb19 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b5e:	e068      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPreset_Fast( VPP73	);
 8004b60:	2048      	movs	r0, #72	; 0x48
 8004b62:	f7ff fb15 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b66:	e064      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPreset_Fast( VPP74	);
 8004b68:	2049      	movs	r0, #73	; 0x49
 8004b6a:	f7ff fb11 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b6e:	e060      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPreset_Fast( VPP75	);
 8004b70:	204a      	movs	r0, #74	; 0x4a
 8004b72:	f7ff fb0d 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b76:	e05c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPreset_Fast( VPP76	);
 8004b78:	204b      	movs	r0, #75	; 0x4b
 8004b7a:	f7ff fb09 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b7e:	e058      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPreset_Fast( VPP77	);
 8004b80:	204c      	movs	r0, #76	; 0x4c
 8004b82:	f7ff fb05 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b86:	e054      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPreset_Fast( VPP78	);
 8004b88:	204d      	movs	r0, #77	; 0x4d
 8004b8a:	f7ff fb01 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b8e:	e050      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPreset_Fast( VPP79	);
 8004b90:	204e      	movs	r0, #78	; 0x4e
 8004b92:	f7ff fafd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b96:	e04c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPreset_Fast( VPP80	);
 8004b98:	204f      	movs	r0, #79	; 0x4f
 8004b9a:	f7ff faf9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004b9e:	e048      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPreset_Fast( VPP81	);
 8004ba0:	2050      	movs	r0, #80	; 0x50
 8004ba2:	f7ff faf5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004ba6:	e044      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPreset_Fast( VPP82	);
 8004ba8:	2051      	movs	r0, #81	; 0x51
 8004baa:	f7ff faf1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bae:	e040      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPreset_Fast( VPP83	);
 8004bb0:	2052      	movs	r0, #82	; 0x52
 8004bb2:	f7ff faed 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bb6:	e03c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPreset_Fast( VPP84	);
 8004bb8:	2053      	movs	r0, #83	; 0x53
 8004bba:	f7ff fae9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bbe:	e038      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPreset_Fast( VPP85	);
 8004bc0:	2054      	movs	r0, #84	; 0x54
 8004bc2:	f7ff fae5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bc6:	e034      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPreset_Fast( VPP86	);
 8004bc8:	2055      	movs	r0, #85	; 0x55
 8004bca:	f7ff fae1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bce:	e030      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPreset_Fast( VPP87	);
 8004bd0:	2056      	movs	r0, #86	; 0x56
 8004bd2:	f7ff fadd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bd6:	e02c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPreset_Fast( VPP88	);
 8004bd8:	2057      	movs	r0, #87	; 0x57
 8004bda:	f7ff fad9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bde:	e028      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPreset_Fast( VPP89	);
 8004be0:	2058      	movs	r0, #88	; 0x58
 8004be2:	f7ff fad5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004be6:	e024      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPreset_Fast( VPP90	);
 8004be8:	2059      	movs	r0, #89	; 0x59
 8004bea:	f7ff fad1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bee:	e020      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPreset_Fast( VPP91	);
 8004bf0:	205a      	movs	r0, #90	; 0x5a
 8004bf2:	f7ff facd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bf6:	e01c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPreset_Fast( VPP92	);
 8004bf8:	205b      	movs	r0, #91	; 0x5b
 8004bfa:	f7ff fac9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004bfe:	e018      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPreset_Fast( VPP93	);
 8004c00:	205c      	movs	r0, #92	; 0x5c
 8004c02:	f7ff fac5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004c06:	e014      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPreset_Fast( VPP94	);
 8004c08:	205d      	movs	r0, #93	; 0x5d
 8004c0a:	f7ff fac1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004c0e:	e010      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPreset_Fast( VPP95	);
 8004c10:	205e      	movs	r0, #94	; 0x5e
 8004c12:	f7ff fabd 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004c16:	e00c      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPreset_Fast( VPP96	);
 8004c18:	205f      	movs	r0, #95	; 0x5f
 8004c1a:	f7ff fab9 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004c1e:	e008      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPreset_Fast( VPP97	);
 8004c20:	2060      	movs	r0, #96	; 0x60
 8004c22:	f7ff fab5 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004c26:	e004      	b.n	8004c32 <VPP_ModifyOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPreset_Fast( VPP98	);
 8004c28:	2061      	movs	r0, #97	; 0x61
 8004c2a:	f7ff fab1 	bl	8004190 <VPP_ApplyPreset_Fast>
			break;
 8004c2e:	e000      	b.n	8004c32 <VPP_ModifyOutput+0x94a>

		default:
			break;
 8004c30:	bf00      	nop
	}
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop

08004c3c <VPP_GetVppPresetObject>:
 *	@param None
 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_GetVppPresetObject(eVppActivePresetSelect_t eVppActivePresetSelect)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
	if(eVppActivePresetSelect)
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <VPP_GetVppPresetObject+0x16>
		return pSyncVppEncoderPreset;
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <VPP_GetVppPresetObject+0x28>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	e001      	b.n	8004c56 <VPP_GetVppPresetObject+0x1a>
	else
		return pSignalVppEncoderPreset;
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <VPP_GetVppPresetObject+0x2c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000c8c 	.word	0x20000c8c
 8004c68:	20000c88 	.word	0x20000c88

08004c6c <VPP_FindVppPresetObject>:

 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_FindVppPresetObject(eVppPreset_t pEnum)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < MAX_VPP_PRESETS; i++ )
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e015      	b.n	8004ca8 <VPP_FindVppPresetObject+0x3c>
	{
		if(aVppEncoderPresets[i].Vpp_literal == pEnum)
 8004c7c:	4910      	ldr	r1, [pc, #64]	; (8004cc0 <VPP_FindVppPresetObject+0x54>)
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	79fa      	ldrb	r2, [r7, #7]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d107      	bne.n	8004ca2 <VPP_FindVppPresetObject+0x36>
		{
			return &aVppEncoderPresets[i];
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <VPP_FindVppPresetObject+0x54>)
 8004c9e:	4413      	add	r3, r2
 8004ca0:	e009      	b.n	8004cb6 <VPP_FindVppPresetObject+0x4a>
	for(int i = 0; i < MAX_VPP_PRESETS; i++ )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b61      	cmp	r3, #97	; 0x61
 8004cac:	dde6      	ble.n	8004c7c <VPP_FindVppPresetObject+0x10>
		}
	}
	// error!
	DM_SetErrorDebugMsg("VPP_FindVppPresetObject(): VppEncoderPreset_t obj not found");
 8004cae:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <VPP_FindVppPresetObject+0x58>)
 8004cb0:	f7fc fb1c 	bl	80012ec <DM_SetErrorDebugMsg>
	return 0;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200001d0 	.word	0x200001d0
 8004cc4:	0800ffec 	.word	0x0800ffec

08004cc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	; 0x30
 8004ccc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8004cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004cda:	1d3b      	adds	r3, r7, #4
 8004cdc:	2220      	movs	r2, #32
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f007 ff23 	bl	800cb2c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004ce6:	4b32      	ldr	r3, [pc, #200]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004ce8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004cec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004cf4:	4b2e      	ldr	r3, [pc, #184]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004cfa:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004d00:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004d06:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d0e:	2204      	movs	r2, #4
 8004d10:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004d12:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004d24:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004d32:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d46:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004d50:	4817      	ldr	r0, [pc, #92]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d52:	f001 ffd7 	bl	8006d04 <HAL_ADC_Init>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004d5c:	f000 ff2c 	bl	8005bb8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4811      	ldr	r0, [pc, #68]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d6c:	f002 fd60 	bl	8007830 <HAL_ADCEx_MultiModeConfigChannel>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004d76:	f000 ff1f 	bl	8005bb8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <MX_ADC1_Init+0xec>)
 8004d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d7e:	2306      	movs	r3, #6
 8004d80:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d86:	237f      	movs	r3, #127	; 0x7f
 8004d88:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004d8a:	2304      	movs	r3, #4
 8004d8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4806      	ldr	r0, [pc, #24]	; (8004db0 <MX_ADC1_Init+0xe8>)
 8004d98:	f002 f974 	bl	8007084 <HAL_ADC_ConfigChannel>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004da2:	f000 ff09 	bl	8005bb8 <Error_Handler>
  }

}
 8004da6:	bf00      	nop
 8004da8:	3730      	adds	r7, #48	; 0x30
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200022e8 	.word	0x200022e8
 8004db4:	0c900008 	.word	0x0c900008

08004db8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dd8:	d14f      	bne.n	8004e7a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004dda:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <HAL_ADC_MspInit+0xcc>)
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dde:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <HAL_ADC_MspInit+0xcc>)
 8004de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <HAL_ADC_MspInit+0xcc>)
 8004de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <HAL_ADC_MspInit+0xcc>)
 8004df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df6:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <HAL_ADC_MspInit+0xcc>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <HAL_ADC_MspInit+0xcc>)
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e16:	f107 0314 	add.w	r3, r7, #20
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e20:	f004 f8de 	bl	8008fe0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004e24:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e26:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <HAL_ADC_MspInit+0xd4>)
 8004e28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004e2a:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e2c:	2205      	movs	r2, #5
 8004e2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e30:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e52:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e54:	2220      	movs	r2, #32
 8004e56:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e5e:	480a      	ldr	r0, [pc, #40]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e60:	f003 fdf2 	bl	8008a48 <HAL_DMA_Init>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8004e6a:	f000 fea5 	bl	8005bb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a05      	ldr	r2, [pc, #20]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_ADC_MspInit+0xd0>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3728      	adds	r7, #40	; 0x28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	20002354 	.word	0x20002354
 8004e8c:	40020008 	.word	0x40020008

08004e90 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <MX_COMP1_Init+0x48>)
 8004e98:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004ea2:	4a0e      	ldr	r2, [pc, #56]	; (8004edc <MX_COMP1_Init+0x4c>)
 8004ea4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004ebe:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <MX_COMP1_Init+0x44>)
 8004ec0:	f002 ff0a 	bl	8007cd8 <HAL_COMP_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8004eca:	f000 fe75 	bl	8005bb8 <Error_Handler>
  }

}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200023b4 	.word	0x200023b4
 8004ed8:	40010200 	.word	0x40010200
 8004edc:	00800030 	.word	0x00800030

08004ee0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee8:	f107 030c 	add.w	r3, r7, #12
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a0f      	ldr	r2, [pc, #60]	; (8004f3c <HAL_COMP_MspInit+0x5c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d118      	bne.n	8004f34 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <HAL_COMP_MspInit+0x60>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	4a0e      	ldr	r2, [pc, #56]	; (8004f40 <HAL_COMP_MspInit+0x60>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <HAL_COMP_MspInit+0x60>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f26:	f107 030c 	add.w	r3, r7, #12
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f30:	f004 f856 	bl	8008fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8004f34:	bf00      	nop
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40010200 	.word	0x40010200
 8004f40:	40021000 	.word	0x40021000

08004f44 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	; 0x30
 8004f48:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	2230      	movs	r2, #48	; 0x30
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f007 fdeb 	bl	800cb2c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8004f56:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <MX_DAC1_Init+0x8c>)
 8004f58:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <MX_DAC1_Init+0x90>)
 8004f5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004f5c:	481c      	ldr	r0, [pc, #112]	; (8004fd0 <MX_DAC1_Init+0x8c>)
 8004f5e:	f003 f95e 	bl	800821e <HAL_DAC_Init>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004f68:	f000 fe26 	bl	8005bb8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004f6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f70:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8004f7e:	2306      	movs	r3, #6
 8004f80:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004f92:	463b      	mov	r3, r7
 8004f94:	2200      	movs	r2, #0
 8004f96:	4619      	mov	r1, r3
 8004f98:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <MX_DAC1_Init+0x8c>)
 8004f9a:	f003 fb1f 	bl	80085dc <HAL_DAC_ConfigChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8004fa4:	f000 fe08 	bl	8005bb8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <MX_DAC1_Init+0x8c>)
 8004fb8:	f003 fb10 	bl	80085dc <HAL_DAC_ConfigChannel>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8004fc2:	f000 fdf9 	bl	8005bb8 <Error_Handler>
  }

}
 8004fc6:	bf00      	nop
 8004fc8:	3730      	adds	r7, #48	; 0x30
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	200023ec 	.word	0x200023ec
 8004fd4:	50000800 	.word	0x50000800

08004fd8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8004fde:	463b      	mov	r3, r7
 8004fe0:	2230      	movs	r2, #48	; 0x30
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f007 fda1 	bl	800cb2c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8004fea:	4b16      	ldr	r3, [pc, #88]	; (8005044 <MX_DAC2_Init+0x6c>)
 8004fec:	4a16      	ldr	r2, [pc, #88]	; (8005048 <MX_DAC2_Init+0x70>)
 8004fee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8004ff0:	4814      	ldr	r0, [pc, #80]	; (8005044 <MX_DAC2_Init+0x6c>)
 8004ff2:	f003 f914 	bl	800821e <HAL_DAC_Init>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8004ffc:	f000 fddc 	bl	8005bb8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005000:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005004:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005006:	2300      	movs	r3, #0
 8005008:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800500a:	2300      	movs	r3, #0
 800500c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8005012:	2306      	movs	r3, #6
 8005014:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800501e:	2301      	movs	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005026:	463b      	mov	r3, r7
 8005028:	2200      	movs	r2, #0
 800502a:	4619      	mov	r1, r3
 800502c:	4805      	ldr	r0, [pc, #20]	; (8005044 <MX_DAC2_Init+0x6c>)
 800502e:	f003 fad5 	bl	80085dc <HAL_DAC_ConfigChannel>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8005038:	f000 fdbe 	bl	8005bb8 <Error_Handler>
  }

}
 800503c:	bf00      	nop
 800503e:	3730      	adds	r7, #48	; 0x30
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	200023d8 	.word	0x200023d8
 8005048:	50000c00 	.word	0x50000c00

0800504c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	; 0x30
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005054:	f107 031c 	add.w	r3, r7, #28
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	60da      	str	r2, [r3, #12]
 8005062:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a56      	ldr	r2, [pc, #344]	; (80051c4 <HAL_DAC_MspInit+0x178>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d150      	bne.n	8005110 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800506e:	4b56      	ldr	r3, [pc, #344]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	4a55      	ldr	r2, [pc, #340]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800507a:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005086:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	4a4f      	ldr	r2, [pc, #316]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005092:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800509e:	2330      	movs	r3, #48	; 0x30
 80050a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a2:	2303      	movs	r3, #3
 80050a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050aa:	f107 031c 	add.w	r3, r7, #28
 80050ae:	4619      	mov	r1, r3
 80050b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b4:	f003 ff94 	bl	8008fe0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80050b8:	4b44      	ldr	r3, [pc, #272]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050ba:	4a45      	ldr	r2, [pc, #276]	; (80051d0 <HAL_DAC_MspInit+0x184>)
 80050bc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80050be:	4b43      	ldr	r3, [pc, #268]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050c0:	2206      	movs	r2, #6
 80050c2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050c4:	4b41      	ldr	r3, [pc, #260]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050c6:	2210      	movs	r2, #16
 80050c8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ca:	4b40      	ldr	r3, [pc, #256]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050d6:	4b3d      	ldr	r3, [pc, #244]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050dc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050de:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80050e6:	4b39      	ldr	r3, [pc, #228]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050e8:	2220      	movs	r2, #32
 80050ea:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80050ec:	4b37      	ldr	r3, [pc, #220]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80050f2:	4836      	ldr	r0, [pc, #216]	; (80051cc <HAL_DAC_MspInit+0x180>)
 80050f4:	f003 fca8 	bl	8008a48 <HAL_DMA_Init>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80050fe:	f000 fd5b 	bl	8005bb8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a31      	ldr	r2, [pc, #196]	; (80051cc <HAL_DAC_MspInit+0x180>)
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	4a30      	ldr	r2, [pc, #192]	; (80051cc <HAL_DAC_MspInit+0x180>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800510e:	e054      	b.n	80051ba <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <HAL_DAC_MspInit+0x188>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d14f      	bne.n	80051ba <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800511a:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	4a2a      	ldr	r2, [pc, #168]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005126:	4b28      	ldr	r3, [pc, #160]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005132:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005136:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HAL_DAC_MspInit+0x17c>)
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800514e:	2303      	movs	r3, #3
 8005150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005156:	f107 031c 	add.w	r3, r7, #28
 800515a:	4619      	mov	r1, r3
 800515c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005160:	f003 ff3e 	bl	8008fe0 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8005164:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 8005166:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_DAC_MspInit+0x190>)
 8005168:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 800516c:	2229      	movs	r2, #41	; 0x29
 800516e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 8005172:	2210      	movs	r2, #16
 8005174:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005176:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 8005178:	2200      	movs	r2, #0
 800517a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800517c:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 800517e:	2280      	movs	r2, #128	; 0x80
 8005180:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 8005184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005188:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800518a:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 800518c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005190:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 8005194:	2220      	movs	r2, #32
 8005196:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 800519a:	2200      	movs	r2, #0
 800519c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800519e:	480e      	ldr	r0, [pc, #56]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 80051a0:	f003 fc52 	bl	8008a48 <HAL_DMA_Init>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80051aa:	f000 fd05 	bl	8005bb8 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <HAL_DAC_MspInit+0x18c>)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80051ba:	bf00      	nop
 80051bc:	3730      	adds	r7, #48	; 0x30
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	50000800 	.word	0x50000800
 80051c8:	40021000 	.word	0x40021000
 80051cc:	20002400 	.word	0x20002400
 80051d0:	4002001c 	.word	0x4002001c
 80051d4:	50000c00 	.word	0x50000c00
 80051d8:	20002460 	.word	0x20002460
 80051dc:	40020030 	.word	0x40020030

080051e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80051e6:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <MX_DMA_Init+0x70>)
 80051e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ea:	4a19      	ldr	r2, [pc, #100]	; (8005250 <MX_DMA_Init+0x70>)
 80051ec:	f043 0304 	orr.w	r3, r3, #4
 80051f0:	6493      	str	r3, [r2, #72]	; 0x48
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <MX_DMA_Init+0x70>)
 80051f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051fe:	4b14      	ldr	r3, [pc, #80]	; (8005250 <MX_DMA_Init+0x70>)
 8005200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005202:	4a13      	ldr	r2, [pc, #76]	; (8005250 <MX_DMA_Init+0x70>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	6493      	str	r3, [r2, #72]	; 0x48
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <MX_DMA_Init+0x70>)
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8005216:	2200      	movs	r2, #0
 8005218:	2101      	movs	r1, #1
 800521a:	200b      	movs	r0, #11
 800521c:	f002 ffcb 	bl	80081b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005220:	200b      	movs	r0, #11
 8005222:	f002 ffe2 	bl	80081ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	200c      	movs	r0, #12
 800522c:	f002 ffc3 	bl	80081b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005230:	200c      	movs	r0, #12
 8005232:	f002 ffda 	bl	80081ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	200d      	movs	r0, #13
 800523c:	f002 ffbb 	bl	80081b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005240:	200d      	movs	r0, #13
 8005242:	f002 ffd2 	bl	80081ea <HAL_NVIC_EnableIRQ>

}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000

08005254 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8005258:	4b20      	ldr	r3, [pc, #128]	; (80052dc <update_dc_bias_sweep+0x88>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d006      	beq.n	800526e <update_dc_bias_sweep+0x1a>
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	e005      	b.n	800527a <update_dc_bias_sweep+0x26>
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 8005278:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800527a:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8005282:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <update_dc_bias_sweep+0x90>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <update_dc_bias_sweep+0x3e>
 800528a:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <update_dc_bias_sweep+0x90>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e002      	b.n	8005298 <update_dc_bias_sweep+0x44>
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <update_dc_bias_sweep+0x90>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <update_dc_bias_sweep+0x52>
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <update_dc_bias_sweep+0x88>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80052a6:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ae:	d302      	bcc.n	80052b6 <update_dc_bias_sweep+0x62>
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <update_dc_bias_sweep+0x88>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <update_dc_bias_sweep+0x90>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	2108      	movs	r1, #8
 80052c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052c4:	f004 f80e 	bl	80092e4 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <update_dc_bias_sweep+0x8c>)
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2110      	movs	r1, #16
 80052d0:	4805      	ldr	r0, [pc, #20]	; (80052e8 <update_dc_bias_sweep+0x94>)
 80052d2:	f003 f931 	bl	8008538 <HAL_DAC_SetValue>
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000c90 	.word	0x20000c90
 80052e0:	20001f08 	.word	0x20001f08
 80052e4:	20001f0c 	.word	0x20001f0c
 80052e8:	200023ec 	.word	0x200023ec

080052ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <__NVIC_GetPriorityGrouping+0x18>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	f003 0307 	and.w	r3, r3, #7
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005316:	2b00      	cmp	r3, #0
 8005318:	db0b      	blt.n	8005332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	f003 021f 	and.w	r2, r3, #31
 8005320:	4907      	ldr	r1, [pc, #28]	; (8005340 <__NVIC_EnableIRQ+0x38>)
 8005322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	2001      	movs	r0, #1
 800532a:	fa00 f202 	lsl.w	r2, r0, r2
 800532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e100 	.word	0xe000e100

08005344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	6039      	str	r1, [r7, #0]
 800534e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005354:	2b00      	cmp	r3, #0
 8005356:	db0a      	blt.n	800536e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	490c      	ldr	r1, [pc, #48]	; (8005390 <__NVIC_SetPriority+0x4c>)
 800535e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005362:	0112      	lsls	r2, r2, #4
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	440b      	add	r3, r1
 8005368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800536c:	e00a      	b.n	8005384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	4908      	ldr	r1, [pc, #32]	; (8005394 <__NVIC_SetPriority+0x50>)
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	3b04      	subs	r3, #4
 800537c:	0112      	lsls	r2, r2, #4
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	440b      	add	r3, r1
 8005382:	761a      	strb	r2, [r3, #24]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	e000e100 	.word	0xe000e100
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005398:	b480      	push	{r7}
 800539a:	b089      	sub	sp, #36	; 0x24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f1c3 0307 	rsb	r3, r3, #7
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	bf28      	it	cs
 80053b6:	2304      	movcs	r3, #4
 80053b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3304      	adds	r3, #4
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d902      	bls.n	80053c8 <NVIC_EncodePriority+0x30>
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3b03      	subs	r3, #3
 80053c6:	e000      	b.n	80053ca <NVIC_EncodePriority+0x32>
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43da      	mvns	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	401a      	ands	r2, r3
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	43d9      	mvns	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f0:	4313      	orrs	r3, r2
         );
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3724      	adds	r7, #36	; 0x24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800540a:	4a14      	ldr	r2, [pc, #80]	; (800545c <LL_SYSCFG_SetEXTISource+0x5c>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	3302      	adds	r3, #2
 8005414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	43db      	mvns	r3, r3
 800541e:	ea02 0103 	and.w	r1, r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	fab3 f383 	clz	r3, r3
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	409a      	lsls	r2, r3
 8005440:	4806      	ldr	r0, [pc, #24]	; (800545c <LL_SYSCFG_SetEXTISource+0x5c>)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	430a      	orrs	r2, r1
 800544a:	3302      	adds	r3, #2
 800544c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40010000 	.word	0x40010000

08005460 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005460:	b480      	push	{r7}
 8005462:	b089      	sub	sp, #36	; 0x24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	fa93 f3a3 	rbit	r3, r3
 800547a:	613b      	str	r3, [r7, #16]
  return result;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	2103      	movs	r1, #3
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	401a      	ands	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	fa93 f3a3 	rbit	r3, r3
 800549a:	61bb      	str	r3, [r7, #24]
  return result;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	fab3 f383 	clz	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80054be:	b480      	push	{r7}
 80054c0:	b089      	sub	sp, #36	; 0x24
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	fa93 f3a3 	rbit	r3, r3
 80054d8:	613b      	str	r3, [r7, #16]
  return result;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	fab3 f383 	clz	r3, r3
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	2103      	movs	r1, #3
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	43db      	mvns	r3, r3
 80054ec:	401a      	ands	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	fa93 f3a3 	rbit	r3, r3
 80054f8:	61bb      	str	r3, [r7, #24]
  return result;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	fab3 f383 	clz	r3, r3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	431a      	orrs	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	60da      	str	r2, [r3, #12]
}
 8005510:	bf00      	nop
 8005512:	3724      	adds	r7, #36	; 0x24
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005540:	4b08      	ldr	r3, [pc, #32]	; (8005564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005544:	4907      	ldr	r1, [pc, #28]	; (8005564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4313      	orrs	r3, r2
 800554a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800554e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4013      	ands	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005556:	68fb      	ldr	r3, [r7, #12]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40021000 	.word	0x40021000

08005568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	; 0x28
 800556c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800556e:	f107 031c 	add.w	r3, r7, #28
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	611a      	str	r2, [r3, #16]
 8005588:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800558a:	2004      	movs	r0, #4
 800558c:	f7ff ffd4 	bl	8005538 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8005590:	2020      	movs	r0, #32
 8005592:	f7ff ffd1 	bl	8005538 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8005596:	2001      	movs	r0, #1
 8005598:	f7ff ffce 	bl	8005538 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800559c:	2002      	movs	r0, #2
 800559e:	f7ff ffcb 	bl	8005538 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80055a2:	2108      	movs	r1, #8
 80055a4:	48d3      	ldr	r0, [pc, #844]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80055a6:	f7ff ffb9 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80055aa:	2108      	movs	r1, #8
 80055ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055b0:	f7ff ffb4 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80055b4:	2110      	movs	r1, #16
 80055b6:	48cf      	ldr	r0, [pc, #828]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80055b8:	f7ff ffb0 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80055bc:	2120      	movs	r1, #32
 80055be:	48cd      	ldr	r0, [pc, #820]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80055c0:	f7ff ffac 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80055c4:	2101      	movs	r1, #1
 80055c6:	48cc      	ldr	r0, [pc, #816]	; (80058f8 <MX_GPIO_Init+0x390>)
 80055c8:	f7ff ffa8 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80055cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055d0:	48c8      	ldr	r0, [pc, #800]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80055d2:	f7ff ffa3 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80055d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055da:	48c6      	ldr	r0, [pc, #792]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80055dc:	f7ff ff9e 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80055e0:	2140      	movs	r1, #64	; 0x40
 80055e2:	48c5      	ldr	r0, [pc, #788]	; (80058f8 <MX_GPIO_Init+0x390>)
 80055e4:	f7ff ff9a 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	48c3      	ldr	r0, [pc, #780]	; (80058f8 <MX_GPIO_Init+0x390>)
 80055ec:	f7ff ff96 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80055f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055f4:	48c0      	ldr	r0, [pc, #768]	; (80058f8 <MX_GPIO_Init+0x390>)
 80055f6:	f7ff ff91 	bl	800551c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80055fa:	49c0      	ldr	r1, [pc, #768]	; (80058fc <MX_GPIO_Init+0x394>)
 80055fc:	2002      	movs	r0, #2
 80055fe:	f7ff feff 	bl	8005400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8005602:	49bf      	ldr	r1, [pc, #764]	; (8005900 <MX_GPIO_Init+0x398>)
 8005604:	2002      	movs	r0, #2
 8005606:	f7ff fefb 	bl	8005400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800560a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800560e:	2005      	movs	r0, #5
 8005610:	f7ff fef6 	bl	8005400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8005614:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8005618:	2005      	movs	r0, #5
 800561a:	f7ff fef1 	bl	8005400 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800561e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005622:	2002      	movs	r0, #2
 8005624:	f7ff feec 	bl	8005400 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8005628:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800562c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800563a:	2302      	movs	r3, #2
 800563c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8005640:	f107 031c 	add.w	r3, r7, #28
 8005644:	4618      	mov	r0, r3
 8005646:	f006 f821 	bl	800b68c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005656:	2300      	movs	r3, #0
 8005658:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800565c:	2302      	movs	r3, #2
 800565e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8005662:	f107 031c 	add.w	r3, r7, #28
 8005666:	4618      	mov	r0, r3
 8005668:	f006 f810 	bl	800b68c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800566c:	2301      	movs	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005676:	2300      	movs	r3, #0
 8005678:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800567c:	2302      	movs	r3, #2
 800567e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8005682:	f107 031c 	add.w	r3, r7, #28
 8005686:	4618      	mov	r0, r3
 8005688:	f006 f800 	bl	800b68c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800568c:	2302      	movs	r3, #2
 800568e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800569c:	2302      	movs	r3, #2
 800569e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80056a2:	f107 031c 	add.w	r3, r7, #28
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 fff0 	bl	800b68c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80056ac:	2304      	movs	r3, #4
 80056ae:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80056bc:	2302      	movs	r3, #2
 80056be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80056c2:	f107 031c 	add.w	r3, r7, #28
 80056c6:	4618      	mov	r0, r3
 80056c8:	f005 ffe0 	bl	800b68c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80056cc:	2201      	movs	r2, #1
 80056ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056d2:	4888      	ldr	r0, [pc, #544]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80056d4:	f7ff fef3 	bl	80054be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80056d8:	2201      	movs	r2, #1
 80056da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056de:	4885      	ldr	r0, [pc, #532]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80056e0:	f7ff feed 	bl	80054be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80056e4:	2201      	movs	r2, #1
 80056e6:	2101      	movs	r1, #1
 80056e8:	4886      	ldr	r0, [pc, #536]	; (8005904 <MX_GPIO_Init+0x39c>)
 80056ea:	f7ff fee8 	bl	80054be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80056ee:	2201      	movs	r2, #1
 80056f0:	2102      	movs	r1, #2
 80056f2:	4884      	ldr	r0, [pc, #528]	; (8005904 <MX_GPIO_Init+0x39c>)
 80056f4:	f7ff fee3 	bl	80054be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80056f8:	2201      	movs	r2, #1
 80056fa:	2104      	movs	r1, #4
 80056fc:	487d      	ldr	r0, [pc, #500]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80056fe:	f7ff fede 	bl	80054be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8005702:	2200      	movs	r2, #0
 8005704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005708:	487a      	ldr	r0, [pc, #488]	; (80058f4 <MX_GPIO_Init+0x38c>)
 800570a:	f7ff fea9 	bl	8005460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800570e:	2200      	movs	r2, #0
 8005710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005714:	4877      	ldr	r0, [pc, #476]	; (80058f4 <MX_GPIO_Init+0x38c>)
 8005716:	f7ff fea3 	bl	8005460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800571a:	2200      	movs	r2, #0
 800571c:	2101      	movs	r1, #1
 800571e:	4879      	ldr	r0, [pc, #484]	; (8005904 <MX_GPIO_Init+0x39c>)
 8005720:	f7ff fe9e 	bl	8005460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8005724:	2200      	movs	r2, #0
 8005726:	2102      	movs	r1, #2
 8005728:	4876      	ldr	r0, [pc, #472]	; (8005904 <MX_GPIO_Init+0x39c>)
 800572a:	f7ff fe99 	bl	8005460 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800572e:	2200      	movs	r2, #0
 8005730:	2104      	movs	r1, #4
 8005732:	4870      	ldr	r0, [pc, #448]	; (80058f4 <MX_GPIO_Init+0x38c>)
 8005734:	f7ff fe94 	bl	8005460 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8005738:	2308      	movs	r3, #8
 800573a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800573c:	2301      	movs	r3, #1
 800573e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005744:	2300      	movs	r3, #0
 8005746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005748:	2302      	movs	r3, #2
 800574a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4868      	ldr	r0, [pc, #416]	; (80058f4 <MX_GPIO_Init+0x38c>)
 8005752:	f006 f98e 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8005756:	2308      	movs	r3, #8
 8005758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800575a:	2301      	movs	r3, #1
 800575c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	4619      	mov	r1, r3
 800576e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005772:	f006 f97e 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8005776:	2310      	movs	r3, #16
 8005778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800577a:	2301      	movs	r3, #1
 800577c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4859      	ldr	r0, [pc, #356]	; (80058f4 <MX_GPIO_Init+0x38c>)
 8005790:	f006 f96f 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8005794:	2320      	movs	r3, #32
 8005796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005798:	2301      	movs	r3, #1
 800579a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80057a8:	1d3b      	adds	r3, r7, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4851      	ldr	r0, [pc, #324]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80057ae:	f006 f960 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80057b2:	2301      	movs	r3, #1
 80057b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80057b6:	2301      	movs	r3, #1
 80057b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80057c6:	1d3b      	adds	r3, r7, #4
 80057c8:	4619      	mov	r1, r3
 80057ca:	484b      	ldr	r0, [pc, #300]	; (80058f8 <MX_GPIO_Init+0x390>)
 80057cc:	f006 f951 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80057d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80057d6:	2301      	movs	r3, #1
 80057d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	4619      	mov	r1, r3
 80057ea:	4842      	ldr	r0, [pc, #264]	; (80058f4 <MX_GPIO_Init+0x38c>)
 80057ec:	f006 f941 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80057f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80057f6:	2301      	movs	r3, #1
 80057f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8005806:	1d3b      	adds	r3, r7, #4
 8005808:	4619      	mov	r1, r3
 800580a:	483a      	ldr	r0, [pc, #232]	; (80058f4 <MX_GPIO_Init+0x38c>)
 800580c:	f006 f931 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005814:	2301      	movs	r3, #1
 8005816:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005818:	2303      	movs	r3, #3
 800581a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4833      	ldr	r0, [pc, #204]	; (80058f8 <MX_GPIO_Init+0x390>)
 800582a:	f006 f922 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005832:	2301      	movs	r3, #1
 8005834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005836:	2303      	movs	r3, #3
 8005838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	4619      	mov	r1, r3
 8005846:	482c      	ldr	r0, [pc, #176]	; (80058f8 <MX_GPIO_Init+0x390>)
 8005848:	f006 f913 	bl	800ba72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 800584c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005852:	2301      	movs	r3, #1
 8005854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005856:	2303      	movs	r3, #3
 8005858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4824      	ldr	r0, [pc, #144]	; (80058f8 <MX_GPIO_Init+0x390>)
 8005868:	f006 f903 	bl	800ba72 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800586c:	f7ff fd3e 	bl	80052ec <__NVIC_GetPriorityGrouping>
 8005870:	4603      	mov	r3, r0
 8005872:	2200      	movs	r2, #0
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fd8e 	bl	8005398 <NVIC_EncodePriority>
 800587c:	4603      	mov	r3, r0
 800587e:	4619      	mov	r1, r3
 8005880:	2006      	movs	r0, #6
 8005882:	f7ff fd5f 	bl	8005344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8005886:	2006      	movs	r0, #6
 8005888:	f7ff fd3e 	bl	8005308 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800588c:	f7ff fd2e 	bl	80052ec <__NVIC_GetPriorityGrouping>
 8005890:	4603      	mov	r3, r0
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff fd7e 	bl	8005398 <NVIC_EncodePriority>
 800589c:	4603      	mov	r3, r0
 800589e:	4619      	mov	r1, r3
 80058a0:	2007      	movs	r0, #7
 80058a2:	f7ff fd4f 	bl	8005344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80058a6:	2007      	movs	r0, #7
 80058a8:	f7ff fd2e 	bl	8005308 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80058ac:	f7ff fd1e 	bl	80052ec <__NVIC_GetPriorityGrouping>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2200      	movs	r2, #0
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fd6e 	bl	8005398 <NVIC_EncodePriority>
 80058bc:	4603      	mov	r3, r0
 80058be:	4619      	mov	r1, r3
 80058c0:	2008      	movs	r0, #8
 80058c2:	f7ff fd3f 	bl	8005344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80058c6:	2008      	movs	r0, #8
 80058c8:	f7ff fd1e 	bl	8005308 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80058cc:	f7ff fd0e 	bl	80052ec <__NVIC_GetPriorityGrouping>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2200      	movs	r2, #0
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fd5e 	bl	8005398 <NVIC_EncodePriority>
 80058dc:	4603      	mov	r3, r0
 80058de:	4619      	mov	r1, r3
 80058e0:	2028      	movs	r0, #40	; 0x28
 80058e2:	f7ff fd2f 	bl	8005344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80058e6:	2028      	movs	r0, #40	; 0x28
 80058e8:	f7ff fd0e 	bl	8005308 <__NVIC_EnableIRQ>

}
 80058ec:	bf00      	nop
 80058ee:	3728      	adds	r7, #40	; 0x28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	e009      	b.n	8005908 <MX_GPIO_Init+0x3a0>
 80058f4:	48000800 	.word	0x48000800
 80058f8:	48000400 	.word	0x48000400
 80058fc:	0f000003 	.word	0x0f000003
 8005900:	f0000003 	.word	0xf0000003
 8005904:	48001400 	.word	0x48001400
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005914:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005918:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005924:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005928:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800592c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005934:	e000      	b.n	8005938 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005936:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005938:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f9      	beq.n	8005936 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005942:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800594c:	687b      	ldr	r3, [r7, #4]
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e009      	b.n	8005984 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	60ba      	str	r2, [r7, #8]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff ffc7 	bl	800590c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3301      	adds	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	429a      	cmp	r2, r3
 800598a:	dbf1      	blt.n	8005970 <_write+0x16>
  return len;
 800598c:	687b      	ldr	r3, [r7, #4]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
	// do something
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059b2:	f000 ff52 	bl	800685a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059b6:	f000 f891 	bl	8005adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059ba:	f7ff fdd5 	bl	8005568 <MX_GPIO_Init>
  MX_DMA_Init();
 80059be:	f7ff fc0f 	bl	80051e0 <MX_DMA_Init>
  MX_DAC1_Init();
 80059c2:	f7ff fabf 	bl	8004f44 <MX_DAC1_Init>
  MX_DAC2_Init();
 80059c6:	f7ff fb07 	bl	8004fd8 <MX_DAC2_Init>
  MX_ADC1_Init();
 80059ca:	f7ff f97d 	bl	8004cc8 <MX_ADC1_Init>
  MX_COMP1_Init();
 80059ce:	f7ff fa5f 	bl	8004e90 <MX_COMP1_Init>
  MX_TIM2_Init();
 80059d2:	f000 fc37 	bl	8006244 <MX_TIM2_Init>
  MX_TIM17_Init();
 80059d6:	f000 fdd1 	bl	800657c <MX_TIM17_Init>
  MX_SPI3_Init();
 80059da:	f000 f92b 	bl	8005c34 <MX_SPI3_Init>
  MX_RNG_Init();
 80059de:	f000 f91b 	bl	8005c18 <MX_RNG_Init>
  MX_TIM1_Init();
 80059e2:	f000 fbbf 	bl	8006164 <MX_TIM1_Init>
  MX_TIM8_Init();
 80059e6:	f000 fce7 	bl	80063b8 <MX_TIM8_Init>
  MX_TIM16_Init();
 80059ea:	f000 fd9f 	bl	800652c <MX_TIM16_Init>
  MX_TIM15_Init();
 80059ee:	f000 fd4b 	bl	8006488 <MX_TIM15_Init>
  MX_TIM5_Init();
 80059f2:	f000 fc91 	bl	8006318 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80059f6:	f7fd ff3d 	bl	8003874 <DT_InitRegister>

  // main signal function output (external)
  FuncO_Init();
 80059fa:	f7fe f92f 	bl	8003c5c <FuncO_Init>
  FuncO_ApplyPreset_Fast(eDefaultFuncPreset);
 80059fe:	2000      	movs	r0, #0
 8005a00:	f7fe f9a2 	bl	8003d48 <FuncO_ApplyPreset_Fast>

  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005a04:	2110      	movs	r1, #16
 8005a06:	482b      	ldr	r0, [pc, #172]	; (8005ab4 <main+0x108>)
 8005a08:	f002 fc2b 	bl	8008262 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table_3600, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2378      	movs	r3, #120	; 0x78
 8005a12:	4a29      	ldr	r2, [pc, #164]	; (8005ab8 <main+0x10c>)
 8005a14:	2100      	movs	r1, #0
 8005a16:	4829      	ldr	r0, [pc, #164]	; (8005abc <main+0x110>)
 8005a18:	f002 fc76 	bl	8008308 <HAL_DAC_Start_DMA>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8005a1c:	4828      	ldr	r0, [pc, #160]	; (8005ac0 <main+0x114>)
 8005a1e:	f004 fd5b 	bl	800a4d8 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8005a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a26:	f7fe f8a3 	bl	8003b70 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2108      	movs	r1, #8
 8005a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a32:	f003 fc57 	bl	80092e4 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPreset_Fast(eDefaultVppPreset);
 8005a36:	2059      	movs	r0, #89	; 0x59
 8005a38:	f7fe fbaa 	bl	8004190 <VPP_ApplyPreset_Fast>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a42:	4820      	ldr	r0, [pc, #128]	; (8005ac4 <main+0x118>)
 8005a44:	f003 fc4e 	bl	80092e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a4e:	481d      	ldr	r0, [pc, #116]	; (8005ac4 <main+0x118>)
 8005a50:	f003 fc48 	bl	80092e4 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8005a54:	2201      	movs	r2, #1
 8005a56:	2108      	movs	r1, #8
 8005a58:	481a      	ldr	r0, [pc, #104]	; (8005ac4 <main+0x118>)
 8005a5a:	f003 fc43 	bl	80092e4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8005a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a68:	f023 0307 	bic.w	r3, r3, #7
 8005a6c:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8005a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005a78:	f043 0305 	orr.w	r3, r3, #5
 8005a7c:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8005a7e:	4812      	ldr	r0, [pc, #72]	; (8005ac8 <main+0x11c>)
 8005a80:	f004 fd58 	bl	800a534 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8005a84:	4811      	ldr	r0, [pc, #68]	; (8005acc <main+0x120>)
 8005a86:	f004 fd27 	bl	800a4d8 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <main+0x124>)
 8005a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a90:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8005a92:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <main+0x124>)
 8005a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8005a9a:	f7fb f8d1 	bl	8000c40 <DM_Init>
  DM_PostInit();
 8005a9e:	f7fb f8dd 	bl	8000c5c <DM_PostInit>

  // DM_UpdateDisplay()
  HAL_TIM_Base_Start_IT(&htim15);
 8005aa2:	480c      	ldr	r0, [pc, #48]	; (8005ad4 <main+0x128>)
 8005aa4:	f004 fd46 	bl	800a534 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim16);

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 8005aa8:	480b      	ldr	r0, [pc, #44]	; (8005ad8 <main+0x12c>)
 8005aaa:	f004 fd15 	bl	800a4d8 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8005aae:	f7fd fa5b 	bl	8002f68 <EM_ProcessEvent>
 8005ab2:	e7fc      	b.n	8005aae <main+0x102>
 8005ab4:	200023ec 	.word	0x200023ec
 8005ab8:	20001928 	.word	0x20001928
 8005abc:	200023d8 	.word	0x200023d8
 8005ac0:	20002524 	.word	0x20002524
 8005ac4:	48000800 	.word	0x48000800
 8005ac8:	200026a0 	.word	0x200026a0
 8005acc:	20002654 	.word	0x20002654
 8005ad0:	40001000 	.word	0x40001000
 8005ad4:	20002570 	.word	0x20002570
 8005ad8:	20002608 	.word	0x20002608

08005adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b0a8      	sub	sp, #160	; 0xa0
 8005ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ae2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ae6:	2238      	movs	r2, #56	; 0x38
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f007 f81e 	bl	800cb2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005af0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	605a      	str	r2, [r3, #4]
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b00:	463b      	mov	r3, r7
 8005b02:	2254      	movs	r2, #84	; 0x54
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f007 f810 	bl	800cb2c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f003 fc01 	bl	8009314 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005b12:	2322      	movs	r3, #34	; 0x22
 8005b14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b1a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b26:	2302      	movs	r3, #2
 8005b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005b32:	2302      	movs	r3, #2
 8005b34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8005b38:	232a      	movs	r3, #42	; 0x2a
 8005b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8005b44:	2304      	movs	r3, #4
 8005b46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005b54:	4618      	mov	r0, r3
 8005b56:	f003 fc81 	bl	800945c <HAL_RCC_OscConfig>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005b60:	f000 f82a 	bl	8005bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b64:	230f      	movs	r3, #15
 8005b66:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005b70:	2300      	movs	r3, #0
 8005b72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b74:	2300      	movs	r3, #0
 8005b76:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8005b78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b7c:	2108      	movs	r1, #8
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f003 ff84 	bl	8009a8c <HAL_RCC_ClockConfig>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005b8a:	f000 f815 	bl	8005bb8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8005b8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005b92:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8005b94:	2300      	movs	r3, #0
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005b98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005b9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f004 f963 	bl	8009e6c <HAL_RCCEx_PeriphCLKConfig>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005bac:	f000 f804 	bl	8005bb8 <Error_Handler>
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	37a0      	adds	r7, #160	; 0xa0
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f043 0204 	orr.w	r2, r3, #4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <LL_AHB2_GRP1_EnableClock>:
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005bf0:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005bf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bf4:	4907      	ldr	r1, [pc, #28]	; (8005c14 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4013      	ands	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40021000 	.word	0x40021000

08005c18 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8005c1c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005c20:	f7ff ffe2 	bl	8005be8 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8005c24:	4802      	ldr	r0, [pc, #8]	; (8005c30 <MX_RNG_Init+0x18>)
 8005c26:	f7ff ffce 	bl	8005bc6 <LL_RNG_Enable>

}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	50060800 	.word	0x50060800

08005c34 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c3a:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <MX_SPI3_Init+0x78>)
 8005c3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005c46:	4b18      	ldr	r3, [pc, #96]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c4c:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c52:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c54:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005c5a:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c66:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005c68:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c74:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005c80:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c82:	2207      	movs	r2, #7
 8005c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c8e:	2208      	movs	r2, #8
 8005c90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005c92:	4805      	ldr	r0, [pc, #20]	; (8005ca8 <MX_SPI3_Init+0x74>)
 8005c94:	f004 fb36 	bl	800a304 <HAL_SPI_Init>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005c9e:	f7ff ff8b 	bl	8005bb8 <Error_Handler>
  }

}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200024c0 	.word	0x200024c0
 8005cac:	40003c00 	.word	0x40003c00

08005cb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb8:	f107 0314 	add.w	r3, r7, #20
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
 8005cc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <HAL_SPI_MspInit+0x7c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d128      	bne.n	8005d24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005cd2:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <HAL_SPI_MspInit+0x80>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <HAL_SPI_MspInit+0x80>)
 8005cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005cde:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <HAL_SPI_MspInit+0x80>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cea:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <HAL_SPI_MspInit+0x80>)
 8005cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cee:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <HAL_SPI_MspInit+0x80>)
 8005cf0:	f043 0304 	orr.w	r3, r3, #4
 8005cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <HAL_SPI_MspInit+0x80>)
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005d02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d10:	2300      	movs	r3, #0
 8005d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005d14:	2306      	movs	r3, #6
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4805      	ldr	r0, [pc, #20]	; (8005d34 <HAL_SPI_MspInit+0x84>)
 8005d20:	f003 f95e 	bl	8008fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005d24:	bf00      	nop
 8005d26:	3728      	adds	r7, #40	; 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40003c00 	.word	0x40003c00
 8005d30:	40021000 	.word	0x40021000
 8005d34:	48000800 	.word	0x48000800

08005d38 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d46:	6093      	str	r3, [r2, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40007000 	.word	0x40007000

08005d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <HAL_MspInit+0x44>)
 8005d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d62:	4a0e      	ldr	r2, [pc, #56]	; (8005d9c <HAL_MspInit+0x44>)
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	6613      	str	r3, [r2, #96]	; 0x60
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <HAL_MspInit+0x44>)
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <HAL_MspInit+0x44>)
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <HAL_MspInit+0x44>)
 8005d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d80:	6593      	str	r3, [r2, #88]	; 0x58
 8005d82:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <HAL_MspInit+0x44>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8005d8e:	f7ff ffd3 	bl	8005d38 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000

08005da0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005da8:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005daa:	695a      	ldr	r2, [r3, #20]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4013      	ands	r3, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d101      	bne.n	8005dba <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40010400 	.word	0x40010400

08005dcc <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005dd4:	4a04      	ldr	r2, [pc, #16]	; (8005de8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6153      	str	r3, [r2, #20]
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40010400 	.word	0x40010400

08005dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dfe:	e7fe      	b.n	8005dfe <HardFault_Handler+0x4>

08005e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e04:	e7fe      	b.n	8005e04 <MemManage_Handler+0x4>

08005e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e06:	b480      	push	{r7}
 8005e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e0a:	e7fe      	b.n	8005e0a <BusFault_Handler+0x4>

08005e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e10:	e7fe      	b.n	8005e10 <UsageFault_Handler+0x4>

08005e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e12:	b480      	push	{r7}
 8005e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e40:	f000 fd5e 	bl	8006900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e44:	bf00      	nop
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7ff ffa7 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <EXTI0_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evRedBtn);
 8005e58:	2004      	movs	r0, #4
 8005e5a:	f7fd f9fd 	bl	8003258 <EM_SetNewEvent>
		printf("'Red' BTN3_EXTI0_Pin\n");
 8005e5e:	4807      	ldr	r0, [pc, #28]	; (8005e7c <EXTI0_IRQHandler+0x34>)
 8005e60:	f007 fb24 	bl	800d4ac <puts>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8005e64:	2001      	movs	r0, #1
 8005e66:	f7ff ff9b 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <EXTI0_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8005e70:	2001      	movs	r0, #1
 8005e72:	f7ff ffab 	bl	8005dcc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	08010028 	.word	0x08010028

08005e80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8005e84:	2002      	movs	r0, #2
 8005e86:	f7ff ff8b 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <EXTI1_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evGreenBtn);
 8005e90:	2002      	movs	r0, #2
 8005e92:	f7fd f9e1 	bl	8003258 <EM_SetNewEvent>
		printf("'Green' BTN4_EXTI1_Pin\n");
 8005e96:	4807      	ldr	r0, [pc, #28]	; (8005eb4 <EXTI1_IRQHandler+0x34>)
 8005e98:	f007 fb08 	bl	800d4ac <puts>
	}


  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8005e9c:	2002      	movs	r0, #2
 8005e9e:	f7ff ff7f 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <EXTI1_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8005ea8:	2002      	movs	r0, #2
 8005eaa:	f7ff ff8f 	bl	8005dcc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005eae:	bf00      	nop
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	08010040 	.word	0x08010040

08005eb8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8005ebc:	2004      	movs	r0, #4
 8005ebe:	f7ff ff6f 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <EXTI2_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evEncoderPush);
 8005ec8:	2006      	movs	r0, #6
 8005eca:	f7fd f9c5 	bl	8003258 <EM_SetNewEvent>
		printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005ece:	4807      	ldr	r0, [pc, #28]	; (8005eec <EXTI2_IRQHandler+0x34>)
 8005ed0:	f007 faec 	bl	800d4ac <puts>
	}


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8005ed4:	2004      	movs	r0, #4
 8005ed6:	f7ff ff63 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <EXTI2_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8005ee0:	2004      	movs	r0, #4
 8005ee2:	f7ff ff73 	bl	8005dcc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	08010058 	.word	0x08010058

08005ef0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005ef4:	4802      	ldr	r0, [pc, #8]	; (8005f00 <DMA1_Channel1_IRQHandler+0x10>)
 8005ef6:	f002 ff23 	bl	8008d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005efa:	bf00      	nop
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20002354 	.word	0x20002354

08005f04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005f08:	4802      	ldr	r0, [pc, #8]	; (8005f14 <DMA1_Channel2_IRQHandler+0x10>)
 8005f0a:	f002 ff19 	bl	8008d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20002400 	.word	0x20002400

08005f18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8005f1c:	4802      	ldr	r0, [pc, #8]	; (8005f28 <DMA1_Channel3_IRQHandler+0x10>)
 8005f1e:	f002 ff0f 	bl	8008d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20002460 	.word	0x20002460

08005f2c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8005f30:	f7fa ffb8 	bl	8000ea4 <DM_UpdateDisplay>
	{
		printf("Encoder turned\n");
		TIM1->SR &= ~(TIM_SR_IDXF);
	}
*/
	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f40:	d10b      	bne.n	8005f5a <TIM1_BRK_TIM15_IRQHandler+0x2e>
	{
		EM_SetNewEvent(evEncoderSet);
 8005f42:	2005      	movs	r0, #5
 8005f44:	f7fd f988 	bl	8003258 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8005f48:	4809      	ldr	r0, [pc, #36]	; (8005f70 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8005f4a:	f007 faaf 	bl	800d4ac <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	4a06      	ldr	r2, [pc, #24]	; (8005f6c <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f58:	6113      	str	r3, [r2, #16]

	}
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f5a:	4806      	ldr	r0, [pc, #24]	; (8005f74 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8005f5c:	f004 fbf5 	bl	800a74a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8005f60:	4805      	ldr	r0, [pc, #20]	; (8005f78 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8005f62:	f004 fbf2 	bl	800a74a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40012c00 	.word	0x40012c00
 8005f70:	08010074 	.word	0x08010074
 8005f74:	20002654 	.word	0x20002654
 8005f78:	20002570 	.word	0x20002570

08005f7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	//snprintf(control_pressed, sizeof(control_pressed), " ");
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f80:	4803      	ldr	r0, [pc, #12]	; (8005f90 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005f82:	f004 fbe2 	bl	800a74a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005f86:	4803      	ldr	r0, [pc, #12]	; (8005f94 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005f88:	f004 fbdf 	bl	800a74a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005f8c:	bf00      	nop
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20002654 	.word	0x20002654
 8005f94:	200026ec 	.word	0x200026ec

08005f98 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8005f9c:	f7ff f95a 	bl	8005254 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005fa0:	4803      	ldr	r0, [pc, #12]	; (8005fb0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005fa2:	f004 fbd2 	bl	800a74a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005fa6:	4803      	ldr	r0, [pc, #12]	; (8005fb4 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8005fa8:	f004 fbcf 	bl	800a74a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005fac:	bf00      	nop
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20002654 	.word	0x20002654
 8005fb4:	200025bc 	.word	0x200025bc

08005fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005fbc:	4802      	ldr	r0, [pc, #8]	; (8005fc8 <TIM2_IRQHandler+0x10>)
 8005fbe:	f004 fbc4 	bl	800a74a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005fc2:	bf00      	nop
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200026a0 	.word	0x200026a0

08005fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005fd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005fd4:	f7ff fee4 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <EXTI15_10_IRQHandler+0x1e>
	{

		EM_SetNewEvent(evBlueBtn);
 8005fde:	2001      	movs	r0, #1
 8005fe0:	f7fd f93a 	bl	8003258 <EM_SetNewEvent>
		printf("'Blue' BTN1_EXTI14_Pin\n");
 8005fe4:	4813      	ldr	r0, [pc, #76]	; (8006034 <EXTI15_10_IRQHandler+0x68>)
 8005fe6:	f007 fa61 	bl	800d4ac <puts>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8005fea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005fee:	f7ff fed7 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <EXTI15_10_IRQHandler+0x38>
	{
		EM_SetNewEvent(evYellowBtn);
 8005ff8:	2003      	movs	r0, #3
 8005ffa:	f7fd f92d 	bl	8003258 <EM_SetNewEvent>
		printf("'Yellow' BTN2_EXTI15_Pin\n");
 8005ffe:	480e      	ldr	r0, [pc, #56]	; (8006038 <EXTI15_10_IRQHandler+0x6c>)
 8006000:	f007 fa54 	bl	800d4ac <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8006004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006008:	f7ff feca 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <EXTI15_10_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8006012:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006016:	f7ff fed9 	bl	8005dcc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800601a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800601e:	f7ff febf 	bl	8005da0 <LL_EXTI_IsActiveFlag_0_31>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <EXTI15_10_IRQHandler+0x64>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8006028:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800602c:	f7ff fece 	bl	8005dcc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006030:	bf00      	nop
 8006032:	bd80      	pop	{r7, pc}
 8006034:	0801008c 	.word	0x0801008c
 8006038:	080100a4 	.word	0x080100a4

0800603c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e00a      	b.n	8006064 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800604e:	f3af 8000 	nop.w
 8006052:	4601      	mov	r1, r0
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	60ba      	str	r2, [r7, #8]
 800605a:	b2ca      	uxtb	r2, r1
 800605c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3301      	adds	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	429a      	cmp	r2, r3
 800606a:	dbf0      	blt.n	800604e <_read+0x12>
	}

return len;
 800606c:	687b      	ldr	r3, [r7, #4]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
	return -1;
 800607e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800609e:	605a      	str	r2, [r3, #4]
	return 0;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <_isatty>:

int _isatty(int file)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
	return 1;
 80060b6:	2301      	movs	r3, #1
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
	return 0;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <_sbrk+0x50>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <_sbrk+0x16>
		heap_end = &end;
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <_sbrk+0x50>)
 80060f2:	4a10      	ldr	r2, [pc, #64]	; (8006134 <_sbrk+0x54>)
 80060f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <_sbrk+0x50>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <_sbrk+0x50>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4413      	add	r3, r2
 8006104:	466a      	mov	r2, sp
 8006106:	4293      	cmp	r3, r2
 8006108:	d907      	bls.n	800611a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800610a:	f006 fce5 	bl	800cad8 <__errno>
 800610e:	4602      	mov	r2, r0
 8006110:	230c      	movs	r3, #12
 8006112:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006118:	e006      	b.n	8006128 <_sbrk+0x48>
	}

	heap_end += incr;
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <_sbrk+0x50>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	4a03      	ldr	r2, [pc, #12]	; (8006130 <_sbrk+0x50>)
 8006124:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006126:	68fb      	ldr	r3, [r7, #12]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20001f10 	.word	0x20001f10
 8006134:	20002740 	.word	0x20002740

08006138 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <SystemInit+0x28>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	4a07      	ldr	r2, [pc, #28]	; (8006160 <SystemInit+0x28>)
 8006144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800614c:	4b04      	ldr	r3, [pc, #16]	; (8006160 <SystemInit+0x28>)
 800614e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006152:	609a      	str	r2, [r3, #8]
#endif
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000ed00 	.word	0xe000ed00

08006164 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b09a      	sub	sp, #104	; 0x68
 8006168:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800616a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f006 fcda 	bl	800cb2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006184:	1d3b      	adds	r3, r7, #4
 8006186:	2234      	movs	r2, #52	; 0x34
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f006 fcce 	bl	800cb2c <memset>

  htim1.Instance = TIM1;
 8006190:	4b2a      	ldr	r3, [pc, #168]	; (800623c <MX_TIM1_Init+0xd8>)
 8006192:	4a2b      	ldr	r2, [pc, #172]	; (8006240 <MX_TIM1_Init+0xdc>)
 8006194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006196:	4b29      	ldr	r3, [pc, #164]	; (800623c <MX_TIM1_Init+0xd8>)
 8006198:	2200      	movs	r2, #0
 800619a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <MX_TIM1_Init+0xd8>)
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80061a2:	4b26      	ldr	r3, [pc, #152]	; (800623c <MX_TIM1_Init+0xd8>)
 80061a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061aa:	4b24      	ldr	r3, [pc, #144]	; (800623c <MX_TIM1_Init+0xd8>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80061b0:	4b22      	ldr	r3, [pc, #136]	; (800623c <MX_TIM1_Init+0xd8>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061b6:	4b21      	ldr	r3, [pc, #132]	; (800623c <MX_TIM1_Init+0xd8>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80061bc:	2303      	movs	r3, #3
 80061be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061c0:	2300      	movs	r3, #0
 80061c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061c4:	2301      	movs	r3, #1
 80061c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061c8:	2300      	movs	r3, #0
 80061ca:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061d0:	2300      	movs	r3, #0
 80061d2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061d4:	2301      	movs	r3, #1
 80061d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061d8:	2300      	movs	r3, #0
 80061da:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80061e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061e4:	4619      	mov	r1, r3
 80061e6:	4815      	ldr	r0, [pc, #84]	; (800623c <MX_TIM1_Init+0xd8>)
 80061e8:	f004 fa09 	bl	800a5fe <HAL_TIM_Encoder_Init>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80061f2:	f7ff fce1 	bl	8005bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80061f6:	2320      	movs	r3, #32
 80061f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061fe:	2300      	movs	r3, #0
 8006200:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006202:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006206:	4619      	mov	r1, r3
 8006208:	480c      	ldr	r0, [pc, #48]	; (800623c <MX_TIM1_Init+0xd8>)
 800620a:	f004 ff81 	bl	800b110 <HAL_TIMEx_MasterConfigSynchronization>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006214:	f7ff fcd0 	bl	8005bb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006218:	2300      	movs	r3, #0
 800621a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800621c:	2300      	movs	r3, #0
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006220:	1d3b      	adds	r3, r7, #4
 8006222:	4619      	mov	r1, r3
 8006224:	4805      	ldr	r0, [pc, #20]	; (800623c <MX_TIM1_Init+0xd8>)
 8006226:	f005 f809 	bl	800b23c <HAL_TIMEx_ConfigBreakDeadTime>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8006230:	f7ff fcc2 	bl	8005bb8 <Error_Handler>
  }

}
 8006234:	bf00      	nop
 8006236:	3768      	adds	r7, #104	; 0x68
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20002654 	.word	0x20002654
 8006240:	40012c00 	.word	0x40012c00

08006244 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	; 0x30
 8006248:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800624a:	f107 0320 	add.w	r3, r7, #32
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	609a      	str	r2, [r3, #8]
 8006256:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	609a      	str	r2, [r3, #8]
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006268:	463b      	mov	r3, r7
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
 8006270:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8006272:	4b28      	ldr	r3, [pc, #160]	; (8006314 <MX_TIM2_Init+0xd0>)
 8006274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006278:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <MX_TIM2_Init+0xd0>)
 800627c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <MX_TIM2_Init+0xd0>)
 8006284:	2200      	movs	r2, #0
 8006286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8006288:	4b22      	ldr	r3, [pc, #136]	; (8006314 <MX_TIM2_Init+0xd0>)
 800628a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800628e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006290:	4b20      	ldr	r3, [pc, #128]	; (8006314 <MX_TIM2_Init+0xd0>)
 8006292:	2200      	movs	r2, #0
 8006294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006296:	4b1f      	ldr	r3, [pc, #124]	; (8006314 <MX_TIM2_Init+0xd0>)
 8006298:	2200      	movs	r2, #0
 800629a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800629c:	481d      	ldr	r0, [pc, #116]	; (8006314 <MX_TIM2_Init+0xd0>)
 800629e:	f004 f8c3 	bl	800a428 <HAL_TIM_Base_Init>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80062a8:	f7ff fc86 	bl	8005bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80062ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80062b2:	f107 0320 	add.w	r3, r7, #32
 80062b6:	4619      	mov	r1, r3
 80062b8:	4816      	ldr	r0, [pc, #88]	; (8006314 <MX_TIM2_Init+0xd0>)
 80062ba:	f004 fbc5 	bl	800aa48 <HAL_TIM_ConfigClockSource>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80062c4:	f7ff fc78 	bl	8005bb8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80062c8:	2305      	movs	r3, #5
 80062ca:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80062cc:	2350      	movs	r3, #80	; 0x50
 80062ce:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80062d8:	f107 030c 	add.w	r3, r7, #12
 80062dc:	4619      	mov	r1, r3
 80062de:	480d      	ldr	r0, [pc, #52]	; (8006314 <MX_TIM2_Init+0xd0>)
 80062e0:	f004 fca2 	bl	800ac28 <HAL_TIM_SlaveConfigSynchro>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80062ea:	f7ff fc65 	bl	8005bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062ee:	2300      	movs	r3, #0
 80062f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80062f6:	463b      	mov	r3, r7
 80062f8:	4619      	mov	r1, r3
 80062fa:	4806      	ldr	r0, [pc, #24]	; (8006314 <MX_TIM2_Init+0xd0>)
 80062fc:	f004 ff08 	bl	800b110 <HAL_TIMEx_MasterConfigSynchronization>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8006306:	f7ff fc57 	bl	8005bb8 <Error_Handler>
  }

}
 800630a:	bf00      	nop
 800630c:	3730      	adds	r7, #48	; 0x30
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	200026a0 	.word	0x200026a0

08006318 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800631e:	f107 0310 	add.w	r3, r7, #16
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	609a      	str	r2, [r3, #8]
 800632a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	605a      	str	r2, [r3, #4]
 8006334:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8006336:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <MX_TIM5_Init+0x98>)
 8006338:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <MX_TIM5_Init+0x9c>)
 800633a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 800633c:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <MX_TIM5_Init+0x98>)
 800633e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006342:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006344:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <MX_TIM5_Init+0x98>)
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800634a:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <MX_TIM5_Init+0x98>)
 800634c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006350:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006352:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <MX_TIM5_Init+0x98>)
 8006354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006358:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <MX_TIM5_Init+0x98>)
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006360:	4813      	ldr	r0, [pc, #76]	; (80063b0 <MX_TIM5_Init+0x98>)
 8006362:	f004 f861 	bl	800a428 <HAL_TIM_Base_Init>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800636c:	f7ff fc24 	bl	8005bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006374:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006376:	f107 0310 	add.w	r3, r7, #16
 800637a:	4619      	mov	r1, r3
 800637c:	480c      	ldr	r0, [pc, #48]	; (80063b0 <MX_TIM5_Init+0x98>)
 800637e:	f004 fb63 	bl	800aa48 <HAL_TIM_ConfigClockSource>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8006388:	f7ff fc16 	bl	8005bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800638c:	2300      	movs	r3, #0
 800638e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006394:	1d3b      	adds	r3, r7, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4805      	ldr	r0, [pc, #20]	; (80063b0 <MX_TIM5_Init+0x98>)
 800639a:	f004 feb9 	bl	800b110 <HAL_TIMEx_MasterConfigSynchronization>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80063a4:	f7ff fc08 	bl	8005bb8 <Error_Handler>
  }

}
 80063a8:	bf00      	nop
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20002608 	.word	0x20002608
 80063b4:	40000c00 	.word	0x40000c00

080063b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b094      	sub	sp, #80	; 0x50
 80063bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	605a      	str	r2, [r3, #4]
 80063c8:	609a      	str	r2, [r3, #8]
 80063ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063d8:	463b      	mov	r3, r7
 80063da:	2234      	movs	r2, #52	; 0x34
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f006 fba4 	bl	800cb2c <memset>

  htim8.Instance = TIM8;
 80063e4:	4b26      	ldr	r3, [pc, #152]	; (8006480 <MX_TIM8_Init+0xc8>)
 80063e6:	4a27      	ldr	r2, [pc, #156]	; (8006484 <MX_TIM8_Init+0xcc>)
 80063e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80063ea:	4b25      	ldr	r3, [pc, #148]	; (8006480 <MX_TIM8_Init+0xc8>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063f0:	4b23      	ldr	r3, [pc, #140]	; (8006480 <MX_TIM8_Init+0xc8>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80063f6:	4b22      	ldr	r3, [pc, #136]	; (8006480 <MX_TIM8_Init+0xc8>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063fc:	4b20      	ldr	r3, [pc, #128]	; (8006480 <MX_TIM8_Init+0xc8>)
 80063fe:	2200      	movs	r2, #0
 8006400:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006402:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <MX_TIM8_Init+0xc8>)
 8006404:	2200      	movs	r2, #0
 8006406:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <MX_TIM8_Init+0xc8>)
 800640a:	2200      	movs	r2, #0
 800640c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800640e:	481c      	ldr	r0, [pc, #112]	; (8006480 <MX_TIM8_Init+0xc8>)
 8006410:	f004 f80a 	bl	800a428 <HAL_TIM_Base_Init>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800641a:	f7ff fbcd 	bl	8005bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800641e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006422:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006428:	4619      	mov	r1, r3
 800642a:	4815      	ldr	r0, [pc, #84]	; (8006480 <MX_TIM8_Init+0xc8>)
 800642c:	f004 fb0c 	bl	800aa48 <HAL_TIM_ConfigClockSource>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006436:	f7ff fbbf 	bl	8005bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800643a:	2320      	movs	r3, #32
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800643e:	2300      	movs	r3, #0
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006442:	2300      	movs	r3, #0
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006446:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800644a:	4619      	mov	r1, r3
 800644c:	480c      	ldr	r0, [pc, #48]	; (8006480 <MX_TIM8_Init+0xc8>)
 800644e:	f004 fe5f 	bl	800b110 <HAL_TIMEx_MasterConfigSynchronization>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8006458:	f7ff fbae 	bl	8005bb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006460:	2300      	movs	r3, #0
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006464:	463b      	mov	r3, r7
 8006466:	4619      	mov	r1, r3
 8006468:	4805      	ldr	r0, [pc, #20]	; (8006480 <MX_TIM8_Init+0xc8>)
 800646a:	f004 fee7 	bl	800b23c <HAL_TIMEx_ConfigBreakDeadTime>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8006474:	f7ff fba0 	bl	8005bb8 <Error_Handler>
  }

}
 8006478:	bf00      	nop
 800647a:	3750      	adds	r7, #80	; 0x50
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20002524 	.word	0x20002524
 8006484:	40013400 	.word	0x40013400

08006488 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	605a      	str	r2, [r3, #4]
 8006498:	609a      	str	r2, [r3, #8]
 800649a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80064a6:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <MX_TIM15_Init+0xa0>)
 80064aa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80064ac:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064b2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064b4:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064c0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064c2:	4b18      	ldr	r3, [pc, #96]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80064c8:	4b16      	ldr	r3, [pc, #88]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064ce:	4b15      	ldr	r3, [pc, #84]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80064d4:	4813      	ldr	r0, [pc, #76]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064d6:	f003 ffa7 	bl	800a428 <HAL_TIM_Base_Init>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80064e0:	f7ff fb6a 	bl	8005bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80064ea:	f107 0310 	add.w	r3, r7, #16
 80064ee:	4619      	mov	r1, r3
 80064f0:	480c      	ldr	r0, [pc, #48]	; (8006524 <MX_TIM15_Init+0x9c>)
 80064f2:	f004 faa9 	bl	800aa48 <HAL_TIM_ConfigClockSource>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80064fc:	f7ff fb5c 	bl	8005bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006500:	2300      	movs	r3, #0
 8006502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	4619      	mov	r1, r3
 800650c:	4805      	ldr	r0, [pc, #20]	; (8006524 <MX_TIM15_Init+0x9c>)
 800650e:	f004 fdff 	bl	800b110 <HAL_TIMEx_MasterConfigSynchronization>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8006518:	f7ff fb4e 	bl	8005bb8 <Error_Handler>
  }

}
 800651c:	bf00      	nop
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20002570 	.word	0x20002570
 8006528:	40014000 	.word	0x40014000

0800652c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8006530:	4b10      	ldr	r3, [pc, #64]	; (8006574 <MX_TIM16_Init+0x48>)
 8006532:	4a11      	ldr	r2, [pc, #68]	; (8006578 <MX_TIM16_Init+0x4c>)
 8006534:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1024;
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <MX_TIM16_Init+0x48>)
 8006538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800653c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <MX_TIM16_Init+0x48>)
 8006540:	2200      	movs	r2, #0
 8006542:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1024;
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <MX_TIM16_Init+0x48>)
 8006546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800654a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <MX_TIM16_Init+0x48>)
 800654e:	2200      	movs	r2, #0
 8006550:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <MX_TIM16_Init+0x48>)
 8006554:	2200      	movs	r2, #0
 8006556:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <MX_TIM16_Init+0x48>)
 800655a:	2200      	movs	r2, #0
 800655c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800655e:	4805      	ldr	r0, [pc, #20]	; (8006574 <MX_TIM16_Init+0x48>)
 8006560:	f003 ff62 	bl	800a428 <HAL_TIM_Base_Init>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800656a:	f7ff fb25 	bl	8005bb8 <Error_Handler>
  }

}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200026ec 	.word	0x200026ec
 8006578:	40014400 	.word	0x40014400

0800657c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <MX_TIM17_Init+0x44>)
 8006582:	4a10      	ldr	r2, [pc, #64]	; (80065c4 <MX_TIM17_Init+0x48>)
 8006584:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8006586:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <MX_TIM17_Init+0x44>)
 8006588:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800658c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800658e:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <MX_TIM17_Init+0x44>)
 8006590:	2200      	movs	r2, #0
 8006592:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <MX_TIM17_Init+0x44>)
 8006596:	2240      	movs	r2, #64	; 0x40
 8006598:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <MX_TIM17_Init+0x44>)
 800659c:	2200      	movs	r2, #0
 800659e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80065a0:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <MX_TIM17_Init+0x44>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <MX_TIM17_Init+0x44>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80065ac:	4804      	ldr	r0, [pc, #16]	; (80065c0 <MX_TIM17_Init+0x44>)
 80065ae:	f003 ff3b 	bl	800a428 <HAL_TIM_Base_Init>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80065b8:	f7ff fafe 	bl	8005bb8 <Error_Handler>
  }

}
 80065bc:	bf00      	nop
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	200025bc 	.word	0x200025bc
 80065c4:	40014800 	.word	0x40014800

080065c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a23      	ldr	r2, [pc, #140]	; (8006674 <HAL_TIM_Encoder_MspInit+0xac>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d13f      	bne.n	800666a <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <HAL_TIM_Encoder_MspInit+0xb0>)
 80065ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ee:	4a22      	ldr	r2, [pc, #136]	; (8006678 <HAL_TIM_Encoder_MspInit+0xb0>)
 80065f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065f4:	6613      	str	r3, [r2, #96]	; 0x60
 80065f6:	4b20      	ldr	r3, [pc, #128]	; (8006678 <HAL_TIM_Encoder_MspInit+0xb0>)
 80065f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006602:	4b1d      	ldr	r3, [pc, #116]	; (8006678 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006606:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006608:	f043 0304 	orr.w	r3, r3, #4
 800660c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800660e:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800661a:	2303      	movs	r3, #3
 800661c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800661e:	2302      	movs	r3, #2
 8006620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006626:	2300      	movs	r3, #0
 8006628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800662a:	2302      	movs	r3, #2
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800662e:	f107 0314 	add.w	r3, r7, #20
 8006632:	4619      	mov	r1, r3
 8006634:	4811      	ldr	r0, [pc, #68]	; (800667c <HAL_TIM_Encoder_MspInit+0xb4>)
 8006636:	f002 fcd3 	bl	8008fe0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800663a:	2200      	movs	r2, #0
 800663c:	2100      	movs	r1, #0
 800663e:	2018      	movs	r0, #24
 8006640:	f001 fdb9 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006644:	2018      	movs	r0, #24
 8006646:	f001 fdd0 	bl	80081ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800664a:	2200      	movs	r2, #0
 800664c:	2101      	movs	r1, #1
 800664e:	2019      	movs	r0, #25
 8006650:	f001 fdb1 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006654:	2019      	movs	r0, #25
 8006656:	f001 fdc8 	bl	80081ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800665a:	2200      	movs	r2, #0
 800665c:	2101      	movs	r1, #1
 800665e:	201a      	movs	r0, #26
 8006660:	f001 fda9 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006664:	201a      	movs	r0, #26
 8006666:	f001 fdc0 	bl	80081ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800666a:	bf00      	nop
 800666c:	3728      	adds	r7, #40	; 0x28
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40021000 	.word	0x40021000
 800667c:	48000800 	.word	0x48000800

08006680 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	; 0x38
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d131      	bne.n	8006706 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80066a2:	4b53      	ldr	r3, [pc, #332]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	4a52      	ldr	r2, [pc, #328]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	6593      	str	r3, [r2, #88]	; 0x58
 80066ae:	4b50      	ldr	r3, [pc, #320]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ba:	4b4d      	ldr	r3, [pc, #308]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	4a4c      	ldr	r2, [pc, #304]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066c6:	4b4a      	ldr	r3, [pc, #296]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80066c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	61fb      	str	r3, [r7, #28]
 80066d0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80066d2:	2301      	movs	r3, #1
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d6:	2302      	movs	r3, #2
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066de:	2300      	movs	r3, #0
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80066e2:	2301      	movs	r3, #1
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ea:	4619      	mov	r1, r3
 80066ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066f0:	f002 fc76 	bl	8008fe0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80066f4:	2200      	movs	r2, #0
 80066f6:	2101      	movs	r1, #1
 80066f8:	201c      	movs	r0, #28
 80066fa:	f001 fd5c 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80066fe:	201c      	movs	r0, #28
 8006700:	f001 fd73 	bl	80081ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006704:	e070      	b.n	80067e8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a3a      	ldr	r2, [pc, #232]	; (80067f4 <HAL_TIM_Base_MspInit+0x174>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10c      	bne.n	800672a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006710:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006714:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 8006716:	f043 0308 	orr.w	r3, r3, #8
 800671a:	6593      	str	r3, [r2, #88]	; 0x58
 800671c:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 800671e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	69bb      	ldr	r3, [r7, #24]
}
 8006728:	e05e      	b.n	80067e8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a32      	ldr	r2, [pc, #200]	; (80067f8 <HAL_TIM_Base_MspInit+0x178>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10c      	bne.n	800674e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006734:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	4a2d      	ldr	r2, [pc, #180]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 800673a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800673e:	6613      	str	r3, [r2, #96]	; 0x60
 8006740:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
}
 800674c:	e04c      	b.n	80067e8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2a      	ldr	r2, [pc, #168]	; (80067fc <HAL_TIM_Base_MspInit+0x17c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d114      	bne.n	8006782 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 800675a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675c:	4a24      	ldr	r2, [pc, #144]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006762:	6613      	str	r3, [r2, #96]	; 0x60
 8006764:	4b22      	ldr	r3, [pc, #136]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8006770:	2200      	movs	r2, #0
 8006772:	2100      	movs	r1, #0
 8006774:	2018      	movs	r0, #24
 8006776:	f001 fd1e 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800677a:	2018      	movs	r0, #24
 800677c:	f001 fd35 	bl	80081ea <HAL_NVIC_EnableIRQ>
}
 8006780:	e032      	b.n	80067e8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <HAL_TIM_Base_MspInit+0x180>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d114      	bne.n	80067b6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 800678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006790:	4a17      	ldr	r2, [pc, #92]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 8006792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006796:	6613      	str	r3, [r2, #96]	; 0x60
 8006798:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 800679a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80067a4:	2200      	movs	r2, #0
 80067a6:	2101      	movs	r1, #1
 80067a8:	2019      	movs	r0, #25
 80067aa:	f001 fd04 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80067ae:	2019      	movs	r0, #25
 80067b0:	f001 fd1b 	bl	80081ea <HAL_NVIC_EnableIRQ>
}
 80067b4:	e018      	b.n	80067e8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a12      	ldr	r2, [pc, #72]	; (8006804 <HAL_TIM_Base_MspInit+0x184>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d113      	bne.n	80067e8 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80067c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067ca:	6613      	str	r3, [r2, #96]	; 0x60
 80067cc:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <HAL_TIM_Base_MspInit+0x170>)
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80067d8:	2200      	movs	r2, #0
 80067da:	2101      	movs	r1, #1
 80067dc:	201a      	movs	r0, #26
 80067de:	f001 fcea 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80067e2:	201a      	movs	r0, #26
 80067e4:	f001 fd01 	bl	80081ea <HAL_NVIC_EnableIRQ>
}
 80067e8:	bf00      	nop
 80067ea:	3738      	adds	r7, #56	; 0x38
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40021000 	.word	0x40021000
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40013400 	.word	0x40013400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800

08006808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006808:	480d      	ldr	r0, [pc, #52]	; (8006840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800680a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800680c:	480d      	ldr	r0, [pc, #52]	; (8006844 <LoopForever+0x6>)
  ldr r1, =_edata
 800680e:	490e      	ldr	r1, [pc, #56]	; (8006848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006810:	4a0e      	ldr	r2, [pc, #56]	; (800684c <LoopForever+0xe>)
  movs r3, #0
 8006812:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006814:	e002      	b.n	800681c <LoopCopyDataInit>

08006816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800681a:	3304      	adds	r3, #4

0800681c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800681c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800681e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006820:	d3f9      	bcc.n	8006816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006824:	4c0b      	ldr	r4, [pc, #44]	; (8006854 <LoopForever+0x16>)
  movs r3, #0
 8006826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006828:	e001      	b.n	800682e <LoopFillZerobss>

0800682a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800682a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800682c:	3204      	adds	r2, #4

0800682e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800682e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006830:	d3fb      	bcc.n	800682a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006832:	f7ff fc81 	bl	8006138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006836:	f006 f955 	bl	800cae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800683a:	f7ff f8b7 	bl	80059ac <main>

0800683e <LoopForever>:

LoopForever:
    b LoopForever
 800683e:	e7fe      	b.n	800683e <LoopForever>
  ldr   r0, =_estack
 8006840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006848:	20001eb8 	.word	0x20001eb8
  ldr r2, =_sidata
 800684c:	080105d8 	.word	0x080105d8
  ldr r2, =_sbss
 8006850:	20001eb8 	.word	0x20001eb8
  ldr r4, =_ebss
 8006854:	20002740 	.word	0x20002740

08006858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006858:	e7fe      	b.n	8006858 <ADC1_2_IRQHandler>

0800685a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006864:	2003      	movs	r0, #3
 8006866:	f001 fc9b 	bl	80081a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800686a:	2000      	movs	r0, #0
 800686c:	f000 f80e 	bl	800688c <HAL_InitTick>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	71fb      	strb	r3, [r7, #7]
 800687a:	e001      	b.n	8006880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800687c:	f7ff fa6c 	bl	8005d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006880:	79fb      	ldrb	r3, [r7, #7]

}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <HAL_InitTick+0x68>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d022      	beq.n	80068e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80068a0:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <HAL_InitTick+0x6c>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b13      	ldr	r3, [pc, #76]	; (80068f4 <HAL_InitTick+0x68>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 fca6 	bl	8008206 <HAL_SYSTICK_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10f      	bne.n	80068e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b0f      	cmp	r3, #15
 80068c4:	d809      	bhi.n	80068da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068c6:	2200      	movs	r2, #0
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ce:	f001 fc72 	bl	80081b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80068d2:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <HAL_InitTick+0x70>)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e007      	b.n	80068ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	e004      	b.n	80068ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
 80068e4:	e001      	b.n	80068ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000c9c 	.word	0x20000c9c
 80068f8:	20000c94 	.word	0x20000c94
 80068fc:	20000c98 	.word	0x20000c98

08006900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <HAL_IncTick+0x1c>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <HAL_IncTick+0x20>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4413      	add	r3, r2
 800690e:	4a03      	ldr	r2, [pc, #12]	; (800691c <HAL_IncTick+0x1c>)
 8006910:	6013      	str	r3, [r2, #0]
}
 8006912:	bf00      	nop
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	20002738 	.word	0x20002738
 8006920:	20000c9c 	.word	0x20000c9c

08006924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return uwTick;
 8006928:	4b03      	ldr	r3, [pc, #12]	; (8006938 <HAL_GetTick+0x14>)
 800692a:	681b      	ldr	r3, [r3, #0]
}
 800692c:	4618      	mov	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20002738 	.word	0x20002738

0800693c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006944:	f7ff ffee 	bl	8006924 <HAL_GetTick>
 8006948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006954:	d004      	beq.n	8006960 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <HAL_Delay+0x40>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006960:	bf00      	nop
 8006962:	f7ff ffdf 	bl	8006924 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	429a      	cmp	r2, r3
 8006970:	d8f7      	bhi.n	8006962 <HAL_Delay+0x26>
  {
  }
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000c9c 	.word	0x20000c9c

08006980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	609a      	str	r2, [r3, #8]
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	609a      	str	r2, [r3, #8]
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80069e8:	b490      	push	{r4, r7}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3360      	adds	r3, #96	; 0x60
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <LL_ADC_SetOffset+0x40>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a1a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a1c:	bf00      	nop
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc90      	pop	{r4, r7}
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	03fff000 	.word	0x03fff000

08006a2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a2c:	b490      	push	{r4, r7}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3360      	adds	r3, #96	; 0x60
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc90      	pop	{r4, r7}
 8006a52:	4770      	bx	lr

08006a54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a54:	b490      	push	{r4, r7}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3360      	adds	r3, #96	; 0x60
 8006a64:	461a      	mov	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc90      	pop	{r4, r7}
 8006a82:	4770      	bx	lr

08006a84 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006a84:	b490      	push	{r4, r7}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3360      	adds	r3, #96	; 0x60
 8006a94:	461a      	mov	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc90      	pop	{r4, r7}
 8006ab2:	4770      	bx	lr

08006ab4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006ab4:	b490      	push	{r4, r7}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3360      	adds	r3, #96	; 0x60
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc90      	pop	{r4, r7}
 8006ae2:	4770      	bx	lr

08006ae4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	615a      	str	r2, [r3, #20]
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b0a:	b490      	push	{r4, r7}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3330      	adds	r3, #48	; 0x30
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	4413      	add	r3, r2
 8006b28:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	211f      	movs	r1, #31
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	401a      	ands	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	0e9b      	lsrs	r3, r3, #26
 8006b40:	f003 011f 	and.w	r1, r3, #31
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc90      	pop	{r4, r7}
 8006b5a:	4770      	bx	lr

08006b5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b5c:	b490      	push	{r4, r7}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	0e5b      	lsrs	r3, r3, #25
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	4413      	add	r3, r2
 8006b7a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	0d1b      	lsrs	r3, r3, #20
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2107      	movs	r1, #7
 8006b88:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	401a      	ands	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	0d1b      	lsrs	r3, r3, #20
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc90      	pop	{r4, r7}
 8006baa:	4770      	bx	lr

08006bac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	401a      	ands	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0318 	and.w	r3, r3, #24
 8006bce:	4908      	ldr	r1, [pc, #32]	; (8006bf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006bd0:	40d9      	lsrs	r1, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	400b      	ands	r3, r1
 8006bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	0007ffff 	.word	0x0007ffff

08006bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6093      	str	r3, [r2, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c2c:	d101      	bne.n	8006c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c7c:	d101      	bne.n	8006c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <LL_ADC_IsEnabled+0x18>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <LL_ADC_IsEnabled+0x1a>
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d101      	bne.n	8006cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d101      	bne.n	8006cf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b089      	sub	sp, #36	; 0x24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e1ad      	b.n	800707a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fe f843 	bl	8004db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff ff67 	bl	8006c18 <LL_ADC_IsDeepPowerDownEnabled>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff ff4d 	bl	8006bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff ff82 	bl	8006c68 <LL_ADC_IsInternalRegulatorEnabled>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d113      	bne.n	8006d92 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff ff66 	bl	8006c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006d74:	4b9e      	ldr	r3, [pc, #632]	; (8006ff0 <HAL_ADC_Init+0x2ec>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	099b      	lsrs	r3, r3, #6
 8006d7a:	4a9e      	ldr	r2, [pc, #632]	; (8006ff4 <HAL_ADC_Init+0x2f0>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	099b      	lsrs	r3, r3, #6
 8006d82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006d84:	e002      	b.n	8006d8c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1f9      	bne.n	8006d86 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff ff66 	bl	8006c68 <LL_ADC_IsInternalRegulatorEnabled>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10d      	bne.n	8006dbe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da6:	f043 0210 	orr.w	r2, r3, #16
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db2:	f043 0201 	orr.w	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff ff77 	bl	8006cb6 <LL_ADC_REG_IsConversionOngoing>
 8006dc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 8148 	bne.w	8007068 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 8144 	bne.w	8007068 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006de8:	f043 0202 	orr.w	r2, r3, #2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff ff4b 	bl	8006c90 <LL_ADC_IsEnabled>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d141      	bne.n	8006e84 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e08:	d004      	beq.n	8006e14 <HAL_ADC_Init+0x110>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a7a      	ldr	r2, [pc, #488]	; (8006ff8 <HAL_ADC_Init+0x2f4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d10f      	bne.n	8006e34 <HAL_ADC_Init+0x130>
 8006e14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006e18:	f7ff ff3a 	bl	8006c90 <LL_ADC_IsEnabled>
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	4876      	ldr	r0, [pc, #472]	; (8006ff8 <HAL_ADC_Init+0x2f4>)
 8006e20:	f7ff ff36 	bl	8006c90 <LL_ADC_IsEnabled>
 8006e24:	4603      	mov	r3, r0
 8006e26:	4323      	orrs	r3, r4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bf0c      	ite	eq
 8006e2c:	2301      	moveq	r3, #1
 8006e2e:	2300      	movne	r3, #0
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	e012      	b.n	8006e5a <HAL_ADC_Init+0x156>
 8006e34:	4871      	ldr	r0, [pc, #452]	; (8006ffc <HAL_ADC_Init+0x2f8>)
 8006e36:	f7ff ff2b 	bl	8006c90 <LL_ADC_IsEnabled>
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4870      	ldr	r0, [pc, #448]	; (8007000 <HAL_ADC_Init+0x2fc>)
 8006e3e:	f7ff ff27 	bl	8006c90 <LL_ADC_IsEnabled>
 8006e42:	4603      	mov	r3, r0
 8006e44:	431c      	orrs	r4, r3
 8006e46:	486f      	ldr	r0, [pc, #444]	; (8007004 <HAL_ADC_Init+0x300>)
 8006e48:	f7ff ff22 	bl	8006c90 <LL_ADC_IsEnabled>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4323      	orrs	r3, r4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d012      	beq.n	8006e84 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e66:	d004      	beq.n	8006e72 <HAL_ADC_Init+0x16e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a62      	ldr	r2, [pc, #392]	; (8006ff8 <HAL_ADC_Init+0x2f4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d101      	bne.n	8006e76 <HAL_ADC_Init+0x172>
 8006e72:	4a65      	ldr	r2, [pc, #404]	; (8007008 <HAL_ADC_Init+0x304>)
 8006e74:	e000      	b.n	8006e78 <HAL_ADC_Init+0x174>
 8006e76:	4a65      	ldr	r2, [pc, #404]	; (800700c <HAL_ADC_Init+0x308>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7ff fd7e 	bl	8006980 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7f5b      	ldrb	r3, [r3, #29]
 8006e88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006e94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006e9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ea2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	045b      	lsls	r3, r3, #17
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	4b4b      	ldr	r3, [pc, #300]	; (8007010 <HAL_ADC_Init+0x30c>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	69b9      	ldr	r1, [r7, #24]
 8006eec:	430b      	orrs	r3, r1
 8006eee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff fed3 	bl	8006cb6 <LL_ADC_REG_IsConversionOngoing>
 8006f10:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff fee0 	bl	8006cdc <LL_ADC_INJ_IsConversionOngoing>
 8006f1c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d17f      	bne.n	8007024 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d17c      	bne.n	8007024 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f2e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f36:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f46:	f023 0302 	bic.w	r3, r3, #2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	69b9      	ldr	r1, [r7, #24]
 8006f50:	430b      	orrs	r3, r1
 8006f52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006f74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6911      	ldr	r1, [r2, #16]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	430b      	orrs	r3, r1
 8006f86:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006f8a:	e013      	b.n	8006fb4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fb0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d12a      	bne.n	8007014 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fc8:	f023 0304 	bic.w	r3, r3, #4
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fd4:	4311      	orrs	r1, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006fda:	4311      	orrs	r1, r2
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	611a      	str	r2, [r3, #16]
 8006fee:	e019      	b.n	8007024 <HAL_ADC_Init+0x320>
 8006ff0:	20000c94 	.word	0x20000c94
 8006ff4:	053e2d63 	.word	0x053e2d63
 8006ff8:	50000100 	.word	0x50000100
 8006ffc:	50000400 	.word	0x50000400
 8007000:	50000500 	.word	0x50000500
 8007004:	50000600 	.word	0x50000600
 8007008:	50000300 	.word	0x50000300
 800700c:	50000700 	.word	0x50000700
 8007010:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10c      	bne.n	8007046 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	f023 010f 	bic.w	r1, r3, #15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	1e5a      	subs	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
 8007044:	e007      	b.n	8007056 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 020f 	bic.w	r2, r2, #15
 8007054:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705a:	f023 0303 	bic.w	r3, r3, #3
 800705e:	f043 0201 	orr.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	65da      	str	r2, [r3, #92]	; 0x5c
 8007066:	e007      	b.n	8007078 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	f043 0210 	orr.w	r2, r3, #16
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007078:	7ffb      	ldrb	r3, [r7, #31]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3724      	adds	r7, #36	; 0x24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd90      	pop	{r4, r7, pc}
 8007082:	bf00      	nop

08007084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b0a6      	sub	sp, #152	; 0x98
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_ADC_ConfigChannel+0x22>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e38e      	b.n	80077c4 <HAL_ADC_ConfigChannel+0x740>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fdff 	bl	8006cb6 <LL_ADC_REG_IsConversionOngoing>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f040 836f 	bne.w	800779e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6859      	ldr	r1, [r3, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	f7ff fd1c 	bl	8006b0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fded 	bl	8006cb6 <LL_ADC_REG_IsConversionOngoing>
 80070dc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fdf9 	bl	8006cdc <LL_ADC_INJ_IsConversionOngoing>
 80070ea:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80070ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f040 817b 	bne.w	80073ee <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 8176 	bne.w	80073ee <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800710a:	d10f      	bne.n	800712c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2200      	movs	r2, #0
 8007116:	4619      	mov	r1, r3
 8007118:	f7ff fd20 	bl	8006b5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fcdd 	bl	8006ae4 <LL_ADC_SetSamplingTimeCommonConfig>
 800712a:	e00e      	b.n	800714a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	6819      	ldr	r1, [r3, #0]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	461a      	mov	r2, r3
 800713a:	f7ff fd0f 	bl	8006b5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fccd 	bl	8006ae4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695a      	ldr	r2, [r3, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b04      	cmp	r3, #4
 800716a:	d022      	beq.n	80071b2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	6919      	ldr	r1, [r3, #16]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800717c:	f7ff fc34 	bl	80069e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	6919      	ldr	r1, [r3, #16]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	461a      	mov	r2, r3
 800718e:	f7ff fc79 	bl	8006a84 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6919      	ldr	r1, [r3, #16]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	7f1b      	ldrb	r3, [r3, #28]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d102      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x124>
 80071a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071a6:	e000      	b.n	80071aa <HAL_ADC_ConfigChannel+0x126>
 80071a8:	2300      	movs	r3, #0
 80071aa:	461a      	mov	r2, r3
 80071ac:	f7ff fc82 	bl	8006ab4 <LL_ADC_SetOffsetSaturation>
 80071b0:	e11d      	b.n	80073ee <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fc37 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 80071be:	4603      	mov	r3, r0
 80071c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10a      	bne.n	80071de <HAL_ADC_ConfigChannel+0x15a>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2100      	movs	r1, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fc2c 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 80071d4:	4603      	mov	r3, r0
 80071d6:	0e9b      	lsrs	r3, r3, #26
 80071d8:	f003 021f 	and.w	r2, r3, #31
 80071dc:	e012      	b.n	8007204 <HAL_ADC_ConfigChannel+0x180>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff fc21 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071f4:	fa93 f3a3 	rbit	r3, r3
 80071f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80071fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071fc:	fab3 f383 	clz	r3, r3
 8007200:	b2db      	uxtb	r3, r3
 8007202:	461a      	mov	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800720c:	2b00      	cmp	r3, #0
 800720e:	d105      	bne.n	800721c <HAL_ADC_ConfigChannel+0x198>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	0e9b      	lsrs	r3, r3, #26
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	e00a      	b.n	8007232 <HAL_ADC_ConfigChannel+0x1ae>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007224:	fa93 f3a3 	rbit	r3, r3
 8007228:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800722a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722c:	fab3 f383 	clz	r3, r3
 8007230:	b2db      	uxtb	r3, r3
 8007232:	429a      	cmp	r2, r3
 8007234:	d106      	bne.n	8007244 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fc08 	bl	8006a54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fbee 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007250:	4603      	mov	r3, r0
 8007252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x1ec>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2101      	movs	r1, #1
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fbe3 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007266:	4603      	mov	r3, r0
 8007268:	0e9b      	lsrs	r3, r3, #26
 800726a:	f003 021f 	and.w	r2, r3, #31
 800726e:	e010      	b.n	8007292 <HAL_ADC_ConfigChannel+0x20e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2101      	movs	r1, #1
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fbd8 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 800727c:	4603      	mov	r3, r0
 800727e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007282:	fa93 f3a3 	rbit	r3, r3
 8007286:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728a:	fab3 f383 	clz	r3, r3
 800728e:	b2db      	uxtb	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800729a:	2b00      	cmp	r3, #0
 800729c:	d105      	bne.n	80072aa <HAL_ADC_ConfigChannel+0x226>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	0e9b      	lsrs	r3, r3, #26
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	e00a      	b.n	80072c0 <HAL_ADC_ConfigChannel+0x23c>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b2:	fa93 f3a3 	rbit	r3, r3
 80072b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80072b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ba:	fab3 f383 	clz	r3, r3
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d106      	bne.n	80072d2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2200      	movs	r2, #0
 80072ca:	2101      	movs	r1, #1
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fbc1 	bl	8006a54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2102      	movs	r1, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff fba7 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 80072de:	4603      	mov	r3, r0
 80072e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <HAL_ADC_ConfigChannel+0x27a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2102      	movs	r1, #2
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fb9c 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 80072f4:	4603      	mov	r3, r0
 80072f6:	0e9b      	lsrs	r3, r3, #26
 80072f8:	f003 021f 	and.w	r2, r3, #31
 80072fc:	e010      	b.n	8007320 <HAL_ADC_ConfigChannel+0x29c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2102      	movs	r1, #2
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fb91 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 800730a:	4603      	mov	r3, r0
 800730c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007310:	fa93 f3a3 	rbit	r3, r3
 8007314:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8007316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007318:	fab3 f383 	clz	r3, r3
 800731c:	b2db      	uxtb	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007328:	2b00      	cmp	r3, #0
 800732a:	d105      	bne.n	8007338 <HAL_ADC_ConfigChannel+0x2b4>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	0e9b      	lsrs	r3, r3, #26
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	e00a      	b.n	800734e <HAL_ADC_ConfigChannel+0x2ca>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007340:	fa93 f3a3 	rbit	r3, r3
 8007344:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007348:	fab3 f383 	clz	r3, r3
 800734c:	b2db      	uxtb	r3, r3
 800734e:	429a      	cmp	r2, r3
 8007350:	d106      	bne.n	8007360 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2200      	movs	r2, #0
 8007358:	2102      	movs	r1, #2
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fb7a 	bl	8006a54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2103      	movs	r1, #3
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fb60 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 800736c:	4603      	mov	r3, r0
 800736e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <HAL_ADC_ConfigChannel+0x308>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2103      	movs	r1, #3
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fb55 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007382:	4603      	mov	r3, r0
 8007384:	0e9b      	lsrs	r3, r3, #26
 8007386:	f003 021f 	and.w	r2, r3, #31
 800738a:	e010      	b.n	80073ae <HAL_ADC_ConfigChannel+0x32a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2103      	movs	r1, #3
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fb4a 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007398:	4603      	mov	r3, r0
 800739a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739e:	fa93 f3a3 	rbit	r3, r3
 80073a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80073a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a6:	fab3 f383 	clz	r3, r3
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d105      	bne.n	80073c6 <HAL_ADC_ConfigChannel+0x342>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	0e9b      	lsrs	r3, r3, #26
 80073c0:	f003 031f 	and.w	r3, r3, #31
 80073c4:	e00a      	b.n	80073dc <HAL_ADC_ConfigChannel+0x358>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ce:	fa93 f3a3 	rbit	r3, r3
 80073d2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80073d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d6:	fab3 f383 	clz	r3, r3
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	429a      	cmp	r2, r3
 80073de:	d106      	bne.n	80073ee <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2200      	movs	r2, #0
 80073e6:	2103      	movs	r1, #3
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff fb33 	bl	8006a54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fc4c 	bl	8006c90 <LL_ADC_IsEnabled>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 810c 	bne.w	8007618 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6819      	ldr	r1, [r3, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	461a      	mov	r2, r3
 800740e:	f7ff fbcd 	bl	8006bac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	4aaf      	ldr	r2, [pc, #700]	; (80076d4 <HAL_ADC_ConfigChannel+0x650>)
 8007418:	4293      	cmp	r3, r2
 800741a:	f040 80fd 	bne.w	8007618 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10b      	bne.n	8007446 <HAL_ADC_ConfigChannel+0x3c2>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	0e9b      	lsrs	r3, r3, #26
 8007434:	3301      	adds	r3, #1
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b09      	cmp	r3, #9
 800743c:	bf94      	ite	ls
 800743e:	2301      	movls	r3, #1
 8007440:	2300      	movhi	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	e012      	b.n	800746c <HAL_ADC_ConfigChannel+0x3e8>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744e:	fa93 f3a3 	rbit	r3, r3
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8007454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007456:	fab3 f383 	clz	r3, r3
 800745a:	b2db      	uxtb	r3, r3
 800745c:	3301      	adds	r3, #1
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	2b09      	cmp	r3, #9
 8007464:	bf94      	ite	ls
 8007466:	2301      	movls	r3, #1
 8007468:	2300      	movhi	r3, #0
 800746a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800746c:	2b00      	cmp	r3, #0
 800746e:	d064      	beq.n	800753a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007478:	2b00      	cmp	r3, #0
 800747a:	d107      	bne.n	800748c <HAL_ADC_ConfigChannel+0x408>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	0e9b      	lsrs	r3, r3, #26
 8007482:	3301      	adds	r3, #1
 8007484:	069b      	lsls	r3, r3, #26
 8007486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800748a:	e00e      	b.n	80074aa <HAL_ADC_ConfigChannel+0x426>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	fa93 f3a3 	rbit	r3, r3
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	fab3 f383 	clz	r3, r3
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	3301      	adds	r3, #1
 80074a4:	069b      	lsls	r3, r3, #26
 80074a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_ADC_ConfigChannel+0x446>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	0e9b      	lsrs	r3, r3, #26
 80074bc:	3301      	adds	r3, #1
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	2101      	movs	r1, #1
 80074c4:	fa01 f303 	lsl.w	r3, r1, r3
 80074c8:	e010      	b.n	80074ec <HAL_ADC_ConfigChannel+0x468>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	fa93 f3a3 	rbit	r3, r3
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	fab3 f383 	clz	r3, r3
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	3301      	adds	r3, #1
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	2101      	movs	r1, #1
 80074e8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ec:	ea42 0103 	orr.w	r1, r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x48e>
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	0e9b      	lsrs	r3, r3, #26
 8007502:	3301      	adds	r3, #1
 8007504:	f003 021f 	and.w	r2, r3, #31
 8007508:	4613      	mov	r3, r2
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	4413      	add	r3, r2
 800750e:	051b      	lsls	r3, r3, #20
 8007510:	e011      	b.n	8007536 <HAL_ADC_ConfigChannel+0x4b2>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	fa93 f3a3 	rbit	r3, r3
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	fab3 f383 	clz	r3, r3
 8007526:	b2db      	uxtb	r3, r3
 8007528:	3301      	adds	r3, #1
 800752a:	f003 021f 	and.w	r2, r3, #31
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007536:	430b      	orrs	r3, r1
 8007538:	e069      	b.n	800760e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007542:	2b00      	cmp	r3, #0
 8007544:	d107      	bne.n	8007556 <HAL_ADC_ConfigChannel+0x4d2>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	0e9b      	lsrs	r3, r3, #26
 800754c:	3301      	adds	r3, #1
 800754e:	069b      	lsls	r3, r3, #26
 8007550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007554:	e00e      	b.n	8007574 <HAL_ADC_ConfigChannel+0x4f0>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	fa93 f3a3 	rbit	r3, r3
 8007562:	61fb      	str	r3, [r7, #28]
  return result;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	fab3 f383 	clz	r3, r3
 800756a:	b2db      	uxtb	r3, r3
 800756c:	3301      	adds	r3, #1
 800756e:	069b      	lsls	r3, r3, #26
 8007570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800757c:	2b00      	cmp	r3, #0
 800757e:	d109      	bne.n	8007594 <HAL_ADC_ConfigChannel+0x510>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	0e9b      	lsrs	r3, r3, #26
 8007586:	3301      	adds	r3, #1
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f303 	lsl.w	r3, r1, r3
 8007592:	e010      	b.n	80075b6 <HAL_ADC_ConfigChannel+0x532>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	fa93 f3a3 	rbit	r3, r3
 80075a0:	617b      	str	r3, [r7, #20]
  return result;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	fab3 f383 	clz	r3, r3
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	3301      	adds	r3, #1
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2101      	movs	r1, #1
 80075b2:	fa01 f303 	lsl.w	r3, r1, r3
 80075b6:	ea42 0103 	orr.w	r1, r2, r3
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10d      	bne.n	80075e2 <HAL_ADC_ConfigChannel+0x55e>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	0e9b      	lsrs	r3, r3, #26
 80075cc:	3301      	adds	r3, #1
 80075ce:	f003 021f 	and.w	r2, r3, #31
 80075d2:	4613      	mov	r3, r2
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	4413      	add	r3, r2
 80075d8:	3b1e      	subs	r3, #30
 80075da:	051b      	lsls	r3, r3, #20
 80075dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075e0:	e014      	b.n	800760c <HAL_ADC_ConfigChannel+0x588>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	fa93 f3a3 	rbit	r3, r3
 80075ee:	60fb      	str	r3, [r7, #12]
  return result;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	fab3 f383 	clz	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	3301      	adds	r3, #1
 80075fa:	f003 021f 	and.w	r2, r3, #31
 80075fe:	4613      	mov	r3, r2
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4413      	add	r3, r2
 8007604:	3b1e      	subs	r3, #30
 8007606:	051b      	lsls	r3, r3, #20
 8007608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800760c:	430b      	orrs	r3, r1
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	6892      	ldr	r2, [r2, #8]
 8007612:	4619      	mov	r1, r3
 8007614:	f7ff faa2 	bl	8006b5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b2e      	ldr	r3, [pc, #184]	; (80076d8 <HAL_ADC_ConfigChannel+0x654>)
 800761e:	4013      	ands	r3, r2
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80c9 	beq.w	80077b8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762e:	d004      	beq.n	800763a <HAL_ADC_ConfigChannel+0x5b6>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a29      	ldr	r2, [pc, #164]	; (80076dc <HAL_ADC_ConfigChannel+0x658>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d101      	bne.n	800763e <HAL_ADC_ConfigChannel+0x5ba>
 800763a:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <HAL_ADC_ConfigChannel+0x65c>)
 800763c:	e000      	b.n	8007640 <HAL_ADC_ConfigChannel+0x5bc>
 800763e:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <HAL_ADC_ConfigChannel+0x660>)
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff f9c3 	bl	80069cc <LL_ADC_GetCommonPathInternalCh>
 8007646:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a26      	ldr	r2, [pc, #152]	; (80076e8 <HAL_ADC_ConfigChannel+0x664>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_ADC_ConfigChannel+0x5da>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a24      	ldr	r2, [pc, #144]	; (80076ec <HAL_ADC_ConfigChannel+0x668>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d14e      	bne.n	80076fc <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800765e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d148      	bne.n	80076fc <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007672:	d005      	beq.n	8007680 <HAL_ADC_ConfigChannel+0x5fc>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <HAL_ADC_ConfigChannel+0x66c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	f040 8099 	bne.w	80077b2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007688:	d004      	beq.n	8007694 <HAL_ADC_ConfigChannel+0x610>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a13      	ldr	r2, [pc, #76]	; (80076dc <HAL_ADC_ConfigChannel+0x658>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d101      	bne.n	8007698 <HAL_ADC_ConfigChannel+0x614>
 8007694:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <HAL_ADC_ConfigChannel+0x65c>)
 8007696:	e000      	b.n	800769a <HAL_ADC_ConfigChannel+0x616>
 8007698:	4a12      	ldr	r2, [pc, #72]	; (80076e4 <HAL_ADC_ConfigChannel+0x660>)
 800769a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800769e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7ff f97e 	bl	80069a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80076aa:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <HAL_ADC_ConfigChannel+0x670>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	099b      	lsrs	r3, r3, #6
 80076b0:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <HAL_ADC_ConfigChannel+0x674>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	099a      	lsrs	r2, r3, #6
 80076b8:	4613      	mov	r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80076c2:	e002      	b.n	80076ca <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f9      	bne.n	80076c4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076d0:	e06f      	b.n	80077b2 <HAL_ADC_ConfigChannel+0x72e>
 80076d2:	bf00      	nop
 80076d4:	407f0000 	.word	0x407f0000
 80076d8:	80080000 	.word	0x80080000
 80076dc:	50000100 	.word	0x50000100
 80076e0:	50000300 	.word	0x50000300
 80076e4:	50000700 	.word	0x50000700
 80076e8:	c3210000 	.word	0xc3210000
 80076ec:	90c00010 	.word	0x90c00010
 80076f0:	50000600 	.word	0x50000600
 80076f4:	20000c94 	.word	0x20000c94
 80076f8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a32      	ldr	r2, [pc, #200]	; (80077cc <HAL_ADC_ConfigChannel+0x748>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d125      	bne.n	8007752 <HAL_ADC_ConfigChannel+0x6ce>
 8007706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800770a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11f      	bne.n	8007752 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2e      	ldr	r2, [pc, #184]	; (80077d0 <HAL_ADC_ConfigChannel+0x74c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d104      	bne.n	8007726 <HAL_ADC_ConfigChannel+0x6a2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2c      	ldr	r2, [pc, #176]	; (80077d4 <HAL_ADC_ConfigChannel+0x750>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d047      	beq.n	80077b6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800772e:	d004      	beq.n	800773a <HAL_ADC_ConfigChannel+0x6b6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a26      	ldr	r2, [pc, #152]	; (80077d0 <HAL_ADC_ConfigChannel+0x74c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d101      	bne.n	800773e <HAL_ADC_ConfigChannel+0x6ba>
 800773a:	4a27      	ldr	r2, [pc, #156]	; (80077d8 <HAL_ADC_ConfigChannel+0x754>)
 800773c:	e000      	b.n	8007740 <HAL_ADC_ConfigChannel+0x6bc>
 800773e:	4a27      	ldr	r2, [pc, #156]	; (80077dc <HAL_ADC_ConfigChannel+0x758>)
 8007740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7ff f92b 	bl	80069a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007750:	e031      	b.n	80077b6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a22      	ldr	r2, [pc, #136]	; (80077e0 <HAL_ADC_ConfigChannel+0x75c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d12d      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800775c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d127      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <HAL_ADC_ConfigChannel+0x74c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d022      	beq.n	80077b8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800777a:	d004      	beq.n	8007786 <HAL_ADC_ConfigChannel+0x702>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a13      	ldr	r2, [pc, #76]	; (80077d0 <HAL_ADC_ConfigChannel+0x74c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <HAL_ADC_ConfigChannel+0x706>
 8007786:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <HAL_ADC_ConfigChannel+0x754>)
 8007788:	e000      	b.n	800778c <HAL_ADC_ConfigChannel+0x708>
 800778a:	4a14      	ldr	r2, [pc, #80]	; (80077dc <HAL_ADC_ConfigChannel+0x758>)
 800778c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007794:	4619      	mov	r1, r3
 8007796:	4610      	mov	r0, r2
 8007798:	f7ff f905 	bl	80069a6 <LL_ADC_SetCommonPathInternalCh>
 800779c:	e00c      	b.n	80077b8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80077b0:	e002      	b.n	80077b8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80077b6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80077c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3798      	adds	r7, #152	; 0x98
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	c7520000 	.word	0xc7520000
 80077d0:	50000100 	.word	0x50000100
 80077d4:	50000500 	.word	0x50000500
 80077d8:	50000300 	.word	0x50000300
 80077dc:	50000700 	.word	0x50000700
 80077e0:	cb840000 	.word	0xcb840000

080077e4 <LL_ADC_IsEnabled>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <LL_ADC_IsEnabled+0x18>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <LL_ADC_IsEnabled+0x1a>
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <LL_ADC_REG_IsConversionOngoing>:
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b04      	cmp	r3, #4
 800781c:	d101      	bne.n	8007822 <LL_ADC_REG_IsConversionOngoing+0x18>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007830:	b590      	push	{r4, r7, lr}
 8007832:	b0a1      	sub	sp, #132	; 0x84
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800784a:	2302      	movs	r3, #2
 800784c:	e0e3      	b.n	8007a16 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800785e:	d102      	bne.n	8007866 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8007860:	4b6f      	ldr	r3, [pc, #444]	; (8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007862:	60bb      	str	r3, [r7, #8]
 8007864:	e009      	b.n	800787a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a6e      	ldr	r2, [pc, #440]	; (8007a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d102      	bne.n	8007876 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007870:	4b6d      	ldr	r3, [pc, #436]	; (8007a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	e001      	b.n	800787a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8007876:	2300      	movs	r3, #0
 8007878:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007884:	f043 0220 	orr.w	r2, r3, #32
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e0be      	b.n	8007a16 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff ffb5 	bl	800780a <LL_ADC_REG_IsConversionOngoing>
 80078a0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff ffaf 	bl	800780a <LL_ADC_REG_IsConversionOngoing>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f040 80a0 	bne.w	80079f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80078b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 809c 	bne.w	80079f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c4:	d004      	beq.n	80078d0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a55      	ldr	r2, [pc, #340]	; (8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d101      	bne.n	80078d4 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80078d0:	4b56      	ldr	r3, [pc, #344]	; (8007a2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80078d2:	e000      	b.n	80078d6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80078d4:	4b56      	ldr	r3, [pc, #344]	; (8007a30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80078d6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d04b      	beq.n	8007978 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80078e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	6859      	ldr	r1, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078f2:	035b      	lsls	r3, r3, #13
 80078f4:	430b      	orrs	r3, r1
 80078f6:	431a      	orrs	r2, r3
 80078f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007904:	d004      	beq.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a45      	ldr	r2, [pc, #276]	; (8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10f      	bne.n	8007930 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007910:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007914:	f7ff ff66 	bl	80077e4 <LL_ADC_IsEnabled>
 8007918:	4604      	mov	r4, r0
 800791a:	4841      	ldr	r0, [pc, #260]	; (8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800791c:	f7ff ff62 	bl	80077e4 <LL_ADC_IsEnabled>
 8007920:	4603      	mov	r3, r0
 8007922:	4323      	orrs	r3, r4
 8007924:	2b00      	cmp	r3, #0
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	e012      	b.n	8007956 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8007930:	483c      	ldr	r0, [pc, #240]	; (8007a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007932:	f7ff ff57 	bl	80077e4 <LL_ADC_IsEnabled>
 8007936:	4604      	mov	r4, r0
 8007938:	483b      	ldr	r0, [pc, #236]	; (8007a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800793a:	f7ff ff53 	bl	80077e4 <LL_ADC_IsEnabled>
 800793e:	4603      	mov	r3, r0
 8007940:	431c      	orrs	r4, r3
 8007942:	483c      	ldr	r0, [pc, #240]	; (8007a34 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007944:	f7ff ff4e 	bl	80077e4 <LL_ADC_IsEnabled>
 8007948:	4603      	mov	r3, r0
 800794a:	4323      	orrs	r3, r4
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d056      	beq.n	8007a08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800795a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007962:	f023 030f 	bic.w	r3, r3, #15
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	6811      	ldr	r1, [r2, #0]
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	6892      	ldr	r2, [r2, #8]
 800796e:	430a      	orrs	r2, r1
 8007970:	431a      	orrs	r2, r3
 8007972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007974:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007976:	e047      	b.n	8007a08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007982:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800798c:	d004      	beq.n	8007998 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a23      	ldr	r2, [pc, #140]	; (8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d10f      	bne.n	80079b8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8007998:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800799c:	f7ff ff22 	bl	80077e4 <LL_ADC_IsEnabled>
 80079a0:	4604      	mov	r4, r0
 80079a2:	481f      	ldr	r0, [pc, #124]	; (8007a20 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80079a4:	f7ff ff1e 	bl	80077e4 <LL_ADC_IsEnabled>
 80079a8:	4603      	mov	r3, r0
 80079aa:	4323      	orrs	r3, r4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	e012      	b.n	80079de <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80079b8:	481a      	ldr	r0, [pc, #104]	; (8007a24 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80079ba:	f7ff ff13 	bl	80077e4 <LL_ADC_IsEnabled>
 80079be:	4604      	mov	r4, r0
 80079c0:	4819      	ldr	r0, [pc, #100]	; (8007a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079c2:	f7ff ff0f 	bl	80077e4 <LL_ADC_IsEnabled>
 80079c6:	4603      	mov	r3, r0
 80079c8:	431c      	orrs	r4, r3
 80079ca:	481a      	ldr	r0, [pc, #104]	; (8007a34 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80079cc:	f7ff ff0a 	bl	80077e4 <LL_ADC_IsEnabled>
 80079d0:	4603      	mov	r3, r0
 80079d2:	4323      	orrs	r3, r4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d012      	beq.n	8007a08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80079e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80079ea:	f023 030f 	bic.w	r3, r3, #15
 80079ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80079f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80079f2:	e009      	b.n	8007a08 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f8:	f043 0220 	orr.w	r2, r3, #32
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007a06:	e000      	b.n	8007a0a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007a08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007a12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3784      	adds	r7, #132	; 0x84
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd90      	pop	{r4, r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	50000100 	.word	0x50000100
 8007a24:	50000400 	.word	0x50000400
 8007a28:	50000500 	.word	0x50000500
 8007a2c:	50000300 	.word	0x50000300
 8007a30:	50000700 	.word	0x50000700
 8007a34:	50000600 	.word	0x50000600

08007a38 <LL_EXTI_EnableIT_0_31>:
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <LL_EXTI_EnableIT_0_31+0x20>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	4904      	ldr	r1, [pc, #16]	; (8007a58 <LL_EXTI_EnableIT_0_31+0x20>)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	600b      	str	r3, [r1, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	40010400 	.word	0x40010400

08007a5c <LL_EXTI_EnableIT_32_63>:
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <LL_EXTI_EnableIT_32_63+0x20>)
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	4904      	ldr	r1, [pc, #16]	; (8007a7c <LL_EXTI_EnableIT_32_63+0x20>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	620b      	str	r3, [r1, #32]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	40010400 	.word	0x40010400

08007a80 <LL_EXTI_DisableIT_0_31>:
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007a88:	4b06      	ldr	r3, [pc, #24]	; (8007aa4 <LL_EXTI_DisableIT_0_31+0x24>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	4904      	ldr	r1, [pc, #16]	; (8007aa4 <LL_EXTI_DisableIT_0_31+0x24>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	600b      	str	r3, [r1, #0]
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40010400 	.word	0x40010400

08007aa8 <LL_EXTI_DisableIT_32_63>:
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007ab0:	4b06      	ldr	r3, [pc, #24]	; (8007acc <LL_EXTI_DisableIT_32_63+0x24>)
 8007ab2:	6a1a      	ldr	r2, [r3, #32]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	4904      	ldr	r1, [pc, #16]	; (8007acc <LL_EXTI_DisableIT_32_63+0x24>)
 8007aba:	4013      	ands	r3, r2
 8007abc:	620b      	str	r3, [r1, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40010400 	.word	0x40010400

08007ad0 <LL_EXTI_EnableEvent_0_31>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	4904      	ldr	r1, [pc, #16]	; (8007af0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	604b      	str	r3, [r1, #4]
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	40010400 	.word	0x40010400

08007af4 <LL_EXTI_EnableEvent_32_63>:
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b00:	4904      	ldr	r1, [pc, #16]	; (8007b14 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	40010400 	.word	0x40010400

08007b18 <LL_EXTI_DisableEvent_0_31>:
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007b20:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	43db      	mvns	r3, r3
 8007b28:	4904      	ldr	r1, [pc, #16]	; (8007b3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	604b      	str	r3, [r1, #4]
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40010400 	.word	0x40010400

08007b40 <LL_EXTI_DisableEvent_32_63>:
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007b48:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	4904      	ldr	r1, [pc, #16]	; (8007b64 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40010400 	.word	0x40010400

08007b68 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	4904      	ldr	r1, [pc, #16]	; (8007b88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	608b      	str	r3, [r1, #8]
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40010400 	.word	0x40010400

08007b8c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b98:	4904      	ldr	r1, [pc, #16]	; (8007bac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	40010400 	.word	0x40010400

08007bb0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007bb8:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	4904      	ldr	r1, [pc, #16]	; (8007bd4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40010400 	.word	0x40010400

08007bd8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	43db      	mvns	r3, r3
 8007be8:	4904      	ldr	r1, [pc, #16]	; (8007bfc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007bea:	4013      	ands	r3, r2
 8007bec:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	40010400 	.word	0x40010400

08007c00 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007c08:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	4904      	ldr	r1, [pc, #16]	; (8007c20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60cb      	str	r3, [r1, #12]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	40010400 	.word	0x40010400

08007c24 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c30:	4904      	ldr	r1, [pc, #16]	; (8007c44 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40010400 	.word	0x40010400

08007c48 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	43db      	mvns	r3, r3
 8007c58:	4904      	ldr	r1, [pc, #16]	; (8007c6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60cb      	str	r3, [r1, #12]
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40010400 	.word	0x40010400

08007c70 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	4904      	ldr	r1, [pc, #16]	; (8007c94 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40010400 	.word	0x40010400

08007c98 <LL_EXTI_ClearFlag_0_31>:
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007ca0:	4a04      	ldr	r2, [pc, #16]	; (8007cb4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6153      	str	r3, [r2, #20]
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	40010400 	.word	0x40010400

08007cb8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8007cc0:	4a04      	ldr	r2, [pc, #16]	; (8007cd4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40010400 	.word	0x40010400

08007cd8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d102      	bne.n	8007cf4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e180      	b.n	8007ff6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d02:	d102      	bne.n	8007d0a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e175      	b.n	8007ff6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7f5b      	ldrb	r3, [r3, #29]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d108      	bne.n	8007d26 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fd f8dd 	bl	8004ee0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d30:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	4b98      	ldr	r3, [pc, #608]	; (8007fb8 <HAL_COMP_Init+0x2e0>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	6979      	ldr	r1, [r7, #20]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d015      	beq.n	8007d9e <HAL_COMP_Init+0xc6>
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d112      	bne.n	8007d9e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007d78:	4b90      	ldr	r3, [pc, #576]	; (8007fbc <HAL_COMP_Init+0x2e4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	099b      	lsrs	r3, r3, #6
 8007d7e:	4a90      	ldr	r2, [pc, #576]	; (8007fc0 <HAL_COMP_Init+0x2e8>)
 8007d80:	fba2 2303 	umull	r2, r3, r2, r3
 8007d84:	099a      	lsrs	r2, r3, #6
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d90:	e002      	b.n	8007d98 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1f9      	bne.n	8007d92 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a88      	ldr	r2, [pc, #544]	; (8007fc4 <HAL_COMP_Init+0x2ec>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d028      	beq.n	8007dfa <HAL_COMP_Init+0x122>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a86      	ldr	r2, [pc, #536]	; (8007fc8 <HAL_COMP_Init+0x2f0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d020      	beq.n	8007df4 <HAL_COMP_Init+0x11c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a85      	ldr	r2, [pc, #532]	; (8007fcc <HAL_COMP_Init+0x2f4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d018      	beq.n	8007dee <HAL_COMP_Init+0x116>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a83      	ldr	r2, [pc, #524]	; (8007fd0 <HAL_COMP_Init+0x2f8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d010      	beq.n	8007de8 <HAL_COMP_Init+0x110>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a82      	ldr	r2, [pc, #520]	; (8007fd4 <HAL_COMP_Init+0x2fc>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d008      	beq.n	8007de2 <HAL_COMP_Init+0x10a>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a80      	ldr	r2, [pc, #512]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d101      	bne.n	8007dde <HAL_COMP_Init+0x106>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e00f      	b.n	8007dfe <HAL_COMP_Init+0x126>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e00d      	b.n	8007dfe <HAL_COMP_Init+0x126>
 8007de2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007de6:	e00a      	b.n	8007dfe <HAL_COMP_Init+0x126>
 8007de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dec:	e007      	b.n	8007dfe <HAL_COMP_Init+0x126>
 8007dee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007df2:	e004      	b.n	8007dfe <HAL_COMP_Init+0x126>
 8007df4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007df8:	e001      	b.n	8007dfe <HAL_COMP_Init+0x126>
 8007dfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007dfe:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 80b6 	beq.w	8007f7a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f003 0310 	and.w	r3, r3, #16
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d011      	beq.n	8007e3e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a6e      	ldr	r2, [pc, #440]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d004      	beq.n	8007e2e <HAL_COMP_Init+0x156>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a6c      	ldr	r2, [pc, #432]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d103      	bne.n	8007e36 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8007e2e:	6938      	ldr	r0, [r7, #16]
 8007e30:	f7ff feac 	bl	8007b8c <LL_EXTI_EnableRisingTrig_32_63>
 8007e34:	e014      	b.n	8007e60 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007e36:	6938      	ldr	r0, [r7, #16]
 8007e38:	f7ff fe96 	bl	8007b68 <LL_EXTI_EnableRisingTrig_0_31>
 8007e3c:	e010      	b.n	8007e60 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a65      	ldr	r2, [pc, #404]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d004      	beq.n	8007e52 <HAL_COMP_Init+0x17a>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a63      	ldr	r2, [pc, #396]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d103      	bne.n	8007e5a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8007e52:	6938      	ldr	r0, [r7, #16]
 8007e54:	f7ff fec0 	bl	8007bd8 <LL_EXTI_DisableRisingTrig_32_63>
 8007e58:	e002      	b.n	8007e60 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007e5a:	6938      	ldr	r0, [r7, #16]
 8007e5c:	f7ff fea8 	bl	8007bb0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d011      	beq.n	8007e90 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a59      	ldr	r2, [pc, #356]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_COMP_Init+0x1a8>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a58      	ldr	r2, [pc, #352]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d103      	bne.n	8007e88 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8007e80:	6938      	ldr	r0, [r7, #16]
 8007e82:	f7ff fecf 	bl	8007c24 <LL_EXTI_EnableFallingTrig_32_63>
 8007e86:	e014      	b.n	8007eb2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007e88:	6938      	ldr	r0, [r7, #16]
 8007e8a:	f7ff feb9 	bl	8007c00 <LL_EXTI_EnableFallingTrig_0_31>
 8007e8e:	e010      	b.n	8007eb2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a50      	ldr	r2, [pc, #320]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d004      	beq.n	8007ea4 <HAL_COMP_Init+0x1cc>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a4f      	ldr	r2, [pc, #316]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d103      	bne.n	8007eac <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8007ea4:	6938      	ldr	r0, [r7, #16]
 8007ea6:	f7ff fee3 	bl	8007c70 <LL_EXTI_DisableFallingTrig_32_63>
 8007eaa:	e002      	b.n	8007eb2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007eac:	6938      	ldr	r0, [r7, #16]
 8007eae:	f7ff fecb 	bl	8007c48 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a48      	ldr	r2, [pc, #288]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_COMP_Init+0x1ee>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a46      	ldr	r2, [pc, #280]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d103      	bne.n	8007ece <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8007ec6:	6938      	ldr	r0, [r7, #16]
 8007ec8:	f7ff fef6 	bl	8007cb8 <LL_EXTI_ClearFlag_32_63>
 8007ecc:	e002      	b.n	8007ed4 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8007ece:	6938      	ldr	r0, [r7, #16]
 8007ed0:	f7ff fee2 	bl	8007c98 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d011      	beq.n	8007f04 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a3c      	ldr	r2, [pc, #240]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d004      	beq.n	8007ef4 <HAL_COMP_Init+0x21c>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a3b      	ldr	r2, [pc, #236]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d103      	bne.n	8007efc <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8007ef4:	6938      	ldr	r0, [r7, #16]
 8007ef6:	f7ff fdfd 	bl	8007af4 <LL_EXTI_EnableEvent_32_63>
 8007efa:	e014      	b.n	8007f26 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8007efc:	6938      	ldr	r0, [r7, #16]
 8007efe:	f7ff fde7 	bl	8007ad0 <LL_EXTI_EnableEvent_0_31>
 8007f02:	e010      	b.n	8007f26 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a33      	ldr	r2, [pc, #204]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <HAL_COMP_Init+0x240>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a32      	ldr	r2, [pc, #200]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d103      	bne.n	8007f20 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8007f18:	6938      	ldr	r0, [r7, #16]
 8007f1a:	f7ff fe11 	bl	8007b40 <LL_EXTI_DisableEvent_32_63>
 8007f1e:	e002      	b.n	8007f26 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8007f20:	6938      	ldr	r0, [r7, #16]
 8007f22:	f7ff fdf9 	bl	8007b18 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d011      	beq.n	8007f56 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a28      	ldr	r2, [pc, #160]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_COMP_Init+0x26e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d103      	bne.n	8007f4e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8007f46:	6938      	ldr	r0, [r7, #16]
 8007f48:	f7ff fd88 	bl	8007a5c <LL_EXTI_EnableIT_32_63>
 8007f4c:	e04b      	b.n	8007fe6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8007f4e:	6938      	ldr	r0, [r7, #16]
 8007f50:	f7ff fd72 	bl	8007a38 <LL_EXTI_EnableIT_0_31>
 8007f54:	e047      	b.n	8007fe6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a1f      	ldr	r2, [pc, #124]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <HAL_COMP_Init+0x292>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1d      	ldr	r2, [pc, #116]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d103      	bne.n	8007f72 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8007f6a:	6938      	ldr	r0, [r7, #16]
 8007f6c:	f7ff fd9c 	bl	8007aa8 <LL_EXTI_DisableIT_32_63>
 8007f70:	e039      	b.n	8007fe6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8007f72:	6938      	ldr	r0, [r7, #16]
 8007f74:	f7ff fd84 	bl	8007a80 <LL_EXTI_DisableIT_0_31>
 8007f78:	e035      	b.n	8007fe6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a16      	ldr	r2, [pc, #88]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d004      	beq.n	8007f8e <HAL_COMP_Init+0x2b6>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d103      	bne.n	8007f96 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8007f8e:	6938      	ldr	r0, [r7, #16]
 8007f90:	f7ff fdd6 	bl	8007b40 <LL_EXTI_DisableEvent_32_63>
 8007f94:	e002      	b.n	8007f9c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f7ff fdbe 	bl	8007b18 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a0d      	ldr	r2, [pc, #52]	; (8007fd8 <HAL_COMP_Init+0x300>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_COMP_Init+0x2d8>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a0c      	ldr	r2, [pc, #48]	; (8007fdc <HAL_COMP_Init+0x304>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d117      	bne.n	8007fe0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8007fb0:	6938      	ldr	r0, [r7, #16]
 8007fb2:	f7ff fd79 	bl	8007aa8 <LL_EXTI_DisableIT_32_63>
 8007fb6:	e016      	b.n	8007fe6 <HAL_COMP_Init+0x30e>
 8007fb8:	ff007e0f 	.word	0xff007e0f
 8007fbc:	20000c94 	.word	0x20000c94
 8007fc0:	053e2d63 	.word	0x053e2d63
 8007fc4:	40010200 	.word	0x40010200
 8007fc8:	40010204 	.word	0x40010204
 8007fcc:	40010208 	.word	0x40010208
 8007fd0:	4001020c 	.word	0x4001020c
 8007fd4:	40010210 	.word	0x40010210
 8007fd8:	40010214 	.word	0x40010214
 8007fdc:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007fe0:	6938      	ldr	r0, [r7, #16]
 8007fe2:	f7ff fd4d 	bl	8007a80 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	7f5b      	ldrb	r3, [r3, #29]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8007ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <__NVIC_SetPriorityGrouping>:
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008010:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <__NVIC_SetPriorityGrouping+0x44>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800801c:	4013      	ands	r3, r2
 800801e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800802c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008032:	4a04      	ldr	r2, [pc, #16]	; (8008044 <__NVIC_SetPriorityGrouping+0x44>)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	60d3      	str	r3, [r2, #12]
}
 8008038:	bf00      	nop
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	e000ed00 	.word	0xe000ed00

08008048 <__NVIC_GetPriorityGrouping>:
{
 8008048:	b480      	push	{r7}
 800804a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800804c:	4b04      	ldr	r3, [pc, #16]	; (8008060 <__NVIC_GetPriorityGrouping+0x18>)
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	0a1b      	lsrs	r3, r3, #8
 8008052:	f003 0307 	and.w	r3, r3, #7
}
 8008056:	4618      	mov	r0, r3
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	e000ed00 	.word	0xe000ed00

08008064 <__NVIC_EnableIRQ>:
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800806e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008072:	2b00      	cmp	r3, #0
 8008074:	db0b      	blt.n	800808e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	f003 021f 	and.w	r2, r3, #31
 800807c:	4907      	ldr	r1, [pc, #28]	; (800809c <__NVIC_EnableIRQ+0x38>)
 800807e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	2001      	movs	r0, #1
 8008086:	fa00 f202 	lsl.w	r2, r0, r2
 800808a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	e000e100 	.word	0xe000e100

080080a0 <__NVIC_SetPriority>:
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	6039      	str	r1, [r7, #0]
 80080aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	db0a      	blt.n	80080ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	490c      	ldr	r1, [pc, #48]	; (80080ec <__NVIC_SetPriority+0x4c>)
 80080ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080be:	0112      	lsls	r2, r2, #4
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	440b      	add	r3, r1
 80080c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080c8:	e00a      	b.n	80080e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	4908      	ldr	r1, [pc, #32]	; (80080f0 <__NVIC_SetPriority+0x50>)
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	f003 030f 	and.w	r3, r3, #15
 80080d6:	3b04      	subs	r3, #4
 80080d8:	0112      	lsls	r2, r2, #4
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	440b      	add	r3, r1
 80080de:	761a      	strb	r2, [r3, #24]
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	e000e100 	.word	0xe000e100
 80080f0:	e000ed00 	.word	0xe000ed00

080080f4 <NVIC_EncodePriority>:
{
 80080f4:	b480      	push	{r7}
 80080f6:	b089      	sub	sp, #36	; 0x24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f1c3 0307 	rsb	r3, r3, #7
 800810e:	2b04      	cmp	r3, #4
 8008110:	bf28      	it	cs
 8008112:	2304      	movcs	r3, #4
 8008114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	3304      	adds	r3, #4
 800811a:	2b06      	cmp	r3, #6
 800811c:	d902      	bls.n	8008124 <NVIC_EncodePriority+0x30>
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	3b03      	subs	r3, #3
 8008122:	e000      	b.n	8008126 <NVIC_EncodePriority+0x32>
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	43da      	mvns	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	401a      	ands	r2, r3
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800813c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	fa01 f303 	lsl.w	r3, r1, r3
 8008146:	43d9      	mvns	r1, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800814c:	4313      	orrs	r3, r2
}
 800814e:	4618      	mov	r0, r3
 8008150:	3724      	adds	r7, #36	; 0x24
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <SysTick_Config>:
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3b01      	subs	r3, #1
 8008168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800816c:	d301      	bcc.n	8008172 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800816e:	2301      	movs	r3, #1
 8008170:	e00f      	b.n	8008192 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008172:	4a0a      	ldr	r2, [pc, #40]	; (800819c <SysTick_Config+0x40>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3b01      	subs	r3, #1
 8008178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800817a:	210f      	movs	r1, #15
 800817c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008180:	f7ff ff8e 	bl	80080a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <SysTick_Config+0x40>)
 8008186:	2200      	movs	r2, #0
 8008188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800818a:	4b04      	ldr	r3, [pc, #16]	; (800819c <SysTick_Config+0x40>)
 800818c:	2207      	movs	r2, #7
 800818e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	e000e010 	.word	0xe000e010

080081a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ff29 	bl	8008000 <__NVIC_SetPriorityGrouping>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	4603      	mov	r3, r0
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80081c4:	f7ff ff40 	bl	8008048 <__NVIC_GetPriorityGrouping>
 80081c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	6978      	ldr	r0, [r7, #20]
 80081d0:	f7ff ff90 	bl	80080f4 <NVIC_EncodePriority>
 80081d4:	4602      	mov	r2, r0
 80081d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff ff5f 	bl	80080a0 <__NVIC_SetPriority>
}
 80081e2:	bf00      	nop
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	4603      	mov	r3, r0
 80081f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7ff ff33 	bl	8008064 <__NVIC_EnableIRQ>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff ffa4 	bl	800815c <SysTick_Config>
 8008214:	4603      	mov	r3, r0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b082      	sub	sp, #8
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e014      	b.n	800825a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	791b      	ldrb	r3, [r3, #4]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fc ff03 	bl	800504c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	795b      	ldrb	r3, [r3, #5]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d101      	bne.n	8008278 <HAL_DAC_Start+0x16>
 8008274:	2302      	movs	r3, #2
 8008276:	e043      	b.n	8008300 <HAL_DAC_Start+0x9e>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6819      	ldr	r1, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2201      	movs	r2, #1
 8008292:	409a      	lsls	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800829c:	2001      	movs	r0, #1
 800829e:	f7fe fb4d 	bl	800693c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10f      	bne.n	80082c8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d11d      	bne.n	80082f2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	605a      	str	r2, [r3, #4]
 80082c6:	e014      	b.n	80082f2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	f003 0310 	and.w	r3, r3, #16
 80082d8:	2102      	movs	r1, #2
 80082da:	fa01 f303 	lsl.w	r3, r1, r3
 80082de:	429a      	cmp	r2, r3
 80082e0:	d107      	bne.n	80082f2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0202 	orr.w	r2, r2, #2
 80082f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	795b      	ldrb	r3, [r3, #5]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_DAC_Start_DMA+0x1e>
 8008322:	2302      	movs	r3, #2
 8008324:	e0a1      	b.n	800846a <HAL_DAC_Start_DMA+0x162>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2201      	movs	r2, #1
 800832a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2202      	movs	r2, #2
 8008330:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d12a      	bne.n	800838e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	4a4d      	ldr	r2, [pc, #308]	; (8008474 <HAL_DAC_Start_DMA+0x16c>)
 800833e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	4a4c      	ldr	r2, [pc, #304]	; (8008478 <HAL_DAC_Start_DMA+0x170>)
 8008346:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4a4b      	ldr	r2, [pc, #300]	; (800847c <HAL_DAC_Start_DMA+0x174>)
 800834e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800835e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	2b04      	cmp	r3, #4
 8008364:	d009      	beq.n	800837a <HAL_DAC_Start_DMA+0x72>
 8008366:	2b08      	cmp	r3, #8
 8008368:	d00c      	beq.n	8008384 <HAL_DAC_Start_DMA+0x7c>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d000      	beq.n	8008370 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800836e:	e039      	b.n	80083e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	613b      	str	r3, [r7, #16]
        break;
 8008378:	e034      	b.n	80083e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	613b      	str	r3, [r7, #16]
        break;
 8008382:	e02f      	b.n	80083e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3310      	adds	r3, #16
 800838a:	613b      	str	r3, [r7, #16]
        break;
 800838c:	e02a      	b.n	80083e4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	4a3b      	ldr	r2, [pc, #236]	; (8008480 <HAL_DAC_Start_DMA+0x178>)
 8008394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	4a3a      	ldr	r2, [pc, #232]	; (8008484 <HAL_DAC_Start_DMA+0x17c>)
 800839c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	4a39      	ldr	r2, [pc, #228]	; (8008488 <HAL_DAC_Start_DMA+0x180>)
 80083a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d009      	beq.n	80083d0 <HAL_DAC_Start_DMA+0xc8>
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d00c      	beq.n	80083da <HAL_DAC_Start_DMA+0xd2>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d000      	beq.n	80083c6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80083c4:	e00e      	b.n	80083e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3314      	adds	r3, #20
 80083cc:	613b      	str	r3, [r7, #16]
        break;
 80083ce:	e009      	b.n	80083e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3318      	adds	r3, #24
 80083d6:	613b      	str	r3, [r7, #16]
        break;
 80083d8:	e004      	b.n	80083e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	331c      	adds	r3, #28
 80083e0:	613b      	str	r3, [r7, #16]
        break;
 80083e2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d111      	bne.n	800840e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6898      	ldr	r0, [r3, #8]
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	f000 fbc8 	bl	8008b98 <HAL_DMA_Start_IT>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]
 800840c:	e010      	b.n	8008430 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800841c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68d8      	ldr	r0, [r3, #12]
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	f000 fbb6 	bl	8008b98 <HAL_DMA_Start_IT>
 800842c:	4603      	mov	r3, r0
 800842e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10f      	bne.n	800845c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6819      	ldr	r1, [r3, #0]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2201      	movs	r2, #1
 800844a:	409a      	lsls	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8008454:	2001      	movs	r0, #1
 8008456:	f7fe fa71 	bl	800693c <HAL_Delay>
 800845a:	e005      	b.n	8008468 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	f043 0204 	orr.w	r2, r3, #4
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	08008935 	.word	0x08008935
 8008478:	08008957 	.word	0x08008957
 800847c:	08008973 	.word	0x08008973
 8008480:	080089dd 	.word	0x080089dd
 8008484:	080089ff 	.word	0x080089ff
 8008488:	08008a1b 	.word	0x08008a1b

0800848c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6819      	ldr	r1, [r3, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084a6:	fa02 f303 	lsl.w	r3, r2, r3
 80084aa:	43da      	mvns	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	400a      	ands	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6819      	ldr	r1, [r3, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2201      	movs	r2, #1
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	43da      	mvns	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	400a      	ands	r2, r1
 80084ce:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80084d0:	2001      	movs	r0, #1
 80084d2:	f7fe fa33 	bl	800693c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10f      	bne.n	80084fc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fbd4 	bl	8008c8e <HAL_DMA_Abort>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e00e      	b.n	800851a <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fbc4 	bl	8008c8e <HAL_DMA_Abort>
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008518:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2204      	movs	r2, #4
 8008524:	711a      	strb	r2, [r3, #4]
 8008526:	e002      	b.n	800852e <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	3308      	adds	r3, #8
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	e004      	b.n	8008572 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	3314      	adds	r3, #20
 8008570:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	461a      	mov	r2, r3
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d103      	bne.n	80085c8 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	e002      	b.n	80085ce <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	795b      	ldrb	r3, [r3, #5]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_DAC_ConfigChannel+0x1c>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e194      	b.n	8008922 <HAL_DAC_ConfigChannel+0x346>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2202      	movs	r2, #2
 8008602:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b04      	cmp	r3, #4
 800860a:	d174      	bne.n	80086f6 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d137      	bne.n	8008682 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8008612:	f7fe f987 	bl	8006924 <HAL_GetTick>
 8008616:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008618:	e011      	b.n	800863e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800861a:	f7fe f983 	bl	8006924 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b01      	cmp	r3, #1
 8008626:	d90a      	bls.n	800863e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	f043 0208 	orr.w	r2, r3, #8
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2203      	movs	r2, #3
 8008638:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e171      	b.n	8008922 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e6      	bne.n	800861a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800864c:	2001      	movs	r0, #1
 800864e:	f7fe f975 	bl	800693c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800865a:	641a      	str	r2, [r3, #64]	; 0x40
 800865c:	e01e      	b.n	800869c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800865e:	f7fe f961 	bl	8006924 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d90a      	bls.n	8008682 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f043 0208 	orr.w	r2, r3, #8
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2203      	movs	r2, #3
 800867c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e14f      	b.n	8008922 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	dbe8      	blt.n	800865e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800868c:	2001      	movs	r0, #1
 800868e:	f7fe f955 	bl	800693c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800869a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80086ac:	fa01 f303 	lsl.w	r3, r1, r3
 80086b0:	43db      	mvns	r3, r3
 80086b2:	ea02 0103 	and.w	r1, r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	409a      	lsls	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	21ff      	movs	r1, #255	; 0xff
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	43db      	mvns	r3, r3
 80086de:	ea02 0103 	and.w	r1, r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	409a      	lsls	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d11d      	bne.n	800873a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	221f      	movs	r2, #31
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	43db      	mvns	r3, r3
 8008714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008716:	4013      	ands	r3, r2
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	fa02 f303 	lsl.w	r3, r2, r3
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	4313      	orrs	r3, r2
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008738:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2207      	movs	r2, #7
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	43db      	mvns	r3, r3
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	4013      	ands	r3, r2
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8008762:	2300      	movs	r3, #0
 8008764:	623b      	str	r3, [r7, #32]
 8008766:	e011      	b.n	800878c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008774:	2301      	movs	r3, #1
 8008776:	623b      	str	r3, [r7, #32]
 8008778:	e008      	b.n	800878c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008782:	2301      	movs	r3, #1
 8008784:	623b      	str	r3, [r7, #32]
 8008786:	e001      	b.n	800878c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008788:	2300      	movs	r3, #0
 800878a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	4313      	orrs	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f003 0310 	and.w	r3, r3, #16
 80087a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	43db      	mvns	r3, r3
 80087ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ae:	4013      	ands	r3, r2
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	791b      	ldrb	r3, [r3, #4]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d102      	bne.n	80087c0 <HAL_DAC_ConfigChannel+0x1e4>
 80087ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087be:	e000      	b.n	80087c2 <HAL_DAC_ConfigChannel+0x1e6>
 80087c0:	2300      	movs	r3, #0
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f003 0310 	and.w	r3, r3, #16
 80087ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087d2:	fa02 f303 	lsl.w	r3, r2, r3
 80087d6:	43db      	mvns	r3, r3
 80087d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087da:	4013      	ands	r3, r2
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	795b      	ldrb	r3, [r3, #5]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d102      	bne.n	80087ec <HAL_DAC_ConfigChannel+0x210>
 80087e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ea:	e000      	b.n	80087ee <HAL_DAC_ConfigChannel+0x212>
 80087ec:	2300      	movs	r3, #0
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d114      	bne.n	800882e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008804:	f001 fae0 	bl	8009dc8 <HAL_RCC_GetHCLKFreq>
 8008808:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	4a47      	ldr	r2, [pc, #284]	; (800892c <HAL_DAC_ConfigChannel+0x350>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d904      	bls.n	800881c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
 800881a:	e00d      	b.n	8008838 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	4a44      	ldr	r2, [pc, #272]	; (8008930 <HAL_DAC_ConfigChannel+0x354>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d909      	bls.n	8008838 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
 800882c:	e004      	b.n	8008838 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	4313      	orrs	r3, r2
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f003 0310 	and.w	r3, r3, #16
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	fa02 f303 	lsl.w	r3, r2, r3
 8008844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008846:	4313      	orrs	r3, r2
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6819      	ldr	r1, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	43da      	mvns	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	400a      	ands	r2, r1
 800886e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	43db      	mvns	r3, r3
 8008888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888a:	4013      	ands	r3, r2
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f003 0310 	and.w	r3, r3, #16
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	fa02 f303 	lsl.w	r3, r2, r3
 80088a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a2:	4313      	orrs	r3, r2
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	22c0      	movs	r2, #192	; 0xc0
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	43da      	mvns	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	400a      	ands	r2, r1
 80088c8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	089b      	lsrs	r3, r3, #2
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	089b      	lsrs	r3, r3, #2
 80088dc:	021b      	lsls	r3, r3, #8
 80088de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f003 0310 	and.w	r3, r3, #16
 80088f4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80088f8:	fa01 f303 	lsl.w	r3, r1, r3
 80088fc:	43db      	mvns	r3, r3
 80088fe:	ea02 0103 	and.w	r1, r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f003 0310 	and.w	r3, r3, #16
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	409a      	lsls	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3728      	adds	r7, #40	; 0x28
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	09896800 	.word	0x09896800
 8008930:	04c4b400 	.word	0x04c4b400

08008934 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7ff fe20 	bl	8008588 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	711a      	strb	r2, [r3, #4]
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f7ff fe19 	bl	800859c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	f043 0204 	orr.w	r2, r3, #4
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7fd f802 	bl	8005996 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	711a      	strb	r2, [r3, #4]
}
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f7ff ffd8 	bl	80089a0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2201      	movs	r2, #1
 80089f4:	711a      	strb	r2, [r3, #4]
}
 80089f6:	bf00      	nop
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff ffd1 	bl	80089b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	f043 0204 	orr.w	r2, r3, #4
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff ffc7 	bl	80089c8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	711a      	strb	r2, [r3, #4]
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e08d      	b.n	8008b76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4b47      	ldr	r3, [pc, #284]	; (8008b80 <HAL_DMA_Init+0x138>)
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d80f      	bhi.n	8008a86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4b45      	ldr	r3, [pc, #276]	; (8008b84 <HAL_DMA_Init+0x13c>)
 8008a6e:	4413      	add	r3, r2
 8008a70:	4a45      	ldr	r2, [pc, #276]	; (8008b88 <HAL_DMA_Init+0x140>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	009a      	lsls	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a42      	ldr	r2, [pc, #264]	; (8008b8c <HAL_DMA_Init+0x144>)
 8008a82:	641a      	str	r2, [r3, #64]	; 0x40
 8008a84:	e00e      	b.n	8008aa4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4b40      	ldr	r3, [pc, #256]	; (8008b90 <HAL_DMA_Init+0x148>)
 8008a8e:	4413      	add	r3, r2
 8008a90:	4a3d      	ldr	r2, [pc, #244]	; (8008b88 <HAL_DMA_Init+0x140>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	091b      	lsrs	r3, r3, #4
 8008a98:	009a      	lsls	r2, r3, #2
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a3c      	ldr	r2, [pc, #240]	; (8008b94 <HAL_DMA_Init+0x14c>)
 8008aa2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fa10 	bl	8008f1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b04:	d102      	bne.n	8008b0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b14:	b2d2      	uxtb	r2, r2
 8008b16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b20:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d010      	beq.n	8008b4c <HAL_DMA_Init+0x104>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d80c      	bhi.n	8008b4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa30 	bl	8008f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	e008      	b.n	8008b5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40020407 	.word	0x40020407
 8008b84:	bffdfff8 	.word	0xbffdfff8
 8008b88:	cccccccd 	.word	0xcccccccd
 8008b8c:	40020000 	.word	0x40020000
 8008b90:	bffdfbf8 	.word	0xbffdfbf8
 8008b94:	40020400 	.word	0x40020400

08008b98 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_DMA_Start_IT+0x20>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e066      	b.n	8008c86 <HAL_DMA_Start_IT+0xee>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d155      	bne.n	8008c78 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0201 	bic.w	r2, r2, #1
 8008be8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f954 	bl	8008e9e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d008      	beq.n	8008c10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 020e 	orr.w	r2, r2, #14
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	e00f      	b.n	8008c30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0204 	bic.w	r2, r2, #4
 8008c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 020a 	orr.w	r2, r2, #10
 8008c2e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d007      	beq.n	8008c4e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c4c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0201 	orr.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	e005      	b.n	8008c84 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008c80:	2302      	movs	r3, #2
 8008c82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d005      	beq.n	8008cb2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
 8008cb0:	e037      	b.n	8008d22 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 020e 	bic.w	r2, r2, #14
 8008cc0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cd0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0201 	bic.w	r2, r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce6:	f003 021f 	and.w	r2, r3, #31
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	2101      	movs	r1, #1
 8008cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8008cf4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008cfe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00c      	beq.n	8008d22 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d16:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008d20:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5c:	f003 031f 	and.w	r3, r3, #31
 8008d60:	2204      	movs	r2, #4
 8008d62:	409a      	lsls	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d026      	beq.n	8008dba <HAL_DMA_IRQHandler+0x7a>
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f003 0304 	and.w	r3, r3, #4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d021      	beq.n	8008dba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d107      	bne.n	8008d94 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0204 	bic.w	r2, r2, #4
 8008d92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	f003 021f 	and.w	r2, r3, #31
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da0:	2104      	movs	r1, #4
 8008da2:	fa01 f202 	lsl.w	r2, r1, r2
 8008da6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d071      	beq.n	8008e94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008db8:	e06c      	b.n	8008e94 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	409a      	lsls	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d02e      	beq.n	8008e2c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d029      	beq.n	8008e2c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 020a 	bic.w	r2, r2, #10
 8008df4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e02:	f003 021f 	and.w	r2, r3, #31
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	2102      	movs	r1, #2
 8008e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8008e10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d038      	beq.n	8008e94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008e2a:	e033      	b.n	8008e94 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e30:	f003 031f 	and.w	r3, r3, #31
 8008e34:	2208      	movs	r2, #8
 8008e36:	409a      	lsls	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d02a      	beq.n	8008e96 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f003 0308 	and.w	r3, r3, #8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d025      	beq.n	8008e96 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 020e 	bic.w	r2, r2, #14
 8008e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	f003 021f 	and.w	r2, r3, #31
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	2101      	movs	r1, #1
 8008e68:	fa01 f202 	lsl.w	r2, r1, r2
 8008e6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
}
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008eb4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008ec6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ecc:	f003 021f 	and.w	r2, r3, #31
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8008eda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	d108      	bne.n	8008efe <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008efc:	e007      	b.n	8008f0e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	60da      	str	r2, [r3, #12]
}
 8008f0e:	bf00      	nop
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
	...

08008f1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4b16      	ldr	r3, [pc, #88]	; (8008f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d802      	bhi.n	8008f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008f30:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e001      	b.n	8008f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008f36:	4b15      	ldr	r3, [pc, #84]	; (8008f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008f38:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	3b08      	subs	r3, #8
 8008f46:	4a12      	ldr	r2, [pc, #72]	; (8008f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008f48:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f54:	089b      	lsrs	r3, r3, #2
 8008f56:	009a      	lsls	r2, r3, #2
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a0b      	ldr	r2, [pc, #44]	; (8008f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008f66:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f003 031f 	and.w	r3, r3, #31
 8008f6e:	2201      	movs	r2, #1
 8008f70:	409a      	lsls	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40020407 	.word	0x40020407
 8008f88:	40020800 	.word	0x40020800
 8008f8c:	40020820 	.word	0x40020820
 8008f90:	cccccccd 	.word	0xcccccccd
 8008f94:	40020880 	.word	0x40020880

08008f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a08      	ldr	r2, [pc, #32]	; (8008fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008fba:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	f003 031f 	and.w	r3, r3, #31
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	409a      	lsls	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008fcc:	bf00      	nop
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	1000823f 	.word	0x1000823f
 8008fdc:	40020940 	.word	0x40020940

08008fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008fee:	e15a      	b.n	80092a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 814c 	beq.w	80092a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d00b      	beq.n	8009028 <HAL_GPIO_Init+0x48>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d007      	beq.n	8009028 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800901c:	2b11      	cmp	r3, #17
 800901e:	d003      	beq.n	8009028 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b12      	cmp	r3, #18
 8009026:	d130      	bne.n	800908a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	2203      	movs	r2, #3
 8009034:	fa02 f303 	lsl.w	r3, r2, r3
 8009038:	43db      	mvns	r3, r3
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4013      	ands	r3, r2
 800903e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	fa02 f303 	lsl.w	r3, r2, r3
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800905e:	2201      	movs	r2, #1
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	fa02 f303 	lsl.w	r3, r2, r3
 8009066:	43db      	mvns	r3, r3
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4013      	ands	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	f003 0201 	and.w	r2, r3, #1
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	005b      	lsls	r3, r3, #1
 8009094:	2203      	movs	r2, #3
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	43db      	mvns	r3, r3
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4013      	ands	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	fa02 f303 	lsl.w	r3, r2, r3
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d003      	beq.n	80090ca <HAL_GPIO_Init+0xea>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b12      	cmp	r3, #18
 80090c8:	d123      	bne.n	8009112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	08da      	lsrs	r2, r3, #3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3208      	adds	r2, #8
 80090d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f003 0307 	and.w	r3, r3, #7
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	220f      	movs	r2, #15
 80090e2:	fa02 f303 	lsl.w	r3, r2, r3
 80090e6:	43db      	mvns	r3, r3
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	4013      	ands	r3, r2
 80090ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	691a      	ldr	r2, [r3, #16]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	08da      	lsrs	r2, r3, #3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3208      	adds	r2, #8
 800910c:	6939      	ldr	r1, [r7, #16]
 800910e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	2203      	movs	r2, #3
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	43db      	mvns	r3, r3
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4013      	ands	r3, r2
 8009128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f003 0203 	and.w	r2, r3, #3
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	fa02 f303 	lsl.w	r3, r2, r3
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 80a6 	beq.w	80092a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009154:	4b5b      	ldr	r3, [pc, #364]	; (80092c4 <HAL_GPIO_Init+0x2e4>)
 8009156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009158:	4a5a      	ldr	r2, [pc, #360]	; (80092c4 <HAL_GPIO_Init+0x2e4>)
 800915a:	f043 0301 	orr.w	r3, r3, #1
 800915e:	6613      	str	r3, [r2, #96]	; 0x60
 8009160:	4b58      	ldr	r3, [pc, #352]	; (80092c4 <HAL_GPIO_Init+0x2e4>)
 8009162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800916c:	4a56      	ldr	r2, [pc, #344]	; (80092c8 <HAL_GPIO_Init+0x2e8>)
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	089b      	lsrs	r3, r3, #2
 8009172:	3302      	adds	r3, #2
 8009174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f003 0303 	and.w	r3, r3, #3
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	220f      	movs	r2, #15
 8009184:	fa02 f303 	lsl.w	r3, r2, r3
 8009188:	43db      	mvns	r3, r3
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	4013      	ands	r3, r2
 800918e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009196:	d01f      	beq.n	80091d8 <HAL_GPIO_Init+0x1f8>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a4c      	ldr	r2, [pc, #304]	; (80092cc <HAL_GPIO_Init+0x2ec>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d019      	beq.n	80091d4 <HAL_GPIO_Init+0x1f4>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a4b      	ldr	r2, [pc, #300]	; (80092d0 <HAL_GPIO_Init+0x2f0>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d013      	beq.n	80091d0 <HAL_GPIO_Init+0x1f0>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a4a      	ldr	r2, [pc, #296]	; (80092d4 <HAL_GPIO_Init+0x2f4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00d      	beq.n	80091cc <HAL_GPIO_Init+0x1ec>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a49      	ldr	r2, [pc, #292]	; (80092d8 <HAL_GPIO_Init+0x2f8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d007      	beq.n	80091c8 <HAL_GPIO_Init+0x1e8>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a48      	ldr	r2, [pc, #288]	; (80092dc <HAL_GPIO_Init+0x2fc>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d101      	bne.n	80091c4 <HAL_GPIO_Init+0x1e4>
 80091c0:	2305      	movs	r3, #5
 80091c2:	e00a      	b.n	80091da <HAL_GPIO_Init+0x1fa>
 80091c4:	2306      	movs	r3, #6
 80091c6:	e008      	b.n	80091da <HAL_GPIO_Init+0x1fa>
 80091c8:	2304      	movs	r3, #4
 80091ca:	e006      	b.n	80091da <HAL_GPIO_Init+0x1fa>
 80091cc:	2303      	movs	r3, #3
 80091ce:	e004      	b.n	80091da <HAL_GPIO_Init+0x1fa>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e002      	b.n	80091da <HAL_GPIO_Init+0x1fa>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <HAL_GPIO_Init+0x1fa>
 80091d8:	2300      	movs	r3, #0
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	f002 0203 	and.w	r2, r2, #3
 80091e0:	0092      	lsls	r2, r2, #2
 80091e2:	4093      	lsls	r3, r2
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091ea:	4937      	ldr	r1, [pc, #220]	; (80092c8 <HAL_GPIO_Init+0x2e8>)
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	089b      	lsrs	r3, r3, #2
 80091f0:	3302      	adds	r3, #2
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80091f8:	4b39      	ldr	r3, [pc, #228]	; (80092e0 <HAL_GPIO_Init+0x300>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	43db      	mvns	r3, r3
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	4013      	ands	r3, r2
 8009206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800921c:	4a30      	ldr	r2, [pc, #192]	; (80092e0 <HAL_GPIO_Init+0x300>)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009222:	4b2f      	ldr	r3, [pc, #188]	; (80092e0 <HAL_GPIO_Init+0x300>)
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	43db      	mvns	r3, r3
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4013      	ands	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009246:	4a26      	ldr	r2, [pc, #152]	; (80092e0 <HAL_GPIO_Init+0x300>)
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800924c:	4b24      	ldr	r3, [pc, #144]	; (80092e0 <HAL_GPIO_Init+0x300>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	43db      	mvns	r3, r3
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	4013      	ands	r3, r2
 800925a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009270:	4a1b      	ldr	r2, [pc, #108]	; (80092e0 <HAL_GPIO_Init+0x300>)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009276:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <HAL_GPIO_Init+0x300>)
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	43db      	mvns	r3, r3
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4013      	ands	r3, r2
 8009284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800929a:	4a11      	ldr	r2, [pc, #68]	; (80092e0 <HAL_GPIO_Init+0x300>)
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	3301      	adds	r3, #1
 80092a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f47f ae9d 	bne.w	8008ff0 <HAL_GPIO_Init+0x10>
  }
}
 80092b6:	bf00      	nop
 80092b8:	371c      	adds	r7, #28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	40021000 	.word	0x40021000
 80092c8:	40010000 	.word	0x40010000
 80092cc:	48000400 	.word	0x48000400
 80092d0:	48000800 	.word	0x48000800
 80092d4:	48000c00 	.word	0x48000c00
 80092d8:	48001000 	.word	0x48001000
 80092dc:	48001400 	.word	0x48001400
 80092e0:	40010400 	.word	0x40010400

080092e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	807b      	strh	r3, [r7, #2]
 80092f0:	4613      	mov	r3, r2
 80092f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092f4:	787b      	ldrb	r3, [r7, #1]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80092fa:	887a      	ldrh	r2, [r7, #2]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009300:	e002      	b.n	8009308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009302:	887a      	ldrh	r2, [r7, #2]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d141      	bne.n	80093a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009322:	4b4b      	ldr	r3, [pc, #300]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800932a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800932e:	d131      	bne.n	8009394 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009330:	4b47      	ldr	r3, [pc, #284]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009336:	4a46      	ldr	r2, [pc, #280]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800933c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009340:	4b43      	ldr	r3, [pc, #268]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009348:	4a41      	ldr	r2, [pc, #260]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800934a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800934e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009350:	4b40      	ldr	r3, [pc, #256]	; (8009454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2232      	movs	r2, #50	; 0x32
 8009356:	fb02 f303 	mul.w	r3, r2, r3
 800935a:	4a3f      	ldr	r2, [pc, #252]	; (8009458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800935c:	fba2 2303 	umull	r2, r3, r2, r3
 8009360:	0c9b      	lsrs	r3, r3, #18
 8009362:	3301      	adds	r3, #1
 8009364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009366:	e002      	b.n	800936e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3b01      	subs	r3, #1
 800936c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800936e:	4b38      	ldr	r3, [pc, #224]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800937a:	d102      	bne.n	8009382 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1f2      	bne.n	8009368 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009382:	4b33      	ldr	r3, [pc, #204]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800938a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800938e:	d158      	bne.n	8009442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e057      	b.n	8009444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009394:	4b2e      	ldr	r3, [pc, #184]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800939a:	4a2d      	ldr	r2, [pc, #180]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800939c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80093a4:	e04d      	b.n	8009442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ac:	d141      	bne.n	8009432 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80093ae:	4b28      	ldr	r3, [pc, #160]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ba:	d131      	bne.n	8009420 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80093bc:	4b24      	ldr	r3, [pc, #144]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c2:	4a23      	ldr	r2, [pc, #140]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80093cc:	4b20      	ldr	r3, [pc, #128]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80093d4:	4a1e      	ldr	r2, [pc, #120]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80093dc:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2232      	movs	r2, #50	; 0x32
 80093e2:	fb02 f303 	mul.w	r3, r2, r3
 80093e6:	4a1c      	ldr	r2, [pc, #112]	; (8009458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80093e8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ec:	0c9b      	lsrs	r3, r3, #18
 80093ee:	3301      	adds	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093f2:	e002      	b.n	80093fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093fa:	4b15      	ldr	r3, [pc, #84]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009406:	d102      	bne.n	800940e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1f2      	bne.n	80093f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800940e:	4b10      	ldr	r3, [pc, #64]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800941a:	d112      	bne.n	8009442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e011      	b.n	8009444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009420:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009426:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800942c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009430:	e007      	b.n	8009442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009432:	4b07      	ldr	r3, [pc, #28]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800943a:	4a05      	ldr	r2, [pc, #20]	; (8009450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800943c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009440:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	40007000 	.word	0x40007000
 8009454:	20000c94 	.word	0x20000c94
 8009458:	431bde83 	.word	0x431bde83

0800945c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e308      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d075      	beq.n	8009566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800947a:	4ba3      	ldr	r3, [pc, #652]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009484:	4ba0      	ldr	r3, [pc, #640]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b0c      	cmp	r3, #12
 8009492:	d102      	bne.n	800949a <HAL_RCC_OscConfig+0x3e>
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b03      	cmp	r3, #3
 8009498:	d002      	beq.n	80094a0 <HAL_RCC_OscConfig+0x44>
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2b08      	cmp	r3, #8
 800949e:	d10b      	bne.n	80094b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094a0:	4b99      	ldr	r3, [pc, #612]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d05b      	beq.n	8009564 <HAL_RCC_OscConfig+0x108>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d157      	bne.n	8009564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e2e3      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c0:	d106      	bne.n	80094d0 <HAL_RCC_OscConfig+0x74>
 80094c2:	4b91      	ldr	r3, [pc, #580]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a90      	ldr	r2, [pc, #576]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	e01d      	b.n	800950c <HAL_RCC_OscConfig+0xb0>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094d8:	d10c      	bne.n	80094f4 <HAL_RCC_OscConfig+0x98>
 80094da:	4b8b      	ldr	r3, [pc, #556]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a8a      	ldr	r2, [pc, #552]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	4b88      	ldr	r3, [pc, #544]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a87      	ldr	r2, [pc, #540]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	e00b      	b.n	800950c <HAL_RCC_OscConfig+0xb0>
 80094f4:	4b84      	ldr	r3, [pc, #528]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a83      	ldr	r2, [pc, #524]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80094fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	4b81      	ldr	r3, [pc, #516]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a80      	ldr	r2, [pc, #512]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800950a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d013      	beq.n	800953c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009514:	f7fd fa06 	bl	8006924 <HAL_GetTick>
 8009518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800951a:	e008      	b.n	800952e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800951c:	f7fd fa02 	bl	8006924 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b64      	cmp	r3, #100	; 0x64
 8009528:	d901      	bls.n	800952e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e2a8      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800952e:	4b76      	ldr	r3, [pc, #472]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0f0      	beq.n	800951c <HAL_RCC_OscConfig+0xc0>
 800953a:	e014      	b.n	8009566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800953c:	f7fd f9f2 	bl	8006924 <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009542:	e008      	b.n	8009556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009544:	f7fd f9ee 	bl	8006924 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b64      	cmp	r3, #100	; 0x64
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e294      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009556:	4b6c      	ldr	r3, [pc, #432]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1f0      	bne.n	8009544 <HAL_RCC_OscConfig+0xe8>
 8009562:	e000      	b.n	8009566 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d075      	beq.n	800965e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009572:	4b65      	ldr	r3, [pc, #404]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f003 030c 	and.w	r3, r3, #12
 800957a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800957c:	4b62      	ldr	r3, [pc, #392]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0303 	and.w	r3, r3, #3
 8009584:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b0c      	cmp	r3, #12
 800958a:	d102      	bne.n	8009592 <HAL_RCC_OscConfig+0x136>
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d002      	beq.n	8009598 <HAL_RCC_OscConfig+0x13c>
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	2b04      	cmp	r3, #4
 8009596:	d11f      	bne.n	80095d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009598:	4b5b      	ldr	r3, [pc, #364]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d005      	beq.n	80095b0 <HAL_RCC_OscConfig+0x154>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e267      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095b0:	4b55      	ldr	r3, [pc, #340]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	061b      	lsls	r3, r3, #24
 80095be:	4952      	ldr	r1, [pc, #328]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80095c4:	4b51      	ldr	r3, [pc, #324]	; (800970c <HAL_RCC_OscConfig+0x2b0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fd f95f 	bl	800688c <HAL_InitTick>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d043      	beq.n	800965c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e253      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d023      	beq.n	8009628 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095e0:	4b49      	ldr	r3, [pc, #292]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a48      	ldr	r2, [pc, #288]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80095e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ec:	f7fd f99a 	bl	8006924 <HAL_GetTick>
 80095f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095f2:	e008      	b.n	8009606 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095f4:	f7fd f996 	bl	8006924 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d901      	bls.n	8009606 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e23c      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009606:	4b40      	ldr	r3, [pc, #256]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f0      	beq.n	80095f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009612:	4b3d      	ldr	r3, [pc, #244]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	061b      	lsls	r3, r3, #24
 8009620:	4939      	ldr	r1, [pc, #228]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009622:	4313      	orrs	r3, r2
 8009624:	604b      	str	r3, [r1, #4]
 8009626:	e01a      	b.n	800965e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009628:	4b37      	ldr	r3, [pc, #220]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a36      	ldr	r2, [pc, #216]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 800962e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009634:	f7fd f976 	bl	8006924 <HAL_GetTick>
 8009638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800963a:	e008      	b.n	800964e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800963c:	f7fd f972 	bl	8006924 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b02      	cmp	r3, #2
 8009648:	d901      	bls.n	800964e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e218      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800964e:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f0      	bne.n	800963c <HAL_RCC_OscConfig+0x1e0>
 800965a:	e000      	b.n	800965e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800965c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0308 	and.w	r3, r3, #8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d03c      	beq.n	80096e4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d01c      	beq.n	80096ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009672:	4b25      	ldr	r3, [pc, #148]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 8009674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009678:	4a23      	ldr	r2, [pc, #140]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 800967a:	f043 0301 	orr.w	r3, r3, #1
 800967e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009682:	f7fd f94f 	bl	8006924 <HAL_GetTick>
 8009686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009688:	e008      	b.n	800969c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800968a:	f7fd f94b 	bl	8006924 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	d901      	bls.n	800969c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e1f1      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800969c:	4b1a      	ldr	r3, [pc, #104]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 800969e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0ef      	beq.n	800968a <HAL_RCC_OscConfig+0x22e>
 80096aa:	e01b      	b.n	80096e4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096ac:	4b16      	ldr	r3, [pc, #88]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80096ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b2:	4a15      	ldr	r2, [pc, #84]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80096b4:	f023 0301 	bic.w	r3, r3, #1
 80096b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096bc:	f7fd f932 	bl	8006924 <HAL_GetTick>
 80096c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80096c2:	e008      	b.n	80096d6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096c4:	f7fd f92e 	bl	8006924 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e1d4      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80096d6:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80096d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1ef      	bne.n	80096c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80ab 	beq.w	8009848 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096f2:	2300      	movs	r3, #0
 80096f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80096f6:	4b04      	ldr	r3, [pc, #16]	; (8009708 <HAL_RCC_OscConfig+0x2ac>)
 80096f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <HAL_RCC_OscConfig+0x2b4>
 8009702:	2301      	movs	r3, #1
 8009704:	e005      	b.n	8009712 <HAL_RCC_OscConfig+0x2b6>
 8009706:	bf00      	nop
 8009708:	40021000 	.word	0x40021000
 800970c:	20000c98 	.word	0x20000c98
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00d      	beq.n	8009732 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009716:	4baf      	ldr	r3, [pc, #700]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800971a:	4aae      	ldr	r2, [pc, #696]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800971c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009720:	6593      	str	r3, [r2, #88]	; 0x58
 8009722:	4bac      	ldr	r3, [pc, #688]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800972e:	2301      	movs	r3, #1
 8009730:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009732:	4ba9      	ldr	r3, [pc, #676]	; (80099d8 <HAL_RCC_OscConfig+0x57c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973a:	2b00      	cmp	r3, #0
 800973c:	d118      	bne.n	8009770 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800973e:	4ba6      	ldr	r3, [pc, #664]	; (80099d8 <HAL_RCC_OscConfig+0x57c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4aa5      	ldr	r2, [pc, #660]	; (80099d8 <HAL_RCC_OscConfig+0x57c>)
 8009744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800974a:	f7fd f8eb 	bl	8006924 <HAL_GetTick>
 800974e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009750:	e008      	b.n	8009764 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009752:	f7fd f8e7 	bl	8006924 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b02      	cmp	r3, #2
 800975e:	d901      	bls.n	8009764 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e18d      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009764:	4b9c      	ldr	r3, [pc, #624]	; (80099d8 <HAL_RCC_OscConfig+0x57c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0f0      	beq.n	8009752 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d108      	bne.n	800978a <HAL_RCC_OscConfig+0x32e>
 8009778:	4b96      	ldr	r3, [pc, #600]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800977a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977e:	4a95      	ldr	r2, [pc, #596]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009780:	f043 0301 	orr.w	r3, r3, #1
 8009784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009788:	e024      	b.n	80097d4 <HAL_RCC_OscConfig+0x378>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b05      	cmp	r3, #5
 8009790:	d110      	bne.n	80097b4 <HAL_RCC_OscConfig+0x358>
 8009792:	4b90      	ldr	r3, [pc, #576]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009798:	4a8e      	ldr	r2, [pc, #568]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800979a:	f043 0304 	orr.w	r3, r3, #4
 800979e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80097a2:	4b8c      	ldr	r3, [pc, #560]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80097a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a8:	4a8a      	ldr	r2, [pc, #552]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80097aa:	f043 0301 	orr.w	r3, r3, #1
 80097ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80097b2:	e00f      	b.n	80097d4 <HAL_RCC_OscConfig+0x378>
 80097b4:	4b87      	ldr	r3, [pc, #540]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80097b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ba:	4a86      	ldr	r2, [pc, #536]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80097bc:	f023 0301 	bic.w	r3, r3, #1
 80097c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80097c4:	4b83      	ldr	r3, [pc, #524]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80097c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ca:	4a82      	ldr	r2, [pc, #520]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80097cc:	f023 0304 	bic.w	r3, r3, #4
 80097d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d016      	beq.n	800980a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097dc:	f7fd f8a2 	bl	8006924 <HAL_GetTick>
 80097e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097e2:	e00a      	b.n	80097fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e4:	f7fd f89e 	bl	8006924 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d901      	bls.n	80097fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e142      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097fa:	4b76      	ldr	r3, [pc, #472]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80097fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0ed      	beq.n	80097e4 <HAL_RCC_OscConfig+0x388>
 8009808:	e015      	b.n	8009836 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980a:	f7fd f88b 	bl	8006924 <HAL_GetTick>
 800980e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009810:	e00a      	b.n	8009828 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009812:	f7fd f887 	bl	8006924 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009820:	4293      	cmp	r3, r2
 8009822:	d901      	bls.n	8009828 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e12b      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009828:	4b6a      	ldr	r3, [pc, #424]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800982a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1ed      	bne.n	8009812 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009836:	7ffb      	ldrb	r3, [r7, #31]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d105      	bne.n	8009848 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800983c:	4b65      	ldr	r3, [pc, #404]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800983e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009840:	4a64      	ldr	r2, [pc, #400]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009846:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0320 	and.w	r3, r3, #32
 8009850:	2b00      	cmp	r3, #0
 8009852:	d03c      	beq.n	80098ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01c      	beq.n	8009896 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800985c:	4b5d      	ldr	r3, [pc, #372]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800985e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009862:	4a5c      	ldr	r2, [pc, #368]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009864:	f043 0301 	orr.w	r3, r3, #1
 8009868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800986c:	f7fd f85a 	bl	8006924 <HAL_GetTick>
 8009870:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009872:	e008      	b.n	8009886 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009874:	f7fd f856 	bl	8006924 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b02      	cmp	r3, #2
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e0fc      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009886:	4b53      	ldr	r3, [pc, #332]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0ef      	beq.n	8009874 <HAL_RCC_OscConfig+0x418>
 8009894:	e01b      	b.n	80098ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009896:	4b4f      	ldr	r3, [pc, #316]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800989c:	4a4d      	ldr	r2, [pc, #308]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800989e:	f023 0301 	bic.w	r3, r3, #1
 80098a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098a6:	f7fd f83d 	bl	8006924 <HAL_GetTick>
 80098aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80098ac:	e008      	b.n	80098c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098ae:	f7fd f839 	bl	8006924 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d901      	bls.n	80098c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e0df      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80098c0:	4b44      	ldr	r3, [pc, #272]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80098c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1ef      	bne.n	80098ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 80d3 	beq.w	8009a7e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098d8:	4b3e      	ldr	r3, [pc, #248]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f003 030c 	and.w	r3, r3, #12
 80098e0:	2b0c      	cmp	r3, #12
 80098e2:	f000 808d 	beq.w	8009a00 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d15a      	bne.n	80099a4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ee:	4b39      	ldr	r3, [pc, #228]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a38      	ldr	r2, [pc, #224]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80098f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098fa:	f7fd f813 	bl	8006924 <HAL_GetTick>
 80098fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009900:	e008      	b.n	8009914 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009902:	f7fd f80f 	bl	8006924 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b02      	cmp	r3, #2
 800990e:	d901      	bls.n	8009914 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e0b5      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009914:	4b2f      	ldr	r3, [pc, #188]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1f0      	bne.n	8009902 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009920:	4b2c      	ldr	r3, [pc, #176]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	4b2d      	ldr	r3, [pc, #180]	; (80099dc <HAL_RCC_OscConfig+0x580>)
 8009926:	4013      	ands	r3, r2
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	6a11      	ldr	r1, [r2, #32]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009930:	3a01      	subs	r2, #1
 8009932:	0112      	lsls	r2, r2, #4
 8009934:	4311      	orrs	r1, r2
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800993a:	0212      	lsls	r2, r2, #8
 800993c:	4311      	orrs	r1, r2
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009942:	0852      	lsrs	r2, r2, #1
 8009944:	3a01      	subs	r2, #1
 8009946:	0552      	lsls	r2, r2, #21
 8009948:	4311      	orrs	r1, r2
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800994e:	0852      	lsrs	r2, r2, #1
 8009950:	3a01      	subs	r2, #1
 8009952:	0652      	lsls	r2, r2, #25
 8009954:	4311      	orrs	r1, r2
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800995a:	06d2      	lsls	r2, r2, #27
 800995c:	430a      	orrs	r2, r1
 800995e:	491d      	ldr	r1, [pc, #116]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009960:	4313      	orrs	r3, r2
 8009962:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009964:	4b1b      	ldr	r3, [pc, #108]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 800996a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800996e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009970:	4b18      	ldr	r3, [pc, #96]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	4a17      	ldr	r2, [pc, #92]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800997a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800997c:	f7fc ffd2 	bl	8006924 <HAL_GetTick>
 8009980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009982:	e008      	b.n	8009996 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009984:	f7fc ffce 	bl	8006924 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	2b02      	cmp	r3, #2
 8009990:	d901      	bls.n	8009996 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e074      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0f0      	beq.n	8009984 <HAL_RCC_OscConfig+0x528>
 80099a2:	e06c      	b.n	8009a7e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099a4:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a0a      	ldr	r2, [pc, #40]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80099aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099ae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80099b0:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	4a07      	ldr	r2, [pc, #28]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	4a04      	ldr	r2, [pc, #16]	; (80099d4 <HAL_RCC_OscConfig+0x578>)
 80099c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80099c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099cc:	f7fc ffaa 	bl	8006924 <HAL_GetTick>
 80099d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099d2:	e00e      	b.n	80099f2 <HAL_RCC_OscConfig+0x596>
 80099d4:	40021000 	.word	0x40021000
 80099d8:	40007000 	.word	0x40007000
 80099dc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099e0:	f7fc ffa0 	bl	8006924 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d901      	bls.n	80099f2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e046      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80099f2:	4b25      	ldr	r3, [pc, #148]	; (8009a88 <HAL_RCC_OscConfig+0x62c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1f0      	bne.n	80099e0 <HAL_RCC_OscConfig+0x584>
 80099fe:	e03e      	b.n	8009a7e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e039      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009a0c:	4b1e      	ldr	r3, [pc, #120]	; (8009a88 <HAL_RCC_OscConfig+0x62c>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f003 0203 	and.w	r2, r3, #3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d12c      	bne.n	8009a7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d123      	bne.n	8009a7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d11b      	bne.n	8009a7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d113      	bne.n	8009a7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5c:	085b      	lsrs	r3, r3, #1
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d109      	bne.n	8009a7a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a70:	085b      	lsrs	r3, r3, #1
 8009a72:	3b01      	subs	r3, #1
 8009a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d001      	beq.n	8009a7e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40021000 	.word	0x40021000

08009a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009a96:	2300      	movs	r3, #0
 8009a98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e11e      	b.n	8009ce2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009aa4:	4b91      	ldr	r3, [pc, #580]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 030f 	and.w	r3, r3, #15
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d910      	bls.n	8009ad4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ab2:	4b8e      	ldr	r3, [pc, #568]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f023 020f 	bic.w	r2, r3, #15
 8009aba:	498c      	ldr	r1, [pc, #560]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac2:	4b8a      	ldr	r3, [pc, #552]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 030f 	and.w	r3, r3, #15
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d001      	beq.n	8009ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e106      	b.n	8009ce2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d073      	beq.n	8009bc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d129      	bne.n	8009b3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ae8:	4b81      	ldr	r3, [pc, #516]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d101      	bne.n	8009af8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e0f4      	b.n	8009ce2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009af8:	f000 f972 	bl	8009de0 <RCC_GetSysClockFreqFromPLLSource>
 8009afc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	4a7c      	ldr	r2, [pc, #496]	; (8009cf4 <HAL_RCC_ClockConfig+0x268>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d93f      	bls.n	8009b86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009b06:	4b7a      	ldr	r3, [pc, #488]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d033      	beq.n	8009b86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d12f      	bne.n	8009b86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b26:	4b72      	ldr	r3, [pc, #456]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b2e:	4a70      	ldr	r2, [pc, #448]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009b36:	2380      	movs	r3, #128	; 0x80
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e024      	b.n	8009b86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d107      	bne.n	8009b54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b44:	4b6a      	ldr	r3, [pc, #424]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d109      	bne.n	8009b64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e0c6      	b.n	8009ce2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b54:	4b66      	ldr	r3, [pc, #408]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e0be      	b.n	8009ce2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009b64:	f000 f8ce 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 8009b68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	4a61      	ldr	r2, [pc, #388]	; (8009cf4 <HAL_RCC_ClockConfig+0x268>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d909      	bls.n	8009b86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009b72:	4b5f      	ldr	r3, [pc, #380]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b7a:	4a5d      	ldr	r2, [pc, #372]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009b82:	2380      	movs	r3, #128	; 0x80
 8009b84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b86:	4b5a      	ldr	r3, [pc, #360]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f023 0203 	bic.w	r2, r3, #3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4957      	ldr	r1, [pc, #348]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b98:	f7fc fec4 	bl	8006924 <HAL_GetTick>
 8009b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b9e:	e00a      	b.n	8009bb6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ba0:	f7fc fec0 	bl	8006924 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d901      	bls.n	8009bb6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e095      	b.n	8009ce2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bb6:	4b4e      	ldr	r3, [pc, #312]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f003 020c 	and.w	r2, r3, #12
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d1eb      	bne.n	8009ba0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d023      	beq.n	8009c1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009be0:	4b43      	ldr	r3, [pc, #268]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	4a42      	ldr	r2, [pc, #264]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009bea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0308 	and.w	r3, r3, #8
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d007      	beq.n	8009c08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009bf8:	4b3d      	ldr	r3, [pc, #244]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c00:	4a3b      	ldr	r2, [pc, #236]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009c06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c08:	4b39      	ldr	r3, [pc, #228]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	4936      	ldr	r1, [pc, #216]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	608b      	str	r3, [r1, #8]
 8009c1a:	e008      	b.n	8009c2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b80      	cmp	r3, #128	; 0x80
 8009c20:	d105      	bne.n	8009c2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009c22:	4b33      	ldr	r3, [pc, #204]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	4a32      	ldr	r2, [pc, #200]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c2e:	4b2f      	ldr	r3, [pc, #188]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 030f 	and.w	r3, r3, #15
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d21d      	bcs.n	8009c78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c3c:	4b2b      	ldr	r3, [pc, #172]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f023 020f 	bic.w	r2, r3, #15
 8009c44:	4929      	ldr	r1, [pc, #164]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009c4c:	f7fc fe6a 	bl	8006924 <HAL_GetTick>
 8009c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c52:	e00a      	b.n	8009c6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c54:	f7fc fe66 	bl	8006924 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e03b      	b.n	8009ce2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6a:	4b20      	ldr	r3, [pc, #128]	; (8009cec <HAL_RCC_ClockConfig+0x260>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 030f 	and.w	r3, r3, #15
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d1ed      	bne.n	8009c54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d008      	beq.n	8009c96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c84:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	4917      	ldr	r1, [pc, #92]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d009      	beq.n	8009cb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ca2:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	490f      	ldr	r1, [pc, #60]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009cb6:	f000 f825 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 8009cba:	4601      	mov	r1, r0
 8009cbc:	4b0c      	ldr	r3, [pc, #48]	; (8009cf0 <HAL_RCC_ClockConfig+0x264>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	091b      	lsrs	r3, r3, #4
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	4a0c      	ldr	r2, [pc, #48]	; (8009cf8 <HAL_RCC_ClockConfig+0x26c>)
 8009cc8:	5cd3      	ldrb	r3, [r2, r3]
 8009cca:	f003 031f 	and.w	r3, r3, #31
 8009cce:	fa21 f303 	lsr.w	r3, r1, r3
 8009cd2:	4a0a      	ldr	r2, [pc, #40]	; (8009cfc <HAL_RCC_ClockConfig+0x270>)
 8009cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009cd6:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <HAL_RCC_ClockConfig+0x274>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fc fdd6 	bl	800688c <HAL_InitTick>
 8009ce0:	4603      	mov	r3, r0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	40022000 	.word	0x40022000
 8009cf0:	40021000 	.word	0x40021000
 8009cf4:	04c4b400 	.word	0x04c4b400
 8009cf8:	080100c0 	.word	0x080100c0
 8009cfc:	20000c94 	.word	0x20000c94
 8009d00:	20000c98 	.word	0x20000c98

08009d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009d0a:	4b2c      	ldr	r3, [pc, #176]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f003 030c 	and.w	r3, r3, #12
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d102      	bne.n	8009d1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009d16:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	e047      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009d1c:	4b27      	ldr	r3, [pc, #156]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f003 030c 	and.w	r3, r3, #12
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d102      	bne.n	8009d2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009d28:	4b26      	ldr	r3, [pc, #152]	; (8009dc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	e03e      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009d2e:	4b23      	ldr	r3, [pc, #140]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f003 030c 	and.w	r3, r3, #12
 8009d36:	2b0c      	cmp	r3, #12
 8009d38:	d136      	bne.n	8009da8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d3a:	4b20      	ldr	r3, [pc, #128]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d44:	4b1d      	ldr	r3, [pc, #116]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	091b      	lsrs	r3, r3, #4
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	3301      	adds	r3, #1
 8009d50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d10c      	bne.n	8009d72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d58:	4a1a      	ldr	r2, [pc, #104]	; (8009dc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d60:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d62:	68d2      	ldr	r2, [r2, #12]
 8009d64:	0a12      	lsrs	r2, r2, #8
 8009d66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	617b      	str	r3, [r7, #20]
      break;
 8009d70:	e00c      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d72:	4a13      	ldr	r2, [pc, #76]	; (8009dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7a:	4a10      	ldr	r2, [pc, #64]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d7c:	68d2      	ldr	r2, [r2, #12]
 8009d7e:	0a12      	lsrs	r2, r2, #8
 8009d80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d84:	fb02 f303 	mul.w	r3, r2, r3
 8009d88:	617b      	str	r3, [r7, #20]
      break;
 8009d8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	0e5b      	lsrs	r3, r3, #25
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	3301      	adds	r3, #1
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	e001      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009dac:	693b      	ldr	r3, [r7, #16]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	40021000 	.word	0x40021000
 8009dc0:	00f42400 	.word	0x00f42400
 8009dc4:	007a1200 	.word	0x007a1200

08009dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009dcc:	4b03      	ldr	r3, [pc, #12]	; (8009ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8009dce:	681b      	ldr	r3, [r3, #0]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20000c94 	.word	0x20000c94

08009de0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009de6:	4b1e      	ldr	r3, [pc, #120]	; (8009e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009df0:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	091b      	lsrs	r3, r3, #4
 8009df6:	f003 030f 	and.w	r3, r3, #15
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d10c      	bne.n	8009e1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e04:	4a17      	ldr	r2, [pc, #92]	; (8009e64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e0c:	4a14      	ldr	r2, [pc, #80]	; (8009e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e0e:	68d2      	ldr	r2, [r2, #12]
 8009e10:	0a12      	lsrs	r2, r2, #8
 8009e12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e16:	fb02 f303 	mul.w	r3, r2, r3
 8009e1a:	617b      	str	r3, [r7, #20]
    break;
 8009e1c:	e00c      	b.n	8009e38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e1e:	4a12      	ldr	r2, [pc, #72]	; (8009e68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e26:	4a0e      	ldr	r2, [pc, #56]	; (8009e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e28:	68d2      	ldr	r2, [r2, #12]
 8009e2a:	0a12      	lsrs	r2, r2, #8
 8009e2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e30:	fb02 f303 	mul.w	r3, r2, r3
 8009e34:	617b      	str	r3, [r7, #20]
    break;
 8009e36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e38:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	0e5b      	lsrs	r3, r3, #25
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	3301      	adds	r3, #1
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009e52:	687b      	ldr	r3, [r7, #4]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	371c      	adds	r7, #28
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	40021000 	.word	0x40021000
 8009e64:	007a1200 	.word	0x007a1200
 8009e68:	00f42400 	.word	0x00f42400

08009e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e74:	2300      	movs	r3, #0
 8009e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e78:	2300      	movs	r3, #0
 8009e7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 8098 	beq.w	8009fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e8e:	4b43      	ldr	r3, [pc, #268]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10d      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e9a:	4b40      	ldr	r3, [pc, #256]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e9e:	4a3f      	ldr	r2, [pc, #252]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8009ea6:	4b3d      	ldr	r3, [pc, #244]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eae:	60bb      	str	r3, [r7, #8]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009eb6:	4b3a      	ldr	r3, [pc, #232]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a39      	ldr	r2, [pc, #228]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ec2:	f7fc fd2f 	bl	8006924 <HAL_GetTick>
 8009ec6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ec8:	e009      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009eca:	f7fc fd2b 	bl	8006924 <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d902      	bls.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	74fb      	strb	r3, [r7, #19]
        break;
 8009edc:	e005      	b.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ede:	4b30      	ldr	r3, [pc, #192]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0ef      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009eea:	7cfb      	ldrb	r3, [r7, #19]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d159      	bne.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009ef0:	4b2a      	ldr	r3, [pc, #168]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009efa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d01e      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d019      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009f0c:	4b23      	ldr	r3, [pc, #140]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f18:	4b20      	ldr	r3, [pc, #128]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1e:	4a1f      	ldr	r2, [pc, #124]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f28:	4b1c      	ldr	r3, [pc, #112]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2e:	4a1b      	ldr	r2, [pc, #108]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009f38:	4a18      	ldr	r2, [pc, #96]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d016      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4a:	f7fc fceb 	bl	8006924 <HAL_GetTick>
 8009f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f50:	e00b      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f52:	f7fc fce7 	bl	8006924 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d902      	bls.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	74fb      	strb	r3, [r7, #19]
            break;
 8009f68:	e006      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f6a:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0ec      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009f78:	7cfb      	ldrb	r3, [r7, #19]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10b      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f8c:	4903      	ldr	r1, [pc, #12]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009f94:	e008      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f96:	7cfb      	ldrb	r3, [r7, #19]
 8009f98:	74bb      	strb	r3, [r7, #18]
 8009f9a:	e005      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009f9c:	40021000 	.word	0x40021000
 8009fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa4:	7cfb      	ldrb	r3, [r7, #19]
 8009fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009fa8:	7c7b      	ldrb	r3, [r7, #17]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d105      	bne.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fae:	4baf      	ldr	r3, [pc, #700]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb2:	4aae      	ldr	r2, [pc, #696]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00a      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009fc6:	4ba9      	ldr	r3, [pc, #676]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fcc:	f023 0203 	bic.w	r2, r3, #3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	49a5      	ldr	r1, [pc, #660]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00a      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009fe8:	4ba0      	ldr	r3, [pc, #640]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fee:	f023 020c 	bic.w	r2, r3, #12
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	499d      	ldr	r1, [pc, #628]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00a      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a00a:	4b98      	ldr	r3, [pc, #608]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	4994      	ldr	r1, [pc, #592]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00a      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a02c:	4b8f      	ldr	r3, [pc, #572]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	498c      	ldr	r1, [pc, #560]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0310 	and.w	r3, r3, #16
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00a      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a04e:	4b87      	ldr	r3, [pc, #540]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	695b      	ldr	r3, [r3, #20]
 800a05c:	4983      	ldr	r1, [pc, #524]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0320 	and.w	r3, r3, #32
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00a      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a070:	4b7e      	ldr	r3, [pc, #504]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	497b      	ldr	r1, [pc, #492]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a080:	4313      	orrs	r3, r2
 800a082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a092:	4b76      	ldr	r3, [pc, #472]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a098:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	4972      	ldr	r1, [pc, #456]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00a      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a0b4:	4b6d      	ldr	r3, [pc, #436]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	496a      	ldr	r1, [pc, #424]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a0d6:	4b65      	ldr	r3, [pc, #404]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	4961      	ldr	r1, [pc, #388]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00a      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0f8:	4b5c      	ldr	r3, [pc, #368]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0fe:	f023 0203 	bic.w	r2, r3, #3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a106:	4959      	ldr	r1, [pc, #356]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a11a:	4b54      	ldr	r3, [pc, #336]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4950      	ldr	r1, [pc, #320]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a12a:	4313      	orrs	r3, r2
 800a12c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d015      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a13c:	4b4b      	ldr	r3, [pc, #300]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	4948      	ldr	r1, [pc, #288]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a15a:	d105      	bne.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a15c:	4b43      	ldr	r3, [pc, #268]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	4a42      	ldr	r2, [pc, #264]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a166:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a170:	2b00      	cmp	r3, #0
 800a172:	d015      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a174:	4b3d      	ldr	r3, [pc, #244]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a182:	493a      	ldr	r1, [pc, #232]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a184:	4313      	orrs	r3, r2
 800a186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a192:	d105      	bne.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a194:	4b35      	ldr	r3, [pc, #212]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	4a34      	ldr	r2, [pc, #208]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a19e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d015      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a1ac:	4b2f      	ldr	r3, [pc, #188]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ba:	492c      	ldr	r1, [pc, #176]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1ca:	d105      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1cc:	4b27      	ldr	r3, [pc, #156]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	4a26      	ldr	r2, [pc, #152]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d015      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1e4:	4b21      	ldr	r3, [pc, #132]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f2:	491e      	ldr	r1, [pc, #120]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a202:	d105      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a204:	4b19      	ldr	r3, [pc, #100]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	4a18      	ldr	r2, [pc, #96]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a20a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a20e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d015      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a21c:	4b13      	ldr	r3, [pc, #76]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	4910      	ldr	r1, [pc, #64]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a23a:	d105      	bne.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a23c:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d018      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a254:	4b05      	ldr	r3, [pc, #20]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a262:	4902      	ldr	r1, [pc, #8]	; (800a26c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a264:	4313      	orrs	r3, r2
 800a266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a26a:	e001      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800a26c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a278:	d105      	bne.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a27a:	4b21      	ldr	r3, [pc, #132]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	4a20      	ldr	r2, [pc, #128]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a284:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d015      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a292:	4b1b      	ldr	r3, [pc, #108]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a298:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a0:	4917      	ldr	r1, [pc, #92]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b0:	d105      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a2b2:	4b13      	ldr	r3, [pc, #76]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	4a12      	ldr	r2, [pc, #72]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a2b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2bc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d015      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a2cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2d8:	4909      	ldr	r1, [pc, #36]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2e8:	d105      	bne.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a2ea:	4b05      	ldr	r3, [pc, #20]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	4a04      	ldr	r2, [pc, #16]	; (800a300 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a2f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2f4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a2f6:	7cbb      	ldrb	r3, [r7, #18]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40021000 	.word	0x40021000

0800a304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e084      	b.n	800a420 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b00      	cmp	r3, #0
 800a326:	d106      	bne.n	800a336 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7fb fcbd 	bl	8005cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2202      	movs	r2, #2
 800a33a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a34c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a356:	d902      	bls.n	800a35e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	e002      	b.n	800a364 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a35e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a362:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a36c:	d007      	beq.n	800a37e <HAL_SPI_Init+0x7a>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a376:	d002      	beq.n	800a37e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10b      	bne.n	800a39e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a38e:	d903      	bls.n	800a398 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2202      	movs	r2, #2
 800a394:	631a      	str	r2, [r3, #48]	; 0x30
 800a396:	e002      	b.n	800a39e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	69db      	ldr	r3, [r3, #28]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	ea42 0103 	orr.w	r1, r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	0c1b      	lsrs	r3, r3, #16
 800a3de:	f003 0204 	and.w	r2, r3, #4
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	ea42 0103 	orr.w	r1, r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69da      	ldr	r2, [r3, #28]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a40e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e049      	b.n	800a4ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7fc f916 	bl	8006680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	f000 fc52 	bl	800ad10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d001      	beq.n	800a4f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e019      	b.n	800a524 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <HAL_TIM_Base_Start+0x58>)
 800a500:	4013      	ands	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b06      	cmp	r3, #6
 800a508:	d00b      	beq.n	800a522 <HAL_TIM_Base_Start+0x4a>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a510:	d007      	beq.n	800a522 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0201 	orr.w	r2, r2, #1
 800a520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	00010007 	.word	0x00010007

0800a534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	d001      	beq.n	800a54c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e021      	b.n	800a590 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0201 	orr.w	r2, r2, #1
 800a562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	4b0c      	ldr	r3, [pc, #48]	; (800a59c <HAL_TIM_Base_Start_IT+0x68>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b06      	cmp	r3, #6
 800a574:	d00b      	beq.n	800a58e <HAL_TIM_Base_Start_IT+0x5a>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a57c:	d007      	beq.n	800a58e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	00010007 	.word	0x00010007

0800a5a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68da      	ldr	r2, [r3, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0201 	bic.w	r2, r2, #1
 800a5b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6a1a      	ldr	r2, [r3, #32]
 800a5be:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10f      	bne.n	800a5e8 <HAL_TIM_Base_Stop_IT+0x48>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6a1a      	ldr	r2, [r3, #32]
 800a5ce:	f244 4344 	movw	r3, #17476	; 0x4444
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d107      	bne.n	800a5e8 <HAL_TIM_Base_Stop_IT+0x48>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0201 	bic.w	r2, r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e097      	b.n	800a742 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7fb ffce 	bl	80065c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	6812      	ldr	r2, [r2, #0]
 800a63e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800a642:	f023 0307 	bic.w	r3, r3, #7
 800a646:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3304      	adds	r3, #4
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f000 fb5c 	bl	800ad10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	4313      	orrs	r3, r2
 800a678:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a680:	f023 0303 	bic.w	r3, r3, #3
 800a684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	021b      	lsls	r3, r3, #8
 800a690:	4313      	orrs	r3, r2
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	4313      	orrs	r3, r2
 800a696:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a69e:	f023 030c 	bic.w	r3, r3, #12
 800a6a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	021b      	lsls	r3, r3, #8
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	011a      	lsls	r2, r3, #4
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	031b      	lsls	r3, r3, #12
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a6dc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a6e4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	f003 0302 	and.w	r3, r3, #2
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d122      	bne.n	800a7a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f003 0302 	and.w	r3, r3, #2
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d11b      	bne.n	800a7a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f06f 0202 	mvn.w	r2, #2
 800a776:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	f003 0303 	and.w	r3, r3, #3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 faa1 	bl	800acd4 <HAL_TIM_IC_CaptureCallback>
 800a792:	e005      	b.n	800a7a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fa93 	bl	800acc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 faa4 	bl	800ace8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d122      	bne.n	800a7fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b04      	cmp	r3, #4
 800a7c0:	d11b      	bne.n	800a7fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f06f 0204 	mvn.w	r2, #4
 800a7ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fa77 	bl	800acd4 <HAL_TIM_IC_CaptureCallback>
 800a7e6:	e005      	b.n	800a7f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fa69 	bl	800acc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fa7a 	bl	800ace8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0308 	and.w	r3, r3, #8
 800a804:	2b08      	cmp	r3, #8
 800a806:	d122      	bne.n	800a84e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0308 	and.w	r3, r3, #8
 800a812:	2b08      	cmp	r3, #8
 800a814:	d11b      	bne.n	800a84e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0208 	mvn.w	r2, #8
 800a81e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2204      	movs	r2, #4
 800a824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	69db      	ldr	r3, [r3, #28]
 800a82c:	f003 0303 	and.w	r3, r3, #3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fa4d 	bl	800acd4 <HAL_TIM_IC_CaptureCallback>
 800a83a:	e005      	b.n	800a848 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fa3f 	bl	800acc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa50 	bl	800ace8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f003 0310 	and.w	r3, r3, #16
 800a858:	2b10      	cmp	r3, #16
 800a85a:	d122      	bne.n	800a8a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f003 0310 	and.w	r3, r3, #16
 800a866:	2b10      	cmp	r3, #16
 800a868:	d11b      	bne.n	800a8a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f06f 0210 	mvn.w	r2, #16
 800a872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2208      	movs	r2, #8
 800a878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fa23 	bl	800acd4 <HAL_TIM_IC_CaptureCallback>
 800a88e:	e005      	b.n	800a89c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fa15 	bl	800acc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa26 	bl	800ace8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d10e      	bne.n	800a8ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d107      	bne.n	800a8ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f06f 0201 	mvn.w	r2, #1
 800a8c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f9ef 	bl	800acac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d8:	2b80      	cmp	r3, #128	; 0x80
 800a8da:	d10e      	bne.n	800a8fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8e6:	2b80      	cmp	r3, #128	; 0x80
 800a8e8:	d107      	bne.n	800a8fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fd5d 	bl	800b3b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a908:	d10e      	bne.n	800a928 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a914:	2b80      	cmp	r3, #128	; 0x80
 800a916:	d107      	bne.n	800a928 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fd50 	bl	800b3c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a932:	2b40      	cmp	r3, #64	; 0x40
 800a934:	d10e      	bne.n	800a954 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a940:	2b40      	cmp	r3, #64	; 0x40
 800a942:	d107      	bne.n	800a954 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a94c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f9d4 	bl	800acfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b20      	cmp	r3, #32
 800a960:	d10e      	bne.n	800a980 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	f003 0320 	and.w	r3, r3, #32
 800a96c:	2b20      	cmp	r3, #32
 800a96e:	d107      	bne.n	800a980 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f06f 0220 	mvn.w	r2, #32
 800a978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fd10 	bl	800b3a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a98a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a98e:	d10f      	bne.n	800a9b0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a99a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a99e:	d107      	bne.n	800a9b0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fd16 	bl	800b3dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9be:	d10f      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ce:	d107      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fd08 	bl	800b3f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9ee:	d10f      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9fe:	d107      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800aa08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fcfa 	bl	800b404 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa1e:	d10f      	bne.n	800aa40 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa2e:	d107      	bne.n	800aa40 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800aa38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fcec 	bl	800b418 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d101      	bne.n	800aa60 <HAL_TIM_ConfigClockSource+0x18>
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e0d2      	b.n	800ac06 <HAL_TIM_ConfigClockSource+0x1be>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800aa7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9c:	f000 80a9 	beq.w	800abf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800aaa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaa4:	d81a      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x94>
 800aaa6:	2b30      	cmp	r3, #48	; 0x30
 800aaa8:	f000 809a 	beq.w	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800aaac:	2b30      	cmp	r3, #48	; 0x30
 800aaae:	d809      	bhi.n	800aac4 <HAL_TIM_ConfigClockSource+0x7c>
 800aab0:	2b10      	cmp	r3, #16
 800aab2:	f000 8095 	beq.w	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	f000 8092 	beq.w	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 808f 	beq.w	800abe0 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800aac2:	e097      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aac4:	2b50      	cmp	r3, #80	; 0x50
 800aac6:	d05b      	beq.n	800ab80 <HAL_TIM_ConfigClockSource+0x138>
 800aac8:	2b50      	cmp	r3, #80	; 0x50
 800aaca:	d802      	bhi.n	800aad2 <HAL_TIM_ConfigClockSource+0x8a>
 800aacc:	2b40      	cmp	r3, #64	; 0x40
 800aace:	d077      	beq.n	800abc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800aad0:	e090      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aad2:	2b60      	cmp	r3, #96	; 0x60
 800aad4:	d064      	beq.n	800aba0 <HAL_TIM_ConfigClockSource+0x158>
 800aad6:	2b70      	cmp	r3, #112	; 0x70
 800aad8:	d028      	beq.n	800ab2c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800aada:	e08b      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aadc:	4a4c      	ldr	r2, [pc, #304]	; (800ac10 <HAL_TIM_ConfigClockSource+0x1c8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d07e      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800aae2:	4a4b      	ldr	r2, [pc, #300]	; (800ac10 <HAL_TIM_ConfigClockSource+0x1c8>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d810      	bhi.n	800ab0a <HAL_TIM_ConfigClockSource+0xc2>
 800aae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaec:	d078      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800aaee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaf2:	d803      	bhi.n	800aafc <HAL_TIM_ConfigClockSource+0xb4>
 800aaf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaf8:	d02f      	beq.n	800ab5a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800aafa:	e07b      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aafc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab00:	d06e      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800ab02:	4a44      	ldr	r2, [pc, #272]	; (800ac14 <HAL_TIM_ConfigClockSource+0x1cc>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d06b      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ab08:	e074      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ab0a:	4a43      	ldr	r2, [pc, #268]	; (800ac18 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d067      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800ab10:	4a41      	ldr	r2, [pc, #260]	; (800ac18 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d803      	bhi.n	800ab1e <HAL_TIM_ConfigClockSource+0xd6>
 800ab16:	4a41      	ldr	r2, [pc, #260]	; (800ac1c <HAL_TIM_ConfigClockSource+0x1d4>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d061      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ab1c:	e06a      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ab1e:	4a40      	ldr	r2, [pc, #256]	; (800ac20 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d05d      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
 800ab24:	4a3f      	ldr	r2, [pc, #252]	; (800ac24 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d05a      	beq.n	800abe0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ab2a:	e063      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	6899      	ldr	r1, [r3, #8]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f000 fac8 	bl	800b0d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	609a      	str	r2, [r3, #8]
      break;
 800ab58:	e04c      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6818      	ldr	r0, [r3, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	6899      	ldr	r1, [r3, #8]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	f000 fab1 	bl	800b0d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	689a      	ldr	r2, [r3, #8]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab7c:	609a      	str	r2, [r3, #8]
      break;
 800ab7e:	e039      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6818      	ldr	r0, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	6859      	ldr	r1, [r3, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f000 fa23 	bl	800afd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2150      	movs	r1, #80	; 0x50
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fa7c 	bl	800b096 <TIM_ITRx_SetConfig>
      break;
 800ab9e:	e029      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	6859      	ldr	r1, [r3, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	461a      	mov	r2, r3
 800abae:	f000 fa42 	bl	800b036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2160      	movs	r1, #96	; 0x60
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fa6c 	bl	800b096 <TIM_ITRx_SetConfig>
      break;
 800abbe:	e019      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	6859      	ldr	r1, [r3, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	461a      	mov	r2, r3
 800abce:	f000 fa03 	bl	800afd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2140      	movs	r1, #64	; 0x40
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fa5c 	bl	800b096 <TIM_ITRx_SetConfig>
      break;
 800abde:	e009      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f000 fa53 	bl	800b096 <TIM_ITRx_SetConfig>
      break;
 800abf0:	e000      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800abf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	00100030 	.word	0x00100030
 800ac14:	00100020 	.word	0x00100020
 800ac18:	00100050 	.word	0x00100050
 800ac1c:	00100040 	.word	0x00100040
 800ac20:	00100060 	.word	0x00100060
 800ac24:	00100070 	.word	0x00100070

0800ac28 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d101      	bne.n	800ac40 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	e031      	b.n	800aca4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f904 	bl	800ae60 <TIM_SlaveTimer_SetConfig>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d009      	beq.n	800ac72 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e018      	b.n	800aca4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68da      	ldr	r2, [r3, #12]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac80:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac90:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a46      	ldr	r2, [pc, #280]	; (800ae3c <TIM_Base_SetConfig+0x12c>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d017      	beq.n	800ad58 <TIM_Base_SetConfig+0x48>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2e:	d013      	beq.n	800ad58 <TIM_Base_SetConfig+0x48>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a43      	ldr	r2, [pc, #268]	; (800ae40 <TIM_Base_SetConfig+0x130>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d00f      	beq.n	800ad58 <TIM_Base_SetConfig+0x48>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a42      	ldr	r2, [pc, #264]	; (800ae44 <TIM_Base_SetConfig+0x134>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d00b      	beq.n	800ad58 <TIM_Base_SetConfig+0x48>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a41      	ldr	r2, [pc, #260]	; (800ae48 <TIM_Base_SetConfig+0x138>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d007      	beq.n	800ad58 <TIM_Base_SetConfig+0x48>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a40      	ldr	r2, [pc, #256]	; (800ae4c <TIM_Base_SetConfig+0x13c>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d003      	beq.n	800ad58 <TIM_Base_SetConfig+0x48>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a3f      	ldr	r2, [pc, #252]	; (800ae50 <TIM_Base_SetConfig+0x140>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d108      	bne.n	800ad6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a33      	ldr	r2, [pc, #204]	; (800ae3c <TIM_Base_SetConfig+0x12c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d023      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad78:	d01f      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a30      	ldr	r2, [pc, #192]	; (800ae40 <TIM_Base_SetConfig+0x130>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d01b      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a2f      	ldr	r2, [pc, #188]	; (800ae44 <TIM_Base_SetConfig+0x134>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d017      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2e      	ldr	r2, [pc, #184]	; (800ae48 <TIM_Base_SetConfig+0x138>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d013      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2d      	ldr	r2, [pc, #180]	; (800ae4c <TIM_Base_SetConfig+0x13c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00f      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a2d      	ldr	r2, [pc, #180]	; (800ae54 <TIM_Base_SetConfig+0x144>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d00b      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a2c      	ldr	r2, [pc, #176]	; (800ae58 <TIM_Base_SetConfig+0x148>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d007      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a2b      	ldr	r2, [pc, #172]	; (800ae5c <TIM_Base_SetConfig+0x14c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d003      	beq.n	800adba <TIM_Base_SetConfig+0xaa>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a26      	ldr	r2, [pc, #152]	; (800ae50 <TIM_Base_SetConfig+0x140>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d108      	bne.n	800adcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	4313      	orrs	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	4313      	orrs	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	689a      	ldr	r2, [r3, #8]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a12      	ldr	r2, [pc, #72]	; (800ae3c <TIM_Base_SetConfig+0x12c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d013      	beq.n	800ae20 <TIM_Base_SetConfig+0x110>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a14      	ldr	r2, [pc, #80]	; (800ae4c <TIM_Base_SetConfig+0x13c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00f      	beq.n	800ae20 <TIM_Base_SetConfig+0x110>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a14      	ldr	r2, [pc, #80]	; (800ae54 <TIM_Base_SetConfig+0x144>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d00b      	beq.n	800ae20 <TIM_Base_SetConfig+0x110>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a13      	ldr	r2, [pc, #76]	; (800ae58 <TIM_Base_SetConfig+0x148>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d007      	beq.n	800ae20 <TIM_Base_SetConfig+0x110>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a12      	ldr	r2, [pc, #72]	; (800ae5c <TIM_Base_SetConfig+0x14c>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d003      	beq.n	800ae20 <TIM_Base_SetConfig+0x110>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a0d      	ldr	r2, [pc, #52]	; (800ae50 <TIM_Base_SetConfig+0x140>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d103      	bne.n	800ae28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	691a      	ldr	r2, [r3, #16]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	615a      	str	r2, [r3, #20]
}
 800ae2e:	bf00      	nop
 800ae30:	3714      	adds	r7, #20
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	40012c00 	.word	0x40012c00
 800ae40:	40000400 	.word	0x40000400
 800ae44:	40000800 	.word	0x40000800
 800ae48:	40000c00 	.word	0x40000c00
 800ae4c:	40013400 	.word	0x40013400
 800ae50:	40015000 	.word	0x40015000
 800ae54:	40014000 	.word	0x40014000
 800ae58:	40014400 	.word	0x40014400
 800ae5c:	40014800 	.word	0x40014800

0800ae60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae7c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae8e:	f023 0307 	bic.w	r3, r3, #7
 800ae92:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	2b70      	cmp	r3, #112	; 0x70
 800aeac:	d034      	beq.n	800af18 <TIM_SlaveTimer_SetConfig+0xb8>
 800aeae:	2b70      	cmp	r3, #112	; 0x70
 800aeb0:	d811      	bhi.n	800aed6 <TIM_SlaveTimer_SetConfig+0x76>
 800aeb2:	2b30      	cmp	r3, #48	; 0x30
 800aeb4:	d07d      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800aeb6:	2b30      	cmp	r3, #48	; 0x30
 800aeb8:	d806      	bhi.n	800aec8 <TIM_SlaveTimer_SetConfig+0x68>
 800aeba:	2b10      	cmp	r3, #16
 800aebc:	d079      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	d077      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d075      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800aec6:	e075      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800aec8:	2b50      	cmp	r3, #80	; 0x50
 800aeca:	d05e      	beq.n	800af8a <TIM_SlaveTimer_SetConfig+0x12a>
 800aecc:	2b60      	cmp	r3, #96	; 0x60
 800aece:	d066      	beq.n	800af9e <TIM_SlaveTimer_SetConfig+0x13e>
 800aed0:	2b40      	cmp	r3, #64	; 0x40
 800aed2:	d02c      	beq.n	800af2e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800aed4:	e06e      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800aed6:	4a3a      	ldr	r2, [pc, #232]	; (800afc0 <TIM_SlaveTimer_SetConfig+0x160>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d06a      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800aedc:	4a38      	ldr	r2, [pc, #224]	; (800afc0 <TIM_SlaveTimer_SetConfig+0x160>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d809      	bhi.n	800aef6 <TIM_SlaveTimer_SetConfig+0x96>
 800aee2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aee6:	d064      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800aee8:	4a36      	ldr	r2, [pc, #216]	; (800afc4 <TIM_SlaveTimer_SetConfig+0x164>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d061      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800aeee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aef2:	d05e      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800aef4:	e05e      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800aef6:	4a34      	ldr	r2, [pc, #208]	; (800afc8 <TIM_SlaveTimer_SetConfig+0x168>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d05a      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800aefc:	4a32      	ldr	r2, [pc, #200]	; (800afc8 <TIM_SlaveTimer_SetConfig+0x168>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d803      	bhi.n	800af0a <TIM_SlaveTimer_SetConfig+0xaa>
 800af02:	4a32      	ldr	r2, [pc, #200]	; (800afcc <TIM_SlaveTimer_SetConfig+0x16c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d054      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800af08:	e054      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800af0a:	4a31      	ldr	r2, [pc, #196]	; (800afd0 <TIM_SlaveTimer_SetConfig+0x170>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d050      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
 800af10:	4a30      	ldr	r2, [pc, #192]	; (800afd4 <TIM_SlaveTimer_SetConfig+0x174>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d04d      	beq.n	800afb2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800af16:	e04d      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	68d9      	ldr	r1, [r3, #12]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	689a      	ldr	r2, [r3, #8]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	f000 f8d2 	bl	800b0d0 <TIM_ETR_SetConfig>
      break;
 800af2c:	e042      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b05      	cmp	r3, #5
 800af34:	d004      	beq.n	800af40 <TIM_SlaveTimer_SetConfig+0xe0>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800af3e:	d101      	bne.n	800af44 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e038      	b.n	800afb6 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6a1a      	ldr	r2, [r3, #32]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0201 	bic.w	r2, r2, #1
 800af5a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af6a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	011b      	lsls	r3, r3, #4
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	4313      	orrs	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	621a      	str	r2, [r3, #32]
      break;
 800af88:	e014      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	6899      	ldr	r1, [r3, #8]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	461a      	mov	r2, r3
 800af98:	f000 f81e 	bl	800afd8 <TIM_TI1_ConfigInputStage>
      break;
 800af9c:	e00a      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6899      	ldr	r1, [r3, #8]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	461a      	mov	r2, r3
 800afac:	f000 f843 	bl	800b036 <TIM_TI2_ConfigInputStage>
      break;
 800afb0:	e000      	b.n	800afb4 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800afb2:	bf00      	nop
  }
  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	00100030 	.word	0x00100030
 800afc4:	00100020 	.word	0x00100020
 800afc8:	00100050 	.word	0x00100050
 800afcc:	00100040 	.word	0x00100040
 800afd0:	00100060 	.word	0x00100060
 800afd4:	00100070 	.word	0x00100070

0800afd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	f023 0201 	bic.w	r2, r3, #1
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	011b      	lsls	r3, r3, #4
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f023 030a 	bic.w	r3, r3, #10
 800b014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	697a      	ldr	r2, [r7, #20]
 800b028:	621a      	str	r2, [r3, #32]
}
 800b02a:	bf00      	nop
 800b02c:	371c      	adds	r7, #28
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b036:	b480      	push	{r7}
 800b038:	b087      	sub	sp, #28
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	f023 0210 	bic.w	r2, r3, #16
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	031b      	lsls	r3, r3, #12
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	4313      	orrs	r3, r2
 800b06a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	011b      	lsls	r3, r3, #4
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	621a      	str	r2, [r3, #32]
}
 800b08a:	bf00      	nop
 800b08c:	371c      	adds	r7, #28
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b096:	b480      	push	{r7}
 800b098:	b085      	sub	sp, #20
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b0ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	f043 0307 	orr.w	r3, r3, #7
 800b0bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	609a      	str	r2, [r3, #8]
}
 800b0c4:	bf00      	nop
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	021a      	lsls	r2, r3, #8
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	609a      	str	r2, [r3, #8]
}
 800b104:	bf00      	nop
 800b106:	371c      	adds	r7, #28
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b120:	2b01      	cmp	r3, #1
 800b122:	d101      	bne.n	800b128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b124:	2302      	movs	r3, #2
 800b126:	e074      	b.n	800b212 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a34      	ldr	r2, [pc, #208]	; (800b220 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d009      	beq.n	800b166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a33      	ldr	r2, [pc, #204]	; (800b224 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d004      	beq.n	800b166 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a31      	ldr	r2, [pc, #196]	; (800b228 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d108      	bne.n	800b178 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b16c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a21      	ldr	r2, [pc, #132]	; (800b220 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d022      	beq.n	800b1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a8:	d01d      	beq.n	800b1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a1f      	ldr	r2, [pc, #124]	; (800b22c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d018      	beq.n	800b1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a1d      	ldr	r2, [pc, #116]	; (800b230 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d013      	beq.n	800b1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a1c      	ldr	r2, [pc, #112]	; (800b234 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d00e      	beq.n	800b1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a15      	ldr	r2, [pc, #84]	; (800b224 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d009      	beq.n	800b1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a18      	ldr	r2, [pc, #96]	; (800b238 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d004      	beq.n	800b1e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a11      	ldr	r2, [pc, #68]	; (800b228 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d10c      	bne.n	800b200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	40012c00 	.word	0x40012c00
 800b224:	40013400 	.word	0x40013400
 800b228:	40015000 	.word	0x40015000
 800b22c:	40000400 	.word	0x40000400
 800b230:	40000800 	.word	0x40000800
 800b234:	40000c00 	.word	0x40000c00
 800b238:	40014000 	.word	0x40014000

0800b23c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b250:	2b01      	cmp	r3, #1
 800b252:	d101      	bne.n	800b258 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b254:	2302      	movs	r3, #2
 800b256:	e096      	b.n	800b386 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	4313      	orrs	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	4313      	orrs	r3, r2
 800b288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4313      	orrs	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	041b      	lsls	r3, r3, #16
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a2f      	ldr	r2, [pc, #188]	; (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d009      	beq.n	800b2f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a2d      	ldr	r2, [pc, #180]	; (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d004      	beq.n	800b2f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a2c      	ldr	r2, [pc, #176]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d106      	bne.n	800b2fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a24      	ldr	r2, [pc, #144]	; (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d009      	beq.n	800b31c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a22      	ldr	r2, [pc, #136]	; (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d004      	beq.n	800b31c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a21      	ldr	r2, [pc, #132]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d12b      	bne.n	800b374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	051b      	lsls	r3, r3, #20
 800b328:	4313      	orrs	r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	4313      	orrs	r3, r2
 800b338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b344:	4313      	orrs	r3, r2
 800b346:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a11      	ldr	r2, [pc, #68]	; (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d009      	beq.n	800b366 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a10      	ldr	r2, [pc, #64]	; (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d004      	beq.n	800b366 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a0e      	ldr	r2, [pc, #56]	; (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d106      	bne.n	800b374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b370:	4313      	orrs	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	40012c00 	.word	0x40012c00
 800b398:	40013400 	.word	0x40013400
 800b39c:	40015000 	.word	0x40015000

0800b3a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <LL_EXTI_EnableIT_0_31>:
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <LL_EXTI_EnableIT_0_31+0x20>)
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	4904      	ldr	r1, [pc, #16]	; (800b44c <LL_EXTI_EnableIT_0_31+0x20>)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	600b      	str	r3, [r1, #0]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	40010400 	.word	0x40010400

0800b450 <LL_EXTI_EnableIT_32_63>:
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <LL_EXTI_EnableIT_32_63+0x20>)
 800b45a:	6a1a      	ldr	r2, [r3, #32]
 800b45c:	4904      	ldr	r1, [pc, #16]	; (800b470 <LL_EXTI_EnableIT_32_63+0x20>)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4313      	orrs	r3, r2
 800b462:	620b      	str	r3, [r1, #32]
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	40010400 	.word	0x40010400

0800b474 <LL_EXTI_DisableIT_0_31>:
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <LL_EXTI_DisableIT_0_31+0x24>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	43db      	mvns	r3, r3
 800b484:	4904      	ldr	r1, [pc, #16]	; (800b498 <LL_EXTI_DisableIT_0_31+0x24>)
 800b486:	4013      	ands	r3, r2
 800b488:	600b      	str	r3, [r1, #0]
}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	40010400 	.word	0x40010400

0800b49c <LL_EXTI_DisableIT_32_63>:
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800b4a4:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <LL_EXTI_DisableIT_32_63+0x24>)
 800b4a6:	6a1a      	ldr	r2, [r3, #32]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	43db      	mvns	r3, r3
 800b4ac:	4904      	ldr	r1, [pc, #16]	; (800b4c0 <LL_EXTI_DisableIT_32_63+0x24>)
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	620b      	str	r3, [r1, #32]
}
 800b4b2:	bf00      	nop
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	40010400 	.word	0x40010400

0800b4c4 <LL_EXTI_EnableEvent_0_31>:
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800b4cc:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	4904      	ldr	r1, [pc, #16]	; (800b4e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	604b      	str	r3, [r1, #4]
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	40010400 	.word	0x40010400

0800b4e8 <LL_EXTI_EnableEvent_32_63>:
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <LL_EXTI_EnableEvent_32_63+0x20>)
 800b4f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4f4:	4904      	ldr	r1, [pc, #16]	; (800b508 <LL_EXTI_EnableEvent_32_63+0x20>)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	40010400 	.word	0x40010400

0800b50c <LL_EXTI_DisableEvent_0_31>:
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <LL_EXTI_DisableEvent_0_31+0x24>)
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	43db      	mvns	r3, r3
 800b51c:	4904      	ldr	r1, [pc, #16]	; (800b530 <LL_EXTI_DisableEvent_0_31+0x24>)
 800b51e:	4013      	ands	r3, r2
 800b520:	604b      	str	r3, [r1, #4]
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	40010400 	.word	0x40010400

0800b534 <LL_EXTI_DisableEvent_32_63>:
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <LL_EXTI_DisableEvent_32_63+0x24>)
 800b53e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	43db      	mvns	r3, r3
 800b544:	4904      	ldr	r1, [pc, #16]	; (800b558 <LL_EXTI_DisableEvent_32_63+0x24>)
 800b546:	4013      	ands	r3, r2
 800b548:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b54a:	bf00      	nop
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	40010400 	.word	0x40010400

0800b55c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800b564:	4b05      	ldr	r3, [pc, #20]	; (800b57c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	4904      	ldr	r1, [pc, #16]	; (800b57c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	608b      	str	r3, [r1, #8]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	40010400 	.word	0x40010400

0800b580 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b58a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b58c:	4904      	ldr	r1, [pc, #16]	; (800b5a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4313      	orrs	r3, r2
 800b592:	628b      	str	r3, [r1, #40]	; 0x28
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	40010400 	.word	0x40010400

0800b5a4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800b5ac:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b5ae:	689a      	ldr	r2, [r3, #8]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	43db      	mvns	r3, r3
 800b5b4:	4904      	ldr	r1, [pc, #16]	; (800b5c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	608b      	str	r3, [r1, #8]
}
 800b5ba:	bf00      	nop
 800b5bc:	370c      	adds	r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	40010400 	.word	0x40010400

0800b5cc <LL_EXTI_DisableRisingTrig_32_63>:
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800b5d4:	4b06      	ldr	r3, [pc, #24]	; (800b5f0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800b5d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	43db      	mvns	r3, r3
 800b5dc:	4904      	ldr	r1, [pc, #16]	; (800b5f0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800b5de:	4013      	ands	r3, r2
 800b5e0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800b5e2:	bf00      	nop
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	40010400 	.word	0x40010400

0800b5f4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800b5fc:	4b05      	ldr	r3, [pc, #20]	; (800b614 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	4904      	ldr	r1, [pc, #16]	; (800b614 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4313      	orrs	r3, r2
 800b606:	60cb      	str	r3, [r1, #12]
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	40010400 	.word	0x40010400

0800b618 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800b620:	4b05      	ldr	r3, [pc, #20]	; (800b638 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800b622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b624:	4904      	ldr	r1, [pc, #16]	; (800b638 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4313      	orrs	r3, r2
 800b62a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	40010400 	.word	0x40010400

0800b63c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800b644:	4b06      	ldr	r3, [pc, #24]	; (800b660 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b646:	68da      	ldr	r2, [r3, #12]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	43db      	mvns	r3, r3
 800b64c:	4904      	ldr	r1, [pc, #16]	; (800b660 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b64e:	4013      	ands	r3, r2
 800b650:	60cb      	str	r3, [r1, #12]
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	40010400 	.word	0x40010400

0800b664 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800b66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	43db      	mvns	r3, r3
 800b674:	4904      	ldr	r1, [pc, #16]	; (800b688 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800b676:	4013      	ands	r3, r2
 800b678:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	40010400 	.word	0x40010400

0800b68c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800b694:	2300      	movs	r3, #0
 800b696:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	7a1b      	ldrb	r3, [r3, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 80c8 	beq.w	800b832 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d05d      	beq.n	800b766 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	7a5b      	ldrb	r3, [r3, #9]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d00e      	beq.n	800b6d0 <LL_EXTI_Init+0x44>
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d017      	beq.n	800b6e6 <LL_EXTI_Init+0x5a>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d120      	bne.n	800b6fc <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff ff24 	bl	800b50c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff feaf 	bl	800b42c <LL_EXTI_EnableIT_0_31>
          break;
 800b6ce:	e018      	b.n	800b702 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff fecd 	bl	800b474 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fef0 	bl	800b4c4 <LL_EXTI_EnableEvent_0_31>
          break;
 800b6e4:	e00d      	b.n	800b702 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff fe9e 	bl	800b42c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff fee5 	bl	800b4c4 <LL_EXTI_EnableEvent_0_31>
          break;
 800b6fa:	e002      	b.n	800b702 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	60fb      	str	r3, [r7, #12]
          break;
 800b700:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7a9b      	ldrb	r3, [r3, #10]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d02d      	beq.n	800b766 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7a9b      	ldrb	r3, [r3, #10]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d00e      	beq.n	800b730 <LL_EXTI_Init+0xa4>
 800b712:	2b03      	cmp	r3, #3
 800b714:	d017      	beq.n	800b746 <LL_EXTI_Init+0xba>
 800b716:	2b01      	cmp	r3, #1
 800b718:	d120      	bne.n	800b75c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7ff ff8c 	bl	800b63c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff ff17 	bl	800b55c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800b72e:	e01b      	b.n	800b768 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff ff35 	bl	800b5a4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff ff58 	bl	800b5f4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800b744:	e010      	b.n	800b768 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff ff06 	bl	800b55c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff ff4d 	bl	800b5f4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800b75a:	e005      	b.n	800b768 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f043 0302 	orr.w	r3, r3, #2
 800b762:	60fb      	str	r3, [r7, #12]
            break;
 800b764:	e000      	b.n	800b768 <LL_EXTI_Init+0xdc>
        }
      }
 800b766:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d075      	beq.n	800b85c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	7a5b      	ldrb	r3, [r3, #9]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d00e      	beq.n	800b796 <LL_EXTI_Init+0x10a>
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d017      	beq.n	800b7ac <LL_EXTI_Init+0x120>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d120      	bne.n	800b7c2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fed5 	bl	800b534 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff fe5e 	bl	800b450 <LL_EXTI_EnableIT_32_63>
          break;
 800b794:	e01a      	b.n	800b7cc <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fe7e 	bl	800b49c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff fe9f 	bl	800b4e8 <LL_EXTI_EnableEvent_32_63>
          break;
 800b7aa:	e00f      	b.n	800b7cc <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff fe4d 	bl	800b450 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7ff fe94 	bl	800b4e8 <LL_EXTI_EnableEvent_32_63>
          break;
 800b7c0:	e004      	b.n	800b7cc <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f043 0304 	orr.w	r3, r3, #4
 800b7c8:	60fb      	str	r3, [r7, #12]
          break;
 800b7ca:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	7a9b      	ldrb	r3, [r3, #10]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d043      	beq.n	800b85c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7a9b      	ldrb	r3, [r3, #10]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d00e      	beq.n	800b7fa <LL_EXTI_Init+0x16e>
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d017      	beq.n	800b810 <LL_EXTI_Init+0x184>
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d120      	bne.n	800b826 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff ff3b 	bl	800b664 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff fec4 	bl	800b580 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800b7f8:	e031      	b.n	800b85e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fee4 	bl	800b5cc <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff ff05 	bl	800b618 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800b80e:	e026      	b.n	800b85e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff feb3 	bl	800b580 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff fefa 	bl	800b618 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800b824:	e01b      	b.n	800b85e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f043 0305 	orr.w	r3, r3, #5
 800b82c:	60fb      	str	r3, [r7, #12]
            break;
 800b82e:	bf00      	nop
 800b830:	e015      	b.n	800b85e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff fe1c 	bl	800b474 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff fe63 	bl	800b50c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff fe26 	bl	800b49c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff fe6d 	bl	800b534 <LL_EXTI_DisableEvent_32_63>
 800b85a:	e000      	b.n	800b85e <LL_EXTI_Init+0x1d2>
      }
 800b85c:	bf00      	nop
  }

  return status;
 800b85e:	68fb      	ldr	r3, [r7, #12]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <LL_GPIO_SetPinMode>:
{
 800b868:	b480      	push	{r7}
 800b86a:	b089      	sub	sp, #36	; 0x24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	fa93 f3a3 	rbit	r3, r3
 800b882:	613b      	str	r3, [r7, #16]
  return result;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	fab3 f383 	clz	r3, r3
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	2103      	movs	r1, #3
 800b890:	fa01 f303 	lsl.w	r3, r1, r3
 800b894:	43db      	mvns	r3, r3
 800b896:	401a      	ands	r2, r3
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	fa93 f3a3 	rbit	r3, r3
 800b8a2:	61bb      	str	r3, [r7, #24]
  return result;
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	fab3 f383 	clz	r3, r3
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	6879      	ldr	r1, [r7, #4]
 800b8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	601a      	str	r2, [r3, #0]
}
 800b8ba:	bf00      	nop
 800b8bc:	3724      	adds	r7, #36	; 0x24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <LL_GPIO_SetPinOutputType>:
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b085      	sub	sp, #20
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	43db      	mvns	r3, r3
 800b8da:	401a      	ands	r2, r3
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	fb01 f303 	mul.w	r3, r1, r3
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	605a      	str	r2, [r3, #4]
}
 800b8ea:	bf00      	nop
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <LL_GPIO_SetPinSpeed>:
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b089      	sub	sp, #36	; 0x24
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	fa93 f3a3 	rbit	r3, r3
 800b910:	613b      	str	r3, [r7, #16]
  return result;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	fab3 f383 	clz	r3, r3
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	005b      	lsls	r3, r3, #1
 800b91c:	2103      	movs	r1, #3
 800b91e:	fa01 f303 	lsl.w	r3, r1, r3
 800b922:	43db      	mvns	r3, r3
 800b924:	401a      	ands	r2, r3
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	fa93 f3a3 	rbit	r3, r3
 800b930:	61bb      	str	r3, [r7, #24]
  return result;
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	fab3 f383 	clz	r3, r3
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	fa01 f303 	lsl.w	r3, r1, r3
 800b942:	431a      	orrs	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	609a      	str	r2, [r3, #8]
}
 800b948:	bf00      	nop
 800b94a:	3724      	adds	r7, #36	; 0x24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <LL_GPIO_SetPinPull>:
{
 800b954:	b480      	push	{r7}
 800b956:	b089      	sub	sp, #36	; 0x24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	fa93 f3a3 	rbit	r3, r3
 800b96e:	613b      	str	r3, [r7, #16]
  return result;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	fab3 f383 	clz	r3, r3
 800b976:	b2db      	uxtb	r3, r3
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	2103      	movs	r1, #3
 800b97c:	fa01 f303 	lsl.w	r3, r1, r3
 800b980:	43db      	mvns	r3, r3
 800b982:	401a      	ands	r2, r3
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	fa93 f3a3 	rbit	r3, r3
 800b98e:	61bb      	str	r3, [r7, #24]
  return result;
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	fab3 f383 	clz	r3, r3
 800b996:	b2db      	uxtb	r3, r3
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	6879      	ldr	r1, [r7, #4]
 800b99c:	fa01 f303 	lsl.w	r3, r1, r3
 800b9a0:	431a      	orrs	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	60da      	str	r2, [r3, #12]
}
 800b9a6:	bf00      	nop
 800b9a8:	3724      	adds	r7, #36	; 0x24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <LL_GPIO_SetAFPin_0_7>:
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b089      	sub	sp, #36	; 0x24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6a1a      	ldr	r2, [r3, #32]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	fa93 f3a3 	rbit	r3, r3
 800b9cc:	613b      	str	r3, [r7, #16]
  return result;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	fab3 f383 	clz	r3, r3
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	210f      	movs	r1, #15
 800b9da:	fa01 f303 	lsl.w	r3, r1, r3
 800b9de:	43db      	mvns	r3, r3
 800b9e0:	401a      	ands	r2, r3
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	fa93 f3a3 	rbit	r3, r3
 800b9ec:	61bb      	str	r3, [r7, #24]
  return result;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	fab3 f383 	clz	r3, r3
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	6879      	ldr	r1, [r7, #4]
 800b9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	621a      	str	r2, [r3, #32]
}
 800ba04:	bf00      	nop
 800ba06:	3724      	adds	r7, #36	; 0x24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <LL_GPIO_SetAFPin_8_15>:
{
 800ba10:	b480      	push	{r7}
 800ba12:	b089      	sub	sp, #36	; 0x24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	0a1b      	lsrs	r3, r3, #8
 800ba24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	fa93 f3a3 	rbit	r3, r3
 800ba2c:	613b      	str	r3, [r7, #16]
  return result;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	fab3 f383 	clz	r3, r3
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	210f      	movs	r1, #15
 800ba3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3e:	43db      	mvns	r3, r3
 800ba40:	401a      	ands	r2, r3
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	0a1b      	lsrs	r3, r3, #8
 800ba46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	fa93 f3a3 	rbit	r3, r3
 800ba4e:	61bb      	str	r3, [r7, #24]
  return result;
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	fab3 f383 	clz	r3, r3
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	6879      	ldr	r1, [r7, #4]
 800ba5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba60:	431a      	orrs	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ba66:	bf00      	nop
 800ba68:	3724      	adds	r7, #36	; 0x24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b086      	sub	sp, #24
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	fa93 f3a3 	rbit	r3, r3
 800ba88:	60bb      	str	r3, [r7, #8]
  return result;
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	fab3 f383 	clz	r3, r3
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ba94:	e040      	b.n	800bb18 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	fa01 f303 	lsl.w	r3, r1, r3
 800baa2:	4013      	ands	r3, r2
 800baa4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d032      	beq.n	800bb12 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6939      	ldr	r1, [r7, #16]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff fed7 	bl	800b868 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d003      	beq.n	800baca <LL_GPIO_Init+0x58>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d106      	bne.n	800bad8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	461a      	mov	r2, r3
 800bad0:	6939      	ldr	r1, [r7, #16]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff ff0f 	bl	800b8f6 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	461a      	mov	r2, r3
 800bade:	6939      	ldr	r1, [r7, #16]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff ff37 	bl	800b954 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	2b02      	cmp	r3, #2
 800baec:	d111      	bne.n	800bb12 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	2bff      	cmp	r3, #255	; 0xff
 800baf2:	d807      	bhi.n	800bb04 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	461a      	mov	r2, r3
 800bafa:	6939      	ldr	r1, [r7, #16]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff ff58 	bl	800b9b2 <LL_GPIO_SetAFPin_0_7>
 800bb02:	e006      	b.n	800bb12 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	695b      	ldr	r3, [r3, #20]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	6939      	ldr	r1, [r7, #16]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff ff7f 	bl	800ba10 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	3301      	adds	r3, #1
 800bb16:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1b7      	bne.n	800ba96 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d003      	beq.n	800bb36 <LL_GPIO_Init+0xc4>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d107      	bne.n	800bb46 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	6819      	ldr	r1, [r3, #0]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7ff fec0 	bl	800b8c6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800bb50:	b590      	push	{r4, r7, lr}
 800bb52:	b087      	sub	sp, #28
 800bb54:	af02      	add	r7, sp, #8
 800bb56:	4604      	mov	r4, r0
 800bb58:	4608      	mov	r0, r1
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4623      	mov	r3, r4
 800bb60:	80fb      	strh	r3, [r7, #6]
 800bb62:	4603      	mov	r3, r0
 800bb64:	80bb      	strh	r3, [r7, #4]
 800bb66:	460b      	mov	r3, r1
 800bb68:	807b      	strh	r3, [r7, #2]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800bb72:	7bfa      	ldrb	r2, [r7, #15]
 800bb74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d93a      	bls.n	800bbf2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800bb7c:	88ba      	ldrh	r2, [r7, #4]
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	441a      	add	r2, r3
 800bb82:	88b9      	ldrh	r1, [r7, #4]
 800bb84:	883b      	ldrh	r3, [r7, #0]
 800bb86:	4419      	add	r1, r3
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	1acb      	subs	r3, r1, r3
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	f000 8090 	beq.w	800bcb2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800bb92:	88fa      	ldrh	r2, [r7, #6]
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	441a      	add	r2, r3
 800bb98:	88f9      	ldrh	r1, [r7, #6]
 800bb9a:	887b      	ldrh	r3, [r7, #2]
 800bb9c:	4419      	add	r1, r3
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	1acb      	subs	r3, r1, r3
 800bba2:	429a      	cmp	r2, r3
 800bba4:	f000 8085 	beq.w	800bcb2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	88fb      	ldrh	r3, [r7, #6]
 800bbae:	4413      	add	r3, r2
 800bbb0:	b298      	uxth	r0, r3
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	88bb      	ldrh	r3, [r7, #4]
 800bbb8:	4413      	add	r3, r2
 800bbba:	b299      	uxth	r1, r3
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	887a      	ldrh	r2, [r7, #2]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	3301      	adds	r3, #1
 800bbcc:	b29c      	uxth	r4, r3
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	883a      	ldrh	r2, [r7, #0]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	3301      	adds	r3, #1
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	8c3b      	ldrh	r3, [r7, #32]
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	4622      	mov	r2, r4
 800bbec:	f000 fcd6 	bl	800c59c <ILI9341_Draw_Rectangle>
				goto finish;
 800bbf0:	e060      	b.n	800bcb4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	88fb      	ldrh	r3, [r7, #6]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	b298      	uxth	r0, r3
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	88bb      	ldrh	r3, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	b299      	uxth	r1, r3
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	887a      	ldrh	r2, [r7, #2]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	f000 fa81 	bl	800c120 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	88fb      	ldrh	r3, [r7, #6]
 800bc24:	4413      	add	r3, r2
 800bc26:	b298      	uxth	r0, r3
										(y + h) - b,
 800bc28:	88ba      	ldrh	r2, [r7, #4]
 800bc2a:	883b      	ldrh	r3, [r7, #0]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	b299      	uxth	r1, r3
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	887a      	ldrh	r2, [r7, #2]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	f000 fa6a 	bl	800c120 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	88fb      	ldrh	r3, [r7, #6]
 800bc52:	4413      	add	r3, r2
 800bc54:	b298      	uxth	r0, r3
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	88bb      	ldrh	r3, [r7, #4]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	b299      	uxth	r1, r3
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	883a      	ldrh	r2, [r7, #0]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f000 fa9c 	bl	800c1b0 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800bc78:	88fa      	ldrh	r2, [r7, #6]
 800bc7a:	887b      	ldrh	r3, [r7, #2]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	b298      	uxth	r0, r3
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	88bb      	ldrh	r3, [r7, #4]
 800bc8e:	4413      	add	r3, r2
 800bc90:	b299      	uxth	r1, r3
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	883a      	ldrh	r2, [r7, #0]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	f000 fa83 	bl	800c1b0 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	3301      	adds	r3, #1
 800bcae:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800bcb0:	e75f      	b.n	800bb72 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800bcb2:	bf00      	nop
	// done
	return;
 800bcb4:	bf00      	nop
}
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd90      	pop	{r4, r7, pc}

0800bcbc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800bcbc:	b590      	push	{r4, r7, lr}
 800bcbe:	b089      	sub	sp, #36	; 0x24
 800bcc0:	af02      	add	r7, sp, #8
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	461a      	mov	r2, r3
 800bcca:	4623      	mov	r3, r4
 800bccc:	71fb      	strb	r3, [r7, #7]
 800bcce:	4603      	mov	r3, r0
 800bcd0:	80bb      	strh	r3, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	807b      	strh	r3, [r7, #2]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	2b1f      	cmp	r3, #31
 800bce2:	d802      	bhi.n	800bcea <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	71fb      	strb	r3, [r7, #7]
 800bce8:	e002      	b.n	800bcf0 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	3b20      	subs	r3, #32
 800bcee:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	753b      	strb	r3, [r7, #20]
 800bcf4:	e012      	b.n	800bd1c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800bcf6:	7dfa      	ldrb	r2, [r7, #23]
 800bcf8:	7d38      	ldrb	r0, [r7, #20]
 800bcfa:	7d39      	ldrb	r1, [r7, #20]
 800bcfc:	4c48      	ldr	r4, [pc, #288]	; (800be20 <ILI9341_Draw_Char+0x164>)
 800bcfe:	4613      	mov	r3, r2
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	4413      	add	r3, r2
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	4423      	add	r3, r4
 800bd08:	4403      	add	r3, r0
 800bd0a:	781a      	ldrb	r2, [r3, #0]
 800bd0c:	f107 0318 	add.w	r3, r7, #24
 800bd10:	440b      	add	r3, r1
 800bd12:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800bd16:	7d3b      	ldrb	r3, [r7, #20]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	753b      	strb	r3, [r7, #20]
 800bd1c:	7d3b      	ldrb	r3, [r7, #20]
 800bd1e:	2b05      	cmp	r3, #5
 800bd20:	d9e9      	bls.n	800bcf6 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800bd22:	2300      	movs	r3, #0
 800bd24:	757b      	strb	r3, [r7, #21]
 800bd26:	e074      	b.n	800be12 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800bd28:	2300      	movs	r3, #0
 800bd2a:	75bb      	strb	r3, [r7, #22]
 800bd2c:	e06b      	b.n	800be06 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800bd2e:	7d7b      	ldrb	r3, [r7, #21]
 800bd30:	f107 0218 	add.w	r2, r7, #24
 800bd34:	4413      	add	r3, r2
 800bd36:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	7dbb      	ldrb	r3, [r7, #22]
 800bd3e:	fa42 f303 	asr.w	r3, r2, r3
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d02d      	beq.n	800bda6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800bd4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d10e      	bne.n	800bd6e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800bd50:	7d7b      	ldrb	r3, [r7, #21]
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	88bb      	ldrh	r3, [r7, #4]
 800bd56:	4413      	add	r3, r2
 800bd58:	b298      	uxth	r0, r3
 800bd5a:	7dbb      	ldrb	r3, [r7, #22]
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	887b      	ldrh	r3, [r7, #2]
 800bd60:	4413      	add	r3, r2
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	883a      	ldrh	r2, [r7, #0]
 800bd66:	4619      	mov	r1, r3
 800bd68:	f000 fae0 	bl	800c32c <ILI9341_Draw_Pixel>
 800bd6c:	e048      	b.n	800be00 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800bd6e:	7d7b      	ldrb	r3, [r7, #21]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bd74:	fb12 f303 	smulbb	r3, r2, r3
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	88bb      	ldrh	r3, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	b298      	uxth	r0, r3
 800bd80:	7dbb      	ldrb	r3, [r7, #22]
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bd86:	fb12 f303 	smulbb	r3, r2, r3
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	887b      	ldrh	r3, [r7, #2]
 800bd8e:	4413      	add	r3, r2
 800bd90:	b299      	uxth	r1, r3
 800bd92:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800bd94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bd96:	2301      	movs	r3, #1
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	883b      	ldrh	r3, [r7, #0]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	4623      	mov	r3, r4
 800bda0:	f000 fbfc 	bl	800c59c <ILI9341_Draw_Rectangle>
 800bda4:	e02c      	b.n	800be00 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800bda6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d10e      	bne.n	800bdca <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800bdac:	7d7b      	ldrb	r3, [r7, #21]
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	88bb      	ldrh	r3, [r7, #4]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	b298      	uxth	r0, r3
 800bdb6:	7dbb      	ldrb	r3, [r7, #22]
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	887b      	ldrh	r3, [r7, #2]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	f000 fab2 	bl	800c32c <ILI9341_Draw_Pixel>
 800bdc8:	e01a      	b.n	800be00 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800bdca:	7d7b      	ldrb	r3, [r7, #21]
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bdd0:	fb12 f303 	smulbb	r3, r2, r3
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	88bb      	ldrh	r3, [r7, #4]
 800bdd8:	4413      	add	r3, r2
 800bdda:	b298      	uxth	r0, r3
 800bddc:	7dbb      	ldrb	r3, [r7, #22]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bde2:	fb12 f303 	smulbb	r3, r2, r3
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	887b      	ldrh	r3, [r7, #2]
 800bdea:	4413      	add	r3, r2
 800bdec:	b299      	uxth	r1, r3
 800bdee:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800bdf0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	4623      	mov	r3, r4
 800bdfc:	f000 fbce 	bl	800c59c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800be00:	7dbb      	ldrb	r3, [r7, #22]
 800be02:	3301      	adds	r3, #1
 800be04:	75bb      	strb	r3, [r7, #22]
 800be06:	7dbb      	ldrb	r3, [r7, #22]
 800be08:	2b07      	cmp	r3, #7
 800be0a:	d990      	bls.n	800bd2e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800be0c:	7d7b      	ldrb	r3, [r7, #21]
 800be0e:	3301      	adds	r3, #1
 800be10:	757b      	strb	r3, [r7, #21]
 800be12:	7d7b      	ldrb	r3, [r7, #21]
 800be14:	2b05      	cmp	r3, #5
 800be16:	d987      	bls.n	800bd28 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800be18:	bf00      	nop
 800be1a:	371c      	adds	r7, #28
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd90      	pop	{r4, r7, pc}
 800be20:	080100d0 	.word	0x080100d0

0800be24 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b087      	sub	sp, #28
 800be28:	af02      	add	r7, sp, #8
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	4608      	mov	r0, r1
 800be2e:	4611      	mov	r1, r2
 800be30:	461a      	mov	r2, r3
 800be32:	4603      	mov	r3, r0
 800be34:	817b      	strh	r3, [r7, #10]
 800be36:	460b      	mov	r3, r1
 800be38:	813b      	strh	r3, [r7, #8]
 800be3a:	4613      	mov	r3, r2
 800be3c:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800be3e:	e016      	b.n	800be6e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	60fa      	str	r2, [r7, #12]
 800be46:	7818      	ldrb	r0, [r3, #0]
 800be48:	88fc      	ldrh	r4, [r7, #6]
 800be4a:	893a      	ldrh	r2, [r7, #8]
 800be4c:	8979      	ldrh	r1, [r7, #10]
 800be4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	8c3b      	ldrh	r3, [r7, #32]
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	4623      	mov	r3, r4
 800be58:	f7ff ff30 	bl	800bcbc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800be5c:	8c3b      	ldrh	r3, [r7, #32]
 800be5e:	461a      	mov	r2, r3
 800be60:	0052      	lsls	r2, r2, #1
 800be62:	4413      	add	r3, r2
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	b29a      	uxth	r2, r3
 800be68:	897b      	ldrh	r3, [r7, #10]
 800be6a:	4413      	add	r3, r2
 800be6c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1e4      	bne.n	800be40 <ILI9341_Draw_Text+0x1c>
    }


}
 800be76:	bf00      	nop
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd90      	pop	{r4, r7, pc}
	...

0800be80 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800be8a:	2300      	movs	r3, #0
 800be8c:	80fb      	strh	r3, [r7, #6]
 800be8e:	e010      	b.n	800beb2 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800be90:	88fb      	ldrh	r3, [r7, #6]
 800be92:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <ILI9341_FillScreenGradient+0x44>)
 800be94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	88b9      	ldrh	r1, [r7, #4]
 800be9c:	88f8      	ldrh	r0, [r7, #6]
 800be9e:	2204      	movs	r2, #4
 800bea0:	9201      	str	r2, [sp, #4]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	23f0      	movs	r3, #240	; 0xf0
 800bea6:	2201      	movs	r2, #1
 800bea8:	f000 fb78 	bl	800c59c <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800beac:	88fb      	ldrh	r3, [r7, #6]
 800beae:	3301      	adds	r3, #1
 800beb0:	80fb      	strh	r3, [r7, #6]
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800beb8:	d9ea      	bls.n	800be90 <ILI9341_FillScreenGradient+0x10>

	}
}
 800beba:	bf00      	nop
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20000ca8 	.word	0x20000ca8

0800bec8 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800becc:	f000 fc3a 	bl	800c744 <_LCD_Enable>
	ILI9341_SPI_Init();
 800bed0:	f000 f908 	bl	800c0e4 <ILI9341_SPI_Init>
	_LCD_Reset();
 800bed4:	f000 fc46 	bl	800c764 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800bed8:	2001      	movs	r0, #1
 800beda:	f000 fd11 	bl	800c900 <_LCD_SendCommand>
	HAL_Delay(2000);
 800bede:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bee2:	f7fa fd2b 	bl	800693c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800bee6:	20cb      	movs	r0, #203	; 0xcb
 800bee8:	f000 fd0a 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800beec:	2039      	movs	r0, #57	; 0x39
 800beee:	f000 fd39 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800bef2:	202c      	movs	r0, #44	; 0x2c
 800bef4:	f000 fd36 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x00);
 800bef8:	2000      	movs	r0, #0
 800befa:	f000 fd33 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x34);
 800befe:	2034      	movs	r0, #52	; 0x34
 800bf00:	f000 fd30 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x02);
 800bf04:	2002      	movs	r0, #2
 800bf06:	f000 fd2d 	bl	800c964 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800bf0a:	20cf      	movs	r0, #207	; 0xcf
 800bf0c:	f000 fcf8 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800bf10:	2000      	movs	r0, #0
 800bf12:	f000 fd27 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800bf16:	20c1      	movs	r0, #193	; 0xc1
 800bf18:	f000 fd24 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x30);
 800bf1c:	2030      	movs	r0, #48	; 0x30
 800bf1e:	f000 fd21 	bl	800c964 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800bf22:	20e8      	movs	r0, #232	; 0xe8
 800bf24:	f000 fcec 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800bf28:	2085      	movs	r0, #133	; 0x85
 800bf2a:	f000 fd1b 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x00);
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f000 fd18 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x78);
 800bf34:	2078      	movs	r0, #120	; 0x78
 800bf36:	f000 fd15 	bl	800c964 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800bf3a:	20ea      	movs	r0, #234	; 0xea
 800bf3c:	f000 fce0 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800bf40:	2000      	movs	r0, #0
 800bf42:	f000 fd0f 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x00);
 800bf46:	2000      	movs	r0, #0
 800bf48:	f000 fd0c 	bl	800c964 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800bf4c:	20ed      	movs	r0, #237	; 0xed
 800bf4e:	f000 fcd7 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800bf52:	2064      	movs	r0, #100	; 0x64
 800bf54:	f000 fd06 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x03);
 800bf58:	2003      	movs	r0, #3
 800bf5a:	f000 fd03 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x12);
 800bf5e:	2012      	movs	r0, #18
 800bf60:	f000 fd00 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x81);
 800bf64:	2081      	movs	r0, #129	; 0x81
 800bf66:	f000 fcfd 	bl	800c964 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800bf6a:	20f7      	movs	r0, #247	; 0xf7
 800bf6c:	f000 fcc8 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800bf70:	2020      	movs	r0, #32
 800bf72:	f000 fcf7 	bl	800c964 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800bf76:	20c0      	movs	r0, #192	; 0xc0
 800bf78:	f000 fcc2 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800bf7c:	2023      	movs	r0, #35	; 0x23
 800bf7e:	f000 fcf1 	bl	800c964 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800bf82:	20c1      	movs	r0, #193	; 0xc1
 800bf84:	f000 fcbc 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800bf88:	2010      	movs	r0, #16
 800bf8a:	f000 fceb 	bl	800c964 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800bf8e:	20c5      	movs	r0, #197	; 0xc5
 800bf90:	f000 fcb6 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800bf94:	203e      	movs	r0, #62	; 0x3e
 800bf96:	f000 fce5 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x28);
 800bf9a:	2028      	movs	r0, #40	; 0x28
 800bf9c:	f000 fce2 	bl	800c964 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800bfa0:	20c7      	movs	r0, #199	; 0xc7
 800bfa2:	f000 fcad 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800bfa6:	2086      	movs	r0, #134	; 0x86
 800bfa8:	f000 fcdc 	bl	800c964 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800bfac:	2036      	movs	r0, #54	; 0x36
 800bfae:	f000 fca7 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800bfb2:	2048      	movs	r0, #72	; 0x48
 800bfb4:	f000 fcd6 	bl	800c964 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800bfb8:	203a      	movs	r0, #58	; 0x3a
 800bfba:	f000 fca1 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800bfbe:	2055      	movs	r0, #85	; 0x55
 800bfc0:	f000 fcd0 	bl	800c964 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800bfc4:	20b1      	movs	r0, #177	; 0xb1
 800bfc6:	f000 fc9b 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800bfca:	2000      	movs	r0, #0
 800bfcc:	f000 fcca 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x18);
 800bfd0:	2018      	movs	r0, #24
 800bfd2:	f000 fcc7 	bl	800c964 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800bfd6:	20b6      	movs	r0, #182	; 0xb6
 800bfd8:	f000 fc92 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800bfdc:	2008      	movs	r0, #8
 800bfde:	f000 fcc1 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x82);
 800bfe2:	2082      	movs	r0, #130	; 0x82
 800bfe4:	f000 fcbe 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x27);
 800bfe8:	2027      	movs	r0, #39	; 0x27
 800bfea:	f000 fcbb 	bl	800c964 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800bfee:	20f2      	movs	r0, #242	; 0xf2
 800bff0:	f000 fc86 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800bff4:	2000      	movs	r0, #0
 800bff6:	f000 fcb5 	bl	800c964 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800bffa:	2026      	movs	r0, #38	; 0x26
 800bffc:	f000 fc80 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800c000:	2001      	movs	r0, #1
 800c002:	f000 fcaf 	bl	800c964 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800c006:	20e0      	movs	r0, #224	; 0xe0
 800c008:	f000 fc7a 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800c00c:	200f      	movs	r0, #15
 800c00e:	f000 fca9 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x31);
 800c012:	2031      	movs	r0, #49	; 0x31
 800c014:	f000 fca6 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800c018:	202b      	movs	r0, #43	; 0x2b
 800c01a:	f000 fca3 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800c01e:	200c      	movs	r0, #12
 800c020:	f000 fca0 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800c024:	200e      	movs	r0, #14
 800c026:	f000 fc9d 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x08);
 800c02a:	2008      	movs	r0, #8
 800c02c:	f000 fc9a 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800c030:	204e      	movs	r0, #78	; 0x4e
 800c032:	f000 fc97 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800c036:	20f1      	movs	r0, #241	; 0xf1
 800c038:	f000 fc94 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x37);
 800c03c:	2037      	movs	r0, #55	; 0x37
 800c03e:	f000 fc91 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x07);
 800c042:	2007      	movs	r0, #7
 800c044:	f000 fc8e 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x10);
 800c048:	2010      	movs	r0, #16
 800c04a:	f000 fc8b 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x03);
 800c04e:	2003      	movs	r0, #3
 800c050:	f000 fc88 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800c054:	200e      	movs	r0, #14
 800c056:	f000 fc85 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x09);
 800c05a:	2009      	movs	r0, #9
 800c05c:	f000 fc82 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x00);
 800c060:	2000      	movs	r0, #0
 800c062:	f000 fc7f 	bl	800c964 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800c066:	20e1      	movs	r0, #225	; 0xe1
 800c068:	f000 fc4a 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800c06c:	2000      	movs	r0, #0
 800c06e:	f000 fc79 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800c072:	200e      	movs	r0, #14
 800c074:	f000 fc76 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x14);
 800c078:	2014      	movs	r0, #20
 800c07a:	f000 fc73 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x03);
 800c07e:	2003      	movs	r0, #3
 800c080:	f000 fc70 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x11);
 800c084:	2011      	movs	r0, #17
 800c086:	f000 fc6d 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x07);
 800c08a:	2007      	movs	r0, #7
 800c08c:	f000 fc6a 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x31);
 800c090:	2031      	movs	r0, #49	; 0x31
 800c092:	f000 fc67 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800c096:	20c1      	movs	r0, #193	; 0xc1
 800c098:	f000 fc64 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x48);
 800c09c:	2048      	movs	r0, #72	; 0x48
 800c09e:	f000 fc61 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x08);
 800c0a2:	2008      	movs	r0, #8
 800c0a4:	f000 fc5e 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800c0a8:	200f      	movs	r0, #15
 800c0aa:	f000 fc5b 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800c0ae:	200c      	movs	r0, #12
 800c0b0:	f000 fc58 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x31);
 800c0b4:	2031      	movs	r0, #49	; 0x31
 800c0b6:	f000 fc55 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x36);
 800c0ba:	2036      	movs	r0, #54	; 0x36
 800c0bc:	f000 fc52 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800c0c0:	200f      	movs	r0, #15
 800c0c2:	f000 fc4f 	bl	800c964 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800c0c6:	2011      	movs	r0, #17
 800c0c8:	f000 fc1a 	bl	800c900 <_LCD_SendCommand>
	HAL_Delay(240);
 800c0cc:	20f0      	movs	r0, #240	; 0xf0
 800c0ce:	f7fa fc35 	bl	800693c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800c0d2:	2029      	movs	r0, #41	; 0x29
 800c0d4:	f000 fc14 	bl	800c900 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800c0d8:	2000      	movs	r0, #0
 800c0da:	f000 fae5 	bl	800c6a8 <ILI9341_Set_Rotation>
}
 800c0de:	bf00      	nop
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <ILI9341_SPI_Init+0x34>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f0:	2b40      	cmp	r3, #64	; 0x40
 800c0f2:	d005      	beq.n	800c100 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800c0f4:	4b08      	ldr	r3, [pc, #32]	; (800c118 <ILI9341_SPI_Init+0x34>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a07      	ldr	r2, [pc, #28]	; (800c118 <ILI9341_SPI_Init+0x34>)
 800c0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0fe:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c100:	4b06      	ldr	r3, [pc, #24]	; (800c11c <ILI9341_SPI_Init+0x38>)
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	4a05      	ldr	r2, [pc, #20]	; (800c11c <ILI9341_SPI_Init+0x38>)
 800c106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c10a:	6153      	str	r3, [r2, #20]
}
 800c10c:	bf00      	nop
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	40003c00 	.word	0x40003c00
 800c11c:	48000400 	.word	0x48000400

0800c120 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800c120:	b590      	push	{r4, r7, lr}
 800c122:	b085      	sub	sp, #20
 800c124:	af02      	add	r7, sp, #8
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	4611      	mov	r1, r2
 800c12c:	461a      	mov	r2, r3
 800c12e:	4623      	mov	r3, r4
 800c130:	80fb      	strh	r3, [r7, #6]
 800c132:	4603      	mov	r3, r0
 800c134:	80bb      	strh	r3, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	807b      	strh	r3, [r7, #2]
 800c13a:	4613      	mov	r3, r2
 800c13c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c13e:	4b1a      	ldr	r3, [pc, #104]	; (800c1a8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	b29b      	uxth	r3, r3
 800c144:	88fa      	ldrh	r2, [r7, #6]
 800c146:	429a      	cmp	r2, r3
 800c148:	d229      	bcs.n	800c19e <ILI9341_Draw_Horizontal_Line+0x7e>
 800c14a:	4b18      	ldr	r3, [pc, #96]	; (800c1ac <ILI9341_Draw_Horizontal_Line+0x8c>)
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	88ba      	ldrh	r2, [r7, #4]
 800c152:	429a      	cmp	r2, r3
 800c154:	d223      	bcs.n	800c19e <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800c156:	88fa      	ldrh	r2, [r7, #6]
 800c158:	887b      	ldrh	r3, [r7, #2]
 800c15a:	4413      	add	r3, r2
 800c15c:	3b01      	subs	r3, #1
 800c15e:	4a12      	ldr	r2, [pc, #72]	; (800c1a8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800c160:	8812      	ldrh	r2, [r2, #0]
 800c162:	b292      	uxth	r2, r2
 800c164:	4293      	cmp	r3, r2
 800c166:	db05      	blt.n	800c174 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800c168:	4b0f      	ldr	r3, [pc, #60]	; (800c1a8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	88fb      	ldrh	r3, [r7, #6]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800c174:	88fa      	ldrh	r2, [r7, #6]
 800c176:	887b      	ldrh	r3, [r7, #2]
 800c178:	4413      	add	r3, r2
 800c17a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c17c:	3b01      	subs	r3, #1
 800c17e:	b29a      	uxth	r2, r3
 800c180:	88bb      	ldrh	r3, [r7, #4]
 800c182:	88b9      	ldrh	r1, [r7, #4]
 800c184:	88f8      	ldrh	r0, [r7, #6]
 800c186:	f000 f85b 	bl	800c240 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800c18a:	887c      	ldrh	r4, [r7, #2]
 800c18c:	883a      	ldrh	r2, [r7, #0]
 800c18e:	88b9      	ldrh	r1, [r7, #4]
 800c190:	88f8      	ldrh	r0, [r7, #6]
 800c192:	2303      	movs	r3, #3
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	4623      	mov	r3, r4
 800c198:	f000 fb02 	bl	800c7a0 <_LCD_Write_Frame>
 800c19c:	e000      	b.n	800c1a0 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c19e:	bf00      	nop
}
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd90      	pop	{r4, r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20000ca2 	.word	0x20000ca2
 800c1ac:	20000ca0 	.word	0x20000ca0

0800c1b0 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800c1b0:	b590      	push	{r4, r7, lr}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af02      	add	r7, sp, #8
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	461a      	mov	r2, r3
 800c1be:	4623      	mov	r3, r4
 800c1c0:	80fb      	strh	r3, [r7, #6]
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	80bb      	strh	r3, [r7, #4]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	807b      	strh	r3, [r7, #2]
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800c1ce:	4b1a      	ldr	r3, [pc, #104]	; (800c238 <ILI9341_Draw_Vertical_Line+0x88>)
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	88fa      	ldrh	r2, [r7, #6]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d229      	bcs.n	800c22e <ILI9341_Draw_Vertical_Line+0x7e>
 800c1da:	4b18      	ldr	r3, [pc, #96]	; (800c23c <ILI9341_Draw_Vertical_Line+0x8c>)
 800c1dc:	881b      	ldrh	r3, [r3, #0]
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	88ba      	ldrh	r2, [r7, #4]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d223      	bcs.n	800c22e <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800c1e6:	88ba      	ldrh	r2, [r7, #4]
 800c1e8:	887b      	ldrh	r3, [r7, #2]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	4a13      	ldr	r2, [pc, #76]	; (800c23c <ILI9341_Draw_Vertical_Line+0x8c>)
 800c1f0:	8812      	ldrh	r2, [r2, #0]
 800c1f2:	b292      	uxth	r2, r2
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	db05      	blt.n	800c204 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800c1f8:	4b10      	ldr	r3, [pc, #64]	; (800c23c <ILI9341_Draw_Vertical_Line+0x8c>)
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	88bb      	ldrh	r3, [r7, #4]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800c204:	88ba      	ldrh	r2, [r7, #4]
 800c206:	887b      	ldrh	r3, [r7, #2]
 800c208:	4413      	add	r3, r2
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	3b01      	subs	r3, #1
 800c20e:	b29b      	uxth	r3, r3
 800c210:	88fa      	ldrh	r2, [r7, #6]
 800c212:	88b9      	ldrh	r1, [r7, #4]
 800c214:	88f8      	ldrh	r0, [r7, #6]
 800c216:	f000 f813 	bl	800c240 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800c21a:	887c      	ldrh	r4, [r7, #2]
 800c21c:	883a      	ldrh	r2, [r7, #0]
 800c21e:	88b9      	ldrh	r1, [r7, #4]
 800c220:	88f8      	ldrh	r0, [r7, #6]
 800c222:	2303      	movs	r3, #3
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	4623      	mov	r3, r4
 800c228:	f000 faba 	bl	800c7a0 <_LCD_Write_Frame>
 800c22c:	e000      	b.n	800c230 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800c22e:	bf00      	nop
}
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	bd90      	pop	{r4, r7, pc}
 800c236:	bf00      	nop
 800c238:	20000ca2 	.word	0x20000ca2
 800c23c:	20000ca0 	.word	0x20000ca0

0800c240 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800c240:	b590      	push	{r4, r7, lr}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	4604      	mov	r4, r0
 800c248:	4608      	mov	r0, r1
 800c24a:	4611      	mov	r1, r2
 800c24c:	461a      	mov	r2, r3
 800c24e:	4623      	mov	r3, r4
 800c250:	80fb      	strh	r3, [r7, #6]
 800c252:	4603      	mov	r3, r0
 800c254:	80bb      	strh	r3, [r7, #4]
 800c256:	460b      	mov	r3, r1
 800c258:	807b      	strh	r3, [r7, #2]
 800c25a:	4613      	mov	r3, r2
 800c25c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800c25e:	202a      	movs	r0, #42	; 0x2a
 800c260:	f000 fb4e 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800c264:	88fb      	ldrh	r3, [r7, #6]
 800c266:	0a1b      	lsrs	r3, r3, #8
 800c268:	b29b      	uxth	r3, r3
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 fb79 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(sc);
 800c272:	88fb      	ldrh	r3, [r7, #6]
 800c274:	b2db      	uxtb	r3, r3
 800c276:	4618      	mov	r0, r3
 800c278:	f000 fb74 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800c27c:	887b      	ldrh	r3, [r7, #2]
 800c27e:	0a1b      	lsrs	r3, r3, #8
 800c280:	b29b      	uxth	r3, r3
 800c282:	b2db      	uxtb	r3, r3
 800c284:	4618      	mov	r0, r3
 800c286:	f000 fb6d 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(ec);
 800c28a:	887b      	ldrh	r3, [r7, #2]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	4618      	mov	r0, r3
 800c290:	f000 fb68 	bl	800c964 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800c294:	202b      	movs	r0, #43	; 0x2b
 800c296:	f000 fb33 	bl	800c900 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800c29a:	88bb      	ldrh	r3, [r7, #4]
 800c29c:	0a1b      	lsrs	r3, r3, #8
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fb5e 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(sp);
 800c2a8:	88bb      	ldrh	r3, [r7, #4]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 fb59 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800c2b2:	883b      	ldrh	r3, [r7, #0]
 800c2b4:	0a1b      	lsrs	r3, r3, #8
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 fb52 	bl	800c964 <_LCD_SendData>
	_LCD_SendData(ep);
 800c2c0:	883b      	ldrh	r3, [r7, #0]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 fb4d 	bl	800c964 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800c2ca:	202c      	movs	r0, #44	; 0x2c
 800c2cc:	f000 fb18 	bl	800c900 <_LCD_SendCommand>
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd90      	pop	{r4, r7, pc}

0800c2d8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af02      	add	r7, sp, #8
 800c2de:	4603      	mov	r3, r0
 800c2e0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800c2e2:	4b10      	ldr	r3, [pc, #64]	; (800c324 <ILI9341_Fill_Screen+0x4c>)
 800c2e4:	881b      	ldrh	r3, [r3, #0]
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <ILI9341_Fill_Screen+0x50>)
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	f7ff ffa5 	bl	800c240 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <ILI9341_Fill_Screen+0x4c>)
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <ILI9341_Fill_Screen+0x50>)
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	b29b      	uxth	r3, r3
 800c304:	fb03 f302 	mul.w	r3, r3, r2
 800c308:	4619      	mov	r1, r3
 800c30a:	88fa      	ldrh	r2, [r7, #6]
 800c30c:	2304      	movs	r3, #4
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	460b      	mov	r3, r1
 800c312:	2100      	movs	r1, #0
 800c314:	2000      	movs	r0, #0
 800c316:	f000 fa43 	bl	800c7a0 <_LCD_Write_Frame>
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	20000ca2 	.word	0x20000ca2
 800c328:	20000ca0 	.word	0x20000ca0

0800c32c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08c      	sub	sp, #48	; 0x30
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	80fb      	strh	r3, [r7, #6]
 800c336:	460b      	mov	r3, r1
 800c338:	80bb      	strh	r3, [r7, #4]
 800c33a:	4613      	mov	r3, r2
 800c33c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800c33e:	4b94      	ldr	r3, [pc, #592]	; (800c590 <ILI9341_Draw_Pixel+0x264>)
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	b29b      	uxth	r3, r3
 800c344:	88fa      	ldrh	r2, [r7, #6]
 800c346:	429a      	cmp	r2, r3
 800c348:	f080 811e 	bcs.w	800c588 <ILI9341_Draw_Pixel+0x25c>
 800c34c:	4b91      	ldr	r3, [pc, #580]	; (800c594 <ILI9341_Draw_Pixel+0x268>)
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	b29b      	uxth	r3, r3
 800c352:	88ba      	ldrh	r2, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	f080 8117 	bcs.w	800c588 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c35a:	4b8f      	ldr	r3, [pc, #572]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	4a8e      	ldr	r2, [pc, #568]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c364:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c366:	4b8c      	ldr	r3, [pc, #560]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	4a8b      	ldr	r2, [pc, #556]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c36c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c370:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800c372:	2200      	movs	r2, #0
 800c374:	2100      	movs	r1, #0
 800c376:	202a      	movs	r0, #42	; 0x2a
 800c378:	f000 fb26 	bl	800c9c8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c37c:	2300      	movs	r3, #0
 800c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c380:	e008      	b.n	800c394 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c382:	4b85      	ldr	r3, [pc, #532]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c384:	695b      	ldr	r3, [r3, #20]
 800c386:	4a84      	ldr	r2, [pc, #528]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c38c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c390:	3301      	adds	r3, #1
 800c392:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	2b02      	cmp	r3, #2
 800c398:	ddf3      	ble.n	800c382 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c39a:	4b7f      	ldr	r3, [pc, #508]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	4a7e      	ldr	r2, [pc, #504]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c3a6:	4b7c      	ldr	r3, [pc, #496]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	4a7b      	ldr	r2, [pc, #492]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b0:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c3b2:	4b79      	ldr	r3, [pc, #484]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	4a78      	ldr	r2, [pc, #480]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c3b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3bc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800c3be:	88fb      	ldrh	r3, [r7, #6]
 800c3c0:	0a1b      	lsrs	r3, r3, #8
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	753b      	strb	r3, [r7, #20]
 800c3c8:	88fb      	ldrh	r3, [r7, #6]
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800c3ce:	88fb      	ldrh	r3, [r7, #6]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800c3d8:	88fb      	ldrh	r3, [r7, #6]
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	3301      	adds	r3, #1
 800c3de:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800c3e0:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800c3e2:	f107 0014 	add.w	r0, r7, #20
 800c3e6:	230a      	movs	r3, #10
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2104      	movs	r1, #4
 800c3ec:	f000 fb1e 	bl	800ca2c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3f4:	e008      	b.n	800c408 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c3f6:	4b68      	ldr	r3, [pc, #416]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	4a67      	ldr	r2, [pc, #412]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c3fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c400:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	3301      	adds	r3, #1
 800c406:	62bb      	str	r3, [r7, #40]	; 0x28
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	ddf3      	ble.n	800c3f6 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c40e:	4b62      	ldr	r3, [pc, #392]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	4a61      	ldr	r2, [pc, #388]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c418:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c41a:	4b5f      	ldr	r3, [pc, #380]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	4a5e      	ldr	r2, [pc, #376]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c424:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c426:	4b5c      	ldr	r3, [pc, #368]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	4a5b      	ldr	r2, [pc, #364]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c42c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c430:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800c432:	2200      	movs	r2, #0
 800c434:	2100      	movs	r1, #0
 800c436:	202b      	movs	r0, #43	; 0x2b
 800c438:	f000 fac6 	bl	800c9c8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c43c:	2300      	movs	r3, #0
 800c43e:	627b      	str	r3, [r7, #36]	; 0x24
 800c440:	e008      	b.n	800c454 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c442:	4b55      	ldr	r3, [pc, #340]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	4a54      	ldr	r2, [pc, #336]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c44c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c450:	3301      	adds	r3, #1
 800c452:	627b      	str	r3, [r7, #36]	; 0x24
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	2b02      	cmp	r3, #2
 800c458:	ddf3      	ble.n	800c442 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c45a:	4b4f      	ldr	r3, [pc, #316]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	4a4e      	ldr	r2, [pc, #312]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c464:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c466:	4b4c      	ldr	r3, [pc, #304]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	4a4b      	ldr	r2, [pc, #300]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c470:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c472:	4b49      	ldr	r3, [pc, #292]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	4a48      	ldr	r2, [pc, #288]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c47c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800c47e:	88bb      	ldrh	r3, [r7, #4]
 800c480:	0a1b      	lsrs	r3, r3, #8
 800c482:	b29b      	uxth	r3, r3
 800c484:	b2db      	uxtb	r3, r3
 800c486:	743b      	strb	r3, [r7, #16]
 800c488:	88bb      	ldrh	r3, [r7, #4]
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800c48e:	88bb      	ldrh	r3, [r7, #4]
 800c490:	3301      	adds	r3, #1
 800c492:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800c494:	b2db      	uxtb	r3, r3
 800c496:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800c498:	88bb      	ldrh	r3, [r7, #4]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	3301      	adds	r3, #1
 800c49e:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800c4a0:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800c4a2:	f107 0010 	add.w	r0, r7, #16
 800c4a6:	230a      	movs	r3, #10
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2104      	movs	r1, #4
 800c4ac:	f000 fabe 	bl	800ca2c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	623b      	str	r3, [r7, #32]
 800c4b4:	e008      	b.n	800c4c8 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c4b6:	4b38      	ldr	r3, [pc, #224]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	4a37      	ldr	r2, [pc, #220]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4c0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c4c2:	6a3b      	ldr	r3, [r7, #32]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	623b      	str	r3, [r7, #32]
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	ddf3      	ble.n	800c4b6 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c4ce:	4b32      	ldr	r3, [pc, #200]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	4a31      	ldr	r2, [pc, #196]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c4da:	4b2f      	ldr	r3, [pc, #188]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	4a2e      	ldr	r2, [pc, #184]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4e4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c4e6:	4b2c      	ldr	r3, [pc, #176]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	4a2b      	ldr	r2, [pc, #172]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c4ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4f0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	202c      	movs	r0, #44	; 0x2c
 800c4f8:	f000 fa66 	bl	800c9c8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	61fb      	str	r3, [r7, #28]
 800c500:	e008      	b.n	800c514 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c502:	4b25      	ldr	r3, [pc, #148]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	4a24      	ldr	r2, [pc, #144]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c50c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	3301      	adds	r3, #1
 800c512:	61fb      	str	r3, [r7, #28]
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	2b02      	cmp	r3, #2
 800c518:	ddf3      	ble.n	800c502 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c51a:	4b1f      	ldr	r3, [pc, #124]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	4a1e      	ldr	r2, [pc, #120]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c524:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c526:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	4a1b      	ldr	r2, [pc, #108]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c530:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c532:	4b19      	ldr	r3, [pc, #100]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	4a18      	ldr	r2, [pc, #96]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c53c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800c53e:	887b      	ldrh	r3, [r7, #2]
 800c540:	0a1b      	lsrs	r3, r3, #8
 800c542:	b29b      	uxth	r3, r3
 800c544:	b2db      	uxtb	r3, r3
 800c546:	733b      	strb	r3, [r7, #12]
 800c548:	887b      	ldrh	r3, [r7, #2]
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800c54e:	f107 000c 	add.w	r0, r7, #12
 800c552:	230a      	movs	r3, #10
 800c554:	2200      	movs	r2, #0
 800c556:	2104      	movs	r1, #4
 800c558:	f000 fa68 	bl	800ca2c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c55c:	2300      	movs	r3, #0
 800c55e:	61bb      	str	r3, [r7, #24]
 800c560:	e008      	b.n	800c574 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c562:	4b0d      	ldr	r3, [pc, #52]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	4a0c      	ldr	r2, [pc, #48]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c56c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	3301      	adds	r3, #1
 800c572:	61bb      	str	r3, [r7, #24]
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	2b02      	cmp	r3, #2
 800c578:	ddf3      	ble.n	800c562 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c57a:	4b07      	ldr	r3, [pc, #28]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	4a06      	ldr	r2, [pc, #24]	; (800c598 <ILI9341_Draw_Pixel+0x26c>)
 800c580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c584:	6153      	str	r3, [r2, #20]
 800c586:	e000      	b.n	800c58a <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800c588:	bf00      	nop


}
 800c58a:	3730      	adds	r7, #48	; 0x30
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20000ca2 	.word	0x20000ca2
 800c594:	20000ca0 	.word	0x20000ca0
 800c598:	48000400 	.word	0x48000400

0800c59c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800c59c:	b590      	push	{r4, r7, lr}
 800c59e:	b087      	sub	sp, #28
 800c5a0:	af02      	add	r7, sp, #8
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	4623      	mov	r3, r4
 800c5ac:	80fb      	strh	r3, [r7, #6]
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	80bb      	strh	r3, [r7, #4]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	807b      	strh	r3, [r7, #2]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c5ba:	4b39      	ldr	r3, [pc, #228]	; (800c6a0 <ILI9341_Draw_Rectangle+0x104>)
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	88fa      	ldrh	r2, [r7, #6]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d268      	bcs.n	800c698 <ILI9341_Draw_Rectangle+0xfc>
 800c5c6:	4b37      	ldr	r3, [pc, #220]	; (800c6a4 <ILI9341_Draw_Rectangle+0x108>)
 800c5c8:	881b      	ldrh	r3, [r3, #0]
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	88ba      	ldrh	r2, [r7, #4]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d262      	bcs.n	800c698 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800c5d2:	88fa      	ldrh	r2, [r7, #6]
 800c5d4:	887b      	ldrh	r3, [r7, #2]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	4a31      	ldr	r2, [pc, #196]	; (800c6a0 <ILI9341_Draw_Rectangle+0x104>)
 800c5dc:	8812      	ldrh	r2, [r2, #0]
 800c5de:	b292      	uxth	r2, r2
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	db05      	blt.n	800c5f0 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800c5e4:	4b2e      	ldr	r3, [pc, #184]	; (800c6a0 <ILI9341_Draw_Rectangle+0x104>)
 800c5e6:	881b      	ldrh	r3, [r3, #0]
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	88fb      	ldrh	r3, [r7, #6]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800c5f0:	88ba      	ldrh	r2, [r7, #4]
 800c5f2:	883b      	ldrh	r3, [r7, #0]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	4a2a      	ldr	r2, [pc, #168]	; (800c6a4 <ILI9341_Draw_Rectangle+0x108>)
 800c5fa:	8812      	ldrh	r2, [r2, #0]
 800c5fc:	b292      	uxth	r2, r2
 800c5fe:	4293      	cmp	r3, r2
 800c600:	db05      	blt.n	800c60e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800c602:	4b28      	ldr	r3, [pc, #160]	; (800c6a4 <ILI9341_Draw_Rectangle+0x108>)
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	b29a      	uxth	r2, r3
 800c608:	88bb      	ldrh	r3, [r7, #4]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800c60e:	88fa      	ldrh	r2, [r7, #6]
 800c610:	887b      	ldrh	r3, [r7, #2]
 800c612:	4413      	add	r3, r2
 800c614:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c616:	3b01      	subs	r3, #1
 800c618:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800c61a:	88ba      	ldrh	r2, [r7, #4]
 800c61c:	883b      	ldrh	r3, [r7, #0]
 800c61e:	4413      	add	r3, r2
 800c620:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c622:	3b01      	subs	r3, #1
 800c624:	b29b      	uxth	r3, r3
 800c626:	88b9      	ldrh	r1, [r7, #4]
 800c628:	88f8      	ldrh	r0, [r7, #6]
 800c62a:	4622      	mov	r2, r4
 800c62c:	f7ff fe08 	bl	800c240 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800c630:	883a      	ldrh	r2, [r7, #0]
 800c632:	887b      	ldrh	r3, [r7, #2]
 800c634:	fb12 f303 	smulbb	r3, r2, r3
 800c638:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800c63e:	89fb      	ldrh	r3, [r7, #14]
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d009      	beq.n	800c65c <ILI9341_Draw_Rectangle+0xc0>
 800c648:	89fb      	ldrh	r3, [r7, #14]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d906      	bls.n	800c65c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800c64e:	2301      	movs	r3, #1
 800c650:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800c652:	89fb      	ldrh	r3, [r7, #14]
 800c654:	085b      	lsrs	r3, r3, #1
 800c656:	b29b      	uxth	r3, r3
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800c65c:	89fc      	ldrh	r4, [r7, #14]
 800c65e:	8c3a      	ldrh	r2, [r7, #32]
 800c660:	88b9      	ldrh	r1, [r7, #4]
 800c662:	88f8      	ldrh	r0, [r7, #6]
 800c664:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	4623      	mov	r3, r4
 800c66c:	f000 f898 	bl	800c7a0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800c670:	7b7b      	ldrb	r3, [r7, #13]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d011      	beq.n	800c69a <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800c676:	88fa      	ldrh	r2, [r7, #6]
 800c678:	887b      	ldrh	r3, [r7, #2]
 800c67a:	4413      	add	r3, r2
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	3b01      	subs	r3, #1
 800c680:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800c682:	88ba      	ldrh	r2, [r7, #4]
 800c684:	883b      	ldrh	r3, [r7, #0]
 800c686:	4413      	add	r3, r2
 800c688:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800c68a:	3b01      	subs	r3, #1
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	8c3a      	ldrh	r2, [r7, #32]
 800c690:	4619      	mov	r1, r3
 800c692:	f7ff fe4b 	bl	800c32c <ILI9341_Draw_Pixel>
 800c696:	e000      	b.n	800c69a <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c698:	bf00      	nop
							colour);
	}
}
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd90      	pop	{r4, r7, pc}
 800c6a0:	20000ca2 	.word	0x20000ca2
 800c6a4:	20000ca0 	.word	0x20000ca0

0800c6a8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800c6b6:	2036      	movs	r0, #54	; 0x36
 800c6b8:	f000 f922 	bl	800c900 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	d836      	bhi.n	800c730 <ILI9341_Set_Rotation+0x88>
 800c6c2:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <ILI9341_Set_Rotation+0x20>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c6d9 	.word	0x0800c6d9
 800c6cc:	0800c6ef 	.word	0x0800c6ef
 800c6d0:	0800c705 	.word	0x0800c705
 800c6d4:	0800c71b 	.word	0x0800c71b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800c6d8:	2048      	movs	r0, #72	; 0x48
 800c6da:	f000 f943 	bl	800c964 <_LCD_SendData>
			LCD_WIDTH = 240;
 800c6de:	4b17      	ldr	r3, [pc, #92]	; (800c73c <ILI9341_Set_Rotation+0x94>)
 800c6e0:	22f0      	movs	r2, #240	; 0xf0
 800c6e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800c6e4:	4b16      	ldr	r3, [pc, #88]	; (800c740 <ILI9341_Set_Rotation+0x98>)
 800c6e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c6ea:	801a      	strh	r2, [r3, #0]
			break;
 800c6ec:	e021      	b.n	800c732 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800c6ee:	2028      	movs	r0, #40	; 0x28
 800c6f0:	f000 f938 	bl	800c964 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800c6f4:	4b11      	ldr	r3, [pc, #68]	; (800c73c <ILI9341_Set_Rotation+0x94>)
 800c6f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c6fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800c6fc:	4b10      	ldr	r3, [pc, #64]	; (800c740 <ILI9341_Set_Rotation+0x98>)
 800c6fe:	22f0      	movs	r2, #240	; 0xf0
 800c700:	801a      	strh	r2, [r3, #0]
			break;
 800c702:	e016      	b.n	800c732 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800c704:	2088      	movs	r0, #136	; 0x88
 800c706:	f000 f92d 	bl	800c964 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800c70a:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <ILI9341_Set_Rotation+0x94>)
 800c70c:	22f0      	movs	r2, #240	; 0xf0
 800c70e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800c710:	4b0b      	ldr	r3, [pc, #44]	; (800c740 <ILI9341_Set_Rotation+0x98>)
 800c712:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c716:	801a      	strh	r2, [r3, #0]
			break;
 800c718:	e00b      	b.n	800c732 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800c71a:	20e8      	movs	r0, #232	; 0xe8
 800c71c:	f000 f922 	bl	800c964 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800c720:	4b06      	ldr	r3, [pc, #24]	; (800c73c <ILI9341_Set_Rotation+0x94>)
 800c722:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c726:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800c728:	4b05      	ldr	r3, [pc, #20]	; (800c740 <ILI9341_Set_Rotation+0x98>)
 800c72a:	22f0      	movs	r2, #240	; 0xf0
 800c72c:	801a      	strh	r2, [r3, #0]
			break;
 800c72e:	e000      	b.n	800c732 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800c730:	bf00      	nop
	}
}
 800c732:	bf00      	nop
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20000ca2 	.word	0x20000ca2
 800c740:	20000ca0 	.word	0x20000ca0

0800c744 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800c748:	4b05      	ldr	r3, [pc, #20]	; (800c760 <_LCD_Enable+0x1c>)
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	4a04      	ldr	r2, [pc, #16]	; (800c760 <_LCD_Enable+0x1c>)
 800c74e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c752:	6153      	str	r3, [r2, #20]
}
 800c754:	bf00      	nop
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	48000400 	.word	0x48000400

0800c764 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800c764:	b580      	push	{r7, lr}
 800c766:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800c768:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <_LCD_Reset+0x38>)
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	4a0b      	ldr	r2, [pc, #44]	; (800c79c <_LCD_Reset+0x38>)
 800c76e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c772:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800c774:	20c8      	movs	r0, #200	; 0xc8
 800c776:	f7fa f8e1 	bl	800693c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c77a:	4b08      	ldr	r3, [pc, #32]	; (800c79c <_LCD_Reset+0x38>)
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	4a07      	ldr	r2, [pc, #28]	; (800c79c <_LCD_Reset+0x38>)
 800c780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c784:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800c786:	20c8      	movs	r0, #200	; 0xc8
 800c788:	f7fa f8d8 	bl	800693c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800c78c:	4b03      	ldr	r3, [pc, #12]	; (800c79c <_LCD_Reset+0x38>)
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	4a02      	ldr	r2, [pc, #8]	; (800c79c <_LCD_Reset+0x38>)
 800c792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c796:	6153      	str	r3, [r2, #20]
}
 800c798:	bf00      	nop
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	48000400 	.word	0x48000400

0800c7a0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800c7a0:	b5b0      	push	{r4, r5, r7, lr}
 800c7a2:	b08e      	sub	sp, #56	; 0x38
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	607b      	str	r3, [r7, #4]
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	81fb      	strh	r3, [r7, #14]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	81bb      	strh	r3, [r7, #12]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	817b      	strh	r3, [r7, #10]
 800c7b4:	466b      	mov	r3, sp
 800c7b6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	4a4d      	ldr	r2, [pc, #308]	; (800c8f8 <_LCD_Write_Frame+0x158>)
 800c7c2:	8812      	ldrh	r2, [r2, #0]
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d202      	bcs.n	800c7ce <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7cc:	e002      	b.n	800c7d4 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800c7ce:	4b4a      	ldr	r3, [pc, #296]	; (800c8f8 <_LCD_Write_Frame+0x158>)
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800c7d4:	897b      	ldrh	r3, [r7, #10]
 800c7d6:	0a1b      	lsrs	r3, r3, #8
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800c7dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7de:	4603      	mov	r3, r0
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	61bb      	str	r3, [r7, #24]
 800c7e4:	4601      	mov	r1, r0
 800c7e6:	f04f 0200 	mov.w	r2, #0
 800c7ea:	f04f 0300 	mov.w	r3, #0
 800c7ee:	f04f 0400 	mov.w	r4, #0
 800c7f2:	00d4      	lsls	r4, r2, #3
 800c7f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c7f8:	00cb      	lsls	r3, r1, #3
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	f04f 0200 	mov.w	r2, #0
 800c800:	f04f 0300 	mov.w	r3, #0
 800c804:	f04f 0400 	mov.w	r4, #0
 800c808:	00d4      	lsls	r4, r2, #3
 800c80a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c80e:	00cb      	lsls	r3, r1, #3
 800c810:	1dc3      	adds	r3, r0, #7
 800c812:	08db      	lsrs	r3, r3, #3
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	ebad 0d03 	sub.w	sp, sp, r3
 800c81a:	466b      	mov	r3, sp
 800c81c:	3300      	adds	r3, #0
 800c81e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800c820:	2300      	movs	r3, #0
 800c822:	633b      	str	r3, [r7, #48]	; 0x30
 800c824:	e00d      	b.n	800c842 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	4413      	add	r3, r2
 800c82c:	7ffa      	ldrb	r2, [r7, #31]
 800c82e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	3301      	adds	r3, #1
 800c834:	897a      	ldrh	r2, [r7, #10]
 800c836:	b2d1      	uxtb	r1, r2
 800c838:	697a      	ldr	r2, [r7, #20]
 800c83a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	3302      	adds	r3, #2
 800c840:	633b      	str	r3, [r7, #48]	; 0x30
 800c842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	429a      	cmp	r2, r3
 800c848:	d3ed      	bcc.n	800c826 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800c850:	2301      	movs	r3, #1
 800c852:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00d      	beq.n	800c87a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	fbb2 f3f3 	udiv	r3, r2, r3
 800c866:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c86c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c872:	fb01 f202 	mul.w	r2, r1, r2
 800c876:	1a9b      	subs	r3, r3, r2
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c87a:	4b20      	ldr	r3, [pc, #128]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	4a1f      	ldr	r2, [pc, #124]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c884:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c886:	4b1d      	ldr	r3, [pc, #116]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	4a1c      	ldr	r2, [pc, #112]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c88c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c890:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800c892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00f      	beq.n	800c8b8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800c898:	2300      	movs	r3, #0
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
 800c89c:	e008      	b.n	800c8b0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800c89e:	6978      	ldr	r0, [r7, #20]
 800c8a0:	230a      	movs	r3, #10
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8a6:	f000 f8c1 	bl	800ca2c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d3f2      	bcc.n	800c89e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800c8b8:	6978      	ldr	r0, [r7, #20]
 800c8ba:	230a      	movs	r3, #10
 800c8bc:	2200      	movs	r2, #0
 800c8be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8c0:	f000 f8b4 	bl	800ca2c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	623b      	str	r3, [r7, #32]
 800c8c8:	e008      	b.n	800c8dc <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c8ca:	4b0c      	ldr	r3, [pc, #48]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	4a0b      	ldr	r2, [pc, #44]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c8d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8d4:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	623b      	str	r3, [r7, #32]
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	ddf3      	ble.n	800c8ca <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c8e2:	4b06      	ldr	r3, [pc, #24]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c8e4:	695b      	ldr	r3, [r3, #20]
 800c8e6:	4a05      	ldr	r2, [pc, #20]	; (800c8fc <_LCD_Write_Frame+0x15c>)
 800c8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ec:	6153      	str	r3, [r2, #20]
 800c8ee:	46ad      	mov	sp, r5

}
 800c8f0:	bf00      	nop
 800c8f2:	3738      	adds	r7, #56	; 0x38
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bdb0      	pop	{r4, r5, r7, pc}
 800c8f8:	20000ca4 	.word	0x20000ca4
 800c8fc:	48000400 	.word	0x48000400

0800c900 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c90a:	4b15      	ldr	r3, [pc, #84]	; (800c960 <_LCD_SendCommand+0x60>)
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	4a14      	ldr	r2, [pc, #80]	; (800c960 <_LCD_SendCommand+0x60>)
 800c910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c914:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c916:	4b12      	ldr	r3, [pc, #72]	; (800c960 <_LCD_SendCommand+0x60>)
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	4a11      	ldr	r2, [pc, #68]	; (800c960 <_LCD_SendCommand+0x60>)
 800c91c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c920:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800c922:	79fb      	ldrb	r3, [r7, #7]
 800c924:	2200      	movs	r2, #0
 800c926:	2100      	movs	r1, #0
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 f84d 	bl	800c9c8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	e008      	b.n	800c946 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c934:	4b0a      	ldr	r3, [pc, #40]	; (800c960 <_LCD_SendCommand+0x60>)
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	4a09      	ldr	r2, [pc, #36]	; (800c960 <_LCD_SendCommand+0x60>)
 800c93a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c93e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3301      	adds	r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2b02      	cmp	r3, #2
 800c94a:	ddf3      	ble.n	800c934 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c94c:	4b04      	ldr	r3, [pc, #16]	; (800c960 <_LCD_SendCommand+0x60>)
 800c94e:	695b      	ldr	r3, [r3, #20]
 800c950:	4a03      	ldr	r2, [pc, #12]	; (800c960 <_LCD_SendCommand+0x60>)
 800c952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c956:	6153      	str	r3, [r2, #20]
}
 800c958:	bf00      	nop
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	48000400 	.word	0x48000400

0800c964 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c96e:	4b15      	ldr	r3, [pc, #84]	; (800c9c4 <_LCD_SendData+0x60>)
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	4a14      	ldr	r2, [pc, #80]	; (800c9c4 <_LCD_SendData+0x60>)
 800c974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c978:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c97a:	4b12      	ldr	r3, [pc, #72]	; (800c9c4 <_LCD_SendData+0x60>)
 800c97c:	695b      	ldr	r3, [r3, #20]
 800c97e:	4a11      	ldr	r2, [pc, #68]	; (800c9c4 <_LCD_SendData+0x60>)
 800c980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c984:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800c986:	79fb      	ldrb	r3, [r7, #7]
 800c988:	2200      	movs	r2, #0
 800c98a:	2100      	movs	r1, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f81b 	bl	800c9c8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
 800c996:	e008      	b.n	800c9aa <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c998:	4b0a      	ldr	r3, [pc, #40]	; (800c9c4 <_LCD_SendData+0x60>)
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	4a09      	ldr	r2, [pc, #36]	; (800c9c4 <_LCD_SendData+0x60>)
 800c99e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9a2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	ddf3      	ble.n	800c998 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c9b0:	4b04      	ldr	r3, [pc, #16]	; (800c9c4 <_LCD_SendData+0x60>)
 800c9b2:	695b      	ldr	r3, [r3, #20]
 800c9b4:	4a03      	ldr	r2, [pc, #12]	; (800c9c4 <_LCD_SendData+0x60>)
 800c9b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9ba:	6153      	str	r3, [r2, #20]
}
 800c9bc:	bf00      	nop
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	48000400 	.word	0x48000400

0800c9c8 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	71fb      	strb	r3, [r7, #7]
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	71bb      	strb	r3, [r7, #6]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60fb      	str	r3, [r7, #12]
 800c9de:	e003      	b.n	800c9e8 <_SPI_SendByte+0x20>
   		asm("nop");
 800c9e0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	79bb      	ldrb	r3, [r7, #6]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	dbf7      	blt.n	800c9e0 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800c9f0:	4b0c      	ldr	r3, [pc, #48]	; (800ca24 <_SPI_SendByte+0x5c>)
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f003 0302 	and.w	r3, r3, #2
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d102      	bne.n	800ca02 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800c9fc:	4a0a      	ldr	r2, [pc, #40]	; (800ca28 <_SPI_SendByte+0x60>)
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ca02:	2300      	movs	r3, #0
 800ca04:	60bb      	str	r3, [r7, #8]
 800ca06:	e003      	b.n	800ca10 <_SPI_SendByte+0x48>
   		asm("nop");
 800ca08:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	60bb      	str	r3, [r7, #8]
 800ca10:	797b      	ldrb	r3, [r7, #5]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	dbf7      	blt.n	800ca08 <_SPI_SendByte+0x40>

#endif

}
 800ca18:	bf00      	nop
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	40003c00 	.word	0x40003c00
 800ca28:	40003c0c 	.word	0x40003c0c

0800ca2c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b089      	sub	sp, #36	; 0x24
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	4611      	mov	r1, r2
 800ca38:	461a      	mov	r2, r3
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	71fb      	strb	r3, [r7, #7]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ca42:	2300      	movs	r3, #0
 800ca44:	61fb      	str	r3, [r7, #28]
 800ca46:	e003      	b.n	800ca50 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ca48:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	61fb      	str	r3, [r7, #28]
 800ca50:	79fb      	ldrb	r3, [r7, #7]
 800ca52:	69fa      	ldr	r2, [r7, #28]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	dbf7      	blt.n	800ca48 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ca5c:	e01d      	b.n	800ca9a <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <_SPI_SendByteMultiByte+0xa4>)
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	f003 0302 	and.w	r3, r3, #2
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d117      	bne.n	800ca9a <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d90a      	bls.n	800ca86 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	881a      	ldrh	r2, [r3, #0]
 800ca74:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <_SPI_SendByteMultiByte+0xa4>)
 800ca76:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	3302      	adds	r3, #2
 800ca7c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	3b02      	subs	r3, #2
 800ca82:	60bb      	str	r3, [r7, #8]
 800ca84:	e009      	b.n	800ca9a <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800ca86:	4a13      	ldr	r2, [pc, #76]	; (800cad4 <_SPI_SendByteMultiByte+0xa8>)
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	3301      	adds	r3, #1
 800ca92:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1de      	bne.n	800ca5e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800caa0:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <_SPI_SendByteMultiByte+0xa4>)
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	4a0a      	ldr	r2, [pc, #40]	; (800cad0 <_SPI_SendByteMultiByte+0xa4>)
 800caa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caaa:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800caac:	2300      	movs	r3, #0
 800caae:	617b      	str	r3, [r7, #20]
 800cab0:	e003      	b.n	800caba <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800cab2:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	3301      	adds	r3, #1
 800cab8:	617b      	str	r3, [r7, #20]
 800caba:	79bb      	ldrb	r3, [r7, #6]
 800cabc:	697a      	ldr	r2, [r7, #20]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	dbf7      	blt.n	800cab2 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800cac2:	bf00      	nop
 800cac4:	3724      	adds	r7, #36	; 0x24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	40003c00 	.word	0x40003c00
 800cad4:	40003c0c 	.word	0x40003c0c

0800cad8 <__errno>:
 800cad8:	4b01      	ldr	r3, [pc, #4]	; (800cae0 <__errno+0x8>)
 800cada:	6818      	ldr	r0, [r3, #0]
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	20001ce8 	.word	0x20001ce8

0800cae4 <__libc_init_array>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	4e0d      	ldr	r6, [pc, #52]	; (800cb1c <__libc_init_array+0x38>)
 800cae8:	4c0d      	ldr	r4, [pc, #52]	; (800cb20 <__libc_init_array+0x3c>)
 800caea:	1ba4      	subs	r4, r4, r6
 800caec:	10a4      	asrs	r4, r4, #2
 800caee:	2500      	movs	r5, #0
 800caf0:	42a5      	cmp	r5, r4
 800caf2:	d109      	bne.n	800cb08 <__libc_init_array+0x24>
 800caf4:	4e0b      	ldr	r6, [pc, #44]	; (800cb24 <__libc_init_array+0x40>)
 800caf6:	4c0c      	ldr	r4, [pc, #48]	; (800cb28 <__libc_init_array+0x44>)
 800caf8:	f002 fc32 	bl	800f360 <_init>
 800cafc:	1ba4      	subs	r4, r4, r6
 800cafe:	10a4      	asrs	r4, r4, #2
 800cb00:	2500      	movs	r5, #0
 800cb02:	42a5      	cmp	r5, r4
 800cb04:	d105      	bne.n	800cb12 <__libc_init_array+0x2e>
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb0c:	4798      	blx	r3
 800cb0e:	3501      	adds	r5, #1
 800cb10:	e7ee      	b.n	800caf0 <__libc_init_array+0xc>
 800cb12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb16:	4798      	blx	r3
 800cb18:	3501      	adds	r5, #1
 800cb1a:	e7f2      	b.n	800cb02 <__libc_init_array+0x1e>
 800cb1c:	080105d0 	.word	0x080105d0
 800cb20:	080105d0 	.word	0x080105d0
 800cb24:	080105d0 	.word	0x080105d0
 800cb28:	080105d4 	.word	0x080105d4

0800cb2c <memset>:
 800cb2c:	4402      	add	r2, r0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d100      	bne.n	800cb36 <memset+0xa>
 800cb34:	4770      	bx	lr
 800cb36:	f803 1b01 	strb.w	r1, [r3], #1
 800cb3a:	e7f9      	b.n	800cb30 <memset+0x4>

0800cb3c <__cvt>:
 800cb3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb40:	ec55 4b10 	vmov	r4, r5, d0
 800cb44:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cb46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb4a:	2d00      	cmp	r5, #0
 800cb4c:	460e      	mov	r6, r1
 800cb4e:	4691      	mov	r9, r2
 800cb50:	4619      	mov	r1, r3
 800cb52:	bfb8      	it	lt
 800cb54:	4622      	movlt	r2, r4
 800cb56:	462b      	mov	r3, r5
 800cb58:	f027 0720 	bic.w	r7, r7, #32
 800cb5c:	bfbb      	ittet	lt
 800cb5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb62:	461d      	movlt	r5, r3
 800cb64:	2300      	movge	r3, #0
 800cb66:	232d      	movlt	r3, #45	; 0x2d
 800cb68:	bfb8      	it	lt
 800cb6a:	4614      	movlt	r4, r2
 800cb6c:	2f46      	cmp	r7, #70	; 0x46
 800cb6e:	700b      	strb	r3, [r1, #0]
 800cb70:	d004      	beq.n	800cb7c <__cvt+0x40>
 800cb72:	2f45      	cmp	r7, #69	; 0x45
 800cb74:	d100      	bne.n	800cb78 <__cvt+0x3c>
 800cb76:	3601      	adds	r6, #1
 800cb78:	2102      	movs	r1, #2
 800cb7a:	e000      	b.n	800cb7e <__cvt+0x42>
 800cb7c:	2103      	movs	r1, #3
 800cb7e:	ab03      	add	r3, sp, #12
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	ab02      	add	r3, sp, #8
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	4632      	mov	r2, r6
 800cb88:	4653      	mov	r3, sl
 800cb8a:	ec45 4b10 	vmov	d0, r4, r5
 800cb8e:	f000 fe27 	bl	800d7e0 <_dtoa_r>
 800cb92:	2f47      	cmp	r7, #71	; 0x47
 800cb94:	4680      	mov	r8, r0
 800cb96:	d102      	bne.n	800cb9e <__cvt+0x62>
 800cb98:	f019 0f01 	tst.w	r9, #1
 800cb9c:	d026      	beq.n	800cbec <__cvt+0xb0>
 800cb9e:	2f46      	cmp	r7, #70	; 0x46
 800cba0:	eb08 0906 	add.w	r9, r8, r6
 800cba4:	d111      	bne.n	800cbca <__cvt+0x8e>
 800cba6:	f898 3000 	ldrb.w	r3, [r8]
 800cbaa:	2b30      	cmp	r3, #48	; 0x30
 800cbac:	d10a      	bne.n	800cbc4 <__cvt+0x88>
 800cbae:	2200      	movs	r2, #0
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	f7f3 ffaf 	bl	8000b18 <__aeabi_dcmpeq>
 800cbba:	b918      	cbnz	r0, 800cbc4 <__cvt+0x88>
 800cbbc:	f1c6 0601 	rsb	r6, r6, #1
 800cbc0:	f8ca 6000 	str.w	r6, [sl]
 800cbc4:	f8da 3000 	ldr.w	r3, [sl]
 800cbc8:	4499      	add	r9, r3
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2300      	movs	r3, #0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7f3 ffa1 	bl	8000b18 <__aeabi_dcmpeq>
 800cbd6:	b938      	cbnz	r0, 800cbe8 <__cvt+0xac>
 800cbd8:	2230      	movs	r2, #48	; 0x30
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	454b      	cmp	r3, r9
 800cbde:	d205      	bcs.n	800cbec <__cvt+0xb0>
 800cbe0:	1c59      	adds	r1, r3, #1
 800cbe2:	9103      	str	r1, [sp, #12]
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	e7f8      	b.n	800cbda <__cvt+0x9e>
 800cbe8:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbf0:	eba3 0308 	sub.w	r3, r3, r8
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	b004      	add	sp, #16
 800cbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cbfe <__exponent>:
 800cbfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc00:	2900      	cmp	r1, #0
 800cc02:	4604      	mov	r4, r0
 800cc04:	bfba      	itte	lt
 800cc06:	4249      	neglt	r1, r1
 800cc08:	232d      	movlt	r3, #45	; 0x2d
 800cc0a:	232b      	movge	r3, #43	; 0x2b
 800cc0c:	2909      	cmp	r1, #9
 800cc0e:	f804 2b02 	strb.w	r2, [r4], #2
 800cc12:	7043      	strb	r3, [r0, #1]
 800cc14:	dd20      	ble.n	800cc58 <__exponent+0x5a>
 800cc16:	f10d 0307 	add.w	r3, sp, #7
 800cc1a:	461f      	mov	r7, r3
 800cc1c:	260a      	movs	r6, #10
 800cc1e:	fb91 f5f6 	sdiv	r5, r1, r6
 800cc22:	fb06 1115 	mls	r1, r6, r5, r1
 800cc26:	3130      	adds	r1, #48	; 0x30
 800cc28:	2d09      	cmp	r5, #9
 800cc2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc2e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800cc32:	4629      	mov	r1, r5
 800cc34:	dc09      	bgt.n	800cc4a <__exponent+0x4c>
 800cc36:	3130      	adds	r1, #48	; 0x30
 800cc38:	3b02      	subs	r3, #2
 800cc3a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cc3e:	42bb      	cmp	r3, r7
 800cc40:	4622      	mov	r2, r4
 800cc42:	d304      	bcc.n	800cc4e <__exponent+0x50>
 800cc44:	1a10      	subs	r0, r2, r0
 800cc46:	b003      	add	sp, #12
 800cc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	e7e7      	b.n	800cc1e <__exponent+0x20>
 800cc4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc52:	f804 2b01 	strb.w	r2, [r4], #1
 800cc56:	e7f2      	b.n	800cc3e <__exponent+0x40>
 800cc58:	2330      	movs	r3, #48	; 0x30
 800cc5a:	4419      	add	r1, r3
 800cc5c:	7083      	strb	r3, [r0, #2]
 800cc5e:	1d02      	adds	r2, r0, #4
 800cc60:	70c1      	strb	r1, [r0, #3]
 800cc62:	e7ef      	b.n	800cc44 <__exponent+0x46>

0800cc64 <_printf_float>:
 800cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	b08d      	sub	sp, #52	; 0x34
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cc70:	4616      	mov	r6, r2
 800cc72:	461f      	mov	r7, r3
 800cc74:	4605      	mov	r5, r0
 800cc76:	f001 fce5 	bl	800e644 <_localeconv_r>
 800cc7a:	6803      	ldr	r3, [r0, #0]
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f3 face 	bl	8000220 <strlen>
 800cc84:	2300      	movs	r3, #0
 800cc86:	930a      	str	r3, [sp, #40]	; 0x28
 800cc88:	f8d8 3000 	ldr.w	r3, [r8]
 800cc8c:	9005      	str	r0, [sp, #20]
 800cc8e:	3307      	adds	r3, #7
 800cc90:	f023 0307 	bic.w	r3, r3, #7
 800cc94:	f103 0208 	add.w	r2, r3, #8
 800cc98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc9c:	f8d4 b000 	ldr.w	fp, [r4]
 800cca0:	f8c8 2000 	str.w	r2, [r8]
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ccac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ccb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccb4:	9307      	str	r3, [sp, #28]
 800ccb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccbe:	4ba7      	ldr	r3, [pc, #668]	; (800cf5c <_printf_float+0x2f8>)
 800ccc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccc4:	f7f3 ff5a 	bl	8000b7c <__aeabi_dcmpun>
 800ccc8:	bb70      	cbnz	r0, 800cd28 <_printf_float+0xc4>
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccce:	4ba3      	ldr	r3, [pc, #652]	; (800cf5c <_printf_float+0x2f8>)
 800ccd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccd4:	f7f3 ff34 	bl	8000b40 <__aeabi_dcmple>
 800ccd8:	bb30      	cbnz	r0, 800cd28 <_printf_float+0xc4>
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2300      	movs	r3, #0
 800ccde:	4640      	mov	r0, r8
 800cce0:	4649      	mov	r1, r9
 800cce2:	f7f3 ff23 	bl	8000b2c <__aeabi_dcmplt>
 800cce6:	b110      	cbz	r0, 800ccee <_printf_float+0x8a>
 800cce8:	232d      	movs	r3, #45	; 0x2d
 800ccea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccee:	4a9c      	ldr	r2, [pc, #624]	; (800cf60 <_printf_float+0x2fc>)
 800ccf0:	4b9c      	ldr	r3, [pc, #624]	; (800cf64 <_printf_float+0x300>)
 800ccf2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ccf6:	bf8c      	ite	hi
 800ccf8:	4690      	movhi	r8, r2
 800ccfa:	4698      	movls	r8, r3
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	f02b 0204 	bic.w	r2, fp, #4
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	6022      	str	r2, [r4, #0]
 800cd06:	f04f 0900 	mov.w	r9, #0
 800cd0a:	9700      	str	r7, [sp, #0]
 800cd0c:	4633      	mov	r3, r6
 800cd0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd10:	4621      	mov	r1, r4
 800cd12:	4628      	mov	r0, r5
 800cd14:	f000 f9e6 	bl	800d0e4 <_printf_common>
 800cd18:	3001      	adds	r0, #1
 800cd1a:	f040 808d 	bne.w	800ce38 <_printf_float+0x1d4>
 800cd1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd22:	b00d      	add	sp, #52	; 0x34
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd28:	4642      	mov	r2, r8
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4649      	mov	r1, r9
 800cd30:	f7f3 ff24 	bl	8000b7c <__aeabi_dcmpun>
 800cd34:	b110      	cbz	r0, 800cd3c <_printf_float+0xd8>
 800cd36:	4a8c      	ldr	r2, [pc, #560]	; (800cf68 <_printf_float+0x304>)
 800cd38:	4b8c      	ldr	r3, [pc, #560]	; (800cf6c <_printf_float+0x308>)
 800cd3a:	e7da      	b.n	800ccf2 <_printf_float+0x8e>
 800cd3c:	6861      	ldr	r1, [r4, #4]
 800cd3e:	1c4b      	adds	r3, r1, #1
 800cd40:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cd44:	a80a      	add	r0, sp, #40	; 0x28
 800cd46:	d13e      	bne.n	800cdc6 <_printf_float+0x162>
 800cd48:	2306      	movs	r3, #6
 800cd4a:	6063      	str	r3, [r4, #4]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cd52:	ab09      	add	r3, sp, #36	; 0x24
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	ec49 8b10 	vmov	d0, r8, r9
 800cd5a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd5e:	6022      	str	r2, [r4, #0]
 800cd60:	f8cd a004 	str.w	sl, [sp, #4]
 800cd64:	6861      	ldr	r1, [r4, #4]
 800cd66:	4628      	mov	r0, r5
 800cd68:	f7ff fee8 	bl	800cb3c <__cvt>
 800cd6c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cd70:	2b47      	cmp	r3, #71	; 0x47
 800cd72:	4680      	mov	r8, r0
 800cd74:	d109      	bne.n	800cd8a <_printf_float+0x126>
 800cd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd78:	1cd8      	adds	r0, r3, #3
 800cd7a:	db02      	blt.n	800cd82 <_printf_float+0x11e>
 800cd7c:	6862      	ldr	r2, [r4, #4]
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	dd47      	ble.n	800ce12 <_printf_float+0x1ae>
 800cd82:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd86:	fa5f fa8a 	uxtb.w	sl, sl
 800cd8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cd8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd90:	d824      	bhi.n	800cddc <_printf_float+0x178>
 800cd92:	3901      	subs	r1, #1
 800cd94:	4652      	mov	r2, sl
 800cd96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd9a:	9109      	str	r1, [sp, #36]	; 0x24
 800cd9c:	f7ff ff2f 	bl	800cbfe <__exponent>
 800cda0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cda2:	1813      	adds	r3, r2, r0
 800cda4:	2a01      	cmp	r2, #1
 800cda6:	4681      	mov	r9, r0
 800cda8:	6123      	str	r3, [r4, #16]
 800cdaa:	dc02      	bgt.n	800cdb2 <_printf_float+0x14e>
 800cdac:	6822      	ldr	r2, [r4, #0]
 800cdae:	07d1      	lsls	r1, r2, #31
 800cdb0:	d501      	bpl.n	800cdb6 <_printf_float+0x152>
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	6123      	str	r3, [r4, #16]
 800cdb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0a5      	beq.n	800cd0a <_printf_float+0xa6>
 800cdbe:	232d      	movs	r3, #45	; 0x2d
 800cdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdc4:	e7a1      	b.n	800cd0a <_printf_float+0xa6>
 800cdc6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800cdca:	f000 8177 	beq.w	800d0bc <_printf_float+0x458>
 800cdce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cdd2:	d1bb      	bne.n	800cd4c <_printf_float+0xe8>
 800cdd4:	2900      	cmp	r1, #0
 800cdd6:	d1b9      	bne.n	800cd4c <_printf_float+0xe8>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e7b6      	b.n	800cd4a <_printf_float+0xe6>
 800cddc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cde0:	d119      	bne.n	800ce16 <_printf_float+0x1b2>
 800cde2:	2900      	cmp	r1, #0
 800cde4:	6863      	ldr	r3, [r4, #4]
 800cde6:	dd0c      	ble.n	800ce02 <_printf_float+0x19e>
 800cde8:	6121      	str	r1, [r4, #16]
 800cdea:	b913      	cbnz	r3, 800cdf2 <_printf_float+0x18e>
 800cdec:	6822      	ldr	r2, [r4, #0]
 800cdee:	07d2      	lsls	r2, r2, #31
 800cdf0:	d502      	bpl.n	800cdf8 <_printf_float+0x194>
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	440b      	add	r3, r1
 800cdf6:	6123      	str	r3, [r4, #16]
 800cdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdfa:	65a3      	str	r3, [r4, #88]	; 0x58
 800cdfc:	f04f 0900 	mov.w	r9, #0
 800ce00:	e7d9      	b.n	800cdb6 <_printf_float+0x152>
 800ce02:	b913      	cbnz	r3, 800ce0a <_printf_float+0x1a6>
 800ce04:	6822      	ldr	r2, [r4, #0]
 800ce06:	07d0      	lsls	r0, r2, #31
 800ce08:	d501      	bpl.n	800ce0e <_printf_float+0x1aa>
 800ce0a:	3302      	adds	r3, #2
 800ce0c:	e7f3      	b.n	800cdf6 <_printf_float+0x192>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e7f1      	b.n	800cdf6 <_printf_float+0x192>
 800ce12:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ce16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	db05      	blt.n	800ce2a <_printf_float+0x1c6>
 800ce1e:	6822      	ldr	r2, [r4, #0]
 800ce20:	6123      	str	r3, [r4, #16]
 800ce22:	07d1      	lsls	r1, r2, #31
 800ce24:	d5e8      	bpl.n	800cdf8 <_printf_float+0x194>
 800ce26:	3301      	adds	r3, #1
 800ce28:	e7e5      	b.n	800cdf6 <_printf_float+0x192>
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	bfd4      	ite	le
 800ce2e:	f1c3 0302 	rsble	r3, r3, #2
 800ce32:	2301      	movgt	r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	e7de      	b.n	800cdf6 <_printf_float+0x192>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	055a      	lsls	r2, r3, #21
 800ce3c:	d407      	bmi.n	800ce4e <_printf_float+0x1ea>
 800ce3e:	6923      	ldr	r3, [r4, #16]
 800ce40:	4642      	mov	r2, r8
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b8      	blx	r7
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d12b      	bne.n	800cea4 <_printf_float+0x240>
 800ce4c:	e767      	b.n	800cd1e <_printf_float+0xba>
 800ce4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ce52:	f240 80dc 	bls.w	800d00e <_printf_float+0x3aa>
 800ce56:	2200      	movs	r2, #0
 800ce58:	2300      	movs	r3, #0
 800ce5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce5e:	f7f3 fe5b 	bl	8000b18 <__aeabi_dcmpeq>
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d033      	beq.n	800cece <_printf_float+0x26a>
 800ce66:	2301      	movs	r3, #1
 800ce68:	4a41      	ldr	r2, [pc, #260]	; (800cf70 <_printf_float+0x30c>)
 800ce6a:	4631      	mov	r1, r6
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	47b8      	blx	r7
 800ce70:	3001      	adds	r0, #1
 800ce72:	f43f af54 	beq.w	800cd1e <_printf_float+0xba>
 800ce76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	db02      	blt.n	800ce84 <_printf_float+0x220>
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	07d8      	lsls	r0, r3, #31
 800ce82:	d50f      	bpl.n	800cea4 <_printf_float+0x240>
 800ce84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce88:	4631      	mov	r1, r6
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	47b8      	blx	r7
 800ce8e:	3001      	adds	r0, #1
 800ce90:	f43f af45 	beq.w	800cd1e <_printf_float+0xba>
 800ce94:	f04f 0800 	mov.w	r8, #0
 800ce98:	f104 091a 	add.w	r9, r4, #26
 800ce9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	4543      	cmp	r3, r8
 800cea2:	dc09      	bgt.n	800ceb8 <_printf_float+0x254>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	079b      	lsls	r3, r3, #30
 800cea8:	f100 8103 	bmi.w	800d0b2 <_printf_float+0x44e>
 800ceac:	68e0      	ldr	r0, [r4, #12]
 800ceae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb0:	4298      	cmp	r0, r3
 800ceb2:	bfb8      	it	lt
 800ceb4:	4618      	movlt	r0, r3
 800ceb6:	e734      	b.n	800cd22 <_printf_float+0xbe>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	464a      	mov	r2, r9
 800cebc:	4631      	mov	r1, r6
 800cebe:	4628      	mov	r0, r5
 800cec0:	47b8      	blx	r7
 800cec2:	3001      	adds	r0, #1
 800cec4:	f43f af2b 	beq.w	800cd1e <_printf_float+0xba>
 800cec8:	f108 0801 	add.w	r8, r8, #1
 800cecc:	e7e6      	b.n	800ce9c <_printf_float+0x238>
 800cece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	dc2b      	bgt.n	800cf2c <_printf_float+0x2c8>
 800ced4:	2301      	movs	r3, #1
 800ced6:	4a26      	ldr	r2, [pc, #152]	; (800cf70 <_printf_float+0x30c>)
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f af1d 	beq.w	800cd1e <_printf_float+0xba>
 800cee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee6:	b923      	cbnz	r3, 800cef2 <_printf_float+0x28e>
 800cee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceea:	b913      	cbnz	r3, 800cef2 <_printf_float+0x28e>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	07d9      	lsls	r1, r3, #31
 800cef0:	d5d8      	bpl.n	800cea4 <_printf_float+0x240>
 800cef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cef6:	4631      	mov	r1, r6
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b8      	blx	r7
 800cefc:	3001      	adds	r0, #1
 800cefe:	f43f af0e 	beq.w	800cd1e <_printf_float+0xba>
 800cf02:	f04f 0900 	mov.w	r9, #0
 800cf06:	f104 0a1a 	add.w	sl, r4, #26
 800cf0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf0c:	425b      	negs	r3, r3
 800cf0e:	454b      	cmp	r3, r9
 800cf10:	dc01      	bgt.n	800cf16 <_printf_float+0x2b2>
 800cf12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf14:	e794      	b.n	800ce40 <_printf_float+0x1dc>
 800cf16:	2301      	movs	r3, #1
 800cf18:	4652      	mov	r2, sl
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	47b8      	blx	r7
 800cf20:	3001      	adds	r0, #1
 800cf22:	f43f aefc 	beq.w	800cd1e <_printf_float+0xba>
 800cf26:	f109 0901 	add.w	r9, r9, #1
 800cf2a:	e7ee      	b.n	800cf0a <_printf_float+0x2a6>
 800cf2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf30:	429a      	cmp	r2, r3
 800cf32:	bfa8      	it	ge
 800cf34:	461a      	movge	r2, r3
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	4691      	mov	r9, r2
 800cf3a:	dd07      	ble.n	800cf4c <_printf_float+0x2e8>
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4642      	mov	r2, r8
 800cf42:	4628      	mov	r0, r5
 800cf44:	47b8      	blx	r7
 800cf46:	3001      	adds	r0, #1
 800cf48:	f43f aee9 	beq.w	800cd1e <_printf_float+0xba>
 800cf4c:	f104 031a 	add.w	r3, r4, #26
 800cf50:	f04f 0b00 	mov.w	fp, #0
 800cf54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf58:	9306      	str	r3, [sp, #24]
 800cf5a:	e015      	b.n	800cf88 <_printf_float+0x324>
 800cf5c:	7fefffff 	.word	0x7fefffff
 800cf60:	08010318 	.word	0x08010318
 800cf64:	08010314 	.word	0x08010314
 800cf68:	08010320 	.word	0x08010320
 800cf6c:	0801031c 	.word	0x0801031c
 800cf70:	08010324 	.word	0x08010324
 800cf74:	2301      	movs	r3, #1
 800cf76:	9a06      	ldr	r2, [sp, #24]
 800cf78:	4631      	mov	r1, r6
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	47b8      	blx	r7
 800cf7e:	3001      	adds	r0, #1
 800cf80:	f43f aecd 	beq.w	800cd1e <_printf_float+0xba>
 800cf84:	f10b 0b01 	add.w	fp, fp, #1
 800cf88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cf8c:	ebaa 0309 	sub.w	r3, sl, r9
 800cf90:	455b      	cmp	r3, fp
 800cf92:	dcef      	bgt.n	800cf74 <_printf_float+0x310>
 800cf94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	44d0      	add	r8, sl
 800cf9c:	db15      	blt.n	800cfca <_printf_float+0x366>
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	07da      	lsls	r2, r3, #31
 800cfa2:	d412      	bmi.n	800cfca <_printf_float+0x366>
 800cfa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfa8:	eba3 020a 	sub.w	r2, r3, sl
 800cfac:	eba3 0a01 	sub.w	sl, r3, r1
 800cfb0:	4592      	cmp	sl, r2
 800cfb2:	bfa8      	it	ge
 800cfb4:	4692      	movge	sl, r2
 800cfb6:	f1ba 0f00 	cmp.w	sl, #0
 800cfba:	dc0e      	bgt.n	800cfda <_printf_float+0x376>
 800cfbc:	f04f 0800 	mov.w	r8, #0
 800cfc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfc4:	f104 091a 	add.w	r9, r4, #26
 800cfc8:	e019      	b.n	800cffe <_printf_float+0x39a>
 800cfca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfce:	4631      	mov	r1, r6
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	47b8      	blx	r7
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	d1e5      	bne.n	800cfa4 <_printf_float+0x340>
 800cfd8:	e6a1      	b.n	800cd1e <_printf_float+0xba>
 800cfda:	4653      	mov	r3, sl
 800cfdc:	4642      	mov	r2, r8
 800cfde:	4631      	mov	r1, r6
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	47b8      	blx	r7
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d1e9      	bne.n	800cfbc <_printf_float+0x358>
 800cfe8:	e699      	b.n	800cd1e <_printf_float+0xba>
 800cfea:	2301      	movs	r3, #1
 800cfec:	464a      	mov	r2, r9
 800cfee:	4631      	mov	r1, r6
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b8      	blx	r7
 800cff4:	3001      	adds	r0, #1
 800cff6:	f43f ae92 	beq.w	800cd1e <_printf_float+0xba>
 800cffa:	f108 0801 	add.w	r8, r8, #1
 800cffe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d002:	1a9b      	subs	r3, r3, r2
 800d004:	eba3 030a 	sub.w	r3, r3, sl
 800d008:	4543      	cmp	r3, r8
 800d00a:	dcee      	bgt.n	800cfea <_printf_float+0x386>
 800d00c:	e74a      	b.n	800cea4 <_printf_float+0x240>
 800d00e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d010:	2a01      	cmp	r2, #1
 800d012:	dc01      	bgt.n	800d018 <_printf_float+0x3b4>
 800d014:	07db      	lsls	r3, r3, #31
 800d016:	d53a      	bpl.n	800d08e <_printf_float+0x42a>
 800d018:	2301      	movs	r3, #1
 800d01a:	4642      	mov	r2, r8
 800d01c:	4631      	mov	r1, r6
 800d01e:	4628      	mov	r0, r5
 800d020:	47b8      	blx	r7
 800d022:	3001      	adds	r0, #1
 800d024:	f43f ae7b 	beq.w	800cd1e <_printf_float+0xba>
 800d028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d02c:	4631      	mov	r1, r6
 800d02e:	4628      	mov	r0, r5
 800d030:	47b8      	blx	r7
 800d032:	3001      	adds	r0, #1
 800d034:	f108 0801 	add.w	r8, r8, #1
 800d038:	f43f ae71 	beq.w	800cd1e <_printf_float+0xba>
 800d03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d03e:	2200      	movs	r2, #0
 800d040:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800d044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d048:	2300      	movs	r3, #0
 800d04a:	f7f3 fd65 	bl	8000b18 <__aeabi_dcmpeq>
 800d04e:	b9c8      	cbnz	r0, 800d084 <_printf_float+0x420>
 800d050:	4653      	mov	r3, sl
 800d052:	4642      	mov	r2, r8
 800d054:	4631      	mov	r1, r6
 800d056:	4628      	mov	r0, r5
 800d058:	47b8      	blx	r7
 800d05a:	3001      	adds	r0, #1
 800d05c:	d10e      	bne.n	800d07c <_printf_float+0x418>
 800d05e:	e65e      	b.n	800cd1e <_printf_float+0xba>
 800d060:	2301      	movs	r3, #1
 800d062:	4652      	mov	r2, sl
 800d064:	4631      	mov	r1, r6
 800d066:	4628      	mov	r0, r5
 800d068:	47b8      	blx	r7
 800d06a:	3001      	adds	r0, #1
 800d06c:	f43f ae57 	beq.w	800cd1e <_printf_float+0xba>
 800d070:	f108 0801 	add.w	r8, r8, #1
 800d074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d076:	3b01      	subs	r3, #1
 800d078:	4543      	cmp	r3, r8
 800d07a:	dcf1      	bgt.n	800d060 <_printf_float+0x3fc>
 800d07c:	464b      	mov	r3, r9
 800d07e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d082:	e6de      	b.n	800ce42 <_printf_float+0x1de>
 800d084:	f04f 0800 	mov.w	r8, #0
 800d088:	f104 0a1a 	add.w	sl, r4, #26
 800d08c:	e7f2      	b.n	800d074 <_printf_float+0x410>
 800d08e:	2301      	movs	r3, #1
 800d090:	e7df      	b.n	800d052 <_printf_float+0x3ee>
 800d092:	2301      	movs	r3, #1
 800d094:	464a      	mov	r2, r9
 800d096:	4631      	mov	r1, r6
 800d098:	4628      	mov	r0, r5
 800d09a:	47b8      	blx	r7
 800d09c:	3001      	adds	r0, #1
 800d09e:	f43f ae3e 	beq.w	800cd1e <_printf_float+0xba>
 800d0a2:	f108 0801 	add.w	r8, r8, #1
 800d0a6:	68e3      	ldr	r3, [r4, #12]
 800d0a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0aa:	1a9b      	subs	r3, r3, r2
 800d0ac:	4543      	cmp	r3, r8
 800d0ae:	dcf0      	bgt.n	800d092 <_printf_float+0x42e>
 800d0b0:	e6fc      	b.n	800ceac <_printf_float+0x248>
 800d0b2:	f04f 0800 	mov.w	r8, #0
 800d0b6:	f104 0919 	add.w	r9, r4, #25
 800d0ba:	e7f4      	b.n	800d0a6 <_printf_float+0x442>
 800d0bc:	2900      	cmp	r1, #0
 800d0be:	f43f ae8b 	beq.w	800cdd8 <_printf_float+0x174>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d0c8:	ab09      	add	r3, sp, #36	; 0x24
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	ec49 8b10 	vmov	d0, r8, r9
 800d0d0:	6022      	str	r2, [r4, #0]
 800d0d2:	f8cd a004 	str.w	sl, [sp, #4]
 800d0d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f7ff fd2e 	bl	800cb3c <__cvt>
 800d0e0:	4680      	mov	r8, r0
 800d0e2:	e648      	b.n	800cd76 <_printf_float+0x112>

0800d0e4 <_printf_common>:
 800d0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e8:	4691      	mov	r9, r2
 800d0ea:	461f      	mov	r7, r3
 800d0ec:	688a      	ldr	r2, [r1, #8]
 800d0ee:	690b      	ldr	r3, [r1, #16]
 800d0f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	bfb8      	it	lt
 800d0f8:	4613      	movlt	r3, r2
 800d0fa:	f8c9 3000 	str.w	r3, [r9]
 800d0fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d102:	4606      	mov	r6, r0
 800d104:	460c      	mov	r4, r1
 800d106:	b112      	cbz	r2, 800d10e <_printf_common+0x2a>
 800d108:	3301      	adds	r3, #1
 800d10a:	f8c9 3000 	str.w	r3, [r9]
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	0699      	lsls	r1, r3, #26
 800d112:	bf42      	ittt	mi
 800d114:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d118:	3302      	addmi	r3, #2
 800d11a:	f8c9 3000 	strmi.w	r3, [r9]
 800d11e:	6825      	ldr	r5, [r4, #0]
 800d120:	f015 0506 	ands.w	r5, r5, #6
 800d124:	d107      	bne.n	800d136 <_printf_common+0x52>
 800d126:	f104 0a19 	add.w	sl, r4, #25
 800d12a:	68e3      	ldr	r3, [r4, #12]
 800d12c:	f8d9 2000 	ldr.w	r2, [r9]
 800d130:	1a9b      	subs	r3, r3, r2
 800d132:	42ab      	cmp	r3, r5
 800d134:	dc28      	bgt.n	800d188 <_printf_common+0xa4>
 800d136:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d13a:	6822      	ldr	r2, [r4, #0]
 800d13c:	3300      	adds	r3, #0
 800d13e:	bf18      	it	ne
 800d140:	2301      	movne	r3, #1
 800d142:	0692      	lsls	r2, r2, #26
 800d144:	d42d      	bmi.n	800d1a2 <_printf_common+0xbe>
 800d146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d14a:	4639      	mov	r1, r7
 800d14c:	4630      	mov	r0, r6
 800d14e:	47c0      	blx	r8
 800d150:	3001      	adds	r0, #1
 800d152:	d020      	beq.n	800d196 <_printf_common+0xb2>
 800d154:	6823      	ldr	r3, [r4, #0]
 800d156:	68e5      	ldr	r5, [r4, #12]
 800d158:	f8d9 2000 	ldr.w	r2, [r9]
 800d15c:	f003 0306 	and.w	r3, r3, #6
 800d160:	2b04      	cmp	r3, #4
 800d162:	bf08      	it	eq
 800d164:	1aad      	subeq	r5, r5, r2
 800d166:	68a3      	ldr	r3, [r4, #8]
 800d168:	6922      	ldr	r2, [r4, #16]
 800d16a:	bf0c      	ite	eq
 800d16c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d170:	2500      	movne	r5, #0
 800d172:	4293      	cmp	r3, r2
 800d174:	bfc4      	itt	gt
 800d176:	1a9b      	subgt	r3, r3, r2
 800d178:	18ed      	addgt	r5, r5, r3
 800d17a:	f04f 0900 	mov.w	r9, #0
 800d17e:	341a      	adds	r4, #26
 800d180:	454d      	cmp	r5, r9
 800d182:	d11a      	bne.n	800d1ba <_printf_common+0xd6>
 800d184:	2000      	movs	r0, #0
 800d186:	e008      	b.n	800d19a <_printf_common+0xb6>
 800d188:	2301      	movs	r3, #1
 800d18a:	4652      	mov	r2, sl
 800d18c:	4639      	mov	r1, r7
 800d18e:	4630      	mov	r0, r6
 800d190:	47c0      	blx	r8
 800d192:	3001      	adds	r0, #1
 800d194:	d103      	bne.n	800d19e <_printf_common+0xba>
 800d196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19e:	3501      	adds	r5, #1
 800d1a0:	e7c3      	b.n	800d12a <_printf_common+0x46>
 800d1a2:	18e1      	adds	r1, r4, r3
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	2030      	movs	r0, #48	; 0x30
 800d1a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1ac:	4422      	add	r2, r4
 800d1ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1b6:	3302      	adds	r3, #2
 800d1b8:	e7c5      	b.n	800d146 <_printf_common+0x62>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	4622      	mov	r2, r4
 800d1be:	4639      	mov	r1, r7
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	47c0      	blx	r8
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	d0e6      	beq.n	800d196 <_printf_common+0xb2>
 800d1c8:	f109 0901 	add.w	r9, r9, #1
 800d1cc:	e7d8      	b.n	800d180 <_printf_common+0x9c>
	...

0800d1d0 <_printf_i>:
 800d1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d1d8:	460c      	mov	r4, r1
 800d1da:	7e09      	ldrb	r1, [r1, #24]
 800d1dc:	b085      	sub	sp, #20
 800d1de:	296e      	cmp	r1, #110	; 0x6e
 800d1e0:	4617      	mov	r7, r2
 800d1e2:	4606      	mov	r6, r0
 800d1e4:	4698      	mov	r8, r3
 800d1e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1e8:	f000 80b3 	beq.w	800d352 <_printf_i+0x182>
 800d1ec:	d822      	bhi.n	800d234 <_printf_i+0x64>
 800d1ee:	2963      	cmp	r1, #99	; 0x63
 800d1f0:	d036      	beq.n	800d260 <_printf_i+0x90>
 800d1f2:	d80a      	bhi.n	800d20a <_printf_i+0x3a>
 800d1f4:	2900      	cmp	r1, #0
 800d1f6:	f000 80b9 	beq.w	800d36c <_printf_i+0x19c>
 800d1fa:	2958      	cmp	r1, #88	; 0x58
 800d1fc:	f000 8083 	beq.w	800d306 <_printf_i+0x136>
 800d200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d204:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d208:	e032      	b.n	800d270 <_printf_i+0xa0>
 800d20a:	2964      	cmp	r1, #100	; 0x64
 800d20c:	d001      	beq.n	800d212 <_printf_i+0x42>
 800d20e:	2969      	cmp	r1, #105	; 0x69
 800d210:	d1f6      	bne.n	800d200 <_printf_i+0x30>
 800d212:	6820      	ldr	r0, [r4, #0]
 800d214:	6813      	ldr	r3, [r2, #0]
 800d216:	0605      	lsls	r5, r0, #24
 800d218:	f103 0104 	add.w	r1, r3, #4
 800d21c:	d52a      	bpl.n	800d274 <_printf_i+0xa4>
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6011      	str	r1, [r2, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	da03      	bge.n	800d22e <_printf_i+0x5e>
 800d226:	222d      	movs	r2, #45	; 0x2d
 800d228:	425b      	negs	r3, r3
 800d22a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d22e:	486f      	ldr	r0, [pc, #444]	; (800d3ec <_printf_i+0x21c>)
 800d230:	220a      	movs	r2, #10
 800d232:	e039      	b.n	800d2a8 <_printf_i+0xd8>
 800d234:	2973      	cmp	r1, #115	; 0x73
 800d236:	f000 809d 	beq.w	800d374 <_printf_i+0x1a4>
 800d23a:	d808      	bhi.n	800d24e <_printf_i+0x7e>
 800d23c:	296f      	cmp	r1, #111	; 0x6f
 800d23e:	d020      	beq.n	800d282 <_printf_i+0xb2>
 800d240:	2970      	cmp	r1, #112	; 0x70
 800d242:	d1dd      	bne.n	800d200 <_printf_i+0x30>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	f043 0320 	orr.w	r3, r3, #32
 800d24a:	6023      	str	r3, [r4, #0]
 800d24c:	e003      	b.n	800d256 <_printf_i+0x86>
 800d24e:	2975      	cmp	r1, #117	; 0x75
 800d250:	d017      	beq.n	800d282 <_printf_i+0xb2>
 800d252:	2978      	cmp	r1, #120	; 0x78
 800d254:	d1d4      	bne.n	800d200 <_printf_i+0x30>
 800d256:	2378      	movs	r3, #120	; 0x78
 800d258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d25c:	4864      	ldr	r0, [pc, #400]	; (800d3f0 <_printf_i+0x220>)
 800d25e:	e055      	b.n	800d30c <_printf_i+0x13c>
 800d260:	6813      	ldr	r3, [r2, #0]
 800d262:	1d19      	adds	r1, r3, #4
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6011      	str	r1, [r2, #0]
 800d268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d26c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d270:	2301      	movs	r3, #1
 800d272:	e08c      	b.n	800d38e <_printf_i+0x1be>
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6011      	str	r1, [r2, #0]
 800d278:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d27c:	bf18      	it	ne
 800d27e:	b21b      	sxthne	r3, r3
 800d280:	e7cf      	b.n	800d222 <_printf_i+0x52>
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	6825      	ldr	r5, [r4, #0]
 800d286:	1d18      	adds	r0, r3, #4
 800d288:	6010      	str	r0, [r2, #0]
 800d28a:	0628      	lsls	r0, r5, #24
 800d28c:	d501      	bpl.n	800d292 <_printf_i+0xc2>
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	e002      	b.n	800d298 <_printf_i+0xc8>
 800d292:	0668      	lsls	r0, r5, #25
 800d294:	d5fb      	bpl.n	800d28e <_printf_i+0xbe>
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	4854      	ldr	r0, [pc, #336]	; (800d3ec <_printf_i+0x21c>)
 800d29a:	296f      	cmp	r1, #111	; 0x6f
 800d29c:	bf14      	ite	ne
 800d29e:	220a      	movne	r2, #10
 800d2a0:	2208      	moveq	r2, #8
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2a8:	6865      	ldr	r5, [r4, #4]
 800d2aa:	60a5      	str	r5, [r4, #8]
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	f2c0 8095 	blt.w	800d3dc <_printf_i+0x20c>
 800d2b2:	6821      	ldr	r1, [r4, #0]
 800d2b4:	f021 0104 	bic.w	r1, r1, #4
 800d2b8:	6021      	str	r1, [r4, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d13d      	bne.n	800d33a <_printf_i+0x16a>
 800d2be:	2d00      	cmp	r5, #0
 800d2c0:	f040 808e 	bne.w	800d3e0 <_printf_i+0x210>
 800d2c4:	4665      	mov	r5, ip
 800d2c6:	2a08      	cmp	r2, #8
 800d2c8:	d10b      	bne.n	800d2e2 <_printf_i+0x112>
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	07db      	lsls	r3, r3, #31
 800d2ce:	d508      	bpl.n	800d2e2 <_printf_i+0x112>
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	6862      	ldr	r2, [r4, #4]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	bfde      	ittt	le
 800d2d8:	2330      	movle	r3, #48	; 0x30
 800d2da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d2e2:	ebac 0305 	sub.w	r3, ip, r5
 800d2e6:	6123      	str	r3, [r4, #16]
 800d2e8:	f8cd 8000 	str.w	r8, [sp]
 800d2ec:	463b      	mov	r3, r7
 800d2ee:	aa03      	add	r2, sp, #12
 800d2f0:	4621      	mov	r1, r4
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7ff fef6 	bl	800d0e4 <_printf_common>
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	d14d      	bne.n	800d398 <_printf_i+0x1c8>
 800d2fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d300:	b005      	add	sp, #20
 800d302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d306:	4839      	ldr	r0, [pc, #228]	; (800d3ec <_printf_i+0x21c>)
 800d308:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d30c:	6813      	ldr	r3, [r2, #0]
 800d30e:	6821      	ldr	r1, [r4, #0]
 800d310:	1d1d      	adds	r5, r3, #4
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6015      	str	r5, [r2, #0]
 800d316:	060a      	lsls	r2, r1, #24
 800d318:	d50b      	bpl.n	800d332 <_printf_i+0x162>
 800d31a:	07ca      	lsls	r2, r1, #31
 800d31c:	bf44      	itt	mi
 800d31e:	f041 0120 	orrmi.w	r1, r1, #32
 800d322:	6021      	strmi	r1, [r4, #0]
 800d324:	b91b      	cbnz	r3, 800d32e <_printf_i+0x15e>
 800d326:	6822      	ldr	r2, [r4, #0]
 800d328:	f022 0220 	bic.w	r2, r2, #32
 800d32c:	6022      	str	r2, [r4, #0]
 800d32e:	2210      	movs	r2, #16
 800d330:	e7b7      	b.n	800d2a2 <_printf_i+0xd2>
 800d332:	064d      	lsls	r5, r1, #25
 800d334:	bf48      	it	mi
 800d336:	b29b      	uxthmi	r3, r3
 800d338:	e7ef      	b.n	800d31a <_printf_i+0x14a>
 800d33a:	4665      	mov	r5, ip
 800d33c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d340:	fb02 3311 	mls	r3, r2, r1, r3
 800d344:	5cc3      	ldrb	r3, [r0, r3]
 800d346:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d34a:	460b      	mov	r3, r1
 800d34c:	2900      	cmp	r1, #0
 800d34e:	d1f5      	bne.n	800d33c <_printf_i+0x16c>
 800d350:	e7b9      	b.n	800d2c6 <_printf_i+0xf6>
 800d352:	6813      	ldr	r3, [r2, #0]
 800d354:	6825      	ldr	r5, [r4, #0]
 800d356:	6961      	ldr	r1, [r4, #20]
 800d358:	1d18      	adds	r0, r3, #4
 800d35a:	6010      	str	r0, [r2, #0]
 800d35c:	0628      	lsls	r0, r5, #24
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	d501      	bpl.n	800d366 <_printf_i+0x196>
 800d362:	6019      	str	r1, [r3, #0]
 800d364:	e002      	b.n	800d36c <_printf_i+0x19c>
 800d366:	066a      	lsls	r2, r5, #25
 800d368:	d5fb      	bpl.n	800d362 <_printf_i+0x192>
 800d36a:	8019      	strh	r1, [r3, #0]
 800d36c:	2300      	movs	r3, #0
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	4665      	mov	r5, ip
 800d372:	e7b9      	b.n	800d2e8 <_printf_i+0x118>
 800d374:	6813      	ldr	r3, [r2, #0]
 800d376:	1d19      	adds	r1, r3, #4
 800d378:	6011      	str	r1, [r2, #0]
 800d37a:	681d      	ldr	r5, [r3, #0]
 800d37c:	6862      	ldr	r2, [r4, #4]
 800d37e:	2100      	movs	r1, #0
 800d380:	4628      	mov	r0, r5
 800d382:	f7f2 ff55 	bl	8000230 <memchr>
 800d386:	b108      	cbz	r0, 800d38c <_printf_i+0x1bc>
 800d388:	1b40      	subs	r0, r0, r5
 800d38a:	6060      	str	r0, [r4, #4]
 800d38c:	6863      	ldr	r3, [r4, #4]
 800d38e:	6123      	str	r3, [r4, #16]
 800d390:	2300      	movs	r3, #0
 800d392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d396:	e7a7      	b.n	800d2e8 <_printf_i+0x118>
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	462a      	mov	r2, r5
 800d39c:	4639      	mov	r1, r7
 800d39e:	4630      	mov	r0, r6
 800d3a0:	47c0      	blx	r8
 800d3a2:	3001      	adds	r0, #1
 800d3a4:	d0aa      	beq.n	800d2fc <_printf_i+0x12c>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	079b      	lsls	r3, r3, #30
 800d3aa:	d413      	bmi.n	800d3d4 <_printf_i+0x204>
 800d3ac:	68e0      	ldr	r0, [r4, #12]
 800d3ae:	9b03      	ldr	r3, [sp, #12]
 800d3b0:	4298      	cmp	r0, r3
 800d3b2:	bfb8      	it	lt
 800d3b4:	4618      	movlt	r0, r3
 800d3b6:	e7a3      	b.n	800d300 <_printf_i+0x130>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	464a      	mov	r2, r9
 800d3bc:	4639      	mov	r1, r7
 800d3be:	4630      	mov	r0, r6
 800d3c0:	47c0      	blx	r8
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	d09a      	beq.n	800d2fc <_printf_i+0x12c>
 800d3c6:	3501      	adds	r5, #1
 800d3c8:	68e3      	ldr	r3, [r4, #12]
 800d3ca:	9a03      	ldr	r2, [sp, #12]
 800d3cc:	1a9b      	subs	r3, r3, r2
 800d3ce:	42ab      	cmp	r3, r5
 800d3d0:	dcf2      	bgt.n	800d3b8 <_printf_i+0x1e8>
 800d3d2:	e7eb      	b.n	800d3ac <_printf_i+0x1dc>
 800d3d4:	2500      	movs	r5, #0
 800d3d6:	f104 0919 	add.w	r9, r4, #25
 800d3da:	e7f5      	b.n	800d3c8 <_printf_i+0x1f8>
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1ac      	bne.n	800d33a <_printf_i+0x16a>
 800d3e0:	7803      	ldrb	r3, [r0, #0]
 800d3e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3ea:	e76c      	b.n	800d2c6 <_printf_i+0xf6>
 800d3ec:	08010326 	.word	0x08010326
 800d3f0:	08010337 	.word	0x08010337

0800d3f4 <_puts_r>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	460e      	mov	r6, r1
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	b118      	cbz	r0, 800d404 <_puts_r+0x10>
 800d3fc:	6983      	ldr	r3, [r0, #24]
 800d3fe:	b90b      	cbnz	r3, 800d404 <_puts_r+0x10>
 800d400:	f001 f896 	bl	800e530 <__sinit>
 800d404:	69ab      	ldr	r3, [r5, #24]
 800d406:	68ac      	ldr	r4, [r5, #8]
 800d408:	b913      	cbnz	r3, 800d410 <_puts_r+0x1c>
 800d40a:	4628      	mov	r0, r5
 800d40c:	f001 f890 	bl	800e530 <__sinit>
 800d410:	4b23      	ldr	r3, [pc, #140]	; (800d4a0 <_puts_r+0xac>)
 800d412:	429c      	cmp	r4, r3
 800d414:	d117      	bne.n	800d446 <_puts_r+0x52>
 800d416:	686c      	ldr	r4, [r5, #4]
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	071b      	lsls	r3, r3, #28
 800d41c:	d51d      	bpl.n	800d45a <_puts_r+0x66>
 800d41e:	6923      	ldr	r3, [r4, #16]
 800d420:	b1db      	cbz	r3, 800d45a <_puts_r+0x66>
 800d422:	3e01      	subs	r6, #1
 800d424:	68a3      	ldr	r3, [r4, #8]
 800d426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d42a:	3b01      	subs	r3, #1
 800d42c:	60a3      	str	r3, [r4, #8]
 800d42e:	b9e9      	cbnz	r1, 800d46c <_puts_r+0x78>
 800d430:	2b00      	cmp	r3, #0
 800d432:	da2e      	bge.n	800d492 <_puts_r+0x9e>
 800d434:	4622      	mov	r2, r4
 800d436:	210a      	movs	r1, #10
 800d438:	4628      	mov	r0, r5
 800d43a:	f000 f883 	bl	800d544 <__swbuf_r>
 800d43e:	3001      	adds	r0, #1
 800d440:	d011      	beq.n	800d466 <_puts_r+0x72>
 800d442:	200a      	movs	r0, #10
 800d444:	e011      	b.n	800d46a <_puts_r+0x76>
 800d446:	4b17      	ldr	r3, [pc, #92]	; (800d4a4 <_puts_r+0xb0>)
 800d448:	429c      	cmp	r4, r3
 800d44a:	d101      	bne.n	800d450 <_puts_r+0x5c>
 800d44c:	68ac      	ldr	r4, [r5, #8]
 800d44e:	e7e3      	b.n	800d418 <_puts_r+0x24>
 800d450:	4b15      	ldr	r3, [pc, #84]	; (800d4a8 <_puts_r+0xb4>)
 800d452:	429c      	cmp	r4, r3
 800d454:	bf08      	it	eq
 800d456:	68ec      	ldreq	r4, [r5, #12]
 800d458:	e7de      	b.n	800d418 <_puts_r+0x24>
 800d45a:	4621      	mov	r1, r4
 800d45c:	4628      	mov	r0, r5
 800d45e:	f000 f8c3 	bl	800d5e8 <__swsetup_r>
 800d462:	2800      	cmp	r0, #0
 800d464:	d0dd      	beq.n	800d422 <_puts_r+0x2e>
 800d466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d46a:	bd70      	pop	{r4, r5, r6, pc}
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	da04      	bge.n	800d47a <_puts_r+0x86>
 800d470:	69a2      	ldr	r2, [r4, #24]
 800d472:	429a      	cmp	r2, r3
 800d474:	dc06      	bgt.n	800d484 <_puts_r+0x90>
 800d476:	290a      	cmp	r1, #10
 800d478:	d004      	beq.n	800d484 <_puts_r+0x90>
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	6022      	str	r2, [r4, #0]
 800d480:	7019      	strb	r1, [r3, #0]
 800d482:	e7cf      	b.n	800d424 <_puts_r+0x30>
 800d484:	4622      	mov	r2, r4
 800d486:	4628      	mov	r0, r5
 800d488:	f000 f85c 	bl	800d544 <__swbuf_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	d1c9      	bne.n	800d424 <_puts_r+0x30>
 800d490:	e7e9      	b.n	800d466 <_puts_r+0x72>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	200a      	movs	r0, #10
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	6022      	str	r2, [r4, #0]
 800d49a:	7018      	strb	r0, [r3, #0]
 800d49c:	e7e5      	b.n	800d46a <_puts_r+0x76>
 800d49e:	bf00      	nop
 800d4a0:	08010378 	.word	0x08010378
 800d4a4:	08010398 	.word	0x08010398
 800d4a8:	08010358 	.word	0x08010358

0800d4ac <puts>:
 800d4ac:	4b02      	ldr	r3, [pc, #8]	; (800d4b8 <puts+0xc>)
 800d4ae:	4601      	mov	r1, r0
 800d4b0:	6818      	ldr	r0, [r3, #0]
 800d4b2:	f7ff bf9f 	b.w	800d3f4 <_puts_r>
 800d4b6:	bf00      	nop
 800d4b8:	20001ce8 	.word	0x20001ce8

0800d4bc <sniprintf>:
 800d4bc:	b40c      	push	{r2, r3}
 800d4be:	b530      	push	{r4, r5, lr}
 800d4c0:	4b17      	ldr	r3, [pc, #92]	; (800d520 <sniprintf+0x64>)
 800d4c2:	1e0c      	subs	r4, r1, #0
 800d4c4:	b09d      	sub	sp, #116	; 0x74
 800d4c6:	681d      	ldr	r5, [r3, #0]
 800d4c8:	da08      	bge.n	800d4dc <sniprintf+0x20>
 800d4ca:	238b      	movs	r3, #139	; 0x8b
 800d4cc:	602b      	str	r3, [r5, #0]
 800d4ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4d2:	b01d      	add	sp, #116	; 0x74
 800d4d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4d8:	b002      	add	sp, #8
 800d4da:	4770      	bx	lr
 800d4dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d4e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4e4:	bf14      	ite	ne
 800d4e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d4ea:	4623      	moveq	r3, r4
 800d4ec:	9304      	str	r3, [sp, #16]
 800d4ee:	9307      	str	r3, [sp, #28]
 800d4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4f4:	9002      	str	r0, [sp, #8]
 800d4f6:	9006      	str	r0, [sp, #24]
 800d4f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4fe:	ab21      	add	r3, sp, #132	; 0x84
 800d500:	a902      	add	r1, sp, #8
 800d502:	4628      	mov	r0, r5
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	f001 fd0d 	bl	800ef24 <_svfiprintf_r>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	bfbc      	itt	lt
 800d50e:	238b      	movlt	r3, #139	; 0x8b
 800d510:	602b      	strlt	r3, [r5, #0]
 800d512:	2c00      	cmp	r4, #0
 800d514:	d0dd      	beq.n	800d4d2 <sniprintf+0x16>
 800d516:	9b02      	ldr	r3, [sp, #8]
 800d518:	2200      	movs	r2, #0
 800d51a:	701a      	strb	r2, [r3, #0]
 800d51c:	e7d9      	b.n	800d4d2 <sniprintf+0x16>
 800d51e:	bf00      	nop
 800d520:	20001ce8 	.word	0x20001ce8

0800d524 <strcat>:
 800d524:	b510      	push	{r4, lr}
 800d526:	4603      	mov	r3, r0
 800d528:	781a      	ldrb	r2, [r3, #0]
 800d52a:	1c5c      	adds	r4, r3, #1
 800d52c:	b93a      	cbnz	r2, 800d53e <strcat+0x1a>
 800d52e:	3b01      	subs	r3, #1
 800d530:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d534:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d538:	2a00      	cmp	r2, #0
 800d53a:	d1f9      	bne.n	800d530 <strcat+0xc>
 800d53c:	bd10      	pop	{r4, pc}
 800d53e:	4623      	mov	r3, r4
 800d540:	e7f2      	b.n	800d528 <strcat+0x4>
	...

0800d544 <__swbuf_r>:
 800d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d546:	460e      	mov	r6, r1
 800d548:	4614      	mov	r4, r2
 800d54a:	4605      	mov	r5, r0
 800d54c:	b118      	cbz	r0, 800d556 <__swbuf_r+0x12>
 800d54e:	6983      	ldr	r3, [r0, #24]
 800d550:	b90b      	cbnz	r3, 800d556 <__swbuf_r+0x12>
 800d552:	f000 ffed 	bl	800e530 <__sinit>
 800d556:	4b21      	ldr	r3, [pc, #132]	; (800d5dc <__swbuf_r+0x98>)
 800d558:	429c      	cmp	r4, r3
 800d55a:	d12a      	bne.n	800d5b2 <__swbuf_r+0x6e>
 800d55c:	686c      	ldr	r4, [r5, #4]
 800d55e:	69a3      	ldr	r3, [r4, #24]
 800d560:	60a3      	str	r3, [r4, #8]
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	071a      	lsls	r2, r3, #28
 800d566:	d52e      	bpl.n	800d5c6 <__swbuf_r+0x82>
 800d568:	6923      	ldr	r3, [r4, #16]
 800d56a:	b363      	cbz	r3, 800d5c6 <__swbuf_r+0x82>
 800d56c:	6923      	ldr	r3, [r4, #16]
 800d56e:	6820      	ldr	r0, [r4, #0]
 800d570:	1ac0      	subs	r0, r0, r3
 800d572:	6963      	ldr	r3, [r4, #20]
 800d574:	b2f6      	uxtb	r6, r6
 800d576:	4283      	cmp	r3, r0
 800d578:	4637      	mov	r7, r6
 800d57a:	dc04      	bgt.n	800d586 <__swbuf_r+0x42>
 800d57c:	4621      	mov	r1, r4
 800d57e:	4628      	mov	r0, r5
 800d580:	f000 ff6c 	bl	800e45c <_fflush_r>
 800d584:	bb28      	cbnz	r0, 800d5d2 <__swbuf_r+0x8e>
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	3b01      	subs	r3, #1
 800d58a:	60a3      	str	r3, [r4, #8]
 800d58c:	6823      	ldr	r3, [r4, #0]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	6022      	str	r2, [r4, #0]
 800d592:	701e      	strb	r6, [r3, #0]
 800d594:	6963      	ldr	r3, [r4, #20]
 800d596:	3001      	adds	r0, #1
 800d598:	4283      	cmp	r3, r0
 800d59a:	d004      	beq.n	800d5a6 <__swbuf_r+0x62>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	07db      	lsls	r3, r3, #31
 800d5a0:	d519      	bpl.n	800d5d6 <__swbuf_r+0x92>
 800d5a2:	2e0a      	cmp	r6, #10
 800d5a4:	d117      	bne.n	800d5d6 <__swbuf_r+0x92>
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f000 ff57 	bl	800e45c <_fflush_r>
 800d5ae:	b190      	cbz	r0, 800d5d6 <__swbuf_r+0x92>
 800d5b0:	e00f      	b.n	800d5d2 <__swbuf_r+0x8e>
 800d5b2:	4b0b      	ldr	r3, [pc, #44]	; (800d5e0 <__swbuf_r+0x9c>)
 800d5b4:	429c      	cmp	r4, r3
 800d5b6:	d101      	bne.n	800d5bc <__swbuf_r+0x78>
 800d5b8:	68ac      	ldr	r4, [r5, #8]
 800d5ba:	e7d0      	b.n	800d55e <__swbuf_r+0x1a>
 800d5bc:	4b09      	ldr	r3, [pc, #36]	; (800d5e4 <__swbuf_r+0xa0>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	bf08      	it	eq
 800d5c2:	68ec      	ldreq	r4, [r5, #12]
 800d5c4:	e7cb      	b.n	800d55e <__swbuf_r+0x1a>
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	f000 f80d 	bl	800d5e8 <__swsetup_r>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d0cc      	beq.n	800d56c <__swbuf_r+0x28>
 800d5d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	08010378 	.word	0x08010378
 800d5e0:	08010398 	.word	0x08010398
 800d5e4:	08010358 	.word	0x08010358

0800d5e8 <__swsetup_r>:
 800d5e8:	4b32      	ldr	r3, [pc, #200]	; (800d6b4 <__swsetup_r+0xcc>)
 800d5ea:	b570      	push	{r4, r5, r6, lr}
 800d5ec:	681d      	ldr	r5, [r3, #0]
 800d5ee:	4606      	mov	r6, r0
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	b125      	cbz	r5, 800d5fe <__swsetup_r+0x16>
 800d5f4:	69ab      	ldr	r3, [r5, #24]
 800d5f6:	b913      	cbnz	r3, 800d5fe <__swsetup_r+0x16>
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f000 ff99 	bl	800e530 <__sinit>
 800d5fe:	4b2e      	ldr	r3, [pc, #184]	; (800d6b8 <__swsetup_r+0xd0>)
 800d600:	429c      	cmp	r4, r3
 800d602:	d10f      	bne.n	800d624 <__swsetup_r+0x3c>
 800d604:	686c      	ldr	r4, [r5, #4]
 800d606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	0715      	lsls	r5, r2, #28
 800d60e:	d42c      	bmi.n	800d66a <__swsetup_r+0x82>
 800d610:	06d0      	lsls	r0, r2, #27
 800d612:	d411      	bmi.n	800d638 <__swsetup_r+0x50>
 800d614:	2209      	movs	r2, #9
 800d616:	6032      	str	r2, [r6, #0]
 800d618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d61c:	81a3      	strh	r3, [r4, #12]
 800d61e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d622:	e03e      	b.n	800d6a2 <__swsetup_r+0xba>
 800d624:	4b25      	ldr	r3, [pc, #148]	; (800d6bc <__swsetup_r+0xd4>)
 800d626:	429c      	cmp	r4, r3
 800d628:	d101      	bne.n	800d62e <__swsetup_r+0x46>
 800d62a:	68ac      	ldr	r4, [r5, #8]
 800d62c:	e7eb      	b.n	800d606 <__swsetup_r+0x1e>
 800d62e:	4b24      	ldr	r3, [pc, #144]	; (800d6c0 <__swsetup_r+0xd8>)
 800d630:	429c      	cmp	r4, r3
 800d632:	bf08      	it	eq
 800d634:	68ec      	ldreq	r4, [r5, #12]
 800d636:	e7e6      	b.n	800d606 <__swsetup_r+0x1e>
 800d638:	0751      	lsls	r1, r2, #29
 800d63a:	d512      	bpl.n	800d662 <__swsetup_r+0x7a>
 800d63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d63e:	b141      	cbz	r1, 800d652 <__swsetup_r+0x6a>
 800d640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d644:	4299      	cmp	r1, r3
 800d646:	d002      	beq.n	800d64e <__swsetup_r+0x66>
 800d648:	4630      	mov	r0, r6
 800d64a:	f001 fb69 	bl	800ed20 <_free_r>
 800d64e:	2300      	movs	r3, #0
 800d650:	6363      	str	r3, [r4, #52]	; 0x34
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d658:	81a3      	strh	r3, [r4, #12]
 800d65a:	2300      	movs	r3, #0
 800d65c:	6063      	str	r3, [r4, #4]
 800d65e:	6923      	ldr	r3, [r4, #16]
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	89a3      	ldrh	r3, [r4, #12]
 800d664:	f043 0308 	orr.w	r3, r3, #8
 800d668:	81a3      	strh	r3, [r4, #12]
 800d66a:	6923      	ldr	r3, [r4, #16]
 800d66c:	b94b      	cbnz	r3, 800d682 <__swsetup_r+0x9a>
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d678:	d003      	beq.n	800d682 <__swsetup_r+0x9a>
 800d67a:	4621      	mov	r1, r4
 800d67c:	4630      	mov	r0, r6
 800d67e:	f001 f813 	bl	800e6a8 <__smakebuf_r>
 800d682:	89a2      	ldrh	r2, [r4, #12]
 800d684:	f012 0301 	ands.w	r3, r2, #1
 800d688:	d00c      	beq.n	800d6a4 <__swsetup_r+0xbc>
 800d68a:	2300      	movs	r3, #0
 800d68c:	60a3      	str	r3, [r4, #8]
 800d68e:	6963      	ldr	r3, [r4, #20]
 800d690:	425b      	negs	r3, r3
 800d692:	61a3      	str	r3, [r4, #24]
 800d694:	6923      	ldr	r3, [r4, #16]
 800d696:	b953      	cbnz	r3, 800d6ae <__swsetup_r+0xc6>
 800d698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d6a0:	d1ba      	bne.n	800d618 <__swsetup_r+0x30>
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
 800d6a4:	0792      	lsls	r2, r2, #30
 800d6a6:	bf58      	it	pl
 800d6a8:	6963      	ldrpl	r3, [r4, #20]
 800d6aa:	60a3      	str	r3, [r4, #8]
 800d6ac:	e7f2      	b.n	800d694 <__swsetup_r+0xac>
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	e7f7      	b.n	800d6a2 <__swsetup_r+0xba>
 800d6b2:	bf00      	nop
 800d6b4:	20001ce8 	.word	0x20001ce8
 800d6b8:	08010378 	.word	0x08010378
 800d6bc:	08010398 	.word	0x08010398
 800d6c0:	08010358 	.word	0x08010358

0800d6c4 <quorem>:
 800d6c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c8:	6903      	ldr	r3, [r0, #16]
 800d6ca:	690c      	ldr	r4, [r1, #16]
 800d6cc:	42a3      	cmp	r3, r4
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	f2c0 8082 	blt.w	800d7d8 <quorem+0x114>
 800d6d4:	3c01      	subs	r4, #1
 800d6d6:	f101 0714 	add.w	r7, r1, #20
 800d6da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d6de:	f100 0614 	add.w	r6, r0, #20
 800d6e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d6e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d6ea:	eb06 030c 	add.w	r3, r6, ip
 800d6ee:	3501      	adds	r5, #1
 800d6f0:	eb07 090c 	add.w	r9, r7, ip
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	fbb0 f5f5 	udiv	r5, r0, r5
 800d6fa:	b395      	cbz	r5, 800d762 <quorem+0x9e>
 800d6fc:	f04f 0a00 	mov.w	sl, #0
 800d700:	4638      	mov	r0, r7
 800d702:	46b6      	mov	lr, r6
 800d704:	46d3      	mov	fp, sl
 800d706:	f850 2b04 	ldr.w	r2, [r0], #4
 800d70a:	b293      	uxth	r3, r2
 800d70c:	fb05 a303 	mla	r3, r5, r3, sl
 800d710:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d714:	b29b      	uxth	r3, r3
 800d716:	ebab 0303 	sub.w	r3, fp, r3
 800d71a:	0c12      	lsrs	r2, r2, #16
 800d71c:	f8de b000 	ldr.w	fp, [lr]
 800d720:	fb05 a202 	mla	r2, r5, r2, sl
 800d724:	fa13 f38b 	uxtah	r3, r3, fp
 800d728:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d72c:	fa1f fb82 	uxth.w	fp, r2
 800d730:	f8de 2000 	ldr.w	r2, [lr]
 800d734:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d742:	4581      	cmp	r9, r0
 800d744:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d748:	f84e 3b04 	str.w	r3, [lr], #4
 800d74c:	d2db      	bcs.n	800d706 <quorem+0x42>
 800d74e:	f856 300c 	ldr.w	r3, [r6, ip]
 800d752:	b933      	cbnz	r3, 800d762 <quorem+0x9e>
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	3b04      	subs	r3, #4
 800d758:	429e      	cmp	r6, r3
 800d75a:	461a      	mov	r2, r3
 800d75c:	d330      	bcc.n	800d7c0 <quorem+0xfc>
 800d75e:	f8c8 4010 	str.w	r4, [r8, #16]
 800d762:	4640      	mov	r0, r8
 800d764:	f001 fa08 	bl	800eb78 <__mcmp>
 800d768:	2800      	cmp	r0, #0
 800d76a:	db25      	blt.n	800d7b8 <quorem+0xf4>
 800d76c:	3501      	adds	r5, #1
 800d76e:	4630      	mov	r0, r6
 800d770:	f04f 0c00 	mov.w	ip, #0
 800d774:	f857 2b04 	ldr.w	r2, [r7], #4
 800d778:	f8d0 e000 	ldr.w	lr, [r0]
 800d77c:	b293      	uxth	r3, r2
 800d77e:	ebac 0303 	sub.w	r3, ip, r3
 800d782:	0c12      	lsrs	r2, r2, #16
 800d784:	fa13 f38e 	uxtah	r3, r3, lr
 800d788:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d78c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d790:	b29b      	uxth	r3, r3
 800d792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d796:	45b9      	cmp	r9, r7
 800d798:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d79c:	f840 3b04 	str.w	r3, [r0], #4
 800d7a0:	d2e8      	bcs.n	800d774 <quorem+0xb0>
 800d7a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d7a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d7aa:	b92a      	cbnz	r2, 800d7b8 <quorem+0xf4>
 800d7ac:	3b04      	subs	r3, #4
 800d7ae:	429e      	cmp	r6, r3
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	d30b      	bcc.n	800d7cc <quorem+0x108>
 800d7b4:	f8c8 4010 	str.w	r4, [r8, #16]
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	b003      	add	sp, #12
 800d7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c0:	6812      	ldr	r2, [r2, #0]
 800d7c2:	3b04      	subs	r3, #4
 800d7c4:	2a00      	cmp	r2, #0
 800d7c6:	d1ca      	bne.n	800d75e <quorem+0x9a>
 800d7c8:	3c01      	subs	r4, #1
 800d7ca:	e7c5      	b.n	800d758 <quorem+0x94>
 800d7cc:	6812      	ldr	r2, [r2, #0]
 800d7ce:	3b04      	subs	r3, #4
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	d1ef      	bne.n	800d7b4 <quorem+0xf0>
 800d7d4:	3c01      	subs	r4, #1
 800d7d6:	e7ea      	b.n	800d7ae <quorem+0xea>
 800d7d8:	2000      	movs	r0, #0
 800d7da:	e7ee      	b.n	800d7ba <quorem+0xf6>
 800d7dc:	0000      	movs	r0, r0
	...

0800d7e0 <_dtoa_r>:
 800d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e4:	ec57 6b10 	vmov	r6, r7, d0
 800d7e8:	b097      	sub	sp, #92	; 0x5c
 800d7ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d7ec:	9106      	str	r1, [sp, #24]
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d7f2:	9312      	str	r3, [sp, #72]	; 0x48
 800d7f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d7f8:	e9cd 6700 	strd	r6, r7, [sp]
 800d7fc:	b93d      	cbnz	r5, 800d80e <_dtoa_r+0x2e>
 800d7fe:	2010      	movs	r0, #16
 800d800:	f000 ff92 	bl	800e728 <malloc>
 800d804:	6260      	str	r0, [r4, #36]	; 0x24
 800d806:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d80a:	6005      	str	r5, [r0, #0]
 800d80c:	60c5      	str	r5, [r0, #12]
 800d80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d810:	6819      	ldr	r1, [r3, #0]
 800d812:	b151      	cbz	r1, 800d82a <_dtoa_r+0x4a>
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	604a      	str	r2, [r1, #4]
 800d818:	2301      	movs	r3, #1
 800d81a:	4093      	lsls	r3, r2
 800d81c:	608b      	str	r3, [r1, #8]
 800d81e:	4620      	mov	r0, r4
 800d820:	f000 ffc9 	bl	800e7b6 <_Bfree>
 800d824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	1e3b      	subs	r3, r7, #0
 800d82c:	bfbb      	ittet	lt
 800d82e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d832:	9301      	strlt	r3, [sp, #4]
 800d834:	2300      	movge	r3, #0
 800d836:	2201      	movlt	r2, #1
 800d838:	bfac      	ite	ge
 800d83a:	f8c8 3000 	strge.w	r3, [r8]
 800d83e:	f8c8 2000 	strlt.w	r2, [r8]
 800d842:	4baf      	ldr	r3, [pc, #700]	; (800db00 <_dtoa_r+0x320>)
 800d844:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d848:	ea33 0308 	bics.w	r3, r3, r8
 800d84c:	d114      	bne.n	800d878 <_dtoa_r+0x98>
 800d84e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d850:	f242 730f 	movw	r3, #9999	; 0x270f
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	9b00      	ldr	r3, [sp, #0]
 800d858:	b923      	cbnz	r3, 800d864 <_dtoa_r+0x84>
 800d85a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d85e:	2800      	cmp	r0, #0
 800d860:	f000 8542 	beq.w	800e2e8 <_dtoa_r+0xb08>
 800d864:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d866:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800db14 <_dtoa_r+0x334>
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 8544 	beq.w	800e2f8 <_dtoa_r+0xb18>
 800d870:	f10b 0303 	add.w	r3, fp, #3
 800d874:	f000 bd3e 	b.w	800e2f4 <_dtoa_r+0xb14>
 800d878:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d87c:	2200      	movs	r2, #0
 800d87e:	2300      	movs	r3, #0
 800d880:	4630      	mov	r0, r6
 800d882:	4639      	mov	r1, r7
 800d884:	f7f3 f948 	bl	8000b18 <__aeabi_dcmpeq>
 800d888:	4681      	mov	r9, r0
 800d88a:	b168      	cbz	r0, 800d8a8 <_dtoa_r+0xc8>
 800d88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d88e:	2301      	movs	r3, #1
 800d890:	6013      	str	r3, [r2, #0]
 800d892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 8524 	beq.w	800e2e2 <_dtoa_r+0xb02>
 800d89a:	4b9a      	ldr	r3, [pc, #616]	; (800db04 <_dtoa_r+0x324>)
 800d89c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d89e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d8a2:	6013      	str	r3, [r2, #0]
 800d8a4:	f000 bd28 	b.w	800e2f8 <_dtoa_r+0xb18>
 800d8a8:	aa14      	add	r2, sp, #80	; 0x50
 800d8aa:	a915      	add	r1, sp, #84	; 0x54
 800d8ac:	ec47 6b10 	vmov	d0, r6, r7
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f001 f9d8 	bl	800ec66 <__d2b>
 800d8b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d8ba:	9004      	str	r0, [sp, #16]
 800d8bc:	2d00      	cmp	r5, #0
 800d8be:	d07c      	beq.n	800d9ba <_dtoa_r+0x1da>
 800d8c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d8c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d8c8:	46b2      	mov	sl, r6
 800d8ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d8ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d8d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	4b8b      	ldr	r3, [pc, #556]	; (800db08 <_dtoa_r+0x328>)
 800d8da:	4650      	mov	r0, sl
 800d8dc:	4659      	mov	r1, fp
 800d8de:	f7f2 fcfb 	bl	80002d8 <__aeabi_dsub>
 800d8e2:	a381      	add	r3, pc, #516	; (adr r3, 800dae8 <_dtoa_r+0x308>)
 800d8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e8:	f7f2 feae 	bl	8000648 <__aeabi_dmul>
 800d8ec:	a380      	add	r3, pc, #512	; (adr r3, 800daf0 <_dtoa_r+0x310>)
 800d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f2:	f7f2 fcf3 	bl	80002dc <__adddf3>
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	460f      	mov	r7, r1
 800d8fc:	f7f2 fe3a 	bl	8000574 <__aeabi_i2d>
 800d900:	a37d      	add	r3, pc, #500	; (adr r3, 800daf8 <_dtoa_r+0x318>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	f7f2 fe9f 	bl	8000648 <__aeabi_dmul>
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	4630      	mov	r0, r6
 800d910:	4639      	mov	r1, r7
 800d912:	f7f2 fce3 	bl	80002dc <__adddf3>
 800d916:	4606      	mov	r6, r0
 800d918:	460f      	mov	r7, r1
 800d91a:	f7f3 f945 	bl	8000ba8 <__aeabi_d2iz>
 800d91e:	2200      	movs	r2, #0
 800d920:	4682      	mov	sl, r0
 800d922:	2300      	movs	r3, #0
 800d924:	4630      	mov	r0, r6
 800d926:	4639      	mov	r1, r7
 800d928:	f7f3 f900 	bl	8000b2c <__aeabi_dcmplt>
 800d92c:	b148      	cbz	r0, 800d942 <_dtoa_r+0x162>
 800d92e:	4650      	mov	r0, sl
 800d930:	f7f2 fe20 	bl	8000574 <__aeabi_i2d>
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	f7f3 f8ee 	bl	8000b18 <__aeabi_dcmpeq>
 800d93c:	b908      	cbnz	r0, 800d942 <_dtoa_r+0x162>
 800d93e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d942:	f1ba 0f16 	cmp.w	sl, #22
 800d946:	d859      	bhi.n	800d9fc <_dtoa_r+0x21c>
 800d948:	4970      	ldr	r1, [pc, #448]	; (800db0c <_dtoa_r+0x32c>)
 800d94a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d94e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d952:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d956:	f7f3 f907 	bl	8000b68 <__aeabi_dcmpgt>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	d050      	beq.n	800da00 <_dtoa_r+0x220>
 800d95e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d962:	2300      	movs	r3, #0
 800d964:	930f      	str	r3, [sp, #60]	; 0x3c
 800d966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d968:	1b5d      	subs	r5, r3, r5
 800d96a:	f1b5 0801 	subs.w	r8, r5, #1
 800d96e:	bf49      	itett	mi
 800d970:	f1c5 0301 	rsbmi	r3, r5, #1
 800d974:	2300      	movpl	r3, #0
 800d976:	9305      	strmi	r3, [sp, #20]
 800d978:	f04f 0800 	movmi.w	r8, #0
 800d97c:	bf58      	it	pl
 800d97e:	9305      	strpl	r3, [sp, #20]
 800d980:	f1ba 0f00 	cmp.w	sl, #0
 800d984:	db3e      	blt.n	800da04 <_dtoa_r+0x224>
 800d986:	2300      	movs	r3, #0
 800d988:	44d0      	add	r8, sl
 800d98a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d98e:	9307      	str	r3, [sp, #28]
 800d990:	9b06      	ldr	r3, [sp, #24]
 800d992:	2b09      	cmp	r3, #9
 800d994:	f200 8090 	bhi.w	800dab8 <_dtoa_r+0x2d8>
 800d998:	2b05      	cmp	r3, #5
 800d99a:	bfc4      	itt	gt
 800d99c:	3b04      	subgt	r3, #4
 800d99e:	9306      	strgt	r3, [sp, #24]
 800d9a0:	9b06      	ldr	r3, [sp, #24]
 800d9a2:	f1a3 0302 	sub.w	r3, r3, #2
 800d9a6:	bfcc      	ite	gt
 800d9a8:	2500      	movgt	r5, #0
 800d9aa:	2501      	movle	r5, #1
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	f200 808f 	bhi.w	800dad0 <_dtoa_r+0x2f0>
 800d9b2:	e8df f003 	tbb	[pc, r3]
 800d9b6:	7f7d      	.short	0x7f7d
 800d9b8:	7131      	.short	0x7131
 800d9ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d9be:	441d      	add	r5, r3
 800d9c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d9c4:	2820      	cmp	r0, #32
 800d9c6:	dd13      	ble.n	800d9f0 <_dtoa_r+0x210>
 800d9c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d9cc:	9b00      	ldr	r3, [sp, #0]
 800d9ce:	fa08 f800 	lsl.w	r8, r8, r0
 800d9d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d9d6:	fa23 f000 	lsr.w	r0, r3, r0
 800d9da:	ea48 0000 	orr.w	r0, r8, r0
 800d9de:	f7f2 fdb9 	bl	8000554 <__aeabi_ui2d>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4682      	mov	sl, r0
 800d9e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d9ea:	3d01      	subs	r5, #1
 800d9ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9ee:	e772      	b.n	800d8d6 <_dtoa_r+0xf6>
 800d9f0:	9b00      	ldr	r3, [sp, #0]
 800d9f2:	f1c0 0020 	rsb	r0, r0, #32
 800d9f6:	fa03 f000 	lsl.w	r0, r3, r0
 800d9fa:	e7f0      	b.n	800d9de <_dtoa_r+0x1fe>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e7b1      	b.n	800d964 <_dtoa_r+0x184>
 800da00:	900f      	str	r0, [sp, #60]	; 0x3c
 800da02:	e7b0      	b.n	800d966 <_dtoa_r+0x186>
 800da04:	9b05      	ldr	r3, [sp, #20]
 800da06:	eba3 030a 	sub.w	r3, r3, sl
 800da0a:	9305      	str	r3, [sp, #20]
 800da0c:	f1ca 0300 	rsb	r3, sl, #0
 800da10:	9307      	str	r3, [sp, #28]
 800da12:	2300      	movs	r3, #0
 800da14:	930e      	str	r3, [sp, #56]	; 0x38
 800da16:	e7bb      	b.n	800d990 <_dtoa_r+0x1b0>
 800da18:	2301      	movs	r3, #1
 800da1a:	930a      	str	r3, [sp, #40]	; 0x28
 800da1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	dd59      	ble.n	800dad6 <_dtoa_r+0x2f6>
 800da22:	9302      	str	r3, [sp, #8]
 800da24:	4699      	mov	r9, r3
 800da26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da28:	2200      	movs	r2, #0
 800da2a:	6072      	str	r2, [r6, #4]
 800da2c:	2204      	movs	r2, #4
 800da2e:	f102 0014 	add.w	r0, r2, #20
 800da32:	4298      	cmp	r0, r3
 800da34:	6871      	ldr	r1, [r6, #4]
 800da36:	d953      	bls.n	800dae0 <_dtoa_r+0x300>
 800da38:	4620      	mov	r0, r4
 800da3a:	f000 fe88 	bl	800e74e <_Balloc>
 800da3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da40:	6030      	str	r0, [r6, #0]
 800da42:	f1b9 0f0e 	cmp.w	r9, #14
 800da46:	f8d3 b000 	ldr.w	fp, [r3]
 800da4a:	f200 80e6 	bhi.w	800dc1a <_dtoa_r+0x43a>
 800da4e:	2d00      	cmp	r5, #0
 800da50:	f000 80e3 	beq.w	800dc1a <_dtoa_r+0x43a>
 800da54:	ed9d 7b00 	vldr	d7, [sp]
 800da58:	f1ba 0f00 	cmp.w	sl, #0
 800da5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800da60:	dd74      	ble.n	800db4c <_dtoa_r+0x36c>
 800da62:	4a2a      	ldr	r2, [pc, #168]	; (800db0c <_dtoa_r+0x32c>)
 800da64:	f00a 030f 	and.w	r3, sl, #15
 800da68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da6c:	ed93 7b00 	vldr	d7, [r3]
 800da70:	ea4f 162a 	mov.w	r6, sl, asr #4
 800da74:	06f0      	lsls	r0, r6, #27
 800da76:	ed8d 7b08 	vstr	d7, [sp, #32]
 800da7a:	d565      	bpl.n	800db48 <_dtoa_r+0x368>
 800da7c:	4b24      	ldr	r3, [pc, #144]	; (800db10 <_dtoa_r+0x330>)
 800da7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da86:	f7f2 ff09 	bl	800089c <__aeabi_ddiv>
 800da8a:	e9cd 0100 	strd	r0, r1, [sp]
 800da8e:	f006 060f 	and.w	r6, r6, #15
 800da92:	2503      	movs	r5, #3
 800da94:	4f1e      	ldr	r7, [pc, #120]	; (800db10 <_dtoa_r+0x330>)
 800da96:	e04c      	b.n	800db32 <_dtoa_r+0x352>
 800da98:	2301      	movs	r3, #1
 800da9a:	930a      	str	r3, [sp, #40]	; 0x28
 800da9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da9e:	4453      	add	r3, sl
 800daa0:	f103 0901 	add.w	r9, r3, #1
 800daa4:	9302      	str	r3, [sp, #8]
 800daa6:	464b      	mov	r3, r9
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	bfb8      	it	lt
 800daac:	2301      	movlt	r3, #1
 800daae:	e7ba      	b.n	800da26 <_dtoa_r+0x246>
 800dab0:	2300      	movs	r3, #0
 800dab2:	e7b2      	b.n	800da1a <_dtoa_r+0x23a>
 800dab4:	2300      	movs	r3, #0
 800dab6:	e7f0      	b.n	800da9a <_dtoa_r+0x2ba>
 800dab8:	2501      	movs	r5, #1
 800daba:	2300      	movs	r3, #0
 800dabc:	9306      	str	r3, [sp, #24]
 800dabe:	950a      	str	r5, [sp, #40]	; 0x28
 800dac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dac4:	9302      	str	r3, [sp, #8]
 800dac6:	4699      	mov	r9, r3
 800dac8:	2200      	movs	r2, #0
 800daca:	2312      	movs	r3, #18
 800dacc:	920b      	str	r2, [sp, #44]	; 0x2c
 800dace:	e7aa      	b.n	800da26 <_dtoa_r+0x246>
 800dad0:	2301      	movs	r3, #1
 800dad2:	930a      	str	r3, [sp, #40]	; 0x28
 800dad4:	e7f4      	b.n	800dac0 <_dtoa_r+0x2e0>
 800dad6:	2301      	movs	r3, #1
 800dad8:	9302      	str	r3, [sp, #8]
 800dada:	4699      	mov	r9, r3
 800dadc:	461a      	mov	r2, r3
 800dade:	e7f5      	b.n	800dacc <_dtoa_r+0x2ec>
 800dae0:	3101      	adds	r1, #1
 800dae2:	6071      	str	r1, [r6, #4]
 800dae4:	0052      	lsls	r2, r2, #1
 800dae6:	e7a2      	b.n	800da2e <_dtoa_r+0x24e>
 800dae8:	636f4361 	.word	0x636f4361
 800daec:	3fd287a7 	.word	0x3fd287a7
 800daf0:	8b60c8b3 	.word	0x8b60c8b3
 800daf4:	3fc68a28 	.word	0x3fc68a28
 800daf8:	509f79fb 	.word	0x509f79fb
 800dafc:	3fd34413 	.word	0x3fd34413
 800db00:	7ff00000 	.word	0x7ff00000
 800db04:	08010325 	.word	0x08010325
 800db08:	3ff80000 	.word	0x3ff80000
 800db0c:	080103e0 	.word	0x080103e0
 800db10:	080103b8 	.word	0x080103b8
 800db14:	08010351 	.word	0x08010351
 800db18:	07f1      	lsls	r1, r6, #31
 800db1a:	d508      	bpl.n	800db2e <_dtoa_r+0x34e>
 800db1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db24:	f7f2 fd90 	bl	8000648 <__aeabi_dmul>
 800db28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db2c:	3501      	adds	r5, #1
 800db2e:	1076      	asrs	r6, r6, #1
 800db30:	3708      	adds	r7, #8
 800db32:	2e00      	cmp	r6, #0
 800db34:	d1f0      	bne.n	800db18 <_dtoa_r+0x338>
 800db36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db3e:	f7f2 fead 	bl	800089c <__aeabi_ddiv>
 800db42:	e9cd 0100 	strd	r0, r1, [sp]
 800db46:	e01a      	b.n	800db7e <_dtoa_r+0x39e>
 800db48:	2502      	movs	r5, #2
 800db4a:	e7a3      	b.n	800da94 <_dtoa_r+0x2b4>
 800db4c:	f000 80a0 	beq.w	800dc90 <_dtoa_r+0x4b0>
 800db50:	f1ca 0600 	rsb	r6, sl, #0
 800db54:	4b9f      	ldr	r3, [pc, #636]	; (800ddd4 <_dtoa_r+0x5f4>)
 800db56:	4fa0      	ldr	r7, [pc, #640]	; (800ddd8 <_dtoa_r+0x5f8>)
 800db58:	f006 020f 	and.w	r2, r6, #15
 800db5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800db68:	f7f2 fd6e 	bl	8000648 <__aeabi_dmul>
 800db6c:	e9cd 0100 	strd	r0, r1, [sp]
 800db70:	1136      	asrs	r6, r6, #4
 800db72:	2300      	movs	r3, #0
 800db74:	2502      	movs	r5, #2
 800db76:	2e00      	cmp	r6, #0
 800db78:	d17f      	bne.n	800dc7a <_dtoa_r+0x49a>
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1e1      	bne.n	800db42 <_dtoa_r+0x362>
 800db7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 8087 	beq.w	800dc94 <_dtoa_r+0x4b4>
 800db86:	e9dd 6700 	ldrd	r6, r7, [sp]
 800db8a:	2200      	movs	r2, #0
 800db8c:	4b93      	ldr	r3, [pc, #588]	; (800dddc <_dtoa_r+0x5fc>)
 800db8e:	4630      	mov	r0, r6
 800db90:	4639      	mov	r1, r7
 800db92:	f7f2 ffcb 	bl	8000b2c <__aeabi_dcmplt>
 800db96:	2800      	cmp	r0, #0
 800db98:	d07c      	beq.n	800dc94 <_dtoa_r+0x4b4>
 800db9a:	f1b9 0f00 	cmp.w	r9, #0
 800db9e:	d079      	beq.n	800dc94 <_dtoa_r+0x4b4>
 800dba0:	9b02      	ldr	r3, [sp, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	dd35      	ble.n	800dc12 <_dtoa_r+0x432>
 800dba6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800dbaa:	9308      	str	r3, [sp, #32]
 800dbac:	4639      	mov	r1, r7
 800dbae:	2200      	movs	r2, #0
 800dbb0:	4b8b      	ldr	r3, [pc, #556]	; (800dde0 <_dtoa_r+0x600>)
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f7f2 fd48 	bl	8000648 <__aeabi_dmul>
 800dbb8:	e9cd 0100 	strd	r0, r1, [sp]
 800dbbc:	9f02      	ldr	r7, [sp, #8]
 800dbbe:	3501      	adds	r5, #1
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f7f2 fcd7 	bl	8000574 <__aeabi_i2d>
 800dbc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbca:	f7f2 fd3d 	bl	8000648 <__aeabi_dmul>
 800dbce:	2200      	movs	r2, #0
 800dbd0:	4b84      	ldr	r3, [pc, #528]	; (800dde4 <_dtoa_r+0x604>)
 800dbd2:	f7f2 fb83 	bl	80002dc <__adddf3>
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dbdc:	2f00      	cmp	r7, #0
 800dbde:	d15d      	bne.n	800dc9c <_dtoa_r+0x4bc>
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4b81      	ldr	r3, [pc, #516]	; (800dde8 <_dtoa_r+0x608>)
 800dbe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbe8:	f7f2 fb76 	bl	80002d8 <__aeabi_dsub>
 800dbec:	462a      	mov	r2, r5
 800dbee:	4633      	mov	r3, r6
 800dbf0:	e9cd 0100 	strd	r0, r1, [sp]
 800dbf4:	f7f2 ffb8 	bl	8000b68 <__aeabi_dcmpgt>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f040 8288 	bne.w	800e10e <_dtoa_r+0x92e>
 800dbfe:	462a      	mov	r2, r5
 800dc00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dc04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc08:	f7f2 ff90 	bl	8000b2c <__aeabi_dcmplt>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	f040 827c 	bne.w	800e10a <_dtoa_r+0x92a>
 800dc12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dc16:	e9cd 2300 	strd	r2, r3, [sp]
 800dc1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f2c0 8150 	blt.w	800dec2 <_dtoa_r+0x6e2>
 800dc22:	f1ba 0f0e 	cmp.w	sl, #14
 800dc26:	f300 814c 	bgt.w	800dec2 <_dtoa_r+0x6e2>
 800dc2a:	4b6a      	ldr	r3, [pc, #424]	; (800ddd4 <_dtoa_r+0x5f4>)
 800dc2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc30:	ed93 7b00 	vldr	d7, [r3]
 800dc34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc3c:	f280 80d8 	bge.w	800ddf0 <_dtoa_r+0x610>
 800dc40:	f1b9 0f00 	cmp.w	r9, #0
 800dc44:	f300 80d4 	bgt.w	800ddf0 <_dtoa_r+0x610>
 800dc48:	f040 825e 	bne.w	800e108 <_dtoa_r+0x928>
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	4b66      	ldr	r3, [pc, #408]	; (800dde8 <_dtoa_r+0x608>)
 800dc50:	ec51 0b17 	vmov	r0, r1, d7
 800dc54:	f7f2 fcf8 	bl	8000648 <__aeabi_dmul>
 800dc58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc5c:	f7f2 ff7a 	bl	8000b54 <__aeabi_dcmpge>
 800dc60:	464f      	mov	r7, r9
 800dc62:	464e      	mov	r6, r9
 800dc64:	2800      	cmp	r0, #0
 800dc66:	f040 8234 	bne.w	800e0d2 <_dtoa_r+0x8f2>
 800dc6a:	2331      	movs	r3, #49	; 0x31
 800dc6c:	f10b 0501 	add.w	r5, fp, #1
 800dc70:	f88b 3000 	strb.w	r3, [fp]
 800dc74:	f10a 0a01 	add.w	sl, sl, #1
 800dc78:	e22f      	b.n	800e0da <_dtoa_r+0x8fa>
 800dc7a:	07f2      	lsls	r2, r6, #31
 800dc7c:	d505      	bpl.n	800dc8a <_dtoa_r+0x4aa>
 800dc7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc82:	f7f2 fce1 	bl	8000648 <__aeabi_dmul>
 800dc86:	3501      	adds	r5, #1
 800dc88:	2301      	movs	r3, #1
 800dc8a:	1076      	asrs	r6, r6, #1
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	e772      	b.n	800db76 <_dtoa_r+0x396>
 800dc90:	2502      	movs	r5, #2
 800dc92:	e774      	b.n	800db7e <_dtoa_r+0x39e>
 800dc94:	f8cd a020 	str.w	sl, [sp, #32]
 800dc98:	464f      	mov	r7, r9
 800dc9a:	e791      	b.n	800dbc0 <_dtoa_r+0x3e0>
 800dc9c:	4b4d      	ldr	r3, [pc, #308]	; (800ddd4 <_dtoa_r+0x5f4>)
 800dc9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dca2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800dca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d047      	beq.n	800dd3c <_dtoa_r+0x55c>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	494e      	ldr	r1, [pc, #312]	; (800ddec <_dtoa_r+0x60c>)
 800dcb4:	f7f2 fdf2 	bl	800089c <__aeabi_ddiv>
 800dcb8:	462a      	mov	r2, r5
 800dcba:	4633      	mov	r3, r6
 800dcbc:	f7f2 fb0c 	bl	80002d8 <__aeabi_dsub>
 800dcc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dcc4:	465d      	mov	r5, fp
 800dcc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcca:	f7f2 ff6d 	bl	8000ba8 <__aeabi_d2iz>
 800dcce:	4606      	mov	r6, r0
 800dcd0:	f7f2 fc50 	bl	8000574 <__aeabi_i2d>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcdc:	f7f2 fafc 	bl	80002d8 <__aeabi_dsub>
 800dce0:	3630      	adds	r6, #48	; 0x30
 800dce2:	f805 6b01 	strb.w	r6, [r5], #1
 800dce6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dcea:	e9cd 0100 	strd	r0, r1, [sp]
 800dcee:	f7f2 ff1d 	bl	8000b2c <__aeabi_dcmplt>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d163      	bne.n	800ddbe <_dtoa_r+0x5de>
 800dcf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	4937      	ldr	r1, [pc, #220]	; (800dddc <_dtoa_r+0x5fc>)
 800dcfe:	f7f2 faeb 	bl	80002d8 <__aeabi_dsub>
 800dd02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dd06:	f7f2 ff11 	bl	8000b2c <__aeabi_dcmplt>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f040 80b7 	bne.w	800de7e <_dtoa_r+0x69e>
 800dd10:	eba5 030b 	sub.w	r3, r5, fp
 800dd14:	429f      	cmp	r7, r3
 800dd16:	f77f af7c 	ble.w	800dc12 <_dtoa_r+0x432>
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	4b30      	ldr	r3, [pc, #192]	; (800dde0 <_dtoa_r+0x600>)
 800dd1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd22:	f7f2 fc91 	bl	8000648 <__aeabi_dmul>
 800dd26:	2200      	movs	r2, #0
 800dd28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dd2c:	4b2c      	ldr	r3, [pc, #176]	; (800dde0 <_dtoa_r+0x600>)
 800dd2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd32:	f7f2 fc89 	bl	8000648 <__aeabi_dmul>
 800dd36:	e9cd 0100 	strd	r0, r1, [sp]
 800dd3a:	e7c4      	b.n	800dcc6 <_dtoa_r+0x4e6>
 800dd3c:	462a      	mov	r2, r5
 800dd3e:	4633      	mov	r3, r6
 800dd40:	f7f2 fc82 	bl	8000648 <__aeabi_dmul>
 800dd44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dd48:	eb0b 0507 	add.w	r5, fp, r7
 800dd4c:	465e      	mov	r6, fp
 800dd4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd52:	f7f2 ff29 	bl	8000ba8 <__aeabi_d2iz>
 800dd56:	4607      	mov	r7, r0
 800dd58:	f7f2 fc0c 	bl	8000574 <__aeabi_i2d>
 800dd5c:	3730      	adds	r7, #48	; 0x30
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd66:	f7f2 fab7 	bl	80002d8 <__aeabi_dsub>
 800dd6a:	f806 7b01 	strb.w	r7, [r6], #1
 800dd6e:	42ae      	cmp	r6, r5
 800dd70:	e9cd 0100 	strd	r0, r1, [sp]
 800dd74:	f04f 0200 	mov.w	r2, #0
 800dd78:	d126      	bne.n	800ddc8 <_dtoa_r+0x5e8>
 800dd7a:	4b1c      	ldr	r3, [pc, #112]	; (800ddec <_dtoa_r+0x60c>)
 800dd7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd80:	f7f2 faac 	bl	80002dc <__adddf3>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd8c:	f7f2 feec 	bl	8000b68 <__aeabi_dcmpgt>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d174      	bne.n	800de7e <_dtoa_r+0x69e>
 800dd94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dd98:	2000      	movs	r0, #0
 800dd9a:	4914      	ldr	r1, [pc, #80]	; (800ddec <_dtoa_r+0x60c>)
 800dd9c:	f7f2 fa9c 	bl	80002d8 <__aeabi_dsub>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dda8:	f7f2 fec0 	bl	8000b2c <__aeabi_dcmplt>
 800ddac:	2800      	cmp	r0, #0
 800ddae:	f43f af30 	beq.w	800dc12 <_dtoa_r+0x432>
 800ddb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ddb6:	2b30      	cmp	r3, #48	; 0x30
 800ddb8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ddbc:	d002      	beq.n	800ddc4 <_dtoa_r+0x5e4>
 800ddbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ddc2:	e04a      	b.n	800de5a <_dtoa_r+0x67a>
 800ddc4:	4615      	mov	r5, r2
 800ddc6:	e7f4      	b.n	800ddb2 <_dtoa_r+0x5d2>
 800ddc8:	4b05      	ldr	r3, [pc, #20]	; (800dde0 <_dtoa_r+0x600>)
 800ddca:	f7f2 fc3d 	bl	8000648 <__aeabi_dmul>
 800ddce:	e9cd 0100 	strd	r0, r1, [sp]
 800ddd2:	e7bc      	b.n	800dd4e <_dtoa_r+0x56e>
 800ddd4:	080103e0 	.word	0x080103e0
 800ddd8:	080103b8 	.word	0x080103b8
 800dddc:	3ff00000 	.word	0x3ff00000
 800dde0:	40240000 	.word	0x40240000
 800dde4:	401c0000 	.word	0x401c0000
 800dde8:	40140000 	.word	0x40140000
 800ddec:	3fe00000 	.word	0x3fe00000
 800ddf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ddf4:	465d      	mov	r5, fp
 800ddf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	f7f2 fd4d 	bl	800089c <__aeabi_ddiv>
 800de02:	f7f2 fed1 	bl	8000ba8 <__aeabi_d2iz>
 800de06:	4680      	mov	r8, r0
 800de08:	f7f2 fbb4 	bl	8000574 <__aeabi_i2d>
 800de0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de10:	f7f2 fc1a 	bl	8000648 <__aeabi_dmul>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4630      	mov	r0, r6
 800de1a:	4639      	mov	r1, r7
 800de1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800de20:	f7f2 fa5a 	bl	80002d8 <__aeabi_dsub>
 800de24:	f805 6b01 	strb.w	r6, [r5], #1
 800de28:	eba5 060b 	sub.w	r6, r5, fp
 800de2c:	45b1      	cmp	r9, r6
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	d139      	bne.n	800dea8 <_dtoa_r+0x6c8>
 800de34:	f7f2 fa52 	bl	80002dc <__adddf3>
 800de38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de3c:	4606      	mov	r6, r0
 800de3e:	460f      	mov	r7, r1
 800de40:	f7f2 fe92 	bl	8000b68 <__aeabi_dcmpgt>
 800de44:	b9c8      	cbnz	r0, 800de7a <_dtoa_r+0x69a>
 800de46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de4a:	4630      	mov	r0, r6
 800de4c:	4639      	mov	r1, r7
 800de4e:	f7f2 fe63 	bl	8000b18 <__aeabi_dcmpeq>
 800de52:	b110      	cbz	r0, 800de5a <_dtoa_r+0x67a>
 800de54:	f018 0f01 	tst.w	r8, #1
 800de58:	d10f      	bne.n	800de7a <_dtoa_r+0x69a>
 800de5a:	9904      	ldr	r1, [sp, #16]
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 fcaa 	bl	800e7b6 <_Bfree>
 800de62:	2300      	movs	r3, #0
 800de64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de66:	702b      	strb	r3, [r5, #0]
 800de68:	f10a 0301 	add.w	r3, sl, #1
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de70:	2b00      	cmp	r3, #0
 800de72:	f000 8241 	beq.w	800e2f8 <_dtoa_r+0xb18>
 800de76:	601d      	str	r5, [r3, #0]
 800de78:	e23e      	b.n	800e2f8 <_dtoa_r+0xb18>
 800de7a:	f8cd a020 	str.w	sl, [sp, #32]
 800de7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de82:	2a39      	cmp	r2, #57	; 0x39
 800de84:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800de88:	d108      	bne.n	800de9c <_dtoa_r+0x6bc>
 800de8a:	459b      	cmp	fp, r3
 800de8c:	d10a      	bne.n	800dea4 <_dtoa_r+0x6c4>
 800de8e:	9b08      	ldr	r3, [sp, #32]
 800de90:	3301      	adds	r3, #1
 800de92:	9308      	str	r3, [sp, #32]
 800de94:	2330      	movs	r3, #48	; 0x30
 800de96:	f88b 3000 	strb.w	r3, [fp]
 800de9a:	465b      	mov	r3, fp
 800de9c:	781a      	ldrb	r2, [r3, #0]
 800de9e:	3201      	adds	r2, #1
 800dea0:	701a      	strb	r2, [r3, #0]
 800dea2:	e78c      	b.n	800ddbe <_dtoa_r+0x5de>
 800dea4:	461d      	mov	r5, r3
 800dea6:	e7ea      	b.n	800de7e <_dtoa_r+0x69e>
 800dea8:	2200      	movs	r2, #0
 800deaa:	4b9b      	ldr	r3, [pc, #620]	; (800e118 <_dtoa_r+0x938>)
 800deac:	f7f2 fbcc 	bl	8000648 <__aeabi_dmul>
 800deb0:	2200      	movs	r2, #0
 800deb2:	2300      	movs	r3, #0
 800deb4:	4606      	mov	r6, r0
 800deb6:	460f      	mov	r7, r1
 800deb8:	f7f2 fe2e 	bl	8000b18 <__aeabi_dcmpeq>
 800debc:	2800      	cmp	r0, #0
 800debe:	d09a      	beq.n	800ddf6 <_dtoa_r+0x616>
 800dec0:	e7cb      	b.n	800de5a <_dtoa_r+0x67a>
 800dec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dec4:	2a00      	cmp	r2, #0
 800dec6:	f000 808b 	beq.w	800dfe0 <_dtoa_r+0x800>
 800deca:	9a06      	ldr	r2, [sp, #24]
 800decc:	2a01      	cmp	r2, #1
 800dece:	dc6e      	bgt.n	800dfae <_dtoa_r+0x7ce>
 800ded0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ded2:	2a00      	cmp	r2, #0
 800ded4:	d067      	beq.n	800dfa6 <_dtoa_r+0x7c6>
 800ded6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800deda:	9f07      	ldr	r7, [sp, #28]
 800dedc:	9d05      	ldr	r5, [sp, #20]
 800dede:	9a05      	ldr	r2, [sp, #20]
 800dee0:	2101      	movs	r1, #1
 800dee2:	441a      	add	r2, r3
 800dee4:	4620      	mov	r0, r4
 800dee6:	9205      	str	r2, [sp, #20]
 800dee8:	4498      	add	r8, r3
 800deea:	f000 fd04 	bl	800e8f6 <__i2b>
 800deee:	4606      	mov	r6, r0
 800def0:	2d00      	cmp	r5, #0
 800def2:	dd0c      	ble.n	800df0e <_dtoa_r+0x72e>
 800def4:	f1b8 0f00 	cmp.w	r8, #0
 800def8:	dd09      	ble.n	800df0e <_dtoa_r+0x72e>
 800defa:	4545      	cmp	r5, r8
 800defc:	9a05      	ldr	r2, [sp, #20]
 800defe:	462b      	mov	r3, r5
 800df00:	bfa8      	it	ge
 800df02:	4643      	movge	r3, r8
 800df04:	1ad2      	subs	r2, r2, r3
 800df06:	9205      	str	r2, [sp, #20]
 800df08:	1aed      	subs	r5, r5, r3
 800df0a:	eba8 0803 	sub.w	r8, r8, r3
 800df0e:	9b07      	ldr	r3, [sp, #28]
 800df10:	b1eb      	cbz	r3, 800df4e <_dtoa_r+0x76e>
 800df12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df14:	2b00      	cmp	r3, #0
 800df16:	d067      	beq.n	800dfe8 <_dtoa_r+0x808>
 800df18:	b18f      	cbz	r7, 800df3e <_dtoa_r+0x75e>
 800df1a:	4631      	mov	r1, r6
 800df1c:	463a      	mov	r2, r7
 800df1e:	4620      	mov	r0, r4
 800df20:	f000 fd88 	bl	800ea34 <__pow5mult>
 800df24:	9a04      	ldr	r2, [sp, #16]
 800df26:	4601      	mov	r1, r0
 800df28:	4606      	mov	r6, r0
 800df2a:	4620      	mov	r0, r4
 800df2c:	f000 fcec 	bl	800e908 <__multiply>
 800df30:	9904      	ldr	r1, [sp, #16]
 800df32:	9008      	str	r0, [sp, #32]
 800df34:	4620      	mov	r0, r4
 800df36:	f000 fc3e 	bl	800e7b6 <_Bfree>
 800df3a:	9b08      	ldr	r3, [sp, #32]
 800df3c:	9304      	str	r3, [sp, #16]
 800df3e:	9b07      	ldr	r3, [sp, #28]
 800df40:	1bda      	subs	r2, r3, r7
 800df42:	d004      	beq.n	800df4e <_dtoa_r+0x76e>
 800df44:	9904      	ldr	r1, [sp, #16]
 800df46:	4620      	mov	r0, r4
 800df48:	f000 fd74 	bl	800ea34 <__pow5mult>
 800df4c:	9004      	str	r0, [sp, #16]
 800df4e:	2101      	movs	r1, #1
 800df50:	4620      	mov	r0, r4
 800df52:	f000 fcd0 	bl	800e8f6 <__i2b>
 800df56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df58:	4607      	mov	r7, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 81d0 	beq.w	800e300 <_dtoa_r+0xb20>
 800df60:	461a      	mov	r2, r3
 800df62:	4601      	mov	r1, r0
 800df64:	4620      	mov	r0, r4
 800df66:	f000 fd65 	bl	800ea34 <__pow5mult>
 800df6a:	9b06      	ldr	r3, [sp, #24]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	4607      	mov	r7, r0
 800df70:	dc40      	bgt.n	800dff4 <_dtoa_r+0x814>
 800df72:	9b00      	ldr	r3, [sp, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d139      	bne.n	800dfec <_dtoa_r+0x80c>
 800df78:	9b01      	ldr	r3, [sp, #4]
 800df7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d136      	bne.n	800dff0 <_dtoa_r+0x810>
 800df82:	9b01      	ldr	r3, [sp, #4]
 800df84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df88:	0d1b      	lsrs	r3, r3, #20
 800df8a:	051b      	lsls	r3, r3, #20
 800df8c:	b12b      	cbz	r3, 800df9a <_dtoa_r+0x7ba>
 800df8e:	9b05      	ldr	r3, [sp, #20]
 800df90:	3301      	adds	r3, #1
 800df92:	9305      	str	r3, [sp, #20]
 800df94:	f108 0801 	add.w	r8, r8, #1
 800df98:	2301      	movs	r3, #1
 800df9a:	9307      	str	r3, [sp, #28]
 800df9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d12a      	bne.n	800dff8 <_dtoa_r+0x818>
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	e030      	b.n	800e008 <_dtoa_r+0x828>
 800dfa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfa8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dfac:	e795      	b.n	800deda <_dtoa_r+0x6fa>
 800dfae:	9b07      	ldr	r3, [sp, #28]
 800dfb0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800dfb4:	42bb      	cmp	r3, r7
 800dfb6:	bfbf      	itttt	lt
 800dfb8:	9b07      	ldrlt	r3, [sp, #28]
 800dfba:	9707      	strlt	r7, [sp, #28]
 800dfbc:	1afa      	sublt	r2, r7, r3
 800dfbe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dfc0:	bfbb      	ittet	lt
 800dfc2:	189b      	addlt	r3, r3, r2
 800dfc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dfc6:	1bdf      	subge	r7, r3, r7
 800dfc8:	2700      	movlt	r7, #0
 800dfca:	f1b9 0f00 	cmp.w	r9, #0
 800dfce:	bfb5      	itete	lt
 800dfd0:	9b05      	ldrlt	r3, [sp, #20]
 800dfd2:	9d05      	ldrge	r5, [sp, #20]
 800dfd4:	eba3 0509 	sublt.w	r5, r3, r9
 800dfd8:	464b      	movge	r3, r9
 800dfda:	bfb8      	it	lt
 800dfdc:	2300      	movlt	r3, #0
 800dfde:	e77e      	b.n	800dede <_dtoa_r+0x6fe>
 800dfe0:	9f07      	ldr	r7, [sp, #28]
 800dfe2:	9d05      	ldr	r5, [sp, #20]
 800dfe4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dfe6:	e783      	b.n	800def0 <_dtoa_r+0x710>
 800dfe8:	9a07      	ldr	r2, [sp, #28]
 800dfea:	e7ab      	b.n	800df44 <_dtoa_r+0x764>
 800dfec:	2300      	movs	r3, #0
 800dfee:	e7d4      	b.n	800df9a <_dtoa_r+0x7ba>
 800dff0:	9b00      	ldr	r3, [sp, #0]
 800dff2:	e7d2      	b.n	800df9a <_dtoa_r+0x7ba>
 800dff4:	2300      	movs	r3, #0
 800dff6:	9307      	str	r3, [sp, #28]
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800dffe:	6918      	ldr	r0, [r3, #16]
 800e000:	f000 fc2b 	bl	800e85a <__hi0bits>
 800e004:	f1c0 0020 	rsb	r0, r0, #32
 800e008:	4440      	add	r0, r8
 800e00a:	f010 001f 	ands.w	r0, r0, #31
 800e00e:	d047      	beq.n	800e0a0 <_dtoa_r+0x8c0>
 800e010:	f1c0 0320 	rsb	r3, r0, #32
 800e014:	2b04      	cmp	r3, #4
 800e016:	dd3b      	ble.n	800e090 <_dtoa_r+0x8b0>
 800e018:	9b05      	ldr	r3, [sp, #20]
 800e01a:	f1c0 001c 	rsb	r0, r0, #28
 800e01e:	4403      	add	r3, r0
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	4405      	add	r5, r0
 800e024:	4480      	add	r8, r0
 800e026:	9b05      	ldr	r3, [sp, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	dd05      	ble.n	800e038 <_dtoa_r+0x858>
 800e02c:	461a      	mov	r2, r3
 800e02e:	9904      	ldr	r1, [sp, #16]
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fd4d 	bl	800ead0 <__lshift>
 800e036:	9004      	str	r0, [sp, #16]
 800e038:	f1b8 0f00 	cmp.w	r8, #0
 800e03c:	dd05      	ble.n	800e04a <_dtoa_r+0x86a>
 800e03e:	4639      	mov	r1, r7
 800e040:	4642      	mov	r2, r8
 800e042:	4620      	mov	r0, r4
 800e044:	f000 fd44 	bl	800ead0 <__lshift>
 800e048:	4607      	mov	r7, r0
 800e04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e04c:	b353      	cbz	r3, 800e0a4 <_dtoa_r+0x8c4>
 800e04e:	4639      	mov	r1, r7
 800e050:	9804      	ldr	r0, [sp, #16]
 800e052:	f000 fd91 	bl	800eb78 <__mcmp>
 800e056:	2800      	cmp	r0, #0
 800e058:	da24      	bge.n	800e0a4 <_dtoa_r+0x8c4>
 800e05a:	2300      	movs	r3, #0
 800e05c:	220a      	movs	r2, #10
 800e05e:	9904      	ldr	r1, [sp, #16]
 800e060:	4620      	mov	r0, r4
 800e062:	f000 fbbf 	bl	800e7e4 <__multadd>
 800e066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e068:	9004      	str	r0, [sp, #16]
 800e06a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f000 814d 	beq.w	800e30e <_dtoa_r+0xb2e>
 800e074:	2300      	movs	r3, #0
 800e076:	4631      	mov	r1, r6
 800e078:	220a      	movs	r2, #10
 800e07a:	4620      	mov	r0, r4
 800e07c:	f000 fbb2 	bl	800e7e4 <__multadd>
 800e080:	9b02      	ldr	r3, [sp, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	4606      	mov	r6, r0
 800e086:	dc4f      	bgt.n	800e128 <_dtoa_r+0x948>
 800e088:	9b06      	ldr	r3, [sp, #24]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	dd4c      	ble.n	800e128 <_dtoa_r+0x948>
 800e08e:	e011      	b.n	800e0b4 <_dtoa_r+0x8d4>
 800e090:	d0c9      	beq.n	800e026 <_dtoa_r+0x846>
 800e092:	9a05      	ldr	r2, [sp, #20]
 800e094:	331c      	adds	r3, #28
 800e096:	441a      	add	r2, r3
 800e098:	9205      	str	r2, [sp, #20]
 800e09a:	441d      	add	r5, r3
 800e09c:	4498      	add	r8, r3
 800e09e:	e7c2      	b.n	800e026 <_dtoa_r+0x846>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	e7f6      	b.n	800e092 <_dtoa_r+0x8b2>
 800e0a4:	f1b9 0f00 	cmp.w	r9, #0
 800e0a8:	dc38      	bgt.n	800e11c <_dtoa_r+0x93c>
 800e0aa:	9b06      	ldr	r3, [sp, #24]
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	dd35      	ble.n	800e11c <_dtoa_r+0x93c>
 800e0b0:	f8cd 9008 	str.w	r9, [sp, #8]
 800e0b4:	9b02      	ldr	r3, [sp, #8]
 800e0b6:	b963      	cbnz	r3, 800e0d2 <_dtoa_r+0x8f2>
 800e0b8:	4639      	mov	r1, r7
 800e0ba:	2205      	movs	r2, #5
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f000 fb91 	bl	800e7e4 <__multadd>
 800e0c2:	4601      	mov	r1, r0
 800e0c4:	4607      	mov	r7, r0
 800e0c6:	9804      	ldr	r0, [sp, #16]
 800e0c8:	f000 fd56 	bl	800eb78 <__mcmp>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	f73f adcc 	bgt.w	800dc6a <_dtoa_r+0x48a>
 800e0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0d4:	465d      	mov	r5, fp
 800e0d6:	ea6f 0a03 	mvn.w	sl, r3
 800e0da:	f04f 0900 	mov.w	r9, #0
 800e0de:	4639      	mov	r1, r7
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 fb68 	bl	800e7b6 <_Bfree>
 800e0e6:	2e00      	cmp	r6, #0
 800e0e8:	f43f aeb7 	beq.w	800de5a <_dtoa_r+0x67a>
 800e0ec:	f1b9 0f00 	cmp.w	r9, #0
 800e0f0:	d005      	beq.n	800e0fe <_dtoa_r+0x91e>
 800e0f2:	45b1      	cmp	r9, r6
 800e0f4:	d003      	beq.n	800e0fe <_dtoa_r+0x91e>
 800e0f6:	4649      	mov	r1, r9
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f000 fb5c 	bl	800e7b6 <_Bfree>
 800e0fe:	4631      	mov	r1, r6
 800e100:	4620      	mov	r0, r4
 800e102:	f000 fb58 	bl	800e7b6 <_Bfree>
 800e106:	e6a8      	b.n	800de5a <_dtoa_r+0x67a>
 800e108:	2700      	movs	r7, #0
 800e10a:	463e      	mov	r6, r7
 800e10c:	e7e1      	b.n	800e0d2 <_dtoa_r+0x8f2>
 800e10e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e112:	463e      	mov	r6, r7
 800e114:	e5a9      	b.n	800dc6a <_dtoa_r+0x48a>
 800e116:	bf00      	nop
 800e118:	40240000 	.word	0x40240000
 800e11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e11e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 80fa 	beq.w	800e31c <_dtoa_r+0xb3c>
 800e128:	2d00      	cmp	r5, #0
 800e12a:	dd05      	ble.n	800e138 <_dtoa_r+0x958>
 800e12c:	4631      	mov	r1, r6
 800e12e:	462a      	mov	r2, r5
 800e130:	4620      	mov	r0, r4
 800e132:	f000 fccd 	bl	800ead0 <__lshift>
 800e136:	4606      	mov	r6, r0
 800e138:	9b07      	ldr	r3, [sp, #28]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d04c      	beq.n	800e1d8 <_dtoa_r+0x9f8>
 800e13e:	6871      	ldr	r1, [r6, #4]
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fb04 	bl	800e74e <_Balloc>
 800e146:	6932      	ldr	r2, [r6, #16]
 800e148:	3202      	adds	r2, #2
 800e14a:	4605      	mov	r5, r0
 800e14c:	0092      	lsls	r2, r2, #2
 800e14e:	f106 010c 	add.w	r1, r6, #12
 800e152:	300c      	adds	r0, #12
 800e154:	f000 faf0 	bl	800e738 <memcpy>
 800e158:	2201      	movs	r2, #1
 800e15a:	4629      	mov	r1, r5
 800e15c:	4620      	mov	r0, r4
 800e15e:	f000 fcb7 	bl	800ead0 <__lshift>
 800e162:	9b00      	ldr	r3, [sp, #0]
 800e164:	f8cd b014 	str.w	fp, [sp, #20]
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	46b1      	mov	r9, r6
 800e16e:	9307      	str	r3, [sp, #28]
 800e170:	4606      	mov	r6, r0
 800e172:	4639      	mov	r1, r7
 800e174:	9804      	ldr	r0, [sp, #16]
 800e176:	f7ff faa5 	bl	800d6c4 <quorem>
 800e17a:	4649      	mov	r1, r9
 800e17c:	4605      	mov	r5, r0
 800e17e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e182:	9804      	ldr	r0, [sp, #16]
 800e184:	f000 fcf8 	bl	800eb78 <__mcmp>
 800e188:	4632      	mov	r2, r6
 800e18a:	9000      	str	r0, [sp, #0]
 800e18c:	4639      	mov	r1, r7
 800e18e:	4620      	mov	r0, r4
 800e190:	f000 fd0c 	bl	800ebac <__mdiff>
 800e194:	68c3      	ldr	r3, [r0, #12]
 800e196:	4602      	mov	r2, r0
 800e198:	bb03      	cbnz	r3, 800e1dc <_dtoa_r+0x9fc>
 800e19a:	4601      	mov	r1, r0
 800e19c:	9008      	str	r0, [sp, #32]
 800e19e:	9804      	ldr	r0, [sp, #16]
 800e1a0:	f000 fcea 	bl	800eb78 <__mcmp>
 800e1a4:	9a08      	ldr	r2, [sp, #32]
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	9308      	str	r3, [sp, #32]
 800e1ae:	f000 fb02 	bl	800e7b6 <_Bfree>
 800e1b2:	9b08      	ldr	r3, [sp, #32]
 800e1b4:	b9a3      	cbnz	r3, 800e1e0 <_dtoa_r+0xa00>
 800e1b6:	9a06      	ldr	r2, [sp, #24]
 800e1b8:	b992      	cbnz	r2, 800e1e0 <_dtoa_r+0xa00>
 800e1ba:	9a07      	ldr	r2, [sp, #28]
 800e1bc:	b982      	cbnz	r2, 800e1e0 <_dtoa_r+0xa00>
 800e1be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e1c2:	d029      	beq.n	800e218 <_dtoa_r+0xa38>
 800e1c4:	9b00      	ldr	r3, [sp, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	dd01      	ble.n	800e1ce <_dtoa_r+0x9ee>
 800e1ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e1ce:	9b05      	ldr	r3, [sp, #20]
 800e1d0:	1c5d      	adds	r5, r3, #1
 800e1d2:	f883 8000 	strb.w	r8, [r3]
 800e1d6:	e782      	b.n	800e0de <_dtoa_r+0x8fe>
 800e1d8:	4630      	mov	r0, r6
 800e1da:	e7c2      	b.n	800e162 <_dtoa_r+0x982>
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e7e3      	b.n	800e1a8 <_dtoa_r+0x9c8>
 800e1e0:	9a00      	ldr	r2, [sp, #0]
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	db04      	blt.n	800e1f0 <_dtoa_r+0xa10>
 800e1e6:	d125      	bne.n	800e234 <_dtoa_r+0xa54>
 800e1e8:	9a06      	ldr	r2, [sp, #24]
 800e1ea:	bb1a      	cbnz	r2, 800e234 <_dtoa_r+0xa54>
 800e1ec:	9a07      	ldr	r2, [sp, #28]
 800e1ee:	bb0a      	cbnz	r2, 800e234 <_dtoa_r+0xa54>
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	ddec      	ble.n	800e1ce <_dtoa_r+0x9ee>
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	9904      	ldr	r1, [sp, #16]
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f000 fc69 	bl	800ead0 <__lshift>
 800e1fe:	4639      	mov	r1, r7
 800e200:	9004      	str	r0, [sp, #16]
 800e202:	f000 fcb9 	bl	800eb78 <__mcmp>
 800e206:	2800      	cmp	r0, #0
 800e208:	dc03      	bgt.n	800e212 <_dtoa_r+0xa32>
 800e20a:	d1e0      	bne.n	800e1ce <_dtoa_r+0x9ee>
 800e20c:	f018 0f01 	tst.w	r8, #1
 800e210:	d0dd      	beq.n	800e1ce <_dtoa_r+0x9ee>
 800e212:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e216:	d1d8      	bne.n	800e1ca <_dtoa_r+0x9ea>
 800e218:	9b05      	ldr	r3, [sp, #20]
 800e21a:	9a05      	ldr	r2, [sp, #20]
 800e21c:	1c5d      	adds	r5, r3, #1
 800e21e:	2339      	movs	r3, #57	; 0x39
 800e220:	7013      	strb	r3, [r2, #0]
 800e222:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e226:	2b39      	cmp	r3, #57	; 0x39
 800e228:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e22c:	d04f      	beq.n	800e2ce <_dtoa_r+0xaee>
 800e22e:	3301      	adds	r3, #1
 800e230:	7013      	strb	r3, [r2, #0]
 800e232:	e754      	b.n	800e0de <_dtoa_r+0x8fe>
 800e234:	9a05      	ldr	r2, [sp, #20]
 800e236:	2b00      	cmp	r3, #0
 800e238:	f102 0501 	add.w	r5, r2, #1
 800e23c:	dd06      	ble.n	800e24c <_dtoa_r+0xa6c>
 800e23e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e242:	d0e9      	beq.n	800e218 <_dtoa_r+0xa38>
 800e244:	f108 0801 	add.w	r8, r8, #1
 800e248:	9b05      	ldr	r3, [sp, #20]
 800e24a:	e7c2      	b.n	800e1d2 <_dtoa_r+0x9f2>
 800e24c:	9a02      	ldr	r2, [sp, #8]
 800e24e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e252:	eba5 030b 	sub.w	r3, r5, fp
 800e256:	4293      	cmp	r3, r2
 800e258:	d021      	beq.n	800e29e <_dtoa_r+0xabe>
 800e25a:	2300      	movs	r3, #0
 800e25c:	220a      	movs	r2, #10
 800e25e:	9904      	ldr	r1, [sp, #16]
 800e260:	4620      	mov	r0, r4
 800e262:	f000 fabf 	bl	800e7e4 <__multadd>
 800e266:	45b1      	cmp	r9, r6
 800e268:	9004      	str	r0, [sp, #16]
 800e26a:	f04f 0300 	mov.w	r3, #0
 800e26e:	f04f 020a 	mov.w	r2, #10
 800e272:	4649      	mov	r1, r9
 800e274:	4620      	mov	r0, r4
 800e276:	d105      	bne.n	800e284 <_dtoa_r+0xaa4>
 800e278:	f000 fab4 	bl	800e7e4 <__multadd>
 800e27c:	4681      	mov	r9, r0
 800e27e:	4606      	mov	r6, r0
 800e280:	9505      	str	r5, [sp, #20]
 800e282:	e776      	b.n	800e172 <_dtoa_r+0x992>
 800e284:	f000 faae 	bl	800e7e4 <__multadd>
 800e288:	4631      	mov	r1, r6
 800e28a:	4681      	mov	r9, r0
 800e28c:	2300      	movs	r3, #0
 800e28e:	220a      	movs	r2, #10
 800e290:	4620      	mov	r0, r4
 800e292:	f000 faa7 	bl	800e7e4 <__multadd>
 800e296:	4606      	mov	r6, r0
 800e298:	e7f2      	b.n	800e280 <_dtoa_r+0xaa0>
 800e29a:	f04f 0900 	mov.w	r9, #0
 800e29e:	2201      	movs	r2, #1
 800e2a0:	9904      	ldr	r1, [sp, #16]
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 fc14 	bl	800ead0 <__lshift>
 800e2a8:	4639      	mov	r1, r7
 800e2aa:	9004      	str	r0, [sp, #16]
 800e2ac:	f000 fc64 	bl	800eb78 <__mcmp>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	dcb6      	bgt.n	800e222 <_dtoa_r+0xa42>
 800e2b4:	d102      	bne.n	800e2bc <_dtoa_r+0xadc>
 800e2b6:	f018 0f01 	tst.w	r8, #1
 800e2ba:	d1b2      	bne.n	800e222 <_dtoa_r+0xa42>
 800e2bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e2c0:	2b30      	cmp	r3, #48	; 0x30
 800e2c2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e2c6:	f47f af0a 	bne.w	800e0de <_dtoa_r+0x8fe>
 800e2ca:	4615      	mov	r5, r2
 800e2cc:	e7f6      	b.n	800e2bc <_dtoa_r+0xadc>
 800e2ce:	4593      	cmp	fp, r2
 800e2d0:	d105      	bne.n	800e2de <_dtoa_r+0xafe>
 800e2d2:	2331      	movs	r3, #49	; 0x31
 800e2d4:	f10a 0a01 	add.w	sl, sl, #1
 800e2d8:	f88b 3000 	strb.w	r3, [fp]
 800e2dc:	e6ff      	b.n	800e0de <_dtoa_r+0x8fe>
 800e2de:	4615      	mov	r5, r2
 800e2e0:	e79f      	b.n	800e222 <_dtoa_r+0xa42>
 800e2e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e348 <_dtoa_r+0xb68>
 800e2e6:	e007      	b.n	800e2f8 <_dtoa_r+0xb18>
 800e2e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e34c <_dtoa_r+0xb6c>
 800e2ee:	b11b      	cbz	r3, 800e2f8 <_dtoa_r+0xb18>
 800e2f0:	f10b 0308 	add.w	r3, fp, #8
 800e2f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2f6:	6013      	str	r3, [r2, #0]
 800e2f8:	4658      	mov	r0, fp
 800e2fa:	b017      	add	sp, #92	; 0x5c
 800e2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e300:	9b06      	ldr	r3, [sp, #24]
 800e302:	2b01      	cmp	r3, #1
 800e304:	f77f ae35 	ble.w	800df72 <_dtoa_r+0x792>
 800e308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e30a:	9307      	str	r3, [sp, #28]
 800e30c:	e649      	b.n	800dfa2 <_dtoa_r+0x7c2>
 800e30e:	9b02      	ldr	r3, [sp, #8]
 800e310:	2b00      	cmp	r3, #0
 800e312:	dc03      	bgt.n	800e31c <_dtoa_r+0xb3c>
 800e314:	9b06      	ldr	r3, [sp, #24]
 800e316:	2b02      	cmp	r3, #2
 800e318:	f73f aecc 	bgt.w	800e0b4 <_dtoa_r+0x8d4>
 800e31c:	465d      	mov	r5, fp
 800e31e:	4639      	mov	r1, r7
 800e320:	9804      	ldr	r0, [sp, #16]
 800e322:	f7ff f9cf 	bl	800d6c4 <quorem>
 800e326:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e32a:	f805 8b01 	strb.w	r8, [r5], #1
 800e32e:	9a02      	ldr	r2, [sp, #8]
 800e330:	eba5 030b 	sub.w	r3, r5, fp
 800e334:	429a      	cmp	r2, r3
 800e336:	ddb0      	ble.n	800e29a <_dtoa_r+0xaba>
 800e338:	2300      	movs	r3, #0
 800e33a:	220a      	movs	r2, #10
 800e33c:	9904      	ldr	r1, [sp, #16]
 800e33e:	4620      	mov	r0, r4
 800e340:	f000 fa50 	bl	800e7e4 <__multadd>
 800e344:	9004      	str	r0, [sp, #16]
 800e346:	e7ea      	b.n	800e31e <_dtoa_r+0xb3e>
 800e348:	08010324 	.word	0x08010324
 800e34c:	08010348 	.word	0x08010348

0800e350 <__sflush_r>:
 800e350:	898a      	ldrh	r2, [r1, #12]
 800e352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e356:	4605      	mov	r5, r0
 800e358:	0710      	lsls	r0, r2, #28
 800e35a:	460c      	mov	r4, r1
 800e35c:	d458      	bmi.n	800e410 <__sflush_r+0xc0>
 800e35e:	684b      	ldr	r3, [r1, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	dc05      	bgt.n	800e370 <__sflush_r+0x20>
 800e364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e366:	2b00      	cmp	r3, #0
 800e368:	dc02      	bgt.n	800e370 <__sflush_r+0x20>
 800e36a:	2000      	movs	r0, #0
 800e36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e372:	2e00      	cmp	r6, #0
 800e374:	d0f9      	beq.n	800e36a <__sflush_r+0x1a>
 800e376:	2300      	movs	r3, #0
 800e378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e37c:	682f      	ldr	r7, [r5, #0]
 800e37e:	6a21      	ldr	r1, [r4, #32]
 800e380:	602b      	str	r3, [r5, #0]
 800e382:	d032      	beq.n	800e3ea <__sflush_r+0x9a>
 800e384:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	075a      	lsls	r2, r3, #29
 800e38a:	d505      	bpl.n	800e398 <__sflush_r+0x48>
 800e38c:	6863      	ldr	r3, [r4, #4]
 800e38e:	1ac0      	subs	r0, r0, r3
 800e390:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e392:	b10b      	cbz	r3, 800e398 <__sflush_r+0x48>
 800e394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e396:	1ac0      	subs	r0, r0, r3
 800e398:	2300      	movs	r3, #0
 800e39a:	4602      	mov	r2, r0
 800e39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e39e:	6a21      	ldr	r1, [r4, #32]
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	47b0      	blx	r6
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	89a3      	ldrh	r3, [r4, #12]
 800e3a8:	d106      	bne.n	800e3b8 <__sflush_r+0x68>
 800e3aa:	6829      	ldr	r1, [r5, #0]
 800e3ac:	291d      	cmp	r1, #29
 800e3ae:	d848      	bhi.n	800e442 <__sflush_r+0xf2>
 800e3b0:	4a29      	ldr	r2, [pc, #164]	; (800e458 <__sflush_r+0x108>)
 800e3b2:	40ca      	lsrs	r2, r1
 800e3b4:	07d6      	lsls	r6, r2, #31
 800e3b6:	d544      	bpl.n	800e442 <__sflush_r+0xf2>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	6062      	str	r2, [r4, #4]
 800e3bc:	04d9      	lsls	r1, r3, #19
 800e3be:	6922      	ldr	r2, [r4, #16]
 800e3c0:	6022      	str	r2, [r4, #0]
 800e3c2:	d504      	bpl.n	800e3ce <__sflush_r+0x7e>
 800e3c4:	1c42      	adds	r2, r0, #1
 800e3c6:	d101      	bne.n	800e3cc <__sflush_r+0x7c>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	b903      	cbnz	r3, 800e3ce <__sflush_r+0x7e>
 800e3cc:	6560      	str	r0, [r4, #84]	; 0x54
 800e3ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3d0:	602f      	str	r7, [r5, #0]
 800e3d2:	2900      	cmp	r1, #0
 800e3d4:	d0c9      	beq.n	800e36a <__sflush_r+0x1a>
 800e3d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3da:	4299      	cmp	r1, r3
 800e3dc:	d002      	beq.n	800e3e4 <__sflush_r+0x94>
 800e3de:	4628      	mov	r0, r5
 800e3e0:	f000 fc9e 	bl	800ed20 <_free_r>
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	6360      	str	r0, [r4, #52]	; 0x34
 800e3e8:	e7c0      	b.n	800e36c <__sflush_r+0x1c>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	47b0      	blx	r6
 800e3f0:	1c41      	adds	r1, r0, #1
 800e3f2:	d1c8      	bne.n	800e386 <__sflush_r+0x36>
 800e3f4:	682b      	ldr	r3, [r5, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d0c5      	beq.n	800e386 <__sflush_r+0x36>
 800e3fa:	2b1d      	cmp	r3, #29
 800e3fc:	d001      	beq.n	800e402 <__sflush_r+0xb2>
 800e3fe:	2b16      	cmp	r3, #22
 800e400:	d101      	bne.n	800e406 <__sflush_r+0xb6>
 800e402:	602f      	str	r7, [r5, #0]
 800e404:	e7b1      	b.n	800e36a <__sflush_r+0x1a>
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	e7ad      	b.n	800e36c <__sflush_r+0x1c>
 800e410:	690f      	ldr	r7, [r1, #16]
 800e412:	2f00      	cmp	r7, #0
 800e414:	d0a9      	beq.n	800e36a <__sflush_r+0x1a>
 800e416:	0793      	lsls	r3, r2, #30
 800e418:	680e      	ldr	r6, [r1, #0]
 800e41a:	bf08      	it	eq
 800e41c:	694b      	ldreq	r3, [r1, #20]
 800e41e:	600f      	str	r7, [r1, #0]
 800e420:	bf18      	it	ne
 800e422:	2300      	movne	r3, #0
 800e424:	eba6 0807 	sub.w	r8, r6, r7
 800e428:	608b      	str	r3, [r1, #8]
 800e42a:	f1b8 0f00 	cmp.w	r8, #0
 800e42e:	dd9c      	ble.n	800e36a <__sflush_r+0x1a>
 800e430:	4643      	mov	r3, r8
 800e432:	463a      	mov	r2, r7
 800e434:	6a21      	ldr	r1, [r4, #32]
 800e436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e438:	4628      	mov	r0, r5
 800e43a:	47b0      	blx	r6
 800e43c:	2800      	cmp	r0, #0
 800e43e:	dc06      	bgt.n	800e44e <__sflush_r+0xfe>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e446:	81a3      	strh	r3, [r4, #12]
 800e448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e44c:	e78e      	b.n	800e36c <__sflush_r+0x1c>
 800e44e:	4407      	add	r7, r0
 800e450:	eba8 0800 	sub.w	r8, r8, r0
 800e454:	e7e9      	b.n	800e42a <__sflush_r+0xda>
 800e456:	bf00      	nop
 800e458:	20400001 	.word	0x20400001

0800e45c <_fflush_r>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	690b      	ldr	r3, [r1, #16]
 800e460:	4605      	mov	r5, r0
 800e462:	460c      	mov	r4, r1
 800e464:	b1db      	cbz	r3, 800e49e <_fflush_r+0x42>
 800e466:	b118      	cbz	r0, 800e470 <_fflush_r+0x14>
 800e468:	6983      	ldr	r3, [r0, #24]
 800e46a:	b90b      	cbnz	r3, 800e470 <_fflush_r+0x14>
 800e46c:	f000 f860 	bl	800e530 <__sinit>
 800e470:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <_fflush_r+0x48>)
 800e472:	429c      	cmp	r4, r3
 800e474:	d109      	bne.n	800e48a <_fflush_r+0x2e>
 800e476:	686c      	ldr	r4, [r5, #4]
 800e478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47c:	b17b      	cbz	r3, 800e49e <_fflush_r+0x42>
 800e47e:	4621      	mov	r1, r4
 800e480:	4628      	mov	r0, r5
 800e482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e486:	f7ff bf63 	b.w	800e350 <__sflush_r>
 800e48a:	4b07      	ldr	r3, [pc, #28]	; (800e4a8 <_fflush_r+0x4c>)
 800e48c:	429c      	cmp	r4, r3
 800e48e:	d101      	bne.n	800e494 <_fflush_r+0x38>
 800e490:	68ac      	ldr	r4, [r5, #8]
 800e492:	e7f1      	b.n	800e478 <_fflush_r+0x1c>
 800e494:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <_fflush_r+0x50>)
 800e496:	429c      	cmp	r4, r3
 800e498:	bf08      	it	eq
 800e49a:	68ec      	ldreq	r4, [r5, #12]
 800e49c:	e7ec      	b.n	800e478 <_fflush_r+0x1c>
 800e49e:	2000      	movs	r0, #0
 800e4a0:	bd38      	pop	{r3, r4, r5, pc}
 800e4a2:	bf00      	nop
 800e4a4:	08010378 	.word	0x08010378
 800e4a8:	08010398 	.word	0x08010398
 800e4ac:	08010358 	.word	0x08010358

0800e4b0 <std>:
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	b510      	push	{r4, lr}
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4ba:	6083      	str	r3, [r0, #8]
 800e4bc:	8181      	strh	r1, [r0, #12]
 800e4be:	6643      	str	r3, [r0, #100]	; 0x64
 800e4c0:	81c2      	strh	r2, [r0, #14]
 800e4c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4c6:	6183      	str	r3, [r0, #24]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	2208      	movs	r2, #8
 800e4cc:	305c      	adds	r0, #92	; 0x5c
 800e4ce:	f7fe fb2d 	bl	800cb2c <memset>
 800e4d2:	4b05      	ldr	r3, [pc, #20]	; (800e4e8 <std+0x38>)
 800e4d4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4d6:	4b05      	ldr	r3, [pc, #20]	; (800e4ec <std+0x3c>)
 800e4d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4da:	4b05      	ldr	r3, [pc, #20]	; (800e4f0 <std+0x40>)
 800e4dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4de:	4b05      	ldr	r3, [pc, #20]	; (800e4f4 <std+0x44>)
 800e4e0:	6224      	str	r4, [r4, #32]
 800e4e2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4e4:	bd10      	pop	{r4, pc}
 800e4e6:	bf00      	nop
 800e4e8:	0800f135 	.word	0x0800f135
 800e4ec:	0800f157 	.word	0x0800f157
 800e4f0:	0800f18f 	.word	0x0800f18f
 800e4f4:	0800f1b3 	.word	0x0800f1b3

0800e4f8 <_cleanup_r>:
 800e4f8:	4901      	ldr	r1, [pc, #4]	; (800e500 <_cleanup_r+0x8>)
 800e4fa:	f000 b885 	b.w	800e608 <_fwalk_reent>
 800e4fe:	bf00      	nop
 800e500:	0800e45d 	.word	0x0800e45d

0800e504 <__sfmoreglue>:
 800e504:	b570      	push	{r4, r5, r6, lr}
 800e506:	1e4a      	subs	r2, r1, #1
 800e508:	2568      	movs	r5, #104	; 0x68
 800e50a:	4355      	muls	r5, r2
 800e50c:	460e      	mov	r6, r1
 800e50e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e512:	f000 fc53 	bl	800edbc <_malloc_r>
 800e516:	4604      	mov	r4, r0
 800e518:	b140      	cbz	r0, 800e52c <__sfmoreglue+0x28>
 800e51a:	2100      	movs	r1, #0
 800e51c:	e9c0 1600 	strd	r1, r6, [r0]
 800e520:	300c      	adds	r0, #12
 800e522:	60a0      	str	r0, [r4, #8]
 800e524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e528:	f7fe fb00 	bl	800cb2c <memset>
 800e52c:	4620      	mov	r0, r4
 800e52e:	bd70      	pop	{r4, r5, r6, pc}

0800e530 <__sinit>:
 800e530:	6983      	ldr	r3, [r0, #24]
 800e532:	b510      	push	{r4, lr}
 800e534:	4604      	mov	r4, r0
 800e536:	bb33      	cbnz	r3, 800e586 <__sinit+0x56>
 800e538:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e53c:	6503      	str	r3, [r0, #80]	; 0x50
 800e53e:	4b12      	ldr	r3, [pc, #72]	; (800e588 <__sinit+0x58>)
 800e540:	4a12      	ldr	r2, [pc, #72]	; (800e58c <__sinit+0x5c>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6282      	str	r2, [r0, #40]	; 0x28
 800e546:	4298      	cmp	r0, r3
 800e548:	bf04      	itt	eq
 800e54a:	2301      	moveq	r3, #1
 800e54c:	6183      	streq	r3, [r0, #24]
 800e54e:	f000 f81f 	bl	800e590 <__sfp>
 800e552:	6060      	str	r0, [r4, #4]
 800e554:	4620      	mov	r0, r4
 800e556:	f000 f81b 	bl	800e590 <__sfp>
 800e55a:	60a0      	str	r0, [r4, #8]
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 f817 	bl	800e590 <__sfp>
 800e562:	2200      	movs	r2, #0
 800e564:	60e0      	str	r0, [r4, #12]
 800e566:	2104      	movs	r1, #4
 800e568:	6860      	ldr	r0, [r4, #4]
 800e56a:	f7ff ffa1 	bl	800e4b0 <std>
 800e56e:	2201      	movs	r2, #1
 800e570:	2109      	movs	r1, #9
 800e572:	68a0      	ldr	r0, [r4, #8]
 800e574:	f7ff ff9c 	bl	800e4b0 <std>
 800e578:	2202      	movs	r2, #2
 800e57a:	2112      	movs	r1, #18
 800e57c:	68e0      	ldr	r0, [r4, #12]
 800e57e:	f7ff ff97 	bl	800e4b0 <std>
 800e582:	2301      	movs	r3, #1
 800e584:	61a3      	str	r3, [r4, #24]
 800e586:	bd10      	pop	{r4, pc}
 800e588:	08010310 	.word	0x08010310
 800e58c:	0800e4f9 	.word	0x0800e4f9

0800e590 <__sfp>:
 800e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e592:	4b1b      	ldr	r3, [pc, #108]	; (800e600 <__sfp+0x70>)
 800e594:	681e      	ldr	r6, [r3, #0]
 800e596:	69b3      	ldr	r3, [r6, #24]
 800e598:	4607      	mov	r7, r0
 800e59a:	b913      	cbnz	r3, 800e5a2 <__sfp+0x12>
 800e59c:	4630      	mov	r0, r6
 800e59e:	f7ff ffc7 	bl	800e530 <__sinit>
 800e5a2:	3648      	adds	r6, #72	; 0x48
 800e5a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5a8:	3b01      	subs	r3, #1
 800e5aa:	d503      	bpl.n	800e5b4 <__sfp+0x24>
 800e5ac:	6833      	ldr	r3, [r6, #0]
 800e5ae:	b133      	cbz	r3, 800e5be <__sfp+0x2e>
 800e5b0:	6836      	ldr	r6, [r6, #0]
 800e5b2:	e7f7      	b.n	800e5a4 <__sfp+0x14>
 800e5b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5b8:	b16d      	cbz	r5, 800e5d6 <__sfp+0x46>
 800e5ba:	3468      	adds	r4, #104	; 0x68
 800e5bc:	e7f4      	b.n	800e5a8 <__sfp+0x18>
 800e5be:	2104      	movs	r1, #4
 800e5c0:	4638      	mov	r0, r7
 800e5c2:	f7ff ff9f 	bl	800e504 <__sfmoreglue>
 800e5c6:	6030      	str	r0, [r6, #0]
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d1f1      	bne.n	800e5b0 <__sfp+0x20>
 800e5cc:	230c      	movs	r3, #12
 800e5ce:	603b      	str	r3, [r7, #0]
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d6:	4b0b      	ldr	r3, [pc, #44]	; (800e604 <__sfp+0x74>)
 800e5d8:	6665      	str	r5, [r4, #100]	; 0x64
 800e5da:	e9c4 5500 	strd	r5, r5, [r4]
 800e5de:	60a5      	str	r5, [r4, #8]
 800e5e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e5e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e5e8:	2208      	movs	r2, #8
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5f0:	f7fe fa9c 	bl	800cb2c <memset>
 800e5f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5fc:	e7e9      	b.n	800e5d2 <__sfp+0x42>
 800e5fe:	bf00      	nop
 800e600:	08010310 	.word	0x08010310
 800e604:	ffff0001 	.word	0xffff0001

0800e608 <_fwalk_reent>:
 800e608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e60c:	4680      	mov	r8, r0
 800e60e:	4689      	mov	r9, r1
 800e610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e614:	2600      	movs	r6, #0
 800e616:	b914      	cbnz	r4, 800e61e <_fwalk_reent+0x16>
 800e618:	4630      	mov	r0, r6
 800e61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e61e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e622:	3f01      	subs	r7, #1
 800e624:	d501      	bpl.n	800e62a <_fwalk_reent+0x22>
 800e626:	6824      	ldr	r4, [r4, #0]
 800e628:	e7f5      	b.n	800e616 <_fwalk_reent+0xe>
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d907      	bls.n	800e640 <_fwalk_reent+0x38>
 800e630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e634:	3301      	adds	r3, #1
 800e636:	d003      	beq.n	800e640 <_fwalk_reent+0x38>
 800e638:	4629      	mov	r1, r5
 800e63a:	4640      	mov	r0, r8
 800e63c:	47c8      	blx	r9
 800e63e:	4306      	orrs	r6, r0
 800e640:	3568      	adds	r5, #104	; 0x68
 800e642:	e7ee      	b.n	800e622 <_fwalk_reent+0x1a>

0800e644 <_localeconv_r>:
 800e644:	4b04      	ldr	r3, [pc, #16]	; (800e658 <_localeconv_r+0x14>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	6a18      	ldr	r0, [r3, #32]
 800e64a:	4b04      	ldr	r3, [pc, #16]	; (800e65c <_localeconv_r+0x18>)
 800e64c:	2800      	cmp	r0, #0
 800e64e:	bf08      	it	eq
 800e650:	4618      	moveq	r0, r3
 800e652:	30f0      	adds	r0, #240	; 0xf0
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	20001ce8 	.word	0x20001ce8
 800e65c:	20001d4c 	.word	0x20001d4c

0800e660 <__swhatbuf_r>:
 800e660:	b570      	push	{r4, r5, r6, lr}
 800e662:	460e      	mov	r6, r1
 800e664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e668:	2900      	cmp	r1, #0
 800e66a:	b096      	sub	sp, #88	; 0x58
 800e66c:	4614      	mov	r4, r2
 800e66e:	461d      	mov	r5, r3
 800e670:	da07      	bge.n	800e682 <__swhatbuf_r+0x22>
 800e672:	2300      	movs	r3, #0
 800e674:	602b      	str	r3, [r5, #0]
 800e676:	89b3      	ldrh	r3, [r6, #12]
 800e678:	061a      	lsls	r2, r3, #24
 800e67a:	d410      	bmi.n	800e69e <__swhatbuf_r+0x3e>
 800e67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e680:	e00e      	b.n	800e6a0 <__swhatbuf_r+0x40>
 800e682:	466a      	mov	r2, sp
 800e684:	f000 fdbc 	bl	800f200 <_fstat_r>
 800e688:	2800      	cmp	r0, #0
 800e68a:	dbf2      	blt.n	800e672 <__swhatbuf_r+0x12>
 800e68c:	9a01      	ldr	r2, [sp, #4]
 800e68e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e692:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e696:	425a      	negs	r2, r3
 800e698:	415a      	adcs	r2, r3
 800e69a:	602a      	str	r2, [r5, #0]
 800e69c:	e7ee      	b.n	800e67c <__swhatbuf_r+0x1c>
 800e69e:	2340      	movs	r3, #64	; 0x40
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	6023      	str	r3, [r4, #0]
 800e6a4:	b016      	add	sp, #88	; 0x58
 800e6a6:	bd70      	pop	{r4, r5, r6, pc}

0800e6a8 <__smakebuf_r>:
 800e6a8:	898b      	ldrh	r3, [r1, #12]
 800e6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6ac:	079d      	lsls	r5, r3, #30
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	d507      	bpl.n	800e6c4 <__smakebuf_r+0x1c>
 800e6b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	6123      	str	r3, [r4, #16]
 800e6bc:	2301      	movs	r3, #1
 800e6be:	6163      	str	r3, [r4, #20]
 800e6c0:	b002      	add	sp, #8
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	ab01      	add	r3, sp, #4
 800e6c6:	466a      	mov	r2, sp
 800e6c8:	f7ff ffca 	bl	800e660 <__swhatbuf_r>
 800e6cc:	9900      	ldr	r1, [sp, #0]
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	f000 fb73 	bl	800edbc <_malloc_r>
 800e6d6:	b948      	cbnz	r0, 800e6ec <__smakebuf_r+0x44>
 800e6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6dc:	059a      	lsls	r2, r3, #22
 800e6de:	d4ef      	bmi.n	800e6c0 <__smakebuf_r+0x18>
 800e6e0:	f023 0303 	bic.w	r3, r3, #3
 800e6e4:	f043 0302 	orr.w	r3, r3, #2
 800e6e8:	81a3      	strh	r3, [r4, #12]
 800e6ea:	e7e3      	b.n	800e6b4 <__smakebuf_r+0xc>
 800e6ec:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <__smakebuf_r+0x7c>)
 800e6ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800e6f0:	89a3      	ldrh	r3, [r4, #12]
 800e6f2:	6020      	str	r0, [r4, #0]
 800e6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6f8:	81a3      	strh	r3, [r4, #12]
 800e6fa:	9b00      	ldr	r3, [sp, #0]
 800e6fc:	6163      	str	r3, [r4, #20]
 800e6fe:	9b01      	ldr	r3, [sp, #4]
 800e700:	6120      	str	r0, [r4, #16]
 800e702:	b15b      	cbz	r3, 800e71c <__smakebuf_r+0x74>
 800e704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e708:	4630      	mov	r0, r6
 800e70a:	f000 fd8b 	bl	800f224 <_isatty_r>
 800e70e:	b128      	cbz	r0, 800e71c <__smakebuf_r+0x74>
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	f023 0303 	bic.w	r3, r3, #3
 800e716:	f043 0301 	orr.w	r3, r3, #1
 800e71a:	81a3      	strh	r3, [r4, #12]
 800e71c:	89a3      	ldrh	r3, [r4, #12]
 800e71e:	431d      	orrs	r5, r3
 800e720:	81a5      	strh	r5, [r4, #12]
 800e722:	e7cd      	b.n	800e6c0 <__smakebuf_r+0x18>
 800e724:	0800e4f9 	.word	0x0800e4f9

0800e728 <malloc>:
 800e728:	4b02      	ldr	r3, [pc, #8]	; (800e734 <malloc+0xc>)
 800e72a:	4601      	mov	r1, r0
 800e72c:	6818      	ldr	r0, [r3, #0]
 800e72e:	f000 bb45 	b.w	800edbc <_malloc_r>
 800e732:	bf00      	nop
 800e734:	20001ce8 	.word	0x20001ce8

0800e738 <memcpy>:
 800e738:	b510      	push	{r4, lr}
 800e73a:	1e43      	subs	r3, r0, #1
 800e73c:	440a      	add	r2, r1
 800e73e:	4291      	cmp	r1, r2
 800e740:	d100      	bne.n	800e744 <memcpy+0xc>
 800e742:	bd10      	pop	{r4, pc}
 800e744:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e74c:	e7f7      	b.n	800e73e <memcpy+0x6>

0800e74e <_Balloc>:
 800e74e:	b570      	push	{r4, r5, r6, lr}
 800e750:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e752:	4604      	mov	r4, r0
 800e754:	460e      	mov	r6, r1
 800e756:	b93d      	cbnz	r5, 800e768 <_Balloc+0x1a>
 800e758:	2010      	movs	r0, #16
 800e75a:	f7ff ffe5 	bl	800e728 <malloc>
 800e75e:	6260      	str	r0, [r4, #36]	; 0x24
 800e760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e764:	6005      	str	r5, [r0, #0]
 800e766:	60c5      	str	r5, [r0, #12]
 800e768:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e76a:	68eb      	ldr	r3, [r5, #12]
 800e76c:	b183      	cbz	r3, 800e790 <_Balloc+0x42>
 800e76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e776:	b9b8      	cbnz	r0, 800e7a8 <_Balloc+0x5a>
 800e778:	2101      	movs	r1, #1
 800e77a:	fa01 f506 	lsl.w	r5, r1, r6
 800e77e:	1d6a      	adds	r2, r5, #5
 800e780:	0092      	lsls	r2, r2, #2
 800e782:	4620      	mov	r0, r4
 800e784:	f000 fabe 	bl	800ed04 <_calloc_r>
 800e788:	b160      	cbz	r0, 800e7a4 <_Balloc+0x56>
 800e78a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e78e:	e00e      	b.n	800e7ae <_Balloc+0x60>
 800e790:	2221      	movs	r2, #33	; 0x21
 800e792:	2104      	movs	r1, #4
 800e794:	4620      	mov	r0, r4
 800e796:	f000 fab5 	bl	800ed04 <_calloc_r>
 800e79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e79c:	60e8      	str	r0, [r5, #12]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1e4      	bne.n	800e76e <_Balloc+0x20>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	bd70      	pop	{r4, r5, r6, pc}
 800e7a8:	6802      	ldr	r2, [r0, #0]
 800e7aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7b4:	e7f7      	b.n	800e7a6 <_Balloc+0x58>

0800e7b6 <_Bfree>:
 800e7b6:	b570      	push	{r4, r5, r6, lr}
 800e7b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	460d      	mov	r5, r1
 800e7be:	b93c      	cbnz	r4, 800e7d0 <_Bfree+0x1a>
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	f7ff ffb1 	bl	800e728 <malloc>
 800e7c6:	6270      	str	r0, [r6, #36]	; 0x24
 800e7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7cc:	6004      	str	r4, [r0, #0]
 800e7ce:	60c4      	str	r4, [r0, #12]
 800e7d0:	b13d      	cbz	r5, 800e7e2 <_Bfree+0x2c>
 800e7d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e7d4:	686a      	ldr	r2, [r5, #4]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7dc:	6029      	str	r1, [r5, #0]
 800e7de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}

0800e7e4 <__multadd>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	690d      	ldr	r5, [r1, #16]
 800e7ea:	461f      	mov	r7, r3
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	460c      	mov	r4, r1
 800e7f0:	f101 0c14 	add.w	ip, r1, #20
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f8dc 0000 	ldr.w	r0, [ip]
 800e7fa:	b281      	uxth	r1, r0
 800e7fc:	fb02 7101 	mla	r1, r2, r1, r7
 800e800:	0c0f      	lsrs	r7, r1, #16
 800e802:	0c00      	lsrs	r0, r0, #16
 800e804:	fb02 7000 	mla	r0, r2, r0, r7
 800e808:	b289      	uxth	r1, r1
 800e80a:	3301      	adds	r3, #1
 800e80c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e810:	429d      	cmp	r5, r3
 800e812:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e816:	f84c 1b04 	str.w	r1, [ip], #4
 800e81a:	dcec      	bgt.n	800e7f6 <__multadd+0x12>
 800e81c:	b1d7      	cbz	r7, 800e854 <__multadd+0x70>
 800e81e:	68a3      	ldr	r3, [r4, #8]
 800e820:	42ab      	cmp	r3, r5
 800e822:	dc12      	bgt.n	800e84a <__multadd+0x66>
 800e824:	6861      	ldr	r1, [r4, #4]
 800e826:	4630      	mov	r0, r6
 800e828:	3101      	adds	r1, #1
 800e82a:	f7ff ff90 	bl	800e74e <_Balloc>
 800e82e:	6922      	ldr	r2, [r4, #16]
 800e830:	3202      	adds	r2, #2
 800e832:	f104 010c 	add.w	r1, r4, #12
 800e836:	4680      	mov	r8, r0
 800e838:	0092      	lsls	r2, r2, #2
 800e83a:	300c      	adds	r0, #12
 800e83c:	f7ff ff7c 	bl	800e738 <memcpy>
 800e840:	4621      	mov	r1, r4
 800e842:	4630      	mov	r0, r6
 800e844:	f7ff ffb7 	bl	800e7b6 <_Bfree>
 800e848:	4644      	mov	r4, r8
 800e84a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e84e:	3501      	adds	r5, #1
 800e850:	615f      	str	r7, [r3, #20]
 800e852:	6125      	str	r5, [r4, #16]
 800e854:	4620      	mov	r0, r4
 800e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e85a <__hi0bits>:
 800e85a:	0c02      	lsrs	r2, r0, #16
 800e85c:	0412      	lsls	r2, r2, #16
 800e85e:	4603      	mov	r3, r0
 800e860:	b9b2      	cbnz	r2, 800e890 <__hi0bits+0x36>
 800e862:	0403      	lsls	r3, r0, #16
 800e864:	2010      	movs	r0, #16
 800e866:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e86a:	bf04      	itt	eq
 800e86c:	021b      	lsleq	r3, r3, #8
 800e86e:	3008      	addeq	r0, #8
 800e870:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e874:	bf04      	itt	eq
 800e876:	011b      	lsleq	r3, r3, #4
 800e878:	3004      	addeq	r0, #4
 800e87a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e87e:	bf04      	itt	eq
 800e880:	009b      	lsleq	r3, r3, #2
 800e882:	3002      	addeq	r0, #2
 800e884:	2b00      	cmp	r3, #0
 800e886:	db06      	blt.n	800e896 <__hi0bits+0x3c>
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	d503      	bpl.n	800e894 <__hi0bits+0x3a>
 800e88c:	3001      	adds	r0, #1
 800e88e:	4770      	bx	lr
 800e890:	2000      	movs	r0, #0
 800e892:	e7e8      	b.n	800e866 <__hi0bits+0xc>
 800e894:	2020      	movs	r0, #32
 800e896:	4770      	bx	lr

0800e898 <__lo0bits>:
 800e898:	6803      	ldr	r3, [r0, #0]
 800e89a:	f013 0207 	ands.w	r2, r3, #7
 800e89e:	4601      	mov	r1, r0
 800e8a0:	d00b      	beq.n	800e8ba <__lo0bits+0x22>
 800e8a2:	07da      	lsls	r2, r3, #31
 800e8a4:	d423      	bmi.n	800e8ee <__lo0bits+0x56>
 800e8a6:	0798      	lsls	r0, r3, #30
 800e8a8:	bf49      	itett	mi
 800e8aa:	085b      	lsrmi	r3, r3, #1
 800e8ac:	089b      	lsrpl	r3, r3, #2
 800e8ae:	2001      	movmi	r0, #1
 800e8b0:	600b      	strmi	r3, [r1, #0]
 800e8b2:	bf5c      	itt	pl
 800e8b4:	600b      	strpl	r3, [r1, #0]
 800e8b6:	2002      	movpl	r0, #2
 800e8b8:	4770      	bx	lr
 800e8ba:	b298      	uxth	r0, r3
 800e8bc:	b9a8      	cbnz	r0, 800e8ea <__lo0bits+0x52>
 800e8be:	0c1b      	lsrs	r3, r3, #16
 800e8c0:	2010      	movs	r0, #16
 800e8c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e8c6:	bf04      	itt	eq
 800e8c8:	0a1b      	lsreq	r3, r3, #8
 800e8ca:	3008      	addeq	r0, #8
 800e8cc:	071a      	lsls	r2, r3, #28
 800e8ce:	bf04      	itt	eq
 800e8d0:	091b      	lsreq	r3, r3, #4
 800e8d2:	3004      	addeq	r0, #4
 800e8d4:	079a      	lsls	r2, r3, #30
 800e8d6:	bf04      	itt	eq
 800e8d8:	089b      	lsreq	r3, r3, #2
 800e8da:	3002      	addeq	r0, #2
 800e8dc:	07da      	lsls	r2, r3, #31
 800e8de:	d402      	bmi.n	800e8e6 <__lo0bits+0x4e>
 800e8e0:	085b      	lsrs	r3, r3, #1
 800e8e2:	d006      	beq.n	800e8f2 <__lo0bits+0x5a>
 800e8e4:	3001      	adds	r0, #1
 800e8e6:	600b      	str	r3, [r1, #0]
 800e8e8:	4770      	bx	lr
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	e7e9      	b.n	800e8c2 <__lo0bits+0x2a>
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	4770      	bx	lr
 800e8f2:	2020      	movs	r0, #32
 800e8f4:	4770      	bx	lr

0800e8f6 <__i2b>:
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	2101      	movs	r1, #1
 800e8fc:	f7ff ff27 	bl	800e74e <_Balloc>
 800e900:	2201      	movs	r2, #1
 800e902:	6144      	str	r4, [r0, #20]
 800e904:	6102      	str	r2, [r0, #16]
 800e906:	bd10      	pop	{r4, pc}

0800e908 <__multiply>:
 800e908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	4614      	mov	r4, r2
 800e90e:	690a      	ldr	r2, [r1, #16]
 800e910:	6923      	ldr	r3, [r4, #16]
 800e912:	429a      	cmp	r2, r3
 800e914:	bfb8      	it	lt
 800e916:	460b      	movlt	r3, r1
 800e918:	4688      	mov	r8, r1
 800e91a:	bfbc      	itt	lt
 800e91c:	46a0      	movlt	r8, r4
 800e91e:	461c      	movlt	r4, r3
 800e920:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e924:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e928:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e92c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e930:	eb07 0609 	add.w	r6, r7, r9
 800e934:	42b3      	cmp	r3, r6
 800e936:	bfb8      	it	lt
 800e938:	3101      	addlt	r1, #1
 800e93a:	f7ff ff08 	bl	800e74e <_Balloc>
 800e93e:	f100 0514 	add.w	r5, r0, #20
 800e942:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e946:	462b      	mov	r3, r5
 800e948:	2200      	movs	r2, #0
 800e94a:	4573      	cmp	r3, lr
 800e94c:	d316      	bcc.n	800e97c <__multiply+0x74>
 800e94e:	f104 0214 	add.w	r2, r4, #20
 800e952:	f108 0114 	add.w	r1, r8, #20
 800e956:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e95a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	9b00      	ldr	r3, [sp, #0]
 800e962:	9201      	str	r2, [sp, #4]
 800e964:	4293      	cmp	r3, r2
 800e966:	d80c      	bhi.n	800e982 <__multiply+0x7a>
 800e968:	2e00      	cmp	r6, #0
 800e96a:	dd03      	ble.n	800e974 <__multiply+0x6c>
 800e96c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e970:	2b00      	cmp	r3, #0
 800e972:	d05d      	beq.n	800ea30 <__multiply+0x128>
 800e974:	6106      	str	r6, [r0, #16]
 800e976:	b003      	add	sp, #12
 800e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97c:	f843 2b04 	str.w	r2, [r3], #4
 800e980:	e7e3      	b.n	800e94a <__multiply+0x42>
 800e982:	f8b2 b000 	ldrh.w	fp, [r2]
 800e986:	f1bb 0f00 	cmp.w	fp, #0
 800e98a:	d023      	beq.n	800e9d4 <__multiply+0xcc>
 800e98c:	4689      	mov	r9, r1
 800e98e:	46ac      	mov	ip, r5
 800e990:	f04f 0800 	mov.w	r8, #0
 800e994:	f859 4b04 	ldr.w	r4, [r9], #4
 800e998:	f8dc a000 	ldr.w	sl, [ip]
 800e99c:	b2a3      	uxth	r3, r4
 800e99e:	fa1f fa8a 	uxth.w	sl, sl
 800e9a2:	fb0b a303 	mla	r3, fp, r3, sl
 800e9a6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e9aa:	f8dc 4000 	ldr.w	r4, [ip]
 800e9ae:	4443      	add	r3, r8
 800e9b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e9b4:	fb0b 840a 	mla	r4, fp, sl, r8
 800e9b8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e9bc:	46e2      	mov	sl, ip
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e9c4:	454f      	cmp	r7, r9
 800e9c6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e9ca:	f84a 3b04 	str.w	r3, [sl], #4
 800e9ce:	d82b      	bhi.n	800ea28 <__multiply+0x120>
 800e9d0:	f8cc 8004 	str.w	r8, [ip, #4]
 800e9d4:	9b01      	ldr	r3, [sp, #4]
 800e9d6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e9da:	3204      	adds	r2, #4
 800e9dc:	f1ba 0f00 	cmp.w	sl, #0
 800e9e0:	d020      	beq.n	800ea24 <__multiply+0x11c>
 800e9e2:	682b      	ldr	r3, [r5, #0]
 800e9e4:	4689      	mov	r9, r1
 800e9e6:	46a8      	mov	r8, r5
 800e9e8:	f04f 0b00 	mov.w	fp, #0
 800e9ec:	f8b9 c000 	ldrh.w	ip, [r9]
 800e9f0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e9f4:	fb0a 440c 	mla	r4, sl, ip, r4
 800e9f8:	445c      	add	r4, fp
 800e9fa:	46c4      	mov	ip, r8
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ea02:	f84c 3b04 	str.w	r3, [ip], #4
 800ea06:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea0a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ea0e:	0c1b      	lsrs	r3, r3, #16
 800ea10:	fb0a b303 	mla	r3, sl, r3, fp
 800ea14:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ea18:	454f      	cmp	r7, r9
 800ea1a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ea1e:	d805      	bhi.n	800ea2c <__multiply+0x124>
 800ea20:	f8c8 3004 	str.w	r3, [r8, #4]
 800ea24:	3504      	adds	r5, #4
 800ea26:	e79b      	b.n	800e960 <__multiply+0x58>
 800ea28:	46d4      	mov	ip, sl
 800ea2a:	e7b3      	b.n	800e994 <__multiply+0x8c>
 800ea2c:	46e0      	mov	r8, ip
 800ea2e:	e7dd      	b.n	800e9ec <__multiply+0xe4>
 800ea30:	3e01      	subs	r6, #1
 800ea32:	e799      	b.n	800e968 <__multiply+0x60>

0800ea34 <__pow5mult>:
 800ea34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea38:	4615      	mov	r5, r2
 800ea3a:	f012 0203 	ands.w	r2, r2, #3
 800ea3e:	4606      	mov	r6, r0
 800ea40:	460f      	mov	r7, r1
 800ea42:	d007      	beq.n	800ea54 <__pow5mult+0x20>
 800ea44:	3a01      	subs	r2, #1
 800ea46:	4c21      	ldr	r4, [pc, #132]	; (800eacc <__pow5mult+0x98>)
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea4e:	f7ff fec9 	bl	800e7e4 <__multadd>
 800ea52:	4607      	mov	r7, r0
 800ea54:	10ad      	asrs	r5, r5, #2
 800ea56:	d035      	beq.n	800eac4 <__pow5mult+0x90>
 800ea58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ea5a:	b93c      	cbnz	r4, 800ea6c <__pow5mult+0x38>
 800ea5c:	2010      	movs	r0, #16
 800ea5e:	f7ff fe63 	bl	800e728 <malloc>
 800ea62:	6270      	str	r0, [r6, #36]	; 0x24
 800ea64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea68:	6004      	str	r4, [r0, #0]
 800ea6a:	60c4      	str	r4, [r0, #12]
 800ea6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ea70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea74:	b94c      	cbnz	r4, 800ea8a <__pow5mult+0x56>
 800ea76:	f240 2171 	movw	r1, #625	; 0x271
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f7ff ff3b 	bl	800e8f6 <__i2b>
 800ea80:	2300      	movs	r3, #0
 800ea82:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea86:	4604      	mov	r4, r0
 800ea88:	6003      	str	r3, [r0, #0]
 800ea8a:	f04f 0800 	mov.w	r8, #0
 800ea8e:	07eb      	lsls	r3, r5, #31
 800ea90:	d50a      	bpl.n	800eaa8 <__pow5mult+0x74>
 800ea92:	4639      	mov	r1, r7
 800ea94:	4622      	mov	r2, r4
 800ea96:	4630      	mov	r0, r6
 800ea98:	f7ff ff36 	bl	800e908 <__multiply>
 800ea9c:	4639      	mov	r1, r7
 800ea9e:	4681      	mov	r9, r0
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f7ff fe88 	bl	800e7b6 <_Bfree>
 800eaa6:	464f      	mov	r7, r9
 800eaa8:	106d      	asrs	r5, r5, #1
 800eaaa:	d00b      	beq.n	800eac4 <__pow5mult+0x90>
 800eaac:	6820      	ldr	r0, [r4, #0]
 800eaae:	b938      	cbnz	r0, 800eac0 <__pow5mult+0x8c>
 800eab0:	4622      	mov	r2, r4
 800eab2:	4621      	mov	r1, r4
 800eab4:	4630      	mov	r0, r6
 800eab6:	f7ff ff27 	bl	800e908 <__multiply>
 800eaba:	6020      	str	r0, [r4, #0]
 800eabc:	f8c0 8000 	str.w	r8, [r0]
 800eac0:	4604      	mov	r4, r0
 800eac2:	e7e4      	b.n	800ea8e <__pow5mult+0x5a>
 800eac4:	4638      	mov	r0, r7
 800eac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaca:	bf00      	nop
 800eacc:	080104a8 	.word	0x080104a8

0800ead0 <__lshift>:
 800ead0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ead4:	460c      	mov	r4, r1
 800ead6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eada:	6923      	ldr	r3, [r4, #16]
 800eadc:	6849      	ldr	r1, [r1, #4]
 800eade:	eb0a 0903 	add.w	r9, sl, r3
 800eae2:	68a3      	ldr	r3, [r4, #8]
 800eae4:	4607      	mov	r7, r0
 800eae6:	4616      	mov	r6, r2
 800eae8:	f109 0501 	add.w	r5, r9, #1
 800eaec:	42ab      	cmp	r3, r5
 800eaee:	db32      	blt.n	800eb56 <__lshift+0x86>
 800eaf0:	4638      	mov	r0, r7
 800eaf2:	f7ff fe2c 	bl	800e74e <_Balloc>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	4680      	mov	r8, r0
 800eafa:	f100 0114 	add.w	r1, r0, #20
 800eafe:	461a      	mov	r2, r3
 800eb00:	4553      	cmp	r3, sl
 800eb02:	db2b      	blt.n	800eb5c <__lshift+0x8c>
 800eb04:	6920      	ldr	r0, [r4, #16]
 800eb06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb0a:	f104 0314 	add.w	r3, r4, #20
 800eb0e:	f016 021f 	ands.w	r2, r6, #31
 800eb12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb1a:	d025      	beq.n	800eb68 <__lshift+0x98>
 800eb1c:	f1c2 0e20 	rsb	lr, r2, #32
 800eb20:	2000      	movs	r0, #0
 800eb22:	681e      	ldr	r6, [r3, #0]
 800eb24:	468a      	mov	sl, r1
 800eb26:	4096      	lsls	r6, r2
 800eb28:	4330      	orrs	r0, r6
 800eb2a:	f84a 0b04 	str.w	r0, [sl], #4
 800eb2e:	f853 0b04 	ldr.w	r0, [r3], #4
 800eb32:	459c      	cmp	ip, r3
 800eb34:	fa20 f00e 	lsr.w	r0, r0, lr
 800eb38:	d814      	bhi.n	800eb64 <__lshift+0x94>
 800eb3a:	6048      	str	r0, [r1, #4]
 800eb3c:	b108      	cbz	r0, 800eb42 <__lshift+0x72>
 800eb3e:	f109 0502 	add.w	r5, r9, #2
 800eb42:	3d01      	subs	r5, #1
 800eb44:	4638      	mov	r0, r7
 800eb46:	f8c8 5010 	str.w	r5, [r8, #16]
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	f7ff fe33 	bl	800e7b6 <_Bfree>
 800eb50:	4640      	mov	r0, r8
 800eb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb56:	3101      	adds	r1, #1
 800eb58:	005b      	lsls	r3, r3, #1
 800eb5a:	e7c7      	b.n	800eaec <__lshift+0x1c>
 800eb5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800eb60:	3301      	adds	r3, #1
 800eb62:	e7cd      	b.n	800eb00 <__lshift+0x30>
 800eb64:	4651      	mov	r1, sl
 800eb66:	e7dc      	b.n	800eb22 <__lshift+0x52>
 800eb68:	3904      	subs	r1, #4
 800eb6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb6e:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb72:	459c      	cmp	ip, r3
 800eb74:	d8f9      	bhi.n	800eb6a <__lshift+0x9a>
 800eb76:	e7e4      	b.n	800eb42 <__lshift+0x72>

0800eb78 <__mcmp>:
 800eb78:	6903      	ldr	r3, [r0, #16]
 800eb7a:	690a      	ldr	r2, [r1, #16]
 800eb7c:	1a9b      	subs	r3, r3, r2
 800eb7e:	b530      	push	{r4, r5, lr}
 800eb80:	d10c      	bne.n	800eb9c <__mcmp+0x24>
 800eb82:	0092      	lsls	r2, r2, #2
 800eb84:	3014      	adds	r0, #20
 800eb86:	3114      	adds	r1, #20
 800eb88:	1884      	adds	r4, r0, r2
 800eb8a:	4411      	add	r1, r2
 800eb8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb94:	4295      	cmp	r5, r2
 800eb96:	d003      	beq.n	800eba0 <__mcmp+0x28>
 800eb98:	d305      	bcc.n	800eba6 <__mcmp+0x2e>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	bd30      	pop	{r4, r5, pc}
 800eba0:	42a0      	cmp	r0, r4
 800eba2:	d3f3      	bcc.n	800eb8c <__mcmp+0x14>
 800eba4:	e7fa      	b.n	800eb9c <__mcmp+0x24>
 800eba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebaa:	e7f7      	b.n	800eb9c <__mcmp+0x24>

0800ebac <__mdiff>:
 800ebac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb0:	460d      	mov	r5, r1
 800ebb2:	4607      	mov	r7, r0
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	4614      	mov	r4, r2
 800ebba:	f7ff ffdd 	bl	800eb78 <__mcmp>
 800ebbe:	1e06      	subs	r6, r0, #0
 800ebc0:	d108      	bne.n	800ebd4 <__mdiff+0x28>
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	4638      	mov	r0, r7
 800ebc6:	f7ff fdc2 	bl	800e74e <_Balloc>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ebd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd4:	bfa4      	itt	ge
 800ebd6:	4623      	movge	r3, r4
 800ebd8:	462c      	movge	r4, r5
 800ebda:	4638      	mov	r0, r7
 800ebdc:	6861      	ldr	r1, [r4, #4]
 800ebde:	bfa6      	itte	ge
 800ebe0:	461d      	movge	r5, r3
 800ebe2:	2600      	movge	r6, #0
 800ebe4:	2601      	movlt	r6, #1
 800ebe6:	f7ff fdb2 	bl	800e74e <_Balloc>
 800ebea:	692b      	ldr	r3, [r5, #16]
 800ebec:	60c6      	str	r6, [r0, #12]
 800ebee:	6926      	ldr	r6, [r4, #16]
 800ebf0:	f105 0914 	add.w	r9, r5, #20
 800ebf4:	f104 0214 	add.w	r2, r4, #20
 800ebf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ebfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ec00:	f100 0514 	add.w	r5, r0, #20
 800ec04:	f04f 0e00 	mov.w	lr, #0
 800ec08:	f852 ab04 	ldr.w	sl, [r2], #4
 800ec0c:	f859 4b04 	ldr.w	r4, [r9], #4
 800ec10:	fa1e f18a 	uxtah	r1, lr, sl
 800ec14:	b2a3      	uxth	r3, r4
 800ec16:	1ac9      	subs	r1, r1, r3
 800ec18:	0c23      	lsrs	r3, r4, #16
 800ec1a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ec1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ec22:	b289      	uxth	r1, r1
 800ec24:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ec28:	45c8      	cmp	r8, r9
 800ec2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ec2e:	4694      	mov	ip, r2
 800ec30:	f845 3b04 	str.w	r3, [r5], #4
 800ec34:	d8e8      	bhi.n	800ec08 <__mdiff+0x5c>
 800ec36:	45bc      	cmp	ip, r7
 800ec38:	d304      	bcc.n	800ec44 <__mdiff+0x98>
 800ec3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ec3e:	b183      	cbz	r3, 800ec62 <__mdiff+0xb6>
 800ec40:	6106      	str	r6, [r0, #16]
 800ec42:	e7c5      	b.n	800ebd0 <__mdiff+0x24>
 800ec44:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ec48:	fa1e f381 	uxtah	r3, lr, r1
 800ec4c:	141a      	asrs	r2, r3, #16
 800ec4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ec5c:	f845 3b04 	str.w	r3, [r5], #4
 800ec60:	e7e9      	b.n	800ec36 <__mdiff+0x8a>
 800ec62:	3e01      	subs	r6, #1
 800ec64:	e7e9      	b.n	800ec3a <__mdiff+0x8e>

0800ec66 <__d2b>:
 800ec66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec6a:	460e      	mov	r6, r1
 800ec6c:	2101      	movs	r1, #1
 800ec6e:	ec59 8b10 	vmov	r8, r9, d0
 800ec72:	4615      	mov	r5, r2
 800ec74:	f7ff fd6b 	bl	800e74e <_Balloc>
 800ec78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ec7c:	4607      	mov	r7, r0
 800ec7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec82:	bb34      	cbnz	r4, 800ecd2 <__d2b+0x6c>
 800ec84:	9301      	str	r3, [sp, #4]
 800ec86:	f1b8 0300 	subs.w	r3, r8, #0
 800ec8a:	d027      	beq.n	800ecdc <__d2b+0x76>
 800ec8c:	a802      	add	r0, sp, #8
 800ec8e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ec92:	f7ff fe01 	bl	800e898 <__lo0bits>
 800ec96:	9900      	ldr	r1, [sp, #0]
 800ec98:	b1f0      	cbz	r0, 800ecd8 <__d2b+0x72>
 800ec9a:	9a01      	ldr	r2, [sp, #4]
 800ec9c:	f1c0 0320 	rsb	r3, r0, #32
 800eca0:	fa02 f303 	lsl.w	r3, r2, r3
 800eca4:	430b      	orrs	r3, r1
 800eca6:	40c2      	lsrs	r2, r0
 800eca8:	617b      	str	r3, [r7, #20]
 800ecaa:	9201      	str	r2, [sp, #4]
 800ecac:	9b01      	ldr	r3, [sp, #4]
 800ecae:	61bb      	str	r3, [r7, #24]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	bf14      	ite	ne
 800ecb4:	2102      	movne	r1, #2
 800ecb6:	2101      	moveq	r1, #1
 800ecb8:	6139      	str	r1, [r7, #16]
 800ecba:	b1c4      	cbz	r4, 800ecee <__d2b+0x88>
 800ecbc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ecc0:	4404      	add	r4, r0
 800ecc2:	6034      	str	r4, [r6, #0]
 800ecc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecc8:	6028      	str	r0, [r5, #0]
 800ecca:	4638      	mov	r0, r7
 800eccc:	b003      	add	sp, #12
 800ecce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecd6:	e7d5      	b.n	800ec84 <__d2b+0x1e>
 800ecd8:	6179      	str	r1, [r7, #20]
 800ecda:	e7e7      	b.n	800ecac <__d2b+0x46>
 800ecdc:	a801      	add	r0, sp, #4
 800ecde:	f7ff fddb 	bl	800e898 <__lo0bits>
 800ece2:	9b01      	ldr	r3, [sp, #4]
 800ece4:	617b      	str	r3, [r7, #20]
 800ece6:	2101      	movs	r1, #1
 800ece8:	6139      	str	r1, [r7, #16]
 800ecea:	3020      	adds	r0, #32
 800ecec:	e7e5      	b.n	800ecba <__d2b+0x54>
 800ecee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ecf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecf6:	6030      	str	r0, [r6, #0]
 800ecf8:	6918      	ldr	r0, [r3, #16]
 800ecfa:	f7ff fdae 	bl	800e85a <__hi0bits>
 800ecfe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ed02:	e7e1      	b.n	800ecc8 <__d2b+0x62>

0800ed04 <_calloc_r>:
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	fb02 f401 	mul.w	r4, r2, r1
 800ed0a:	4621      	mov	r1, r4
 800ed0c:	f000 f856 	bl	800edbc <_malloc_r>
 800ed10:	4605      	mov	r5, r0
 800ed12:	b118      	cbz	r0, 800ed1c <_calloc_r+0x18>
 800ed14:	4622      	mov	r2, r4
 800ed16:	2100      	movs	r1, #0
 800ed18:	f7fd ff08 	bl	800cb2c <memset>
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	bd38      	pop	{r3, r4, r5, pc}

0800ed20 <_free_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4605      	mov	r5, r0
 800ed24:	2900      	cmp	r1, #0
 800ed26:	d045      	beq.n	800edb4 <_free_r+0x94>
 800ed28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed2c:	1f0c      	subs	r4, r1, #4
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	bfb8      	it	lt
 800ed32:	18e4      	addlt	r4, r4, r3
 800ed34:	f000 fac3 	bl	800f2be <__malloc_lock>
 800ed38:	4a1f      	ldr	r2, [pc, #124]	; (800edb8 <_free_r+0x98>)
 800ed3a:	6813      	ldr	r3, [r2, #0]
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	b933      	cbnz	r3, 800ed4e <_free_r+0x2e>
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	6014      	str	r4, [r2, #0]
 800ed44:	4628      	mov	r0, r5
 800ed46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed4a:	f000 bab9 	b.w	800f2c0 <__malloc_unlock>
 800ed4e:	42a3      	cmp	r3, r4
 800ed50:	d90c      	bls.n	800ed6c <_free_r+0x4c>
 800ed52:	6821      	ldr	r1, [r4, #0]
 800ed54:	1862      	adds	r2, r4, r1
 800ed56:	4293      	cmp	r3, r2
 800ed58:	bf04      	itt	eq
 800ed5a:	681a      	ldreq	r2, [r3, #0]
 800ed5c:	685b      	ldreq	r3, [r3, #4]
 800ed5e:	6063      	str	r3, [r4, #4]
 800ed60:	bf04      	itt	eq
 800ed62:	1852      	addeq	r2, r2, r1
 800ed64:	6022      	streq	r2, [r4, #0]
 800ed66:	6004      	str	r4, [r0, #0]
 800ed68:	e7ec      	b.n	800ed44 <_free_r+0x24>
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	b10a      	cbz	r2, 800ed74 <_free_r+0x54>
 800ed70:	42a2      	cmp	r2, r4
 800ed72:	d9fa      	bls.n	800ed6a <_free_r+0x4a>
 800ed74:	6819      	ldr	r1, [r3, #0]
 800ed76:	1858      	adds	r0, r3, r1
 800ed78:	42a0      	cmp	r0, r4
 800ed7a:	d10b      	bne.n	800ed94 <_free_r+0x74>
 800ed7c:	6820      	ldr	r0, [r4, #0]
 800ed7e:	4401      	add	r1, r0
 800ed80:	1858      	adds	r0, r3, r1
 800ed82:	4282      	cmp	r2, r0
 800ed84:	6019      	str	r1, [r3, #0]
 800ed86:	d1dd      	bne.n	800ed44 <_free_r+0x24>
 800ed88:	6810      	ldr	r0, [r2, #0]
 800ed8a:	6852      	ldr	r2, [r2, #4]
 800ed8c:	605a      	str	r2, [r3, #4]
 800ed8e:	4401      	add	r1, r0
 800ed90:	6019      	str	r1, [r3, #0]
 800ed92:	e7d7      	b.n	800ed44 <_free_r+0x24>
 800ed94:	d902      	bls.n	800ed9c <_free_r+0x7c>
 800ed96:	230c      	movs	r3, #12
 800ed98:	602b      	str	r3, [r5, #0]
 800ed9a:	e7d3      	b.n	800ed44 <_free_r+0x24>
 800ed9c:	6820      	ldr	r0, [r4, #0]
 800ed9e:	1821      	adds	r1, r4, r0
 800eda0:	428a      	cmp	r2, r1
 800eda2:	bf04      	itt	eq
 800eda4:	6811      	ldreq	r1, [r2, #0]
 800eda6:	6852      	ldreq	r2, [r2, #4]
 800eda8:	6062      	str	r2, [r4, #4]
 800edaa:	bf04      	itt	eq
 800edac:	1809      	addeq	r1, r1, r0
 800edae:	6021      	streq	r1, [r4, #0]
 800edb0:	605c      	str	r4, [r3, #4]
 800edb2:	e7c7      	b.n	800ed44 <_free_r+0x24>
 800edb4:	bd38      	pop	{r3, r4, r5, pc}
 800edb6:	bf00      	nop
 800edb8:	20001f14 	.word	0x20001f14

0800edbc <_malloc_r>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	1ccd      	adds	r5, r1, #3
 800edc0:	f025 0503 	bic.w	r5, r5, #3
 800edc4:	3508      	adds	r5, #8
 800edc6:	2d0c      	cmp	r5, #12
 800edc8:	bf38      	it	cc
 800edca:	250c      	movcc	r5, #12
 800edcc:	2d00      	cmp	r5, #0
 800edce:	4606      	mov	r6, r0
 800edd0:	db01      	blt.n	800edd6 <_malloc_r+0x1a>
 800edd2:	42a9      	cmp	r1, r5
 800edd4:	d903      	bls.n	800edde <_malloc_r+0x22>
 800edd6:	230c      	movs	r3, #12
 800edd8:	6033      	str	r3, [r6, #0]
 800edda:	2000      	movs	r0, #0
 800eddc:	bd70      	pop	{r4, r5, r6, pc}
 800edde:	f000 fa6e 	bl	800f2be <__malloc_lock>
 800ede2:	4a21      	ldr	r2, [pc, #132]	; (800ee68 <_malloc_r+0xac>)
 800ede4:	6814      	ldr	r4, [r2, #0]
 800ede6:	4621      	mov	r1, r4
 800ede8:	b991      	cbnz	r1, 800ee10 <_malloc_r+0x54>
 800edea:	4c20      	ldr	r4, [pc, #128]	; (800ee6c <_malloc_r+0xb0>)
 800edec:	6823      	ldr	r3, [r4, #0]
 800edee:	b91b      	cbnz	r3, 800edf8 <_malloc_r+0x3c>
 800edf0:	4630      	mov	r0, r6
 800edf2:	f000 f98f 	bl	800f114 <_sbrk_r>
 800edf6:	6020      	str	r0, [r4, #0]
 800edf8:	4629      	mov	r1, r5
 800edfa:	4630      	mov	r0, r6
 800edfc:	f000 f98a 	bl	800f114 <_sbrk_r>
 800ee00:	1c43      	adds	r3, r0, #1
 800ee02:	d124      	bne.n	800ee4e <_malloc_r+0x92>
 800ee04:	230c      	movs	r3, #12
 800ee06:	6033      	str	r3, [r6, #0]
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f000 fa59 	bl	800f2c0 <__malloc_unlock>
 800ee0e:	e7e4      	b.n	800edda <_malloc_r+0x1e>
 800ee10:	680b      	ldr	r3, [r1, #0]
 800ee12:	1b5b      	subs	r3, r3, r5
 800ee14:	d418      	bmi.n	800ee48 <_malloc_r+0x8c>
 800ee16:	2b0b      	cmp	r3, #11
 800ee18:	d90f      	bls.n	800ee3a <_malloc_r+0x7e>
 800ee1a:	600b      	str	r3, [r1, #0]
 800ee1c:	50cd      	str	r5, [r1, r3]
 800ee1e:	18cc      	adds	r4, r1, r3
 800ee20:	4630      	mov	r0, r6
 800ee22:	f000 fa4d 	bl	800f2c0 <__malloc_unlock>
 800ee26:	f104 000b 	add.w	r0, r4, #11
 800ee2a:	1d23      	adds	r3, r4, #4
 800ee2c:	f020 0007 	bic.w	r0, r0, #7
 800ee30:	1ac3      	subs	r3, r0, r3
 800ee32:	d0d3      	beq.n	800eddc <_malloc_r+0x20>
 800ee34:	425a      	negs	r2, r3
 800ee36:	50e2      	str	r2, [r4, r3]
 800ee38:	e7d0      	b.n	800eddc <_malloc_r+0x20>
 800ee3a:	428c      	cmp	r4, r1
 800ee3c:	684b      	ldr	r3, [r1, #4]
 800ee3e:	bf16      	itet	ne
 800ee40:	6063      	strne	r3, [r4, #4]
 800ee42:	6013      	streq	r3, [r2, #0]
 800ee44:	460c      	movne	r4, r1
 800ee46:	e7eb      	b.n	800ee20 <_malloc_r+0x64>
 800ee48:	460c      	mov	r4, r1
 800ee4a:	6849      	ldr	r1, [r1, #4]
 800ee4c:	e7cc      	b.n	800ede8 <_malloc_r+0x2c>
 800ee4e:	1cc4      	adds	r4, r0, #3
 800ee50:	f024 0403 	bic.w	r4, r4, #3
 800ee54:	42a0      	cmp	r0, r4
 800ee56:	d005      	beq.n	800ee64 <_malloc_r+0xa8>
 800ee58:	1a21      	subs	r1, r4, r0
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f000 f95a 	bl	800f114 <_sbrk_r>
 800ee60:	3001      	adds	r0, #1
 800ee62:	d0cf      	beq.n	800ee04 <_malloc_r+0x48>
 800ee64:	6025      	str	r5, [r4, #0]
 800ee66:	e7db      	b.n	800ee20 <_malloc_r+0x64>
 800ee68:	20001f14 	.word	0x20001f14
 800ee6c:	20001f18 	.word	0x20001f18

0800ee70 <__ssputs_r>:
 800ee70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee74:	688e      	ldr	r6, [r1, #8]
 800ee76:	429e      	cmp	r6, r3
 800ee78:	4682      	mov	sl, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	4690      	mov	r8, r2
 800ee7e:	4699      	mov	r9, r3
 800ee80:	d837      	bhi.n	800eef2 <__ssputs_r+0x82>
 800ee82:	898a      	ldrh	r2, [r1, #12]
 800ee84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee88:	d031      	beq.n	800eeee <__ssputs_r+0x7e>
 800ee8a:	6825      	ldr	r5, [r4, #0]
 800ee8c:	6909      	ldr	r1, [r1, #16]
 800ee8e:	1a6f      	subs	r7, r5, r1
 800ee90:	6965      	ldr	r5, [r4, #20]
 800ee92:	2302      	movs	r3, #2
 800ee94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee98:	fb95 f5f3 	sdiv	r5, r5, r3
 800ee9c:	f109 0301 	add.w	r3, r9, #1
 800eea0:	443b      	add	r3, r7
 800eea2:	429d      	cmp	r5, r3
 800eea4:	bf38      	it	cc
 800eea6:	461d      	movcc	r5, r3
 800eea8:	0553      	lsls	r3, r2, #21
 800eeaa:	d530      	bpl.n	800ef0e <__ssputs_r+0x9e>
 800eeac:	4629      	mov	r1, r5
 800eeae:	f7ff ff85 	bl	800edbc <_malloc_r>
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	b950      	cbnz	r0, 800eecc <__ssputs_r+0x5c>
 800eeb6:	230c      	movs	r3, #12
 800eeb8:	f8ca 3000 	str.w	r3, [sl]
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eec2:	81a3      	strh	r3, [r4, #12]
 800eec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eecc:	463a      	mov	r2, r7
 800eece:	6921      	ldr	r1, [r4, #16]
 800eed0:	f7ff fc32 	bl	800e738 <memcpy>
 800eed4:	89a3      	ldrh	r3, [r4, #12]
 800eed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eeda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eede:	81a3      	strh	r3, [r4, #12]
 800eee0:	6126      	str	r6, [r4, #16]
 800eee2:	6165      	str	r5, [r4, #20]
 800eee4:	443e      	add	r6, r7
 800eee6:	1bed      	subs	r5, r5, r7
 800eee8:	6026      	str	r6, [r4, #0]
 800eeea:	60a5      	str	r5, [r4, #8]
 800eeec:	464e      	mov	r6, r9
 800eeee:	454e      	cmp	r6, r9
 800eef0:	d900      	bls.n	800eef4 <__ssputs_r+0x84>
 800eef2:	464e      	mov	r6, r9
 800eef4:	4632      	mov	r2, r6
 800eef6:	4641      	mov	r1, r8
 800eef8:	6820      	ldr	r0, [r4, #0]
 800eefa:	f000 f9c7 	bl	800f28c <memmove>
 800eefe:	68a3      	ldr	r3, [r4, #8]
 800ef00:	1b9b      	subs	r3, r3, r6
 800ef02:	60a3      	str	r3, [r4, #8]
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	441e      	add	r6, r3
 800ef08:	6026      	str	r6, [r4, #0]
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e7dc      	b.n	800eec8 <__ssputs_r+0x58>
 800ef0e:	462a      	mov	r2, r5
 800ef10:	f000 f9d7 	bl	800f2c2 <_realloc_r>
 800ef14:	4606      	mov	r6, r0
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d1e2      	bne.n	800eee0 <__ssputs_r+0x70>
 800ef1a:	6921      	ldr	r1, [r4, #16]
 800ef1c:	4650      	mov	r0, sl
 800ef1e:	f7ff feff 	bl	800ed20 <_free_r>
 800ef22:	e7c8      	b.n	800eeb6 <__ssputs_r+0x46>

0800ef24 <_svfiprintf_r>:
 800ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef28:	461d      	mov	r5, r3
 800ef2a:	898b      	ldrh	r3, [r1, #12]
 800ef2c:	061f      	lsls	r7, r3, #24
 800ef2e:	b09d      	sub	sp, #116	; 0x74
 800ef30:	4680      	mov	r8, r0
 800ef32:	460c      	mov	r4, r1
 800ef34:	4616      	mov	r6, r2
 800ef36:	d50f      	bpl.n	800ef58 <_svfiprintf_r+0x34>
 800ef38:	690b      	ldr	r3, [r1, #16]
 800ef3a:	b96b      	cbnz	r3, 800ef58 <_svfiprintf_r+0x34>
 800ef3c:	2140      	movs	r1, #64	; 0x40
 800ef3e:	f7ff ff3d 	bl	800edbc <_malloc_r>
 800ef42:	6020      	str	r0, [r4, #0]
 800ef44:	6120      	str	r0, [r4, #16]
 800ef46:	b928      	cbnz	r0, 800ef54 <_svfiprintf_r+0x30>
 800ef48:	230c      	movs	r3, #12
 800ef4a:	f8c8 3000 	str.w	r3, [r8]
 800ef4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef52:	e0c8      	b.n	800f0e6 <_svfiprintf_r+0x1c2>
 800ef54:	2340      	movs	r3, #64	; 0x40
 800ef56:	6163      	str	r3, [r4, #20]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef5c:	2320      	movs	r3, #32
 800ef5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef62:	2330      	movs	r3, #48	; 0x30
 800ef64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef68:	9503      	str	r5, [sp, #12]
 800ef6a:	f04f 0b01 	mov.w	fp, #1
 800ef6e:	4637      	mov	r7, r6
 800ef70:	463d      	mov	r5, r7
 800ef72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ef76:	b10b      	cbz	r3, 800ef7c <_svfiprintf_r+0x58>
 800ef78:	2b25      	cmp	r3, #37	; 0x25
 800ef7a:	d13e      	bne.n	800effa <_svfiprintf_r+0xd6>
 800ef7c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ef80:	d00b      	beq.n	800ef9a <_svfiprintf_r+0x76>
 800ef82:	4653      	mov	r3, sl
 800ef84:	4632      	mov	r2, r6
 800ef86:	4621      	mov	r1, r4
 800ef88:	4640      	mov	r0, r8
 800ef8a:	f7ff ff71 	bl	800ee70 <__ssputs_r>
 800ef8e:	3001      	adds	r0, #1
 800ef90:	f000 80a4 	beq.w	800f0dc <_svfiprintf_r+0x1b8>
 800ef94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef96:	4453      	add	r3, sl
 800ef98:	9309      	str	r3, [sp, #36]	; 0x24
 800ef9a:	783b      	ldrb	r3, [r7, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f000 809d 	beq.w	800f0dc <_svfiprintf_r+0x1b8>
 800efa2:	2300      	movs	r3, #0
 800efa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efac:	9304      	str	r3, [sp, #16]
 800efae:	9307      	str	r3, [sp, #28]
 800efb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efb4:	931a      	str	r3, [sp, #104]	; 0x68
 800efb6:	462f      	mov	r7, r5
 800efb8:	2205      	movs	r2, #5
 800efba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800efbe:	4850      	ldr	r0, [pc, #320]	; (800f100 <_svfiprintf_r+0x1dc>)
 800efc0:	f7f1 f936 	bl	8000230 <memchr>
 800efc4:	9b04      	ldr	r3, [sp, #16]
 800efc6:	b9d0      	cbnz	r0, 800effe <_svfiprintf_r+0xda>
 800efc8:	06d9      	lsls	r1, r3, #27
 800efca:	bf44      	itt	mi
 800efcc:	2220      	movmi	r2, #32
 800efce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800efd2:	071a      	lsls	r2, r3, #28
 800efd4:	bf44      	itt	mi
 800efd6:	222b      	movmi	r2, #43	; 0x2b
 800efd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800efdc:	782a      	ldrb	r2, [r5, #0]
 800efde:	2a2a      	cmp	r2, #42	; 0x2a
 800efe0:	d015      	beq.n	800f00e <_svfiprintf_r+0xea>
 800efe2:	9a07      	ldr	r2, [sp, #28]
 800efe4:	462f      	mov	r7, r5
 800efe6:	2000      	movs	r0, #0
 800efe8:	250a      	movs	r5, #10
 800efea:	4639      	mov	r1, r7
 800efec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eff0:	3b30      	subs	r3, #48	; 0x30
 800eff2:	2b09      	cmp	r3, #9
 800eff4:	d94d      	bls.n	800f092 <_svfiprintf_r+0x16e>
 800eff6:	b1b8      	cbz	r0, 800f028 <_svfiprintf_r+0x104>
 800eff8:	e00f      	b.n	800f01a <_svfiprintf_r+0xf6>
 800effa:	462f      	mov	r7, r5
 800effc:	e7b8      	b.n	800ef70 <_svfiprintf_r+0x4c>
 800effe:	4a40      	ldr	r2, [pc, #256]	; (800f100 <_svfiprintf_r+0x1dc>)
 800f000:	1a80      	subs	r0, r0, r2
 800f002:	fa0b f000 	lsl.w	r0, fp, r0
 800f006:	4318      	orrs	r0, r3
 800f008:	9004      	str	r0, [sp, #16]
 800f00a:	463d      	mov	r5, r7
 800f00c:	e7d3      	b.n	800efb6 <_svfiprintf_r+0x92>
 800f00e:	9a03      	ldr	r2, [sp, #12]
 800f010:	1d11      	adds	r1, r2, #4
 800f012:	6812      	ldr	r2, [r2, #0]
 800f014:	9103      	str	r1, [sp, #12]
 800f016:	2a00      	cmp	r2, #0
 800f018:	db01      	blt.n	800f01e <_svfiprintf_r+0xfa>
 800f01a:	9207      	str	r2, [sp, #28]
 800f01c:	e004      	b.n	800f028 <_svfiprintf_r+0x104>
 800f01e:	4252      	negs	r2, r2
 800f020:	f043 0302 	orr.w	r3, r3, #2
 800f024:	9207      	str	r2, [sp, #28]
 800f026:	9304      	str	r3, [sp, #16]
 800f028:	783b      	ldrb	r3, [r7, #0]
 800f02a:	2b2e      	cmp	r3, #46	; 0x2e
 800f02c:	d10c      	bne.n	800f048 <_svfiprintf_r+0x124>
 800f02e:	787b      	ldrb	r3, [r7, #1]
 800f030:	2b2a      	cmp	r3, #42	; 0x2a
 800f032:	d133      	bne.n	800f09c <_svfiprintf_r+0x178>
 800f034:	9b03      	ldr	r3, [sp, #12]
 800f036:	1d1a      	adds	r2, r3, #4
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	9203      	str	r2, [sp, #12]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	bfb8      	it	lt
 800f040:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f044:	3702      	adds	r7, #2
 800f046:	9305      	str	r3, [sp, #20]
 800f048:	4d2e      	ldr	r5, [pc, #184]	; (800f104 <_svfiprintf_r+0x1e0>)
 800f04a:	7839      	ldrb	r1, [r7, #0]
 800f04c:	2203      	movs	r2, #3
 800f04e:	4628      	mov	r0, r5
 800f050:	f7f1 f8ee 	bl	8000230 <memchr>
 800f054:	b138      	cbz	r0, 800f066 <_svfiprintf_r+0x142>
 800f056:	2340      	movs	r3, #64	; 0x40
 800f058:	1b40      	subs	r0, r0, r5
 800f05a:	fa03 f000 	lsl.w	r0, r3, r0
 800f05e:	9b04      	ldr	r3, [sp, #16]
 800f060:	4303      	orrs	r3, r0
 800f062:	3701      	adds	r7, #1
 800f064:	9304      	str	r3, [sp, #16]
 800f066:	7839      	ldrb	r1, [r7, #0]
 800f068:	4827      	ldr	r0, [pc, #156]	; (800f108 <_svfiprintf_r+0x1e4>)
 800f06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f06e:	2206      	movs	r2, #6
 800f070:	1c7e      	adds	r6, r7, #1
 800f072:	f7f1 f8dd 	bl	8000230 <memchr>
 800f076:	2800      	cmp	r0, #0
 800f078:	d038      	beq.n	800f0ec <_svfiprintf_r+0x1c8>
 800f07a:	4b24      	ldr	r3, [pc, #144]	; (800f10c <_svfiprintf_r+0x1e8>)
 800f07c:	bb13      	cbnz	r3, 800f0c4 <_svfiprintf_r+0x1a0>
 800f07e:	9b03      	ldr	r3, [sp, #12]
 800f080:	3307      	adds	r3, #7
 800f082:	f023 0307 	bic.w	r3, r3, #7
 800f086:	3308      	adds	r3, #8
 800f088:	9303      	str	r3, [sp, #12]
 800f08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f08c:	444b      	add	r3, r9
 800f08e:	9309      	str	r3, [sp, #36]	; 0x24
 800f090:	e76d      	b.n	800ef6e <_svfiprintf_r+0x4a>
 800f092:	fb05 3202 	mla	r2, r5, r2, r3
 800f096:	2001      	movs	r0, #1
 800f098:	460f      	mov	r7, r1
 800f09a:	e7a6      	b.n	800efea <_svfiprintf_r+0xc6>
 800f09c:	2300      	movs	r3, #0
 800f09e:	3701      	adds	r7, #1
 800f0a0:	9305      	str	r3, [sp, #20]
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	250a      	movs	r5, #10
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0ac:	3a30      	subs	r2, #48	; 0x30
 800f0ae:	2a09      	cmp	r2, #9
 800f0b0:	d903      	bls.n	800f0ba <_svfiprintf_r+0x196>
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d0c8      	beq.n	800f048 <_svfiprintf_r+0x124>
 800f0b6:	9105      	str	r1, [sp, #20]
 800f0b8:	e7c6      	b.n	800f048 <_svfiprintf_r+0x124>
 800f0ba:	fb05 2101 	mla	r1, r5, r1, r2
 800f0be:	2301      	movs	r3, #1
 800f0c0:	4607      	mov	r7, r0
 800f0c2:	e7f0      	b.n	800f0a6 <_svfiprintf_r+0x182>
 800f0c4:	ab03      	add	r3, sp, #12
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	4b11      	ldr	r3, [pc, #68]	; (800f110 <_svfiprintf_r+0x1ec>)
 800f0cc:	a904      	add	r1, sp, #16
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	f7fd fdc8 	bl	800cc64 <_printf_float>
 800f0d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f0d8:	4681      	mov	r9, r0
 800f0da:	d1d6      	bne.n	800f08a <_svfiprintf_r+0x166>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	065b      	lsls	r3, r3, #25
 800f0e0:	f53f af35 	bmi.w	800ef4e <_svfiprintf_r+0x2a>
 800f0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0e6:	b01d      	add	sp, #116	; 0x74
 800f0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ec:	ab03      	add	r3, sp, #12
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	4622      	mov	r2, r4
 800f0f2:	4b07      	ldr	r3, [pc, #28]	; (800f110 <_svfiprintf_r+0x1ec>)
 800f0f4:	a904      	add	r1, sp, #16
 800f0f6:	4640      	mov	r0, r8
 800f0f8:	f7fe f86a 	bl	800d1d0 <_printf_i>
 800f0fc:	e7ea      	b.n	800f0d4 <_svfiprintf_r+0x1b0>
 800f0fe:	bf00      	nop
 800f100:	080104b4 	.word	0x080104b4
 800f104:	080104ba 	.word	0x080104ba
 800f108:	080104be 	.word	0x080104be
 800f10c:	0800cc65 	.word	0x0800cc65
 800f110:	0800ee71 	.word	0x0800ee71

0800f114 <_sbrk_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4c06      	ldr	r4, [pc, #24]	; (800f130 <_sbrk_r+0x1c>)
 800f118:	2300      	movs	r3, #0
 800f11a:	4605      	mov	r5, r0
 800f11c:	4608      	mov	r0, r1
 800f11e:	6023      	str	r3, [r4, #0]
 800f120:	f7f6 ffde 	bl	80060e0 <_sbrk>
 800f124:	1c43      	adds	r3, r0, #1
 800f126:	d102      	bne.n	800f12e <_sbrk_r+0x1a>
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	b103      	cbz	r3, 800f12e <_sbrk_r+0x1a>
 800f12c:	602b      	str	r3, [r5, #0]
 800f12e:	bd38      	pop	{r3, r4, r5, pc}
 800f130:	2000273c 	.word	0x2000273c

0800f134 <__sread>:
 800f134:	b510      	push	{r4, lr}
 800f136:	460c      	mov	r4, r1
 800f138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f13c:	f000 f8e8 	bl	800f310 <_read_r>
 800f140:	2800      	cmp	r0, #0
 800f142:	bfab      	itete	ge
 800f144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f146:	89a3      	ldrhlt	r3, [r4, #12]
 800f148:	181b      	addge	r3, r3, r0
 800f14a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f14e:	bfac      	ite	ge
 800f150:	6563      	strge	r3, [r4, #84]	; 0x54
 800f152:	81a3      	strhlt	r3, [r4, #12]
 800f154:	bd10      	pop	{r4, pc}

0800f156 <__swrite>:
 800f156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	461f      	mov	r7, r3
 800f15c:	898b      	ldrh	r3, [r1, #12]
 800f15e:	05db      	lsls	r3, r3, #23
 800f160:	4605      	mov	r5, r0
 800f162:	460c      	mov	r4, r1
 800f164:	4616      	mov	r6, r2
 800f166:	d505      	bpl.n	800f174 <__swrite+0x1e>
 800f168:	2302      	movs	r3, #2
 800f16a:	2200      	movs	r2, #0
 800f16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f170:	f000 f868 	bl	800f244 <_lseek_r>
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f17a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f17e:	81a3      	strh	r3, [r4, #12]
 800f180:	4632      	mov	r2, r6
 800f182:	463b      	mov	r3, r7
 800f184:	4628      	mov	r0, r5
 800f186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f18a:	f000 b817 	b.w	800f1bc <_write_r>

0800f18e <__sseek>:
 800f18e:	b510      	push	{r4, lr}
 800f190:	460c      	mov	r4, r1
 800f192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f196:	f000 f855 	bl	800f244 <_lseek_r>
 800f19a:	1c43      	adds	r3, r0, #1
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	bf15      	itete	ne
 800f1a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1aa:	81a3      	strheq	r3, [r4, #12]
 800f1ac:	bf18      	it	ne
 800f1ae:	81a3      	strhne	r3, [r4, #12]
 800f1b0:	bd10      	pop	{r4, pc}

0800f1b2 <__sclose>:
 800f1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b6:	f000 b813 	b.w	800f1e0 <_close_r>
	...

0800f1bc <_write_r>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	4c07      	ldr	r4, [pc, #28]	; (800f1dc <_write_r+0x20>)
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	4608      	mov	r0, r1
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	6022      	str	r2, [r4, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	f7f6 fbc5 	bl	800595a <_write>
 800f1d0:	1c43      	adds	r3, r0, #1
 800f1d2:	d102      	bne.n	800f1da <_write_r+0x1e>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	b103      	cbz	r3, 800f1da <_write_r+0x1e>
 800f1d8:	602b      	str	r3, [r5, #0]
 800f1da:	bd38      	pop	{r3, r4, r5, pc}
 800f1dc:	2000273c 	.word	0x2000273c

0800f1e0 <_close_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4c06      	ldr	r4, [pc, #24]	; (800f1fc <_close_r+0x1c>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	6023      	str	r3, [r4, #0]
 800f1ec:	f7f6 ff43 	bl	8006076 <_close>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_close_r+0x1a>
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_close_r+0x1a>
 800f1f8:	602b      	str	r3, [r5, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	2000273c 	.word	0x2000273c

0800f200 <_fstat_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4c07      	ldr	r4, [pc, #28]	; (800f220 <_fstat_r+0x20>)
 800f204:	2300      	movs	r3, #0
 800f206:	4605      	mov	r5, r0
 800f208:	4608      	mov	r0, r1
 800f20a:	4611      	mov	r1, r2
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	f7f6 ff3e 	bl	800608e <_fstat>
 800f212:	1c43      	adds	r3, r0, #1
 800f214:	d102      	bne.n	800f21c <_fstat_r+0x1c>
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	b103      	cbz	r3, 800f21c <_fstat_r+0x1c>
 800f21a:	602b      	str	r3, [r5, #0]
 800f21c:	bd38      	pop	{r3, r4, r5, pc}
 800f21e:	bf00      	nop
 800f220:	2000273c 	.word	0x2000273c

0800f224 <_isatty_r>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	4c06      	ldr	r4, [pc, #24]	; (800f240 <_isatty_r+0x1c>)
 800f228:	2300      	movs	r3, #0
 800f22a:	4605      	mov	r5, r0
 800f22c:	4608      	mov	r0, r1
 800f22e:	6023      	str	r3, [r4, #0]
 800f230:	f7f6 ff3d 	bl	80060ae <_isatty>
 800f234:	1c43      	adds	r3, r0, #1
 800f236:	d102      	bne.n	800f23e <_isatty_r+0x1a>
 800f238:	6823      	ldr	r3, [r4, #0]
 800f23a:	b103      	cbz	r3, 800f23e <_isatty_r+0x1a>
 800f23c:	602b      	str	r3, [r5, #0]
 800f23e:	bd38      	pop	{r3, r4, r5, pc}
 800f240:	2000273c 	.word	0x2000273c

0800f244 <_lseek_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	4c07      	ldr	r4, [pc, #28]	; (800f264 <_lseek_r+0x20>)
 800f248:	4605      	mov	r5, r0
 800f24a:	4608      	mov	r0, r1
 800f24c:	4611      	mov	r1, r2
 800f24e:	2200      	movs	r2, #0
 800f250:	6022      	str	r2, [r4, #0]
 800f252:	461a      	mov	r2, r3
 800f254:	f7f6 ff36 	bl	80060c4 <_lseek>
 800f258:	1c43      	adds	r3, r0, #1
 800f25a:	d102      	bne.n	800f262 <_lseek_r+0x1e>
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	b103      	cbz	r3, 800f262 <_lseek_r+0x1e>
 800f260:	602b      	str	r3, [r5, #0]
 800f262:	bd38      	pop	{r3, r4, r5, pc}
 800f264:	2000273c 	.word	0x2000273c

0800f268 <__ascii_mbtowc>:
 800f268:	b082      	sub	sp, #8
 800f26a:	b901      	cbnz	r1, 800f26e <__ascii_mbtowc+0x6>
 800f26c:	a901      	add	r1, sp, #4
 800f26e:	b142      	cbz	r2, 800f282 <__ascii_mbtowc+0x1a>
 800f270:	b14b      	cbz	r3, 800f286 <__ascii_mbtowc+0x1e>
 800f272:	7813      	ldrb	r3, [r2, #0]
 800f274:	600b      	str	r3, [r1, #0]
 800f276:	7812      	ldrb	r2, [r2, #0]
 800f278:	1c10      	adds	r0, r2, #0
 800f27a:	bf18      	it	ne
 800f27c:	2001      	movne	r0, #1
 800f27e:	b002      	add	sp, #8
 800f280:	4770      	bx	lr
 800f282:	4610      	mov	r0, r2
 800f284:	e7fb      	b.n	800f27e <__ascii_mbtowc+0x16>
 800f286:	f06f 0001 	mvn.w	r0, #1
 800f28a:	e7f8      	b.n	800f27e <__ascii_mbtowc+0x16>

0800f28c <memmove>:
 800f28c:	4288      	cmp	r0, r1
 800f28e:	b510      	push	{r4, lr}
 800f290:	eb01 0302 	add.w	r3, r1, r2
 800f294:	d807      	bhi.n	800f2a6 <memmove+0x1a>
 800f296:	1e42      	subs	r2, r0, #1
 800f298:	4299      	cmp	r1, r3
 800f29a:	d00a      	beq.n	800f2b2 <memmove+0x26>
 800f29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f2a4:	e7f8      	b.n	800f298 <memmove+0xc>
 800f2a6:	4283      	cmp	r3, r0
 800f2a8:	d9f5      	bls.n	800f296 <memmove+0xa>
 800f2aa:	1881      	adds	r1, r0, r2
 800f2ac:	1ad2      	subs	r2, r2, r3
 800f2ae:	42d3      	cmn	r3, r2
 800f2b0:	d100      	bne.n	800f2b4 <memmove+0x28>
 800f2b2:	bd10      	pop	{r4, pc}
 800f2b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f2bc:	e7f7      	b.n	800f2ae <memmove+0x22>

0800f2be <__malloc_lock>:
 800f2be:	4770      	bx	lr

0800f2c0 <__malloc_unlock>:
 800f2c0:	4770      	bx	lr

0800f2c2 <_realloc_r>:
 800f2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2c4:	4607      	mov	r7, r0
 800f2c6:	4614      	mov	r4, r2
 800f2c8:	460e      	mov	r6, r1
 800f2ca:	b921      	cbnz	r1, 800f2d6 <_realloc_r+0x14>
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f2d2:	f7ff bd73 	b.w	800edbc <_malloc_r>
 800f2d6:	b922      	cbnz	r2, 800f2e2 <_realloc_r+0x20>
 800f2d8:	f7ff fd22 	bl	800ed20 <_free_r>
 800f2dc:	4625      	mov	r5, r4
 800f2de:	4628      	mov	r0, r5
 800f2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2e2:	f000 f834 	bl	800f34e <_malloc_usable_size_r>
 800f2e6:	42a0      	cmp	r0, r4
 800f2e8:	d20f      	bcs.n	800f30a <_realloc_r+0x48>
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	f7ff fd65 	bl	800edbc <_malloc_r>
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d0f2      	beq.n	800f2de <_realloc_r+0x1c>
 800f2f8:	4631      	mov	r1, r6
 800f2fa:	4622      	mov	r2, r4
 800f2fc:	f7ff fa1c 	bl	800e738 <memcpy>
 800f300:	4631      	mov	r1, r6
 800f302:	4638      	mov	r0, r7
 800f304:	f7ff fd0c 	bl	800ed20 <_free_r>
 800f308:	e7e9      	b.n	800f2de <_realloc_r+0x1c>
 800f30a:	4635      	mov	r5, r6
 800f30c:	e7e7      	b.n	800f2de <_realloc_r+0x1c>
	...

0800f310 <_read_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4c07      	ldr	r4, [pc, #28]	; (800f330 <_read_r+0x20>)
 800f314:	4605      	mov	r5, r0
 800f316:	4608      	mov	r0, r1
 800f318:	4611      	mov	r1, r2
 800f31a:	2200      	movs	r2, #0
 800f31c:	6022      	str	r2, [r4, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	f7f6 fe8c 	bl	800603c <_read>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d102      	bne.n	800f32e <_read_r+0x1e>
 800f328:	6823      	ldr	r3, [r4, #0]
 800f32a:	b103      	cbz	r3, 800f32e <_read_r+0x1e>
 800f32c:	602b      	str	r3, [r5, #0]
 800f32e:	bd38      	pop	{r3, r4, r5, pc}
 800f330:	2000273c 	.word	0x2000273c

0800f334 <__ascii_wctomb>:
 800f334:	b149      	cbz	r1, 800f34a <__ascii_wctomb+0x16>
 800f336:	2aff      	cmp	r2, #255	; 0xff
 800f338:	bf85      	ittet	hi
 800f33a:	238a      	movhi	r3, #138	; 0x8a
 800f33c:	6003      	strhi	r3, [r0, #0]
 800f33e:	700a      	strbls	r2, [r1, #0]
 800f340:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f344:	bf98      	it	ls
 800f346:	2001      	movls	r0, #1
 800f348:	4770      	bx	lr
 800f34a:	4608      	mov	r0, r1
 800f34c:	4770      	bx	lr

0800f34e <_malloc_usable_size_r>:
 800f34e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f352:	1f18      	subs	r0, r3, #4
 800f354:	2b00      	cmp	r3, #0
 800f356:	bfbc      	itt	lt
 800f358:	580b      	ldrlt	r3, [r1, r0]
 800f35a:	18c0      	addlt	r0, r0, r3
 800f35c:	4770      	bx	lr
	...

0800f360 <_init>:
 800f360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f362:	bf00      	nop
 800f364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f366:	bc08      	pop	{r3}
 800f368:	469e      	mov	lr, r3
 800f36a:	4770      	bx	lr

0800f36c <_fini>:
 800f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36e:	bf00      	nop
 800f370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f372:	bc08      	pop	{r3}
 800f374:	469e      	mov	lr, r3
 800f376:	4770      	bx	lr
